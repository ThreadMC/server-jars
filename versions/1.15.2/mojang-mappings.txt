# (c) 2020 Microsoft Corporation. These mappings are provided "as-is" and you bear the risk of using them. You may copy and use the mappings for development purposes, but you may not redistribute the mappings complete and unmodified. Microsoft makes no warranties, express or implied, with respect to the mappings provided here.  Use and modification of this document or the source code (in any form) of Minecraft: Java Edition is governed by the Minecraft End User License Agreement available at https://account.mojang.com/documents/minecraft_eula.
com.mojang.math.Matrix3f -> a:
    float G -> j
    float CS -> k
    float SS -> l
    float SQ2 -> m
    float m00 -> a
    float m01 -> b
    float m02 -> c
    float m10 -> d
    float m11 -> e
    float m12 -> f
    float m20 -> g
    float m21 -> h
    float m22 -> i
    32:33:void <init>() -> <init>
    36:66:void <init>(com.mojang.math.Quaternion) -> <init>
    76:88:void <init>(com.mojang.math.Matrix4f) -> <init>
    90:102:void <init>(com.mojang.math.Matrix3f) -> <init>
    105:112:com.mojang.datafixers.util.Pair approxGivensQuat(float,float,float) -> a
    117:129:com.mojang.datafixers.util.Pair qrGivensQuat(float,float) -> a
    133:208:com.mojang.math.Quaternion stepJacobi(com.mojang.math.Matrix3f) -> c
    272:283:void transpose() -> a
    290:383:org.apache.commons.lang3.tuple.Triple svdDecompose() -> b
    388:398:boolean equals(java.lang.Object) -> equals
    403:412:int hashCode() -> hashCode
    456:467:void load(com.mojang.math.Matrix3f) -> a
    471:493:java.lang.String toString() -> toString
    533:544:void setIdentity() -> c
    600:619:void mul(com.mojang.math.Matrix3f) -> b
    672:672:com.mojang.math.Matrix3f copy() -> d
    15:18:void <clinit>() -> <clinit>
com.mojang.math.Matrix4f -> b:
    float m00 -> a
    float m01 -> b
    float m02 -> c
    float m03 -> d
    float m10 -> e
    float m11 -> f
    float m12 -> g
    float m13 -> h
    float m20 -> i
    float m21 -> j
    float m22 -> k
    float m23 -> l
    float m30 -> m
    float m31 -> n
    float m32 -> o
    float m33 -> p
    28:29:void <init>() -> <init>
    31:51:void <init>(com.mojang.math.Matrix4f) -> <init>
    54:85:void <init>(com.mojang.math.Quaternion) -> <init>
    112:123:boolean equals(java.lang.Object) -> equals
    128:144:int hashCode() -> hashCode
    227:264:java.lang.String toString() -> toString
    321:340:void setIdentity() -> a
    347:404:float adjugateAndDet() -> b
    457:462:boolean invert() -> c
    466:502:void multiply(com.mojang.math.Matrix4f) -> a
    509:528:void multiply(float) -> a
    613:613:com.mojang.math.Matrix4f copy() -> d
    617:622:com.mojang.math.Matrix4f createScaleMatrix(float,float,float) -> a
    626:635:com.mojang.math.Matrix4f createTranslateMatrix(float,float,float) -> b
com.mojang.math.Quaternion -> c:
    com.mojang.math.Quaternion ONE -> a
    float i -> b
    float j -> c
    float k -> d
    float r -> e
    15:20:void <init>(float,float,float,float) -> <init>
    22:31:void <init>(com.mojang.math.Vector3f,float,boolean) -> <init>
    57:62:void <init>(com.mojang.math.Quaternion) -> <init>
    144:160:boolean equals(java.lang.Object) -> equals
    165:169:int hashCode() -> hashCode
    174:179:java.lang.String toString() -> toString
    183:183:float i() -> a
    187:187:float j() -> b
    191:191:float k() -> c
    195:195:float r() -> d
    202:216:void mul(com.mojang.math.Quaternion) -> a
    219:223:void mul(float) -> a
    226:229:void conj() -> e
    239:239:float cos(float) -> b
    243:243:float sin(float) -> c
    247:260:void normalize() -> f
    267:267:com.mojang.math.Quaternion copy() -> g
    8:8:void <clinit>() -> <clinit>
com.mojang.math.Transformation -> d:
    com.mojang.math.Matrix4f matrix -> a
    boolean decomposed -> b
    com.mojang.math.Vector3f translation -> c
    com.mojang.math.Quaternion leftRotation -> d
    com.mojang.math.Vector3f scale -> e
    com.mojang.math.Quaternion rightRotation -> f
    com.mojang.math.Transformation IDENTITY -> g
    36:42:void <init>(com.mojang.math.Matrix4f) -> <init>
    44:51:void <init>(com.mojang.math.Vector3f,com.mojang.math.Quaternion,com.mojang.math.Vector3f,com.mojang.math.Quaternion) -> <init>
    62:62:com.mojang.math.Transformation identity() -> a
    66:68:com.mojang.math.Transformation compose(com.mojang.math.Transformation) -> a
    73:80:com.mojang.math.Transformation inverse() -> b
    84:93:void ensureDecomposed() -> e
    96:112:com.mojang.math.Matrix4f compose(com.mojang.math.Vector3f,com.mojang.math.Quaternion,com.mojang.math.Vector3f,com.mojang.math.Quaternion) -> a
    119:122:com.mojang.datafixers.util.Pair toAffine(com.mojang.math.Matrix4f) -> a
    126:126:com.mojang.math.Matrix4f getMatrix() -> c
    137:138:com.mojang.math.Quaternion getLeftRotation() -> d
    155:162:boolean equals(java.lang.Object) -> equals
    167:167:int hashCode() -> hashCode
    54:58:com.mojang.math.Transformation lambda$static$0() -> f
    53:53:void <clinit>() -> <clinit>
com.mojang.math.Vector3f -> e:
    com.mojang.math.Vector3f XN -> a
    com.mojang.math.Vector3f XP -> b
    com.mojang.math.Vector3f YN -> c
    com.mojang.math.Vector3f YP -> d
    com.mojang.math.Vector3f ZN -> e
    com.mojang.math.Vector3f ZP -> f
    float x -> g
    float y -> h
    float z -> i
    19:20:void <init>() -> <init>
    22:26:void <init>(float,float,float) -> <init>
    33:34:void <init>(net.minecraft.world.phys.Vec3) -> <init>
    38:52:boolean equals(java.lang.Object) -> equals
    57:60:int hashCode() -> hashCode
    64:64:float x() -> a
    68:68:float y() -> b
    72:72:float z() -> c
    100:103:void set(float,float,float) -> a
    180:187:void transform(com.mojang.math.Quaternion) -> a
    201:201:com.mojang.math.Quaternion rotationDegrees(float) -> a
    216:216:java.lang.String toString() -> toString
    8:13:void <clinit>() -> <clinit>
com.mojang.math.Vector4f -> f:
    float x -> a
    float y -> b
    float z -> c
    float w -> d
    11:12:void <init>() -> <init>
    14:19:void <init>(float,float,float,float) -> <init>
    27:44:boolean equals(java.lang.Object) -> equals
    49:53:int hashCode() -> hashCode
    57:57:float x() -> a
    61:61:float y() -> b
    65:65:float z() -> c
    121:129:void transform(com.mojang.math.Matrix4f) -> a
    162:162:java.lang.String toString() -> toString
net.minecraft.ChatFormatting -> g:
    net.minecraft.ChatFormatting BLACK -> a
    net.minecraft.ChatFormatting DARK_BLUE -> b
    net.minecraft.ChatFormatting DARK_GREEN -> c
    net.minecraft.ChatFormatting DARK_AQUA -> d
    net.minecraft.ChatFormatting DARK_RED -> e
    net.minecraft.ChatFormatting DARK_PURPLE -> f
    net.minecraft.ChatFormatting GOLD -> g
    net.minecraft.ChatFormatting GRAY -> h
    net.minecraft.ChatFormatting DARK_GRAY -> i
    net.minecraft.ChatFormatting BLUE -> j
    net.minecraft.ChatFormatting GREEN -> k
    net.minecraft.ChatFormatting AQUA -> l
    net.minecraft.ChatFormatting RED -> m
    net.minecraft.ChatFormatting LIGHT_PURPLE -> n
    net.minecraft.ChatFormatting YELLOW -> o
    net.minecraft.ChatFormatting WHITE -> p
    net.minecraft.ChatFormatting OBFUSCATED -> q
    net.minecraft.ChatFormatting BOLD -> r
    net.minecraft.ChatFormatting STRIKETHROUGH -> s
    net.minecraft.ChatFormatting UNDERLINE -> t
    net.minecraft.ChatFormatting ITALIC -> u
    net.minecraft.ChatFormatting RESET -> v
    java.util.Map FORMATTING_BY_NAME -> w
    java.util.regex.Pattern STRIP_FORMATTING_PATTERN -> x
    java.lang.String name -> y
    char code -> z
    boolean isFormat -> A
    java.lang.String toString -> B
    int id -> C
    java.lang.Integer color -> D
    net.minecraft.ChatFormatting[] $VALUES -> E
    14:14:net.minecraft.ChatFormatting[] values() -> values
    14:14:net.minecraft.ChatFormatting valueOf(java.lang.String) -> valueOf
    43:43:java.lang.String cleanName(java.lang.String) -> d
    55:56:void <init>(java.lang.String,int,java.lang.String,char,int,java.lang.Integer) -> <init>
    59:60:void <init>(java.lang.String,int,java.lang.String,char,boolean) -> <init>
    62:70:void <init>(java.lang.String,int,java.lang.String,char,boolean,int,java.lang.Integer) -> <init>
    73:93:java.lang.String getLastColors(java.lang.String) -> a
    97:97:char getChar() -> a
    101:101:int getId() -> b
    105:105:boolean isFormat() -> c
    109:109:boolean isColor() -> d
    114:114:java.lang.Integer getColor() -> e
    118:118:boolean shouldReset() -> f
    122:122:java.lang.String getName() -> g
    127:127:java.lang.String toString() -> toString
    132:132:java.lang.String stripFormatting(java.lang.String) -> b
    137:140:net.minecraft.ChatFormatting getByName(java.lang.String) -> c
    145:153:net.minecraft.ChatFormatting getById(int) -> a
    158:164:net.minecraft.ChatFormatting getByCode(char) -> a
    168:180:java.util.Collection getNames(boolean,boolean) -> a
    39:39:net.minecraft.ChatFormatting lambda$static$1(net.minecraft.ChatFormatting) -> a
    39:39:java.lang.String lambda$static$0(net.minecraft.ChatFormatting) -> b
    14:40:void <clinit>() -> <clinit>
net.minecraft.CrashReport -> h:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.lang.String title -> b
    java.lang.Throwable exception -> c
    net.minecraft.CrashReportCategory systemDetails -> d
    java.util.List details -> e
    java.io.File saveFile -> f
    boolean trackingStackTrace -> g
    java.lang.StackTraceElement[] uncategorizedStackTrace -> h
    27:38:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    41:65:void initDetails() -> i
    68:68:java.lang.String getTitle() -> a
    72:72:java.lang.Throwable getException() -> b
    76:80:java.lang.String getDetails() -> c
    84:106:void getDetails(java.lang.StringBuilder) -> a
    109:134:java.lang.String getExceptionMessage() -> d
    138:162:java.lang.String getFriendlyReport() -> e
    166:166:java.io.File getSaveFile() -> f
    170:189:boolean saveToFile(java.io.File) -> a
    193:193:net.minecraft.CrashReportCategory getSystemDetails() -> g
    197:197:net.minecraft.CrashReportCategory addCategory(java.lang.String) -> a
    201:236:net.minecraft.CrashReportCategory addCategory(java.lang.String,int) -> a
    241:281:java.lang.String getErrorComment() -> j
    288:298:net.minecraft.CrashReport forThrowable(java.lang.Throwable,java.lang.String) -> a
    302:303:void preload() -> h
    62:63:java.lang.String lambda$initDetails$6() -> k
    48:56:java.lang.String lambda$initDetails$5() -> l
    45:45:java.lang.String lambda$initDetails$4() -> m
    44:44:java.lang.String lambda$initDetails$3() -> n
    43:43:java.lang.String lambda$initDetails$2() -> o
    42:42:java.lang.String lambda$initDetails$1() -> p
    41:41:java.lang.String lambda$initDetails$0() -> q
    23:23:void <clinit>() -> <clinit>
net.minecraft.CrashReportCategory -> i:
    net.minecraft.CrashReport report -> a
    java.lang.String title -> b
    java.util.List entries -> c
    java.lang.StackTraceElement[] stackTrace -> d
    14:20:void <init>(net.minecraft.CrashReport,java.lang.String) -> <init>
    23:23:java.lang.String formatLocation(double,double,double) -> a
    27:27:java.lang.String formatLocation(net.minecraft.core.BlockPos) -> a
    31:74:java.lang.String formatLocation(int,int,int) -> a
    79:83:net.minecraft.CrashReportCategory setDetail(java.lang.String,net.minecraft.CrashReportDetail) -> a
    87:88:net.minecraft.CrashReportCategory setDetail(java.lang.String,java.lang.Object) -> a
    92:93:void setDetailError(java.lang.String,java.lang.Throwable) -> a
    96:105:int fillInStackTrace(int) -> a
    109:133:boolean validateStackTrace(java.lang.StackTraceElement,java.lang.StackTraceElement) -> a
    137:140:void trimStacktrace(int) -> b
    143:161:void getDetails(java.lang.StringBuilder) -> a
    164:164:java.lang.StackTraceElement[] getStacktrace() -> a
    168:173:void populateBlockDetails(net.minecraft.CrashReportCategory,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    172:172:java.lang.String lambda$populateBlockDetails$0(net.minecraft.core.BlockPos) -> b
net.minecraft.CrashReportCategory$Entry -> i$a:
    java.lang.String key -> a
    java.lang.String value -> b
    179:190:void <init>(java.lang.String,java.lang.Object) -> <init>
    193:193:java.lang.String getKey() -> a
    197:197:java.lang.String getValue() -> b
net.minecraft.CrashReportDetail -> j:
net.minecraft.DefaultUncaughtExceptionHandler -> k:
    org.apache.logging.log4j.Logger logger -> a
    8:10:void <init>(org.apache.logging.log4j.Logger) -> <init>
    14:15:void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
net.minecraft.DefaultUncaughtExceptionHandlerWithName -> l:
    org.apache.logging.log4j.Logger logger -> a
    8:10:void <init>(org.apache.logging.log4j.Logger) -> <init>
    14:16:void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
net.minecraft.DetectedVersion -> m:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.lang.String id -> b
    java.lang.String name -> c
    boolean stable -> d
    int worldVersion -> e
    int protocolVersion -> f
    int packVersion -> g
    java.util.Date buildTime -> h
    java.lang.String releaseTarget -> i
    29:38:void <init>() -> <init>
    40:49:void <init>(com.google.gson.JsonObject) -> <init>
    52:62:com.mojang.bridge.game.GameVersion tryDetectVersion() -> a
    68:68:java.lang.String getId() -> getId
    73:73:java.lang.String getName() -> getName
    78:78:java.lang.String getReleaseTarget() -> getReleaseTarget
    83:83:int getWorldVersion() -> getWorldVersion
    88:88:int getProtocolVersion() -> getProtocolVersion
    93:93:int getPackVersion() -> getPackVersion
    98:98:java.util.Date getBuildTime() -> getBuildTime
    103:103:boolean isStable() -> isStable
    18:18:void <clinit>() -> <clinit>
net.minecraft.FieldsAreNonnullByDefault -> n:
net.minecraft.FileUtil -> o:
    java.util.regex.Pattern COPY_COUNTER_PATTERN -> a
    java.util.regex.Pattern RESERVED_WINDOWS_FILENAMES -> b
    12:12:void <init>() -> <init>
    19:62:java.lang.String findAvailableName(java.nio.file.Path,java.lang.String,java.lang.String) -> a
    66:67:boolean isPathNormalized(java.nio.file.Path) -> a
    71:77:boolean isPathPortable(java.nio.file.Path) -> b
    81:88:java.nio.file.Path createPathToResource(java.nio.file.Path,java.lang.String,java.lang.String) -> b
    13:16:void <clinit>() -> <clinit>
net.minecraft.MethodsReturnNonnullByDefault -> p:
net.minecraft.ReportedException -> q:
    net.minecraft.CrashReport report -> a
    6:8:void <init>(net.minecraft.CrashReport) -> <init>
    11:11:net.minecraft.CrashReport getReport() -> a
    16:16:java.lang.Throwable getCause() -> getCause
    21:21:java.lang.String getMessage() -> getMessage
net.minecraft.ResourceLocationException -> r:
    5:6:void <init>(java.lang.String) -> <init>
    9:10:void <init>(java.lang.String,java.lang.Throwable) -> <init>
net.minecraft.SharedConstants -> s:
    io.netty.util.ResourceLeakDetector$Level NETTY_LEAK_DETECTION -> a
    boolean IS_RUNNING_IN_IDE -> b
    char[] ILLEGAL_FILE_CHARACTERS -> c
    com.mojang.bridge.game.GameVersion CURRENT_VERSION -> d
    10:10:void <init>() -> <init>
    87:87:boolean isAllowedChatCharacter(char) -> a
    99:107:java.lang.String filterText(java.lang.String) -> a
    111:123:java.lang.String filterUnicodeSupplementary(java.lang.String) -> b
    129:134:void setVersion(com.mojang.bridge.game.GameVersion) -> a
    137:140:com.mojang.bridge.game.GameVersion getCurrentVersion() -> a
    74:148:void <clinit>() -> <clinit>
net.minecraft.Util -> t:
    java.util.concurrent.atomic.AtomicInteger WORKER_COUNT -> b
    java.util.concurrent.ExecutorService BACKGROUND_EXECUTOR -> c
    java.util.function.LongSupplier timeSource -> a
    org.apache.logging.log4j.Logger LOGGER -> d
    51:51:void <init>() -> <init>
    59:59:java.util.stream.Collector toMap() -> a
    64:64:java.lang.String getPropertyName(net.minecraft.world.level.block.state.properties.Property,java.lang.Object) -> a
    68:71:java.lang.String makeDescriptionId(java.lang.String,net.minecraft.resources.ResourceLocation) -> a
    75:75:long getMillis() -> b
    79:79:long getNanos() -> c
    83:83:long getEpochMillis() -> d
    87:118:java.util.concurrent.ExecutorService makeBackgroundExecutor() -> k
    122:122:java.util.concurrent.Executor backgroundExecutor() -> e
    126:136:void shutdownBackgroundExecutor() -> f
    140:142:java.util.concurrent.CompletableFuture failedFuture(java.lang.Throwable) -> a
    146:146:void throwAsRuntime(java.lang.Throwable) -> b
    216:235:net.minecraft.Util$OS getPlatform() -> g
    239:240:java.util.stream.Stream getVmArguments() -> h
    244:244:java.lang.Object lastOf(java.util.List) -> a
    248:266:java.lang.Object findNextInIterable(java.lang.Iterable,java.lang.Object) -> a
    270:282:java.lang.Object findPreviousInIterable(java.lang.Iterable,java.lang.Object) -> b
    286:286:java.lang.Object make(java.util.function.Supplier) -> a
    290:291:java.lang.Object make(java.lang.Object,java.util.function.Consumer) -> a
    310:310:it.unimi.dsi.fastutil.Hash$Strategy identityStrategy() -> i
    314:331:java.util.concurrent.CompletableFuture sequence(java.util.List) -> b
    336:336:java.util.stream.Stream toStream(java.util.Optional) -> a
    340:345:java.util.Optional ifElse(java.util.Optional,java.util.function.Consumer,java.lang.Runnable) -> a
    363:363:java.lang.Runnable name(java.lang.Runnable,java.util.function.Supplier) -> a
    368:368:java.util.Optional readUUID(java.lang.String,com.mojang.datafixers.Dynamic) -> a
    376:378:com.mojang.datafixers.Dynamic writeUUID(java.lang.String,java.util.UUID,com.mojang.datafixers.Dynamic) -> a
    382:393:java.lang.Throwable pauseInIde(java.lang.Throwable) -> c
    397:402:java.lang.String describeError(java.lang.Throwable) -> d
    369:369:java.util.Optional lambda$readUUID$7(com.mojang.datafixers.Dynamic,java.lang.String,java.lang.Number) -> a
    370:370:java.util.UUID lambda$null$6(java.lang.Number,java.lang.Number) -> a
    331:331:java.util.List lambda$sequence$5(java.util.List,java.lang.Void) -> a
    320:329:void lambda$sequence$4(java.util.List,java.util.concurrent.CompletableFuture[],java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture) -> a
    323:328:void lambda$null$3(java.util.concurrent.CompletableFuture,java.util.List,int,java.lang.Object,java.lang.Throwable) -> a
    240:240:boolean lambda$getVmArguments$2(java.lang.String) -> a
    107:116:void lambda$makeBackgroundExecutor$1(java.lang.Thread,java.lang.Throwable) -> a
    93:105:java.util.concurrent.ForkJoinWorkerThread lambda$makeBackgroundExecutor$0(java.util.concurrent.ForkJoinPool) -> a
    51:51:org.apache.logging.log4j.Logger access$100() -> j
    52:56:void <clinit>() -> <clinit>
net.minecraft.Util$1 -> t$1:
    93:93:void <init>(java.util.concurrent.ForkJoinPool) -> <init>
    96:102:void onTermination(java.lang.Throwable) -> onTermination
net.minecraft.Util$IdentityStrategy -> t$a:
    net.minecraft.Util$IdentityStrategy INSTANCE -> a
    net.minecraft.Util$IdentityStrategy[] $VALUES -> b
    294:294:net.minecraft.Util$IdentityStrategy[] values() -> values
    294:294:net.minecraft.Util$IdentityStrategy valueOf(java.lang.String) -> valueOf
    294:294:void <init>(java.lang.String,int) -> <init>
    299:299:int hashCode(java.lang.Object) -> hashCode
    304:304:boolean equals(java.lang.Object,java.lang.Object) -> equals
    294:295:void <clinit>() -> <clinit>
net.minecraft.Util$OS -> t$b:
    net.minecraft.Util$OS LINUX -> a
    net.minecraft.Util$OS SOLARIS -> b
    net.minecraft.Util$OS WINDOWS -> c
    net.minecraft.Util$OS OSX -> d
    net.minecraft.Util$OS UNKNOWN -> e
    net.minecraft.Util$OS[] $VALUES -> f
    149:149:net.minecraft.Util$OS[] values() -> values
    149:149:net.minecraft.Util$OS valueOf(java.lang.String) -> valueOf
    149:149:void <init>(java.lang.String,int) -> <init>
    168:178:void openUrl(java.net.URL) -> a
    182:186:void openUri(java.net.URI) -> a
    190:194:void openFile(java.io.File) -> a
    197:202:java.lang.String[] getOpenUrlArguments(java.net.URL) -> b
    207:212:void openUri(java.lang.String) -> a
    168:168:java.lang.Process lambda$openUrl$0(java.net.URL) -> c
    149:149:void <init>(java.lang.String,int,net.minecraft.Util$1) -> <init>
    149:164:void <clinit>() -> <clinit>
net.minecraft.Util$OS$1 -> t$b$1:
    152:152:void <init>(java.lang.String,int) -> <init>
    155:155:java.lang.String[] getOpenUrlArguments(java.net.URL) -> b
net.minecraft.Util$OS$2 -> t$b$2:
    158:158:void <init>(java.lang.String,int) -> <init>
    161:161:java.lang.String[] getOpenUrlArguments(java.net.URL) -> b
net.minecraft.advancements.Advancement -> u:
    net.minecraft.advancements.Advancement parent -> a
    net.minecraft.advancements.DisplayInfo display -> b
    net.minecraft.advancements.AdvancementRewards rewards -> c
    net.minecraft.resources.ResourceLocation id -> d
    java.util.Map criteria -> e
    java.lang.String[][] requirements -> f
    java.util.Set children -> g
    net.minecraft.network.chat.Component chatComponent -> h
    35:60:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.advancements.Advancement,net.minecraft.advancements.DisplayInfo,net.minecraft.advancements.AdvancementRewards,java.util.Map,java.lang.String[][]) -> <init>
    63:63:net.minecraft.advancements.Advancement$Builder deconstruct() -> a
    68:68:net.minecraft.advancements.Advancement getParent() -> b
    73:73:net.minecraft.advancements.DisplayInfo getDisplay() -> c
    77:77:net.minecraft.advancements.AdvancementRewards getRewards() -> d
    82:88:java.lang.String toString() -> toString
    93:93:java.lang.Iterable getChildren() -> e
    97:97:java.util.Map getCriteria() -> f
    101:101:int getMaxCriteraRequired() -> g
    105:106:void addChild(net.minecraft.advancements.Advancement) -> a
    109:109:net.minecraft.resources.ResourceLocation getId() -> h
    114:121:boolean equals(java.lang.Object) -> equals
    126:126:int hashCode() -> hashCode
    130:130:java.lang.String[][] getRequirements() -> i
    134:134:net.minecraft.network.chat.Component getChatComponent() -> j
    56:56:void lambda$new$0(net.minecraft.network.chat.Component,net.minecraft.network.chat.Style) -> a
net.minecraft.advancements.Advancement$1 -> u$1:
net.minecraft.advancements.Advancement$Builder -> u$a:
    net.minecraft.resources.ResourceLocation parentId -> a
    net.minecraft.advancements.Advancement parent -> b
    net.minecraft.advancements.DisplayInfo display -> c
    net.minecraft.advancements.AdvancementRewards rewards -> d
    java.util.Map criteria -> e
    java.lang.String[][] requirements -> f
    net.minecraft.advancements.RequirementsStrategy requirementsStrategy -> g
    141:152:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.advancements.DisplayInfo,net.minecraft.advancements.AdvancementRewards,java.util.Map,java.lang.String[][]) -> <init>
    141:155:void <init>() -> <init>
    158:158:net.minecraft.advancements.Advancement$Builder advancement() -> a
    162:163:net.minecraft.advancements.Advancement$Builder parent(net.minecraft.advancements.Advancement) -> a
    167:168:net.minecraft.advancements.Advancement$Builder parent(net.minecraft.resources.ResourceLocation) -> a
    172:172:net.minecraft.advancements.Advancement$Builder display(net.minecraft.world.item.ItemStack,net.minecraft.network.chat.Component,net.minecraft.network.chat.Component,net.minecraft.resources.ResourceLocation,net.minecraft.advancements.FrameType,boolean,boolean,boolean) -> a
    176:176:net.minecraft.advancements.Advancement$Builder display(net.minecraft.world.level.ItemLike,net.minecraft.network.chat.Component,net.minecraft.network.chat.Component,net.minecraft.resources.ResourceLocation,net.minecraft.advancements.FrameType,boolean,boolean,boolean) -> a
    180:181:net.minecraft.advancements.Advancement$Builder display(net.minecraft.advancements.DisplayInfo) -> a
    185:185:net.minecraft.advancements.Advancement$Builder rewards(net.minecraft.advancements.AdvancementRewards$Builder) -> a
    189:190:net.minecraft.advancements.Advancement$Builder rewards(net.minecraft.advancements.AdvancementRewards) -> a
    194:194:net.minecraft.advancements.Advancement$Builder addCriterion(java.lang.String,net.minecraft.advancements.CriterionTriggerInstance) -> a
    198:202:net.minecraft.advancements.Advancement$Builder addCriterion(java.lang.String,net.minecraft.advancements.Criterion) -> a
    206:207:net.minecraft.advancements.Advancement$Builder requirements(net.minecraft.advancements.RequirementsStrategy) -> a
    211:212:net.minecraft.advancements.Advancement$Builder requirements(java.lang.String[][]) -> a
    216:221:boolean canBuild(java.util.function.Function) -> a
    225:231:net.minecraft.advancements.Advancement build(net.minecraft.resources.ResourceLocation) -> b
    235:237:net.minecraft.advancements.Advancement save(java.util.function.Consumer,java.lang.String) -> a
    241:275:com.google.gson.JsonObject serializeToJson() -> b
    279:299:void serializeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    303:308:java.lang.String toString() -> toString
    313:358:net.minecraft.advancements.Advancement$Builder fromJson(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    362:372:net.minecraft.advancements.Advancement$Builder fromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    376:376:java.util.Map getCriteria() -> c
    225:225:net.minecraft.advancements.Advancement lambda$build$0(net.minecraft.resources.ResourceLocation) -> c
    137:137:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.advancements.DisplayInfo,net.minecraft.advancements.AdvancementRewards,java.util.Map,java.lang.String[][],net.minecraft.advancements.Advancement$1) -> <init>
net.minecraft.advancements.AdvancementList -> v:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.Map advancements -> b
    java.util.Set roots -> c
    java.util.Set tasks -> d
    net.minecraft.advancements.AdvancementList$Listener listener -> e
    17:22:void <init>() -> <init>
    26:43:void remove(net.minecraft.advancements.Advancement) -> a
    46:54:void remove(java.util.Set) -> a
    57:93:void add(java.util.Map) -> a
    96:102:void clear() -> a
    105:105:java.lang.Iterable getRoots() -> b
    109:109:java.util.Collection getAllAdvancements() -> c
    114:114:net.minecraft.advancements.Advancement get(net.minecraft.resources.ResourceLocation) -> a
    118:127:void setListener(net.minecraft.advancements.AdvancementList$Listener) -> a
    18:18:void <clinit>() -> <clinit>
net.minecraft.advancements.AdvancementList$Listener -> v$a:
    void onAddAdvancementRoot(net.minecraft.advancements.Advancement) -> a
    void onRemoveAdvancementRoot(net.minecraft.advancements.Advancement) -> b
    void onAddAdvancementTask(net.minecraft.advancements.Advancement) -> c
    void onRemoveAdvancementTask(net.minecraft.advancements.Advancement) -> d
    void onAdvancementsCleared() -> a
net.minecraft.advancements.AdvancementProgress -> w:
    java.util.Map criteria -> a
    java.lang.String[][] requirements -> b
    24:28:void <init>() -> <init>
    31:39:void update(java.util.Map,java.lang.String[][]) -> a
    42:58:boolean isDone() -> a
    62:67:boolean hasProgress() -> b
    71:76:boolean grantProgress(java.lang.String) -> a
    80:85:boolean revokeProgress(java.lang.String) -> b
    90:92:java.lang.String toString() -> toString
    97:102:void serializeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    105:110:net.minecraft.advancements.AdvancementProgress fromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    115:115:net.minecraft.advancements.CriterionProgress getCriterion(java.lang.String) -> c
    119:124:float getPercent() -> c
    129:139:java.lang.String getProgressText() -> d
    143:157:int countCompletedRequirements() -> h
    161:167:java.lang.Iterable getRemainingCriteria() -> e
    171:177:java.lang.Iterable getCompletedCriteria() -> f
    182:190:java.util.Date getFirstProgressDate() -> g
    195:208:int compareTo(net.minecraft.advancements.AdvancementProgress) -> a
    23:23:int compareTo(java.lang.Object) -> compareTo
    32:32:boolean lambda$update$0(java.util.Set,java.util.Map$Entry) -> a
    23:23:java.util.Map access$000(net.minecraft.advancements.AdvancementProgress) -> b
net.minecraft.advancements.AdvancementProgress$Serializer -> w$a:
    211:211:void <init>() -> <init>
    214:226:com.google.gson.JsonElement serialize(net.minecraft.advancements.AdvancementProgress,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    231:240:net.minecraft.advancements.AdvancementProgress deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    211:211:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
    211:211:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
net.minecraft.advancements.AdvancementRewards -> x:
    net.minecraft.advancements.AdvancementRewards EMPTY -> a
    int experience -> b
    net.minecraft.resources.ResourceLocation[] loot -> c
    net.minecraft.resources.ResourceLocation[] recipes -> d
    net.minecraft.commands.CommandFunction$CacheableFunction function -> e
    39:44:void <init>(int,net.minecraft.resources.ResourceLocation[],net.minecraft.resources.ResourceLocation[],net.minecraft.commands.CommandFunction$CacheableFunction) -> <init>
    47:47:net.minecraft.resources.ResourceLocation[] getRecipes() -> a
    51:82:void grant(net.minecraft.server.level.ServerPlayer) -> a
    86:89:java.lang.String toString() -> toString
    95:125:com.google.gson.JsonElement serializeToJson() -> b
    81:81:void lambda$grant$0(net.minecraft.server.MinecraftServer,net.minecraft.server.level.ServerPlayer,net.minecraft.commands.CommandFunction) -> a
    32:32:void <clinit>() -> <clinit>
net.minecraft.advancements.AdvancementRewards$Builder -> x$a:
    int experience -> a
    java.util.List loot -> b
    java.util.List recipes -> c
    net.minecraft.resources.ResourceLocation function -> d
    153:156:void <init>() -> <init>
    161:161:net.minecraft.advancements.AdvancementRewards$Builder experience(int) -> a
    165:166:net.minecraft.advancements.AdvancementRewards$Builder addExperience(int) -> b
    170:170:net.minecraft.advancements.AdvancementRewards$Builder loot(net.minecraft.resources.ResourceLocation) -> a
    174:175:net.minecraft.advancements.AdvancementRewards$Builder addLootTable(net.minecraft.resources.ResourceLocation) -> b
    179:179:net.minecraft.advancements.AdvancementRewards$Builder recipe(net.minecraft.resources.ResourceLocation) -> c
    183:184:net.minecraft.advancements.AdvancementRewards$Builder addRecipe(net.minecraft.resources.ResourceLocation) -> d
    188:188:net.minecraft.advancements.AdvancementRewards$Builder function(net.minecraft.resources.ResourceLocation) -> e
    192:193:net.minecraft.advancements.AdvancementRewards$Builder runs(net.minecraft.resources.ResourceLocation) -> f
    197:197:net.minecraft.advancements.AdvancementRewards build() -> a
net.minecraft.advancements.AdvancementRewards$Deserializer -> x$b:
    128:128:void <init>() -> <init>
    131:149:net.minecraft.advancements.AdvancementRewards deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    128:128:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.advancements.CriteriaTriggers -> y:
    java.util.Map CRITERIA -> M
    net.minecraft.advancements.critereon.ImpossibleTrigger IMPOSSIBLE -> a
    net.minecraft.advancements.critereon.KilledTrigger PLAYER_KILLED_ENTITY -> b
    net.minecraft.advancements.critereon.KilledTrigger ENTITY_KILLED_PLAYER -> c
    net.minecraft.advancements.critereon.EnterBlockTrigger ENTER_BLOCK -> d
    net.minecraft.advancements.critereon.InventoryChangeTrigger INVENTORY_CHANGED -> e
    net.minecraft.advancements.critereon.RecipeUnlockedTrigger RECIPE_UNLOCKED -> f
    net.minecraft.advancements.critereon.PlayerHurtEntityTrigger PLAYER_HURT_ENTITY -> g
    net.minecraft.advancements.critereon.EntityHurtPlayerTrigger ENTITY_HURT_PLAYER -> h
    net.minecraft.advancements.critereon.EnchantedItemTrigger ENCHANTED_ITEM -> i
    net.minecraft.advancements.critereon.FilledBucketTrigger FILLED_BUCKET -> j
    net.minecraft.advancements.critereon.BrewedPotionTrigger BREWED_POTION -> k
    net.minecraft.advancements.critereon.ConstructBeaconTrigger CONSTRUCT_BEACON -> l
    net.minecraft.advancements.critereon.UsedEnderEyeTrigger USED_ENDER_EYE -> m
    net.minecraft.advancements.critereon.SummonedEntityTrigger SUMMONED_ENTITY -> n
    net.minecraft.advancements.critereon.BredAnimalsTrigger BRED_ANIMALS -> o
    net.minecraft.advancements.critereon.LocationTrigger LOCATION -> p
    net.minecraft.advancements.critereon.LocationTrigger SLEPT_IN_BED -> q
    net.minecraft.advancements.critereon.CuredZombieVillagerTrigger CURED_ZOMBIE_VILLAGER -> r
    net.minecraft.advancements.critereon.TradeTrigger TRADE -> s
    net.minecraft.advancements.critereon.ItemDurabilityTrigger ITEM_DURABILITY_CHANGED -> t
    net.minecraft.advancements.critereon.LevitationTrigger LEVITATION -> u
    net.minecraft.advancements.critereon.ChangeDimensionTrigger CHANGED_DIMENSION -> v
    net.minecraft.advancements.critereon.TickTrigger TICK -> w
    net.minecraft.advancements.critereon.TameAnimalTrigger TAME_ANIMAL -> x
    net.minecraft.advancements.critereon.PlacedBlockTrigger PLACED_BLOCK -> y
    net.minecraft.advancements.critereon.ConsumeItemTrigger CONSUME_ITEM -> z
    net.minecraft.advancements.critereon.EffectsChangedTrigger EFFECTS_CHANGED -> A
    net.minecraft.advancements.critereon.UsedTotemTrigger USED_TOTEM -> B
    net.minecraft.advancements.critereon.NetherTravelTrigger NETHER_TRAVEL -> C
    net.minecraft.advancements.critereon.FishingRodHookedTrigger FISHING_ROD_HOOKED -> D
    net.minecraft.advancements.critereon.ChanneledLightningTrigger CHANNELED_LIGHTNING -> E
    net.minecraft.advancements.critereon.ShotCrossbowTrigger SHOT_CROSSBOW -> F
    net.minecraft.advancements.critereon.KilledByCrossbowTrigger KILLED_BY_CROSSBOW -> G
    net.minecraft.advancements.critereon.LocationTrigger RAID_WIN -> H
    net.minecraft.advancements.critereon.LocationTrigger BAD_OMEN -> I
    net.minecraft.advancements.critereon.ItemUsedOnBlockTrigger SAFELY_HARVEST_HONEY -> J
    net.minecraft.advancements.critereon.SlideDownBlockTrigger HONEY_BLOCK_SLIDE -> K
    net.minecraft.advancements.critereon.BeeNestDestroyedTrigger BEE_NEST_DESTROYED -> L
    43:43:void <init>() -> <init>
    86:90:net.minecraft.advancements.CriterionTrigger register(net.minecraft.advancements.CriterionTrigger) -> a
    96:96:net.minecraft.advancements.CriterionTrigger getCriterion(net.minecraft.resources.ResourceLocation) -> a
    100:100:java.lang.Iterable all() -> a
    44:83:void <clinit>() -> <clinit>
net.minecraft.advancements.Criterion -> z:
    net.minecraft.advancements.CriterionTriggerInstance trigger -> a
    18:20:void <init>(net.minecraft.advancements.CriterionTriggerInstance) -> <init>
    22:24:void <init>() -> <init>
    27:27:void serializeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    30:36:net.minecraft.advancements.Criterion criterionFromJson(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    40:40:net.minecraft.advancements.Criterion criterionFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    44:48:java.util.Map criteriaFromJson(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    52:57:java.util.Map criteriaFromNetwork(net.minecraft.network.FriendlyByteBuf) -> c
    61:66:void serializeToNetwork(java.util.Map,net.minecraft.network.FriendlyByteBuf) -> a
    70:70:net.minecraft.advancements.CriterionTriggerInstance getTrigger() -> a
    74:78:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.CriterionProgress -> aa:
    java.text.SimpleDateFormat DATE_FORMAT -> a
    java.util.Date obtained -> b
    13:13:void <init>() -> <init>
    19:19:boolean isDone() -> a
    23:24:void grant() -> b
    27:28:void revoke() -> c
    31:31:java.util.Date getObtained() -> d
    36:36:java.lang.String toString() -> toString
    42:46:void serializeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    49:52:com.google.gson.JsonElement serializeToJson() -> e
    57:61:net.minecraft.advancements.CriterionProgress fromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    65:71:net.minecraft.advancements.CriterionProgress fromJson(java.lang.String) -> a
    14:14:void <clinit>() -> <clinit>
net.minecraft.advancements.CriterionTrigger -> ab:
    net.minecraft.resources.ResourceLocation getId() -> a
    void addPlayerListener(net.minecraft.server.PlayerAdvancements,net.minecraft.advancements.CriterionTrigger$Listener) -> a
    void removePlayerListener(net.minecraft.server.PlayerAdvancements,net.minecraft.advancements.CriterionTrigger$Listener) -> b
    void removePlayerListeners(net.minecraft.server.PlayerAdvancements) -> a
    net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
net.minecraft.advancements.CriterionTrigger$Listener -> ab$a:
    net.minecraft.advancements.CriterionTriggerInstance trigger -> a
    net.minecraft.advancements.Advancement advancement -> b
    java.lang.String criterion -> c
    24:28:void <init>(net.minecraft.advancements.CriterionTriggerInstance,net.minecraft.advancements.Advancement,java.lang.String) -> <init>
    31:31:net.minecraft.advancements.CriterionTriggerInstance getTriggerInstance() -> a
    35:36:void run(net.minecraft.server.PlayerAdvancements) -> a
    40:55:boolean equals(java.lang.Object) -> equals
    60:63:int hashCode() -> hashCode
net.minecraft.advancements.CriterionTriggerInstance -> ac:
    net.minecraft.resources.ResourceLocation getCriterion() -> a
    11:11:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.DisplayInfo -> ad:
    net.minecraft.network.chat.Component title -> a
    net.minecraft.network.chat.Component description -> b
    net.minecraft.world.item.ItemStack icon -> c
    net.minecraft.resources.ResourceLocation background -> d
    net.minecraft.advancements.FrameType frame -> e
    boolean showToast -> f
    boolean announceChat -> g
    boolean hidden -> h
    float x -> i
    float y -> j
    33:42:void <init>(net.minecraft.world.item.ItemStack,net.minecraft.network.chat.Component,net.minecraft.network.chat.Component,net.minecraft.resources.ResourceLocation,net.minecraft.advancements.FrameType,boolean,boolean,boolean) -> <init>
    45:47:void setLocation(float,float) -> a
    50:50:net.minecraft.network.chat.Component getTitle() -> a
    54:54:net.minecraft.network.chat.Component getDescription() -> b
    58:58:net.minecraft.world.item.ItemStack getIcon() -> c
    63:63:net.minecraft.resources.ResourceLocation getBackground() -> d
    67:67:net.minecraft.advancements.FrameType getFrame() -> e
    71:71:float getX() -> f
    75:75:float getY() -> g
    79:79:boolean shouldShowToast() -> h
    83:83:boolean shouldAnnounceChat() -> i
    87:87:boolean isHidden() -> j
    91:102:net.minecraft.advancements.DisplayInfo fromJson(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    106:123:net.minecraft.world.item.ItemStack getIcon(com.google.gson.JsonObject) -> a
    127:147:void serializeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    150:160:net.minecraft.advancements.DisplayInfo fromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    164:178:com.google.gson.JsonElement serializeToJson() -> k
    182:187:com.google.gson.JsonObject serializeIcon() -> l
net.minecraft.advancements.FrameType -> ae:
    net.minecraft.advancements.FrameType TASK -> a
    net.minecraft.advancements.FrameType CHALLENGE -> b
    net.minecraft.advancements.FrameType GOAL -> c
    java.lang.String name -> d
    int texture -> e
    net.minecraft.ChatFormatting chatColor -> f
    net.minecraft.advancements.FrameType[] $VALUES -> g
    5:5:net.minecraft.advancements.FrameType[] values() -> values
    5:5:net.minecraft.advancements.FrameType valueOf(java.lang.String) -> valueOf
    15:19:void <init>(java.lang.String,int,java.lang.String,int,net.minecraft.ChatFormatting) -> <init>
    22:22:java.lang.String getName() -> a
    26:26:int getTexture() -> b
    30:35:net.minecraft.advancements.FrameType byName(java.lang.String) -> a
    39:39:net.minecraft.ChatFormatting getChatColor() -> c
    5:8:void <clinit>() -> <clinit>
net.minecraft.advancements.RequirementsStrategy -> af:
    net.minecraft.advancements.RequirementsStrategy AND -> a
    net.minecraft.advancements.RequirementsStrategy OR -> b
    java.lang.String[][] createRequirements(java.util.Collection) -> createRequirements
    15:15:java.lang.String[][] lambda$static$1(java.util.Collection) -> a
    7:12:java.lang.String[][] lambda$static$0(java.util.Collection) -> b
    6:15:void <clinit>() -> <clinit>
net.minecraft.advancements.TreeNodePosition -> ag:
    net.minecraft.advancements.Advancement advancement -> a
    net.minecraft.advancements.TreeNodePosition parent -> b
    net.minecraft.advancements.TreeNodePosition previousSibling -> c
    int childIndex -> d
    java.util.List children -> e
    net.minecraft.advancements.TreeNodePosition ancestor -> f
    net.minecraft.advancements.TreeNodePosition thread -> g
    int x -> h
    float y -> i
    float mod -> j
    float change -> k
    float shift -> l
    13:38:void <init>(net.minecraft.advancements.Advancement,net.minecraft.advancements.TreeNodePosition,net.minecraft.advancements.TreeNodePosition,int,int) -> <init>
    42:50:net.minecraft.advancements.TreeNodePosition addChild(net.minecraft.advancements.Advancement,net.minecraft.advancements.TreeNodePosition) -> a
    54:77:void firstWalk() -> a
    80:91:float secondWalk(float,int,float) -> a
    95:99:void thirdWalk(float) -> a
    102:111:void executeShifts() -> b
    115:121:net.minecraft.advancements.TreeNodePosition previousOrThread() -> c
    126:132:net.minecraft.advancements.TreeNodePosition nextOrThread() -> d
    136:179:net.minecraft.advancements.TreeNodePosition apportion(net.minecraft.advancements.TreeNodePosition) -> a
    183:191:void moveSubtree(net.minecraft.advancements.TreeNodePosition,float) -> a
    194:197:net.minecraft.advancements.TreeNodePosition getAncestor(net.minecraft.advancements.TreeNodePosition,net.minecraft.advancements.TreeNodePosition) -> a
    202:211:void finalizePosition() -> e
    214:224:void run(net.minecraft.advancements.Advancement) -> a
net.minecraft.advancements.critereon.AbstractCriterionTriggerInstance -> ah:
    net.minecraft.resources.ResourceLocation criterion -> a
    9:11:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    15:15:net.minecraft.resources.ResourceLocation getCriterion() -> a
    20:20:java.lang.String toString() -> toString
net.minecraft.advancements.critereon.BeeNestDestroyedTrigger -> ai:
    net.minecraft.resources.ResourceLocation ID -> a
    16:16:void <init>() -> <init>
    21:21:net.minecraft.resources.ResourceLocation getId() -> a
    26:30:net.minecraft.advancements.critereon.BeeNestDestroyedTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    35:39:net.minecraft.world.level.block.Block deserializeBlock(com.google.gson.JsonObject) -> a
    43:44:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.level.block.Block,net.minecraft.world.item.ItemStack,int) -> a
    16:16:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    43:43:boolean lambda$trigger$1(net.minecraft.world.level.block.Block,net.minecraft.world.item.ItemStack,int,net.minecraft.advancements.critereon.BeeNestDestroyedTrigger$TriggerInstance) -> a
    37:37:com.google.gson.JsonSyntaxException lambda$deserializeBlock$0(net.minecraft.resources.ResourceLocation) -> a
    16:16:net.minecraft.resources.ResourceLocation access$000() -> b
    17:17:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.BeeNestDestroyedTrigger$TriggerInstance -> ai$a:
    net.minecraft.world.level.block.Block block -> a
    net.minecraft.advancements.critereon.ItemPredicate item -> b
    net.minecraft.advancements.critereon.MinMaxBounds$Ints numBees -> c
    52:56:void <init>(net.minecraft.world.level.block.Block,net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> <init>
    59:59:net.minecraft.advancements.critereon.BeeNestDestroyedTrigger$TriggerInstance destroyedBeeNest(net.minecraft.world.level.block.Block,net.minecraft.advancements.critereon.ItemPredicate$Builder,net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    63:69:boolean matches(net.minecraft.world.level.block.Block,net.minecraft.world.item.ItemStack,int) -> a
    74:82:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.BlockPredicate -> aj:
    net.minecraft.advancements.critereon.BlockPredicate ANY -> a
    net.minecraft.tags.Tag tag -> b
    net.minecraft.world.level.block.Block block -> c
    net.minecraft.advancements.critereon.StatePropertiesPredicate properties -> d
    net.minecraft.advancements.critereon.NbtPredicate nbt -> e
    31:36:void <init>(net.minecraft.tags.Tag,net.minecraft.world.level.block.Block,net.minecraft.advancements.critereon.StatePropertiesPredicate,net.minecraft.advancements.critereon.NbtPredicate) -> <init>
    39:63:boolean matches(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    67:88:net.minecraft.advancements.critereon.BlockPredicate fromJson(com.google.gson.JsonElement) -> a
    92:106:com.google.gson.JsonElement serializeToJson() -> a
    22:22:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.BlockPredicate$Builder -> aj$a:
    net.minecraft.world.level.block.Block block -> a
    net.minecraft.tags.Tag blocks -> b
    net.minecraft.advancements.critereon.StatePropertiesPredicate properties -> c
    net.minecraft.advancements.critereon.NbtPredicate nbt -> d
    114:118:void <init>() -> <init>
    121:121:net.minecraft.advancements.critereon.BlockPredicate$Builder block() -> a
    125:126:net.minecraft.advancements.critereon.BlockPredicate$Builder of(net.minecraft.world.level.block.Block) -> a
    130:131:net.minecraft.advancements.critereon.BlockPredicate$Builder of(net.minecraft.tags.Tag) -> a
    135:136:net.minecraft.advancements.critereon.BlockPredicate$Builder hasNbt(net.minecraft.nbt.CompoundTag) -> a
    140:141:net.minecraft.advancements.critereon.BlockPredicate$Builder setProperties(net.minecraft.advancements.critereon.StatePropertiesPredicate) -> a
    145:145:net.minecraft.advancements.critereon.BlockPredicate build() -> b
net.minecraft.advancements.critereon.BredAnimalsTrigger -> ak:
    net.minecraft.resources.ResourceLocation ID -> a
    13:13:void <init>() -> <init>
    18:18:net.minecraft.resources.ResourceLocation getId() -> a
    23:26:net.minecraft.advancements.critereon.BredAnimalsTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    30:31:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.animal.Animal,net.minecraft.world.entity.animal.Animal,net.minecraft.world.entity.AgableMob) -> a
    13:13:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    30:30:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.animal.Animal,net.minecraft.world.entity.animal.Animal,net.minecraft.world.entity.AgableMob,net.minecraft.advancements.critereon.BredAnimalsTrigger$TriggerInstance) -> a
    13:13:net.minecraft.resources.ResourceLocation access$000() -> b
    14:14:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.BredAnimalsTrigger$TriggerInstance -> ak$a:
    net.minecraft.advancements.critereon.EntityPredicate parent -> a
    net.minecraft.advancements.critereon.EntityPredicate partner -> b
    net.minecraft.advancements.critereon.EntityPredicate child -> c
    39:43:void <init>(net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.EntityPredicate) -> <init>
    46:46:net.minecraft.advancements.critereon.BredAnimalsTrigger$TriggerInstance bredAnimals() -> c
    50:50:net.minecraft.advancements.critereon.BredAnimalsTrigger$TriggerInstance bredAnimals(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    54:58:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.animal.Animal,net.minecraft.world.entity.animal.Animal,net.minecraft.world.entity.AgableMob) -> a
    63:69:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.BrewedPotionTrigger -> al:
    net.minecraft.resources.ResourceLocation ID -> a
    15:15:void <init>() -> <init>
    20:20:net.minecraft.resources.ResourceLocation getId() -> a
    25:30:net.minecraft.advancements.critereon.BrewedPotionTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    34:35:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.alchemy.Potion) -> a
    15:15:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    34:34:boolean lambda$trigger$1(net.minecraft.world.item.alchemy.Potion,net.minecraft.advancements.critereon.BrewedPotionTrigger$TriggerInstance) -> a
    28:28:com.google.gson.JsonSyntaxException lambda$createInstance$0(net.minecraft.resources.ResourceLocation) -> a
    15:15:net.minecraft.resources.ResourceLocation access$000() -> b
    16:16:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.BrewedPotionTrigger$TriggerInstance -> al$a:
    net.minecraft.world.item.alchemy.Potion potion -> a
    41:43:void <init>(net.minecraft.world.item.alchemy.Potion) -> <init>
    46:46:net.minecraft.advancements.critereon.BrewedPotionTrigger$TriggerInstance brewedPotion() -> c
    50:53:boolean matches(net.minecraft.world.item.alchemy.Potion) -> a
    58:64:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.ChangeDimensionTrigger -> am:
    net.minecraft.resources.ResourceLocation ID -> a
    13:13:void <init>() -> <init>
    18:18:net.minecraft.resources.ResourceLocation getId() -> a
    23:25:net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    29:30:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.level.dimension.DimensionType,net.minecraft.world.level.dimension.DimensionType) -> a
    13:13:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    29:29:boolean lambda$trigger$0(net.minecraft.world.level.dimension.DimensionType,net.minecraft.world.level.dimension.DimensionType,net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance) -> a
    13:13:net.minecraft.resources.ResourceLocation access$000() -> b
    14:14:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance -> am$a:
    net.minecraft.world.level.dimension.DimensionType from -> a
    net.minecraft.world.level.dimension.DimensionType to -> b
    39:42:void <init>(net.minecraft.world.level.dimension.DimensionType,net.minecraft.world.level.dimension.DimensionType) -> <init>
    45:45:net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance changedDimension() -> c
    49:49:net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance changedDimension(net.minecraft.world.level.dimension.DimensionType,net.minecraft.world.level.dimension.DimensionType) -> a
    53:53:net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance changedDimensionTo(net.minecraft.world.level.dimension.DimensionType) -> a
    57:57:net.minecraft.advancements.critereon.ChangeDimensionTrigger$TriggerInstance changedDimensionFrom(net.minecraft.world.level.dimension.DimensionType) -> b
    61:67:boolean matches(net.minecraft.world.level.dimension.DimensionType,net.minecraft.world.level.dimension.DimensionType) -> b
    72:79:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.ChanneledLightningTrigger -> an:
    net.minecraft.resources.ResourceLocation ID -> a
    12:12:void <init>() -> <init>
    17:17:net.minecraft.resources.ResourceLocation getId() -> a
    22:23:net.minecraft.advancements.critereon.ChanneledLightningTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    27:28:void trigger(net.minecraft.server.level.ServerPlayer,java.util.Collection) -> a
    12:12:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    27:27:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,java.util.Collection,net.minecraft.advancements.critereon.ChanneledLightningTrigger$TriggerInstance) -> a
    12:12:net.minecraft.resources.ResourceLocation access$000() -> b
    13:13:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.ChanneledLightningTrigger$TriggerInstance -> an$a:
    net.minecraft.advancements.critereon.EntityPredicate[] victims -> a
    34:36:void <init>(net.minecraft.advancements.critereon.EntityPredicate[]) -> <init>
    39:39:net.minecraft.advancements.critereon.ChanneledLightningTrigger$TriggerInstance channeledLightning(net.minecraft.advancements.critereon.EntityPredicate[]) -> a
    43:55:boolean matches(net.minecraft.server.level.ServerPlayer,java.util.Collection) -> a
    60:64:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.ConstructBeaconTrigger -> ao:
    net.minecraft.resources.ResourceLocation ID -> a
    10:10:void <init>() -> <init>
    15:15:net.minecraft.resources.ResourceLocation getId() -> a
    20:21:net.minecraft.advancements.critereon.ConstructBeaconTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    25:26:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.level.block.entity.BeaconBlockEntity) -> a
    10:10:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    25:25:boolean lambda$trigger$0(net.minecraft.world.level.block.entity.BeaconBlockEntity,net.minecraft.advancements.critereon.ConstructBeaconTrigger$TriggerInstance) -> a
    10:10:net.minecraft.resources.ResourceLocation access$000() -> b
    11:11:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.ConstructBeaconTrigger$TriggerInstance -> ao$a:
    net.minecraft.advancements.critereon.MinMaxBounds$Ints level -> a
    32:34:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> <init>
    37:37:net.minecraft.advancements.critereon.ConstructBeaconTrigger$TriggerInstance constructedBeacon() -> c
    41:41:net.minecraft.advancements.critereon.ConstructBeaconTrigger$TriggerInstance constructedBeacon(net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    45:45:boolean matches(net.minecraft.world.level.block.entity.BeaconBlockEntity) -> a
    50:54:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.ConsumeItemTrigger -> ap:
    net.minecraft.resources.ResourceLocation ID -> a
    11:11:void <init>() -> <init>
    16:16:net.minecraft.resources.ResourceLocation getId() -> a
    21:21:net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    25:26:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.ItemStack) -> a
    11:11:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    25:25:boolean lambda$trigger$0(net.minecraft.world.item.ItemStack,net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance) -> a
    11:11:net.minecraft.resources.ResourceLocation access$000() -> b
    12:12:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance -> ap$a:
    net.minecraft.advancements.critereon.ItemPredicate item -> a
    32:34:void <init>(net.minecraft.advancements.critereon.ItemPredicate) -> <init>
    37:37:net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance usedItem() -> c
    41:41:net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance usedItem(net.minecraft.advancements.critereon.ItemPredicate) -> a
    45:45:net.minecraft.advancements.critereon.ConsumeItemTrigger$TriggerInstance usedItem(net.minecraft.world.level.ItemLike) -> a
    49:49:boolean matches(net.minecraft.world.item.ItemStack) -> a
    54:58:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.CuredZombieVillagerTrigger -> aq:
    net.minecraft.resources.ResourceLocation ID -> a
    11:11:void <init>() -> <init>
    16:16:net.minecraft.resources.ResourceLocation getId() -> a
    21:23:net.minecraft.advancements.critereon.CuredZombieVillagerTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    27:28:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.monster.Zombie,net.minecraft.world.entity.npc.Villager) -> a
    11:11:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    27:27:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.monster.Zombie,net.minecraft.world.entity.npc.Villager,net.minecraft.advancements.critereon.CuredZombieVillagerTrigger$TriggerInstance) -> a
    11:11:net.minecraft.resources.ResourceLocation access$000() -> b
    12:12:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.CuredZombieVillagerTrigger$TriggerInstance -> aq$a:
    net.minecraft.advancements.critereon.EntityPredicate zombie -> a
    net.minecraft.advancements.critereon.EntityPredicate villager -> b
    35:38:void <init>(net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.EntityPredicate) -> <init>
    41:41:net.minecraft.advancements.critereon.CuredZombieVillagerTrigger$TriggerInstance curedZombieVillager() -> c
    45:51:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.monster.Zombie,net.minecraft.world.entity.npc.Villager) -> a
    56:61:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.DamagePredicate -> ar:
    net.minecraft.advancements.critereon.DamagePredicate ANY -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Floats dealtDamage -> b
    net.minecraft.advancements.critereon.MinMaxBounds$Floats takenDamage -> c
    net.minecraft.advancements.critereon.EntityPredicate sourceEntity -> d
    java.lang.Boolean blocked -> e
    net.minecraft.advancements.critereon.DamageSourcePredicate type -> f
    21:27:void <init>() -> <init>
    29:35:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Floats,net.minecraft.advancements.critereon.MinMaxBounds$Floats,net.minecraft.advancements.critereon.EntityPredicate,java.lang.Boolean,net.minecraft.advancements.critereon.DamageSourcePredicate) -> <init>
    38:56:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.damagesource.DamageSource,float,float,boolean) -> a
    60:69:net.minecraft.advancements.critereon.DamagePredicate fromJson(com.google.gson.JsonElement) -> a
    73:88:com.google.gson.JsonElement serializeToJson() -> a
    13:13:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.DamagePredicate$Builder -> ar$a:
    net.minecraft.advancements.critereon.MinMaxBounds$Floats dealtDamage -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Floats takenDamage -> b
    net.minecraft.advancements.critereon.EntityPredicate sourceEntity -> c
    java.lang.Boolean blocked -> d
    net.minecraft.advancements.critereon.DamageSourcePredicate type -> e
    91:96:void <init>() -> <init>
    99:99:net.minecraft.advancements.critereon.DamagePredicate$Builder damageInstance() -> a
    103:104:net.minecraft.advancements.critereon.DamagePredicate$Builder dealtDamage(net.minecraft.advancements.critereon.MinMaxBounds$Floats) -> a
    108:109:net.minecraft.advancements.critereon.DamagePredicate$Builder takenDamage(net.minecraft.advancements.critereon.MinMaxBounds$Floats) -> b
    113:114:net.minecraft.advancements.critereon.DamagePredicate$Builder sourceEntity(net.minecraft.advancements.critereon.EntityPredicate) -> a
    118:119:net.minecraft.advancements.critereon.DamagePredicate$Builder blocked(java.lang.Boolean) -> a
    123:124:net.minecraft.advancements.critereon.DamagePredicate$Builder type(net.minecraft.advancements.critereon.DamageSourcePredicate) -> a
    128:129:net.minecraft.advancements.critereon.DamagePredicate$Builder type(net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> a
    133:133:net.minecraft.advancements.critereon.DamagePredicate build() -> b
net.minecraft.advancements.critereon.DamageSourcePredicate -> as:
    net.minecraft.advancements.critereon.DamageSourcePredicate ANY -> a
    java.lang.Boolean isProjectile -> b
    java.lang.Boolean isExplosion -> c
    java.lang.Boolean bypassesArmor -> d
    java.lang.Boolean bypassesInvulnerability -> e
    java.lang.Boolean bypassesMagic -> f
    java.lang.Boolean isFire -> g
    java.lang.Boolean isMagic -> h
    java.lang.Boolean isLightning -> i
    net.minecraft.advancements.critereon.EntityPredicate directEntity -> j
    net.minecraft.advancements.critereon.EntityPredicate sourceEntity -> k
    28:39:void <init>(java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.EntityPredicate) -> <init>
    42:42:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.damagesource.DamageSource) -> a
    46:79:boolean matches(net.minecraft.server.level.ServerLevel,net.minecraft.world.phys.Vec3,net.minecraft.world.damagesource.DamageSource) -> a
    83:97:net.minecraft.advancements.critereon.DamageSourcePredicate fromJson(com.google.gson.JsonElement) -> a
    102:102:java.lang.Boolean getOptionalBoolean(com.google.gson.JsonObject,java.lang.String) -> a
    106:123:com.google.gson.JsonElement serializeToJson() -> a
    127:130:void addOptionally(com.google.gson.JsonObject,java.lang.String,java.lang.Boolean) -> a
    15:15:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.DamageSourcePredicate$Builder -> as$a:
    java.lang.Boolean isProjectile -> a
    java.lang.Boolean isExplosion -> b
    java.lang.Boolean bypassesArmor -> c
    java.lang.Boolean bypassesInvulnerability -> d
    java.lang.Boolean bypassesMagic -> e
    java.lang.Boolean isFire -> f
    java.lang.Boolean isMagic -> g
    java.lang.Boolean isLightning -> h
    net.minecraft.advancements.critereon.EntityPredicate directEntity -> i
    net.minecraft.advancements.critereon.EntityPredicate sourceEntity -> j
    132:142:void <init>() -> <init>
    145:145:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder damageType() -> a
    149:150:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder isProjectile(java.lang.Boolean) -> a
    154:155:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder isExplosion(java.lang.Boolean) -> b
    159:160:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder bypassesArmor(java.lang.Boolean) -> c
    164:165:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder bypassesInvulnerability(java.lang.Boolean) -> d
    169:170:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder bypassesMagic(java.lang.Boolean) -> e
    174:175:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder isFire(java.lang.Boolean) -> f
    179:180:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder isMagic(java.lang.Boolean) -> g
    184:185:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder isLightning(java.lang.Boolean) -> h
    189:190:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder direct(net.minecraft.advancements.critereon.EntityPredicate) -> a
    194:195:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder direct(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    199:200:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder source(net.minecraft.advancements.critereon.EntityPredicate) -> b
    204:205:net.minecraft.advancements.critereon.DamageSourcePredicate$Builder source(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> b
    209:209:net.minecraft.advancements.critereon.DamageSourcePredicate build() -> b
net.minecraft.advancements.critereon.DistancePredicate -> at:
    net.minecraft.advancements.critereon.DistancePredicate ANY -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Floats x -> b
    net.minecraft.advancements.critereon.MinMaxBounds$Floats y -> c
    net.minecraft.advancements.critereon.MinMaxBounds$Floats z -> d
    net.minecraft.advancements.critereon.MinMaxBounds$Floats horizontal -> e
    net.minecraft.advancements.critereon.MinMaxBounds$Floats absolute -> f
    20:26:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Floats,net.minecraft.advancements.critereon.MinMaxBounds$Floats,net.minecraft.advancements.critereon.MinMaxBounds$Floats,net.minecraft.advancements.critereon.MinMaxBounds$Floats,net.minecraft.advancements.critereon.MinMaxBounds$Floats) -> <init>
    29:29:net.minecraft.advancements.critereon.DistancePredicate horizontal(net.minecraft.advancements.critereon.MinMaxBounds$Floats) -> a
    33:33:net.minecraft.advancements.critereon.DistancePredicate vertical(net.minecraft.advancements.critereon.MinMaxBounds$Floats) -> b
    37:49:boolean matches(double,double,double,double,double,double) -> a
    53:62:net.minecraft.advancements.critereon.DistancePredicate fromJson(com.google.gson.JsonElement) -> a
    66:78:com.google.gson.JsonElement serializeToJson() -> a
    12:12:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.EffectsChangedTrigger -> au:
    net.minecraft.resources.ResourceLocation ID -> a
    9:9:void <init>() -> <init>
    14:14:net.minecraft.resources.ResourceLocation getId() -> a
    19:20:net.minecraft.advancements.critereon.EffectsChangedTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    24:25:void trigger(net.minecraft.server.level.ServerPlayer) -> a
    9:9:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    24:24:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.advancements.critereon.EffectsChangedTrigger$TriggerInstance) -> a
    9:9:net.minecraft.resources.ResourceLocation access$000() -> b
    10:10:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.EffectsChangedTrigger$TriggerInstance -> au$a:
    net.minecraft.advancements.critereon.MobEffectsPredicate effects -> a
    31:33:void <init>(net.minecraft.advancements.critereon.MobEffectsPredicate) -> <init>
    36:36:net.minecraft.advancements.critereon.EffectsChangedTrigger$TriggerInstance hasEffects(net.minecraft.advancements.critereon.MobEffectsPredicate) -> a
    40:40:boolean matches(net.minecraft.server.level.ServerPlayer) -> a
    45:49:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.EnchantedItemTrigger -> av:
    net.minecraft.resources.ResourceLocation ID -> a
    10:10:void <init>() -> <init>
    15:15:net.minecraft.resources.ResourceLocation getId() -> a
    20:22:net.minecraft.advancements.critereon.EnchantedItemTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    26:27:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.ItemStack,int) -> a
    10:10:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    26:26:boolean lambda$trigger$0(net.minecraft.world.item.ItemStack,int,net.minecraft.advancements.critereon.EnchantedItemTrigger$TriggerInstance) -> a
    10:10:net.minecraft.resources.ResourceLocation access$000() -> b
    11:11:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.EnchantedItemTrigger$TriggerInstance -> av$a:
    net.minecraft.advancements.critereon.ItemPredicate item -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Ints levels -> b
    34:37:void <init>(net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> <init>
    40:40:net.minecraft.advancements.critereon.EnchantedItemTrigger$TriggerInstance enchantedItem() -> c
    44:50:boolean matches(net.minecraft.world.item.ItemStack,int) -> a
    55:60:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.EnchantmentPredicate -> aw:
    net.minecraft.advancements.critereon.EnchantmentPredicate ANY -> a
    net.minecraft.advancements.critereon.EnchantmentPredicate[] NONE -> b
    net.minecraft.world.item.enchantment.Enchantment enchantment -> c
    net.minecraft.advancements.critereon.MinMaxBounds$Ints level -> d
    23:26:void <init>() -> <init>
    28:31:void <init>(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> <init>
    34:53:boolean containedIn(java.util.Map) -> a
    57:68:com.google.gson.JsonElement serializeToJson() -> a
    72:84:net.minecraft.advancements.critereon.EnchantmentPredicate fromJson(com.google.gson.JsonElement) -> a
    88:98:net.minecraft.advancements.critereon.EnchantmentPredicate[] fromJsonArray(com.google.gson.JsonElement) -> b
    80:80:com.google.gson.JsonSyntaxException lambda$fromJson$0(net.minecraft.resources.ResourceLocation) -> a
    17:18:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.EnterBlockTrigger -> ax:
    net.minecraft.resources.ResourceLocation ID -> a
    16:16:void <init>() -> <init>
    21:21:net.minecraft.resources.ResourceLocation getId() -> a
    26:33:net.minecraft.advancements.critereon.EnterBlockTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    38:42:net.minecraft.world.level.block.Block deserializeBlock(com.google.gson.JsonObject) -> a
    46:47:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.level.block.state.BlockState) -> a
    16:16:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    46:46:boolean lambda$trigger$2(net.minecraft.world.level.block.state.BlockState,net.minecraft.advancements.critereon.EnterBlockTrigger$TriggerInstance) -> a
    40:40:com.google.gson.JsonSyntaxException lambda$deserializeBlock$1(net.minecraft.resources.ResourceLocation) -> a
    30:30:void lambda$createInstance$0(net.minecraft.world.level.block.Block,java.lang.String) -> a
    16:16:net.minecraft.resources.ResourceLocation access$000() -> b
    17:17:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.EnterBlockTrigger$TriggerInstance -> ax$a:
    net.minecraft.world.level.block.Block block -> a
    net.minecraft.advancements.critereon.StatePropertiesPredicate state -> b
    54:57:void <init>(net.minecraft.world.level.block.Block,net.minecraft.advancements.critereon.StatePropertiesPredicate) -> <init>
    60:60:net.minecraft.advancements.critereon.EnterBlockTrigger$TriggerInstance entersBlock(net.minecraft.world.level.block.Block) -> a
    65:70:com.google.gson.JsonElement serializeToJson() -> b
    74:80:boolean matches(net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.advancements.critereon.EntityEquipmentPredicate -> ay:
    net.minecraft.advancements.critereon.EntityEquipmentPredicate ANY -> a
    net.minecraft.advancements.critereon.EntityEquipmentPredicate CAPTAIN -> b
    net.minecraft.advancements.critereon.ItemPredicate head -> c
    net.minecraft.advancements.critereon.ItemPredicate chest -> d
    net.minecraft.advancements.critereon.ItemPredicate legs -> e
    net.minecraft.advancements.critereon.ItemPredicate feet -> f
    net.minecraft.advancements.critereon.ItemPredicate mainhand -> g
    net.minecraft.advancements.critereon.ItemPredicate offhand -> h
    26:33:void <init>(net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.ItemPredicate) -> <init>
    36:63:boolean matches(net.minecraft.world.entity.Entity) -> a
    67:78:net.minecraft.advancements.critereon.EntityEquipmentPredicate fromJson(com.google.gson.JsonElement) -> a
    82:93:com.google.gson.JsonElement serializeToJson() -> a
    16:17:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder -> ay$a:
    net.minecraft.advancements.critereon.ItemPredicate head -> a
    net.minecraft.advancements.critereon.ItemPredicate chest -> b
    net.minecraft.advancements.critereon.ItemPredicate legs -> c
    net.minecraft.advancements.critereon.ItemPredicate feet -> d
    net.minecraft.advancements.critereon.ItemPredicate mainhand -> e
    net.minecraft.advancements.critereon.ItemPredicate offhand -> f
    96:102:void <init>() -> <init>
    105:105:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder equipment() -> a
    109:110:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder head(net.minecraft.advancements.critereon.ItemPredicate) -> a
    114:115:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder chest(net.minecraft.advancements.critereon.ItemPredicate) -> b
    119:120:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder legs(net.minecraft.advancements.critereon.ItemPredicate) -> c
    124:125:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder feet(net.minecraft.advancements.critereon.ItemPredicate) -> d
    129:130:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder mainhand(net.minecraft.advancements.critereon.ItemPredicate) -> e
    134:135:net.minecraft.advancements.critereon.EntityEquipmentPredicate$Builder offhand(net.minecraft.advancements.critereon.ItemPredicate) -> f
    139:139:net.minecraft.advancements.critereon.EntityEquipmentPredicate build() -> b
net.minecraft.advancements.critereon.EntityFlagsPredicate -> az:
    net.minecraft.advancements.critereon.EntityFlagsPredicate ANY -> a
    java.lang.Boolean isOnFire -> b
    java.lang.Boolean isCrouching -> c
    java.lang.Boolean isSprinting -> d
    java.lang.Boolean isSwimming -> e
    java.lang.Boolean isBaby -> f
    30:36:void <init>(java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean,java.lang.Boolean) -> <init>
    39:59:boolean matches(net.minecraft.world.entity.Entity) -> a
    64:64:java.lang.Boolean getOptionalBoolean(com.google.gson.JsonObject,java.lang.String) -> a
    68:80:net.minecraft.advancements.critereon.EntityFlagsPredicate fromJson(com.google.gson.JsonElement) -> a
    84:87:void addOptionalBoolean(com.google.gson.JsonObject,java.lang.String,java.lang.Boolean) -> a
    90:101:com.google.gson.JsonElement serializeToJson() -> a
    13:13:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder -> az$a:
    java.lang.Boolean isOnFire -> a
    java.lang.Boolean isCrouching -> b
    java.lang.Boolean isSprinting -> c
    java.lang.Boolean isSwimming -> d
    java.lang.Boolean isBaby -> e
    104:104:void <init>() -> <init>
    121:121:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder flags() -> a
    125:126:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder setOnFire(java.lang.Boolean) -> a
    130:131:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder setCrouching(java.lang.Boolean) -> b
    135:136:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder setSprinting(java.lang.Boolean) -> c
    140:141:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder setSwimming(java.lang.Boolean) -> d
    145:146:net.minecraft.advancements.critereon.EntityFlagsPredicate$Builder setIsBaby(java.lang.Boolean) -> e
    150:150:net.minecraft.advancements.critereon.EntityFlagsPredicate build() -> b
net.minecraft.advancements.critereon.EntityHurtPlayerTrigger -> ba:
    net.minecraft.resources.ResourceLocation ID -> a
    10:10:void <init>() -> <init>
    15:15:net.minecraft.resources.ResourceLocation getId() -> a
    20:21:net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    25:26:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.damagesource.DamageSource,float,float,boolean) -> a
    10:10:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    25:25:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.damagesource.DamageSource,float,float,boolean,net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance) -> a
    10:10:net.minecraft.resources.ResourceLocation access$000() -> b
    11:11:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance -> ba$a:
    net.minecraft.advancements.critereon.DamagePredicate damage -> a
    32:34:void <init>(net.minecraft.advancements.critereon.DamagePredicate) -> <init>
    37:37:net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance entityHurtPlayer() -> c
    41:41:net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance entityHurtPlayer(net.minecraft.advancements.critereon.DamagePredicate) -> a
    45:45:net.minecraft.advancements.critereon.EntityHurtPlayerTrigger$TriggerInstance entityHurtPlayer(net.minecraft.advancements.critereon.DamagePredicate$Builder) -> a
    49:52:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.damagesource.DamageSource,float,float,boolean) -> a
    57:61:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.EntityPredicate -> bb:
    net.minecraft.advancements.critereon.EntityPredicate ANY -> a
    net.minecraft.advancements.critereon.EntityPredicate[] ANY_ARRAY -> b
    net.minecraft.advancements.critereon.EntityTypePredicate entityType -> c
    net.minecraft.advancements.critereon.DistancePredicate distanceToPlayer -> d
    net.minecraft.advancements.critereon.LocationPredicate location -> e
    net.minecraft.advancements.critereon.MobEffectsPredicate effects -> f
    net.minecraft.advancements.critereon.NbtPredicate nbt -> g
    net.minecraft.advancements.critereon.EntityFlagsPredicate flags -> h
    net.minecraft.advancements.critereon.EntityEquipmentPredicate equipment -> i
    net.minecraft.advancements.critereon.PlayerPredicate player -> j
    java.lang.String team -> k
    net.minecraft.resources.ResourceLocation catType -> l
    37:48:void <init>(net.minecraft.advancements.critereon.EntityTypePredicate,net.minecraft.advancements.critereon.DistancePredicate,net.minecraft.advancements.critereon.LocationPredicate,net.minecraft.advancements.critereon.MobEffectsPredicate,net.minecraft.advancements.critereon.NbtPredicate,net.minecraft.advancements.critereon.EntityFlagsPredicate,net.minecraft.advancements.critereon.EntityEquipmentPredicate,net.minecraft.advancements.critereon.PlayerPredicate,java.lang.String,net.minecraft.resources.ResourceLocation) -> <init>
    51:51:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.Entity) -> a
    55:107:boolean matches(net.minecraft.server.level.ServerLevel,net.minecraft.world.phys.Vec3,net.minecraft.world.entity.Entity) -> a
    111:139:net.minecraft.advancements.critereon.EntityPredicate fromJson(com.google.gson.JsonElement) -> a
    143:153:net.minecraft.advancements.critereon.EntityPredicate[] fromJsonArray(com.google.gson.JsonElement) -> b
    157:176:com.google.gson.JsonElement serializeToJson() -> a
    180:193:com.google.gson.JsonElement serializeArrayToJson(net.minecraft.advancements.critereon.EntityPredicate[]) -> a
    20:20:void <init>(net.minecraft.advancements.critereon.EntityTypePredicate,net.minecraft.advancements.critereon.DistancePredicate,net.minecraft.advancements.critereon.LocationPredicate,net.minecraft.advancements.critereon.MobEffectsPredicate,net.minecraft.advancements.critereon.NbtPredicate,net.minecraft.advancements.critereon.EntityFlagsPredicate,net.minecraft.advancements.critereon.EntityEquipmentPredicate,net.minecraft.advancements.critereon.PlayerPredicate,java.lang.String,net.minecraft.resources.ResourceLocation,net.minecraft.advancements.critereon.EntityPredicate$1) -> <init>
    21:22:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.EntityPredicate$1 -> bb$1:
net.minecraft.advancements.critereon.EntityPredicate$Builder -> bb$a:
    net.minecraft.advancements.critereon.EntityTypePredicate entityType -> a
    net.minecraft.advancements.critereon.DistancePredicate distanceToPlayer -> b
    net.minecraft.advancements.critereon.LocationPredicate location -> c
    net.minecraft.advancements.critereon.MobEffectsPredicate effects -> d
    net.minecraft.advancements.critereon.NbtPredicate nbt -> e
    net.minecraft.advancements.critereon.EntityFlagsPredicate flags -> f
    net.minecraft.advancements.critereon.EntityEquipmentPredicate equipment -> g
    net.minecraft.advancements.critereon.PlayerPredicate player -> h
    java.lang.String team -> i
    net.minecraft.resources.ResourceLocation catType -> j
    196:204:void <init>() -> <init>
    209:209:net.minecraft.advancements.critereon.EntityPredicate$Builder entity() -> a
    213:214:net.minecraft.advancements.critereon.EntityPredicate$Builder of(net.minecraft.world.entity.EntityType) -> a
    218:219:net.minecraft.advancements.critereon.EntityPredicate$Builder of(net.minecraft.tags.Tag) -> a
    223:224:net.minecraft.advancements.critereon.EntityPredicate$Builder of(net.minecraft.resources.ResourceLocation) -> a
    228:229:net.minecraft.advancements.critereon.EntityPredicate$Builder entityType(net.minecraft.advancements.critereon.EntityTypePredicate) -> a
    233:234:net.minecraft.advancements.critereon.EntityPredicate$Builder distance(net.minecraft.advancements.critereon.DistancePredicate) -> a
    238:239:net.minecraft.advancements.critereon.EntityPredicate$Builder located(net.minecraft.advancements.critereon.LocationPredicate) -> a
    243:244:net.minecraft.advancements.critereon.EntityPredicate$Builder effects(net.minecraft.advancements.critereon.MobEffectsPredicate) -> a
    248:249:net.minecraft.advancements.critereon.EntityPredicate$Builder nbt(net.minecraft.advancements.critereon.NbtPredicate) -> a
    253:254:net.minecraft.advancements.critereon.EntityPredicate$Builder flags(net.minecraft.advancements.critereon.EntityFlagsPredicate) -> a
    258:259:net.minecraft.advancements.critereon.EntityPredicate$Builder equipment(net.minecraft.advancements.critereon.EntityEquipmentPredicate) -> a
    263:264:net.minecraft.advancements.critereon.EntityPredicate$Builder player(net.minecraft.advancements.critereon.PlayerPredicate) -> a
    268:269:net.minecraft.advancements.critereon.EntityPredicate$Builder team(java.lang.String) -> a
    273:274:net.minecraft.advancements.critereon.EntityPredicate$Builder catType(net.minecraft.resources.ResourceLocation) -> b
    278:278:net.minecraft.advancements.critereon.EntityPredicate build() -> b
net.minecraft.advancements.critereon.EntityTypePredicate -> bc:
    net.minecraft.advancements.critereon.EntityTypePredicate ANY -> a
    com.google.common.base.Joiner COMMA_JOINER -> b
    17:17:void <init>() -> <init>
    boolean matches(net.minecraft.world.entity.EntityType) -> a
    com.google.gson.JsonElement serializeToJson() -> a
    73:87:net.minecraft.advancements.critereon.EntityTypePredicate fromJson(com.google.gson.JsonElement) -> a
    92:92:net.minecraft.advancements.critereon.EntityTypePredicate of(net.minecraft.world.entity.EntityType) -> b
    96:96:net.minecraft.advancements.critereon.EntityTypePredicate of(net.minecraft.tags.Tag) -> a
    86:86:com.google.gson.JsonSyntaxException lambda$fromJson$0(net.minecraft.resources.ResourceLocation) -> a
    18:30:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.EntityTypePredicate$1 -> bc$1:
    18:18:void <init>() -> <init>
    21:21:boolean matches(net.minecraft.world.entity.EntityType) -> a
    26:26:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.EntityTypePredicate$TagPredicate -> bc$a:
    net.minecraft.tags.Tag tag -> b
    57:59:void <init>(net.minecraft.tags.Tag) -> <init>
    63:63:boolean matches(net.minecraft.world.entity.EntityType) -> a
    68:68:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.EntityTypePredicate$TypePredicate -> bc$b:
    net.minecraft.world.entity.EntityType type -> b
    39:41:void <init>(net.minecraft.world.entity.EntityType) -> <init>
    45:45:boolean matches(net.minecraft.world.entity.EntityType) -> a
    50:50:com.google.gson.JsonElement serializeToJson() -> a
net.minecraft.advancements.critereon.FilledBucketTrigger -> bd:
    net.minecraft.resources.ResourceLocation ID -> a
    10:10:void <init>() -> <init>
    15:15:net.minecraft.resources.ResourceLocation getId() -> a
    20:21:net.minecraft.advancements.critereon.FilledBucketTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    25:26:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.ItemStack) -> a
    10:10:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    25:25:boolean lambda$trigger$0(net.minecraft.world.item.ItemStack,net.minecraft.advancements.critereon.FilledBucketTrigger$TriggerInstance) -> a
    10:10:net.minecraft.resources.ResourceLocation access$000() -> b
    11:11:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.FilledBucketTrigger$TriggerInstance -> bd$a:
    net.minecraft.advancements.critereon.ItemPredicate item -> a
    32:34:void <init>(net.minecraft.advancements.critereon.ItemPredicate) -> <init>
    37:37:net.minecraft.advancements.critereon.FilledBucketTrigger$TriggerInstance filledBucket(net.minecraft.advancements.critereon.ItemPredicate) -> a
    41:44:boolean matches(net.minecraft.world.item.ItemStack) -> a
    49:53:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.FishingRodHookedTrigger -> be:
    net.minecraft.resources.ResourceLocation ID -> a
    14:14:void <init>() -> <init>
    19:19:net.minecraft.resources.ResourceLocation getId() -> a
    24:27:net.minecraft.advancements.critereon.FishingRodHookedTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    31:32:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.fishing.FishingHook,java.util.Collection) -> a
    14:14:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    31:31:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.fishing.FishingHook,java.util.Collection,net.minecraft.advancements.critereon.FishingRodHookedTrigger$TriggerInstance) -> a
    14:14:net.minecraft.resources.ResourceLocation access$000() -> b
    15:15:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.FishingRodHookedTrigger$TriggerInstance -> be$a:
    net.minecraft.advancements.critereon.ItemPredicate rod -> a
    net.minecraft.advancements.critereon.EntityPredicate entity -> b
    net.minecraft.advancements.critereon.ItemPredicate item -> c
    40:44:void <init>(net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.ItemPredicate) -> <init>
    47:47:net.minecraft.advancements.critereon.FishingRodHookedTrigger$TriggerInstance fishedItem(net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.ItemPredicate) -> a
    51:75:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.fishing.FishingHook,java.util.Collection) -> a
    80:86:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.FluidPredicate -> bf:
    net.minecraft.advancements.critereon.FluidPredicate ANY -> a
    net.minecraft.tags.Tag tag -> b
    net.minecraft.world.level.material.Fluid fluid -> c
    net.minecraft.advancements.critereon.StatePropertiesPredicate properties -> d
    28:32:void <init>(net.minecraft.tags.Tag,net.minecraft.world.level.material.Fluid,net.minecraft.advancements.critereon.StatePropertiesPredicate) -> <init>
    35:53:boolean matches(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    57:77:net.minecraft.advancements.critereon.FluidPredicate fromJson(com.google.gson.JsonElement) -> a
    81:94:com.google.gson.JsonElement serializeToJson() -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.FluidPredicate$Builder -> bf$a:
    net.minecraft.world.level.material.Fluid fluid -> a
    net.minecraft.tags.Tag fluids -> b
    net.minecraft.advancements.critereon.StatePropertiesPredicate properties -> c
    102:105:void <init>() -> <init>
    108:108:net.minecraft.advancements.critereon.FluidPredicate$Builder fluid() -> a
    112:113:net.minecraft.advancements.critereon.FluidPredicate$Builder of(net.minecraft.world.level.material.Fluid) -> a
    117:118:net.minecraft.advancements.critereon.FluidPredicate$Builder of(net.minecraft.tags.Tag) -> a
    122:123:net.minecraft.advancements.critereon.FluidPredicate$Builder setProperties(net.minecraft.advancements.critereon.StatePropertiesPredicate) -> a
    127:127:net.minecraft.advancements.critereon.FluidPredicate build() -> b
net.minecraft.advancements.critereon.ImpossibleTrigger -> bg:
    net.minecraft.resources.ResourceLocation ID -> a
    9:9:void <init>() -> <init>
    14:14:net.minecraft.resources.ResourceLocation getId() -> a
    19:19:void addPlayerListener(net.minecraft.server.PlayerAdvancements,net.minecraft.advancements.CriterionTrigger$Listener) -> a
    23:23:void removePlayerListener(net.minecraft.server.PlayerAdvancements,net.minecraft.advancements.CriterionTrigger$Listener) -> b
    27:27:void removePlayerListeners(net.minecraft.server.PlayerAdvancements) -> a
    31:31:net.minecraft.advancements.critereon.ImpossibleTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    9:9:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    9:9:net.minecraft.resources.ResourceLocation access$000() -> b
    10:10:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.ImpossibleTrigger$TriggerInstance -> bg$a:
    36:37:void <init>() -> <init>
net.minecraft.advancements.critereon.InventoryChangeTrigger -> bh:
    net.minecraft.resources.ResourceLocation ID -> a
    18:18:void <init>() -> <init>
    23:23:net.minecraft.resources.ResourceLocation getId() -> a
    28:33:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    37:38:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.player.Inventory) -> a
    18:18:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    37:37:boolean lambda$trigger$0(net.minecraft.world.entity.player.Inventory,net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance) -> a
    18:18:net.minecraft.resources.ResourceLocation access$000() -> b
    19:19:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance -> bh$a:
    net.minecraft.advancements.critereon.MinMaxBounds$Ints slotsOccupied -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Ints slotsFull -> b
    net.minecraft.advancements.critereon.MinMaxBounds$Ints slotsEmpty -> c
    net.minecraft.advancements.critereon.ItemPredicate[] predicates -> d
    47:52:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.advancements.critereon.ItemPredicate[]) -> <init>
    55:55:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance hasItem(net.minecraft.advancements.critereon.ItemPredicate[]) -> a
    59:63:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance hasItem(net.minecraft.world.level.ItemLike[]) -> a
    68:86:com.google.gson.JsonElement serializeToJson() -> b
    91:124:boolean matches(net.minecraft.world.entity.player.Inventory) -> a
net.minecraft.advancements.critereon.ItemDurabilityTrigger -> bi:
    net.minecraft.resources.ResourceLocation ID -> a
    10:10:void <init>() -> <init>
    15:15:net.minecraft.resources.ResourceLocation getId() -> a
    20:23:net.minecraft.advancements.critereon.ItemDurabilityTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    27:28:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.ItemStack,int) -> a
    10:10:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    27:27:boolean lambda$trigger$0(net.minecraft.world.item.ItemStack,int,net.minecraft.advancements.critereon.ItemDurabilityTrigger$TriggerInstance) -> a
    10:10:net.minecraft.resources.ResourceLocation access$000() -> b
    11:11:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.ItemDurabilityTrigger$TriggerInstance -> bi$a:
    net.minecraft.advancements.critereon.ItemPredicate item -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Ints durability -> b
    net.minecraft.advancements.critereon.MinMaxBounds$Ints delta -> c
    36:40:void <init>(net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> <init>
    43:43:net.minecraft.advancements.critereon.ItemDurabilityTrigger$TriggerInstance changedDurability(net.minecraft.advancements.critereon.ItemPredicate,net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    47:56:boolean matches(net.minecraft.world.item.ItemStack,int) -> a
    61:67:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.ItemPredicate -> bj:
    net.minecraft.advancements.critereon.ItemPredicate ANY -> a
    net.minecraft.tags.Tag tag -> b
    net.minecraft.world.item.Item item -> c
    net.minecraft.advancements.critereon.MinMaxBounds$Ints count -> d
    net.minecraft.advancements.critereon.MinMaxBounds$Ints durability -> e
    net.minecraft.advancements.critereon.EnchantmentPredicate[] enchantments -> f
    net.minecraft.advancements.critereon.EnchantmentPredicate[] storedEnchantments -> g
    net.minecraft.world.item.alchemy.Potion potion -> h
    net.minecraft.advancements.critereon.NbtPredicate nbt -> i
    44:53:void <init>() -> <init>
    55:64:void <init>(net.minecraft.tags.Tag,net.minecraft.world.item.Item,net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.advancements.critereon.EnchantmentPredicate[],net.minecraft.advancements.critereon.EnchantmentPredicate[],net.minecraft.world.item.alchemy.Potion,net.minecraft.advancements.critereon.NbtPredicate) -> <init>
    67:110:boolean matches(net.minecraft.world.item.ItemStack) -> a
    114:145:net.minecraft.advancements.critereon.ItemPredicate fromJson(com.google.gson.JsonElement) -> a
    149:187:com.google.gson.JsonElement serializeToJson() -> a
    191:202:net.minecraft.advancements.critereon.ItemPredicate[] fromJsonArray(com.google.gson.JsonElement) -> b
    140:140:com.google.gson.JsonSyntaxException lambda$fromJson$1(net.minecraft.resources.ResourceLocation) -> a
    127:127:com.google.gson.JsonSyntaxException lambda$fromJson$0(net.minecraft.resources.ResourceLocation) -> b
    30:30:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.ItemPredicate$Builder -> bj$a:
    java.util.List enchantments -> a
    java.util.List storedEnchantments -> b
    net.minecraft.world.item.Item item -> c
    net.minecraft.tags.Tag tag -> d
    net.minecraft.advancements.critereon.MinMaxBounds$Ints count -> e
    net.minecraft.advancements.critereon.MinMaxBounds$Ints durability -> f
    net.minecraft.world.item.alchemy.Potion potion -> g
    net.minecraft.advancements.critereon.NbtPredicate nbt -> h
    206:219:void <init>() -> <init>
    222:222:net.minecraft.advancements.critereon.ItemPredicate$Builder item() -> a
    226:227:net.minecraft.advancements.critereon.ItemPredicate$Builder of(net.minecraft.world.level.ItemLike) -> a
    231:232:net.minecraft.advancements.critereon.ItemPredicate$Builder of(net.minecraft.tags.Tag) -> a
    236:237:net.minecraft.advancements.critereon.ItemPredicate$Builder withCount(net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    241:242:net.minecraft.advancements.critereon.ItemPredicate$Builder hasDurability(net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> b
    246:247:net.minecraft.advancements.critereon.ItemPredicate$Builder isPotion(net.minecraft.world.item.alchemy.Potion) -> a
    251:252:net.minecraft.advancements.critereon.ItemPredicate$Builder hasNbt(net.minecraft.nbt.CompoundTag) -> a
    256:257:net.minecraft.advancements.critereon.ItemPredicate$Builder hasEnchantment(net.minecraft.advancements.critereon.EnchantmentPredicate) -> a
    261:262:net.minecraft.advancements.critereon.ItemPredicate$Builder hasStoredEnchantment(net.minecraft.advancements.critereon.EnchantmentPredicate) -> b
    266:266:net.minecraft.advancements.critereon.ItemPredicate build() -> b
net.minecraft.advancements.critereon.ItemUsedOnBlockTrigger -> bk:
    net.minecraft.resources.ResourceLocation id -> a
    17:19:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    23:23:net.minecraft.resources.ResourceLocation getId() -> a
    28:32:net.minecraft.advancements.critereon.ItemUsedOnBlockTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    36:39:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    14:14:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    38:38:boolean lambda$trigger$0(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerPlayer,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack,net.minecraft.advancements.critereon.ItemUsedOnBlockTrigger$TriggerInstance) -> a
    14:14:net.minecraft.resources.ResourceLocation access$000(net.minecraft.advancements.critereon.ItemUsedOnBlockTrigger) -> a
net.minecraft.advancements.critereon.ItemUsedOnBlockTrigger$TriggerInstance -> bk$a:
    net.minecraft.advancements.critereon.BlockPredicate block -> a
    net.minecraft.advancements.critereon.StatePropertiesPredicate state -> b
    net.minecraft.advancements.critereon.ItemPredicate item -> c
    47:51:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.advancements.critereon.BlockPredicate,net.minecraft.advancements.critereon.StatePropertiesPredicate,net.minecraft.advancements.critereon.ItemPredicate) -> <init>
    54:54:net.minecraft.advancements.critereon.ItemUsedOnBlockTrigger$TriggerInstance safelyHarvestedHoney(net.minecraft.advancements.critereon.BlockPredicate$Builder,net.minecraft.advancements.critereon.ItemPredicate$Builder) -> a
    58:67:boolean matches(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    72:78:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.KilledByCrossbowTrigger -> bl:
    net.minecraft.resources.ResourceLocation ID -> a
    18:18:void <init>() -> <init>
    23:23:net.minecraft.resources.ResourceLocation getId() -> a
    28:30:net.minecraft.advancements.critereon.KilledByCrossbowTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    34:35:void trigger(net.minecraft.server.level.ServerPlayer,java.util.Collection,int) -> a
    18:18:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    34:34:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,java.util.Collection,int,net.minecraft.advancements.critereon.KilledByCrossbowTrigger$TriggerInstance) -> a
    18:18:net.minecraft.resources.ResourceLocation access$000() -> b
    19:19:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.KilledByCrossbowTrigger$TriggerInstance -> bl$a:
    net.minecraft.advancements.critereon.EntityPredicate[] victims -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Ints uniqueEntityTypes -> b
    42:45:void <init>(net.minecraft.advancements.critereon.EntityPredicate[],net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> <init>
    48:53:net.minecraft.advancements.critereon.KilledByCrossbowTrigger$TriggerInstance crossbowKilled(net.minecraft.advancements.critereon.EntityPredicate$Builder[]) -> a
    57:58:net.minecraft.advancements.critereon.KilledByCrossbowTrigger$TriggerInstance crossbowKilled(net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    62:89:boolean matches(net.minecraft.server.level.ServerPlayer,java.util.Collection,int) -> a
    94:99:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.KilledTrigger -> bm:
    net.minecraft.resources.ResourceLocation id -> a
    15:17:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    21:21:net.minecraft.resources.ResourceLocation getId() -> a
    26:26:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    30:31:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource) -> a
    12:12:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    30:30:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource,net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance) -> a
    12:12:net.minecraft.resources.ResourceLocation access$000(net.minecraft.advancements.critereon.KilledTrigger) -> a
net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance -> bm$a:
    net.minecraft.advancements.critereon.EntityPredicate entityPredicate -> a
    net.minecraft.advancements.critereon.DamageSourcePredicate killingBlow -> b
    38:41:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.DamageSourcePredicate) -> <init>
    44:44:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.EntityPredicate) -> a
    48:48:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    52:52:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity() -> c
    56:56:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.DamageSourcePredicate) -> a
    60:60:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.DamageSourcePredicate) -> a
    64:64:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> a
    68:68:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance playerKilledEntity(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> a
    72:72:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.EntityPredicate) -> b
    76:76:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> b
    80:80:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer() -> d
    84:84:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.DamageSourcePredicate) -> b
    88:88:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.DamageSourcePredicate) -> b
    92:92:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> b
    96:96:net.minecraft.advancements.critereon.KilledTrigger$TriggerInstance entityKilledPlayer(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> b
    100:103:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource) -> a
    108:113:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.LevitationTrigger -> bn:
    net.minecraft.resources.ResourceLocation ID -> a
    10:10:void <init>() -> <init>
    15:15:net.minecraft.resources.ResourceLocation getId() -> a
    20:22:net.minecraft.advancements.critereon.LevitationTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    26:27:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.phys.Vec3,int) -> a
    10:10:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    26:26:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.phys.Vec3,int,net.minecraft.advancements.critereon.LevitationTrigger$TriggerInstance) -> a
    10:10:net.minecraft.resources.ResourceLocation access$000() -> b
    11:11:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.LevitationTrigger$TriggerInstance -> bn$a:
    net.minecraft.advancements.critereon.DistancePredicate distance -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Ints duration -> b
    34:37:void <init>(net.minecraft.advancements.critereon.DistancePredicate,net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> <init>
    40:40:net.minecraft.advancements.critereon.LevitationTrigger$TriggerInstance levitated(net.minecraft.advancements.critereon.DistancePredicate) -> a
    44:50:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.phys.Vec3,int) -> a
    55:60:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.LightPredicate -> bo:
    net.minecraft.advancements.critereon.LightPredicate ANY -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Ints composite -> b
    17:19:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> <init>
    22:31:boolean matches(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    35:41:com.google.gson.JsonElement serializeToJson() -> a
    45:50:net.minecraft.advancements.critereon.LightPredicate fromJson(com.google.gson.JsonElement) -> a
    12:12:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.advancements.critereon.LightPredicate$1) -> <init>
    13:13:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.LightPredicate$1 -> bo$1:
net.minecraft.advancements.critereon.LightPredicate$Builder -> bo$a:
    net.minecraft.advancements.critereon.MinMaxBounds$Ints composite -> a
    53:54:void <init>() -> <init>
    57:57:net.minecraft.advancements.critereon.LightPredicate$Builder light() -> a
    61:62:net.minecraft.advancements.critereon.LightPredicate$Builder setComposite(net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    66:66:net.minecraft.advancements.critereon.LightPredicate build() -> b
net.minecraft.advancements.critereon.LocationPredicate -> bp:
    net.minecraft.advancements.critereon.LocationPredicate ANY -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Floats x -> b
    net.minecraft.advancements.critereon.MinMaxBounds$Floats y -> c
    net.minecraft.advancements.critereon.MinMaxBounds$Floats z -> d
    net.minecraft.world.level.biome.Biome biome -> e
    net.minecraft.world.level.levelgen.feature.StructureFeature feature -> f
    net.minecraft.world.level.dimension.DimensionType dimension -> g
    net.minecraft.advancements.critereon.LightPredicate light -> h
    net.minecraft.advancements.critereon.BlockPredicate block -> i
    net.minecraft.advancements.critereon.FluidPredicate fluid -> j
    35:45:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Floats,net.minecraft.advancements.critereon.MinMaxBounds$Floats,net.minecraft.advancements.critereon.MinMaxBounds$Floats,net.minecraft.world.level.biome.Biome,net.minecraft.world.level.levelgen.feature.StructureFeature,net.minecraft.world.level.dimension.DimensionType,net.minecraft.advancements.critereon.LightPredicate,net.minecraft.advancements.critereon.BlockPredicate,net.minecraft.advancements.critereon.FluidPredicate) -> <init>
    48:48:net.minecraft.advancements.critereon.LocationPredicate inBiome(net.minecraft.world.level.biome.Biome) -> a
    52:52:net.minecraft.advancements.critereon.LocationPredicate inDimension(net.minecraft.world.level.dimension.DimensionType) -> a
    56:56:net.minecraft.advancements.critereon.LocationPredicate inFeature(net.minecraft.world.level.levelgen.feature.StructureFeature) -> a
    60:60:boolean matches(net.minecraft.server.level.ServerLevel,double,double,double) -> a
    64:96:boolean matches(net.minecraft.server.level.ServerLevel,float,float,float) -> a
    100:126:com.google.gson.JsonElement serializeToJson() -> a
    130:148:net.minecraft.advancements.critereon.LocationPredicate fromJson(com.google.gson.JsonElement) -> a
    143:143:com.google.gson.JsonSyntaxException lambda$fromJson$0(net.minecraft.resources.ResourceLocation) -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.LocationPredicate$Builder -> bp$a:
    net.minecraft.advancements.critereon.MinMaxBounds$Floats x -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Floats y -> b
    net.minecraft.advancements.critereon.MinMaxBounds$Floats z -> c
    net.minecraft.world.level.biome.Biome biome -> d
    net.minecraft.world.level.levelgen.feature.StructureFeature feature -> e
    net.minecraft.world.level.dimension.DimensionType dimension -> f
    net.minecraft.advancements.critereon.LightPredicate light -> g
    net.minecraft.advancements.critereon.BlockPredicate block -> h
    net.minecraft.advancements.critereon.FluidPredicate fluid -> i
    151:165:void <init>() -> <init>
    168:168:net.minecraft.advancements.critereon.LocationPredicate$Builder location() -> a
    172:173:net.minecraft.advancements.critereon.LocationPredicate$Builder setX(net.minecraft.advancements.critereon.MinMaxBounds$Floats) -> a
    177:178:net.minecraft.advancements.critereon.LocationPredicate$Builder setY(net.minecraft.advancements.critereon.MinMaxBounds$Floats) -> b
    182:183:net.minecraft.advancements.critereon.LocationPredicate$Builder setZ(net.minecraft.advancements.critereon.MinMaxBounds$Floats) -> c
    187:188:net.minecraft.advancements.critereon.LocationPredicate$Builder setBiome(net.minecraft.world.level.biome.Biome) -> a
    192:193:net.minecraft.advancements.critereon.LocationPredicate$Builder setFeature(net.minecraft.world.level.levelgen.feature.StructureFeature) -> a
    197:198:net.minecraft.advancements.critereon.LocationPredicate$Builder setDimension(net.minecraft.world.level.dimension.DimensionType) -> a
    202:203:net.minecraft.advancements.critereon.LocationPredicate$Builder setLight(net.minecraft.advancements.critereon.LightPredicate) -> a
    207:208:net.minecraft.advancements.critereon.LocationPredicate$Builder setBlock(net.minecraft.advancements.critereon.BlockPredicate) -> a
    212:213:net.minecraft.advancements.critereon.LocationPredicate$Builder setFluid(net.minecraft.advancements.critereon.FluidPredicate) -> a
    217:217:net.minecraft.advancements.critereon.LocationPredicate build() -> b
net.minecraft.advancements.critereon.LocationTrigger -> bq:
    net.minecraft.resources.ResourceLocation id -> a
    14:16:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    20:20:net.minecraft.resources.ResourceLocation getId() -> a
    25:26:net.minecraft.advancements.critereon.LocationTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    30:31:void trigger(net.minecraft.server.level.ServerPlayer) -> a
    11:11:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    30:30:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.advancements.critereon.LocationTrigger$TriggerInstance) -> a
    11:11:net.minecraft.resources.ResourceLocation access$000(net.minecraft.advancements.critereon.LocationTrigger) -> a
net.minecraft.advancements.critereon.LocationTrigger$TriggerInstance -> bq$a:
    net.minecraft.advancements.critereon.LocationPredicate location -> a
    37:39:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.advancements.critereon.LocationPredicate) -> <init>
    42:42:net.minecraft.advancements.critereon.LocationTrigger$TriggerInstance located(net.minecraft.advancements.critereon.LocationPredicate) -> a
    46:46:net.minecraft.advancements.critereon.LocationTrigger$TriggerInstance sleptInBed() -> c
    50:50:net.minecraft.advancements.critereon.LocationTrigger$TriggerInstance raidWon() -> d
    54:54:boolean matches(net.minecraft.server.level.ServerLevel,double,double,double) -> a
    59:59:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.MinMaxBounds -> br:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EMPTY -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SWAPPED -> b
    java.lang.Number min -> c
    java.lang.Number max -> d
    174:177:void <init>(java.lang.Number,java.lang.Number) -> <init>
    181:181:java.lang.Number getMin() -> a
    186:186:java.lang.Number getMax() -> b
    190:190:boolean isAny() -> c
    194:209:com.google.gson.JsonElement serializeToJson() -> d
    218:229:net.minecraft.advancements.critereon.MinMaxBounds fromJson(com.google.gson.JsonElement,net.minecraft.advancements.critereon.MinMaxBounds,java.util.function.BiFunction,net.minecraft.advancements.critereon.MinMaxBounds$BoundsFactory) -> a
    239:265:net.minecraft.advancements.critereon.MinMaxBounds fromReader(com.mojang.brigadier.StringReader,net.minecraft.advancements.critereon.MinMaxBounds$BoundsFromReaderFactory,java.util.function.Function,java.util.function.Supplier,java.util.function.Function) -> a
    271:282:java.lang.Number readNumber(com.mojang.brigadier.StringReader,java.util.function.Function,java.util.function.Supplier) -> a
    287:296:boolean isAllowedInputChat(com.mojang.brigadier.StringReader) -> a
    301:301:java.lang.Object optionallyFormat(java.lang.Object,java.util.function.Function) -> a
    168:169:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.MinMaxBounds$BoundsFactory -> br$a:
    net.minecraft.advancements.critereon.MinMaxBounds create(java.lang.Number,java.lang.Number) -> create
net.minecraft.advancements.critereon.MinMaxBounds$BoundsFromReaderFactory -> br$b:
    net.minecraft.advancements.critereon.MinMaxBounds create(com.mojang.brigadier.StringReader,java.lang.Number,java.lang.Number) -> create
net.minecraft.advancements.critereon.MinMaxBounds$Floats -> br$c:
    net.minecraft.advancements.critereon.MinMaxBounds$Floats ANY -> e
    java.lang.Double minSq -> f
    java.lang.Double maxSq -> g
    98:102:net.minecraft.advancements.critereon.MinMaxBounds$Floats create(com.mojang.brigadier.StringReader,java.lang.Float,java.lang.Float) -> a
    107:107:java.lang.Double squareOpt(java.lang.Float) -> a
    114:117:void <init>(java.lang.Float,java.lang.Float) -> <init>
    120:120:net.minecraft.advancements.critereon.MinMaxBounds$Floats exactly(float) -> a
    124:124:net.minecraft.advancements.critereon.MinMaxBounds$Floats between(float,float) -> a
    128:128:net.minecraft.advancements.critereon.MinMaxBounds$Floats atLeast(float) -> b
    132:132:net.minecraft.advancements.critereon.MinMaxBounds$Floats atMost(float) -> c
    136:142:boolean matches(float) -> d
    146:152:boolean matchesSqr(double) -> a
    156:156:net.minecraft.advancements.critereon.MinMaxBounds$Floats fromJson(com.google.gson.JsonElement) -> a
    160:160:net.minecraft.advancements.critereon.MinMaxBounds$Floats fromReader(com.mojang.brigadier.StringReader) -> a
    164:164:net.minecraft.advancements.critereon.MinMaxBounds$Floats fromReader(com.mojang.brigadier.StringReader,java.util.function.Function) -> a
    160:160:java.lang.Float lambda$fromReader$0(java.lang.Float) -> b
    95:95:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.MinMaxBounds$Ints -> br$d:
    net.minecraft.advancements.critereon.MinMaxBounds$Ints ANY -> e
    java.lang.Long minSq -> f
    java.lang.Long maxSq -> g
    24:28:net.minecraft.advancements.critereon.MinMaxBounds$Ints create(com.mojang.brigadier.StringReader,java.lang.Integer,java.lang.Integer) -> a
    33:33:java.lang.Long squareOpt(java.lang.Integer) -> a
    40:43:void <init>(java.lang.Integer,java.lang.Integer) -> <init>
    46:46:net.minecraft.advancements.critereon.MinMaxBounds$Ints exactly(int) -> a
    50:50:net.minecraft.advancements.critereon.MinMaxBounds$Ints between(int,int) -> a
    54:54:net.minecraft.advancements.critereon.MinMaxBounds$Ints atLeast(int) -> b
    58:58:net.minecraft.advancements.critereon.MinMaxBounds$Ints atMost(int) -> c
    62:68:boolean matches(int) -> d
    72:78:boolean matchesSqr(long) -> a
    82:82:net.minecraft.advancements.critereon.MinMaxBounds$Ints fromJson(com.google.gson.JsonElement) -> a
    86:86:net.minecraft.advancements.critereon.MinMaxBounds$Ints fromReader(com.mojang.brigadier.StringReader) -> a
    90:90:net.minecraft.advancements.critereon.MinMaxBounds$Ints fromReader(com.mojang.brigadier.StringReader,java.util.function.Function) -> a
    86:86:java.lang.Integer lambda$fromReader$0(java.lang.Integer) -> b
    21:21:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.MobEffectsPredicate -> bs:
    net.minecraft.advancements.critereon.MobEffectsPredicate ANY -> a
    java.util.Map effects -> b
    25:27:void <init>(java.util.Map) -> <init>
    30:30:net.minecraft.advancements.critereon.MobEffectsPredicate effects() -> a
    34:35:net.minecraft.advancements.critereon.MobEffectsPredicate and(net.minecraft.world.effect.MobEffect) -> a
    39:40:net.minecraft.advancements.critereon.MobEffectsPredicate and(net.minecraft.world.effect.MobEffect,net.minecraft.advancements.critereon.MobEffectsPredicate$MobEffectInstancePredicate) -> a
    44:50:boolean matches(net.minecraft.world.entity.Entity) -> a
    54:57:boolean matches(net.minecraft.world.entity.LivingEntity) -> a
    61:72:boolean matches(java.util.Map) -> a
    76:89:net.minecraft.advancements.critereon.MobEffectsPredicate fromJson(com.google.gson.JsonElement) -> a
    93:103:com.google.gson.JsonElement serializeToJson() -> b
    84:84:com.google.gson.JsonSyntaxException lambda$fromJson$0(net.minecraft.resources.ResourceLocation) -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.MobEffectsPredicate$MobEffectInstancePredicate -> bs$a:
    net.minecraft.advancements.critereon.MinMaxBounds$Ints amplifier -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Ints duration -> b
    java.lang.Boolean ambient -> c
    java.lang.Boolean visible -> d
    114:119:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.advancements.critereon.MinMaxBounds$Ints,java.lang.Boolean,java.lang.Boolean) -> <init>
    122:123:void <init>() -> <init>
    126:141:boolean matches(net.minecraft.world.effect.MobEffectInstance) -> a
    145:152:com.google.gson.JsonElement serializeToJson() -> a
    156:160:net.minecraft.advancements.critereon.MobEffectsPredicate$MobEffectInstancePredicate fromJson(com.google.gson.JsonObject) -> a
net.minecraft.advancements.critereon.NbtPredicate -> bt:
    net.minecraft.advancements.critereon.NbtPredicate ANY -> a
    net.minecraft.nbt.CompoundTag tag -> b
    25:27:void <init>(net.minecraft.nbt.CompoundTag) -> <init>
    30:33:boolean matches(net.minecraft.world.item.ItemStack) -> a
    37:40:boolean matches(net.minecraft.world.entity.Entity) -> a
    44:52:boolean matches(net.minecraft.nbt.Tag) -> a
    56:60:com.google.gson.JsonElement serializeToJson() -> a
    64:73:net.minecraft.advancements.critereon.NbtPredicate fromJson(com.google.gson.JsonElement) -> a
    77:84:net.minecraft.nbt.CompoundTag getEntityTagToCompare(net.minecraft.world.entity.Entity) -> b
    20:20:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.NetherTravelTrigger -> bu:
    net.minecraft.resources.ResourceLocation ID -> a
    11:11:void <init>() -> <init>
    16:16:net.minecraft.resources.ResourceLocation getId() -> a
    21:24:net.minecraft.advancements.critereon.NetherTravelTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    28:29:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.phys.Vec3) -> a
    11:11:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    28:28:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.phys.Vec3,net.minecraft.advancements.critereon.NetherTravelTrigger$TriggerInstance) -> a
    11:11:net.minecraft.resources.ResourceLocation access$000() -> b
    12:12:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.NetherTravelTrigger$TriggerInstance -> bu$a:
    net.minecraft.advancements.critereon.LocationPredicate entered -> a
    net.minecraft.advancements.critereon.LocationPredicate exited -> b
    net.minecraft.advancements.critereon.DistancePredicate distance -> c
    37:41:void <init>(net.minecraft.advancements.critereon.LocationPredicate,net.minecraft.advancements.critereon.LocationPredicate,net.minecraft.advancements.critereon.DistancePredicate) -> <init>
    44:44:net.minecraft.advancements.critereon.NetherTravelTrigger$TriggerInstance travelledThroughNether(net.minecraft.advancements.critereon.DistancePredicate) -> a
    48:57:boolean matches(net.minecraft.server.level.ServerLevel,net.minecraft.world.phys.Vec3,double,double,double) -> a
    62:68:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.PlacedBlockTrigger -> bv:
    net.minecraft.resources.ResourceLocation ID -> a
    19:19:void <init>() -> <init>
    24:24:net.minecraft.resources.ResourceLocation getId() -> a
    29:39:net.minecraft.advancements.critereon.PlacedBlockTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    44:48:net.minecraft.world.level.block.Block deserializeBlock(com.google.gson.JsonObject) -> a
    52:54:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    19:19:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    53:53:boolean lambda$trigger$2(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.ItemStack,net.minecraft.advancements.critereon.PlacedBlockTrigger$TriggerInstance) -> a
    46:46:com.google.gson.JsonSyntaxException lambda$deserializeBlock$1(net.minecraft.resources.ResourceLocation) -> a
    33:33:void lambda$createInstance$0(net.minecraft.world.level.block.Block,java.lang.String) -> a
    19:19:net.minecraft.resources.ResourceLocation access$000() -> b
    20:20:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.PlacedBlockTrigger$TriggerInstance -> bv$a:
    net.minecraft.world.level.block.Block block -> a
    net.minecraft.advancements.critereon.StatePropertiesPredicate state -> b
    net.minecraft.advancements.critereon.LocationPredicate location -> c
    net.minecraft.advancements.critereon.ItemPredicate item -> d
    63:68:void <init>(net.minecraft.world.level.block.Block,net.minecraft.advancements.critereon.StatePropertiesPredicate,net.minecraft.advancements.critereon.LocationPredicate,net.minecraft.advancements.critereon.ItemPredicate) -> <init>
    71:71:net.minecraft.advancements.critereon.PlacedBlockTrigger$TriggerInstance placedBlock(net.minecraft.world.level.block.Block) -> a
    75:87:boolean matches(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel,net.minecraft.world.item.ItemStack) -> a
    92:101:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.PlayerHurtEntityTrigger -> bw:
    net.minecraft.resources.ResourceLocation ID -> a
    11:11:void <init>() -> <init>
    16:16:net.minecraft.resources.ResourceLocation getId() -> a
    21:23:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    27:28:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource,float,float,boolean) -> a
    11:11:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    27:27:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource,float,float,boolean,net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance) -> a
    11:11:net.minecraft.resources.ResourceLocation access$000() -> b
    12:12:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance -> bw$a:
    net.minecraft.advancements.critereon.DamagePredicate damage -> a
    net.minecraft.advancements.critereon.EntityPredicate entity -> b
    35:38:void <init>(net.minecraft.advancements.critereon.DamagePredicate,net.minecraft.advancements.critereon.EntityPredicate) -> <init>
    41:41:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity() -> c
    45:45:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity(net.minecraft.advancements.critereon.DamagePredicate) -> a
    49:49:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity(net.minecraft.advancements.critereon.DamagePredicate$Builder) -> a
    53:53:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity(net.minecraft.advancements.critereon.EntityPredicate) -> a
    57:57:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity(net.minecraft.advancements.critereon.DamagePredicate,net.minecraft.advancements.critereon.EntityPredicate) -> a
    61:61:net.minecraft.advancements.critereon.PlayerHurtEntityTrigger$TriggerInstance playerHurtEntity(net.minecraft.advancements.critereon.DamagePredicate$Builder,net.minecraft.advancements.critereon.EntityPredicate) -> a
    65:71:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource,float,float,boolean) -> a
    76:81:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.PlayerPredicate -> bx:
    net.minecraft.advancements.critereon.PlayerPredicate ANY -> a
    net.minecraft.advancements.critereon.MinMaxBounds$Ints level -> b
    net.minecraft.world.level.GameType gameType -> c
    java.util.Map stats -> d
    it.unimi.dsi.fastutil.objects.Object2BooleanMap recipes -> e
    java.util.Map advancements -> f
    84:95:net.minecraft.advancements.critereon.PlayerPredicate$AdvancementPredicate advancementPredicateFromJson(com.google.gson.JsonElement) -> b
    104:110:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.world.level.GameType,java.util.Map,it.unimi.dsi.fastutil.objects.Object2BooleanMap,java.util.Map) -> <init>
    113:158:boolean matches(net.minecraft.world.entity.Entity) -> a
    162:208:net.minecraft.advancements.critereon.PlayerPredicate fromJson(com.google.gson.JsonElement) -> a
    212:218:net.minecraft.stats.Stat getStat(net.minecraft.stats.StatType,net.minecraft.resources.ResourceLocation) -> a
    222:222:net.minecraft.resources.ResourceLocation getStatValueId(net.minecraft.stats.Stat) -> a
    226:261:com.google.gson.JsonElement serializeToJson() -> a
    257:257:void lambda$serializeToJson$3(com.google.gson.JsonObject,net.minecraft.resources.ResourceLocation,net.minecraft.advancements.critereon.PlayerPredicate$AdvancementPredicate) -> a
    251:251:void lambda$serializeToJson$2(com.google.gson.JsonObject,net.minecraft.resources.ResourceLocation,java.lang.Boolean) -> a
    240:245:void lambda$serializeToJson$1(com.google.gson.JsonArray,net.minecraft.stats.Stat,net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    92:94:void lambda$advancementPredicateFromJson$0(it.unimi.dsi.fastutil.objects.Object2BooleanMap,java.util.Map$Entry) -> a
    32:32:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.world.level.GameType,java.util.Map,it.unimi.dsi.fastutil.objects.Object2BooleanMap,java.util.Map,net.minecraft.advancements.critereon.PlayerPredicate$1) -> <init>
    33:33:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.PlayerPredicate$1 -> bx$1:
net.minecraft.advancements.critereon.PlayerPredicate$AdvancementCriterionsPredicate -> bx$a:
    it.unimi.dsi.fastutil.objects.Object2BooleanMap criterions -> a
    60:62:void <init>(it.unimi.dsi.fastutil.objects.Object2BooleanMap) -> <init>
    66:68:com.google.gson.JsonElement toJson() -> a
    73:79:boolean test(net.minecraft.advancements.AdvancementProgress) -> a
    57:57:boolean test(java.lang.Object) -> test
net.minecraft.advancements.critereon.PlayerPredicate$AdvancementDonePredicate -> bx$b:
    boolean state -> a
    42:44:void <init>(boolean) -> <init>
    48:48:com.google.gson.JsonElement toJson() -> a
    53:53:boolean test(net.minecraft.advancements.AdvancementProgress) -> a
    39:39:boolean test(java.lang.Object) -> test
net.minecraft.advancements.critereon.PlayerPredicate$AdvancementPredicate -> bx$c:
    com.google.gson.JsonElement toJson() -> a
net.minecraft.advancements.critereon.PlayerPredicate$Builder -> bx$d:
    net.minecraft.advancements.critereon.MinMaxBounds$Ints level -> a
    net.minecraft.world.level.GameType gameType -> b
    java.util.Map stats -> c
    it.unimi.dsi.fastutil.objects.Object2BooleanMap recipes -> d
    java.util.Map advancements -> e
    264:269:void <init>() -> <init>
    272:272:net.minecraft.advancements.critereon.PlayerPredicate$Builder player() -> a
    276:277:net.minecraft.advancements.critereon.PlayerPredicate$Builder setLevel(net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    281:282:net.minecraft.advancements.critereon.PlayerPredicate$Builder addStat(net.minecraft.stats.Stat,net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    286:287:net.minecraft.advancements.critereon.PlayerPredicate$Builder addRecipe(net.minecraft.resources.ResourceLocation,boolean) -> a
    291:292:net.minecraft.advancements.critereon.PlayerPredicate$Builder setGameType(net.minecraft.world.level.GameType) -> a
    296:297:net.minecraft.advancements.critereon.PlayerPredicate$Builder checkAdvancementDone(net.minecraft.resources.ResourceLocation,boolean) -> b
    301:302:net.minecraft.advancements.critereon.PlayerPredicate$Builder checkAdvancementCriterions(net.minecraft.resources.ResourceLocation,java.util.Map) -> a
    306:306:net.minecraft.advancements.critereon.PlayerPredicate build() -> b
net.minecraft.advancements.critereon.RecipeUnlockedTrigger -> by:
    net.minecraft.resources.ResourceLocation ID -> a
    11:11:void <init>() -> <init>
    16:16:net.minecraft.resources.ResourceLocation getId() -> a
    21:22:net.minecraft.advancements.critereon.RecipeUnlockedTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    26:27:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.crafting.Recipe) -> a
    11:11:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    26:26:boolean lambda$trigger$0(net.minecraft.world.item.crafting.Recipe,net.minecraft.advancements.critereon.RecipeUnlockedTrigger$TriggerInstance) -> a
    11:11:net.minecraft.resources.ResourceLocation access$000() -> b
    12:12:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.RecipeUnlockedTrigger$TriggerInstance -> by$a:
    net.minecraft.resources.ResourceLocation recipe -> a
    33:35:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    39:41:com.google.gson.JsonElement serializeToJson() -> b
    45:45:boolean matches(net.minecraft.world.item.crafting.Recipe) -> a
net.minecraft.advancements.critereon.ShotCrossbowTrigger -> bz:
    net.minecraft.resources.ResourceLocation ID -> a
    13:13:void <init>() -> <init>
    18:18:net.minecraft.resources.ResourceLocation getId() -> a
    23:24:net.minecraft.advancements.critereon.ShotCrossbowTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    28:29:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.ItemStack) -> a
    13:13:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    28:28:boolean lambda$trigger$0(net.minecraft.world.item.ItemStack,net.minecraft.advancements.critereon.ShotCrossbowTrigger$TriggerInstance) -> a
    13:13:net.minecraft.resources.ResourceLocation access$000() -> b
    14:14:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.ShotCrossbowTrigger$TriggerInstance -> bz$a:
    net.minecraft.advancements.critereon.ItemPredicate item -> a
    35:37:void <init>(net.minecraft.advancements.critereon.ItemPredicate) -> <init>
    40:40:net.minecraft.advancements.critereon.ShotCrossbowTrigger$TriggerInstance shotCrossbow(net.minecraft.advancements.critereon.ItemPredicate) -> a
    44:44:net.minecraft.advancements.critereon.ShotCrossbowTrigger$TriggerInstance shotCrossbow(net.minecraft.world.level.ItemLike) -> a
    48:48:boolean matches(net.minecraft.world.item.ItemStack) -> a
    53:57:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.SimpleCriterionTrigger -> ca:
    java.util.Map players -> a
    16:17:void <init>() -> <init>
    21:22:void addPlayerListener(net.minecraft.server.PlayerAdvancements,net.minecraft.advancements.CriterionTrigger$Listener) -> a
    26:33:void removePlayerListener(net.minecraft.server.PlayerAdvancements,net.minecraft.advancements.CriterionTrigger$Listener) -> b
    37:38:void removePlayerListeners(net.minecraft.server.PlayerAdvancements) -> a
    41:62:void trigger(net.minecraft.server.PlayerAdvancements,java.util.function.Predicate) -> a
    65:72:void trigger(net.minecraft.server.PlayerAdvancements) -> b
    21:21:java.util.Set lambda$addPlayerListener$0(net.minecraft.server.PlayerAdvancements) -> c
net.minecraft.advancements.critereon.SlideDownBlockTrigger -> cb:
    net.minecraft.resources.ResourceLocation ID -> a
    16:16:void <init>() -> <init>
    21:21:net.minecraft.resources.ResourceLocation getId() -> a
    26:33:net.minecraft.advancements.critereon.SlideDownBlockTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    38:42:net.minecraft.world.level.block.Block deserializeBlock(com.google.gson.JsonObject) -> a
    46:47:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.level.block.state.BlockState) -> a
    16:16:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    46:46:boolean lambda$trigger$2(net.minecraft.world.level.block.state.BlockState,net.minecraft.advancements.critereon.SlideDownBlockTrigger$TriggerInstance) -> a
    40:40:com.google.gson.JsonSyntaxException lambda$deserializeBlock$1(net.minecraft.resources.ResourceLocation) -> a
    30:30:void lambda$createInstance$0(net.minecraft.world.level.block.Block,java.lang.String) -> a
    16:16:net.minecraft.resources.ResourceLocation access$000() -> b
    17:17:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.SlideDownBlockTrigger$TriggerInstance -> cb$a:
    net.minecraft.world.level.block.Block block -> a
    net.minecraft.advancements.critereon.StatePropertiesPredicate state -> b
    54:57:void <init>(net.minecraft.world.level.block.Block,net.minecraft.advancements.critereon.StatePropertiesPredicate) -> <init>
    60:60:net.minecraft.advancements.critereon.SlideDownBlockTrigger$TriggerInstance slidesDownBlock(net.minecraft.world.level.block.Block) -> a
    65:70:com.google.gson.JsonElement serializeToJson() -> b
    74:80:boolean matches(net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.advancements.critereon.StatePropertiesPredicate -> cc:
    net.minecraft.advancements.critereon.StatePropertiesPredicate ANY -> a
    java.util.List properties -> b
    127:135:net.minecraft.advancements.critereon.StatePropertiesPredicate$PropertyMatcher fromJson(java.lang.String,com.google.gson.JsonElement) -> a
    140:143:java.lang.String getStringOrNull(com.google.gson.JsonElement) -> b
    148:150:void <init>(java.util.List) -> <init>
    153:158:boolean matches(net.minecraft.world.level.block.state.StateDefinition,net.minecraft.world.level.block.state.StateHolder) -> a
    162:162:boolean matches(net.minecraft.world.level.block.state.BlockState) -> a
    166:166:boolean matches(net.minecraft.world.level.material.FluidState) -> a
    170:171:void checkState(net.minecraft.world.level.block.state.StateDefinition,java.util.function.Consumer) -> a
    174:184:net.minecraft.advancements.critereon.StatePropertiesPredicate fromJson(com.google.gson.JsonElement) -> a
    188:198:com.google.gson.JsonElement serializeToJson() -> a
    195:195:void lambda$serializeToJson$1(com.google.gson.JsonObject,net.minecraft.advancements.critereon.StatePropertiesPredicate$PropertyMatcher) -> a
    170:170:void lambda$checkState$0(net.minecraft.world.level.block.state.StateDefinition,java.util.function.Consumer,net.minecraft.advancements.critereon.StatePropertiesPredicate$PropertyMatcher) -> a
    23:23:void <init>(java.util.List,net.minecraft.advancements.critereon.StatePropertiesPredicate$1) -> <init>
    24:24:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.StatePropertiesPredicate$1 -> cc$1:
net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder -> cc$a:
    java.util.List matchers -> a
    202:205:void <init>() -> <init>
    208:208:net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder properties() -> a
    212:213:net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder hasProperty(net.minecraft.world.level.block.state.properties.Property,java.lang.String) -> a
    217:217:net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder hasProperty(net.minecraft.world.level.block.state.properties.Property,int) -> a
    221:221:net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder hasProperty(net.minecraft.world.level.block.state.properties.Property,boolean) -> a
    225:225:net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder hasProperty(net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> a
    229:229:net.minecraft.advancements.critereon.StatePropertiesPredicate build() -> b
net.minecraft.advancements.critereon.StatePropertiesPredicate$ExactPropertyMatcher -> cc$b:
    java.lang.String value -> a
    62:64:void <init>(java.lang.String,java.lang.String) -> <init>
    68:70:boolean match(net.minecraft.world.level.block.state.StateHolder,net.minecraft.world.level.block.state.properties.Property) -> a
    75:75:com.google.gson.JsonElement toJson() -> a
net.minecraft.advancements.critereon.StatePropertiesPredicate$PropertyMatcher -> cc$c:
    java.lang.String name -> a
    29:31:void <init>(java.lang.String) -> <init>
    34:39:boolean match(net.minecraft.world.level.block.state.StateDefinition,net.minecraft.world.level.block.state.StateHolder) -> a
    boolean match(net.minecraft.world.level.block.state.StateHolder,net.minecraft.world.level.block.state.properties.Property) -> a
    com.google.gson.JsonElement toJson() -> a
    47:47:java.lang.String getName() -> b
    51:55:void checkState(net.minecraft.world.level.block.state.StateDefinition,java.util.function.Consumer) -> a
net.minecraft.advancements.critereon.StatePropertiesPredicate$RangedPropertyMatcher -> cc$d:
    java.lang.String minValue -> a
    java.lang.String maxValue -> b
    87:90:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    94:110:boolean match(net.minecraft.world.level.block.state.StateHolder,net.minecraft.world.level.block.state.properties.Property) -> a
    115:122:com.google.gson.JsonElement toJson() -> a
net.minecraft.advancements.critereon.SummonedEntityTrigger -> cd:
    net.minecraft.resources.ResourceLocation ID -> a
    10:10:void <init>() -> <init>
    15:15:net.minecraft.resources.ResourceLocation getId() -> a
    20:21:net.minecraft.advancements.critereon.SummonedEntityTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    25:26:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.Entity) -> a
    10:10:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    25:25:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.Entity,net.minecraft.advancements.critereon.SummonedEntityTrigger$TriggerInstance) -> a
    10:10:net.minecraft.resources.ResourceLocation access$000() -> b
    11:11:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.SummonedEntityTrigger$TriggerInstance -> cd$a:
    net.minecraft.advancements.critereon.EntityPredicate entity -> a
    32:34:void <init>(net.minecraft.advancements.critereon.EntityPredicate) -> <init>
    37:37:net.minecraft.advancements.critereon.SummonedEntityTrigger$TriggerInstance summonedEntity(net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    41:41:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.Entity) -> a
    46:50:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.TameAnimalTrigger -> ce:
    net.minecraft.resources.ResourceLocation ID -> a
    10:10:void <init>() -> <init>
    15:15:net.minecraft.resources.ResourceLocation getId() -> a
    20:21:net.minecraft.advancements.critereon.TameAnimalTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    25:26:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.animal.Animal) -> a
    10:10:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    25:25:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.animal.Animal,net.minecraft.advancements.critereon.TameAnimalTrigger$TriggerInstance) -> a
    10:10:net.minecraft.resources.ResourceLocation access$000() -> b
    11:11:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.TameAnimalTrigger$TriggerInstance -> ce$a:
    net.minecraft.advancements.critereon.EntityPredicate entity -> a
    32:34:void <init>(net.minecraft.advancements.critereon.EntityPredicate) -> <init>
    37:37:net.minecraft.advancements.critereon.TameAnimalTrigger$TriggerInstance tamedAnimal() -> c
    41:41:net.minecraft.advancements.critereon.TameAnimalTrigger$TriggerInstance tamedAnimal(net.minecraft.advancements.critereon.EntityPredicate) -> a
    45:45:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.animal.Animal) -> a
    50:54:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.TickTrigger -> cf:
    net.minecraft.resources.ResourceLocation ID -> a
    8:8:void <init>() -> <init>
    13:13:net.minecraft.resources.ResourceLocation getId() -> a
    18:18:net.minecraft.advancements.critereon.TickTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    22:23:void trigger(net.minecraft.server.level.ServerPlayer) -> a
    8:8:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    9:9:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.TickTrigger$TriggerInstance -> cf$a:
    27:28:void <init>() -> <init>
net.minecraft.advancements.critereon.TradeTrigger -> cg:
    net.minecraft.resources.ResourceLocation ID -> a
    11:11:void <init>() -> <init>
    16:16:net.minecraft.resources.ResourceLocation getId() -> a
    21:23:net.minecraft.advancements.critereon.TradeTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    27:28:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.npc.AbstractVillager,net.minecraft.world.item.ItemStack) -> a
    11:11:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    27:27:boolean lambda$trigger$0(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.npc.AbstractVillager,net.minecraft.world.item.ItemStack,net.minecraft.advancements.critereon.TradeTrigger$TriggerInstance) -> a
    11:11:net.minecraft.resources.ResourceLocation access$000() -> b
    12:12:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.TradeTrigger$TriggerInstance -> cg$a:
    net.minecraft.advancements.critereon.EntityPredicate villager -> a
    net.minecraft.advancements.critereon.ItemPredicate item -> b
    35:38:void <init>(net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.advancements.critereon.ItemPredicate) -> <init>
    41:41:net.minecraft.advancements.critereon.TradeTrigger$TriggerInstance tradedWithVillager() -> c
    45:51:boolean matches(net.minecraft.server.level.ServerPlayer,net.minecraft.world.entity.npc.AbstractVillager,net.minecraft.world.item.ItemStack) -> a
    56:61:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.UsedEnderEyeTrigger -> ch:
    net.minecraft.resources.ResourceLocation ID -> a
    9:9:void <init>() -> <init>
    14:14:net.minecraft.resources.ResourceLocation getId() -> a
    19:20:net.minecraft.advancements.critereon.UsedEnderEyeTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    24:28:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.core.BlockPos) -> a
    9:9:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    27:27:boolean lambda$trigger$0(double,net.minecraft.advancements.critereon.UsedEnderEyeTrigger$TriggerInstance) -> a
    9:9:net.minecraft.resources.ResourceLocation access$000() -> b
    10:10:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.UsedEnderEyeTrigger$TriggerInstance -> ch$a:
    net.minecraft.advancements.critereon.MinMaxBounds$Floats level -> a
    34:36:void <init>(net.minecraft.advancements.critereon.MinMaxBounds$Floats) -> <init>
    39:39:boolean matches(double) -> a
net.minecraft.advancements.critereon.UsedTotemTrigger -> ci:
    net.minecraft.resources.ResourceLocation ID -> a
    13:13:void <init>() -> <init>
    18:18:net.minecraft.resources.ResourceLocation getId() -> a
    23:24:net.minecraft.advancements.critereon.UsedTotemTrigger$TriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    28:29:void trigger(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.ItemStack) -> a
    13:13:net.minecraft.advancements.CriterionTriggerInstance createInstance(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    28:28:boolean lambda$trigger$0(net.minecraft.world.item.ItemStack,net.minecraft.advancements.critereon.UsedTotemTrigger$TriggerInstance) -> a
    13:13:net.minecraft.resources.ResourceLocation access$000() -> b
    14:14:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.UsedTotemTrigger$TriggerInstance -> ci$a:
    net.minecraft.advancements.critereon.ItemPredicate item -> a
    35:37:void <init>(net.minecraft.advancements.critereon.ItemPredicate) -> <init>
    40:40:net.minecraft.advancements.critereon.UsedTotemTrigger$TriggerInstance usedTotem(net.minecraft.advancements.critereon.ItemPredicate) -> a
    44:44:net.minecraft.advancements.critereon.UsedTotemTrigger$TriggerInstance usedTotem(net.minecraft.world.level.ItemLike) -> a
    48:48:boolean matches(net.minecraft.world.item.ItemStack) -> a
    53:57:com.google.gson.JsonElement serializeToJson() -> b
net.minecraft.advancements.critereon.WrappedMinMaxBounds -> cj:
    net.minecraft.advancements.critereon.WrappedMinMaxBounds ANY -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INTS_ONLY -> b
    java.lang.Float min -> c
    java.lang.Float max -> d
    24:27:void <init>(java.lang.Float,java.lang.Float) -> <init>
    30:30:net.minecraft.advancements.critereon.WrappedMinMaxBounds exactly(float) -> a
    34:34:net.minecraft.advancements.critereon.WrappedMinMaxBounds between(float,float) -> a
    38:38:net.minecraft.advancements.critereon.WrappedMinMaxBounds atLeast(float) -> b
    42:42:net.minecraft.advancements.critereon.WrappedMinMaxBounds atMost(float) -> c
    46:55:boolean matches(float) -> d
    59:68:boolean matchesSqr(double) -> a
    73:73:java.lang.Float getMin() -> a
    78:78:java.lang.Float getMax() -> b
    82:97:com.google.gson.JsonElement serializeToJson() -> c
    101:112:net.minecraft.advancements.critereon.WrappedMinMaxBounds fromJson(com.google.gson.JsonElement) -> a
    117:117:net.minecraft.advancements.critereon.WrappedMinMaxBounds fromReader(com.mojang.brigadier.StringReader,boolean) -> a
    121:145:net.minecraft.advancements.critereon.WrappedMinMaxBounds fromReader(com.mojang.brigadier.StringReader,boolean,java.util.function.Function) -> a
    150:164:java.lang.Float readNumber(com.mojang.brigadier.StringReader,boolean) -> b
    170:179:boolean isAllowedNumber(com.mojang.brigadier.StringReader,boolean) -> c
    184:184:java.lang.Float optionallyFormat(java.lang.Float,java.util.function.Function) -> a
    117:117:java.lang.Float lambda$fromReader$0(java.lang.Float) -> a
    17:19:void <clinit>() -> <clinit>
net.minecraft.advancements.critereon.package-info -> ck:
net.minecraft.advancements.package-info -> cl:
net.minecraft.commands.BrigadierExceptions -> cm:
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType DOUBLE_TOO_SMALL -> a
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType DOUBLE_TOO_BIG -> b
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType FLOAT_TOO_SMALL -> c
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType FLOAT_TOO_BIG -> d
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType INTEGER_TOO_SMALL -> e
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType INTEGER_TOO_BIG -> f
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType LONG_TOO_SMALL -> g
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType LONG_TOO_BIG -> h
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType LITERAL_INCORRECT -> i
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_START_OF_QUOTE -> j
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_END_OF_QUOTE -> k
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_ESCAPE -> l
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_BOOL -> m
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_INT -> n
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_INT -> o
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_LONG -> p
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_LONG -> q
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_DOUBLE -> r
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_DOUBLE -> s
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_INVALID_FLOAT -> t
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_FLOAT -> u
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType READER_EXPECTED_BOOL -> v
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType READER_EXPECTED_SYMBOL -> w
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType DISPATCHER_UNKNOWN_COMMAND -> x
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType DISPATCHER_UNKNOWN_ARGUMENT -> y
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType DISPATCHER_EXPECTED_ARGUMENT_SEPARATOR -> z
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType DISPATCHER_PARSE_EXCEPTION -> A
    9:9:void <init>() -> <init>
    46:46:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType doubleTooLow() -> doubleTooLow
    51:51:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType doubleTooHigh() -> doubleTooHigh
    56:56:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType floatTooLow() -> floatTooLow
    61:61:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType floatTooHigh() -> floatTooHigh
    66:66:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType integerTooLow() -> integerTooLow
    71:71:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType integerTooHigh() -> integerTooHigh
    76:76:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType longTooLow() -> longTooLow
    81:81:com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType longTooHigh() -> longTooHigh
    86:86:com.mojang.brigadier.exceptions.DynamicCommandExceptionType literalIncorrect() -> literalIncorrect
    91:91:com.mojang.brigadier.exceptions.SimpleCommandExceptionType readerExpectedStartOfQuote() -> readerExpectedStartOfQuote
    96:96:com.mojang.brigadier.exceptions.SimpleCommandExceptionType readerExpectedEndOfQuote() -> readerExpectedEndOfQuote
    101:101:com.mojang.brigadier.exceptions.DynamicCommandExceptionType readerInvalidEscape() -> readerInvalidEscape
    106:106:com.mojang.brigadier.exceptions.DynamicCommandExceptionType readerInvalidBool() -> readerInvalidBool
    111:111:com.mojang.brigadier.exceptions.DynamicCommandExceptionType readerInvalidInt() -> readerInvalidInt
    116:116:com.mojang.brigadier.exceptions.SimpleCommandExceptionType readerExpectedInt() -> readerExpectedInt
    121:121:com.mojang.brigadier.exceptions.DynamicCommandExceptionType readerInvalidLong() -> readerInvalidLong
    126:126:com.mojang.brigadier.exceptions.SimpleCommandExceptionType readerExpectedLong() -> readerExpectedLong
    131:131:com.mojang.brigadier.exceptions.DynamicCommandExceptionType readerInvalidDouble() -> readerInvalidDouble
    136:136:com.mojang.brigadier.exceptions.SimpleCommandExceptionType readerExpectedDouble() -> readerExpectedDouble
    141:141:com.mojang.brigadier.exceptions.DynamicCommandExceptionType readerInvalidFloat() -> readerInvalidFloat
    146:146:com.mojang.brigadier.exceptions.SimpleCommandExceptionType readerExpectedFloat() -> readerExpectedFloat
    151:151:com.mojang.brigadier.exceptions.SimpleCommandExceptionType readerExpectedBool() -> readerExpectedBool
    156:156:com.mojang.brigadier.exceptions.DynamicCommandExceptionType readerExpectedSymbol() -> readerExpectedSymbol
    161:161:com.mojang.brigadier.exceptions.SimpleCommandExceptionType dispatcherUnknownCommand() -> dispatcherUnknownCommand
    166:166:com.mojang.brigadier.exceptions.SimpleCommandExceptionType dispatcherUnknownArgument() -> dispatcherUnknownArgument
    171:171:com.mojang.brigadier.exceptions.SimpleCommandExceptionType dispatcherExpectedArgumentSeparator() -> dispatcherExpectedArgumentSeparator
    176:176:com.mojang.brigadier.exceptions.DynamicCommandExceptionType dispatcherParseException() -> dispatcherParseException
    42:42:com.mojang.brigadier.Message lambda$static$16(java.lang.Object) -> a
    37:37:com.mojang.brigadier.Message lambda$static$15(java.lang.Object) -> b
    34:34:com.mojang.brigadier.Message lambda$static$14(java.lang.Object) -> c
    32:32:com.mojang.brigadier.Message lambda$static$13(java.lang.Object) -> d
    30:30:com.mojang.brigadier.Message lambda$static$12(java.lang.Object) -> e
    28:28:com.mojang.brigadier.Message lambda$static$11(java.lang.Object) -> f
    27:27:com.mojang.brigadier.Message lambda$static$10(java.lang.Object) -> g
    26:26:com.mojang.brigadier.Message lambda$static$9(java.lang.Object) -> h
    22:22:com.mojang.brigadier.Message lambda$static$8(java.lang.Object) -> i
    20:20:com.mojang.brigadier.Message lambda$static$7(java.lang.Object,java.lang.Object) -> a
    19:19:com.mojang.brigadier.Message lambda$static$6(java.lang.Object,java.lang.Object) -> b
    17:17:com.mojang.brigadier.Message lambda$static$5(java.lang.Object,java.lang.Object) -> c
    16:16:com.mojang.brigadier.Message lambda$static$4(java.lang.Object,java.lang.Object) -> d
    14:14:com.mojang.brigadier.Message lambda$static$3(java.lang.Object,java.lang.Object) -> e
    13:13:com.mojang.brigadier.Message lambda$static$2(java.lang.Object,java.lang.Object) -> f
    11:11:com.mojang.brigadier.Message lambda$static$1(java.lang.Object,java.lang.Object) -> g
    10:10:com.mojang.brigadier.Message lambda$static$0(java.lang.Object,java.lang.Object) -> h
    10:42:void <clinit>() -> <clinit>
net.minecraft.commands.CommandFunction -> cn:
    net.minecraft.commands.CommandFunction$Entry[] entries -> a
    net.minecraft.resources.ResourceLocation id -> b
    19:22:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.commands.CommandFunction$Entry[]) -> <init>
    25:25:net.minecraft.resources.ResourceLocation getId() -> a
    29:29:net.minecraft.commands.CommandFunction$Entry[] getEntries() -> b
    33:65:net.minecraft.commands.CommandFunction fromLines(net.minecraft.resources.ResourceLocation,net.minecraft.server.ServerFunctionManager,java.util.List) -> a
    15:15:net.minecraft.resources.ResourceLocation access$000(net.minecraft.commands.CommandFunction) -> a
net.minecraft.commands.CommandFunction$CacheableFunction -> cn$a:
    net.minecraft.commands.CommandFunction$CacheableFunction NONE -> a
    net.minecraft.resources.ResourceLocation id -> b
    boolean resolved -> c
    java.util.Optional function -> d
    121:125:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    121:131:void <init>(net.minecraft.commands.CommandFunction) -> <init>
    134:140:java.util.Optional get(net.minecraft.server.ServerFunctionManager) -> a
    145:145:net.minecraft.resources.ResourceLocation getId() -> a
    145:145:net.minecraft.resources.ResourceLocation lambda$getId$0(net.minecraft.commands.CommandFunction) -> a
    116:116:void <clinit>() -> <clinit>
net.minecraft.commands.CommandFunction$CommandEntry -> cn$b:
    com.mojang.brigadier.ParseResults parse -> a
    75:77:void <init>(com.mojang.brigadier.ParseResults) -> <init>
    81:82:void execute(net.minecraft.server.ServerFunctionManager,net.minecraft.commands.CommandSourceStack,java.util.ArrayDeque,int) -> a
    86:86:java.lang.String toString() -> toString
net.minecraft.commands.CommandFunction$Entry -> cn$c:
    void execute(net.minecraft.server.ServerFunctionManager,net.minecraft.commands.CommandSourceStack,java.util.ArrayDeque,int) -> a
net.minecraft.commands.CommandFunction$FunctionEntry -> cn$d:
    net.minecraft.commands.CommandFunction$CacheableFunction function -> a
    93:95:void <init>(net.minecraft.commands.CommandFunction) -> <init>
    99:107:void execute(net.minecraft.server.ServerFunctionManager,net.minecraft.commands.CommandSourceStack,java.util.ArrayDeque,int) -> a
    111:111:java.lang.String toString() -> toString
    100:106:void lambda$execute$0(int,java.util.ArrayDeque,net.minecraft.server.ServerFunctionManager,net.minecraft.commands.CommandSourceStack,net.minecraft.commands.CommandFunction) -> a
net.minecraft.commands.CommandRuntimeException -> co:
    net.minecraft.network.chat.Component message -> a
    10:12:void <init>(net.minecraft.network.chat.Component) -> <init>
    15:15:net.minecraft.network.chat.Component getComponent() -> a
net.minecraft.commands.CommandSource -> cp:
    net.minecraft.commands.CommandSource NULL -> a_
    void sendMessage(net.minecraft.network.chat.Component) -> a
    boolean acceptsSuccess() -> a
    boolean acceptsFailure() -> b
    boolean shouldInformAdmins() -> I_
    6:6:void <clinit>() -> <clinit>
net.minecraft.commands.CommandSource$1 -> cp$1:
    6:6:void <init>() -> <init>
    9:9:void sendMessage(net.minecraft.network.chat.Component) -> a
    13:13:boolean acceptsSuccess() -> a
    18:18:boolean acceptsFailure() -> b
    23:23:boolean shouldInformAdmins() -> I_
net.minecraft.commands.CommandSourceStack -> cq:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_PLAYER -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_ENTITY -> b
    net.minecraft.commands.CommandSource source -> c
    net.minecraft.world.phys.Vec3 worldPosition -> d
    net.minecraft.server.level.ServerLevel level -> e
    int permissionLevel -> f
    java.lang.String textName -> g
    net.minecraft.network.chat.Component displayName -> h
    net.minecraft.server.MinecraftServer server -> i
    boolean silent -> j
    net.minecraft.world.entity.Entity entity -> k
    com.mojang.brigadier.ResultConsumer consumer -> l
    net.minecraft.commands.arguments.EntityAnchorArgument$Anchor anchor -> m
    net.minecraft.world.phys.Vec2 rotation -> n
    51:52:void <init>(net.minecraft.commands.CommandSource,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec2,net.minecraft.server.level.ServerLevel,int,java.lang.String,net.minecraft.network.chat.Component,net.minecraft.server.MinecraftServer,net.minecraft.world.entity.Entity) -> <init>
    54:67:void <init>(net.minecraft.commands.CommandSource,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec2,net.minecraft.server.level.ServerLevel,int,java.lang.String,net.minecraft.network.chat.Component,net.minecraft.server.MinecraftServer,net.minecraft.world.entity.Entity,boolean,com.mojang.brigadier.ResultConsumer,net.minecraft.commands.arguments.EntityAnchorArgument$Anchor) -> <init>
    70:73:net.minecraft.commands.CommandSourceStack withEntity(net.minecraft.world.entity.Entity) -> a
    77:80:net.minecraft.commands.CommandSourceStack withPosition(net.minecraft.world.phys.Vec3) -> a
    84:87:net.minecraft.commands.CommandSourceStack withRotation(net.minecraft.world.phys.Vec2) -> a
    91:94:net.minecraft.commands.CommandSourceStack withCallback(com.mojang.brigadier.ResultConsumer) -> a
    98:99:net.minecraft.commands.CommandSourceStack withCallback(com.mojang.brigadier.ResultConsumer,java.util.function.BinaryOperator) -> a
    103:106:net.minecraft.commands.CommandSourceStack withSuppressedOutput() -> a
    110:113:net.minecraft.commands.CommandSourceStack withPermission(int) -> a
    117:120:net.minecraft.commands.CommandSourceStack withMaximumPermission(int) -> b
    124:127:net.minecraft.commands.CommandSourceStack withAnchor(net.minecraft.commands.arguments.EntityAnchorArgument$Anchor) -> a
    131:134:net.minecraft.commands.CommandSourceStack withLevel(net.minecraft.server.level.ServerLevel) -> a
    138:138:net.minecraft.commands.CommandSourceStack facing(net.minecraft.world.entity.Entity,net.minecraft.commands.arguments.EntityAnchorArgument$Anchor) -> a
    142:150:net.minecraft.commands.CommandSourceStack facing(net.minecraft.world.phys.Vec3) -> b
    154:154:net.minecraft.network.chat.Component getDisplayName() -> b
    158:158:java.lang.String getTextName() -> c
    163:163:boolean hasPermission(int) -> c
    167:167:net.minecraft.world.phys.Vec3 getPosition() -> d
    171:171:net.minecraft.server.level.ServerLevel getLevel() -> e
    176:176:net.minecraft.world.entity.Entity getEntity() -> f
    180:183:net.minecraft.world.entity.Entity getEntityOrException() -> g
    187:190:net.minecraft.server.level.ServerPlayer getPlayerOrException() -> h
    194:194:net.minecraft.world.phys.Vec2 getRotation() -> i
    198:198:net.minecraft.server.MinecraftServer getServer() -> j
    202:202:net.minecraft.commands.arguments.EntityAnchorArgument$Anchor getAnchor() -> k
    206:212:void sendSuccess(net.minecraft.network.chat.Component,boolean) -> a
    215:228:void broadcastToAdmins(net.minecraft.network.chat.Component) -> b
    231:234:void sendFailure(net.minecraft.network.chat.Component) -> a
    237:240:void onCommandComplete(com.mojang.brigadier.context.CommandContext,boolean,int) -> a
    244:244:java.util.Collection getOnlinePlayerNames() -> l
    249:249:java.util.Collection getAllTeams() -> m
    254:254:java.util.Collection getAvailableSoundEvents() -> n
    259:259:java.util.stream.Stream getRecipeNames() -> o
    264:264:java.util.concurrent.CompletableFuture customSuggestion(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    51:51:void lambda$new$0(com.mojang.brigadier.context.CommandContext,boolean,int) -> b
    33:34:void <clinit>() -> <clinit>
net.minecraft.commands.Commands -> cr:
    org.apache.logging.log4j.Logger LOGGER -> a
    com.mojang.brigadier.CommandDispatcher dispatcher -> b
    128:218:void <init>(boolean) -> <init>
    222:226:void serializeTreeToFile(java.io.File) -> a
    229:281:int performCommand(net.minecraft.commands.CommandSourceStack,java.lang.String) -> a
    285:290:void sendCommands(net.minecraft.server.level.ServerPlayer) -> a
    293:321:void fillUsableCommands(com.mojang.brigadier.tree.CommandNode,com.mojang.brigadier.tree.CommandNode,net.minecraft.commands.CommandSourceStack,java.util.Map) -> a
    324:324:com.mojang.brigadier.builder.LiteralArgumentBuilder literal(java.lang.String) -> a
    328:328:com.mojang.brigadier.builder.RequiredArgumentBuilder argument(java.lang.String,com.mojang.brigadier.arguments.ArgumentType) -> a
    332:332:java.util.function.Predicate createValidator(net.minecraft.commands.Commands$ParseFunction) -> a
    343:343:com.mojang.brigadier.CommandDispatcher getDispatcher() -> a
    348:355:com.mojang.brigadier.exceptions.CommandSyntaxException getParseException(com.mojang.brigadier.ParseResults) -> a
    334:337:boolean lambda$createValidator$6(net.minecraft.commands.Commands$ParseFunction,java.lang.String) -> a
    300:300:int lambda$fillUsableCommands$5(com.mojang.brigadier.context.CommandContext) -> a
    296:296:boolean lambda$fillUsableCommands$4(net.minecraft.commands.SharedSuggestionProvider) -> a
    272:272:void lambda$performCommand$3(net.minecraft.network.chat.Component,net.minecraft.network.chat.Style) -> a
    244:244:void lambda$performCommand$2(java.lang.String,net.minecraft.network.chat.Style) -> a
    216:217:void lambda$new$1(com.mojang.brigadier.context.CommandContext,boolean,int) -> a
    212:213:void lambda$new$0(com.mojang.brigadier.tree.CommandNode,com.mojang.brigadier.tree.CommandNode,com.mojang.brigadier.tree.CommandNode,java.util.Collection) -> a
    115:115:void <clinit>() -> <clinit>
net.minecraft.commands.Commands$ParseFunction -> cr$a:
    void parse(com.mojang.brigadier.StringReader) -> parse
net.minecraft.commands.SharedSuggestionProvider -> cs:
    java.util.Collection getOnlinePlayerNames() -> l
    43:43:java.util.Collection getSelectedEntities() -> p
    java.util.Collection getAllTeams() -> m
    java.util.Collection getAvailableSoundEvents() -> n
    java.util.stream.Stream getRecipeNames() -> o
    java.util.concurrent.CompletableFuture customSuggestion(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    55:55:java.util.Collection getRelevantCoordinates() -> q
    59:59:java.util.Collection getAbsoluteCoordinates() -> r
    boolean hasPermission(int) -> c
    65:79:void filterResources(java.lang.Iterable,java.lang.String,java.util.function.Function,java.util.function.Consumer) -> a
    82:91:void filterResources(java.lang.Iterable,java.lang.String,java.lang.String,java.util.function.Function,java.util.function.Consumer) -> a
    94:96:java.util.concurrent.CompletableFuture suggestResource(java.lang.Iterable,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.lang.String) -> a
    100:102:java.util.concurrent.CompletableFuture suggestResource(java.lang.Iterable,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    106:108:java.util.concurrent.CompletableFuture suggestResource(java.lang.Iterable,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Function,java.util.function.Function) -> a
    112:112:java.util.concurrent.CompletableFuture suggestResource(java.util.stream.Stream,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    116:116:java.util.concurrent.CompletableFuture suggestResource(java.util.stream.Stream,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Function,java.util.function.Function) -> a
    120:151:java.util.concurrent.CompletableFuture suggestCoordinates(java.lang.String,java.util.Collection,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Predicate) -> a
    155:176:java.util.concurrent.CompletableFuture suggest2DCoordinates(java.lang.String,java.util.Collection,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Predicate) -> b
    180:186:java.util.concurrent.CompletableFuture suggest(java.lang.Iterable,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    190:192:java.util.concurrent.CompletableFuture suggest(java.util.stream.Stream,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    196:202:java.util.concurrent.CompletableFuture suggest(java.lang.String[],com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    206:213:java.util.concurrent.CompletableFuture suggest(java.lang.Iterable,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Function,java.util.function.Function) -> b
    191:191:boolean lambda$suggest$5(java.lang.String,java.lang.String) -> a
    107:107:void lambda$suggestResource$4(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Function,java.util.function.Function,java.lang.Object) -> a
    101:101:void lambda$suggestResource$3(com.mojang.brigadier.suggestion.SuggestionsBuilder,net.minecraft.resources.ResourceLocation) -> a
    101:101:net.minecraft.resources.ResourceLocation lambda$suggestResource$2(net.minecraft.resources.ResourceLocation) -> a
    95:95:void lambda$suggestResource$1(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.lang.String,net.minecraft.resources.ResourceLocation) -> a
    95:95:net.minecraft.resources.ResourceLocation lambda$suggestResource$0(net.minecraft.resources.ResourceLocation) -> b
net.minecraft.commands.SharedSuggestionProvider$TextCoordinates -> cs$a:
    net.minecraft.commands.SharedSuggestionProvider$TextCoordinates DEFAULT_LOCAL -> a
    net.minecraft.commands.SharedSuggestionProvider$TextCoordinates DEFAULT_GLOBAL -> b
    java.lang.String x -> c
    java.lang.String y -> d
    java.lang.String z -> e
    33:37:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    23:25:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.ColorArgument -> ct:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_VALUE -> a
    23:24:void <init>() -> <init>
    27:27:net.minecraft.commands.arguments.ColorArgument color() -> a
    31:31:net.minecraft.ChatFormatting getColor(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    36:41:net.minecraft.ChatFormatting parse(com.mojang.brigadier.StringReader) -> a
    46:46:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    51:51:java.util.Collection getExamples() -> getExamples
    19:19:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    21:21:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    20:21:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.ComponentArgument -> cu:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_JSON -> a
    20:21:void <init>() -> <init>
    24:24:net.minecraft.network.chat.Component getComponent(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    28:28:net.minecraft.commands.arguments.ComponentArgument textComponent() -> a
    34:41:net.minecraft.network.chat.Component parse(com.mojang.brigadier.StringReader) -> a
    47:47:java.util.Collection getExamples() -> getExamples
    16:16:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    18:18:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    17:18:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.CompoundTagArgument -> cv:
    java.util.Collection EXAMPLES -> a
    16:17:void <init>() -> <init>
    20:20:net.minecraft.commands.arguments.CompoundTagArgument compoundTag() -> a
    24:24:net.minecraft.nbt.CompoundTag getCompoundTag(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    29:29:net.minecraft.nbt.CompoundTag parse(com.mojang.brigadier.StringReader) -> a
    34:34:java.util.Collection getExamples() -> getExamples
    13:13:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    14:14:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.DimensionTypeArgument -> cw:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_VALUE -> a
    23:23:void <init>() -> <init>
    30:31:net.minecraft.world.level.dimension.DimensionType parse(com.mojang.brigadier.StringReader) -> a
    36:36:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    41:41:java.util.Collection getExamples() -> getExamples
    45:45:net.minecraft.commands.arguments.DimensionTypeArgument dimension() -> a
    49:49:net.minecraft.world.level.dimension.DimensionType getDimension(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    23:23:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    31:31:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$parse$2(net.minecraft.resources.ResourceLocation) -> a
    26:26:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> a
    24:24:java.lang.String lambda$static$0(net.minecraft.world.level.dimension.DimensionType) -> a
    24:26:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.EntityAnchorArgument -> cx:
    java.util.Collection EXAMPLES -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID -> b
    25:25:void <init>() -> <init>
    30:30:net.minecraft.commands.arguments.EntityAnchorArgument$Anchor getAnchor(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    34:34:net.minecraft.commands.arguments.EntityAnchorArgument anchor() -> a
    39:46:net.minecraft.commands.arguments.EntityAnchorArgument$Anchor parse(com.mojang.brigadier.StringReader) -> a
    51:51:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    56:56:java.util.Collection getExamples() -> getExamples
    25:25:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    27:27:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    26:27:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.EntityAnchorArgument$Anchor -> cx$a:
    net.minecraft.commands.arguments.EntityAnchorArgument$Anchor FEET -> a
    net.minecraft.commands.arguments.EntityAnchorArgument$Anchor EYES -> b
    java.util.Map BY_NAME -> c
    java.lang.String name -> d
    java.util.function.BiFunction transform -> e
    net.minecraft.commands.arguments.EntityAnchorArgument$Anchor[] $VALUES -> f
    59:59:net.minecraft.commands.arguments.EntityAnchorArgument$Anchor[] values() -> values
    59:59:net.minecraft.commands.arguments.EntityAnchorArgument$Anchor valueOf(java.lang.String) -> valueOf
    73:76:void <init>(java.lang.String,int,java.lang.String,java.util.function.BiFunction) -> <init>
    80:80:net.minecraft.commands.arguments.EntityAnchorArgument$Anchor getByName(java.lang.String) -> a
    84:84:net.minecraft.world.phys.Vec3 apply(net.minecraft.world.entity.Entity) -> a
    88:92:net.minecraft.world.phys.Vec3 apply(net.minecraft.commands.CommandSourceStack) -> a
    65:68:void lambda$static$2(java.util.HashMap) -> a
    61:61:net.minecraft.world.phys.Vec3 lambda$static$1(net.minecraft.world.phys.Vec3,net.minecraft.world.entity.Entity) -> a
    60:60:net.minecraft.world.phys.Vec3 lambda$static$0(net.minecraft.world.phys.Vec3,net.minecraft.world.entity.Entity) -> b
    59:59:java.util.Map access$000() -> a
    59:64:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.EntityArgument -> cy:
    java.util.Collection EXAMPLES -> g
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_SINGLE_ENTITY -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_SINGLE_PLAYER -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ONLY_PLAYERS_ALLOWED -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType NO_ENTITIES_FOUND -> d
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType NO_PLAYERS_FOUND -> e
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SELECTORS_NOT_ALLOWED -> f
    boolean single -> h
    boolean playersOnly -> i
    43:46:void <init>(boolean,boolean) -> <init>
    49:49:net.minecraft.commands.arguments.EntityArgument entity() -> a
    53:53:net.minecraft.world.entity.Entity getEntity(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    57:57:net.minecraft.commands.arguments.EntityArgument entities() -> b
    61:65:java.util.Collection getEntities(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    69:69:java.util.Collection getOptionalEntities(com.mojang.brigadier.context.CommandContext,java.lang.String) -> c
    73:73:java.util.Collection getOptionalPlayers(com.mojang.brigadier.context.CommandContext,java.lang.String) -> d
    77:77:net.minecraft.commands.arguments.EntityArgument player() -> c
    81:81:net.minecraft.server.level.ServerPlayer getPlayer(com.mojang.brigadier.context.CommandContext,java.lang.String) -> e
    85:85:net.minecraft.commands.arguments.EntityArgument players() -> d
    89:93:java.util.Collection getPlayers(com.mojang.brigadier.context.CommandContext,java.lang.String) -> f
    98:115:net.minecraft.commands.arguments.selector.EntitySelector parse(com.mojang.brigadier.StringReader) -> a
    120:135:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    141:141:java.util.Collection getExamples() -> getExamples
    28:28:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    130:133:void lambda$listSuggestions$0(net.minecraft.commands.SharedSuggestionProvider,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    28:28:boolean access$000(net.minecraft.commands.arguments.EntityArgument) -> a
    28:28:boolean access$100(net.minecraft.commands.arguments.EntityArgument) -> b
    29:35:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.EntityArgument$Serializer -> cy$a:
    144:144:void <init>() -> <init>
    147:155:void serializeToNetwork(net.minecraft.commands.arguments.EntityArgument,net.minecraft.network.FriendlyByteBuf) -> a
    159:160:net.minecraft.commands.arguments.EntityArgument deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    165:167:void serializeToJson(net.minecraft.commands.arguments.EntityArgument,com.google.gson.JsonObject) -> a
    144:144:void serializeToJson(com.mojang.brigadier.arguments.ArgumentType,com.google.gson.JsonObject) -> a
    144:144:com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    144:144:void serializeToNetwork(com.mojang.brigadier.arguments.ArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
net.minecraft.commands.arguments.EntitySummonArgument -> cz:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_ENTITY -> a
    21:22:void <init>() -> <init>
    25:25:net.minecraft.commands.arguments.EntitySummonArgument id() -> a
    29:29:net.minecraft.resources.ResourceLocation getSummonableEntity(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    33:34:net.minecraft.resources.ResourceLocation verifyCanSummon(net.minecraft.resources.ResourceLocation) -> a
    39:39:net.minecraft.resources.ResourceLocation parse(com.mojang.brigadier.StringReader) -> a
    44:44:java.util.Collection getExamples() -> getExamples
    17:17:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    33:33:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$verifyCanSummon$1(net.minecraft.resources.ResourceLocation) -> b
    19:19:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    18:19:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.GameProfileArgument -> da:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_UNKNOWN_PLAYER -> a
    25:25:void <init>() -> <init>
    30:30:java.util.Collection getGameProfiles(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    34:34:net.minecraft.commands.arguments.GameProfileArgument gameProfile() -> a
    39:53:net.minecraft.commands.arguments.GameProfileArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    90:100:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    106:106:java.util.Collection getExamples() -> getExamples
    25:25:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    98:98:void lambda$listSuggestions$1(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    54:58:java.util.Collection lambda$parse$0(java.lang.String,net.minecraft.commands.CommandSourceStack) -> a
    26:27:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.GameProfileArgument$Result -> da$a:
    java.util.Collection getNames(net.minecraft.commands.CommandSourceStack) -> getNames
net.minecraft.commands.arguments.GameProfileArgument$SelectorResult -> da$b:
    net.minecraft.commands.arguments.selector.EntitySelector selector -> a
    70:72:void <init>(net.minecraft.commands.arguments.selector.EntitySelector) -> <init>
    76:84:java.util.Collection getNames(net.minecraft.commands.CommandSourceStack) -> getNames
net.minecraft.commands.arguments.ItemEnchantmentArgument -> db:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_ENCHANTMENT -> a
    21:21:void <init>() -> <init>
    27:27:net.minecraft.commands.arguments.ItemEnchantmentArgument enchantment() -> a
    31:31:net.minecraft.world.item.enchantment.Enchantment getEnchantment(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    36:37:net.minecraft.world.item.enchantment.Enchantment parse(com.mojang.brigadier.StringReader) -> a
    42:42:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    47:47:java.util.Collection getExamples() -> getExamples
    21:21:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    37:37:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$parse$1(net.minecraft.resources.ResourceLocation) -> a
    24:24:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    22:24:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.MessageArgument -> dc:
    java.util.Collection EXAMPLES -> a
    20:20:void <init>() -> <init>
    24:24:net.minecraft.commands.arguments.MessageArgument message() -> a
    28:28:net.minecraft.network.chat.Component getMessage(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    33:33:net.minecraft.commands.arguments.MessageArgument$Message parse(com.mojang.brigadier.StringReader) -> a
    38:38:java.util.Collection getExamples() -> getExamples
    20:20:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    21:21:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.MessageArgument$Message -> dc$a:
    java.lang.String text -> a
    net.minecraft.commands.arguments.MessageArgument$Part[] parts -> b
    45:48:void <init>(java.lang.String,net.minecraft.commands.arguments.MessageArgument$Part[]) -> <init>
    51:51:java.lang.String getText() -> a
    55:55:net.minecraft.commands.arguments.MessageArgument$Part[] getParts() -> b
    59:81:net.minecraft.network.chat.Component toComponent(net.minecraft.commands.CommandSourceStack,boolean) -> a
    85:115:net.minecraft.commands.arguments.MessageArgument$Message parseText(com.mojang.brigadier.StringReader,boolean) -> a
net.minecraft.commands.arguments.MessageArgument$Part -> dc$b:
    int start -> a
    int end -> b
    net.minecraft.commands.arguments.selector.EntitySelector selector -> c
    124:128:void <init>(int,int,net.minecraft.commands.arguments.selector.EntitySelector) -> <init>
    131:131:int getStart() -> a
    135:135:int getEnd() -> b
    139:139:net.minecraft.commands.arguments.selector.EntitySelector getSelector() -> c
    144:144:net.minecraft.network.chat.Component toComponent(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.commands.arguments.MobEffectArgument -> dd:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_EFFECT -> a
    21:21:void <init>() -> <init>
    27:27:net.minecraft.commands.arguments.MobEffectArgument effect() -> a
    31:31:net.minecraft.world.effect.MobEffect getEffect(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    36:37:net.minecraft.world.effect.MobEffect parse(com.mojang.brigadier.StringReader) -> a
    42:42:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    47:47:java.util.Collection getExamples() -> getExamples
    21:21:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    37:37:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$parse$1(net.minecraft.resources.ResourceLocation) -> a
    24:24:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    22:24:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.NbtPathArgument -> de:
    java.util.Collection EXAMPLES -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_NODE -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NOTHING_FOUND -> b
    31:31:void <init>() -> <init>
    42:42:net.minecraft.commands.arguments.NbtPathArgument nbtPath() -> a
    46:46:net.minecraft.commands.arguments.NbtPathArgument$NbtPath getPath(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    51:69:net.minecraft.commands.arguments.NbtPathArgument$NbtPath parse(com.mojang.brigadier.StringReader) -> a
    73:103:net.minecraft.commands.arguments.NbtPathArgument$Node parseNode(com.mojang.brigadier.StringReader,boolean) -> a
    109:113:net.minecraft.commands.arguments.NbtPathArgument$Node readObjectNode(com.mojang.brigadier.StringReader,java.lang.String) -> a
    118:125:java.lang.String readUnquotedName(com.mojang.brigadier.StringReader) -> b
    130:130:java.util.Collection getExamples() -> getExamples
    134:134:boolean isAllowedInUnquotedName(char) -> a
    229:229:java.util.function.Predicate createTagPredicate(net.minecraft.nbt.CompoundTag) -> b
    31:31:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    229:229:boolean lambda$createTagPredicate$1(net.minecraft.nbt.CompoundTag,net.minecraft.nbt.Tag) -> a
    34:34:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    31:31:java.util.function.Predicate access$000(net.minecraft.nbt.CompoundTag) -> a
    32:34:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.NbtPathArgument$AllElementsNode -> de$a:
    net.minecraft.commands.arguments.NbtPathArgument$AllElementsNode INSTANCE -> a
    482:483:void <init>() -> <init>
    489:492:void getTag(net.minecraft.nbt.Tag,java.util.List) -> a
    496:507:void getOrCreateTag(net.minecraft.nbt.Tag,java.util.function.Supplier,java.util.List) -> a
    511:511:net.minecraft.nbt.Tag createPreferredParentTag() -> a
    516:539:int setTag(net.minecraft.nbt.Tag,java.util.function.Supplier) -> a
    544:553:int removeTag(net.minecraft.nbt.Tag) -> a
    485:485:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.NbtPathArgument$CompoundChildNode -> de$b:
    java.lang.String name -> a
    265:267:void <init>(java.lang.String) -> <init>
    271:277:void getTag(net.minecraft.nbt.Tag,java.util.List) -> a
    281:293:void getOrCreateTag(net.minecraft.nbt.Tag,java.util.function.Supplier,java.util.List) -> a
    297:297:net.minecraft.nbt.Tag createPreferredParentTag() -> a
    302:311:int setTag(net.minecraft.nbt.Tag,java.util.function.Supplier) -> a
    316:324:int removeTag(net.minecraft.nbt.Tag) -> a
net.minecraft.commands.arguments.NbtPathArgument$IndexedElementNode -> de$c:
    int index -> a
    331:333:void <init>(int) -> <init>
    337:347:void getTag(net.minecraft.nbt.Tag,java.util.List) -> a
    351:352:void getOrCreateTag(net.minecraft.nbt.Tag,java.util.function.Supplier,java.util.List) -> a
    356:356:net.minecraft.nbt.Tag createPreferredParentTag() -> a
    361:375:int setTag(net.minecraft.nbt.Tag,java.util.function.Supplier) -> a
    380:391:int removeTag(net.minecraft.nbt.Tag) -> a
net.minecraft.commands.arguments.NbtPathArgument$ListElementFunction -> de$d:
    boolean apply(net.minecraft.nbt.ListTag,int,net.minecraft.nbt.Tag) -> a
net.minecraft.commands.arguments.NbtPathArgument$MatchElementNode -> de$e:
    net.minecraft.nbt.CompoundTag pattern -> a
    java.util.function.Predicate predicate -> b
    403:406:void <init>(net.minecraft.nbt.CompoundTag) -> <init>
    410:414:void getTag(net.minecraft.nbt.Tag,java.util.List) -> a
    418:432:void getOrCreateTag(net.minecraft.nbt.Tag,java.util.function.Supplier,java.util.List) -> a
    436:436:net.minecraft.nbt.Tag createPreferredParentTag() -> a
    441:461:int setTag(net.minecraft.nbt.Tag,java.util.function.Supplier) -> a
    466:477:int removeTag(net.minecraft.nbt.Tag) -> a
    422:424:void lambda$getOrCreateTag$0(java.util.List,org.apache.commons.lang3.mutable.MutableBoolean,net.minecraft.nbt.Tag) -> a
net.minecraft.commands.arguments.NbtPathArgument$MatchObjectNode -> de$f:
    java.lang.String name -> a
    net.minecraft.nbt.CompoundTag pattern -> b
    java.util.function.Predicate predicate -> c
    562:566:void <init>(java.lang.String,net.minecraft.nbt.CompoundTag) -> <init>
    570:576:void getTag(net.minecraft.nbt.Tag,java.util.List) -> a
    580:591:void getOrCreateTag(net.minecraft.nbt.Tag,java.util.function.Supplier,java.util.List) -> a
    595:595:net.minecraft.nbt.Tag createPreferredParentTag() -> a
    600:612:int setTag(net.minecraft.nbt.Tag,java.util.function.Supplier) -> a
    617:626:int removeTag(net.minecraft.nbt.Tag) -> a
net.minecraft.commands.arguments.NbtPathArgument$MatchRootObjectNode -> de$g:
    java.util.function.Predicate predicate -> a
    633:635:void <init>(net.minecraft.nbt.CompoundTag) -> <init>
    639:642:void getTag(net.minecraft.nbt.Tag,java.util.List) -> a
    646:647:void getOrCreateTag(net.minecraft.nbt.Tag,java.util.function.Supplier,java.util.List) -> a
    651:651:net.minecraft.nbt.Tag createPreferredParentTag() -> a
    656:656:int setTag(net.minecraft.nbt.Tag,java.util.function.Supplier) -> a
    661:661:int removeTag(net.minecraft.nbt.Tag) -> a
net.minecraft.commands.arguments.NbtPathArgument$NbtPath -> de$h:
    java.lang.String original -> a
    it.unimi.dsi.fastutil.objects.Object2IntMap nodeToOriginalPosition -> b
    net.minecraft.commands.arguments.NbtPathArgument$Node[] nodes -> c
    142:146:void <init>(java.lang.String,net.minecraft.commands.arguments.NbtPathArgument$Node[],it.unimi.dsi.fastutil.objects.Object2IntMap) -> <init>
    149:156:java.util.List get(net.minecraft.nbt.Tag) -> a
    160:167:int countMatching(net.minecraft.nbt.Tag) -> b
    171:181:java.util.List getOrCreateParents(net.minecraft.nbt.Tag) -> d
    185:188:java.util.List getOrCreate(net.minecraft.nbt.Tag,java.util.function.Supplier) -> a
    192:192:int apply(java.util.List,java.util.function.Function) -> a
    196:196:int set(net.minecraft.nbt.Tag,net.minecraft.nbt.Tag) -> a
    200:203:int set(net.minecraft.nbt.Tag,java.util.function.Supplier) -> b
    207:214:int remove(net.minecraft.nbt.Tag) -> c
    218:219:com.mojang.brigadier.exceptions.CommandSyntaxException createNotFoundException(net.minecraft.commands.arguments.NbtPathArgument$Node) -> a
    224:224:java.lang.String toString() -> toString
    203:203:java.lang.Integer lambda$set$1(net.minecraft.commands.arguments.NbtPathArgument$Node,java.util.function.Supplier,net.minecraft.nbt.Tag) -> a
    192:192:java.lang.Integer lambda$apply$0(java.lang.Integer,java.lang.Integer) -> a
net.minecraft.commands.arguments.NbtPathArgument$Node -> de$i:
    void getTag(net.minecraft.nbt.Tag,java.util.List) -> a
    void getOrCreateTag(net.minecraft.nbt.Tag,java.util.function.Supplier,java.util.List) -> a
    net.minecraft.nbt.Tag createPreferredParentTag() -> a
    int setTag(net.minecraft.nbt.Tag,java.util.function.Supplier) -> a
    int removeTag(net.minecraft.nbt.Tag) -> a
    244:244:java.util.List get(java.util.List) -> a
    248:248:java.util.List getOrCreate(java.util.List,java.util.function.Supplier) -> a
    252:258:java.util.List collect(java.util.List,java.util.function.BiConsumer) -> a
    248:248:void lambda$getOrCreate$0(java.util.function.Supplier,net.minecraft.nbt.Tag,java.util.List) -> a
net.minecraft.commands.arguments.NbtTagArgument -> df:
    java.util.Collection EXAMPLES -> a
    16:17:void <init>() -> <init>
    20:20:net.minecraft.commands.arguments.NbtTagArgument nbtTag() -> a
    24:24:net.minecraft.nbt.Tag getNbtTag(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    29:29:net.minecraft.nbt.Tag parse(com.mojang.brigadier.StringReader) -> a
    34:34:java.util.Collection getExamples() -> getExamples
    13:13:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    14:14:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.ObjectiveArgument -> dg:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_OBJECTIVE_NOT_FOUND -> c
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_OBJECTIVE_READ_ONLY -> d
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_OBJECTIVE_NAME_TOO_LONG -> a
    20:20:void <init>() -> <init>
    27:27:net.minecraft.commands.arguments.ObjectiveArgument objective() -> a
    31:37:net.minecraft.world.scores.Objective getObjective(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    41:45:net.minecraft.world.scores.Objective getWritableObjective(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    50:54:java.lang.String parse(com.mojang.brigadier.StringReader) -> a
    60:66:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    72:72:java.util.Collection getExamples() -> getExamples
    20:20:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    24:24:com.mojang.brigadier.Message lambda$static$2(java.lang.Object) -> a
    23:23:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> b
    22:22:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> c
    21:24:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.ObjectiveCriteriaArgument -> dh:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_VALUE -> a
    28:29:void <init>() -> <init>
    32:32:net.minecraft.commands.arguments.ObjectiveCriteriaArgument criteria() -> a
    36:36:net.minecraft.world.scores.criteria.ObjectiveCriteria getCriteria(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    41:46:net.minecraft.world.scores.criteria.ObjectiveCriteria parse(com.mojang.brigadier.StringReader) -> a
    54:61:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    66:66:java.lang.String getName(net.minecraft.stats.StatType,java.lang.Object) -> a
    71:71:java.util.Collection getExamples() -> getExamples
    24:24:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    47:48:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$parse$1(com.mojang.brigadier.StringReader,int,java.lang.String) -> a
    26:26:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    25:26:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.OperationArgument -> di:
    java.util.Collection EXAMPLES -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_OPERATION -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_DIVIDE_BY_ZERO -> c
    20:20:void <init>() -> <init>
    26:26:net.minecraft.commands.arguments.OperationArgument operation() -> a
    30:30:net.minecraft.commands.arguments.OperationArgument$Operation getOperation(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    35:43:net.minecraft.commands.arguments.OperationArgument$Operation parse(com.mojang.brigadier.StringReader) -> a
    48:48:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    53:53:java.util.Collection getExamples() -> getExamples
    57:65:net.minecraft.commands.arguments.OperationArgument$Operation getOperation(java.lang.String) -> a
    69:97:net.minecraft.commands.arguments.OperationArgument$SimpleOperation getSimpleOperation(java.lang.String) -> b
    20:20:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    87:90:int lambda$getSimpleOperation$6(int,int) -> a
    80:83:int lambda$getSimpleOperation$5(int,int) -> b
    77:77:int lambda$getSimpleOperation$4(int,int) -> c
    75:75:int lambda$getSimpleOperation$3(int,int) -> d
    73:73:int lambda$getSimpleOperation$2(int,int) -> e
    71:71:int lambda$getSimpleOperation$1(int,int) -> f
    59:62:void lambda$getOperation$0(net.minecraft.world.scores.Score,net.minecraft.world.scores.Score) -> a
    21:23:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.OperationArgument$Operation -> di$a:
    void apply(net.minecraft.world.scores.Score,net.minecraft.world.scores.Score) -> apply
net.minecraft.commands.arguments.OperationArgument$SimpleOperation -> di$b:
    int apply(int,int) -> apply
    111:112:void apply(net.minecraft.world.scores.Score,net.minecraft.world.scores.Score) -> apply
net.minecraft.commands.arguments.ParticleArgument -> dj:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_PARTICLE -> a
    22:22:void <init>() -> <init>
    27:27:net.minecraft.commands.arguments.ParticleArgument particle() -> a
    31:31:net.minecraft.core.particles.ParticleOptions getParticle(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    36:36:net.minecraft.core.particles.ParticleOptions parse(com.mojang.brigadier.StringReader) -> a
    41:41:java.util.Collection getExamples() -> getExamples
    45:47:net.minecraft.core.particles.ParticleOptions readParticle(com.mojang.brigadier.StringReader) -> b
    51:51:net.minecraft.core.particles.ParticleOptions readParticle(com.mojang.brigadier.StringReader,net.minecraft.core.particles.ParticleType) -> a
    56:56:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    22:22:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    46:46:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$readParticle$1(net.minecraft.resources.ResourceLocation) -> a
    24:24:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    23:24:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.RangeArgument -> dk:
    68:68:net.minecraft.commands.arguments.RangeArgument$Ints intRange() -> a
    72:72:net.minecraft.commands.arguments.RangeArgument$Floats doubleRange() -> b
net.minecraft.commands.arguments.RangeArgument$Floats -> dk$a:
    java.util.Collection EXAMPLES -> a
    42:42:void <init>() -> <init>
    46:46:net.minecraft.advancements.critereon.MinMaxBounds$Floats getRange(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    51:51:net.minecraft.advancements.critereon.MinMaxBounds$Floats parse(com.mojang.brigadier.StringReader) -> a
    56:56:java.util.Collection getExamples() -> getExamples
    42:42:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    43:43:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.RangeArgument$Floats$Serializer -> dk$a$a:
    59:59:void <init>() -> <init>
    62:62:net.minecraft.commands.arguments.RangeArgument$Floats deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    59:59:com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
net.minecraft.commands.arguments.RangeArgument$Ints -> dk$b:
    java.util.Collection EXAMPLES -> a
    17:17:void <init>() -> <init>
    21:21:net.minecraft.advancements.critereon.MinMaxBounds$Ints getRange(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    26:26:net.minecraft.advancements.critereon.MinMaxBounds$Ints parse(com.mojang.brigadier.StringReader) -> a
    31:31:java.util.Collection getExamples() -> getExamples
    17:17:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    18:18:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.RangeArgument$Ints$Serializer -> dk$b$a:
    34:34:void <init>() -> <init>
    37:37:net.minecraft.commands.arguments.RangeArgument$Ints deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    34:34:com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
net.minecraft.commands.arguments.RangeArgument$Serializer -> dk$c:
    75:75:void <init>() -> <init>
    78:78:void serializeToNetwork(net.minecraft.commands.arguments.RangeArgument,net.minecraft.network.FriendlyByteBuf) -> a
    82:82:void serializeToJson(net.minecraft.commands.arguments.RangeArgument,com.google.gson.JsonObject) -> a
    75:75:void serializeToJson(com.mojang.brigadier.arguments.ArgumentType,com.google.gson.JsonObject) -> a
    75:75:void serializeToNetwork(com.mojang.brigadier.arguments.ArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
net.minecraft.commands.arguments.ResourceLocationArgument -> dl:
    java.util.Collection EXAMPLES -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_ADVANCEMENT -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_RECIPE -> c
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_PREDICATE -> d
    26:27:void <init>() -> <init>
    30:30:net.minecraft.commands.arguments.ResourceLocationArgument id() -> a
    34:39:net.minecraft.advancements.Advancement getAdvancement(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    43:46:net.minecraft.world.item.crafting.Recipe getRecipe(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    50:57:net.minecraft.world.level.storage.loot.predicates.LootItemCondition getPredicate(com.mojang.brigadier.context.CommandContext,java.lang.String) -> c
    61:61:net.minecraft.resources.ResourceLocation getId(com.mojang.brigadier.context.CommandContext,java.lang.String) -> d
    66:66:net.minecraft.resources.ResourceLocation parse(com.mojang.brigadier.StringReader) -> a
    71:71:java.util.Collection getExamples() -> getExamples
    20:20:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    46:46:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$getRecipe$3(net.minecraft.resources.ResourceLocation) -> a
    24:24:com.mojang.brigadier.Message lambda$static$2(java.lang.Object) -> a
    23:23:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> b
    22:22:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> c
    21:24:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.ScoreHolderArgument -> dm:
    com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_SCORE_HOLDERS -> a
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_RESULTS -> c
    boolean multiple -> d
    45:47:void <init>(boolean) -> <init>
    50:50:java.lang.String getName(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    54:54:java.util.Collection getNames(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    58:58:java.util.Collection getNamesWithDefaultWildcard(com.mojang.brigadier.context.CommandContext,java.lang.String) -> c
    62:66:java.util.Collection getNames(com.mojang.brigadier.context.CommandContext,java.lang.String,java.util.function.Supplier) -> a
    70:70:net.minecraft.commands.arguments.ScoreHolderArgument scoreHolder() -> a
    74:74:net.minecraft.commands.arguments.ScoreHolderArgument scoreHolders() -> b
    79:102:net.minecraft.commands.arguments.ScoreHolderArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    107:107:java.util.Collection getExamples() -> getExamples
    26:26:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    102:102:java.util.Collection lambda$parse$3(java.util.Collection,net.minecraft.commands.CommandSourceStack,java.util.function.Supplier) -> a
    94:98:java.util.Collection lambda$parse$2(net.minecraft.commands.CommandSourceStack,java.util.function.Supplier) -> a
    28:35:java.util.concurrent.CompletableFuture lambda$static$1(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    35:35:void lambda$null$0(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    26:26:boolean access$000(net.minecraft.commands.arguments.ScoreHolderArgument) -> a
    27:39:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.ScoreHolderArgument$Result -> dm$a:
    java.util.Collection getNames(net.minecraft.commands.CommandSourceStack,java.util.function.Supplier) -> getNames
net.minecraft.commands.arguments.ScoreHolderArgument$SelectorResult -> dm$b:
    net.minecraft.commands.arguments.selector.EntitySelector selector -> a
    118:120:void <init>(net.minecraft.commands.arguments.selector.EntitySelector) -> <init>
    124:132:java.util.Collection getNames(net.minecraft.commands.CommandSourceStack,java.util.function.Supplier) -> getNames
net.minecraft.commands.arguments.ScoreHolderArgument$Serializer -> dm$c:
    136:136:void <init>() -> <init>
    139:144:void serializeToNetwork(net.minecraft.commands.arguments.ScoreHolderArgument,net.minecraft.network.FriendlyByteBuf) -> a
    148:150:net.minecraft.commands.arguments.ScoreHolderArgument deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    155:156:void serializeToJson(net.minecraft.commands.arguments.ScoreHolderArgument,com.google.gson.JsonObject) -> a
    136:136:void serializeToJson(com.mojang.brigadier.arguments.ArgumentType,com.google.gson.JsonObject) -> a
    136:136:com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    136:136:void serializeToNetwork(com.mojang.brigadier.arguments.ArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
net.minecraft.commands.arguments.ScoreboardSlotArgument -> dn:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_VALUE -> a
    23:24:void <init>() -> <init>
    27:27:net.minecraft.commands.arguments.ScoreboardSlotArgument displaySlot() -> a
    31:31:int getDisplaySlot(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    36:41:java.lang.Integer parse(com.mojang.brigadier.StringReader) -> a
    46:46:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    51:51:java.util.Collection getExamples() -> getExamples
    19:19:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    21:21:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    20:21:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.SlotArgument -> dp:
    java.util.Collection EXAMPLES -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_SLOT -> b
    java.util.Map SLOTS -> c
    26:26:void <init>() -> <init>
    61:61:net.minecraft.commands.arguments.SlotArgument slot() -> a
    65:65:int getSlot(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    70:74:java.lang.Integer parse(com.mojang.brigadier.StringReader) -> a
    79:79:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    84:84:java.util.Collection getExamples() -> getExamples
    26:26:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    30:58:void lambda$static$1(java.util.HashMap) -> a
    28:28:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    27:29:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.TeamArgument -> dq:
    java.util.Collection EXAMPLES -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_TEAM_NOT_FOUND -> b
    24:25:void <init>() -> <init>
    28:28:net.minecraft.commands.arguments.TeamArgument team() -> a
    32:38:net.minecraft.world.scores.PlayerTeam getTeam(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    43:43:java.lang.String parse(com.mojang.brigadier.StringReader) -> a
    48:51:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    56:56:java.util.Collection getExamples() -> getExamples
    20:20:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    22:22:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    21:22:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.TimeArgument -> dr:
    java.util.Collection EXAMPLES -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_UNIT -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_TICK_COUNT -> c
    it.unimi.dsi.fastutil.objects.Object2IntMap UNITS -> d
    36:37:void <init>() -> <init>
    40:40:net.minecraft.commands.arguments.TimeArgument time() -> a
    45:57:java.lang.Integer parse(com.mojang.brigadier.StringReader) -> a
    62:69:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    74:74:java.util.Collection getExamples() -> getExamples
    22:22:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    25:25:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    23:34:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.blocks.BlockInput -> ds:
    net.minecraft.world.level.block.state.BlockState state -> a
    java.util.Set properties -> b
    net.minecraft.nbt.CompoundTag tag -> c
    22:26:void <init>(net.minecraft.world.level.block.state.BlockState,java.util.Set,net.minecraft.nbt.CompoundTag) -> <init>
    29:29:net.minecraft.world.level.block.state.BlockState getState() -> a
    34:34:net.minecraft.nbt.CompoundTag getTag() -> b
    38:38:java.util.Set getDefinedProperties() -> c
    43:60:boolean test(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> a
    64:64:boolean test(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    68:83:boolean place(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,int) -> a
    16:16:boolean test(java.lang.Object) -> test
net.minecraft.commands.arguments.blocks.BlockPredicateArgument -> dt:
    java.util.Collection EXAMPLES -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_TAG -> b
    31:31:void <init>() -> <init>
    36:36:net.minecraft.commands.arguments.blocks.BlockPredicateArgument blockPredicate() -> a
    41:48:net.minecraft.commands.arguments.blocks.BlockPredicateArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    59:59:java.util.function.Predicate getBlockPredicate(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    64:71:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    76:76:java.util.Collection getExamples() -> getExamples
    31:31:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    49:53:java.util.function.Predicate lambda$parse$2(net.minecraft.resources.ResourceLocation,net.minecraft.commands.arguments.blocks.BlockStateParser,net.minecraft.tags.TagManager) -> a
    45:45:java.util.function.Predicate lambda$parse$1(net.minecraft.commands.arguments.blocks.BlockPredicateArgument$BlockPredicate,net.minecraft.tags.TagManager) -> a
    33:33:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    32:33:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.blocks.BlockPredicateArgument$1 -> dt$1:
net.minecraft.commands.arguments.blocks.BlockPredicateArgument$BlockPredicate -> dt$a:
    net.minecraft.world.level.block.state.BlockState state -> a
    java.util.Set properties -> b
    net.minecraft.nbt.CompoundTag nbt -> c
    89:93:void <init>(net.minecraft.world.level.block.state.BlockState,java.util.Set,net.minecraft.nbt.CompoundTag) -> <init>
    97:114:boolean test(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> a
    83:83:boolean test(java.lang.Object) -> test
net.minecraft.commands.arguments.blocks.BlockPredicateArgument$Result -> dt$b:
    java.util.function.Predicate create(net.minecraft.tags.TagManager) -> create
net.minecraft.commands.arguments.blocks.BlockPredicateArgument$TagPredicate -> dt$c:
    net.minecraft.tags.Tag tag -> a
    net.minecraft.nbt.CompoundTag nbt -> b
    java.util.Map vagueProperties -> c
    124:128:void <init>(net.minecraft.tags.Tag,java.util.Map,net.minecraft.nbt.CompoundTag) -> <init>
    132:157:boolean test(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> a
    118:118:boolean test(java.lang.Object) -> test
    118:118:void <init>(net.minecraft.tags.Tag,java.util.Map,net.minecraft.nbt.CompoundTag,net.minecraft.commands.arguments.blocks.BlockPredicateArgument$1) -> <init>
net.minecraft.commands.arguments.blocks.BlockStateArgument -> du:
    java.util.Collection EXAMPLES -> a
    15:15:void <init>() -> <init>
    19:19:net.minecraft.commands.arguments.blocks.BlockStateArgument block() -> a
    24:25:net.minecraft.commands.arguments.blocks.BlockInput parse(com.mojang.brigadier.StringReader) -> a
    29:29:net.minecraft.commands.arguments.blocks.BlockInput getBlock(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    34:41:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    46:46:java.util.Collection getExamples() -> getExamples
    15:15:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    16:16:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.blocks.BlockStateParser -> dv:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_TAGS_ALLOWED -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_BLOCK -> b
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_UNKNOWN_PROPERTY -> c
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_DUPLICATE_PROPERTY -> d
    com.mojang.brigadier.exceptions.Dynamic3CommandExceptionType ERROR_INVALID_VALUE -> e
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_EXPECTED_VALUE -> f
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_END_OF_PROPERTIES -> g
    java.util.function.Function SUGGEST_NOTHING -> h
    com.mojang.brigadier.StringReader reader -> i
    boolean forTesting -> j
    java.util.Map properties -> k
    java.util.Map vagueProperties -> l
    net.minecraft.resources.ResourceLocation id -> m
    net.minecraft.world.level.block.state.StateDefinition definition -> n
    net.minecraft.world.level.block.state.BlockState state -> o
    net.minecraft.nbt.CompoundTag nbt -> p
    net.minecraft.resources.ResourceLocation tag -> q
    int tagCursor -> r
    java.util.function.Function suggestions -> s
    52:66:void <init>(com.mojang.brigadier.StringReader,boolean) -> <init>
    69:69:java.util.Map getProperties() -> a
    74:74:net.minecraft.world.level.block.state.BlockState getState() -> b
    79:79:net.minecraft.nbt.CompoundTag getNbt() -> c
    84:84:net.minecraft.resources.ResourceLocation getTag() -> d
    88:108:net.minecraft.commands.arguments.blocks.BlockStateParser parse(boolean) -> a
    112:116:java.util.concurrent.CompletableFuture suggestPropertyNameOrEnd(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    120:123:java.util.concurrent.CompletableFuture suggestVaguePropertyNameOrEnd(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> c
    127:133:java.util.concurrent.CompletableFuture suggestPropertyName(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> d
    137:150:java.util.concurrent.CompletableFuture suggestVaguePropertyName(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> e
    154:157:java.util.concurrent.CompletableFuture suggestOpenNbt(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> f
    161:177:boolean hasBlockEntity() -> k
    181:184:java.util.concurrent.CompletableFuture suggestEquals(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> g
    188:194:java.util.concurrent.CompletableFuture suggestNextPropertyOrEnd(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> h
    198:205:com.mojang.brigadier.suggestion.SuggestionsBuilder addSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder,net.minecraft.world.level.block.state.properties.Property) -> a
    209:233:java.util.concurrent.CompletableFuture suggestVaguePropertyValue(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.lang.String) -> a
    237:261:java.util.concurrent.CompletableFuture suggestOpenVaguePropertiesOrNbt(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> i
    265:273:java.util.concurrent.CompletableFuture suggestOpenPropertiesOrNbt(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> j
    277:277:java.util.concurrent.CompletableFuture suggestTag(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> k
    281:285:java.util.concurrent.CompletableFuture suggestBlockIdOrTag(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> l
    289:299:void readBlock() -> e
    302:310:void readTag() -> f
    313:362:void readProperties() -> g
    365:414:void readVagueProperties() -> h
    417:418:void readNbt() -> i
    421:429:void setValue(net.minecraft.world.level.block.state.properties.Property,java.lang.String,int) -> a
    432:446:java.lang.String serialize(net.minecraft.world.level.block.state.BlockState) -> a
    451:454:void appendProperty(java.lang.StringBuilder,net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> a
    457:457:java.util.concurrent.CompletableFuture fillSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    461:461:java.util.Map getVagueProperties() -> j
    387:387:java.util.concurrent.CompletableFuture lambda$readVagueProperties$7(java.lang.String,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    339:339:java.util.concurrent.CompletableFuture lambda$readProperties$6(net.minecraft.world.level.block.state.properties.Property,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    293:294:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$readBlock$5(int) -> a
    38:38:com.mojang.brigadier.Message lambda$static$4(java.lang.Object,java.lang.Object) -> a
    37:37:com.mojang.brigadier.Message lambda$static$3(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    36:36:com.mojang.brigadier.Message lambda$static$2(java.lang.Object,java.lang.Object) -> b
    35:35:com.mojang.brigadier.Message lambda$static$1(java.lang.Object,java.lang.Object) -> c
    34:34:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    33:48:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.blocks.package-info -> dw:
net.minecraft.commands.arguments.coordinates.BlockPosArgument -> dx:
    java.util.Collection EXAMPLES -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_LOADED -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_OUT_OF_WORLD -> b
    21:21:void <init>() -> <init>
    28:28:net.minecraft.commands.arguments.coordinates.BlockPosArgument blockPos() -> a
    32:39:net.minecraft.core.BlockPos getLoadedBlockPos(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    43:43:net.minecraft.core.BlockPos getOrLoadBlockPos(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    48:51:net.minecraft.commands.arguments.coordinates.Coordinates parse(com.mojang.brigadier.StringReader) -> a
    57:70:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    76:76:java.util.Collection getExamples() -> getExamples
    21:21:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    22:25:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.coordinates.ColumnPosArgument -> dy:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> a
    22:22:void <init>() -> <init>
    27:27:net.minecraft.commands.arguments.coordinates.ColumnPosArgument columnPos() -> a
    31:32:net.minecraft.server.level.ColumnPos getColumnPos(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    37:48:net.minecraft.commands.arguments.coordinates.Coordinates parse(com.mojang.brigadier.StringReader) -> a
    53:66:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    72:72:java.util.Collection getExamples() -> getExamples
    22:22:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    23:24:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.coordinates.Coordinates -> dz:
    net.minecraft.world.phys.Vec3 getPosition(net.minecraft.commands.CommandSourceStack) -> a
    net.minecraft.world.phys.Vec2 getRotation(net.minecraft.commands.CommandSourceStack) -> b
    14:14:net.minecraft.core.BlockPos getBlockPos(net.minecraft.commands.CommandSourceStack) -> c
    boolean isXRelative() -> a
    boolean isYRelative() -> b
    boolean isZRelative() -> c
net.minecraft.commands.arguments.coordinates.LocalCoordinates -> ea:
    double left -> a
    double up -> b
    double forwards -> c
    19:23:void <init>(double,double,double) -> <init>
    27:41:net.minecraft.world.phys.Vec3 getPosition(net.minecraft.commands.CommandSourceStack) -> a
    46:46:net.minecraft.world.phys.Vec2 getRotation(net.minecraft.commands.CommandSourceStack) -> b
    51:51:boolean isXRelative() -> a
    56:56:boolean isYRelative() -> b
    61:61:boolean isZRelative() -> c
    65:79:net.minecraft.commands.arguments.coordinates.LocalCoordinates parse(com.mojang.brigadier.StringReader) -> a
    83:93:double readDouble(com.mojang.brigadier.StringReader,int) -> a
    98:107:boolean equals(java.lang.Object) -> equals
    112:112:int hashCode() -> hashCode
net.minecraft.commands.arguments.coordinates.RotationArgument -> eb:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> a
    14:14:void <init>() -> <init>
    19:19:net.minecraft.commands.arguments.coordinates.RotationArgument rotation() -> a
    23:23:net.minecraft.commands.arguments.coordinates.Coordinates getRotation(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    28:39:net.minecraft.commands.arguments.coordinates.Coordinates parse(com.mojang.brigadier.StringReader) -> a
    44:44:java.util.Collection getExamples() -> getExamples
    14:14:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    15:16:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.coordinates.SwizzleArgument -> ec:
    java.util.Collection EXAMPLES -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID -> b
    16:16:void <init>() -> <init>
    21:21:net.minecraft.commands.arguments.coordinates.SwizzleArgument swizzle() -> a
    26:26:java.util.EnumSet getSwizzle(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    31:57:java.util.EnumSet parse(com.mojang.brigadier.StringReader) -> a
    62:62:java.util.Collection getExamples() -> getExamples
    16:16:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    17:18:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.coordinates.Vec2Argument -> ed:
    java.util.Collection EXAMPLES -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> a
    boolean centerCorrect -> c
    28:30:void <init>(boolean) -> <init>
    33:33:net.minecraft.commands.arguments.coordinates.Vec2Argument vec2() -> a
    37:37:net.minecraft.commands.arguments.coordinates.Vec2Argument vec2(boolean) -> a
    42:43:net.minecraft.world.phys.Vec2 getVec2(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    48:59:net.minecraft.commands.arguments.coordinates.Coordinates parse(com.mojang.brigadier.StringReader) -> a
    64:77:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    83:83:java.util.Collection getExamples() -> getExamples
    22:22:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    23:24:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.coordinates.Vec3Argument -> ee:
    java.util.Collection EXAMPLES -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_MIXED_TYPE -> b
    boolean centerCorrect -> d
    29:31:void <init>(boolean) -> <init>
    34:34:net.minecraft.commands.arguments.coordinates.Vec3Argument vec3() -> a
    38:38:net.minecraft.commands.arguments.coordinates.Vec3Argument vec3(boolean) -> a
    42:42:net.minecraft.world.phys.Vec3 getVec3(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    46:46:net.minecraft.commands.arguments.coordinates.Coordinates getCoordinates(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    51:54:net.minecraft.commands.arguments.coordinates.Coordinates parse(com.mojang.brigadier.StringReader) -> a
    60:73:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    79:79:java.util.Collection getExamples() -> getExamples
    21:21:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    22:25:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.coordinates.WorldCoordinate -> ef:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_DOUBLE -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_INT -> b
    boolean relative -> c
    double value -> d
    17:20:void <init>(boolean,double) -> <init>
    23:26:double get(double) -> a
    31:52:net.minecraft.commands.arguments.coordinates.WorldCoordinate parseDouble(com.mojang.brigadier.StringReader,boolean) -> a
    56:71:net.minecraft.commands.arguments.coordinates.WorldCoordinate parseInt(com.mojang.brigadier.StringReader) -> a
    76:82:boolean isRelative(com.mojang.brigadier.StringReader) -> b
    87:99:boolean equals(java.lang.Object) -> equals
    106:109:int hashCode() -> hashCode
    113:113:boolean isRelative() -> a
    11:12:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.coordinates.WorldCoordinates -> eg:
    net.minecraft.commands.arguments.coordinates.WorldCoordinate x -> a
    net.minecraft.commands.arguments.coordinates.WorldCoordinate y -> b
    net.minecraft.commands.arguments.coordinates.WorldCoordinate z -> c
    14:18:void <init>(net.minecraft.commands.arguments.coordinates.WorldCoordinate,net.minecraft.commands.arguments.coordinates.WorldCoordinate,net.minecraft.commands.arguments.coordinates.WorldCoordinate) -> <init>
    22:23:net.minecraft.world.phys.Vec3 getPosition(net.minecraft.commands.CommandSourceStack) -> a
    28:29:net.minecraft.world.phys.Vec2 getRotation(net.minecraft.commands.CommandSourceStack) -> b
    34:34:boolean isXRelative() -> a
    39:39:boolean isYRelative() -> b
    44:44:boolean isZRelative() -> c
    49:64:boolean equals(java.lang.Object) -> equals
    68:82:net.minecraft.commands.arguments.coordinates.WorldCoordinates parseInt(com.mojang.brigadier.StringReader) -> a
    86:100:net.minecraft.commands.arguments.coordinates.WorldCoordinates parseDouble(com.mojang.brigadier.StringReader,boolean) -> a
    104:104:net.minecraft.commands.arguments.coordinates.WorldCoordinates absolute(double,double,double) -> a
    108:108:net.minecraft.commands.arguments.coordinates.WorldCoordinates absolute(net.minecraft.world.phys.Vec2) -> a
    112:112:net.minecraft.commands.arguments.coordinates.WorldCoordinates current() -> d
    117:120:int hashCode() -> hashCode
net.minecraft.commands.arguments.coordinates.package-info -> eh:
net.minecraft.commands.arguments.item.FunctionArgument -> ei:
    java.util.Collection EXAMPLES -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_TAG -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_FUNCTION -> c
    19:19:void <init>() -> <init>
    25:25:net.minecraft.commands.arguments.item.FunctionArgument functions() -> a
    30:48:net.minecraft.commands.arguments.item.FunctionArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    62:63:net.minecraft.commands.CommandFunction getFunction(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.ResourceLocation) -> c
    67:71:net.minecraft.tags.Tag getFunctionTag(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.ResourceLocation) -> d
    75:75:java.util.Collection getFunctions(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    79:79:com.mojang.datafixers.util.Either getFunctionOrTag(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    84:84:java.util.Collection getExamples() -> getExamples
    19:19:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    63:63:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$getFunction$2(net.minecraft.resources.ResourceLocation) -> a
    22:22:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> a
    21:21:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> b
    19:19:net.minecraft.tags.Tag access$000(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.ResourceLocation) -> a
    19:19:net.minecraft.commands.CommandFunction access$100(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.ResourceLocation) -> b
    20:22:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.item.FunctionArgument$1 -> ei$1:
    net.minecraft.resources.ResourceLocation val$id -> a
    net.minecraft.commands.arguments.item.FunctionArgument this$0 -> b
    33:33:void <init>(net.minecraft.commands.arguments.item.FunctionArgument,net.minecraft.resources.ResourceLocation) -> <init>
    36:37:java.util.Collection create(com.mojang.brigadier.context.CommandContext) -> a
    42:42:com.mojang.datafixers.util.Either unwrap(com.mojang.brigadier.context.CommandContext) -> b
net.minecraft.commands.arguments.item.FunctionArgument$2 -> ei$2:
    net.minecraft.resources.ResourceLocation val$id -> a
    net.minecraft.commands.arguments.item.FunctionArgument this$0 -> b
    48:48:void <init>(net.minecraft.commands.arguments.item.FunctionArgument,net.minecraft.resources.ResourceLocation) -> <init>
    51:51:java.util.Collection create(com.mojang.brigadier.context.CommandContext) -> a
    56:56:com.mojang.datafixers.util.Either unwrap(com.mojang.brigadier.context.CommandContext) -> b
net.minecraft.commands.arguments.item.FunctionArgument$Result -> ei$a:
    java.util.Collection create(com.mojang.brigadier.context.CommandContext) -> a
    com.mojang.datafixers.util.Either unwrap(com.mojang.brigadier.context.CommandContext) -> b
net.minecraft.commands.arguments.item.ItemArgument -> ej:
    java.util.Collection EXAMPLES -> a
    14:14:void <init>() -> <init>
    18:18:net.minecraft.commands.arguments.item.ItemArgument item() -> a
    23:25:net.minecraft.commands.arguments.item.ItemInput parse(com.mojang.brigadier.StringReader) -> a
    29:29:net.minecraft.commands.arguments.item.ItemInput getItem(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    34:41:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    46:46:java.util.Collection getExamples() -> getExamples
    14:14:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    15:15:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.item.ItemInput -> ek:
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_STACK_TOO_BIG -> a
    net.minecraft.world.item.Item item -> b
    net.minecraft.nbt.CompoundTag tag -> c
    22:25:void <init>(net.minecraft.world.item.Item,net.minecraft.nbt.CompoundTag) -> <init>
    28:28:net.minecraft.world.item.Item getItem() -> a
    33:33:net.minecraft.nbt.CompoundTag getTag() -> b
    38:38:boolean test(net.minecraft.world.item.ItemStack) -> a
    42:49:net.minecraft.world.item.ItemStack createItemStack(int,boolean) -> a
    53:57:java.lang.String serialize() -> c
    15:15:boolean test(java.lang.Object) -> test
    16:16:com.mojang.brigadier.Message lambda$static$0(java.lang.Object,java.lang.Object) -> a
    16:16:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.item.ItemParser -> el:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_TAGS_ALLOWED -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_ITEM -> b
    java.util.function.Function SUGGEST_NOTHING -> c
    com.mojang.brigadier.StringReader reader -> d
    boolean forTesting -> e
    java.util.Map properties -> f
    net.minecraft.world.item.Item item -> g
    net.minecraft.nbt.CompoundTag nbt -> h
    net.minecraft.resources.ResourceLocation tag -> i
    int tagCursor -> j
    java.util.function.Function suggestions -> k
    36:47:void <init>(com.mojang.brigadier.StringReader,boolean) -> <init>
    50:50:java.util.Map getProperties() -> a
    54:54:net.minecraft.world.item.Item getItem() -> b
    59:59:net.minecraft.nbt.CompoundTag getNbt() -> c
    63:63:net.minecraft.resources.ResourceLocation getTag() -> d
    67:73:void readItem() -> e
    76:84:void readTag() -> f
    87:88:void readNbt() -> g
    91:102:net.minecraft.commands.arguments.item.ItemParser parse() -> h
    106:109:java.util.concurrent.CompletableFuture suggestOpenNbt(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    113:113:java.util.concurrent.CompletableFuture suggestTag(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> c
    117:120:java.util.concurrent.CompletableFuture suggestItemIdOrTag(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> d
    124:124:java.util.concurrent.CompletableFuture fillSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    70:71:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$readItem$1(int,net.minecraft.resources.ResourceLocation) -> a
    27:27:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    26:32:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.item.ItemPredicateArgument -> em:
    java.util.Collection EXAMPLES -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_TAG -> b
    25:25:void <init>() -> <init>
    30:30:net.minecraft.commands.arguments.item.ItemPredicateArgument itemPredicate() -> a
    35:42:net.minecraft.commands.arguments.item.ItemPredicateArgument$Result parse(com.mojang.brigadier.StringReader) -> a
    53:53:java.util.function.Predicate getItemPredicate(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    58:65:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    70:70:java.util.Collection getExamples() -> getExamples
    25:25:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    43:47:java.util.function.Predicate lambda$parse$2(net.minecraft.resources.ResourceLocation,net.minecraft.commands.arguments.item.ItemParser,com.mojang.brigadier.context.CommandContext) -> a
    39:39:java.util.function.Predicate lambda$parse$1(net.minecraft.commands.arguments.item.ItemPredicateArgument$ItemPredicate,com.mojang.brigadier.context.CommandContext) -> a
    27:27:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    26:27:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.item.ItemPredicateArgument$ItemPredicate -> em$a:
    net.minecraft.world.item.Item item -> a
    net.minecraft.nbt.CompoundTag nbt -> b
    82:85:void <init>(net.minecraft.world.item.Item,net.minecraft.nbt.CompoundTag) -> <init>
    89:89:boolean test(net.minecraft.world.item.ItemStack) -> a
    77:77:boolean test(java.lang.Object) -> test
net.minecraft.commands.arguments.item.ItemPredicateArgument$Result -> em$b:
    java.util.function.Predicate create(com.mojang.brigadier.context.CommandContext) -> create
net.minecraft.commands.arguments.item.ItemPredicateArgument$TagPredicate -> em$c:
    net.minecraft.tags.Tag tag -> a
    net.minecraft.nbt.CompoundTag nbt -> b
    98:101:void <init>(net.minecraft.tags.Tag,net.minecraft.nbt.CompoundTag) -> <init>
    105:105:boolean test(net.minecraft.world.item.ItemStack) -> a
    93:93:boolean test(java.lang.Object) -> test
net.minecraft.commands.arguments.item.package-info -> en:
net.minecraft.commands.arguments.package-info -> eo:
net.minecraft.commands.arguments.selector.EntitySelector -> ep:
    int maxResults -> a
    boolean includesEntities -> b
    boolean worldLimited -> c
    java.util.function.Predicate predicate -> d
    net.minecraft.advancements.critereon.MinMaxBounds$Floats range -> e
    java.util.function.Function position -> f
    net.minecraft.world.phys.AABB aabb -> g
    java.util.function.BiConsumer order -> h
    boolean currentEntity -> i
    java.lang.String playerName -> j
    java.util.UUID entityUUID -> k
    net.minecraft.world.entity.EntityType type -> l
    boolean usesSelector -> m
    47:61:void <init>(int,boolean,boolean,java.util.function.Predicate,net.minecraft.advancements.critereon.MinMaxBounds$Floats,java.util.function.Function,net.minecraft.world.phys.AABB,java.util.function.BiConsumer,boolean,java.lang.String,java.util.UUID,net.minecraft.world.entity.EntityType,boolean) -> <init>
    64:64:int getMaxResults() -> a
    68:68:boolean includesEntities() -> b
    72:72:boolean isSelfSelector() -> c
    76:76:boolean isWorldLimited() -> d
    80:80:boolean usesSelector() -> e
    84:87:void checkPermissions(net.minecraft.commands.CommandSourceStack) -> e
    90:99:net.minecraft.world.entity.Entity findSingleEntity(net.minecraft.commands.CommandSourceStack) -> a
    103:145:java.util.List findEntities(net.minecraft.commands.CommandSourceStack) -> b
    149:154:void addEntities(java.util.List,net.minecraft.server.level.ServerLevel,net.minecraft.world.phys.Vec3,java.util.function.Predicate) -> a
    157:163:net.minecraft.server.level.ServerPlayer findSinglePlayer(net.minecraft.commands.CommandSourceStack) -> c
    167:211:java.util.List findPlayers(net.minecraft.commands.CommandSourceStack) -> d
    215:224:java.util.function.Predicate getPredicate(net.minecraft.world.phys.Vec3) -> a
    228:232:java.util.List sortAndLimit(net.minecraft.world.phys.Vec3,java.util.List) -> a
    236:236:net.minecraft.network.chat.Component joinNames(java.util.List) -> a
    222:222:boolean lambda$getPredicate$1(net.minecraft.world.phys.Vec3,net.minecraft.world.entity.Entity) -> a
    218:218:boolean lambda$getPredicate$0(net.minecraft.world.phys.AABB,net.minecraft.world.entity.Entity) -> a
net.minecraft.commands.arguments.selector.EntitySelectorParser -> eq:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_NAME_OR_UUID -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_SELECTOR_TYPE -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SELECTORS_NOT_ALLOWED -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_MISSING_SELECTOR_TYPE -> d
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_END_OF_OPTIONS -> e
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_EXPECTED_OPTION_VALUE -> f
    java.util.function.BiConsumer ORDER_ARBITRARY -> g
    java.util.function.BiConsumer ORDER_NEAREST -> h
    java.util.function.BiConsumer ORDER_FURTHEST -> i
    java.util.function.BiConsumer ORDER_RANDOM -> j
    java.util.function.BiFunction SUGGEST_NOTHING -> k
    com.mojang.brigadier.StringReader reader -> l
    boolean allowSelectors -> m
    int maxResults -> n
    boolean includesEntities -> o
    boolean worldLimited -> p
    net.minecraft.advancements.critereon.MinMaxBounds$Floats distance -> q
    net.minecraft.advancements.critereon.MinMaxBounds$Ints level -> r
    java.lang.Double x -> s
    java.lang.Double y -> t
    java.lang.Double z -> u
    java.lang.Double deltaX -> v
    java.lang.Double deltaY -> w
    java.lang.Double deltaZ -> x
    net.minecraft.advancements.critereon.WrappedMinMaxBounds rotX -> y
    net.minecraft.advancements.critereon.WrappedMinMaxBounds rotY -> z
    java.util.function.Predicate predicate -> A
    java.util.function.BiConsumer order -> B
    boolean currentEntity -> C
    java.lang.String playerName -> D
    int startPosition -> E
    java.util.UUID entityUUID -> F
    java.util.function.BiFunction suggestions -> G
    boolean hasNameEquals -> H
    boolean hasNameNotEquals -> I
    boolean isLimited -> J
    boolean isSorted -> K
    boolean hasGamemodeEquals -> L
    boolean hasGamemodeNotEquals -> M
    boolean hasTeamEquals -> N
    boolean hasTeamNotEquals -> O
    net.minecraft.world.entity.EntityType type -> P
    boolean typeInverse -> Q
    boolean hasScores -> R
    boolean hasAdvancements -> S
    boolean usesSelectors -> T
    109:110:void <init>(com.mojang.brigadier.StringReader) -> <init>
    68:115:void <init>(com.mojang.brigadier.StringReader,boolean) -> <init>
    119:133:net.minecraft.commands.arguments.selector.EntitySelector getSelector() -> a
    137:146:net.minecraft.world.phys.AABB createAabb(double,double,double) -> a
    150:164:void finalizePredicates() -> I
    167:169:java.util.function.Predicate createRotationPredicate(net.minecraft.advancements.critereon.WrappedMinMaxBounds,java.util.function.ToDoubleFunction) -> a
    179:221:void parseSelector() -> b
    224:243:void parseNameOrUUID() -> c
    246:284:void parseOptions() -> d
    287:293:boolean shouldInvertValue() -> e
    297:303:boolean isTag() -> f
    307:307:com.mojang.brigadier.StringReader getReader() -> g
    311:312:void addPredicate(java.util.function.Predicate) -> a
    315:316:void setWorldLimited() -> h
    319:319:net.minecraft.advancements.critereon.MinMaxBounds$Floats getDistance() -> i
    323:324:void setDistance(net.minecraft.advancements.critereon.MinMaxBounds$Floats) -> a
    327:327:net.minecraft.advancements.critereon.MinMaxBounds$Ints getLevel() -> j
    331:332:void setLevel(net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    335:335:net.minecraft.advancements.critereon.WrappedMinMaxBounds getRotX() -> k
    339:340:void setRotX(net.minecraft.advancements.critereon.WrappedMinMaxBounds) -> a
    343:343:net.minecraft.advancements.critereon.WrappedMinMaxBounds getRotY() -> l
    347:348:void setRotY(net.minecraft.advancements.critereon.WrappedMinMaxBounds) -> b
    352:352:java.lang.Double getX() -> m
    357:357:java.lang.Double getY() -> n
    362:362:java.lang.Double getZ() -> o
    366:367:void setX(double) -> a
    370:371:void setY(double) -> b
    374:375:void setZ(double) -> c
    378:379:void setDeltaX(double) -> d
    382:383:void setDeltaY(double) -> e
    386:387:void setDeltaZ(double) -> f
    391:391:java.lang.Double getDeltaX() -> p
    396:396:java.lang.Double getDeltaY() -> q
    401:401:java.lang.Double getDeltaZ() -> r
    405:406:void setMaxResults(int) -> a
    409:410:void setIncludesEntities(boolean) -> a
    413:413:java.util.function.BiConsumer getOrder() -> s
    417:418:void setOrder(java.util.function.BiConsumer) -> a
    421:433:net.minecraft.commands.arguments.selector.EntitySelector parse() -> t
    437:442:void fillSelectorSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    445:449:java.util.concurrent.CompletableFuture suggestNameOrSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> b
    453:455:java.util.concurrent.CompletableFuture suggestName(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> c
    459:462:java.util.concurrent.CompletableFuture suggestSelector(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> d
    466:467:java.util.concurrent.CompletableFuture suggestOpenOptions(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> e
    471:473:java.util.concurrent.CompletableFuture suggestOptionsKeyOrClose(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> f
    477:478:java.util.concurrent.CompletableFuture suggestOptionsKey(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> g
    482:484:java.util.concurrent.CompletableFuture suggestOptionsNextOrClose(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> h
    488:489:java.util.concurrent.CompletableFuture suggestEquals(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> i
    493:493:boolean isCurrentEntity() -> u
    497:498:void setCurrentEntity(boolean) -> b
    501:502:void setSuggestions(java.util.function.BiFunction) -> a
    505:505:java.util.concurrent.CompletableFuture fillSuggestions(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> a
    509:509:boolean hasNameEquals() -> v
    513:514:void setHasNameEquals(boolean) -> c
    517:517:boolean hasNameNotEquals() -> w
    521:522:void setHasNameNotEquals(boolean) -> d
    525:525:boolean isLimited() -> x
    529:530:void setLimited(boolean) -> e
    533:533:boolean isSorted() -> y
    537:538:void setSorted(boolean) -> f
    541:541:boolean hasGamemodeEquals() -> z
    545:546:void setHasGamemodeEquals(boolean) -> g
    549:549:boolean hasGamemodeNotEquals() -> A
    553:554:void setHasGamemodeNotEquals(boolean) -> h
    557:557:boolean hasTeamEquals() -> B
    561:562:void setHasTeamEquals(boolean) -> i
    565:565:boolean hasTeamNotEquals() -> C
    569:570:void setHasTeamNotEquals(boolean) -> j
    573:574:void limitToType(net.minecraft.world.entity.EntityType) -> a
    577:578:void setTypeLimitedInversely() -> D
    581:581:boolean isTypeLimited() -> E
    585:585:boolean isTypeLimitedInversely() -> F
    589:589:boolean hasScores() -> G
    593:594:void setHasScores(boolean) -> k
    597:597:boolean hasAdvancements() -> H
    601:602:void setHasAdvancements(boolean) -> l
    170:174:boolean lambda$createRotationPredicate$15(java.util.function.ToDoubleFunction,double,double,net.minecraft.world.entity.Entity) -> a
    158:161:boolean lambda$finalizePredicates$14(net.minecraft.world.entity.Entity) -> a
    154:154:double lambda$finalizePredicates$13(net.minecraft.world.entity.Entity) -> b
    151:151:double lambda$finalizePredicates$12(net.minecraft.world.entity.Entity) -> c
    131:131:net.minecraft.world.phys.Vec3 lambda$getSelector$11(net.minecraft.world.phys.Vec3) -> a
    129:129:net.minecraft.world.phys.Vec3 lambda$getSelector$10(net.minecraft.world.phys.Vec3) -> b
    84:84:boolean lambda$new$9(net.minecraft.world.entity.Entity) -> d
    61:61:java.util.concurrent.CompletableFuture lambda$static$8(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> j
    59:59:void lambda$static$7(net.minecraft.world.phys.Vec3,java.util.List) -> a
    58:58:void lambda$static$6(net.minecraft.world.phys.Vec3,java.util.List) -> b
    58:58:int lambda$null$5(net.minecraft.world.phys.Vec3,net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> a
    57:57:void lambda$static$4(net.minecraft.world.phys.Vec3,java.util.List) -> c
    57:57:int lambda$null$3(net.minecraft.world.phys.Vec3,net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> b
    56:56:void lambda$static$2(net.minecraft.world.phys.Vec3,java.util.List) -> d
    54:54:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> a
    50:50:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> b
    49:61:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.selector.options.EntitySelectorOptions -> er:
    java.util.Map OPTIONS -> i
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_OPTION -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INAPPLICABLE_OPTION -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_RANGE_NEGATIVE -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_LEVEL_NEGATIVE -> d
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_LIMIT_TOO_SMALL -> e
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_SORT_UNKNOWN -> f
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_GAME_MODE_INVALID -> g
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_ENTITY_TYPE_INVALID -> h
    54:54:void <init>() -> <init>
    67:68:void register(java.lang.String,net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier,java.util.function.Predicate,net.minecraft.network.chat.Component) -> a
    71:484:void bootStrap() -> a
    487:496:net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier get(net.minecraft.commands.arguments.selector.EntitySelectorParser,java.lang.String,int) -> a
    501:507:void suggestNames(net.minecraft.commands.arguments.selector.EntitySelectorParser,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    483:483:boolean lambda$bootStrap$63(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> a
    465:483:void lambda$bootStrap$62(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> b
    468:480:boolean lambda$null$61(net.minecraft.resources.ResourceLocation,boolean,net.minecraft.world.entity.Entity) -> a
    462:462:boolean lambda$bootStrap$60(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> c
    385:462:void lambda$bootStrap$59(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> d
    444:456:boolean lambda$null$58(java.util.Map,net.minecraft.world.entity.Entity) -> a
    432:432:boolean lambda$null$57(boolean,net.minecraft.advancements.AdvancementProgress) -> a
    422:428:boolean lambda$null$56(java.util.Map,net.minecraft.advancements.AdvancementProgress) -> a
    410:410:boolean lambda$null$55(boolean,net.minecraft.advancements.CriterionProgress) -> a
    382:382:boolean lambda$bootStrap$54(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> e
    339:382:void lambda$bootStrap$53(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> f
    361:377:boolean lambda$null$52(java.util.Map,net.minecraft.world.entity.Entity) -> b
    336:336:boolean lambda$bootStrap$51(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> g
    323:336:void lambda$bootStrap$50(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> h
    327:334:boolean lambda$null$49(net.minecraft.nbt.CompoundTag,boolean,net.minecraft.world.entity.Entity) -> a
    320:320:boolean lambda$bootStrap$48(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> i
    310:320:void lambda$bootStrap$47(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> j
    314:317:boolean lambda$null$46(java.lang.String,boolean,net.minecraft.world.entity.Entity) -> a
    307:307:boolean lambda$bootStrap$45(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> k
    264:307:void lambda$bootStrap$44(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> l
    302:302:boolean lambda$null$43(net.minecraft.world.entity.EntityType,boolean,net.minecraft.world.entity.Entity) -> a
    296:297:com.mojang.brigadier.exceptions.CommandSyntaxException lambda$null$42(net.minecraft.commands.arguments.selector.EntitySelectorParser,int,net.minecraft.resources.ResourceLocation) -> a
    292:292:boolean lambda$null$41(net.minecraft.tags.Tag,boolean,net.minecraft.world.entity.Entity) -> a
    265:271:java.util.concurrent.CompletableFuture lambda$null$40(net.minecraft.commands.arguments.selector.EntitySelectorParser,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> a
    261:261:boolean lambda$bootStrap$39(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> m
    245:261:void lambda$bootStrap$38(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> n
    249:254:boolean lambda$null$37(java.lang.String,boolean,net.minecraft.world.entity.Entity) -> b
    242:242:boolean lambda$bootStrap$36(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> o
    189:242:void lambda$bootStrap$35(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> p
    231:235:boolean lambda$null$34(boolean,net.minecraft.world.level.GameType,net.minecraft.world.entity.Entity) -> a
    190:214:java.util.concurrent.CompletableFuture lambda$null$33(net.minecraft.commands.arguments.selector.EntitySelectorParser,com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> b
    186:186:boolean lambda$bootStrap$32(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> q
    163:186:void lambda$bootStrap$31(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> r
    166:166:java.util.concurrent.CompletableFuture lambda$null$30(com.mojang.brigadier.suggestion.SuggestionsBuilder,java.util.function.Consumer) -> a
    160:160:boolean lambda$bootStrap$29(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> s
    152:160:void lambda$bootStrap$28(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> t
    149:149:boolean lambda$bootStrap$27(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> u
    148:149:void lambda$bootStrap$26(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> v
    145:145:boolean lambda$bootStrap$25(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> w
    144:145:void lambda$bootStrap$24(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> x
    141:141:boolean lambda$bootStrap$23(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> y
    139:141:void lambda$bootStrap$22(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> z
    136:136:boolean lambda$bootStrap$21(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> A
    134:136:void lambda$bootStrap$20(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> B
    131:131:boolean lambda$bootStrap$19(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> C
    129:131:void lambda$bootStrap$18(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> D
    126:126:boolean lambda$bootStrap$17(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> E
    124:126:void lambda$bootStrap$16(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> F
    121:121:boolean lambda$bootStrap$15(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> G
    119:121:void lambda$bootStrap$14(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> H
    116:116:boolean lambda$bootStrap$13(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> I
    114:116:void lambda$bootStrap$12(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> J
    111:111:boolean lambda$bootStrap$11(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> K
    103:111:void lambda$bootStrap$10(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> L
    100:100:boolean lambda$bootStrap$9(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> M
    92:100:void lambda$bootStrap$8(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> N
    89:89:boolean lambda$bootStrap$7(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> O
    76:89:void lambda$bootStrap$6(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> P
    88:88:boolean lambda$null$5(java.lang.String,boolean,net.minecraft.world.entity.Entity) -> c
    64:64:com.mojang.brigadier.Message lambda$static$4(java.lang.Object) -> a
    63:63:com.mojang.brigadier.Message lambda$static$3(java.lang.Object) -> b
    62:62:com.mojang.brigadier.Message lambda$static$2(java.lang.Object) -> c
    58:58:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> d
    57:57:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> e
    55:64:void <clinit>() -> <clinit>
net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$1 -> er$1:
net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier -> er$a:
    void handle(net.minecraft.commands.arguments.selector.EntitySelectorParser) -> handle
net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Option -> er$b:
    net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier modifier -> a
    java.util.function.Predicate predicate -> b
    net.minecraft.network.chat.Component description -> c
    518:522:void <init>(net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier,java.util.function.Predicate,net.minecraft.network.chat.Component) -> <init>
    513:513:void <init>(net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$Modifier,java.util.function.Predicate,net.minecraft.network.chat.Component,net.minecraft.commands.arguments.selector.options.EntitySelectorOptions$1) -> <init>
net.minecraft.commands.arguments.selector.options.package-info -> es:
net.minecraft.commands.arguments.selector.package-info -> et:
net.minecraft.commands.exceptions.package-info -> eu:
net.minecraft.commands.package-info -> ev:
net.minecraft.commands.synchronization.ArgumentSerializer -> ew:
    void serializeToNetwork(com.mojang.brigadier.arguments.ArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
    com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    void serializeToJson(com.mojang.brigadier.arguments.ArgumentType,com.google.gson.JsonObject) -> a
net.minecraft.commands.synchronization.ArgumentTypes -> ex:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.Map BY_CLASS -> b
    java.util.Map BY_NAME -> c
    60:60:void <init>() -> <init>
    67:78:void register(java.lang.String,java.lang.Class,net.minecraft.commands.synchronization.ArgumentSerializer) -> a
    81:123:void bootStrap() -> a
    127:127:net.minecraft.commands.synchronization.ArgumentTypes$Entry get(net.minecraft.resources.ResourceLocation) -> a
    132:132:net.minecraft.commands.synchronization.ArgumentTypes$Entry get(com.mojang.brigadier.arguments.ArgumentType) -> a
    137:146:void serialize(net.minecraft.network.FriendlyByteBuf,com.mojang.brigadier.arguments.ArgumentType) -> a
    150:158:com.mojang.brigadier.arguments.ArgumentType deserialize(net.minecraft.network.FriendlyByteBuf) -> a
    163:177:void serializeToJson(com.google.gson.JsonObject,com.mojang.brigadier.arguments.ArgumentType) -> a
    180:217:com.google.gson.JsonObject serializeNodeToJson(com.mojang.brigadier.CommandDispatcher,com.mojang.brigadier.tree.CommandNode) -> a
    61:64:void <clinit>() -> <clinit>
net.minecraft.commands.synchronization.ArgumentTypes$1 -> ex$1:
net.minecraft.commands.synchronization.ArgumentTypes$Entry -> ex$a:
    java.lang.Class clazz -> a
    net.minecraft.commands.synchronization.ArgumentSerializer serializer -> b
    net.minecraft.resources.ResourceLocation name -> c
    225:229:void <init>(java.lang.Class,net.minecraft.commands.synchronization.ArgumentSerializer,net.minecraft.resources.ResourceLocation) -> <init>
    220:220:void <init>(java.lang.Class,net.minecraft.commands.synchronization.ArgumentSerializer,net.minecraft.resources.ResourceLocation,net.minecraft.commands.synchronization.ArgumentTypes$1) -> <init>
net.minecraft.commands.synchronization.EmptyArgumentSerializer -> ey:
    java.util.function.Supplier constructor -> a
    12:14:void <init>(java.util.function.Supplier) -> <init>
    18:18:void serializeToNetwork(com.mojang.brigadier.arguments.ArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
    22:22:com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    27:27:void serializeToJson(com.mojang.brigadier.arguments.ArgumentType,com.google.gson.JsonObject) -> a
net.minecraft.commands.synchronization.SuggestionProviders -> ez:
    java.util.Map PROVIDERS_BY_NAME -> e
    net.minecraft.resources.ResourceLocation DEFAULT_NAME -> f
    com.mojang.brigadier.suggestion.SuggestionProvider ASK_SERVER -> a
    com.mojang.brigadier.suggestion.SuggestionProvider ALL_RECIPES -> b
    com.mojang.brigadier.suggestion.SuggestionProvider AVAILABLE_SOUNDS -> c
    com.mojang.brigadier.suggestion.SuggestionProvider SUMMONABLE_ENTITIES -> d
    20:20:void <init>() -> <init>
    31:35:com.mojang.brigadier.suggestion.SuggestionProvider register(net.minecraft.resources.ResourceLocation,com.mojang.brigadier.suggestion.SuggestionProvider) -> a
    39:39:com.mojang.brigadier.suggestion.SuggestionProvider getProvider(net.minecraft.resources.ResourceLocation) -> a
    43:46:net.minecraft.resources.ResourceLocation getName(com.mojang.brigadier.suggestion.SuggestionProvider) -> a
    51:54:com.mojang.brigadier.suggestion.SuggestionProvider safelySwap(com.mojang.brigadier.suggestion.SuggestionProvider) -> b
    27:27:java.util.concurrent.CompletableFuture lambda$static$4(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    27:27:com.mojang.brigadier.Message lambda$null$3(net.minecraft.world.entity.EntityType) -> a
    26:26:java.util.concurrent.CompletableFuture lambda$static$2(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    25:25:java.util.concurrent.CompletableFuture lambda$static$1(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> c
    24:24:java.util.concurrent.CompletableFuture lambda$static$0(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> d
    21:27:void <clinit>() -> <clinit>
net.minecraft.commands.synchronization.SuggestionProviders$Wrapper -> ez$a:
    com.mojang.brigadier.suggestion.SuggestionProvider delegate -> a
    net.minecraft.resources.ResourceLocation name -> b
    62:65:void <init>(net.minecraft.resources.ResourceLocation,com.mojang.brigadier.suggestion.SuggestionProvider) -> <init>
    69:69:java.util.concurrent.CompletableFuture getSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> getSuggestions
    58:58:net.minecraft.resources.ResourceLocation access$000(net.minecraft.commands.synchronization.SuggestionProviders$Wrapper) -> a
net.minecraft.commands.synchronization.brigadier.BrigadierArgumentSerializers -> fa:
    13:13:void <init>() -> <init>
    18:24:void bootstrap() -> a
    27:34:byte createNumberFlags(boolean,boolean) -> a
    38:38:boolean numberHasMin(byte) -> a
    42:42:boolean numberHasMax(byte) -> b
net.minecraft.commands.synchronization.brigadier.DoubleArgumentSerializer -> fb:
    12:12:void <init>() -> <init>
    15:24:void serializeToNetwork(com.mojang.brigadier.arguments.DoubleArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
    28:31:com.mojang.brigadier.arguments.DoubleArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    36:42:void serializeToJson(com.mojang.brigadier.arguments.DoubleArgumentType,com.google.gson.JsonObject) -> a
    12:12:void serializeToJson(com.mojang.brigadier.arguments.ArgumentType,com.google.gson.JsonObject) -> a
    12:12:com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    12:12:void serializeToNetwork(com.mojang.brigadier.arguments.ArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
net.minecraft.commands.synchronization.brigadier.FloatArgumentSerializer -> fc:
    12:12:void <init>() -> <init>
    15:24:void serializeToNetwork(com.mojang.brigadier.arguments.FloatArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
    28:31:com.mojang.brigadier.arguments.FloatArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    36:42:void serializeToJson(com.mojang.brigadier.arguments.FloatArgumentType,com.google.gson.JsonObject) -> a
    12:12:void serializeToJson(com.mojang.brigadier.arguments.ArgumentType,com.google.gson.JsonObject) -> a
    12:12:com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    12:12:void serializeToNetwork(com.mojang.brigadier.arguments.ArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
net.minecraft.commands.synchronization.brigadier.IntegerArgumentSerializer -> fd:
    12:12:void <init>() -> <init>
    15:24:void serializeToNetwork(com.mojang.brigadier.arguments.IntegerArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
    28:31:com.mojang.brigadier.arguments.IntegerArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    36:42:void serializeToJson(com.mojang.brigadier.arguments.IntegerArgumentType,com.google.gson.JsonObject) -> a
    12:12:void serializeToJson(com.mojang.brigadier.arguments.ArgumentType,com.google.gson.JsonObject) -> a
    12:12:com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    12:12:void serializeToNetwork(com.mojang.brigadier.arguments.ArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
net.minecraft.commands.synchronization.brigadier.LongArgumentSerializer -> fe:
    12:12:void <init>() -> <init>
    15:24:void serializeToNetwork(com.mojang.brigadier.arguments.LongArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
    28:31:com.mojang.brigadier.arguments.LongArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    36:42:void serializeToJson(com.mojang.brigadier.arguments.LongArgumentType,com.google.gson.JsonObject) -> a
    12:12:void serializeToJson(com.mojang.brigadier.arguments.ArgumentType,com.google.gson.JsonObject) -> a
    12:12:com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    12:12:void serializeToNetwork(com.mojang.brigadier.arguments.ArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
net.minecraft.commands.synchronization.brigadier.StringArgumentSerializer -> ff:
    8:8:void <init>() -> <init>
    11:12:void serializeToNetwork(com.mojang.brigadier.arguments.StringArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
    16:24:com.mojang.brigadier.arguments.StringArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    30:42:void serializeToJson(com.mojang.brigadier.arguments.StringArgumentType,com.google.gson.JsonObject) -> a
    8:8:void serializeToJson(com.mojang.brigadier.arguments.ArgumentType,com.google.gson.JsonObject) -> a
    8:8:com.mojang.brigadier.arguments.ArgumentType deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    8:8:void serializeToNetwork(com.mojang.brigadier.arguments.ArgumentType,net.minecraft.network.FriendlyByteBuf) -> a
net.minecraft.commands.synchronization.brigadier.StringArgumentSerializer$1 -> ff$1:
    int[] $SwitchMap$com$mojang$brigadier$arguments$StringArgumentType$StringType -> a
    17:17:void <clinit>() -> <clinit>
net.minecraft.commands.synchronization.brigadier.package-info -> fg:
net.minecraft.commands.synchronization.package-info -> fh:
net.minecraft.core.AxisCycle -> fi:
    net.minecraft.core.AxisCycle NONE -> a
    net.minecraft.core.AxisCycle FORWARD -> b
    net.minecraft.core.AxisCycle BACKWARD -> c
    net.minecraft.core.Direction$Axis[] AXIS_VALUES -> d
    net.minecraft.core.AxisCycle[] VALUES -> e
    net.minecraft.core.AxisCycle[] $VALUES -> f
    3:3:net.minecraft.core.AxisCycle[] values() -> values
    3:3:net.minecraft.core.AxisCycle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    int cycle(int,int,int,net.minecraft.core.Direction$Axis) -> a
    double cycle(double,double,double,net.minecraft.core.Direction$Axis) -> a
    net.minecraft.core.Direction$Axis cycle(net.minecraft.core.Direction$Axis) -> a
    net.minecraft.core.AxisCycle inverse() -> a
    88:88:net.minecraft.core.AxisCycle between(net.minecraft.core.Direction$Axis,net.minecraft.core.Direction$Axis) -> a
    3:3:void <init>(java.lang.String,int,net.minecraft.core.AxisCycle$1) -> <init>
    3:73:void <clinit>() -> <clinit>
net.minecraft.core.AxisCycle$1 -> fi$1:
    4:4:void <init>(java.lang.String,int) -> <init>
    7:7:int cycle(int,int,int,net.minecraft.core.Direction$Axis) -> a
    12:12:double cycle(double,double,double,net.minecraft.core.Direction$Axis) -> a
    17:17:net.minecraft.core.Direction$Axis cycle(net.minecraft.core.Direction$Axis) -> a
    22:22:net.minecraft.core.AxisCycle inverse() -> a
net.minecraft.core.AxisCycle$2 -> fi$2:
    28:28:void <init>(java.lang.String,int) -> <init>
    31:31:int cycle(int,int,int,net.minecraft.core.Direction$Axis) -> a
    36:36:double cycle(double,double,double,net.minecraft.core.Direction$Axis) -> a
    41:41:net.minecraft.core.Direction$Axis cycle(net.minecraft.core.Direction$Axis) -> a
    46:46:net.minecraft.core.AxisCycle inverse() -> a
net.minecraft.core.AxisCycle$3 -> fi$3:
    49:49:void <init>(java.lang.String,int) -> <init>
    52:52:int cycle(int,int,int,net.minecraft.core.Direction$Axis) -> a
    57:57:double cycle(double,double,double,net.minecraft.core.Direction$Axis) -> a
    62:62:net.minecraft.core.Direction$Axis cycle(net.minecraft.core.Direction$Axis) -> a
    67:67:net.minecraft.core.AxisCycle inverse() -> a
net.minecraft.core.BlockMath -> fj:
    org.apache.logging.log4j.Logger LOGGER -> c
    java.util.EnumMap vanillaUvTransformLocalToGlobal -> a
    java.util.EnumMap vanillaUvTransformGlobalToLocal -> b
    15:15:void <init>() -> <init>
    36:39:com.mojang.math.Transformation blockCenterToCorner(com.mojang.math.Transformation) -> a
    46:49:com.mojang.math.Transformation blockCornerToCenter(com.mojang.math.Transformation) -> b
    53:64:com.mojang.math.Transformation getUVLockTransform(com.mojang.math.Transformation,net.minecraft.core.Direction,java.util.function.Supplier) -> a
    27:30:void lambda$static$1(java.util.EnumMap) -> a
    19:25:void lambda$static$0(java.util.EnumMap) -> b
    16:26:void <clinit>() -> <clinit>
net.minecraft.core.BlockPos -> fk:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.core.BlockPos ZERO -> a
    int PACKED_X_LENGTH -> c
    int PACKED_Z_LENGTH -> d
    int PACKED_Y_LENGTH -> f
    long PACKED_X_MASK -> g
    long PACKED_Y_MASK -> h
    long PACKED_Z_MASK -> i
    int Z_OFFSET -> j
    int X_OFFSET -> k
    45:46:void <init>(int,int,int) -> <init>
    49:50:void <init>(double,double,double) -> <init>
    53:54:void <init>(net.minecraft.world.entity.Entity) -> <init>
    57:58:void <init>(net.minecraft.world.phys.Vec3) -> <init>
    61:62:void <init>(net.minecraft.core.Position) -> <init>
    65:66:void <init>(net.minecraft.core.Vec3i) -> <init>
    69:76:net.minecraft.core.BlockPos deserialize(com.mojang.datafixers.Dynamic) -> a
    81:81:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    85:85:long offset(long,net.minecraft.core.Direction) -> a
    89:89:long offset(long,int,int,int) -> a
    93:94:boolean isOutsideBuildHeight(long) -> a
    98:98:int getX(long) -> b
    102:102:int getY(long) -> c
    106:106:int getZ(long) -> d
    110:110:net.minecraft.core.BlockPos of(long) -> e
    114:118:long asLong(int,int,int) -> a
    126:126:long getFlatIndex(long) -> f
    130:130:long asLong() -> a
    135:138:net.minecraft.core.BlockPos offset(double,double,double) -> a
    143:146:net.minecraft.core.BlockPos offset(int,int,int) -> b
    151:151:net.minecraft.core.BlockPos offset(net.minecraft.core.Vec3i) -> a
    156:156:net.minecraft.core.BlockPos subtract(net.minecraft.core.Vec3i) -> b
    161:166:net.minecraft.core.BlockPos multiply(int) -> a
    171:171:net.minecraft.core.BlockPos above() -> b
    176:176:net.minecraft.core.BlockPos above(int) -> b
    181:181:net.minecraft.core.BlockPos below() -> c
    186:186:net.minecraft.core.BlockPos below(int) -> c
    191:191:net.minecraft.core.BlockPos north() -> d
    196:196:net.minecraft.core.BlockPos north(int) -> d
    201:201:net.minecraft.core.BlockPos south() -> e
    206:206:net.minecraft.core.BlockPos south(int) -> e
    211:211:net.minecraft.core.BlockPos west() -> f
    216:216:net.minecraft.core.BlockPos west(int) -> f
    221:221:net.minecraft.core.BlockPos east() -> g
    226:226:net.minecraft.core.BlockPos east(int) -> g
    231:231:net.minecraft.core.BlockPos relative(net.minecraft.core.Direction) -> a
    236:239:net.minecraft.core.BlockPos relative(net.minecraft.core.Direction,int) -> a
    244:250:net.minecraft.core.BlockPos relative(net.minecraft.core.Direction$Axis,int) -> a
    254:263:net.minecraft.core.BlockPos rotate(net.minecraft.world.level.block.Rotation) -> a
    269:269:net.minecraft.core.BlockPos cross(net.minecraft.core.Vec3i) -> c
    273:273:net.minecraft.core.BlockPos immutable() -> h
    415:421:java.lang.Iterable betweenClosed(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    426:432:java.util.stream.Stream betweenClosedStream(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> b
    437:443:java.util.stream.Stream betweenClosedStream(net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    448:448:java.util.stream.Stream betweenClosedStream(int,int,int,int,int,int) -> a
    465:465:java.lang.Iterable betweenClosed(int,int,int,int,int,int) -> b
    26:26:net.minecraft.core.Vec3i cross(net.minecraft.core.Vec3i) -> d
    26:26:net.minecraft.core.Vec3i relative(net.minecraft.core.Direction$Axis,int) -> b
    26:26:net.minecraft.core.Vec3i relative(net.minecraft.core.Direction,int) -> b
    26:26:net.minecraft.core.Vec3i relative(net.minecraft.core.Direction) -> b
    26:26:net.minecraft.core.Vec3i east(int) -> h
    26:26:net.minecraft.core.Vec3i east() -> i
    26:26:net.minecraft.core.Vec3i west(int) -> i
    26:26:net.minecraft.core.Vec3i west() -> j
    26:26:net.minecraft.core.Vec3i south(int) -> j
    26:26:net.minecraft.core.Vec3i south() -> k
    26:26:net.minecraft.core.Vec3i north(int) -> k
    26:26:net.minecraft.core.Vec3i north() -> l
    26:26:net.minecraft.core.Vec3i below(int) -> l
    26:26:net.minecraft.core.Vec3i below() -> m
    26:26:net.minecraft.core.Vec3i above(int) -> m
    26:26:net.minecraft.core.Vec3i above() -> n
    26:26:net.minecraft.core.Vec3i multiply(int) -> n
    26:26:net.minecraft.core.Vec3i subtract(net.minecraft.core.Vec3i) -> e
    26:26:net.minecraft.core.Vec3i offset(net.minecraft.core.Vec3i) -> f
    26:26:net.minecraft.core.Vec3i offset(int,int,int) -> c
    26:26:net.minecraft.core.Vec3i offset(double,double,double) -> b
    465:465:java.util.Iterator lambda$betweenClosed$3(int,int,int,int,int,int) -> c
    73:73:void lambda$deserialize$2(int[],int) -> a
    72:72:void lambda$deserialize$1(int[],int) -> b
    71:71:void lambda$deserialize$0(int[],int) -> c
    28:42:void <clinit>() -> <clinit>
net.minecraft.core.BlockPos$1 -> fk$1:
    net.minecraft.core.Cursor3D cursor -> a
    net.minecraft.core.BlockPos$MutableBlockPos nextPos -> b
    int val$minX -> c
    int val$minY -> d
    int val$minZ -> e
    int val$maxX -> f
    int val$maxY -> g
    int val$maxZ -> h
    448:450:void <init>(long,int,int,int,int,int,int,int) -> <init>
    454:458:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
net.minecraft.core.BlockPos$2 -> fk$2:
    net.minecraft.core.Cursor3D cursor -> a
    net.minecraft.core.BlockPos$MutableBlockPos nextPos -> b
    int val$minX -> c
    int val$minY -> d
    int val$minZ -> e
    int val$maxX -> f
    int val$maxY -> g
    int val$maxZ -> h
    465:467:void <init>(int,int,int,int,int,int) -> <init>
    471:471:net.minecraft.core.BlockPos computeNext() -> a
    465:465:java.lang.Object computeNext() -> computeNext
net.minecraft.core.BlockPos$3 -> fk$3:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    254:254:void <clinit>() -> <clinit>
net.minecraft.core.BlockPos$MutableBlockPos -> fk$a:
    int x -> b
    int y -> c
    int z -> d
    282:283:void <init>() -> <init>
    286:287:void <init>(net.minecraft.core.BlockPos) -> <init>
    290:294:void <init>(int,int,int) -> <init>
    297:298:void <init>(double,double,double) -> <init>
    301:302:void <init>(net.minecraft.world.entity.Entity) -> <init>
    306:306:net.minecraft.core.BlockPos offset(double,double,double) -> a
    311:311:net.minecraft.core.BlockPos offset(int,int,int) -> b
    316:316:net.minecraft.core.BlockPos multiply(int) -> a
    321:321:net.minecraft.core.BlockPos relative(net.minecraft.core.Direction,int) -> a
    326:326:net.minecraft.core.BlockPos relative(net.minecraft.core.Direction$Axis,int) -> a
    331:331:net.minecraft.core.BlockPos rotate(net.minecraft.world.level.block.Rotation) -> a
    336:336:int getX() -> o
    341:341:int getY() -> p
    346:346:int getZ() -> q
    350:353:net.minecraft.core.BlockPos$MutableBlockPos set(int,int,int) -> d
    357:357:net.minecraft.core.BlockPos$MutableBlockPos set(net.minecraft.world.entity.Entity) -> a
    361:361:net.minecraft.core.BlockPos$MutableBlockPos set(double,double,double) -> c
    365:365:net.minecraft.core.BlockPos$MutableBlockPos set(net.minecraft.core.Vec3i) -> g
    369:369:net.minecraft.core.BlockPos$MutableBlockPos set(long) -> g
    373:376:net.minecraft.core.BlockPos$MutableBlockPos set(net.minecraft.core.AxisCycle,int,int,int) -> a
    381:381:net.minecraft.core.BlockPos$MutableBlockPos move(net.minecraft.core.Direction) -> c
    385:385:net.minecraft.core.BlockPos$MutableBlockPos move(net.minecraft.core.Direction,int) -> c
    389:389:net.minecraft.core.BlockPos$MutableBlockPos move(int,int,int) -> e
    393:393:net.minecraft.core.BlockPos$MutableBlockPos move(net.minecraft.core.Vec3i) -> h
    397:398:void setX(int) -> o
    401:402:void setY(int) -> p
    405:406:void setZ(int) -> q
    410:410:net.minecraft.core.BlockPos immutable() -> h
    276:276:net.minecraft.core.Vec3i cross(net.minecraft.core.Vec3i) -> d
    276:276:net.minecraft.core.Vec3i relative(net.minecraft.core.Direction$Axis,int) -> b
    276:276:net.minecraft.core.Vec3i relative(net.minecraft.core.Direction,int) -> b
    276:276:net.minecraft.core.Vec3i relative(net.minecraft.core.Direction) -> b
    276:276:net.minecraft.core.Vec3i east(int) -> h
    276:276:net.minecraft.core.Vec3i east() -> i
    276:276:net.minecraft.core.Vec3i west(int) -> i
    276:276:net.minecraft.core.Vec3i west() -> j
    276:276:net.minecraft.core.Vec3i south(int) -> j
    276:276:net.minecraft.core.Vec3i south() -> k
    276:276:net.minecraft.core.Vec3i north(int) -> k
    276:276:net.minecraft.core.Vec3i north() -> l
    276:276:net.minecraft.core.Vec3i below(int) -> l
    276:276:net.minecraft.core.Vec3i below() -> m
    276:276:net.minecraft.core.Vec3i above(int) -> m
    276:276:net.minecraft.core.Vec3i above() -> n
    276:276:net.minecraft.core.Vec3i multiply(int) -> n
    276:276:net.minecraft.core.Vec3i subtract(net.minecraft.core.Vec3i) -> e
    276:276:net.minecraft.core.Vec3i offset(net.minecraft.core.Vec3i) -> f
    276:276:net.minecraft.core.Vec3i offset(int,int,int) -> c
    276:276:net.minecraft.core.Vec3i offset(double,double,double) -> b
net.minecraft.core.BlockPos$PooledMutableBlockPos -> fk$b:
    boolean free -> f
    java.util.List POOL -> g
    483:484:void <init>(int,int,int) -> <init>
    487:487:net.minecraft.core.BlockPos$PooledMutableBlockPos acquire() -> r
    491:491:net.minecraft.core.BlockPos$PooledMutableBlockPos acquire(net.minecraft.world.entity.Entity) -> b
    495:495:net.minecraft.core.BlockPos$PooledMutableBlockPos acquire(double,double,double) -> d
    499:499:net.minecraft.core.BlockPos$PooledMutableBlockPos acquire(net.minecraft.core.Vec3i) -> i
    503:513:net.minecraft.core.BlockPos$PooledMutableBlockPos acquire(int,int,int) -> f
    518:518:net.minecraft.core.BlockPos$PooledMutableBlockPos set(int,int,int) -> g
    523:523:net.minecraft.core.BlockPos$PooledMutableBlockPos set(net.minecraft.world.entity.Entity) -> c
    528:528:net.minecraft.core.BlockPos$PooledMutableBlockPos set(double,double,double) -> e
    533:533:net.minecraft.core.BlockPos$PooledMutableBlockPos set(net.minecraft.core.Vec3i) -> j
    538:538:net.minecraft.core.BlockPos$PooledMutableBlockPos move(net.minecraft.core.Direction) -> d
    543:543:net.minecraft.core.BlockPos$PooledMutableBlockPos move(net.minecraft.core.Direction,int) -> d
    548:548:net.minecraft.core.BlockPos$PooledMutableBlockPos move(int,int,int) -> h
    553:553:net.minecraft.core.BlockPos$PooledMutableBlockPos move(net.minecraft.core.Vec3i) -> k
    558:564:void close() -> close
    476:476:net.minecraft.core.BlockPos$MutableBlockPos move(net.minecraft.core.Vec3i) -> h
    476:476:net.minecraft.core.BlockPos$MutableBlockPos move(int,int,int) -> e
    476:476:net.minecraft.core.BlockPos$MutableBlockPos move(net.minecraft.core.Direction,int) -> c
    476:476:net.minecraft.core.BlockPos$MutableBlockPos move(net.minecraft.core.Direction) -> c
    476:476:net.minecraft.core.BlockPos$MutableBlockPos set(net.minecraft.core.Vec3i) -> g
    476:476:net.minecraft.core.BlockPos$MutableBlockPos set(double,double,double) -> c
    476:476:net.minecraft.core.BlockPos$MutableBlockPos set(net.minecraft.world.entity.Entity) -> a
    476:476:net.minecraft.core.BlockPos$MutableBlockPos set(int,int,int) -> d
    480:480:void <clinit>() -> <clinit>
net.minecraft.core.BlockSource -> fl:
    double x() -> a
    double y() -> b
    double z() -> c
    net.minecraft.core.BlockPos getPos() -> d
    net.minecraft.world.level.block.state.BlockState getBlockState() -> e
    net.minecraft.world.level.material.Material getMaterial() -> f
    net.minecraft.world.level.block.entity.BlockEntity getEntity() -> g
net.minecraft.core.BlockSourceImpl -> fm:
    net.minecraft.world.level.Level level -> a
    net.minecraft.core.BlockPos pos -> b
    13:16:void <init>(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> <init>
    20:20:net.minecraft.world.level.Level getLevel() -> h
    25:25:double x() -> a
    30:30:double y() -> b
    35:35:double z() -> c
    40:40:net.minecraft.core.BlockPos getPos() -> d
    45:45:net.minecraft.world.level.block.state.BlockState getBlockState() -> e
    50:50:net.minecraft.world.level.material.Material getMaterial() -> f
    57:57:net.minecraft.world.level.block.entity.BlockEntity getEntity() -> g
net.minecraft.core.Cursor3D -> fn:
    int minX -> a
    int minY -> b
    int minZ -> c
    int maxX -> d
    int maxY -> e
    int maxZ -> f
    int x -> g
    int y -> h
    int z -> i
    boolean started -> j
    20:27:void <init>(int,int,int,int,int,int) -> <init>
    30:53:boolean advance() -> a
    59:59:int nextX() -> b
    63:63:int nextY() -> c
    67:67:int nextZ() -> d
    71:82:int getNextType() -> e
net.minecraft.core.DefaultedRegistry -> fo:
    net.minecraft.resources.ResourceLocation defaultKey -> V
    java.lang.Object defaultValue -> W
    14:16:void <init>(java.lang.String) -> <init>
    20:24:java.lang.Object registerMapping(int,net.minecraft.resources.ResourceLocation,java.lang.Object) -> a
    29:30:int getId(java.lang.Object) -> a
    36:37:net.minecraft.resources.ResourceLocation getKey(java.lang.Object) -> b
    43:44:java.lang.Object get(net.minecraft.resources.ResourceLocation) -> a
    50:51:java.lang.Object byId(int) -> a
    57:58:java.lang.Object getRandom(java.util.Random) -> a
    62:62:net.minecraft.resources.ResourceLocation getDefaultKey() -> a
net.minecraft.core.Direction -> fp:
    net.minecraft.core.Direction DOWN -> a
    net.minecraft.core.Direction UP -> b
    net.minecraft.core.Direction NORTH -> c
    net.minecraft.core.Direction SOUTH -> d
    net.minecraft.core.Direction WEST -> e
    net.minecraft.core.Direction EAST -> f
    int data3d -> g
    int oppositeIndex -> h
    int data2d -> i
    java.lang.String name -> j
    net.minecraft.core.Direction$Axis axis -> k
    net.minecraft.core.Direction$AxisDirection axisDirection -> l
    net.minecraft.core.Vec3i normal -> m
    net.minecraft.core.Direction[] VALUES -> n
    java.util.Map BY_NAME -> o
    net.minecraft.core.Direction[] BY_3D_DATA -> p
    net.minecraft.core.Direction[] BY_2D_DATA -> q
    it.unimi.dsi.fastutil.longs.Long2ObjectMap BY_NORMAL -> r
    net.minecraft.core.Direction[] $VALUES -> s
    24:24:net.minecraft.core.Direction[] values() -> values
    24:24:net.minecraft.core.Direction valueOf(java.lang.String) -> valueOf
    48:56:void <init>(java.lang.String,int,int,int,int,java.lang.String,net.minecraft.core.Direction$AxisDirection,net.minecraft.core.Direction$Axis,net.minecraft.core.Vec3i) -> <init>
    59:96:net.minecraft.core.Direction[] orderedByNearest(net.minecraft.world.entity.Entity) -> a
    102:102:net.minecraft.core.Direction[] makeDirectionArray(net.minecraft.core.Direction,net.minecraft.core.Direction,net.minecraft.core.Direction) -> a
    106:109:net.minecraft.core.Direction rotate(com.mojang.math.Matrix4f,net.minecraft.core.Direction) -> a
    113:131:com.mojang.math.Quaternion getRotation() -> a
    136:136:int get3DDataValue() -> b
    140:140:int get2DDataValue() -> c
    144:144:net.minecraft.core.Direction$AxisDirection getAxisDirection() -> d
    148:148:net.minecraft.core.Direction getOpposite() -> e
    152:172:net.minecraft.core.Direction getClockWise(net.minecraft.core.Direction$Axis) -> a
    177:197:net.minecraft.core.Direction getCounterClockWise(net.minecraft.core.Direction$Axis) -> b
    202:212:net.minecraft.core.Direction getClockWise() -> f
    217:227:net.minecraft.core.Direction getClockWiseX() -> q
    232:242:net.minecraft.core.Direction getCounterClockWiseX() -> r
    247:257:net.minecraft.core.Direction getClockWiseZ() -> s
    262:272:net.minecraft.core.Direction getCounterClockWiseZ() -> t
    277:287:net.minecraft.core.Direction getCounterClockWise() -> g
    292:292:int getStepX() -> h
    296:296:int getStepY() -> i
    300:300:int getStepZ() -> j
    304:304:com.mojang.math.Vector3f step() -> k
    308:308:java.lang.String getName() -> l
    312:312:net.minecraft.core.Direction$Axis getAxis() -> m
    317:320:net.minecraft.core.Direction byName(java.lang.String) -> a
    324:324:net.minecraft.core.Direction from3DDataValue(int) -> a
    328:328:net.minecraft.core.Direction from2DDataValue(int) -> b
    333:333:net.minecraft.core.Direction fromNormal(net.minecraft.core.BlockPos) -> a
    338:338:net.minecraft.core.Direction fromNormal(int,int,int) -> a
    342:342:net.minecraft.core.Direction fromYRot(double) -> a
    346:353:net.minecraft.core.Direction fromAxisAndDirection(net.minecraft.core.Direction$Axis,net.minecraft.core.Direction$AxisDirection) -> a
    358:358:float toYRot() -> n
    362:362:net.minecraft.core.Direction getRandomFace(java.util.Random) -> a
    366:366:net.minecraft.core.Direction getNearest(double,double,double) -> a
    370:380:net.minecraft.core.Direction getNearest(float,float,float) -> a
    385:385:java.lang.String toString() -> toString
    390:390:java.lang.String getSerializedName() -> o
    394:399:net.minecraft.core.Direction get(net.minecraft.core.Direction$AxisDirection,net.minecraft.core.Direction$Axis) -> a
    526:526:net.minecraft.core.Vec3i getNormal() -> p
    46:46:net.minecraft.core.Direction lambda$static$8(net.minecraft.core.Direction,net.minecraft.core.Direction) -> a
    46:46:net.minecraft.core.Direction lambda$static$7(net.minecraft.core.Direction) -> a
    46:46:java.lang.Long lambda$static$6(net.minecraft.core.Direction) -> b
    45:45:net.minecraft.core.Direction[] lambda$static$5(int) -> c
    45:45:int lambda$static$4(net.minecraft.core.Direction) -> c
    45:45:boolean lambda$static$3(net.minecraft.core.Direction) -> d
    44:44:net.minecraft.core.Direction[] lambda$static$2(int) -> d
    44:44:int lambda$static$1(net.minecraft.core.Direction) -> e
    43:43:net.minecraft.core.Direction lambda$static$0(net.minecraft.core.Direction) -> f
    24:46:void <clinit>() -> <clinit>
net.minecraft.core.Direction$1 -> fp$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> b
    115:152:void <clinit>() -> <clinit>
net.minecraft.core.Direction$Axis -> fp$a:
    net.minecraft.core.Direction$Axis X -> a
    net.minecraft.core.Direction$Axis Y -> b
    net.minecraft.core.Direction$Axis Z -> c
    java.util.Map BY_NAME -> d
    java.lang.String name -> e
    net.minecraft.core.Direction$Axis[] $VALUES -> f
    402:402:net.minecraft.core.Direction$Axis[] values() -> values
    402:402:net.minecraft.core.Direction$Axis valueOf(java.lang.String) -> valueOf
    442:444:void <init>(java.lang.String,int,java.lang.String) -> <init>
    448:448:net.minecraft.core.Direction$Axis byName(java.lang.String) -> a
    452:452:java.lang.String getName() -> a
    456:456:boolean isVertical() -> b
    460:460:boolean isHorizontal() -> c
    465:465:java.lang.String toString() -> toString
    469:469:net.minecraft.core.Direction$Axis getRandomAxis(java.util.Random) -> a
    474:474:boolean test(net.minecraft.core.Direction) -> a
    478:485:net.minecraft.core.Direction$Plane getPlane() -> d
    490:490:java.lang.String getSerializedName() -> o
    int choose(int,int,int) -> a
    double choose(double,double,double) -> a
    402:402:boolean test(java.lang.Object) -> test
    438:438:net.minecraft.core.Direction$Axis lambda$static$0(net.minecraft.core.Direction$Axis) -> a
    402:402:void <init>(java.lang.String,int,java.lang.String,net.minecraft.core.Direction$1) -> <init>
    402:438:void <clinit>() -> <clinit>
net.minecraft.core.Direction$Axis$1 -> fp$a$1:
    403:403:void <init>(java.lang.String,int,java.lang.String) -> <init>
    406:406:int choose(int,int,int) -> a
    411:411:double choose(double,double,double) -> a
    403:403:boolean test(java.lang.Object) -> test
net.minecraft.core.Direction$Axis$2 -> fp$a$2:
    414:414:void <init>(java.lang.String,int,java.lang.String) -> <init>
    417:417:int choose(int,int,int) -> a
    422:422:double choose(double,double,double) -> a
    414:414:boolean test(java.lang.Object) -> test
net.minecraft.core.Direction$Axis$3 -> fp$a$3:
    425:425:void <init>(java.lang.String,int,java.lang.String) -> <init>
    428:428:int choose(int,int,int) -> a
    433:433:double choose(double,double,double) -> a
    425:425:boolean test(java.lang.Object) -> test
net.minecraft.core.Direction$AxisDirection -> fp$b:
    net.minecraft.core.Direction$AxisDirection POSITIVE -> a
    net.minecraft.core.Direction$AxisDirection NEGATIVE -> b
    int step -> c
    java.lang.String name -> d
    net.minecraft.core.Direction$AxisDirection[] $VALUES -> e
    498:498:net.minecraft.core.Direction$AxisDirection[] values() -> values
    498:498:net.minecraft.core.Direction$AxisDirection valueOf(java.lang.String) -> valueOf
    506:509:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    512:512:int getStep() -> a
    516:516:java.lang.String getName() -> b
    521:521:java.lang.String toString() -> toString
    498:500:void <clinit>() -> <clinit>
net.minecraft.core.Direction$Plane -> fp$c:
    net.minecraft.core.Direction$Plane HORIZONTAL -> a
    net.minecraft.core.Direction$Plane VERTICAL -> b
    net.minecraft.core.Direction[] faces -> c
    net.minecraft.core.Direction$Axis[] axis -> d
    net.minecraft.core.Direction$Plane[] $VALUES -> e
    529:529:net.minecraft.core.Direction$Plane[] values() -> values
    529:529:net.minecraft.core.Direction$Plane valueOf(java.lang.String) -> valueOf
    537:540:void <init>(java.lang.String,int,net.minecraft.core.Direction[],net.minecraft.core.Direction$Axis[]) -> <init>
    543:543:net.minecraft.core.Direction getRandomDirection(java.util.Random) -> a
    547:547:net.minecraft.core.Direction$Axis getRandomAxis(java.util.Random) -> b
    552:552:boolean test(net.minecraft.core.Direction) -> a
    557:557:java.util.Iterator iterator() -> iterator
    529:529:boolean test(java.lang.Object) -> test
    529:531:void <clinit>() -> <clinit>
net.minecraft.core.Direction8 -> fq:
    net.minecraft.core.Direction8 NORTH -> a
    net.minecraft.core.Direction8 NORTH_EAST -> b
    net.minecraft.core.Direction8 EAST -> c
    net.minecraft.core.Direction8 SOUTH_EAST -> d
    net.minecraft.core.Direction8 SOUTH -> e
    net.minecraft.core.Direction8 SOUTH_WEST -> f
    net.minecraft.core.Direction8 WEST -> g
    net.minecraft.core.Direction8 NORTH_WEST -> h
    int NORTH_WEST_MASK -> i
    int WEST_MASK -> j
    int SOUTH_WEST_MASK -> k
    int SOUTH_MASK -> l
    int SOUTH_EAST_MASK -> m
    int EAST_MASK -> n
    int NORTH_EAST_MASK -> o
    int NORTH_MASK -> p
    java.util.Set directions -> q
    net.minecraft.core.Direction8[] $VALUES -> r
    8:8:net.minecraft.core.Direction8[] values() -> values
    8:8:net.minecraft.core.Direction8 valueOf(java.lang.String) -> valueOf
    29:31:void <init>(java.lang.String,int,net.minecraft.core.Direction[]) -> <init>
    34:56:int getSideMask(boolean,boolean,boolean,boolean) -> a
    60:60:java.util.Set getDirections() -> a
    8:25:void <clinit>() -> <clinit>
net.minecraft.core.GlobalPos -> fr:
    net.minecraft.world.level.dimension.DimensionType dimension -> a
    net.minecraft.core.BlockPos pos -> b
    15:18:void <init>(net.minecraft.world.level.dimension.DimensionType,net.minecraft.core.BlockPos) -> <init>
    21:21:net.minecraft.core.GlobalPos of(net.minecraft.world.level.dimension.DimensionType,net.minecraft.core.BlockPos) -> a
    25:31:net.minecraft.core.GlobalPos of(com.mojang.datafixers.Dynamic) -> a
    35:35:net.minecraft.world.level.dimension.DimensionType dimension() -> a
    39:39:net.minecraft.core.BlockPos pos() -> b
    44:51:boolean equals(java.lang.Object) -> equals
    56:56:int hashCode() -> hashCode
    61:63:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    69:69:java.lang.String toString() -> toString
    31:31:java.lang.IllegalArgumentException lambda$of$2() -> c
    27:29:java.util.Optional lambda$of$1(com.mojang.datafixers.Dynamic,net.minecraft.world.level.dimension.DimensionType) -> a
    29:29:net.minecraft.core.GlobalPos lambda$null$0(net.minecraft.world.level.dimension.DimensionType,net.minecraft.core.BlockPos) -> b
net.minecraft.core.IdMap -> fs:
    int getId(java.lang.Object) -> a
    java.lang.Object byId(int) -> a
net.minecraft.core.IdMapper -> ft:
    int nextId -> a
    java.util.IdentityHashMap tToId -> b
    java.util.List idToT -> c
    20:21:void <init>() -> <init>
    23:26:void <init>(int) -> <init>
    29:41:void addMapping(java.lang.Object,int) -> a
    44:45:void add(java.lang.Object) -> b
    49:50:int getId(java.lang.Object) -> a
    56:60:java.lang.Object byId(int) -> a
    65:65:java.util.Iterator iterator() -> iterator
    69:69:boolean contains(int) -> b
    73:73:int size() -> a
net.minecraft.core.LocatableSource -> fu:
net.minecraft.core.Location -> fv:
    net.minecraft.world.level.Level getLevel() -> h
net.minecraft.core.MapFiller -> fw:
    9:9:void <init>() -> <init>
    11:11:java.util.Map hashMapFrom(java.lang.Iterable,java.lang.Iterable) -> a
    15:15:java.util.Map linkedHashMapFrom(java.lang.Iterable,java.lang.Iterable) -> b
    19:28:java.util.Map from(java.lang.Iterable,java.lang.Iterable,java.util.Map) -> a
net.minecraft.core.MappedRegistry -> fx:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap map -> b
    com.google.common.collect.BiMap storage -> c
    java.lang.Object[] randomCache -> d
    int nextId -> V
    19:23:void <init>() -> <init>
    31:45:java.lang.Object registerMapping(int,net.minecraft.resources.ResourceLocation,java.lang.Object) -> a
    50:50:java.lang.Object register(net.minecraft.resources.ResourceLocation,java.lang.Object) -> a
    56:56:net.minecraft.resources.ResourceLocation getKey(java.lang.Object) -> b
    61:61:int getId(java.lang.Object) -> a
    67:67:java.lang.Object byId(int) -> a
    72:72:java.util.Iterator iterator() -> iterator
    78:78:java.lang.Object get(net.minecraft.resources.ResourceLocation) -> a
    83:83:java.util.Optional getOptional(net.minecraft.resources.ResourceLocation) -> b
    88:88:java.util.Set keySet() -> b
    93:93:boolean isEmpty() -> c
    100:107:java.lang.Object getRandom(java.util.Random) -> a
    112:112:boolean containsKey(net.minecraft.resources.ResourceLocation) -> c
    117:117:boolean containsId(int) -> b
    20:20:void <clinit>() -> <clinit>
net.minecraft.core.NonNullList -> fy:
    java.util.List list -> a
    java.lang.Object defaultValue -> b
    14:14:net.minecraft.core.NonNullList create() -> a
    19:23:net.minecraft.core.NonNullList withSize(int,java.lang.Object) -> a
    28:28:net.minecraft.core.NonNullList of(java.lang.Object,java.lang.Object[]) -> a
    35:36:void <init>() -> <init>
    38:41:void <init>(java.util.List,java.lang.Object) -> <init>
    46:46:java.lang.Object get(int) -> get
    51:53:java.lang.Object set(int,java.lang.Object) -> set
    58:61:void add(int,java.lang.Object) -> add
    65:65:java.lang.Object remove(int) -> remove
    70:70:int size() -> size
    75:82:void clear() -> clear
net.minecraft.core.Position -> fz:
    double x() -> a
    double y() -> b
    double z() -> c
net.minecraft.core.PositionImpl -> ga:
    double x -> a
    double y -> b
    double z -> c
    8:12:void <init>(double,double,double) -> <init>
    16:16:double x() -> a
    21:21:double y() -> b
    26:26:double z() -> c
net.minecraft.core.Registry -> gb:
    org.apache.logging.log4j.Logger LOGGER -> e
    java.util.Map LOADERS -> a
    net.minecraft.core.WritableRegistry REGISTRY -> f
    net.minecraft.core.Registry SOUND_EVENT -> g
    net.minecraft.core.DefaultedRegistry FLUID -> h
    net.minecraft.core.Registry MOB_EFFECT -> i
    net.minecraft.core.DefaultedRegistry BLOCK -> j
    net.minecraft.core.Registry ENCHANTMENT -> k
    net.minecraft.core.DefaultedRegistry ENTITY_TYPE -> l
    net.minecraft.core.DefaultedRegistry ITEM -> m
    net.minecraft.core.DefaultedRegistry POTION -> n
    net.minecraft.core.Registry CARVER -> o
    net.minecraft.core.Registry SURFACE_BUILDER -> p
    net.minecraft.core.Registry FEATURE -> q
    net.minecraft.core.Registry DECORATOR -> r
    net.minecraft.core.Registry BIOME -> s
    net.minecraft.core.Registry BLOCKSTATE_PROVIDER_TYPES -> t
    net.minecraft.core.Registry BLOCK_PLACER_TYPES -> u
    net.minecraft.core.Registry FOLIAGE_PLACER_TYPES -> v
    net.minecraft.core.Registry TREE_DECORATOR_TYPES -> w
    net.minecraft.core.Registry PARTICLE_TYPE -> x
    net.minecraft.core.Registry BIOME_SOURCE_TYPE -> y
    net.minecraft.core.Registry BLOCK_ENTITY_TYPE -> z
    net.minecraft.core.Registry CHUNK_GENERATOR_TYPE -> A
    net.minecraft.core.Registry DIMENSION_TYPE -> B
    net.minecraft.core.DefaultedRegistry MOTIVE -> C
    net.minecraft.core.Registry CUSTOM_STAT -> D
    net.minecraft.core.DefaultedRegistry CHUNK_STATUS -> E
    net.minecraft.core.Registry STRUCTURE_FEATURE -> F
    net.minecraft.core.Registry STRUCTURE_PIECE -> G
    net.minecraft.core.Registry RULE_TEST -> H
    net.minecraft.core.Registry STRUCTURE_PROCESSOR -> I
    net.minecraft.core.Registry STRUCTURE_POOL_ELEMENT -> J
    net.minecraft.core.Registry MENU -> K
    net.minecraft.core.Registry RECIPE_TYPE -> L
    net.minecraft.core.Registry RECIPE_SERIALIZER -> M
    net.minecraft.core.Registry STAT_TYPE -> N
    net.minecraft.core.DefaultedRegistry VILLAGER_TYPE -> O
    net.minecraft.core.DefaultedRegistry VILLAGER_PROFESSION -> P
    net.minecraft.core.DefaultedRegistry POINT_OF_INTEREST_TYPE -> Q
    net.minecraft.core.DefaultedRegistry MEMORY_MODULE_TYPE -> R
    net.minecraft.core.DefaultedRegistry SENSOR_TYPE -> S
    net.minecraft.core.Registry SCHEDULE -> T
    net.minecraft.core.Registry ACTIVITY -> U
    71:71:void <init>() -> <init>
    146:146:net.minecraft.core.Registry registerSimple(java.lang.String,java.util.function.Supplier) -> a
    150:150:net.minecraft.core.DefaultedRegistry registerDefaulted(java.lang.String,java.lang.String,java.util.function.Supplier) -> a
    154:157:net.minecraft.core.WritableRegistry internalRegister(java.lang.String,net.minecraft.core.WritableRegistry,java.util.function.Supplier) -> a
    net.minecraft.resources.ResourceLocation getKey(java.lang.Object) -> b
    int getId(java.lang.Object) -> a
    java.lang.Object get(net.minecraft.resources.ResourceLocation) -> a
    java.util.Optional getOptional(net.minecraft.resources.ResourceLocation) -> b
    java.util.Set keySet() -> b
    java.lang.Object getRandom(java.util.Random) -> a
    178:178:java.util.stream.Stream stream() -> d
    boolean containsKey(net.minecraft.resources.ResourceLocation) -> c
    boolean containsId(int) -> b
    186:186:java.lang.Object register(net.minecraft.core.Registry,java.lang.String,java.lang.Object) -> a
    191:191:java.lang.Object register(net.minecraft.core.Registry,net.minecraft.resources.ResourceLocation,java.lang.Object) -> a
    196:196:java.lang.Object registerMapping(net.minecraft.core.Registry,int,java.lang.String,java.lang.Object) -> a
    131:142:void lambda$static$42(net.minecraft.core.WritableRegistry) -> a
    125:128:void lambda$static$41(java.util.Map$Entry) -> a
    121:121:net.minecraft.world.entity.schedule.Activity lambda$static$40() -> a
    120:120:net.minecraft.world.entity.schedule.Schedule lambda$static$39() -> c
    118:118:net.minecraft.world.entity.ai.sensing.SensorType lambda$static$38() -> e
    117:117:net.minecraft.world.entity.ai.memory.MemoryModuleType lambda$static$37() -> f
    116:116:net.minecraft.world.entity.ai.village.poi.PoiType lambda$static$36() -> g
    115:115:net.minecraft.world.entity.npc.VillagerProfession lambda$static$35() -> h
    114:114:net.minecraft.world.entity.npc.VillagerType lambda$static$34() -> i
    112:112:net.minecraft.stats.StatType lambda$static$33() -> j
    110:110:net.minecraft.world.item.crafting.RecipeSerializer lambda$static$32() -> k
    109:109:net.minecraft.world.item.crafting.RecipeType lambda$static$31() -> l
    108:108:net.minecraft.world.inventory.MenuType lambda$static$30() -> m
    107:107:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType lambda$static$29() -> n
    106:106:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType lambda$static$28() -> o
    105:105:net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType lambda$static$27() -> p
    104:104:net.minecraft.world.level.levelgen.feature.StructurePieceType lambda$static$26() -> q
    103:103:net.minecraft.world.level.levelgen.feature.StructureFeature lambda$static$25() -> r
    102:102:net.minecraft.world.level.chunk.ChunkStatus lambda$static$24() -> s
    101:101:net.minecraft.resources.ResourceLocation lambda$static$23() -> t
    100:100:net.minecraft.world.entity.decoration.Motive lambda$static$22() -> u
    99:99:net.minecraft.world.level.dimension.DimensionType lambda$static$21() -> v
    98:98:net.minecraft.world.level.chunk.ChunkGeneratorType lambda$static$20() -> w
    97:97:net.minecraft.world.level.block.entity.BlockEntityType lambda$static$19() -> x
    96:96:net.minecraft.world.level.biome.BiomeSourceType lambda$static$18() -> y
    95:95:net.minecraft.core.particles.ParticleType lambda$static$17() -> z
    94:94:net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType lambda$static$16() -> A
    93:93:net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType lambda$static$15() -> B
    92:92:net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacerType lambda$static$14() -> C
    91:91:net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType lambda$static$13() -> D
    90:90:net.minecraft.world.level.biome.Biome lambda$static$12() -> E
    89:89:net.minecraft.world.level.levelgen.placement.FeatureDecorator lambda$static$11() -> F
    88:88:net.minecraft.world.level.levelgen.feature.Feature lambda$static$10() -> G
    87:87:net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder lambda$static$9() -> H
    86:86:net.minecraft.world.level.levelgen.carver.WorldCarver lambda$static$8() -> I
    85:85:net.minecraft.world.item.alchemy.Potion lambda$static$7() -> J
    84:84:net.minecraft.world.item.Item lambda$static$6() -> K
    83:83:net.minecraft.world.entity.EntityType lambda$static$5() -> L
    82:82:net.minecraft.world.item.enchantment.Enchantment lambda$static$4() -> M
    81:81:net.minecraft.world.level.block.Block lambda$static$3() -> N
    80:80:net.minecraft.world.effect.MobEffect lambda$static$2() -> O
    79:79:net.minecraft.world.level.material.Fluid lambda$static$1() -> P
    78:78:net.minecraft.sounds.SoundEvent lambda$static$0() -> Q
    72:143:void <clinit>() -> <clinit>
net.minecraft.core.Rotations -> gc:
    float x -> a
    float y -> b
    float z -> c
    12:16:void <init>(float,float,float) -> <init>
    19:20:void <init>(net.minecraft.nbt.ListTag) -> <init>
    23:27:net.minecraft.nbt.ListTag save() -> a
    32:36:boolean equals(java.lang.Object) -> equals
    40:40:float getX() -> b
    44:44:float getY() -> c
    48:48:float getZ() -> d
    52:52:float getWrappedX() -> e
    56:56:float getWrappedY() -> f
    60:60:float getWrappedZ() -> g
net.minecraft.core.SectionPos -> gd:
    41:42:void <init>(int,int,int) -> <init>
    45:45:net.minecraft.core.SectionPos of(int,int,int) -> a
    49:49:net.minecraft.core.SectionPos of(net.minecraft.core.BlockPos) -> a
    53:53:net.minecraft.core.SectionPos of(net.minecraft.world.level.ChunkPos,int) -> a
    57:60:net.minecraft.core.SectionPos of(net.minecraft.world.entity.Entity) -> a
    65:65:net.minecraft.core.SectionPos of(long) -> a
    69:69:long offset(long,net.minecraft.core.Direction) -> a
    73:73:long offset(long,int,int,int) -> a
    77:77:int blockToSectionCoord(int) -> a
    81:81:int sectionRelative(int) -> b
    85:88:short sectionRelativePos(net.minecraft.core.BlockPos) -> b
    96:96:int sectionToBlockCoord(int) -> c
    100:100:int x(long) -> b
    104:104:int y(long) -> c
    108:108:int z(long) -> d
    112:112:int x() -> a
    116:116:int y() -> b
    120:120:int z() -> c
    124:124:int minBlockX() -> d
    128:128:int minBlockY() -> e
    132:132:int minBlockZ() -> f
    136:136:int maxBlockX() -> g
    140:140:int maxBlockY() -> h
    144:144:int maxBlockZ() -> r
    148:151:long blockToSection(long) -> e
    157:157:long getZeroNode(long) -> f
    161:161:net.minecraft.core.BlockPos origin() -> s
    165:166:net.minecraft.core.BlockPos center() -> t
    170:170:net.minecraft.world.level.ChunkPos chunk() -> u
    174:178:long asLong(int,int,int) -> b
    182:182:long asLong() -> v
    187:190:net.minecraft.core.SectionPos offset(int,int,int) -> d
    194:194:java.util.stream.Stream blocksInside() -> w
    198:201:java.util.stream.Stream cube(net.minecraft.core.SectionPos,int) -> a
    205:207:java.util.stream.Stream aroundChunk(net.minecraft.world.level.ChunkPos,int) -> b
    211:211:java.util.stream.Stream betweenClosedStream(int,int,int,int,int,int) -> a
    23:23:net.minecraft.core.Vec3i offset(int,int,int) -> c
    23:23:void <init>(int,int,int,net.minecraft.core.SectionPos$1) -> <init>
net.minecraft.core.SectionPos$1 -> gd$1:
    net.minecraft.core.Cursor3D cursor -> a
    int val$minX -> b
    int val$minY -> c
    int val$minZ -> d
    int val$maxX -> e
    int val$maxY -> f
    int val$maxZ -> g
    211:212:void <init>(long,int,int,int,int,int,int,int) -> <init>
    216:220:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
net.minecraft.core.SerializableLong -> ge:
    long value -> a
    10:12:void <init>(long) -> <init>
    15:15:long value() -> a
    20:20:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    24:24:net.minecraft.core.SerializableLong of(com.mojang.datafixers.Dynamic) -> a
    28:28:net.minecraft.core.SerializableLong of(long) -> a
    33:40:boolean equals(java.lang.Object) -> equals
    45:45:int hashCode() -> hashCode
    50:50:java.lang.String toString() -> toString
net.minecraft.core.Source -> gf:
net.minecraft.core.Vec3i -> gg:
    net.minecraft.core.Vec3i ZERO -> e
    int x -> a
    int y -> b
    int z -> c
    29:33:void <init>(int,int,int) -> <init>
    36:37:void <init>(double,double,double) -> <init>
    41:60:boolean equals(java.lang.Object) -> equals
    65:65:int hashCode() -> hashCode
    70:76:int compareTo(net.minecraft.core.Vec3i) -> l
    80:80:int getX() -> o
    84:84:int getY() -> p
    88:88:int getZ() -> q
    92:95:net.minecraft.core.Vec3i offset(double,double,double) -> b
    99:102:net.minecraft.core.Vec3i offset(int,int,int) -> c
    106:106:net.minecraft.core.Vec3i offset(net.minecraft.core.Vec3i) -> f
    110:110:net.minecraft.core.Vec3i subtract(net.minecraft.core.Vec3i) -> e
    114:119:net.minecraft.core.Vec3i multiply(int) -> n
    123:123:net.minecraft.core.Vec3i above() -> n
    127:127:net.minecraft.core.Vec3i above(int) -> m
    131:131:net.minecraft.core.Vec3i below() -> m
    135:135:net.minecraft.core.Vec3i below(int) -> l
    139:139:net.minecraft.core.Vec3i north() -> l
    143:143:net.minecraft.core.Vec3i north(int) -> k
    147:147:net.minecraft.core.Vec3i south() -> k
    151:151:net.minecraft.core.Vec3i south(int) -> j
    155:155:net.minecraft.core.Vec3i west() -> j
    159:159:net.minecraft.core.Vec3i west(int) -> i
    163:163:net.minecraft.core.Vec3i east() -> i
    167:167:net.minecraft.core.Vec3i east(int) -> h
    171:171:net.minecraft.core.Vec3i relative(net.minecraft.core.Direction) -> b
    175:178:net.minecraft.core.Vec3i relative(net.minecraft.core.Direction,int) -> b
    182:188:net.minecraft.core.Vec3i relative(net.minecraft.core.Direction$Axis,int) -> b
    192:192:net.minecraft.core.Vec3i cross(net.minecraft.core.Vec3i) -> d
    196:196:boolean closerThan(net.minecraft.core.Vec3i,double) -> a
    200:200:boolean closerThan(net.minecraft.core.Position,double) -> a
    204:204:double distSqr(net.minecraft.core.Vec3i) -> m
    208:208:double distSqr(net.minecraft.core.Position,boolean) -> a
    212:216:double distSqr(double,double,double,boolean) -> a
    220:223:int distManhattan(net.minecraft.core.Vec3i) -> n
    228:232:java.lang.String toString() -> toString
    236:236:java.lang.String toShortString() -> x
    240:243:java.lang.Iterable between(net.minecraft.core.Vec3i,net.minecraft.core.Vec3i) -> a
    9:9:int compareTo(java.lang.Object) -> compareTo
    243:243:java.util.Iterator lambda$between$0(net.minecraft.core.Vec3i,net.minecraft.core.Vec3i) -> b
    11:11:void <clinit>() -> <clinit>
net.minecraft.core.Vec3i$1 -> gg$1:
    net.minecraft.core.Vec3i lastPos -> c
    net.minecraft.core.Vec3i val$minCorner -> a
    net.minecraft.core.Vec3i val$maxCorner -> b
    243:243:void <init>(net.minecraft.core.Vec3i,net.minecraft.core.Vec3i) -> <init>
    248:271:net.minecraft.core.Vec3i computeNext() -> a
    243:243:java.lang.Object computeNext() -> computeNext
net.minecraft.core.WritableRegistry -> gh:
    5:5:void <init>() -> <init>
    java.lang.Object registerMapping(int,net.minecraft.resources.ResourceLocation,java.lang.Object) -> a
    java.lang.Object register(net.minecraft.resources.ResourceLocation,java.lang.Object) -> a
    boolean isEmpty() -> c
net.minecraft.core.dispenser.AbstractProjectileDispenseBehavior -> gi:
    13:13:void <init>() -> <init>
    16:26:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
    31:32:void playSound(net.minecraft.core.BlockSource) -> a
    net.minecraft.world.entity.projectile.Projectile getProjectile(net.minecraft.world.level.Level,net.minecraft.core.Position,net.minecraft.world.item.ItemStack) -> a
    37:37:float getUncertainty() -> a
    41:41:float getPower() -> b
net.minecraft.core.dispenser.BoatDispenseItemBehavior -> gj:
    net.minecraft.core.dispenser.DefaultDispenseItemBehavior defaultDispenseItemBehavior -> b
    net.minecraft.world.entity.vehicle.Boat$Type type -> c
    14:19:void <init>(net.minecraft.world.entity.vehicle.Boat$Type) -> <init>
    23:48:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
    53:54:void playSound(net.minecraft.core.BlockSource) -> a
net.minecraft.core.dispenser.DefaultDispenseItemBehavior -> gk:
    12:12:void <init>() -> <init>
    15:20:net.minecraft.world.item.ItemStack dispense(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> dispense
    24:31:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
    35:57:void spawnItem(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,int,net.minecraft.core.Direction,net.minecraft.core.Position) -> a
    60:61:void playSound(net.minecraft.core.BlockSource) -> a
    64:65:void playAnimation(net.minecraft.core.BlockSource,net.minecraft.core.Direction) -> a
net.minecraft.core.dispenser.DispenseItemBehavior -> gl:
    net.minecraft.core.dispenser.DispenseItemBehavior NOOP -> a
    net.minecraft.world.item.ItemStack dispense(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> dispense
    79:531:void bootStrap() -> c
    69:69:net.minecraft.world.item.ItemStack lambda$static$0(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
    69:69:void <clinit>() -> <clinit>
net.minecraft.core.dispenser.DispenseItemBehavior$1 -> gl$1:
    79:79:void <init>() -> <init>
    82:85:net.minecraft.world.entity.projectile.Projectile getProjectile(net.minecraft.world.level.Level,net.minecraft.core.Position,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$10 -> gl$2:
    196:196:void <init>() -> <init>
    199:207:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$11 -> gl$3:
    211:211:void <init>() -> <init>
    214:229:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
    234:235:void playSound(net.minecraft.core.BlockSource) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$12 -> gl$4:
    238:238:void <init>() -> <init>
    241:258:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
    263:264:void playSound(net.minecraft.core.BlockSource) -> a
    255:255:void lambda$execute$0(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.SmallFireball) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$13 -> gl$5:
    net.minecraft.core.dispenser.DefaultDispenseItemBehavior defaultDispenseItemBehavior -> b
    274:275:void <init>() -> <init>
    279:288:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$14 -> gl$6:
    net.minecraft.core.dispenser.DefaultDispenseItemBehavior defaultDispenseItemBehavior -> b
    298:299:void <init>() -> <init>
    303:328:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$15 -> gl$7:
    332:332:void <init>() -> <init>
    335:356:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$16 -> gl$8:
    360:360:void <init>() -> <init>
    363:375:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$17 -> gl$9:
    379:379:void <init>() -> <init>
    382:390:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$18 -> gl$10:
    394:394:void <init>() -> <init>
    397:398:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$19 -> gl$11:
    406:406:void <init>() -> <init>
    409:424:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$2 -> gl$12:
    88:88:void <init>() -> <init>
    91:95:net.minecraft.world.entity.projectile.Projectile getProjectile(net.minecraft.world.level.Level,net.minecraft.core.Position,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$20 -> gl$13:
    428:428:void <init>() -> <init>
    431:444:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$21 -> gl$14:
    net.minecraft.core.dispenser.DefaultDispenseItemBehavior defaultDispenseItemBehavior -> c
    453:454:void <init>() -> <init>
    457:463:net.minecraft.world.item.ItemStack takeLiquid(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    468:484:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$22 -> gl$15:
    489:489:void <init>() -> <init>
    492:528:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$3 -> gl$16:
    98:98:void <init>() -> <init>
    101:104:net.minecraft.world.entity.projectile.Projectile getProjectile(net.minecraft.world.level.Level,net.minecraft.core.Position,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$4 -> gl$17:
    107:107:void <init>() -> <init>
    110:110:net.minecraft.world.entity.projectile.Projectile getProjectile(net.minecraft.world.level.Level,net.minecraft.core.Position,net.minecraft.world.item.ItemStack) -> a
    110:110:void lambda$getProjectile$0(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.ThrownEgg) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$5 -> gl$18:
    113:113:void <init>() -> <init>
    116:116:net.minecraft.world.entity.projectile.Projectile getProjectile(net.minecraft.world.level.Level,net.minecraft.core.Position,net.minecraft.world.item.ItemStack) -> a
    116:116:void lambda$getProjectile$0(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.Snowball) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$6 -> gl$19:
    119:119:void <init>() -> <init>
    122:122:net.minecraft.world.entity.projectile.Projectile getProjectile(net.minecraft.world.level.Level,net.minecraft.core.Position,net.minecraft.world.item.ItemStack) -> a
    127:127:float getUncertainty() -> a
    132:132:float getPower() -> b
    122:122:void lambda$getProjectile$0(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.ThrownExperienceBottle) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$7 -> gl$20:
    136:136:void <init>() -> <init>
    139:154:net.minecraft.world.item.ItemStack dispense(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> dispense
net.minecraft.core.dispenser.DispenseItemBehavior$7$1 -> gl$20$1:
    net.minecraft.core.dispenser.DispenseItemBehavior$7 this$0 -> b
    139:139:void <init>(net.minecraft.core.dispenser.DispenseItemBehavior$7) -> <init>
    142:142:net.minecraft.world.entity.projectile.Projectile getProjectile(net.minecraft.world.level.Level,net.minecraft.core.Position,net.minecraft.world.item.ItemStack) -> a
    147:147:float getUncertainty() -> a
    152:152:float getPower() -> b
    142:142:void lambda$getProjectile$0(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.ThrownPotion) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$8 -> gl$21:
    158:158:void <init>() -> <init>
    161:176:net.minecraft.world.item.ItemStack dispense(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> dispense
net.minecraft.core.dispenser.DispenseItemBehavior$8$1 -> gl$21$1:
    net.minecraft.core.dispenser.DispenseItemBehavior$8 this$0 -> b
    161:161:void <init>(net.minecraft.core.dispenser.DispenseItemBehavior$8) -> <init>
    164:164:net.minecraft.world.entity.projectile.Projectile getProjectile(net.minecraft.world.level.Level,net.minecraft.core.Position,net.minecraft.world.item.ItemStack) -> a
    169:169:float getUncertainty() -> a
    174:174:float getPower() -> b
    164:164:void lambda$getProjectile$0(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.ThrownPotion) -> a
net.minecraft.core.dispenser.DispenseItemBehavior$9 -> gl$22:
    180:180:void <init>() -> <init>
    183:188:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.OptionalDispenseItemBehavior -> gm:
    boolean success -> b
    6:7:void <init>() -> <init>
    11:12:void playSound(net.minecraft.core.BlockSource) -> a
net.minecraft.core.dispenser.ShulkerBoxDispenseBehavior -> gn:
    13:13:void <init>() -> <init>
    16:26:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.core.dispenser.package-info -> go:
net.minecraft.core.package-info -> gp:
net.minecraft.core.particles.BlockParticleOption -> gq:
    net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> a
    net.minecraft.core.particles.ParticleType type -> b
    net.minecraft.world.level.block.state.BlockState state -> c
    28:31:void <init>(net.minecraft.core.particles.ParticleType,net.minecraft.world.level.block.state.BlockState) -> <init>
    35:36:void writeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    40:40:java.lang.String writeToString() -> a
    45:45:net.minecraft.core.particles.ParticleType getType() -> b
    49:49:net.minecraft.world.level.block.state.BlockState getState() -> c
    12:12:void <clinit>() -> <clinit>
net.minecraft.core.particles.BlockParticleOption$1 -> gq$1:
    12:12:void <init>() -> <init>
    15:16:net.minecraft.core.particles.BlockParticleOption fromCommand(net.minecraft.core.particles.ParticleType,com.mojang.brigadier.StringReader) -> a
    21:21:net.minecraft.core.particles.BlockParticleOption fromNetwork(net.minecraft.core.particles.ParticleType,net.minecraft.network.FriendlyByteBuf) -> a
    12:12:net.minecraft.core.particles.ParticleOptions fromNetwork(net.minecraft.core.particles.ParticleType,net.minecraft.network.FriendlyByteBuf) -> b
    12:12:net.minecraft.core.particles.ParticleOptions fromCommand(net.minecraft.core.particles.ParticleType,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.DustParticleOptions -> gr:
    net.minecraft.core.particles.DustParticleOptions REDSTONE -> a
    net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> b
    float r -> c
    float g -> d
    float b -> e
    float scale -> f
    39:45:void <init>(float,float,float,float) -> <init>
    49:53:void writeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    57:57:java.lang.String writeToString() -> a
    62:62:net.minecraft.core.particles.ParticleType getType() -> b
    66:66:float getR() -> c
    70:70:float getG() -> d
    74:74:float getB() -> e
    78:78:float getScale() -> f
    12:13:void <clinit>() -> <clinit>
net.minecraft.core.particles.DustParticleOptions$1 -> gr$1:
    13:13:void <init>() -> <init>
    17:25:net.minecraft.core.particles.DustParticleOptions fromCommand(net.minecraft.core.particles.ParticleType,com.mojang.brigadier.StringReader) -> a
    30:30:net.minecraft.core.particles.DustParticleOptions fromNetwork(net.minecraft.core.particles.ParticleType,net.minecraft.network.FriendlyByteBuf) -> a
    13:13:net.minecraft.core.particles.ParticleOptions fromNetwork(net.minecraft.core.particles.ParticleType,net.minecraft.network.FriendlyByteBuf) -> b
    13:13:net.minecraft.core.particles.ParticleOptions fromCommand(net.minecraft.core.particles.ParticleType,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.ItemParticleOption -> gs:
    net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> a
    net.minecraft.core.particles.ParticleType type -> b
    net.minecraft.world.item.ItemStack itemStack -> c
    30:33:void <init>(net.minecraft.core.particles.ParticleType,net.minecraft.world.item.ItemStack) -> <init>
    37:38:void writeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    42:42:java.lang.String writeToString() -> a
    47:47:net.minecraft.core.particles.ParticleType getType() -> b
    51:51:net.minecraft.world.item.ItemStack getItem() -> c
    12:12:void <clinit>() -> <clinit>
net.minecraft.core.particles.ItemParticleOption$1 -> gs$1:
    12:12:void <init>() -> <init>
    15:18:net.minecraft.core.particles.ItemParticleOption fromCommand(net.minecraft.core.particles.ParticleType,com.mojang.brigadier.StringReader) -> a
    23:23:net.minecraft.core.particles.ItemParticleOption fromNetwork(net.minecraft.core.particles.ParticleType,net.minecraft.network.FriendlyByteBuf) -> a
    12:12:net.minecraft.core.particles.ParticleOptions fromNetwork(net.minecraft.core.particles.ParticleType,net.minecraft.network.FriendlyByteBuf) -> b
    12:12:net.minecraft.core.particles.ParticleOptions fromCommand(net.minecraft.core.particles.ParticleType,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.ParticleOptions -> gt:
    net.minecraft.core.particles.ParticleType getType() -> b
    void writeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    java.lang.String writeToString() -> a
net.minecraft.core.particles.ParticleOptions$Deserializer -> gt$a:
    net.minecraft.core.particles.ParticleOptions fromCommand(net.minecraft.core.particles.ParticleType,com.mojang.brigadier.StringReader) -> b
    net.minecraft.core.particles.ParticleOptions fromNetwork(net.minecraft.core.particles.ParticleType,net.minecraft.network.FriendlyByteBuf) -> b
net.minecraft.core.particles.ParticleType -> gu:
    boolean overrideLimiter -> a
    net.minecraft.core.particles.ParticleOptions$Deserializer deserializer -> b
    7:10:void <init>(boolean,net.minecraft.core.particles.ParticleOptions$Deserializer) -> <init>
    13:13:boolean getOverrideLimiter() -> c
    17:17:net.minecraft.core.particles.ParticleOptions$Deserializer getDeserializer() -> d
net.minecraft.core.particles.ParticleTypes -> gv:
    net.minecraft.core.particles.SimpleParticleType AMBIENT_ENTITY_EFFECT -> a
    net.minecraft.core.particles.SimpleParticleType ANGRY_VILLAGER -> b
    net.minecraft.core.particles.SimpleParticleType BARRIER -> c
    net.minecraft.core.particles.ParticleType BLOCK -> d
    net.minecraft.core.particles.SimpleParticleType BUBBLE -> e
    net.minecraft.core.particles.SimpleParticleType CLOUD -> f
    net.minecraft.core.particles.SimpleParticleType CRIT -> g
    net.minecraft.core.particles.SimpleParticleType DAMAGE_INDICATOR -> h
    net.minecraft.core.particles.SimpleParticleType DRAGON_BREATH -> i
    net.minecraft.core.particles.SimpleParticleType DRIPPING_LAVA -> j
    net.minecraft.core.particles.SimpleParticleType FALLING_LAVA -> k
    net.minecraft.core.particles.SimpleParticleType LANDING_LAVA -> l
    net.minecraft.core.particles.SimpleParticleType DRIPPING_WATER -> m
    net.minecraft.core.particles.SimpleParticleType FALLING_WATER -> n
    net.minecraft.core.particles.ParticleType DUST -> o
    net.minecraft.core.particles.SimpleParticleType EFFECT -> p
    net.minecraft.core.particles.SimpleParticleType ELDER_GUARDIAN -> q
    net.minecraft.core.particles.SimpleParticleType ENCHANTED_HIT -> r
    net.minecraft.core.particles.SimpleParticleType ENCHANT -> s
    net.minecraft.core.particles.SimpleParticleType END_ROD -> t
    net.minecraft.core.particles.SimpleParticleType ENTITY_EFFECT -> u
    net.minecraft.core.particles.SimpleParticleType EXPLOSION_EMITTER -> v
    net.minecraft.core.particles.SimpleParticleType EXPLOSION -> w
    net.minecraft.core.particles.ParticleType FALLING_DUST -> x
    net.minecraft.core.particles.SimpleParticleType FIREWORK -> y
    net.minecraft.core.particles.SimpleParticleType FISHING -> z
    net.minecraft.core.particles.SimpleParticleType FLAME -> A
    net.minecraft.core.particles.SimpleParticleType FLASH -> B
    net.minecraft.core.particles.SimpleParticleType HAPPY_VILLAGER -> C
    net.minecraft.core.particles.SimpleParticleType COMPOSTER -> D
    net.minecraft.core.particles.SimpleParticleType HEART -> E
    net.minecraft.core.particles.SimpleParticleType INSTANT_EFFECT -> F
    net.minecraft.core.particles.ParticleType ITEM -> G
    net.minecraft.core.particles.SimpleParticleType ITEM_SLIME -> H
    net.minecraft.core.particles.SimpleParticleType ITEM_SNOWBALL -> I
    net.minecraft.core.particles.SimpleParticleType LARGE_SMOKE -> J
    net.minecraft.core.particles.SimpleParticleType LAVA -> K
    net.minecraft.core.particles.SimpleParticleType MYCELIUM -> L
    net.minecraft.core.particles.SimpleParticleType NOTE -> M
    net.minecraft.core.particles.SimpleParticleType POOF -> N
    net.minecraft.core.particles.SimpleParticleType PORTAL -> O
    net.minecraft.core.particles.SimpleParticleType RAIN -> P
    net.minecraft.core.particles.SimpleParticleType SMOKE -> Q
    net.minecraft.core.particles.SimpleParticleType SNEEZE -> R
    net.minecraft.core.particles.SimpleParticleType SPIT -> S
    net.minecraft.core.particles.SimpleParticleType SQUID_INK -> T
    net.minecraft.core.particles.SimpleParticleType SWEEP_ATTACK -> U
    net.minecraft.core.particles.SimpleParticleType TOTEM_OF_UNDYING -> V
    net.minecraft.core.particles.SimpleParticleType UNDERWATER -> W
    net.minecraft.core.particles.SimpleParticleType SPLASH -> X
    net.minecraft.core.particles.SimpleParticleType WITCH -> Y
    net.minecraft.core.particles.SimpleParticleType BUBBLE_POP -> Z
    net.minecraft.core.particles.SimpleParticleType CURRENT_DOWN -> aa
    net.minecraft.core.particles.SimpleParticleType BUBBLE_COLUMN_UP -> ab
    net.minecraft.core.particles.SimpleParticleType NAUTILUS -> ac
    net.minecraft.core.particles.SimpleParticleType DOLPHIN -> ad
    net.minecraft.core.particles.SimpleParticleType CAMPFIRE_COSY_SMOKE -> ae
    net.minecraft.core.particles.SimpleParticleType CAMPFIRE_SIGNAL_SMOKE -> af
    net.minecraft.core.particles.SimpleParticleType DRIPPING_HONEY -> ag
    net.minecraft.core.particles.SimpleParticleType FALLING_HONEY -> ah
    net.minecraft.core.particles.SimpleParticleType LANDING_HONEY -> ai
    net.minecraft.core.particles.SimpleParticleType FALLING_NECTAR -> aj
    5:5:void <init>() -> <init>
    74:74:net.minecraft.core.particles.SimpleParticleType register(java.lang.String,boolean) -> a
    78:78:net.minecraft.core.particles.ParticleType register(java.lang.String,net.minecraft.core.particles.ParticleOptions$Deserializer) -> a
    6:71:void <clinit>() -> <clinit>
net.minecraft.core.particles.SimpleParticleType -> gw:
    net.minecraft.core.particles.ParticleOptions$Deserializer DESERIALIZER -> a
    22:23:void <init>(boolean) -> <init>
    27:27:net.minecraft.core.particles.ParticleType getType() -> b
    32:32:void writeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    36:36:java.lang.String writeToString() -> a
    9:9:void <clinit>() -> <clinit>
net.minecraft.core.particles.SimpleParticleType$1 -> gw$1:
    9:9:void <init>() -> <init>
    12:12:net.minecraft.core.particles.SimpleParticleType fromCommand(net.minecraft.core.particles.ParticleType,com.mojang.brigadier.StringReader) -> a
    17:17:net.minecraft.core.particles.SimpleParticleType fromNetwork(net.minecraft.core.particles.ParticleType,net.minecraft.network.FriendlyByteBuf) -> a
    9:9:net.minecraft.core.particles.ParticleOptions fromNetwork(net.minecraft.core.particles.ParticleType,net.minecraft.network.FriendlyByteBuf) -> b
    9:9:net.minecraft.core.particles.ParticleOptions fromCommand(net.minecraft.core.particles.ParticleType,com.mojang.brigadier.StringReader) -> b
net.minecraft.core.particles.package-info -> gx:
net.minecraft.data.DataGenerator -> gy:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.Collection inputFolders -> b
    java.nio.file.Path outputFolder -> c
    java.util.List providers -> d
    20:29:void <init>(java.nio.file.Path,java.util.Collection) -> <init>
    32:32:java.util.Collection getInputFolders() -> a
    36:36:java.nio.file.Path getOutputFolder() -> b
    40:56:void run() -> c
    59:60:void addProvider(net.minecraft.data.DataProvider) -> a
    16:24:void <clinit>() -> <clinit>
net.minecraft.data.DataProvider -> gz:
    com.google.common.hash.HashFunction SHA1 -> a
    void run(net.minecraft.data.HashCache) -> a
    java.lang.String getName() -> a
    22:32:void save(com.google.gson.Gson,net.minecraft.data.HashCache,com.google.gson.JsonElement,java.nio.file.Path) -> a
    15:15:void <clinit>() -> <clinit>
net.minecraft.data.HashCache -> ha:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.nio.file.Path path -> b
    java.nio.file.Path cachePath -> c
    int hits -> d
    java.util.Map oldCache -> e
    java.util.Map newCache -> f
    java.util.Set keep -> g
    29:48:void <init>(java.nio.file.Path,java.lang.String) -> <init>
    51:74:void purgeStaleAndWrite() -> a
    78:78:java.lang.String getHash(java.nio.file.Path) -> a
    82:86:void putNew(java.nio.file.Path,java.lang.String) -> a
    89:89:boolean had(java.nio.file.Path) -> b
    93:94:void keep(java.nio.file.Path) -> c
    97:106:void removeStale() -> b
    109:109:java.util.stream.Stream walkOutputFiles() -> c
    109:109:boolean lambda$walkOutputFiles$4(java.nio.file.Path) -> d
    98:105:void lambda$removeStale$3(java.nio.file.Path) -> e
    62:62:java.lang.String lambda$purgeStaleAndWrite$2(java.util.Map$Entry) -> a
    44:46:void lambda$new$1(java.nio.file.Path,java.lang.String) -> b
    40:40:void lambda$new$0(java.nio.file.Path) -> f
    22:22:void <clinit>() -> <clinit>
net.minecraft.data.Main -> net.minecraft.data.Main:
    27:27:void <init>() -> <init>
    30:56:void main(java.lang.String[]) -> main
    59:82:net.minecraft.data.DataGenerator createStandardGenerator(java.nio.file.Path,java.util.Collection,boolean,boolean,boolean,boolean,boolean) -> a
    54:54:java.nio.file.Path lambda$main$0(java.lang.String) -> a
net.minecraft.data.advancements.AdvancementProvider -> hb:
    org.apache.logging.log4j.Logger LOGGER -> b
    com.google.gson.Gson GSON -> c
    net.minecraft.data.DataGenerator generator -> d
    java.util.List tabs -> e
    26:36:void <init>(net.minecraft.data.DataGenerator) -> <init>
    40:58:void run(net.minecraft.data.HashCache) -> a
    61:61:java.nio.file.Path createPath(java.nio.file.Path,net.minecraft.advancements.Advancement) -> a
    66:66:java.lang.String getName() -> a
    43:53:void lambda$run$0(java.util.Set,java.nio.file.Path,net.minecraft.data.HashCache,net.minecraft.advancements.Advancement) -> a
    22:23:void <clinit>() -> <clinit>
net.minecraft.data.advancements.AdventureAdvancements -> hc:
    net.minecraft.world.level.biome.Biome[] EXPLORABLE_BIOMES -> a
    net.minecraft.world.entity.EntityType[] MOBS_TO_KILL -> b
    43:43:void <init>() -> <init>
    120:238:void accept(java.util.function.Consumer) -> a
    241:244:net.minecraft.advancements.Advancement$Builder addMobsToKill(net.minecraft.advancements.Advancement$Builder) -> a
    248:251:net.minecraft.advancements.Advancement$Builder addBiomes(net.minecraft.advancements.Advancement$Builder) -> b
    43:43:void accept(java.lang.Object) -> accept
    44:90:void <clinit>() -> <clinit>
net.minecraft.data.advancements.HusbandryAdvancements -> hd:
    net.minecraft.world.entity.EntityType[] BREEDABLE_ANIMALS -> a
    net.minecraft.world.item.Item[] FISH -> b
    net.minecraft.world.item.Item[] FISH_BUCKETS -> c
    net.minecraft.world.item.Item[] EDIBLE_ITEMS -> d
    42:42:void <init>() -> <init>
    119:196:void accept(java.util.function.Consumer) -> a
    199:202:net.minecraft.advancements.Advancement$Builder addFood(net.minecraft.advancements.Advancement$Builder) -> a
    206:209:net.minecraft.advancements.Advancement$Builder addBreedable(net.minecraft.advancements.Advancement$Builder) -> b
    213:216:net.minecraft.advancements.Advancement$Builder addFishBuckets(net.minecraft.advancements.Advancement$Builder) -> c
    220:223:net.minecraft.advancements.Advancement$Builder addFish(net.minecraft.advancements.Advancement$Builder) -> d
    227:229:net.minecraft.advancements.Advancement$Builder addCatVariants(net.minecraft.advancements.Advancement$Builder) -> e
    42:42:void accept(java.lang.Object) -> accept
    227:227:void lambda$addCatVariants$0(net.minecraft.advancements.Advancement$Builder,java.lang.Integer,net.minecraft.resources.ResourceLocation) -> a
    43:75:void <clinit>() -> <clinit>
net.minecraft.data.advancements.NetherAdvancements -> he:
    35:35:void <init>() -> <init>
    38:119:void accept(java.util.function.Consumer) -> a
    35:35:void accept(java.lang.Object) -> accept
net.minecraft.data.advancements.StoryAdvancements -> hf:
    26:26:void <init>() -> <init>
    29:131:void accept(java.util.function.Consumer) -> a
    26:26:void accept(java.lang.Object) -> accept
net.minecraft.data.advancements.TheEndAdvancements -> hg:
    29:29:void <init>() -> <init>
    32:85:void accept(java.util.function.Consumer) -> a
    29:29:void accept(java.lang.Object) -> accept
net.minecraft.data.advancements.package-info -> hh:
net.minecraft.data.info.BlockListReport -> hi:
    com.google.gson.Gson GSON -> b
    net.minecraft.data.DataGenerator generator -> c
    25:27:void <init>(net.minecraft.data.DataGenerator) -> <init>
    31:74:void run(net.minecraft.data.HashCache) -> a
    78:78:java.lang.String getName() -> a
    22:22:void <clinit>() -> <clinit>
net.minecraft.data.info.CommandsReport -> hj:
    com.google.gson.Gson GSON -> b
    net.minecraft.data.DataGenerator generator -> c
    32:34:void <init>(net.minecraft.data.DataGenerator) -> <init>
    38:49:void run(net.minecraft.data.HashCache) -> a
    53:53:java.lang.String getName() -> a
    29:29:void <clinit>() -> <clinit>
net.minecraft.data.info.RegistryDumpReport -> hk:
    com.google.gson.Gson GSON -> b
    net.minecraft.data.DataGenerator generator -> c
    22:24:void <init>(net.minecraft.data.DataGenerator) -> <init>
    28:34:void run(net.minecraft.data.HashCache) -> a
    37:58:com.google.gson.JsonElement dumpRegistry(net.minecraft.core.WritableRegistry) -> a
    63:63:java.lang.String getName() -> a
    30:30:void lambda$run$0(com.google.gson.JsonObject,net.minecraft.resources.ResourceLocation) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.data.info.package-info -> hl:
net.minecraft.data.loot.BlockLoot -> hm:
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder HAS_SILK_TOUCH -> a
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder HAS_NO_SILK_TOUCH -> b
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder HAS_SHEARS -> c
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder HAS_SHEARS_OR_SILK_TOUCH -> d
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder HAS_NO_SHEARS_OR_SILK_TOUCH -> e
    java.util.Set EXPLOSION_RESISTANT -> f
    float[] NORMAL_LEAVES_SAPLING_CHANCES -> g
    float[] JUNGLE_LEAVES_SAPLING_CHANGES -> h
    java.util.Map map -> i
    92:137:void <init>() -> <init>
    140:144:java.lang.Object applyExplosionDecay(net.minecraft.world.level.ItemLike,net.minecraft.world.level.storage.loot.functions.FunctionUserBuilder) -> a
    148:152:java.lang.Object applyExplosionCondition(net.minecraft.world.level.ItemLike,net.minecraft.world.level.storage.loot.predicates.ConditionUserBuilder) -> a
    156:159:net.minecraft.world.level.storage.loot.LootTable$Builder createSingleItemTable(net.minecraft.world.level.ItemLike) -> a
    164:169:net.minecraft.world.level.storage.loot.LootTable$Builder createSelfDropDispatchTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    175:175:net.minecraft.world.level.storage.loot.LootTable$Builder createSilkTouchDispatchTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    179:179:net.minecraft.world.level.storage.loot.LootTable$Builder createShearsDispatchTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> b
    183:183:net.minecraft.world.level.storage.loot.LootTable$Builder createSilkTouchOrShearsDispatchTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> c
    187:187:net.minecraft.world.level.storage.loot.LootTable$Builder createSingleItemTableWithSilkTouch(net.minecraft.world.level.block.Block,net.minecraft.world.level.ItemLike) -> b
    191:194:net.minecraft.world.level.storage.loot.LootTable$Builder createSingleItemTable(net.minecraft.world.level.ItemLike,net.minecraft.world.level.storage.loot.RandomIntGenerator) -> a
    199:199:net.minecraft.world.level.storage.loot.LootTable$Builder createSingleItemTableWithSilkTouch(net.minecraft.world.level.block.Block,net.minecraft.world.level.ItemLike,net.minecraft.world.level.storage.loot.RandomIntGenerator) -> a
    203:207:net.minecraft.world.level.storage.loot.LootTable$Builder createSilkTouchOnlyTable(net.minecraft.world.level.ItemLike) -> b
    212:219:net.minecraft.world.level.storage.loot.LootTable$Builder createPotFlowerItemTable(net.minecraft.world.level.ItemLike) -> c
    224:229:net.minecraft.world.level.storage.loot.LootTable$Builder createSlabItemTable(net.minecraft.world.level.block.Block) -> d
    236:240:net.minecraft.world.level.storage.loot.LootTable$Builder createSinglePropConditionTable(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> a
    246:250:net.minecraft.world.level.storage.loot.LootTable$Builder createNameableBlockEntityTable(net.minecraft.world.level.block.Block) -> e
    255:265:net.minecraft.world.level.storage.loot.LootTable$Builder createShulkerBoxDrop(net.minecraft.world.level.block.Block) -> f
    271:277:net.minecraft.world.level.storage.loot.LootTable$Builder createBannerDrop(net.minecraft.world.level.block.Block) -> g
    284:292:net.minecraft.world.level.storage.loot.LootTable$Builder createBeeNestDrop(net.minecraft.world.level.block.Block) -> h
    298:307:net.minecraft.world.level.storage.loot.LootTable$Builder createBeeHiveDrop(net.minecraft.world.level.block.Block) -> i
    313:315:net.minecraft.world.level.storage.loot.LootTable$Builder createOreDrop(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item) -> a
    321:323:net.minecraft.world.level.storage.loot.LootTable$Builder createMushroomBlockDrop(net.minecraft.world.level.block.Block,net.minecraft.world.level.ItemLike) -> c
    329:331:net.minecraft.world.level.storage.loot.LootTable$Builder createGrassDrops(net.minecraft.world.level.block.Block) -> j
    337:348:net.minecraft.world.level.storage.loot.LootTable$Builder createStemDrops(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item) -> b
    354:358:net.minecraft.world.level.storage.loot.LootTable$Builder createAttachedStemDrops(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item) -> c
    364:368:net.minecraft.world.level.storage.loot.LootTable$Builder createShearsOnlyDrop(net.minecraft.world.level.ItemLike) -> d
    373:381:net.minecraft.world.level.storage.loot.LootTable$Builder createLeavesDrops(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,float[]) -> a
    387:393:net.minecraft.world.level.storage.loot.LootTable$Builder createOakLeavesDrops(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,float[]) -> b
    399:408:net.minecraft.world.level.storage.loot.LootTable$Builder createCropDrops(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item,net.minecraft.world.item.Item,net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    414:414:net.minecraft.world.level.storage.loot.LootTable$Builder noDrop() -> a
    420:1300:void accept(java.util.function.BiConsumer) -> a
    1303:1304:void dropPottedContents(net.minecraft.world.level.block.Block) -> a
    1307:1308:void otherWhenSilkTouch(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> a
    1311:1312:void dropOther(net.minecraft.world.level.block.Block,net.minecraft.world.level.ItemLike) -> a
    1315:1316:void dropWhenSilkTouch(net.minecraft.world.level.block.Block) -> b
    1319:1320:void dropSelf(net.minecraft.world.level.block.Block) -> c
    1323:1324:void add(net.minecraft.world.level.block.Block,java.util.function.Function) -> a
    1327:1328:void add(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.LootTable$Builder) -> a
    92:92:void accept(java.lang.Object) -> accept
    1303:1303:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$dropPottedContents$74(net.minecraft.world.level.block.Block) -> k
    1200:1201:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$73(net.minecraft.world.level.block.Block) -> l
    1193:1196:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$72(net.minecraft.world.level.block.Block) -> m
    1164:1187:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$71(net.minecraft.world.level.block.Block) -> n
    1151:1159:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$70(net.minecraft.world.level.block.Block) -> o
    1143:1147:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$69(net.minecraft.world.level.block.Block) -> p
    1136:1139:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$68(net.minecraft.world.level.block.Block) -> q
    1128:1132:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$67(net.minecraft.world.level.block.Block) -> r
    1120:1124:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$66(net.minecraft.world.level.block.Block) -> s
    1110:1113:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$65(net.minecraft.world.level.block.Block) -> t
    1107:1107:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$64(net.minecraft.world.level.block.Block) -> u
    1106:1106:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$63(net.minecraft.world.level.block.Block) -> v
    1105:1105:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$62(net.minecraft.world.level.block.Block) -> w
    1104:1104:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$61(net.minecraft.world.level.block.Block) -> x
    1091:1094:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$60(net.minecraft.world.level.block.Block) -> y
    1084:1085:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$59(net.minecraft.world.level.block.Block) -> z
    1080:1081:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$58(net.minecraft.world.level.block.Block) -> A
    1072:1075:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$57(net.minecraft.world.level.block.Block) -> B
    1070:1070:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$56(net.minecraft.world.level.block.Block) -> C
    1069:1069:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$55(net.minecraft.world.level.block.Block) -> D
    1068:1068:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$54(net.minecraft.world.level.block.Block) -> E
    1067:1067:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$53(net.minecraft.world.level.block.Block) -> F
    1064:1064:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$52(net.minecraft.world.level.block.Block) -> G
    1063:1063:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$51(net.minecraft.world.level.block.Block) -> H
    1045:1058:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$50(net.minecraft.world.level.block.Block) -> I
    1009:1009:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$49(net.minecraft.world.level.block.Block) -> J
    1008:1008:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$48(net.minecraft.world.level.block.Block) -> K
    1006:1006:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$47(net.minecraft.world.level.block.Block) -> L
    1005:1005:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$46(net.minecraft.world.level.block.Block) -> M
    1004:1004:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$45(net.minecraft.world.level.block.Block) -> N
    1003:1003:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$44(net.minecraft.world.level.block.Block) -> O
    988:993:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$43(net.minecraft.world.level.block.Block) -> P
    918:923:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$42(net.minecraft.world.level.block.Block) -> Q
    908:914:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$41(net.minecraft.world.level.block.Block) -> R
    898:903:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$40(net.minecraft.world.level.block.Block) -> S
    887:887:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$39(net.minecraft.world.level.block.Block) -> T
    886:886:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$38(net.minecraft.world.level.block.Block) -> U
    885:885:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$37(net.minecraft.world.level.block.Block) -> V
    884:884:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$36(net.minecraft.world.level.block.Block) -> W
    881:881:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$35(net.minecraft.world.level.block.Block) -> X
    880:880:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$34(net.minecraft.world.level.block.Block) -> Y
    879:879:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$33(net.minecraft.world.level.block.Block) -> Z
    878:878:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$32(net.minecraft.world.level.block.Block) -> aa
    877:877:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$31(net.minecraft.world.level.block.Block) -> ab
    876:876:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$30(net.minecraft.world.level.block.Block) -> ac
    875:875:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$29(net.minecraft.world.level.block.Block) -> ad
    874:874:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$28(net.minecraft.world.level.block.Block) -> ae
    873:873:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$27(net.minecraft.world.level.block.Block) -> af
    872:872:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$26(net.minecraft.world.level.block.Block) -> ag
    871:871:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$25(net.minecraft.world.level.block.Block) -> ah
    870:870:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$24(net.minecraft.world.level.block.Block) -> ai
    869:869:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$23(net.minecraft.world.level.block.Block) -> aj
    868:868:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$22(net.minecraft.world.level.block.Block) -> ak
    867:867:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$21(net.minecraft.world.level.block.Block) -> al
    866:866:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$20(net.minecraft.world.level.block.Block) -> am
    863:863:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$19(net.minecraft.world.level.block.Block) -> an
    862:862:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$18(net.minecraft.world.level.block.Block) -> ao
    861:861:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$17(net.minecraft.world.level.block.Block) -> ap
    860:860:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$16(net.minecraft.world.level.block.Block) -> aq
    859:859:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$15(net.minecraft.world.level.block.Block) -> ar
    858:858:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$14(net.minecraft.world.level.block.Block) -> as
    857:857:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$13(net.minecraft.world.level.block.Block) -> at
    788:788:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$12(net.minecraft.world.level.block.Block) -> au
    787:787:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$11(net.minecraft.world.level.block.Block) -> av
    786:786:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$10(net.minecraft.world.level.block.Block) -> aw
    785:785:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$9(net.minecraft.world.level.block.Block) -> ax
    782:782:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$8(net.minecraft.world.level.block.Block) -> ay
    781:781:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$7(net.minecraft.world.level.block.Block) -> az
    780:780:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$6(net.minecraft.world.level.block.Block) -> aA
    779:779:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$5(net.minecraft.world.level.block.Block) -> aB
    778:778:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$4(net.minecraft.world.level.block.Block) -> aC
    777:777:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$3(net.minecraft.world.level.block.Block) -> aD
    776:776:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$2(net.minecraft.world.level.block.Block) -> aE
    775:775:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$1(net.minecraft.world.level.block.Block) -> aF
    774:774:net.minecraft.world.level.storage.loot.LootTable$Builder lambda$accept$0(net.minecraft.world.level.block.Block) -> aG
    93:135:void <clinit>() -> <clinit>
net.minecraft.data.loot.ChestLoot -> hn:
    26:26:void <init>() -> <init>
    29:750:void accept(java.util.function.BiConsumer) -> a
    26:26:void accept(java.lang.Object) -> accept
net.minecraft.data.loot.EntityLoot -> ho:
    net.minecraft.advancements.critereon.EntityPredicate$Builder ENTITY_ON_FIRE -> a
    java.util.Set SPECIAL_LOOT_TABLE_TYPES -> b
    java.util.Map map -> c
    48:66:void <init>() -> <init>
    55:62:net.minecraft.world.level.storage.loot.LootTable$Builder createSheepTable(net.minecraft.world.level.ItemLike) -> a
    70:728:void accept(java.util.function.BiConsumer) -> a
    731:732:void add(net.minecraft.world.entity.EntityType,net.minecraft.world.level.storage.loot.LootTable$Builder) -> a
    735:736:void add(net.minecraft.resources.ResourceLocation,net.minecraft.world.level.storage.loot.LootTable$Builder) -> a
    48:48:void accept(java.lang.Object) -> accept
    558:558:void lambda$accept$0(net.minecraft.nbt.CompoundTag) -> a
    49:50:void <clinit>() -> <clinit>
net.minecraft.data.loot.FishingLoot -> hp:
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder IN_JUNGLE -> a
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder IN_JUNGLE_HILLS -> b
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder IN_JUNGLE_EDGE -> c
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder IN_BAMBOO_JUNGLE -> d
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder IN_MODIFIED_JUNGLE -> e
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder IN_MODIFIED_JUNGLE_EDGE -> f
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder IN_BAMBOO_JUNGLE_HILLS -> g
    29:29:void <init>() -> <init>
    40:101:void accept(java.util.function.BiConsumer) -> a
    29:29:void accept(java.lang.Object) -> accept
    67:67:void lambda$accept$0(net.minecraft.nbt.CompoundTag) -> a
    30:36:void <clinit>() -> <clinit>
net.minecraft.data.loot.GiftLoot -> hq:
    21:21:void <init>() -> <init>
    24:174:void accept(java.util.function.BiConsumer) -> a
    21:21:void accept(java.lang.Object) -> accept
    109:109:void lambda$accept$12(net.minecraft.nbt.CompoundTag) -> a
    108:108:void lambda$accept$11(net.minecraft.nbt.CompoundTag) -> b
    107:107:void lambda$accept$10(net.minecraft.nbt.CompoundTag) -> c
    106:106:void lambda$accept$9(net.minecraft.nbt.CompoundTag) -> d
    105:105:void lambda$accept$8(net.minecraft.nbt.CompoundTag) -> e
    104:104:void lambda$accept$7(net.minecraft.nbt.CompoundTag) -> f
    103:103:void lambda$accept$6(net.minecraft.nbt.CompoundTag) -> g
    102:102:void lambda$accept$5(net.minecraft.nbt.CompoundTag) -> h
    101:101:void lambda$accept$4(net.minecraft.nbt.CompoundTag) -> i
    100:100:void lambda$accept$3(net.minecraft.nbt.CompoundTag) -> j
    99:99:void lambda$accept$2(net.minecraft.nbt.CompoundTag) -> k
    98:98:void lambda$accept$1(net.minecraft.nbt.CompoundTag) -> l
    97:97:void lambda$accept$0(net.minecraft.nbt.CompoundTag) -> m
net.minecraft.data.loot.LootTableProvider -> hr:
    org.apache.logging.log4j.Logger LOGGER -> b
    com.google.gson.Gson GSON -> c
    net.minecraft.data.DataGenerator generator -> d
    java.util.List subProviders -> e
    37:47:void <init>(net.minecraft.data.DataGenerator) -> <init>
    51:87:void run(net.minecraft.data.HashCache) -> a
    90:90:java.nio.file.Path createPath(java.nio.file.Path,net.minecraft.resources.ResourceLocation) -> a
    95:95:java.lang.String getName() -> a
    80:86:void lambda$run$5(java.nio.file.Path,net.minecraft.data.HashCache,net.minecraft.resources.ResourceLocation,net.minecraft.world.level.storage.loot.LootTable) -> a
    75:75:void lambda$run$4(java.lang.String,java.lang.String) -> a
    71:71:void lambda$run$3(net.minecraft.world.level.storage.loot.ValidationContext,net.minecraft.resources.ResourceLocation,net.minecraft.world.level.storage.loot.LootTable) -> a
    63:63:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$run$2(net.minecraft.resources.ResourceLocation) -> a
    56:56:void lambda$run$1(java.util.Map,com.mojang.datafixers.util.Pair) -> a
    57:60:void lambda$null$0(java.util.Map,com.mojang.datafixers.util.Pair,net.minecraft.resources.ResourceLocation,net.minecraft.world.level.storage.loot.LootTable$Builder) -> a
    33:34:void <clinit>() -> <clinit>
net.minecraft.data.loot.package-info -> hs:
net.minecraft.data.package-info -> ht:
net.minecraft.data.recipes.FinishedRecipe -> hu:
    void serializeRecipeData(com.google.gson.JsonObject) -> a
    14:17:com.google.gson.JsonObject serializeRecipe() -> a
    net.minecraft.resources.ResourceLocation getId() -> b
    net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    com.google.gson.JsonObject serializeAdvancement() -> d
    net.minecraft.resources.ResourceLocation getAdvancementId() -> e
net.minecraft.data.recipes.RecipeProvider -> hv:
    org.apache.logging.log4j.Logger LOGGER -> b
    com.google.gson.Gson GSON -> c
    net.minecraft.data.DataGenerator generator -> d
    55:57:void <init>(net.minecraft.data.DataGenerator) -> <init>
    61:75:void run(net.minecraft.data.HashCache) -> a
    79:92:void saveRecipe(net.minecraft.data.HashCache,com.google.gson.JsonObject,java.nio.file.Path) -> a
    96:109:void saveAdvancement(net.minecraft.data.HashCache,com.google.gson.JsonObject,java.nio.file.Path) -> b
    112:5515:void buildShapelessRecipes(java.util.function.Consumer) -> a
    5518:5553:void cookRecipes(java.util.function.Consumer,java.lang.String,net.minecraft.world.item.crafting.SimpleCookingSerializer,int) -> a
    5557:5557:net.minecraft.advancements.critereon.EnterBlockTrigger$TriggerInstance insideOf(net.minecraft.world.level.block.Block) -> a
    5561:5561:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance has(net.minecraft.advancements.critereon.MinMaxBounds$Ints,net.minecraft.world.level.ItemLike) -> a
    5565:5565:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance has(net.minecraft.world.level.ItemLike) -> a
    5569:5569:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance has(net.minecraft.tags.Tag) -> a
    5573:5573:net.minecraft.advancements.critereon.InventoryChangeTrigger$TriggerInstance inventoryTrigger(net.minecraft.advancements.critereon.ItemPredicate[]) -> a
    5578:5578:java.lang.String getName() -> a
    64:72:void lambda$run$0(java.util.Set,net.minecraft.data.HashCache,java.nio.file.Path,net.minecraft.data.recipes.FinishedRecipe) -> a
    50:51:void <clinit>() -> <clinit>
net.minecraft.data.recipes.ShapedRecipeBuilder -> hw:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.item.Item result -> b
    int count -> c
    java.util.List rows -> d
    java.util.Map key -> e
    net.minecraft.advancements.Advancement$Builder advancement -> f
    java.lang.String group -> g
    34:42:void <init>(net.minecraft.world.level.ItemLike,int) -> <init>
    45:45:net.minecraft.data.recipes.ShapedRecipeBuilder shaped(net.minecraft.world.level.ItemLike) -> a
    49:49:net.minecraft.data.recipes.ShapedRecipeBuilder shaped(net.minecraft.world.level.ItemLike,int) -> a
    53:53:net.minecraft.data.recipes.ShapedRecipeBuilder define(java.lang.Character,net.minecraft.tags.Tag) -> a
    57:57:net.minecraft.data.recipes.ShapedRecipeBuilder define(java.lang.Character,net.minecraft.world.level.ItemLike) -> a
    61:68:net.minecraft.data.recipes.ShapedRecipeBuilder define(java.lang.Character,net.minecraft.world.item.crafting.Ingredient) -> a
    72:76:net.minecraft.data.recipes.ShapedRecipeBuilder pattern(java.lang.String) -> a
    80:81:net.minecraft.data.recipes.ShapedRecipeBuilder unlocks(java.lang.String,net.minecraft.advancements.CriterionTriggerInstance) -> a
    85:86:net.minecraft.data.recipes.ShapedRecipeBuilder group(java.lang.String) -> b
    90:91:void save(java.util.function.Consumer) -> a
    94:99:void save(java.util.function.Consumer,java.lang.String) -> a
    102:109:void save(java.util.function.Consumer,net.minecraft.resources.ResourceLocation) -> a
    112:140:void ensureValid(net.minecraft.resources.ResourceLocation) -> a
    30:30:void <clinit>() -> <clinit>
net.minecraft.data.recipes.ShapedRecipeBuilder$Result -> hw$a:
    net.minecraft.resources.ResourceLocation id -> b
    net.minecraft.world.item.Item result -> c
    int count -> d
    java.lang.String group -> e
    java.util.List pattern -> f
    java.util.Map key -> g
    net.minecraft.advancements.Advancement$Builder advancement -> h
    net.minecraft.resources.ResourceLocation advancementId -> i
    net.minecraft.data.recipes.ShapedRecipeBuilder this$0 -> a
    152:161:void <init>(net.minecraft.data.recipes.ShapedRecipeBuilder,net.minecraft.resources.ResourceLocation,net.minecraft.world.item.Item,int,java.lang.String,java.util.List,java.util.Map,net.minecraft.advancements.Advancement$Builder,net.minecraft.resources.ResourceLocation) -> <init>
    165:187:void serializeRecipeData(com.google.gson.JsonObject) -> a
    191:191:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    196:196:net.minecraft.resources.ResourceLocation getId() -> b
    202:202:com.google.gson.JsonObject serializeAdvancement() -> d
    208:208:net.minecraft.resources.ResourceLocation getAdvancementId() -> e
net.minecraft.data.recipes.ShapelessRecipeBuilder -> hx:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.item.Item result -> b
    int count -> c
    java.util.List ingredients -> d
    net.minecraft.advancements.Advancement$Builder advancement -> e
    java.lang.String group -> f
    30:37:void <init>(net.minecraft.world.level.ItemLike,int) -> <init>
    40:40:net.minecraft.data.recipes.ShapelessRecipeBuilder shapeless(net.minecraft.world.level.ItemLike) -> a
    44:44:net.minecraft.data.recipes.ShapelessRecipeBuilder shapeless(net.minecraft.world.level.ItemLike,int) -> a
    48:48:net.minecraft.data.recipes.ShapelessRecipeBuilder requires(net.minecraft.tags.Tag) -> a
    52:52:net.minecraft.data.recipes.ShapelessRecipeBuilder requires(net.minecraft.world.level.ItemLike) -> b
    56:59:net.minecraft.data.recipes.ShapelessRecipeBuilder requires(net.minecraft.world.level.ItemLike,int) -> b
    63:63:net.minecraft.data.recipes.ShapelessRecipeBuilder requires(net.minecraft.world.item.crafting.Ingredient) -> a
    67:70:net.minecraft.data.recipes.ShapelessRecipeBuilder requires(net.minecraft.world.item.crafting.Ingredient,int) -> a
    74:75:net.minecraft.data.recipes.ShapelessRecipeBuilder unlocks(java.lang.String,net.minecraft.advancements.CriterionTriggerInstance) -> a
    79:80:net.minecraft.data.recipes.ShapelessRecipeBuilder group(java.lang.String) -> a
    84:85:void save(java.util.function.Consumer) -> a
    88:93:void save(java.util.function.Consumer,java.lang.String) -> a
    96:103:void save(java.util.function.Consumer,net.minecraft.resources.ResourceLocation) -> a
    106:109:void ensureValid(net.minecraft.resources.ResourceLocation) -> a
    26:26:void <clinit>() -> <clinit>
net.minecraft.data.recipes.ShapelessRecipeBuilder$Result -> hx$a:
    net.minecraft.resources.ResourceLocation id -> a
    net.minecraft.world.item.Item result -> b
    int count -> c
    java.lang.String group -> d
    java.util.List ingredients -> e
    net.minecraft.advancements.Advancement$Builder advancement -> f
    net.minecraft.resources.ResourceLocation advancementId -> g
    120:128:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.world.item.Item,int,java.lang.String,java.util.List,net.minecraft.advancements.Advancement$Builder,net.minecraft.resources.ResourceLocation) -> <init>
    132:148:void serializeRecipeData(com.google.gson.JsonObject) -> a
    152:152:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    157:157:net.minecraft.resources.ResourceLocation getId() -> b
    163:163:com.google.gson.JsonObject serializeAdvancement() -> d
    169:169:net.minecraft.resources.ResourceLocation getAdvancementId() -> e
net.minecraft.data.recipes.SimpleCookingRecipeBuilder -> hy:
    net.minecraft.world.item.Item result -> a
    net.minecraft.world.item.crafting.Ingredient ingredient -> b
    float experience -> c
    int cookingTime -> d
    net.minecraft.advancements.Advancement$Builder advancement -> e
    java.lang.String group -> f
    net.minecraft.world.item.crafting.SimpleCookingSerializer serializer -> g
    26:36:void <init>(net.minecraft.world.level.ItemLike,net.minecraft.world.item.crafting.Ingredient,float,int,net.minecraft.world.item.crafting.SimpleCookingSerializer) -> <init>
    39:39:net.minecraft.data.recipes.SimpleCookingRecipeBuilder cooking(net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.level.ItemLike,float,int,net.minecraft.world.item.crafting.SimpleCookingSerializer) -> a
    43:43:net.minecraft.data.recipes.SimpleCookingRecipeBuilder campfireCooking(net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.level.ItemLike,float,int) -> a
    47:47:net.minecraft.data.recipes.SimpleCookingRecipeBuilder blasting(net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.level.ItemLike,float,int) -> b
    51:51:net.minecraft.data.recipes.SimpleCookingRecipeBuilder smelting(net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.level.ItemLike,float,int) -> c
    55:55:net.minecraft.data.recipes.SimpleCookingRecipeBuilder smoking(net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.level.ItemLike,float,int) -> d
    59:60:net.minecraft.data.recipes.SimpleCookingRecipeBuilder unlocks(java.lang.String,net.minecraft.advancements.CriterionTriggerInstance) -> a
    64:65:net.minecraft.data.recipes.SimpleCookingRecipeBuilder group(java.lang.String) -> a
    69:70:void save(java.util.function.Consumer) -> a
    73:80:void save(java.util.function.Consumer,java.lang.String) -> a
    83:91:void save(java.util.function.Consumer,net.minecraft.resources.ResourceLocation) -> a
    94:97:void ensureValid(net.minecraft.resources.ResourceLocation) -> a
net.minecraft.data.recipes.SimpleCookingRecipeBuilder$Result -> hy$a:
    net.minecraft.resources.ResourceLocation id -> a
    java.lang.String group -> b
    net.minecraft.world.item.crafting.Ingredient ingredient -> c
    net.minecraft.world.item.Item result -> d
    float experience -> e
    int cookingTime -> f
    net.minecraft.advancements.Advancement$Builder advancement -> g
    net.minecraft.resources.ResourceLocation advancementId -> h
    net.minecraft.world.item.crafting.RecipeSerializer serializer -> i
    110:120:void <init>(net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.Item,float,int,net.minecraft.advancements.Advancement$Builder,net.minecraft.resources.ResourceLocation,net.minecraft.world.item.crafting.RecipeSerializer) -> <init>
    124:132:void serializeRecipeData(com.google.gson.JsonObject) -> a
    136:136:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    141:141:net.minecraft.resources.ResourceLocation getId() -> b
    147:147:com.google.gson.JsonObject serializeAdvancement() -> d
    153:153:net.minecraft.resources.ResourceLocation getAdvancementId() -> e
net.minecraft.data.recipes.SingleItemRecipeBuilder -> hz:
    net.minecraft.world.item.Item result -> a
    net.minecraft.world.item.crafting.Ingredient ingredient -> b
    int count -> c
    net.minecraft.advancements.Advancement$Builder advancement -> d
    java.lang.String group -> e
    net.minecraft.world.item.crafting.RecipeSerializer type -> f
    23:32:void <init>(net.minecraft.world.item.crafting.RecipeSerializer,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.level.ItemLike,int) -> <init>
    35:35:net.minecraft.data.recipes.SingleItemRecipeBuilder stonecutting(net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.level.ItemLike) -> a
    39:39:net.minecraft.data.recipes.SingleItemRecipeBuilder stonecutting(net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.level.ItemLike,int) -> a
    43:44:net.minecraft.data.recipes.SingleItemRecipeBuilder unlocks(java.lang.String,net.minecraft.advancements.CriterionTriggerInstance) -> a
    48:49:net.minecraft.data.recipes.SingleItemRecipeBuilder group(java.lang.String) -> a
    53:58:void save(java.util.function.Consumer,java.lang.String) -> a
    61:69:void save(java.util.function.Consumer,net.minecraft.resources.ResourceLocation) -> a
    72:75:void ensureValid(net.minecraft.resources.ResourceLocation) -> a
net.minecraft.data.recipes.SingleItemRecipeBuilder$Result -> hz$a:
    net.minecraft.resources.ResourceLocation id -> a
    java.lang.String group -> b
    net.minecraft.world.item.crafting.Ingredient ingredient -> c
    net.minecraft.world.item.Item result -> d
    int count -> e
    net.minecraft.advancements.Advancement$Builder advancement -> f
    net.minecraft.resources.ResourceLocation advancementId -> g
    net.minecraft.world.item.crafting.RecipeSerializer type -> h
    87:96:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.world.item.crafting.RecipeSerializer,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.Item,int,net.minecraft.advancements.Advancement$Builder,net.minecraft.resources.ResourceLocation) -> <init>
    100:107:void serializeRecipeData(com.google.gson.JsonObject) -> a
    111:111:net.minecraft.resources.ResourceLocation getId() -> b
    116:116:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    122:122:com.google.gson.JsonObject serializeAdvancement() -> d
    128:128:net.minecraft.resources.ResourceLocation getAdvancementId() -> e
net.minecraft.data.recipes.SpecialRecipeBuilder -> ia:
    net.minecraft.world.item.crafting.SimpleRecipeSerializer serializer -> a
    14:16:void <init>(net.minecraft.world.item.crafting.SimpleRecipeSerializer) -> <init>
    19:19:net.minecraft.data.recipes.SpecialRecipeBuilder special(net.minecraft.world.item.crafting.SimpleRecipeSerializer) -> a
    23:49:void save(java.util.function.Consumer,java.lang.String) -> a
    11:11:net.minecraft.world.item.crafting.SimpleRecipeSerializer access$000(net.minecraft.data.recipes.SpecialRecipeBuilder) -> a
net.minecraft.data.recipes.SpecialRecipeBuilder$1 -> ia$1:
    java.lang.String val$id -> a
    net.minecraft.data.recipes.SpecialRecipeBuilder this$0 -> b
    23:23:void <init>(net.minecraft.data.recipes.SpecialRecipeBuilder,java.lang.String) -> <init>
    26:26:void serializeRecipeData(com.google.gson.JsonObject) -> a
    30:30:net.minecraft.world.item.crafting.RecipeSerializer getType() -> c
    35:35:net.minecraft.resources.ResourceLocation getId() -> b
    41:41:com.google.gson.JsonObject serializeAdvancement() -> d
    46:46:net.minecraft.resources.ResourceLocation getAdvancementId() -> e
net.minecraft.data.recipes.package-info -> ib:
net.minecraft.data.structures.NbtToSnbt -> ic:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.data.DataGenerator generator -> c
    23:25:void <init>(net.minecraft.data.DataGenerator) -> <init>
    29:34:void run(net.minecraft.data.HashCache) -> a
    38:38:java.lang.String getName() -> a
    42:43:java.lang.String getName(java.nio.file.Path,java.nio.file.Path) -> a
    53:65:java.nio.file.Path convertStructure(java.nio.file.Path,java.lang.String,java.nio.file.Path) -> a
    32:32:void lambda$run$1(java.nio.file.Path,java.nio.file.Path,java.nio.file.Path) -> a
    32:32:boolean lambda$run$0(java.nio.file.Path) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.data.structures.SnbtToNbt -> id:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.data.DataGenerator generator -> c
    java.util.List filters -> d
    32:36:void <init>(net.minecraft.data.DataGenerator) -> <init>
    39:40:net.minecraft.data.structures.SnbtToNbt addFilter(net.minecraft.data.structures.SnbtToNbt$Filter) -> a
    44:48:net.minecraft.nbt.CompoundTag applyFilters(java.lang.String,net.minecraft.nbt.CompoundTag) -> a
    65:76:void run(net.minecraft.data.HashCache) -> a
    80:80:java.lang.String getName() -> a
    84:85:java.lang.String getName(java.nio.file.Path,java.nio.file.Path) -> a
    90:102:net.minecraft.data.structures.SnbtToNbt$TaskResult readStructure(java.nio.file.Path,java.lang.String) -> a
    106:118:void storeStructureIfChanged(net.minecraft.data.HashCache,net.minecraft.data.structures.SnbtToNbt$TaskResult,java.nio.file.Path) -> a
    75:75:void lambda$run$3(net.minecraft.data.HashCache,java.nio.file.Path,net.minecraft.data.structures.SnbtToNbt$TaskResult) -> a
    71:72:void lambda$run$2(java.util.List,java.nio.file.Path,java.nio.file.Path) -> a
    71:71:net.minecraft.data.structures.SnbtToNbt$TaskResult lambda$null$1(java.nio.file.Path,java.nio.file.Path) -> b
    70:70:boolean lambda$run$0(java.nio.file.Path) -> a
    28:28:void <clinit>() -> <clinit>
net.minecraft.data.structures.SnbtToNbt$Filter -> id$a:
    net.minecraft.nbt.CompoundTag apply(java.lang.String,net.minecraft.nbt.CompoundTag) -> a
net.minecraft.data.structures.SnbtToNbt$TaskResult -> id$b:
    java.lang.String name -> a
    byte[] payload -> b
    java.lang.String hash -> c
    56:60:void <init>(java.lang.String,byte[],java.lang.String) -> <init>
    51:51:java.lang.String access$000(net.minecraft.data.structures.SnbtToNbt$TaskResult) -> a
    51:51:java.lang.String access$100(net.minecraft.data.structures.SnbtToNbt$TaskResult) -> b
    51:51:byte[] access$200(net.minecraft.data.structures.SnbtToNbt$TaskResult) -> c
net.minecraft.data.structures.StructureUpdater -> ie:
    11:11:void <init>() -> <init>
    14:17:net.minecraft.nbt.CompoundTag apply(java.lang.String,net.minecraft.nbt.CompoundTag) -> a
    21:24:net.minecraft.nbt.CompoundTag patchVersion(net.minecraft.nbt.CompoundTag) -> a
    28:30:net.minecraft.nbt.CompoundTag updateStructure(net.minecraft.nbt.CompoundTag) -> b
net.minecraft.data.structures.package-info -> ig:
net.minecraft.data.tags.BlockTagsProvider -> ih:
    15:16:void <init>(net.minecraft.data.DataGenerator) -> <init>
    20:76:void addTags() -> b
    80:80:java.nio.file.Path getPath(net.minecraft.resources.ResourceLocation) -> a
    85:85:java.lang.String getName() -> a
    90:91:void useTags(net.minecraft.tags.TagCollection) -> a
net.minecraft.data.tags.EntityTypeTagsProvider -> ii:
    14:15:void <init>(net.minecraft.data.DataGenerator) -> <init>
    19:23:void addTags() -> b
    27:27:java.nio.file.Path getPath(net.minecraft.resources.ResourceLocation) -> a
    32:32:java.lang.String getName() -> a
    37:38:void useTags(net.minecraft.tags.TagCollection) -> a
net.minecraft.data.tags.FluidTagsProvider -> ij:
    15:16:void <init>(net.minecraft.data.DataGenerator) -> <init>
    20:22:void addTags() -> b
    26:26:java.nio.file.Path getPath(net.minecraft.resources.ResourceLocation) -> a
    31:31:java.lang.String getName() -> a
    36:37:void useTags(net.minecraft.tags.TagCollection) -> a
net.minecraft.data.tags.ItemTagsProvider -> ik:
    org.apache.logging.log4j.Logger LOGGER -> e
    24:25:void <init>(net.minecraft.data.DataGenerator) -> <init>
    29:72:void addTags() -> b
    75:80:void copy(net.minecraft.tags.Tag,net.minecraft.tags.Tag) -> a
    83:97:net.minecraft.tags.Tag$Entry copy(net.minecraft.tags.Tag$Entry) -> a
    103:103:java.nio.file.Path getPath(net.minecraft.resources.ResourceLocation) -> a
    108:108:java.lang.String getName() -> a
    113:114:void useTags(net.minecraft.tags.TagCollection) -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.data.tags.TagsProvider -> il:
    org.apache.logging.log4j.Logger LOGGER -> e
    com.google.gson.Gson GSON -> f
    net.minecraft.data.DataGenerator generator -> b
    net.minecraft.core.Registry registry -> c
    java.util.Map builders -> d
    33:38:void <init>(net.minecraft.data.DataGenerator,net.minecraft.core.Registry) -> <init>
    void addTags() -> b
    44:72:void run(net.minecraft.data.HashCache) -> a
    void useTags(net.minecraft.tags.TagCollection) -> a
    java.nio.file.Path getPath(net.minecraft.resources.ResourceLocation) -> a
    79:79:net.minecraft.tags.Tag$Builder tag(net.minecraft.tags.Tag) -> a
    79:79:net.minecraft.tags.Tag$Builder lambda$tag$3(net.minecraft.tags.Tag) -> b
    52:68:void lambda$run$2(net.minecraft.data.HashCache,net.minecraft.resources.ResourceLocation,net.minecraft.tags.Tag) -> a
    48:48:net.minecraft.resources.ResourceLocation lambda$run$1(java.util.Map$Entry) -> a
    47:47:java.util.Optional lambda$run$0(net.minecraft.resources.ResourceLocation) -> b
    27:28:void <clinit>() -> <clinit>
net.minecraft.data.tags.package-info -> im:
net.minecraft.gametest.framework.BeforeBatch -> in:
    java.lang.String batch() -> a
net.minecraft.gametest.framework.GameTest -> io:
    int timeoutTicks() -> a
    java.lang.String batch() -> b
    boolean required() -> c
    java.lang.String template() -> d
    long setupTicks() -> e
net.minecraft.gametest.framework.GameTestAssertException -> ip:
    5:6:void <init>(java.lang.String) -> <init>
net.minecraft.gametest.framework.GameTestAssertPosException -> iq:
    net.minecraft.core.BlockPos absolutePos -> a
    net.minecraft.core.BlockPos relativePos -> b
    long tick -> c
    13:17:void <init>(java.lang.String,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,long) -> <init>
    21:22:java.lang.String getMessage() -> getMessage
    27:27:java.lang.String getMessageToShowAtBlock() -> a
    32:32:net.minecraft.core.BlockPos getRelativePos() -> b
    37:37:net.minecraft.core.BlockPos getAbsolutePos() -> c
net.minecraft.gametest.framework.GameTestBatch -> ir:
    java.lang.String name -> a
    java.util.Collection testFunctions -> b
    java.util.function.Consumer beforeBatchFunction -> c
    18:26:void <init>(java.lang.String,java.util.Collection,java.util.function.Consumer) -> <init>
    29:29:java.lang.String getName() -> a
    33:33:java.util.Collection getTestFunctions() -> b
    37:40:void runBeforeBatchFunction(net.minecraft.server.level.ServerLevel) -> a
net.minecraft.gametest.framework.GameTestBatchRunner -> is:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.core.BlockPos startPos -> b
    net.minecraft.server.level.ServerLevel level -> c
    net.minecraft.gametest.framework.GameTestTicker testTicker -> d
    java.util.List allTestInfos -> e
    java.util.List batches -> f
    net.minecraft.gametest.framework.MultipleTestTracker currentBatchTracker -> g
    int currentBatchIndex -> h
    net.minecraft.core.BlockPos$MutableBlockPos nextTestPos -> i
    int maxDepthOnThisRow -> j
    21:45:void <init>(java.util.Collection,net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel,net.minecraft.gametest.framework.GameTestTicker) -> <init>
    51:51:java.util.List getTestInfos() -> a
    55:56:void start() -> b
    59:95:void runBatch(int) -> a
    98:101:void testCompleted(net.minecraft.gametest.framework.GameTestInfo) -> a
    104:123:void createStructuresForBatch(java.util.Collection) -> a
    77:94:void lambda$runBatch$1(net.minecraft.gametest.framework.GameTestInfo) -> b
    36:44:void lambda$new$0(net.minecraft.server.level.ServerLevel,net.minecraft.gametest.framework.GameTestBatch) -> a
    15:15:void access$000(net.minecraft.gametest.framework.GameTestBatchRunner,net.minecraft.gametest.framework.GameTestInfo) -> a
    16:16:void <clinit>() -> <clinit>
net.minecraft.gametest.framework.GameTestBatchRunner$1 -> is$1:
    net.minecraft.gametest.framework.GameTestBatchRunner this$0 -> a
    78:78:void <init>(net.minecraft.gametest.framework.GameTestBatchRunner) -> <init>
    81:81:void testStructureLoaded(net.minecraft.gametest.framework.GameTestInfo) -> a
    85:86:void testPassed(net.minecraft.gametest.framework.GameTestInfo) -> b
    90:91:void testFailed(net.minecraft.gametest.framework.GameTestInfo) -> c
net.minecraft.gametest.framework.GameTestEvent -> it:
    java.lang.Long expectedDelay -> a
    java.lang.Runnable assertion -> b
    10:13:void <init>(java.lang.Long,java.lang.Runnable) -> <init>
    16:16:net.minecraft.gametest.framework.GameTestEvent create(java.lang.Runnable) -> a
    20:20:net.minecraft.gametest.framework.GameTestEvent create(long,java.lang.Runnable) -> a
net.minecraft.gametest.framework.GameTestGenerator -> iu:
net.minecraft.gametest.framework.GameTestHelper -> iv:
    net.minecraft.gametest.framework.GameTestInfo testInfo -> a
    boolean finalCheckAdded -> b
    36:38:void <init>(net.minecraft.gametest.framework.GameTestInfo) -> <init>
    43:43:net.minecraft.server.level.ServerLevel getLevel() -> a
    47:47:net.minecraft.core.BlockPos getTestPos() -> b
    51:51:net.minecraft.core.BlockPos getStructureSize() -> c
    57:60:void killAllEntities() -> d
    63:67:net.minecraft.world.entity.Entity spawn(net.minecraft.world.entity.EntityType,net.minecraft.core.BlockPos) -> a
    71:71:net.minecraft.world.entity.Entity spawn(net.minecraft.world.entity.EntityType,int,int,int) -> a
    75:76:void pressButton(int,int,int) -> a
    79:86:void pressButton(net.minecraft.core.BlockPos) -> a
    89:90:void pullLever(int,int,int) -> b
    93:100:void pullLever(net.minecraft.core.BlockPos) -> b
    103:105:void pulseRedstone(net.minecraft.core.BlockPos,long) -> a
    108:109:void setBlock(int,int,int,net.minecraft.world.level.block.Block) -> a
    112:113:void setBlock(int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    116:117:void setBlock(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block) -> a
    120:121:void setBlock(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    124:125:void setNight() -> e
    128:129:void setDayTime(int) -> a
    134:135:void assertBlockPresent(net.minecraft.world.level.block.Block,int,int,int) -> a
    138:139:void assertBlockPresent(net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos) -> a
    142:143:void assertBlockNotPresent(net.minecraft.world.level.block.Block,int,int,int) -> b
    146:147:void assertBlockNotPresent(net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos) -> b
    150:151:void succeedWhenBlockPresent(net.minecraft.world.level.block.Block,int,int,int) -> c
    154:157:void succeedWhenBlockPresent(net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos) -> c
    160:161:void assertBlock(net.minecraft.core.BlockPos,java.util.function.Predicate,java.lang.String) -> a
    164:165:void assertBlock(net.minecraft.core.BlockPos,java.util.function.Predicate,java.util.function.Supplier) -> a
    168:169:void assertBlockProperty(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> a
    172:173:void assertBlockProperty(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.properties.Property,java.util.function.Predicate,java.lang.String) -> a
    176:180:void assertBlockState(net.minecraft.core.BlockPos,java.util.function.Predicate,java.util.function.Supplier) -> b
    185:189:void assertEntityPresent(net.minecraft.world.entity.EntityType) -> a
    192:193:void assertEntityPresent(net.minecraft.world.entity.EntityType,int,int,int) -> b
    196:201:void assertEntityPresent(net.minecraft.world.entity.EntityType,net.minecraft.core.BlockPos) -> b
    204:209:void assertEntityPresent(net.minecraft.world.entity.EntityType,net.minecraft.core.BlockPos,double) -> a
    212:220:void assertItemEntityPresent(net.minecraft.world.item.Item,net.minecraft.core.BlockPos,double) -> a
    224:228:void assertEntityNotPresent(net.minecraft.world.entity.EntityType) -> b
    231:232:void assertEntityNotPresent(net.minecraft.world.entity.EntityType,int,int,int) -> c
    235:240:void assertEntityNotPresent(net.minecraft.world.entity.EntityType,net.minecraft.core.BlockPos) -> c
    243:250:void assertEntityTouching(net.minecraft.world.entity.EntityType,double,double,double) -> a
    253:260:void assertEntityNotTouching(net.minecraft.world.entity.EntityType,double,double,double) -> b
    263:275:void assertEntityData(net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType,java.util.function.Function,java.lang.Object) -> a
    278:283:void assertContainerEmpty(net.minecraft.core.BlockPos) -> c
    286:291:void assertContainerContains(net.minecraft.core.BlockPos,net.minecraft.world.item.Item) -> a
    294:295:void assertAtTickTimeContainerContains(long,net.minecraft.core.BlockPos,net.minecraft.world.item.Item) -> a
    298:299:void assertAtTickTimeContainerEmpty(long,net.minecraft.core.BlockPos) -> a
    302:303:void succeedWhenEntityData(net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType,java.util.function.Function,java.lang.Object) -> b
    306:307:void succeedWhenEntityPresent(net.minecraft.world.entity.EntityType,int,int,int) -> d
    310:313:void succeedWhenEntityPresent(net.minecraft.world.entity.EntityType,net.minecraft.core.BlockPos) -> d
    316:317:void succeedWhenEntityNotPresent(net.minecraft.world.entity.EntityType,int,int,int) -> e
    320:323:void succeedWhenEntityNotPresent(net.minecraft.world.entity.EntityType,net.minecraft.core.BlockPos) -> e
    328:329:void succeed() -> f
    332:336:void ensureSingleFinalCheck() -> h
    339:343:void succeedIf(java.lang.Runnable) -> a
    346:350:void succeedWhen(java.lang.Runnable) -> b
    353:357:void succeedOnTickWhen(int,java.lang.Runnable) -> a
    360:361:void runAtTickTime(long,java.lang.Runnable) -> a
    364:365:void runAfterDelay(long,java.lang.Runnable) -> b
    368:371:void failIf(java.lang.Runnable) -> c
    374:374:net.minecraft.gametest.framework.GameTestSequence startSequence() -> g
    380:380:net.minecraft.core.BlockPos absolutePos(net.minecraft.core.BlockPos) -> d
    384:385:net.minecraft.world.phys.Vec3 absoluteVec(net.minecraft.world.phys.Vec3) -> a
    389:389:net.minecraft.world.phys.AABB getBounds() -> i
    393:393:net.minecraft.world.level.block.Block getBlockType(net.minecraft.core.BlockPos) -> e
    370:370:java.lang.Exception lambda$failIf$18() -> j
    321:322:void lambda$succeedWhenEntityNotPresent$17(net.minecraft.world.entity.EntityType,net.minecraft.core.BlockPos) -> f
    311:312:void lambda$succeedWhenEntityPresent$16(net.minecraft.world.entity.EntityType,net.minecraft.core.BlockPos) -> g
    302:302:void lambda$succeedWhenEntityData$15(net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType,java.util.function.Function,java.lang.Object) -> c
    298:298:void lambda$assertAtTickTimeContainerEmpty$14(net.minecraft.core.BlockPos) -> f
    294:294:void lambda$assertAtTickTimeContainerContains$13(net.minecraft.core.BlockPos,net.minecraft.world.item.Item) -> b
    255:255:boolean lambda$assertEntityNotTouching$12(net.minecraft.world.phys.Vec3,net.minecraft.world.entity.Entity) -> a
    245:245:boolean lambda$assertEntityTouching$11(net.minecraft.world.phys.Vec3,net.minecraft.world.entity.Entity) -> b
    172:172:java.lang.String lambda$assertBlockProperty$10(java.lang.String) -> a
    172:172:boolean lambda$assertBlockProperty$9(java.util.function.Predicate,net.minecraft.world.level.block.state.properties.Property,net.minecraft.world.level.block.state.BlockState) -> a
    168:168:java.lang.String lambda$assertBlockProperty$8(net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> a
    168:168:boolean lambda$assertBlockProperty$7(net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable,net.minecraft.world.level.block.state.BlockState) -> a
    164:164:boolean lambda$assertBlock$6(java.util.function.Predicate,net.minecraft.world.level.block.state.BlockState) -> a
    160:160:java.lang.String lambda$assertBlock$5(java.lang.String) -> b
    155:156:void lambda$succeedWhenBlockPresent$4(net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos) -> d
    146:146:boolean lambda$assertBlockNotPresent$3(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> a
    138:138:boolean lambda$assertBlockPresent$2(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> b
    104:104:void lambda$pulseRedstone$1(net.minecraft.core.BlockPos) -> g
    58:58:boolean lambda$killAllEntities$0(net.minecraft.world.entity.Entity) -> a
net.minecraft.gametest.framework.GameTestInfo -> iw:
    net.minecraft.gametest.framework.TestFunction testFunction -> a
    net.minecraft.core.BlockPos testPos -> b
    net.minecraft.server.level.ServerLevel level -> c
    java.util.Collection listeners -> d
    int timeoutTicks -> e
    java.util.Collection sequences -> f
    it.unimi.dsi.fastutil.objects.Object2LongMap runAtTickTimeMap -> g
    long startTick -> h
    long tickCount -> i
    boolean started -> j
    com.google.common.base.Stopwatch timer -> k
    boolean done -> l
    java.lang.Throwable error -> m
    26:46:void <init>(net.minecraft.gametest.framework.TestFunction,net.minecraft.server.level.ServerLevel) -> <init>
    49:51:void <init>(net.minecraft.gametest.framework.TestFunction,net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel) -> <init>
    54:55:void assignPosition(net.minecraft.core.BlockPos) -> a
    58:60:void startExecution() -> a
    66:102:void tick() -> b
    105:114:void startTest() -> t
    117:118:void setRunAtTickTime(long,java.lang.Runnable) -> a
    121:121:java.lang.String getTestName() -> c
    125:125:net.minecraft.core.BlockPos getTestPos() -> d
    130:135:net.minecraft.core.BlockPos getStructureSize() -> e
    140:144:net.minecraft.world.phys.AABB getStructureBounds() -> f
    149:149:net.minecraft.world.level.block.entity.StructureBlockEntity getStructureBlockEntity() -> u
    153:153:net.minecraft.server.level.ServerLevel getLevel() -> g
    157:157:boolean hasSucceeded() -> h
    161:161:boolean hasFailed() -> i
    165:165:boolean hasStarted() -> j
    169:169:boolean isDone() -> k
    173:173:long getRunTime() -> l
    177:181:void finish() -> v
    185:189:void succeed() -> m
    192:195:void fail(java.lang.Throwable) -> a
    202:202:java.lang.Throwable getError() -> n
    207:207:java.lang.String toString() -> toString
    211:212:void addListener(net.minecraft.gametest.framework.GameTestListener) -> a
    215:220:void spawnStructure(int) -> a
    223:223:long getTick() -> o
    227:229:net.minecraft.gametest.framework.GameTestSequence createSequence() -> p
    233:233:boolean isRequired() -> q
    237:237:boolean isOptional() -> r
    241:241:java.lang.String getStructureName() -> s
    219:219:void lambda$spawnStructure$4(net.minecraft.gametest.framework.GameTestListener) -> b
    194:194:void lambda$fail$3(net.minecraft.gametest.framework.GameTestListener) -> c
    187:187:void lambda$succeed$2(net.minecraft.gametest.framework.GameTestListener) -> d
    100:100:void lambda$tick$1(net.minecraft.gametest.framework.GameTestSequence) -> a
    93:93:void lambda$tick$0(net.minecraft.gametest.framework.GameTestSequence) -> b
net.minecraft.gametest.framework.GameTestListener -> ix:
    void testStructureLoaded(net.minecraft.gametest.framework.GameTestInfo) -> a
    void testPassed(net.minecraft.gametest.framework.GameTestInfo) -> b
    void testFailed(net.minecraft.gametest.framework.GameTestInfo) -> c
net.minecraft.gametest.framework.GameTestRegistry -> iy:
    java.util.Collection testFunctions -> a
    java.util.Set testClassNames -> b
    java.util.Map beforeBatchFunctions -> c
    22:22:void <init>() -> <init>
    28:29:void register(java.lang.Class) -> a
    32:54:void register(java.lang.reflect.Method) -> a
    57:59:java.util.Collection getTestFunctionsForClassName(java.lang.String) -> a
    63:63:java.util.Collection getAllTestFunctions() -> a
    67:67:java.util.Collection getAllTestClassNames() -> b
    71:71:boolean isTestClass(java.lang.String) -> b
    76:76:java.util.function.Consumer getBeforeBatchFunction(java.lang.String) -> c
    80:82:java.util.Optional findTestFunction(java.lang.String) -> d
    87:91:net.minecraft.gametest.framework.TestFunction getTestFunction(java.lang.String) -> e
    96:99:java.util.Collection useTestGeneratorMethod(java.lang.reflect.Method) -> b
    104:111:net.minecraft.gametest.framework.TestFunction turnMethodIntoTestFunction(java.lang.reflect.Method) -> c
    115:115:java.util.function.Consumer turnMethodIntoConsumer(java.lang.reflect.Method) -> d
    135:135:boolean isTestFunctionPartOfClass(net.minecraft.gametest.framework.TestFunction,java.lang.String) -> a
    117:128:void lambda$turnMethodIntoConsumer$2(java.lang.reflect.Method,java.lang.Object) -> a
    81:81:boolean lambda$findTestFunction$1(java.lang.String,net.minecraft.gametest.framework.TestFunction) -> a
    58:58:boolean lambda$getTestFunctionsForClassName$0(java.lang.String,net.minecraft.gametest.framework.TestFunction) -> b
    23:25:void <clinit>() -> <clinit>
net.minecraft.gametest.framework.GameTestRunner -> iz:
    net.minecraft.gametest.framework.TestReporter TEST_REPORTER -> a
    36:36:void <init>() -> <init>
    49:72:void runTest(net.minecraft.gametest.framework.GameTestInfo,net.minecraft.gametest.framework.GameTestTicker) -> a
    80:82:java.util.Collection runTestBatches(java.util.Collection,net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel,net.minecraft.gametest.framework.GameTestTicker) -> a
    89:89:java.util.Collection runTests(java.util.Collection,net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel,net.minecraft.gametest.framework.GameTestTicker) -> b
    93:109:java.util.Collection groupTestsIntoBatches(java.util.Collection) -> a
    113:124:void visualizeFailedTest(net.minecraft.gametest.framework.GameTestInfo) -> c
    127:130:void visualizePassedTest(net.minecraft.gametest.framework.GameTestInfo) -> d
    133:147:void spawnBeacon(net.minecraft.gametest.framework.GameTestInfo,net.minecraft.world.level.block.Block) -> b
    150:161:void spawnLectern(net.minecraft.gametest.framework.GameTestInfo,java.lang.String) -> b
    164:179:net.minecraft.world.item.ItemStack createBook(java.lang.String,boolean,java.lang.String) -> a
    183:184:void say(net.minecraft.server.level.ServerLevel,net.minecraft.ChatFormatting,java.lang.String) -> a
    187:188:void clearMarkers(net.minecraft.server.level.ServerLevel) -> a
    191:192:void showRedBox(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.lang.String) -> a
    195:206:void clearAllTests(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.gametest.framework.GameTestTicker,int) -> a
    201:205:void lambda$clearAllTests$8(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    199:199:boolean lambda$clearAllTests$7(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> b
    183:183:void lambda$say$6(java.lang.String,net.minecraft.ChatFormatting,net.minecraft.server.level.ServerPlayer) -> a
    183:183:boolean lambda$say$5(net.minecraft.server.level.ServerPlayer) -> a
    169:169:void lambda$createBook$4(java.lang.StringBuffer,java.lang.String) -> a
    104:108:java.util.stream.Stream lambda$groupTestsIntoBatches$3(java.util.Map,java.lang.String) -> a
    108:108:net.minecraft.gametest.framework.GameTestBatch lambda$null$2(java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.Collection,java.util.function.Consumer,java.util.List) -> a
    97:100:void lambda$groupTestsIntoBatches$1(java.util.Map,net.minecraft.gametest.framework.TestFunction) -> a
    98:98:java.util.Collection lambda$null$0(java.lang.String) -> a
    36:36:void access$000(net.minecraft.gametest.framework.GameTestInfo,net.minecraft.world.level.block.Block) -> a
    36:36:void access$100(net.minecraft.gametest.framework.GameTestInfo) -> a
    36:36:void access$200(net.minecraft.gametest.framework.GameTestInfo,java.lang.String) -> a
    36:36:void access$300(net.minecraft.gametest.framework.GameTestInfo) -> b
    37:37:void <clinit>() -> <clinit>
net.minecraft.gametest.framework.GameTestRunner$1 -> iz$1:
    52:52:void <init>() -> <init>
    55:56:void testStructureLoaded(net.minecraft.gametest.framework.GameTestInfo) -> a
    60:62:void testPassed(net.minecraft.gametest.framework.GameTestInfo) -> b
    66:69:void testFailed(net.minecraft.gametest.framework.GameTestInfo) -> c
net.minecraft.gametest.framework.GameTestSequence -> ja:
    net.minecraft.gametest.framework.GameTestInfo parent -> a
    java.util.List events -> b
    long lastTick -> c
    35:41:void <init>(net.minecraft.gametest.framework.GameTestInfo) -> <init>
    44:45:net.minecraft.gametest.framework.GameTestSequence thenWait(java.lang.Runnable) -> a
    49:50:net.minecraft.gametest.framework.GameTestSequence thenWait(long,java.lang.Runnable) -> a
    54:54:net.minecraft.gametest.framework.GameTestSequence thenIdle(int) -> a
    58:59:net.minecraft.gametest.framework.GameTestSequence thenExecute(java.lang.Runnable) -> b
    63:69:net.minecraft.gametest.framework.GameTestSequence thenExecuteAfter(int,java.lang.Runnable) -> a
    73:74:void thenSucceed() -> a
    77:78:void thenFail(java.util.function.Supplier) -> a
    81:83:net.minecraft.gametest.framework.GameTestSequence$Condition thenTrigger() -> b
    88:91:void tickAndContinue(long) -> a
    95:99:void tickAndFailIfNotComplete(long) -> b
    103:107:void executeWithoutFail(java.lang.Runnable) -> c
    110:123:void tick(long) -> c
    82:82:void lambda$thenTrigger$4(net.minecraft.gametest.framework.GameTestSequence$Condition) -> a
    77:77:void lambda$thenFail$3(java.util.function.Supplier) -> b
    64:68:void lambda$thenExecuteAfter$2(int,java.lang.Runnable) -> b
    58:58:void lambda$thenExecute$1(java.lang.Runnable) -> d
    54:54:void lambda$thenIdle$0() -> c
    9:9:net.minecraft.gametest.framework.GameTestInfo access$000(net.minecraft.gametest.framework.GameTestSequence) -> a
net.minecraft.gametest.framework.GameTestSequence$Condition -> ja$a:
    long triggerTime -> b
    net.minecraft.gametest.framework.GameTestSequence this$0 -> a
    10:13:void <init>(net.minecraft.gametest.framework.GameTestSequence) -> <init>
    16:20:void trigger(long) -> a
    23:31:void assertTriggeredThisTick() -> a
net.minecraft.gametest.framework.GameTestServer -> jb:
    org.apache.logging.log4j.Logger LOGGER -> h
    java.util.List testBatches -> i
    net.minecraft.core.BlockPos spawnPos -> j
    net.minecraft.gametest.framework.MultipleTestTracker testTracker -> k
    51:57:void <init>(java.io.File,java.lang.String,java.util.Collection,net.minecraft.core.BlockPos) -> <init>
    61:73:boolean initServer() -> d
    78:107:void tickServer(java.util.function.BooleanSupplier) -> a
    111:113:void onServerExit() -> e
    117:118:void onServerCrash(net.minecraft.CrashReport) -> a
    121:124:void startTests(net.minecraft.server.level.ServerLevel) -> b
    127:127:boolean haveTestsStarted() -> aZ
    132:132:boolean canGenerateStructures() -> f
    137:137:net.minecraft.world.level.GameType getDefaultGameType() -> g
    142:142:net.minecraft.world.Difficulty getDefaultDifficulty() -> h
    147:147:boolean isHardcore() -> i
    152:152:int getOperatorUserPermissionLevel() -> j
    157:157:int getFunctionCompilationLevel() -> k
    162:162:boolean shouldRconBroadcast() -> l
    167:167:boolean isDedicatedServer() -> m
    172:172:boolean isEpollEnabled() -> n
    177:177:boolean isCommandBlockEnabled() -> o
    182:182:boolean isPublished() -> p
    187:187:boolean publishServer(net.minecraft.world.level.GameType,boolean,int) -> a
    192:192:boolean shouldInformAdmins() -> I_
    197:197:boolean isSingleplayerOwner(com.mojang.authlib.GameProfile) -> a
    202:202:java.util.Optional getModdedStatus() -> q
    103:103:void lambda$tickServer$1(net.minecraft.gametest.framework.GameTestInfo) -> a
    97:97:void lambda$tickServer$0(net.minecraft.gametest.framework.GameTestInfo) -> b
    37:37:void <clinit>() -> <clinit>
net.minecraft.gametest.framework.GameTestServer$1 -> jb$1:
    net.minecraft.gametest.framework.GameTestServer this$0 -> a
    64:64:void <init>(net.minecraft.gametest.framework.GameTestServer,net.minecraft.server.MinecraftServer,int) -> <init>
net.minecraft.gametest.framework.GameTestTicker -> jc:
    net.minecraft.gametest.framework.GameTestTicker singleton -> a
    java.util.Collection testInfos -> b
    7:9:void <init>() -> <init>
    12:13:void add(net.minecraft.gametest.framework.GameTestInfo) -> a
    16:17:void clear() -> a
    20:22:void tick() -> b
    8:8:void <clinit>() -> <clinit>
net.minecraft.gametest.framework.GameTestTimeoutException -> jd:
    5:6:void <init>(java.lang.String) -> <init>
net.minecraft.gametest.framework.LogTestReporter -> je:
    org.apache.logging.log4j.Logger LOGGER -> a
    7:7:void <init>() -> <init>
    12:19:void onTestFailed(net.minecraft.gametest.framework.GameTestInfo) -> a
    23:23:void onTestSuccess(net.minecraft.gametest.framework.GameTestInfo) -> b
    8:8:void <clinit>() -> <clinit>
net.minecraft.gametest.framework.MultipleTestTracker -> jf:
    java.util.Collection tests -> a
    net.minecraft.gametest.framework.GameTestListener listener -> b
    19:25:void <init>() -> <init>
    19:29:void <init>(java.util.Collection) -> <init>
    32:36:void add(net.minecraft.gametest.framework.GameTestInfo) -> a
    39:41:void setListener(net.minecraft.gametest.framework.GameTestListener) -> a
    44:44:int getFailedRequiredCount() -> a
    48:48:int getFailedOptionalCount() -> b
    52:52:int getDoneCount() -> c
    56:56:boolean hasFailedRequired() -> d
    60:60:boolean hasFailedOptional() -> e
    64:64:java.util.Collection getFailedRequired() -> f
    68:68:java.util.Collection getFailedOptional() -> g
    72:72:int getTotalCount() -> h
    76:76:boolean isDone() -> i
    80:94:java.lang.String getProgressBar() -> j
    99:99:java.lang.String toString() -> toString
    83:92:void lambda$getProgressBar$1(java.lang.StringBuffer,net.minecraft.gametest.framework.GameTestInfo) -> a
    40:40:void lambda$setListener$0(net.minecraft.gametest.framework.GameTestListener,net.minecraft.gametest.framework.GameTestInfo) -> a
net.minecraft.gametest.framework.StructureUtils -> jg:
    java.lang.String testStructuresDir -> a
    44:44:void <init>() -> <init>
    53:54:net.minecraft.world.phys.AABB getStructureBounds(net.minecraft.world.level.block.entity.StructureBlockEntity) -> a
    58:63:void addCommandBlockAndButtonToStartTest(net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel) -> a
    66:77:void createNewEmptyStructureBlock(java.lang.String,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,int,net.minecraft.server.level.ServerLevel) -> a
    80:86:net.minecraft.world.level.block.entity.StructureBlockEntity spawnStructure(java.lang.String,net.minecraft.core.BlockPos,int,net.minecraft.server.level.ServerLevel,boolean) -> a
    90:100:void forceLoadChunks(net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel) -> b
    103:109:void clearSpaceForStructure(net.minecraft.world.level.levelgen.structure.BoundingBox,int,net.minecraft.server.level.ServerLevel) -> a
    112:114:net.minecraft.world.level.levelgen.structure.BoundingBox createStructureBoundingBox(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,int) -> a
    118:120:java.util.Optional findStructureBlockContainingPos(net.minecraft.core.BlockPos,int,net.minecraft.server.level.ServerLevel) -> a
    125:129:net.minecraft.core.BlockPos findNearestStructureBlock(net.minecraft.core.BlockPos,int,net.minecraft.server.level.ServerLevel) -> b
    133:148:java.util.Collection findStructureBlocks(net.minecraft.core.BlockPos,int,net.minecraft.server.level.ServerLevel) -> c
    152:168:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate getStructureTemplate(java.lang.String,net.minecraft.server.level.ServerLevel) -> a
    172:188:net.minecraft.world.level.block.entity.StructureBlockEntity createStructureBlock(java.lang.String,net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel,boolean) -> a
    196:202:net.minecraft.nbt.CompoundTag tryLoadStructure(java.nio.file.Path) -> a
    208:228:void clearBlock(int,net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel) -> a
    231:233:boolean doesStructureContain(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel) -> a
    125:125:int lambda$findNearestStructureBlock$3(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    119:119:boolean lambda$findStructureBlockContainingPos$2(net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    107:107:boolean lambda$clearSpaceForStructure$1(net.minecraft.world.entity.Entity) -> a
    103:103:void lambda$clearSpaceForStructure$0(int,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    46:46:void <clinit>() -> <clinit>
net.minecraft.gametest.framework.TeamcityTestReporter -> jh:
    org.apache.logging.log4j.Logger LOGGER -> a
    com.google.common.escape.Escaper ESCAPER -> b
    9:9:void <init>() -> <init>
    23:34:void onTestFailed(net.minecraft.gametest.framework.GameTestInfo) -> a
    38:42:void onTestSuccess(net.minecraft.gametest.framework.GameTestInfo) -> b
    10:19:void <clinit>() -> <clinit>
net.minecraft.gametest.framework.TestClassNameArgument -> ji:
    java.util.Collection EXAMPLES -> a
    19:19:void <init>() -> <init>
    24:29:java.lang.String parse(com.mojang.brigadier.StringReader) -> a
    34:34:net.minecraft.gametest.framework.TestClassNameArgument testClassName() -> a
    38:38:java.lang.String getTestClassName(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    43:43:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    49:49:java.util.Collection getExamples() -> getExamples
    19:19:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    20:20:void <clinit>() -> <clinit>
net.minecraft.gametest.framework.TestCommand -> jj:
    52:52:void <init>() -> <init>
    65:148:void register(com.mojang.brigadier.CommandDispatcher) -> a
    151:172:int createNewStructure(net.minecraft.commands.CommandSourceStack,java.lang.String,int,int,int) -> a
    176:208:int showPos(net.minecraft.commands.CommandSourceStack,java.lang.String) -> a
    212:224:int runNearbyTest(net.minecraft.commands.CommandSourceStack) -> a
    228:244:int runAllNearbyTests(net.minecraft.commands.CommandSourceStack) -> b
    248:258:void runTest(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.gametest.framework.MultipleTestTracker) -> a
    261:272:void showTestSummaryIfAllDone(net.minecraft.server.level.ServerLevel,net.minecraft.gametest.framework.MultipleTestTracker) -> b
    275:279:int clearAllTests(net.minecraft.commands.CommandSourceStack,int) -> a
    283:290:int runTest(net.minecraft.commands.CommandSourceStack,net.minecraft.gametest.framework.TestFunction) -> a
    294:298:void runTestPreparation(net.minecraft.gametest.framework.TestFunction,net.minecraft.server.level.ServerLevel) -> a
    301:303:int runAllTests(net.minecraft.commands.CommandSourceStack) -> c
    307:310:int runAllTestsInClass(net.minecraft.commands.CommandSourceStack,java.lang.String) -> b
    314:322:void runTests(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    325:326:void say(net.minecraft.commands.CommandSourceStack,java.lang.String) -> c
    329:348:int exportTestStructure(net.minecraft.commands.CommandSourceStack,java.lang.String) -> d
    352:368:int importTestStructure(net.minecraft.commands.CommandSourceStack,java.lang.String) -> e
    373:376:void say(net.minecraft.server.level.ServerLevel,java.lang.String,net.minecraft.ChatFormatting) -> a
    374:375:void lambda$say$16(net.minecraft.ChatFormatting,java.lang.String,net.minecraft.server.level.ServerPlayer) -> a
    373:373:boolean lambda$say$15(net.minecraft.server.level.ServerPlayer) -> a
    242:242:void lambda$runAllNearbyTests$14(net.minecraft.server.level.ServerLevel,net.minecraft.gametest.framework.MultipleTestTracker,net.minecraft.core.BlockPos) -> a
    144:144:int lambda$register$13(com.mojang.brigadier.context.CommandContext) -> a
    141:141:int lambda$register$12(com.mojang.brigadier.context.CommandContext) -> b
    128:132:int lambda$register$11(com.mojang.brigadier.context.CommandContext) -> c
    119:123:int lambda$register$10(com.mojang.brigadier.context.CommandContext) -> d
    116:116:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> e
    109:109:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> f
    106:106:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> g
    101:101:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> h
    94:94:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> i
    87:87:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> j
    84:84:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> k
    79:79:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> l
    73:73:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> m
    69:69:int lambda$register$0(com.mojang.brigadier.context.CommandContext) -> n
    52:52:void access$000(net.minecraft.server.level.ServerLevel,net.minecraft.gametest.framework.MultipleTestTracker) -> a
net.minecraft.gametest.framework.TestCommand$TestSummaryDisplayer -> jj$a:
    net.minecraft.server.level.ServerLevel level -> a
    net.minecraft.gametest.framework.MultipleTestTracker tracker -> b
    382:385:void <init>(net.minecraft.server.level.ServerLevel,net.minecraft.gametest.framework.MultipleTestTracker) -> <init>
    389:389:void testStructureLoaded(net.minecraft.gametest.framework.GameTestInfo) -> a
    393:394:void testPassed(net.minecraft.gametest.framework.GameTestInfo) -> b
    398:399:void testFailed(net.minecraft.gametest.framework.GameTestInfo) -> c
net.minecraft.gametest.framework.TestFunction -> jk:
    java.lang.String batchName -> a
    java.lang.String testName -> b
    java.lang.String structureName -> c
    boolean required -> d
    java.util.function.Consumer function -> e
    int maxTicks -> f
    long setupTicks -> g
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,int,long,boolean,java.util.function.Consumer) -> <init>
    32:33:void run(net.minecraft.gametest.framework.GameTestHelper) -> a
    36:36:java.lang.String getTestName() -> a
    40:40:java.lang.String getStructureName() -> b
    45:45:java.lang.String toString() -> toString
    49:49:int getMaxTicks() -> c
    53:53:boolean isRequired() -> d
    57:57:java.lang.String getBatchName() -> e
    61:61:long getSetupTicks() -> f
net.minecraft.gametest.framework.TestFunctionArgument -> jl:
    java.util.Collection EXAMPLES -> a
    21:21:void <init>() -> <init>
    26:32:net.minecraft.gametest.framework.TestFunction parse(com.mojang.brigadier.StringReader) -> a
    37:37:net.minecraft.gametest.framework.TestFunctionArgument testFunctionArgument() -> a
    41:41:net.minecraft.gametest.framework.TestFunction getTestFunction(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    46:47:java.util.concurrent.CompletableFuture listSuggestions(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> listSuggestions
    53:53:java.util.Collection getExamples() -> getExamples
    21:21:java.lang.Object parse(com.mojang.brigadier.StringReader) -> parse
    22:22:void <clinit>() -> <clinit>
net.minecraft.gametest.framework.TestReporter -> jm:
    void onTestFailed(net.minecraft.gametest.framework.GameTestInfo) -> a
    void onTestSuccess(net.minecraft.gametest.framework.GameTestInfo) -> b
net.minecraft.gametest.framework.package-info -> jn:
net.minecraft.locale.Language -> jo:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.regex.Pattern UNSUPPORTED_FORMAT_PATTERN -> b
    net.minecraft.locale.Language SINGLETON -> c
    java.util.Map storage -> d
    long lastUpdateTime -> e
    27:42:void <init>() -> <init>
    45:45:net.minecraft.locale.Language getInstance() -> a
    49:52:void forceData(java.util.Map) -> a
    55:55:java.lang.String getElement(java.lang.String) -> a
    59:60:java.lang.String getProperty(java.lang.String) -> c
    64:64:boolean exists(java.lang.String) -> b
    68:68:long getLastUpdateTime() -> b
    21:25:void <clinit>() -> <clinit>
net.minecraft.locale.package-info -> jp:
net.minecraft.nbt.ByteArrayTag -> jq:
    net.minecraft.nbt.TagType TYPE -> a
    byte[] data -> b
    46:48:void <init>(byte[]) -> <init>
    51:52:void <init>(java.util.List) -> <init>
    55:61:byte[] toArray(java.util.List) -> a
    66:68:void write(java.io.DataOutput) -> a
    72:72:byte getId() -> a
    77:77:net.minecraft.nbt.TagType getType() -> b
    82:89:java.lang.String toString() -> toString
    94:96:net.minecraft.nbt.Tag copy() -> c
    101:105:boolean equals(java.lang.Object) -> equals
    110:110:int hashCode() -> hashCode
    115:130:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    134:134:byte[] getAsByteArray() -> d
    139:139:int size() -> size
    144:144:net.minecraft.nbt.ByteTag get(int) -> a
    149:151:net.minecraft.nbt.ByteTag set(int,net.minecraft.nbt.ByteTag) -> a
    156:157:void add(int,net.minecraft.nbt.ByteTag) -> b
    161:165:boolean setTag(int,net.minecraft.nbt.Tag) -> a
    170:174:boolean addTag(int,net.minecraft.nbt.Tag) -> b
    179:181:net.minecraft.nbt.ByteTag remove(int) -> b
    186:186:int getElementType() -> a_
    191:192:void clear() -> clear
    13:13:net.minecraft.nbt.Tag remove(int) -> c
    13:13:void add(int,net.minecraft.nbt.Tag) -> c
    13:13:net.minecraft.nbt.Tag set(int,net.minecraft.nbt.Tag) -> d
    13:13:java.lang.Object remove(int) -> remove
    13:13:void add(int,java.lang.Object) -> add
    13:13:java.lang.Object set(int,java.lang.Object) -> set
    13:13:java.lang.Object get(int) -> get
    22:22:void <clinit>() -> <clinit>
net.minecraft.nbt.ByteArrayTag$1 -> jq$1:
    22:22:void <init>() -> <init>
    25:30:net.minecraft.nbt.ByteArrayTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    35:35:java.lang.String getName() -> a
    40:40:java.lang.String getPrettyName() -> b
    22:22:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.ByteTag -> jr:
    net.minecraft.nbt.TagType TYPE -> a
    net.minecraft.nbt.ByteTag ZERO -> b
    net.minecraft.nbt.ByteTag ONE -> c
    byte data -> h
    55:57:void <init>(byte) -> <init>
    60:60:net.minecraft.nbt.ByteTag valueOf(byte) -> a
    64:64:net.minecraft.nbt.ByteTag valueOf(boolean) -> a
    69:70:void write(java.io.DataOutput) -> a
    74:74:byte getId() -> a
    79:79:net.minecraft.nbt.TagType getType() -> b
    84:84:java.lang.String toString() -> toString
    89:89:net.minecraft.nbt.ByteTag copy() -> d
    94:98:boolean equals(java.lang.Object) -> equals
    103:103:int hashCode() -> hashCode
    108:109:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    114:114:long getAsLong() -> e
    119:119:int getAsInt() -> f
    124:124:short getAsShort() -> g
    129:129:byte getAsByte() -> h
    134:134:double getAsDouble() -> i
    139:139:float getAsFloat() -> j
    144:144:java.lang.Number getAsNumber() -> k
    10:10:net.minecraft.nbt.Tag copy() -> c
    10:10:void <init>(byte,net.minecraft.nbt.ByteTag$1) -> <init>
    27:51:void <clinit>() -> <clinit>
net.minecraft.nbt.ByteTag$1 -> jr$1:
    27:27:void <init>() -> <init>
    30:31:net.minecraft.nbt.ByteTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    36:36:java.lang.String getName() -> a
    41:41:java.lang.String getPrettyName() -> b
    46:46:boolean isValue() -> c
    27:27:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.ByteTag$Cache -> jr$a:
    net.minecraft.nbt.ByteTag[] cache -> a
    18:18:void <init>() -> <init>
    18:18:net.minecraft.nbt.ByteTag[] access$100() -> a
    19:24:void <clinit>() -> <clinit>
net.minecraft.nbt.CollectionTag -> js:
    5:5:void <init>() -> <init>
    net.minecraft.nbt.Tag set(int,net.minecraft.nbt.Tag) -> d
    void add(int,net.minecraft.nbt.Tag) -> c
    net.minecraft.nbt.Tag remove(int) -> c
    boolean setTag(int,net.minecraft.nbt.Tag) -> a
    boolean addTag(int,net.minecraft.nbt.Tag) -> b
    int getElementType() -> a_
    5:5:java.lang.Object remove(int) -> remove
    5:5:void add(int,java.lang.Object) -> add
    5:5:java.lang.Object set(int,java.lang.Object) -> set
net.minecraft.nbt.CompoundTag -> jt:
    org.apache.logging.log4j.Logger LOGGER -> b
    java.util.regex.Pattern SIMPLE_VALUE -> c
    net.minecraft.nbt.TagType TYPE -> a
    java.util.Map tags -> h
    89:91:void <init>(java.util.Map) -> <init>
    94:95:void <init>() -> <init>
    99:104:void write(java.io.DataOutput) -> a
    107:107:java.util.Set getAllKeys() -> d
    112:112:byte getId() -> a
    117:117:net.minecraft.nbt.TagType getType() -> b
    121:121:int size() -> e
    126:126:net.minecraft.nbt.Tag put(java.lang.String,net.minecraft.nbt.Tag) -> a
    130:131:void putByte(java.lang.String,byte) -> a
    134:135:void putShort(java.lang.String,short) -> a
    138:139:void putInt(java.lang.String,int) -> b
    142:143:void putLong(java.lang.String,long) -> a
    146:148:void putUUID(java.lang.String,java.util.UUID) -> a
    151:151:java.util.UUID getUUID(java.lang.String) -> a
    155:155:boolean hasUUID(java.lang.String) -> b
    159:161:void removeUUID(java.lang.String) -> c
    164:165:void putFloat(java.lang.String,float) -> a
    168:169:void putDouble(java.lang.String,double) -> a
    172:173:void putString(java.lang.String,java.lang.String) -> a
    176:177:void putByteArray(java.lang.String,byte[]) -> a
    180:181:void putByteArray(java.lang.String,java.util.List) -> a
    184:185:void putIntArray(java.lang.String,int[]) -> a
    188:189:void putIntArray(java.lang.String,java.util.List) -> b
    192:193:void putLongArray(java.lang.String,long[]) -> a
    196:197:void putLongArray(java.lang.String,java.util.List) -> c
    200:201:void putBoolean(java.lang.String,boolean) -> a
    205:205:net.minecraft.nbt.Tag get(java.lang.String) -> d
    209:213:byte getTagType(java.lang.String) -> e
    217:217:boolean contains(java.lang.String) -> f
    221:229:boolean contains(java.lang.String,int) -> c
    234:239:byte getByte(java.lang.String) -> g
    244:249:short getShort(java.lang.String) -> h
    254:259:int getInt(java.lang.String) -> i
    264:269:long getLong(java.lang.String) -> j
    274:279:float getFloat(java.lang.String) -> k
    284:289:double getDouble(java.lang.String) -> l
    294:299:java.lang.String getString(java.lang.String) -> m
    304:310:byte[] getByteArray(java.lang.String) -> n
    315:321:int[] getIntArray(java.lang.String) -> o
    326:332:long[] getLongArray(java.lang.String) -> p
    337:343:net.minecraft.nbt.CompoundTag getCompound(java.lang.String) -> q
    348:358:net.minecraft.nbt.ListTag getList(java.lang.String,int) -> d
    362:362:boolean getBoolean(java.lang.String) -> r
    366:367:void remove(java.lang.String) -> s
    371:382:void stripEmptyChildren() -> b_
    386:401:java.lang.String toString() -> toString
    406:406:boolean isEmpty() -> isEmpty
    410:417:net.minecraft.CrashReport createReport(java.lang.String,net.minecraft.nbt.TagType,java.lang.ClassCastException) -> a
    422:423:net.minecraft.nbt.CompoundTag copy() -> g
    428:432:boolean equals(java.lang.Object) -> equals
    437:437:int hashCode() -> hashCode
    441:449:void writeNamedTag(java.lang.String,net.minecraft.nbt.Tag,java.io.DataOutput) -> a
    452:452:byte readNamedTagType(java.io.DataInput,net.minecraft.nbt.NbtAccounter) -> c
    456:456:java.lang.String readNamedTagName(java.io.DataInput,net.minecraft.nbt.NbtAccounter) -> d
    461:467:net.minecraft.nbt.Tag readNamedTagData(net.minecraft.nbt.TagType,java.lang.String,java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
    485:500:net.minecraft.nbt.CompoundTag merge(net.minecraft.nbt.CompoundTag) -> a
    504:508:java.lang.String handleEscape(java.lang.String) -> t
    512:519:net.minecraft.network.chat.Component handleEscapePretty(java.lang.String) -> u
    524:558:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    28:28:net.minecraft.nbt.Tag copy() -> c
    413:413:java.lang.String lambda$createReport$0(java.lang.String) -> v
    28:28:byte access$000(java.io.DataInput,net.minecraft.nbt.NbtAccounter) -> a
    28:28:java.lang.String access$100(java.io.DataInput,net.minecraft.nbt.NbtAccounter) -> b
    28:28:net.minecraft.nbt.Tag access$200(net.minecraft.nbt.TagType,java.lang.String,java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    28:28:void <init>(java.util.Map,net.minecraft.nbt.CompoundTag$1) -> <init>
    29:54:void <clinit>() -> <clinit>
net.minecraft.nbt.CompoundTag$1 -> jt$1:
    54:54:void <init>() -> <init>
    57:73:net.minecraft.nbt.CompoundTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    78:78:java.lang.String getName() -> a
    83:83:java.lang.String getPrettyName() -> b
    54:54:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.DoubleTag -> ju:
    net.minecraft.nbt.DoubleTag ZERO -> a
    net.minecraft.nbt.TagType TYPE -> b
    double data -> c
    46:48:void <init>(double) -> <init>
    51:54:net.minecraft.nbt.DoubleTag valueOf(double) -> a
    59:60:void write(java.io.DataOutput) -> a
    64:64:byte getId() -> a
    69:69:net.minecraft.nbt.TagType getType() -> b
    74:74:java.lang.String toString() -> toString
    79:79:net.minecraft.nbt.DoubleTag copy() -> d
    84:88:boolean equals(java.lang.Object) -> equals
    93:94:int hashCode() -> hashCode
    99:100:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    105:105:long getAsLong() -> e
    110:110:int getAsInt() -> f
    115:115:short getAsShort() -> g
    120:120:byte getAsByte() -> h
    125:125:double getAsDouble() -> i
    130:130:float getAsFloat() -> j
    135:135:java.lang.Number getAsNumber() -> k
    11:11:net.minecraft.nbt.Tag copy() -> c
    19:21:void <clinit>() -> <clinit>
net.minecraft.nbt.DoubleTag$1 -> ju$1:
    21:21:void <init>() -> <init>
    24:25:net.minecraft.nbt.DoubleTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    30:30:java.lang.String getName() -> a
    35:35:java.lang.String getPrettyName() -> b
    40:40:boolean isValue() -> c
    21:21:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.EndTag -> jv:
    net.minecraft.nbt.TagType TYPE -> a
    net.minecraft.nbt.EndTag INSTANCE -> b
    40:41:void <init>() -> <init>
    45:45:void write(java.io.DataOutput) -> a
    49:49:byte getId() -> a
    54:54:net.minecraft.nbt.TagType getType() -> b
    59:59:java.lang.String toString() -> toString
    64:64:net.minecraft.nbt.EndTag copy() -> d
    69:69:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    10:10:net.minecraft.nbt.Tag copy() -> c
    15:38:void <clinit>() -> <clinit>
net.minecraft.nbt.EndTag$1 -> jv$1:
    15:15:void <init>() -> <init>
    18:19:net.minecraft.nbt.EndTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    24:24:java.lang.String getName() -> a
    29:29:java.lang.String getPrettyName() -> b
    34:34:boolean isValue() -> c
    15:15:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.FloatTag -> jw:
    net.minecraft.nbt.FloatTag ZERO -> a
    net.minecraft.nbt.TagType TYPE -> b
    float data -> c
    46:48:void <init>(float) -> <init>
    51:54:net.minecraft.nbt.FloatTag valueOf(float) -> a
    59:60:void write(java.io.DataOutput) -> a
    64:64:byte getId() -> a
    69:69:net.minecraft.nbt.TagType getType() -> b
    74:74:java.lang.String toString() -> toString
    79:79:net.minecraft.nbt.FloatTag copy() -> d
    84:88:boolean equals(java.lang.Object) -> equals
    93:93:int hashCode() -> hashCode
    98:99:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    104:104:long getAsLong() -> e
    109:109:int getAsInt() -> f
    114:114:short getAsShort() -> g
    119:119:byte getAsByte() -> h
    124:124:double getAsDouble() -> i
    129:129:float getAsFloat() -> j
    134:134:java.lang.Number getAsNumber() -> k
    11:11:net.minecraft.nbt.Tag copy() -> c
    19:21:void <clinit>() -> <clinit>
net.minecraft.nbt.FloatTag$1 -> jw$1:
    21:21:void <init>() -> <init>
    24:25:net.minecraft.nbt.FloatTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    30:30:java.lang.String getName() -> a
    35:35:java.lang.String getPrettyName() -> b
    40:40:boolean isValue() -> c
    21:21:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.IntArrayTag -> jx:
    net.minecraft.nbt.TagType TYPE -> a
    int[] data -> b
    49:51:void <init>(int[]) -> <init>
    54:55:void <init>(java.util.List) -> <init>
    58:64:int[] toArray(java.util.List) -> a
    69:73:void write(java.io.DataOutput) -> a
    77:77:byte getId() -> a
    82:82:net.minecraft.nbt.TagType getType() -> b
    87:94:java.lang.String toString() -> toString
    99:101:net.minecraft.nbt.IntArrayTag copy() -> d
    106:110:boolean equals(java.lang.Object) -> equals
    115:115:int hashCode() -> hashCode
    119:119:int[] getAsIntArray() -> g
    124:136:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    141:141:int size() -> size
    146:146:net.minecraft.nbt.IntTag get(int) -> a
    151:153:net.minecraft.nbt.IntTag set(int,net.minecraft.nbt.IntTag) -> a
    158:159:void add(int,net.minecraft.nbt.IntTag) -> b
    163:167:boolean setTag(int,net.minecraft.nbt.Tag) -> a
    172:176:boolean addTag(int,net.minecraft.nbt.Tag) -> b
    181:183:net.minecraft.nbt.IntTag remove(int) -> b
    188:188:int getElementType() -> a_
    193:194:void clear() -> clear
    13:13:net.minecraft.nbt.Tag remove(int) -> c
    13:13:void add(int,net.minecraft.nbt.Tag) -> c
    13:13:net.minecraft.nbt.Tag set(int,net.minecraft.nbt.Tag) -> d
    13:13:net.minecraft.nbt.Tag copy() -> c
    13:13:java.lang.Object remove(int) -> remove
    13:13:void add(int,java.lang.Object) -> add
    13:13:java.lang.Object set(int,java.lang.Object) -> set
    13:13:java.lang.Object get(int) -> get
    22:22:void <clinit>() -> <clinit>
net.minecraft.nbt.IntArrayTag$1 -> jx$1:
    22:22:void <init>() -> <init>
    25:33:net.minecraft.nbt.IntArrayTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    38:38:java.lang.String getName() -> a
    43:43:java.lang.String getPrettyName() -> b
    22:22:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.IntTag -> jy:
    net.minecraft.nbt.TagType TYPE -> a
    int data -> b
    54:56:void <init>(int) -> <init>
    59:61:net.minecraft.nbt.IntTag valueOf(int) -> a
    66:67:void write(java.io.DataOutput) -> a
    71:71:byte getId() -> a
    76:76:net.minecraft.nbt.TagType getType() -> b
    81:81:java.lang.String toString() -> toString
    86:86:net.minecraft.nbt.IntTag copy() -> d
    91:95:boolean equals(java.lang.Object) -> equals
    100:100:int hashCode() -> hashCode
    105:105:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    110:110:long getAsLong() -> e
    115:115:int getAsInt() -> f
    120:120:short getAsShort() -> g
    125:125:byte getAsByte() -> h
    130:130:double getAsDouble() -> i
    135:135:float getAsFloat() -> j
    140:140:java.lang.Number getAsNumber() -> k
    10:10:net.minecraft.nbt.Tag copy() -> c
    10:10:void <init>(int,net.minecraft.nbt.IntTag$1) -> <init>
    29:29:void <clinit>() -> <clinit>
net.minecraft.nbt.IntTag$1 -> jy$1:
    29:29:void <init>() -> <init>
    32:33:net.minecraft.nbt.IntTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    38:38:java.lang.String getName() -> a
    43:43:java.lang.String getPrettyName() -> b
    48:48:boolean isValue() -> c
    29:29:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.IntTag$Cache -> jy$a:
    net.minecraft.nbt.IntTag[] cache -> a
    18:18:void <init>() -> <init>
    21:26:void <clinit>() -> <clinit>
net.minecraft.nbt.ListTag -> jz:
    net.minecraft.nbt.TagType TYPE -> a
    it.unimi.dsi.fastutil.bytes.ByteSet INLINE_ELEMENT_TYPES -> b
    java.util.List list -> c
    byte type -> h
    70:73:void <init>(java.util.List,byte) -> <init>
    76:77:void <init>() -> <init>
    81:92:void write(java.io.DataOutput) -> a
    96:96:byte getId() -> a
    101:101:net.minecraft.nbt.TagType getType() -> b
    106:113:java.lang.String toString() -> toString
    117:120:void updateTypeAfterRemove() -> g
    124:126:net.minecraft.nbt.Tag remove(int) -> c
    131:133:void stripEmptyChildren() -> b_
    137:137:boolean isEmpty() -> isEmpty
    141:147:net.minecraft.nbt.CompoundTag getCompound(int) -> a
    151:157:net.minecraft.nbt.ListTag getList(int) -> b
    161:167:short getShort(int) -> d
    171:177:int getInt(int) -> e
    181:187:int[] getIntArray(int) -> f
    191:197:long[] getLongArray(int) -> g
    201:207:double getDouble(int) -> h
    211:217:float getFloat(int) -> i
    221:228:java.lang.String getString(int) -> j
    233:233:int size() -> size
    238:238:net.minecraft.nbt.Tag get(int) -> k
    243:247:net.minecraft.nbt.Tag set(int,net.minecraft.nbt.Tag) -> d
    252:255:void add(int,net.minecraft.nbt.Tag) -> c
    259:263:boolean setTag(int,net.minecraft.nbt.Tag) -> a
    268:272:boolean addTag(int,net.minecraft.nbt.Tag) -> b
    276:283:boolean updateType(net.minecraft.nbt.Tag) -> a
    288:290:net.minecraft.nbt.ListTag copy() -> d
    295:299:boolean equals(java.lang.Object) -> equals
    304:304:int hashCode() -> hashCode
    309:344:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    349:349:int getElementType() -> a_
    354:356:void clear() -> clear
    18:18:net.minecraft.nbt.Tag copy() -> c
    18:18:java.lang.Object remove(int) -> remove
    18:18:void add(int,java.lang.Object) -> add
    18:18:java.lang.Object set(int,java.lang.Object) -> set
    18:18:java.lang.Object get(int) -> get
    18:18:void <init>(java.util.List,byte,net.minecraft.nbt.ListTag$1) -> <init>
    31:65:void <clinit>() -> <clinit>
net.minecraft.nbt.ListTag$1 -> jz$1:
    31:31:void <init>() -> <init>
    34:50:net.minecraft.nbt.ListTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    55:55:java.lang.String getName() -> a
    60:60:java.lang.String getPrettyName() -> b
    31:31:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.LongArrayTag -> ka:
    net.minecraft.nbt.TagType TYPE -> a
    long[] data -> b
    50:52:void <init>(long[]) -> <init>
    54:56:void <init>(it.unimi.dsi.fastutil.longs.LongSet) -> <init>
    59:60:void <init>(java.util.List) -> <init>
    63:69:long[] toArray(java.util.List) -> a
    74:78:void write(java.io.DataOutput) -> a
    82:82:byte getId() -> a
    87:87:net.minecraft.nbt.TagType getType() -> b
    92:99:java.lang.String toString() -> toString
    104:106:net.minecraft.nbt.LongArrayTag copy() -> d
    111:115:boolean equals(java.lang.Object) -> equals
    120:120:int hashCode() -> hashCode
    125:138:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    142:142:long[] getAsLongArray() -> g
    147:147:int size() -> size
    152:152:net.minecraft.nbt.LongTag get(int) -> a
    157:159:net.minecraft.nbt.LongTag set(int,net.minecraft.nbt.LongTag) -> a
    164:165:void add(int,net.minecraft.nbt.LongTag) -> b
    169:173:boolean setTag(int,net.minecraft.nbt.Tag) -> a
    178:182:boolean addTag(int,net.minecraft.nbt.Tag) -> b
    187:189:net.minecraft.nbt.LongTag remove(int) -> b
    194:194:int getElementType() -> a_
    199:200:void clear() -> clear
    14:14:net.minecraft.nbt.Tag remove(int) -> c
    14:14:void add(int,net.minecraft.nbt.Tag) -> c
    14:14:net.minecraft.nbt.Tag set(int,net.minecraft.nbt.Tag) -> d
    14:14:net.minecraft.nbt.Tag copy() -> c
    14:14:java.lang.Object remove(int) -> remove
    14:14:void add(int,java.lang.Object) -> add
    14:14:java.lang.Object set(int,java.lang.Object) -> set
    14:14:java.lang.Object get(int) -> get
    23:23:void <clinit>() -> <clinit>
net.minecraft.nbt.LongArrayTag$1 -> ka$1:
    23:23:void <init>() -> <init>
    26:34:net.minecraft.nbt.LongArrayTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    39:39:java.lang.String getName() -> a
    44:44:java.lang.String getPrettyName() -> b
    23:23:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.LongTag -> kb:
    net.minecraft.nbt.TagType TYPE -> a
    long data -> b
    54:56:void <init>(long) -> <init>
    59:61:net.minecraft.nbt.LongTag valueOf(long) -> a
    66:67:void write(java.io.DataOutput) -> a
    71:71:byte getId() -> a
    76:76:net.minecraft.nbt.TagType getType() -> b
    81:81:java.lang.String toString() -> toString
    86:86:net.minecraft.nbt.LongTag copy() -> d
    91:95:boolean equals(java.lang.Object) -> equals
    100:100:int hashCode() -> hashCode
    105:106:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    111:111:long getAsLong() -> e
    116:116:int getAsInt() -> f
    121:121:short getAsShort() -> g
    126:126:byte getAsByte() -> h
    131:131:double getAsDouble() -> i
    136:136:float getAsFloat() -> j
    141:141:java.lang.Number getAsNumber() -> k
    10:10:net.minecraft.nbt.Tag copy() -> c
    10:10:void <init>(long,net.minecraft.nbt.LongTag$1) -> <init>
    29:29:void <clinit>() -> <clinit>
net.minecraft.nbt.LongTag$1 -> kb$1:
    29:29:void <init>() -> <init>
    32:33:net.minecraft.nbt.LongTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    38:38:java.lang.String getName() -> a
    43:43:java.lang.String getPrettyName() -> b
    48:48:boolean isValue() -> c
    29:29:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.LongTag$Cache -> kb$a:
    net.minecraft.nbt.LongTag[] cache -> a
    18:18:void <init>() -> <init>
    21:26:void <clinit>() -> <clinit>
net.minecraft.nbt.NbtAccounter -> kc:
    net.minecraft.nbt.NbtAccounter UNLIMITED -> a
    long quota -> b
    long usage -> c
    14:16:void <init>(long) -> <init>
    19:23:void accountBits(long) -> a
    4:4:void <clinit>() -> <clinit>
net.minecraft.nbt.NbtAccounter$1 -> kc$1:
    4:4:void <init>(long) -> <init>
    8:8:void accountBits(long) -> a
net.minecraft.nbt.NbtIo -> kd:
    23:23:void <init>() -> <init>
    25:27:net.minecraft.nbt.CompoundTag readCompressed(java.io.InputStream) -> a
    31:34:void writeCompressed(net.minecraft.nbt.CompoundTag,java.io.OutputStream) -> a
    37:49:void safeWrite(net.minecraft.nbt.CompoundTag,java.io.File) -> a
    52:58:void write(net.minecraft.nbt.CompoundTag,java.io.File) -> b
    62:70:net.minecraft.nbt.CompoundTag read(java.io.File) -> a
    74:74:net.minecraft.nbt.CompoundTag read(java.io.DataInputStream) -> a
    78:82:net.minecraft.nbt.CompoundTag read(java.io.DataInput,net.minecraft.nbt.NbtAccounter) -> a
    86:87:void write(net.minecraft.nbt.CompoundTag,java.io.DataOutput) -> a
    90:99:void writeUnnamedTag(net.minecraft.nbt.Tag,java.io.DataOutput) -> a
    102:116:net.minecraft.nbt.Tag readUnnamedTag(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
net.minecraft.nbt.NbtOps -> ke:
    net.minecraft.nbt.NbtOps INSTANCE -> a
    26:27:void <init>() -> <init>
    31:31:net.minecraft.nbt.Tag empty() -> a
    36:64:com.mojang.datafixers.types.Type getType(net.minecraft.nbt.Tag) -> a
    70:73:java.util.Optional getNumberValue(net.minecraft.nbt.Tag) -> b
    78:78:net.minecraft.nbt.Tag createNumeric(java.lang.Number) -> a
    83:83:net.minecraft.nbt.Tag createByte(byte) -> a
    88:88:net.minecraft.nbt.Tag createShort(short) -> a
    93:93:net.minecraft.nbt.Tag createInt(int) -> a
    98:98:net.minecraft.nbt.Tag createLong(long) -> a
    103:103:net.minecraft.nbt.Tag createFloat(float) -> a
    108:108:net.minecraft.nbt.Tag createDouble(double) -> a
    113:113:net.minecraft.nbt.Tag createBoolean(boolean) -> a
    118:121:java.util.Optional getStringValue(net.minecraft.nbt.Tag) -> c
    126:126:net.minecraft.nbt.Tag createString(java.lang.String) -> a
    131:159:net.minecraft.nbt.Tag mergeInto(net.minecraft.nbt.Tag,net.minecraft.nbt.Tag) -> a
    165:175:net.minecraft.nbt.Tag mergeInto(net.minecraft.nbt.Tag,net.minecraft.nbt.Tag,net.minecraft.nbt.Tag) -> a
    180:200:net.minecraft.nbt.Tag merge(net.minecraft.nbt.Tag,net.minecraft.nbt.Tag) -> b
    205:209:java.util.Optional getMapValues(net.minecraft.nbt.Tag) -> d
    214:218:net.minecraft.nbt.Tag createMap(java.util.Map) -> a
    223:226:java.util.Optional getStream(net.minecraft.nbt.Tag) -> e
    231:234:java.util.Optional getByteBuffer(net.minecraft.nbt.Tag) -> f
    239:239:net.minecraft.nbt.Tag createByteList(java.nio.ByteBuffer) -> a
    244:247:java.util.Optional getIntStream(net.minecraft.nbt.Tag) -> g
    252:252:net.minecraft.nbt.Tag createIntList(java.util.stream.IntStream) -> a
    257:260:java.util.Optional getLongStream(net.minecraft.nbt.Tag) -> h
    265:265:net.minecraft.nbt.Tag createLongList(java.util.stream.LongStream) -> a
    270:295:net.minecraft.nbt.Tag createList(java.util.stream.Stream) -> a
    300:306:net.minecraft.nbt.Tag remove(net.minecraft.nbt.Tag,java.lang.String) -> a
    311:311:java.lang.String toString() -> toString
    23:23:java.lang.Object remove(java.lang.Object,java.lang.String) -> remove
    23:23:java.lang.Object createLongList(java.util.stream.LongStream) -> createLongList
    23:23:java.util.Optional getLongStream(java.lang.Object) -> getLongStream
    23:23:java.lang.Object createIntList(java.util.stream.IntStream) -> createIntList
    23:23:java.util.Optional getIntStream(java.lang.Object) -> getIntStream
    23:23:java.lang.Object createByteList(java.nio.ByteBuffer) -> createByteList
    23:23:java.util.Optional getByteBuffer(java.lang.Object) -> getByteBuffer
    23:23:java.lang.Object createList(java.util.stream.Stream) -> createList
    23:23:java.util.Optional getStream(java.lang.Object) -> getStream
    23:23:java.lang.Object createMap(java.util.Map) -> createMap
    23:23:java.util.Optional getMapValues(java.lang.Object) -> getMapValues
    23:23:java.lang.Object merge(java.lang.Object,java.lang.Object) -> merge
    23:23:java.lang.Object mergeInto(java.lang.Object,java.lang.Object,java.lang.Object) -> mergeInto
    23:23:java.lang.Object mergeInto(java.lang.Object,java.lang.Object) -> mergeInto
    23:23:java.lang.Object createString(java.lang.String) -> createString
    23:23:java.util.Optional getStringValue(java.lang.Object) -> getStringValue
    23:23:java.lang.Object createBoolean(boolean) -> createBoolean
    23:23:java.lang.Object createDouble(double) -> createDouble
    23:23:java.lang.Object createFloat(float) -> createFloat
    23:23:java.lang.Object createLong(long) -> createLong
    23:23:java.lang.Object createInt(int) -> createInt
    23:23:java.lang.Object createShort(short) -> createShort
    23:23:java.lang.Object createByte(byte) -> createByte
    23:23:java.lang.Object createNumeric(java.lang.Number) -> createNumeric
    23:23:java.util.Optional getNumberValue(java.lang.Object) -> getNumberValue
    23:23:com.mojang.datafixers.types.Type getType(java.lang.Object) -> getType
    23:23:java.lang.Object empty() -> empty
    303:303:void lambda$remove$9(net.minecraft.nbt.CompoundTag,net.minecraft.nbt.CompoundTag,java.lang.String) -> a
    303:303:boolean lambda$remove$8(java.lang.String,java.lang.String) -> a
    284:284:java.lang.Long lambda$createList$7(net.minecraft.nbt.Tag) -> i
    280:280:java.lang.Integer lambda$createList$6(net.minecraft.nbt.Tag) -> j
    276:276:java.lang.Byte lambda$createList$5(net.minecraft.nbt.Tag) -> k
    224:224:net.minecraft.nbt.Tag lambda$getStream$4(net.minecraft.nbt.Tag) -> l
    207:207:com.mojang.datafixers.util.Pair lambda$getMapValues$3(net.minecraft.nbt.CompoundTag,java.lang.String) -> a
    191:191:void lambda$merge$2(net.minecraft.nbt.CompoundTag,net.minecraft.nbt.CompoundTag,java.lang.String) -> b
    190:190:void lambda$merge$1(net.minecraft.nbt.CompoundTag,net.minecraft.nbt.CompoundTag,java.lang.String) -> c
    170:170:void lambda$mergeInto$0(net.minecraft.nbt.CompoundTag,net.minecraft.nbt.CompoundTag,java.lang.String) -> d
    24:24:void <clinit>() -> <clinit>
net.minecraft.nbt.NbtUtils -> kf:
    org.apache.logging.log4j.Logger LOGGER -> a
    38:39:void <init>() -> <init>
    43:83:com.mojang.authlib.GameProfile readGameProfile(net.minecraft.nbt.CompoundTag) -> a
    87:110:net.minecraft.nbt.CompoundTag writeGameProfile(net.minecraft.nbt.CompoundTag,com.mojang.authlib.GameProfile) -> a
    115:164:boolean compareNbt(net.minecraft.nbt.Tag,net.minecraft.nbt.Tag,boolean) -> a
    169:172:net.minecraft.nbt.CompoundTag createUUIDTag(java.util.UUID) -> a
    176:176:java.util.UUID loadUUIDTag(net.minecraft.nbt.CompoundTag) -> b
    180:180:net.minecraft.core.BlockPos readBlockPos(net.minecraft.nbt.CompoundTag) -> c
    184:188:net.minecraft.nbt.CompoundTag writeBlockPos(net.minecraft.core.BlockPos) -> a
    192:210:net.minecraft.world.level.block.state.BlockState readBlockState(net.minecraft.nbt.CompoundTag) -> d
    214:232:net.minecraft.world.level.material.FluidState readFluidState(net.minecraft.nbt.CompoundTag) -> e
    237:243:net.minecraft.world.level.block.state.StateHolder setValueHelper(net.minecraft.world.level.block.state.StateHolder,net.minecraft.world.level.block.state.properties.Property,java.lang.String,net.minecraft.nbt.CompoundTag,net.minecraft.nbt.CompoundTag) -> a
    247:261:net.minecraft.nbt.CompoundTag writeBlockState(net.minecraft.world.level.block.state.BlockState) -> a
    265:279:net.minecraft.nbt.CompoundTag writeFluidState(net.minecraft.world.level.material.FluidState) -> a
    285:285:java.lang.String getName(net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> a
    289:289:java.lang.String prettyPrint(net.minecraft.nbt.Tag) -> a
    293:293:java.lang.String prettyPrint(net.minecraft.nbt.Tag,boolean) -> a
    297:476:java.lang.StringBuilder prettyPrint(java.lang.StringBuilder,net.minecraft.nbt.Tag,int,boolean) -> a
    480:486:java.lang.StringBuilder indent(int,java.lang.StringBuilder) -> a
    490:490:net.minecraft.nbt.CompoundTag update(com.mojang.datafixers.DataFixer,net.minecraft.util.datafix.DataFixTypes,net.minecraft.nbt.CompoundTag,int) -> a
    494:494:net.minecraft.nbt.CompoundTag update(com.mojang.datafixers.DataFixer,net.minecraft.util.datafix.DataFixTypes,net.minecraft.nbt.CompoundTag,int,int) -> a
    35:35:void <clinit>() -> <clinit>
net.minecraft.nbt.NumericTag -> kg:
    4:5:void <init>() -> <init>
    long getAsLong() -> e
    int getAsInt() -> f
    short getAsShort() -> g
    byte getAsByte() -> h
    double getAsDouble() -> i
    float getAsFloat() -> j
    java.lang.Number getAsNumber() -> k
net.minecraft.nbt.ShortTag -> kh:
    net.minecraft.nbt.TagType TYPE -> a
    short data -> b
    54:56:void <init>(short) -> <init>
    59:61:net.minecraft.nbt.ShortTag valueOf(short) -> a
    66:67:void write(java.io.DataOutput) -> a
    71:71:byte getId() -> a
    76:76:net.minecraft.nbt.TagType getType() -> b
    81:81:java.lang.String toString() -> toString
    86:86:net.minecraft.nbt.ShortTag copy() -> d
    91:95:boolean equals(java.lang.Object) -> equals
    100:100:int hashCode() -> hashCode
    105:106:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    111:111:long getAsLong() -> e
    116:116:int getAsInt() -> f
    121:121:short getAsShort() -> g
    126:126:byte getAsByte() -> h
    131:131:double getAsDouble() -> i
    136:136:float getAsFloat() -> j
    141:141:java.lang.Number getAsNumber() -> k
    10:10:net.minecraft.nbt.Tag copy() -> c
    10:10:void <init>(short,net.minecraft.nbt.ShortTag$1) -> <init>
    29:29:void <clinit>() -> <clinit>
net.minecraft.nbt.ShortTag$1 -> kh$1:
    29:29:void <init>() -> <init>
    32:33:net.minecraft.nbt.ShortTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    38:38:java.lang.String getName() -> a
    43:43:java.lang.String getPrettyName() -> b
    48:48:boolean isValue() -> c
    29:29:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.ShortTag$Cache -> kh$a:
    net.minecraft.nbt.ShortTag[] cache -> a
    18:18:void <init>() -> <init>
    21:26:void <clinit>() -> <clinit>
net.minecraft.nbt.StringTag -> ki:
    net.minecraft.nbt.TagType TYPE -> a
    net.minecraft.nbt.StringTag EMPTY -> b
    java.lang.String data -> c
    50:53:void <init>(java.lang.String) -> <init>
    56:59:net.minecraft.nbt.StringTag valueOf(java.lang.String) -> a
    64:65:void write(java.io.DataOutput) -> a
    69:69:byte getId() -> a
    74:74:net.minecraft.nbt.TagType getType() -> b
    79:79:java.lang.String toString() -> toString
    84:84:net.minecraft.nbt.StringTag copy() -> d
    89:89:boolean isEmpty() -> isEmpty
    94:98:boolean equals(java.lang.Object) -> equals
    103:103:int hashCode() -> hashCode
    108:108:java.lang.String getAsString() -> c_
    113:116:net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    120:142:java.lang.String quoteAndEscape(java.lang.String) -> b
    11:11:net.minecraft.nbt.Tag copy() -> c
    19:46:void <clinit>() -> <clinit>
net.minecraft.nbt.StringTag$1 -> ki$1:
    19:19:void <init>() -> <init>
    22:27:net.minecraft.nbt.StringTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    32:32:java.lang.String getName() -> a
    37:37:java.lang.String getPrettyName() -> b
    42:42:boolean isValue() -> c
    19:19:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.Tag -> kj:
    net.minecraft.ChatFormatting SYNTAX_HIGHLIGHTING_KEY -> d
    net.minecraft.ChatFormatting SYNTAX_HIGHLIGHTING_STRING -> e
    net.minecraft.ChatFormatting SYNTAX_HIGHLIGHTING_NUMBER -> f
    net.minecraft.ChatFormatting SYNTAX_HIGHLIGHTING_NUMBER_TYPE -> g
    void write(java.io.DataOutput) -> a
    java.lang.String toString() -> toString
    byte getId() -> a
    net.minecraft.nbt.TagType getType() -> b
    net.minecraft.nbt.Tag copy() -> c
    56:56:void stripEmptyChildren() -> b_
    59:59:boolean isEmpty() -> isEmpty
    63:63:java.lang.String getAsString() -> c_
    67:67:net.minecraft.network.chat.Component getPrettyDisplay() -> l
    net.minecraft.network.chat.Component getPrettyDisplay(java.lang.String,int) -> a
    37:40:void <clinit>() -> <clinit>
net.minecraft.nbt.TagParser -> kk:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TRAILING_DATA -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_KEY -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_EXPECTED_VALUE -> c
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_INSERT_MIXED_LIST -> d
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_INSERT_MIXED_ARRAY -> e
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_ARRAY -> f
    java.util.regex.Pattern DOUBLE_PATTERN_NOSUFFIX -> g
    java.util.regex.Pattern DOUBLE_PATTERN -> h
    java.util.regex.Pattern FLOAT_PATTERN -> i
    java.util.regex.Pattern BYTE_PATTERN -> j
    java.util.regex.Pattern LONG_PATTERN -> k
    java.util.regex.Pattern SHORT_PATTERN -> l
    java.util.regex.Pattern INT_PATTERN -> m
    com.mojang.brigadier.StringReader reader -> n
    41:41:net.minecraft.nbt.CompoundTag parseTag(java.lang.String) -> a
    46:53:net.minecraft.nbt.CompoundTag readSingleStruct() -> a
    56:58:void <init>(com.mojang.brigadier.StringReader) -> <init>
    61:67:java.lang.String readKey() -> b
    71:83:net.minecraft.nbt.Tag readTypedValue() -> c
    88:118:net.minecraft.nbt.Tag type(java.lang.String) -> b
    122:134:net.minecraft.nbt.Tag readValue() -> d
    138:143:net.minecraft.nbt.Tag readList() -> e
    147:172:net.minecraft.nbt.CompoundTag readStruct() -> f
    176:209:net.minecraft.nbt.Tag readListTag() -> g
    213:232:net.minecraft.nbt.Tag readArrayTag() -> h
    238:266:java.util.List readArray(net.minecraft.nbt.TagType,net.minecraft.nbt.TagType) -> a
    270:276:boolean hasElementSeparator() -> i
    280:283:void expect(char) -> a
    21:21:com.mojang.brigadier.Message lambda$static$2(java.lang.Object) -> a
    20:20:com.mojang.brigadier.Message lambda$static$1(java.lang.Object,java.lang.Object) -> a
    19:19:com.mojang.brigadier.Message lambda$static$0(java.lang.Object,java.lang.Object) -> b
    16:36:void <clinit>() -> <clinit>
net.minecraft.nbt.TagType -> kl:
    net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
    10:10:boolean isValue() -> c
    java.lang.String getName() -> a
    java.lang.String getPrettyName() -> b
    18:18:net.minecraft.nbt.TagType createInvalid(int) -> a
net.minecraft.nbt.TagType$1 -> kl$1:
    int val$id -> a
    18:18:void <init>(int) -> <init>
    21:21:net.minecraft.nbt.EndTag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> a
    26:26:java.lang.String getName() -> a
    31:31:java.lang.String getPrettyName() -> b
    18:18:net.minecraft.nbt.Tag load(java.io.DataInput,int,net.minecraft.nbt.NbtAccounter) -> b
net.minecraft.nbt.TagTypes -> km:
    net.minecraft.nbt.TagType[] TYPES -> a
    3:3:void <init>() -> <init>
    21:25:net.minecraft.nbt.TagType getType(int) -> a
    4:4:void <clinit>() -> <clinit>
net.minecraft.nbt.package-info -> kn:
net.minecraft.network.CipherBase -> ko:
    javax.crypto.Cipher cipher -> a
    byte[] heapIn -> b
    byte[] heapOut -> c
    11:16:void <init>(javax.crypto.Cipher) -> <init>
    19:24:byte[] bufToByte(io.netty.buffer.ByteBuf) -> a
    28:34:io.netty.buffer.ByteBuf decipher(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf) -> a
    38:46:void encipher(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf) -> a
net.minecraft.network.CipherDecoder -> kp:
    net.minecraft.network.CipherBase cipher -> a
    13:15:void <init>(javax.crypto.Cipher) -> <init>
    19:20:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List) -> a
    10:10:void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List) -> decode
net.minecraft.network.CipherEncoder -> kq:
    net.minecraft.network.CipherBase cipher -> a
    12:14:void <init>(javax.crypto.Cipher) -> <init>
    18:19:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf) -> a
    9:9:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf) -> encode
net.minecraft.network.CompressionDecoder -> kr:
    java.util.zip.Inflater inflater -> a
    int threshold -> b
    18:21:void <init>(int) -> <init>
    25:49:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List) -> decode
    52:52:int getThreshold() -> a
    56:57:void setThreshold(int) -> a
net.minecraft.network.CompressionEncoder -> ks:
    byte[] encodeBuf -> a
    java.util.zip.Deflater deflater -> b
    int threshold -> c
    10:17:void <init>(int) -> <init>
    21:41:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf) -> a
    44:44:int getThreshold() -> a
    48:49:void setThreshold(int) -> a
    9:9:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf) -> encode
net.minecraft.network.Connection -> kt:
    org.apache.logging.log4j.Logger LOGGER -> g
    org.apache.logging.log4j.Marker ROOT_MARKER -> a
    org.apache.logging.log4j.Marker PACKET_MARKER -> b
    io.netty.util.AttributeKey ATTRIBUTE_PROTOCOL -> c
    net.minecraft.util.LazyLoadedValue NETWORK_WORKER_GROUP -> d
    net.minecraft.util.LazyLoadedValue NETWORK_EPOLL_WORKER_GROUP -> e
    net.minecraft.util.LazyLoadedValue LOCAL_WORKER_GROUP -> f
    net.minecraft.network.protocol.PacketFlow receiving -> h
    java.util.Queue queue -> i
    io.netty.channel.Channel channel -> j
    java.net.SocketAddress address -> k
    net.minecraft.network.PacketListener packetListener -> l
    net.minecraft.network.chat.Component disconnectedReason -> m
    boolean encrypted -> n
    boolean disconnectionHandled -> o
    int receivedPackets -> p
    int sentPackets -> q
    float averageReceivedPackets -> r
    float averageSentPackets -> s
    int tickCount -> t
    boolean handlingFault -> u
    72:88:void <init>(net.minecraft.network.protocol.PacketFlow) -> <init>
    92:100:void channelActive(io.netty.channel.ChannelHandlerContext) -> channelActive
    103:106:void setProtocol(net.minecraft.network.ConnectionProtocol) -> a
    110:111:void channelInactive(io.netty.channel.ChannelHandlerContext) -> channelInactive
    115:142:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable) -> exceptionCaught
    146:153:void channelRead0(io.netty.channel.ChannelHandlerContext,net.minecraft.network.protocol.Packet) -> a
    157:158:void genericsFtw(net.minecraft.network.protocol.Packet,net.minecraft.network.PacketListener) -> a
    161:164:void setListener(net.minecraft.network.PacketListener) -> a
    167:168:void send(net.minecraft.network.protocol.Packet) -> a
    171:177:void send(net.minecraft.network.protocol.Packet,io.netty.util.concurrent.GenericFutureListener) -> a
    180:210:void sendPacket(net.minecraft.network.protocol.Packet,io.netty.util.concurrent.GenericFutureListener) -> b
    213:224:void flushQueue() -> o
    227:247:void tick() -> a
    250:250:java.net.SocketAddress getRemoteAddress() -> b
    254:259:void disconnect(net.minecraft.network.chat.Component) -> a
    262:262:boolean isMemoryConnection() -> c
    266:266:net.minecraft.network.protocol.PacketFlow getReceiving() -> d
    270:270:net.minecraft.network.protocol.PacketFlow getSending() -> e
    274:311:net.minecraft.network.Connection connectToServer(java.net.InetAddress,int,boolean) -> a
    315:324:net.minecraft.network.Connection connectToLocalServer(java.net.SocketAddress) -> a
    328:331:void setEncryptionKey(javax.crypto.SecretKey) -> a
    334:334:boolean isEncrypted() -> f
    338:338:boolean isConnected() -> g
    342:342:boolean isConnecting() -> h
    346:346:net.minecraft.network.PacketListener getPacketListener() -> i
    351:351:net.minecraft.network.chat.Component getDisconnectedReason() -> j
    355:356:void setReadOnly() -> k
    359:380:void setupCompression(int) -> a
    383:397:void handleDisconnection() -> l
    400:400:float getAverageReceivedPackets() -> m
    404:404:float getAverageSentPackets() -> n
    53:53:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object) -> channelRead0
    200:208:void lambda$sendPacket$4(net.minecraft.network.ConnectionProtocol,net.minecraft.network.ConnectionProtocol,net.minecraft.network.protocol.Packet,io.netty.util.concurrent.GenericFutureListener) -> a
    135:135:void lambda$exceptionCaught$3(net.minecraft.network.chat.Component,io.netty.util.concurrent.Future) -> a
    68:68:io.netty.channel.DefaultEventLoopGroup lambda$static$2() -> p
    65:65:io.netty.channel.epoll.EpollEventLoopGroup lambda$static$1() -> q
    62:62:io.netty.channel.nio.NioEventLoopGroup lambda$static$0() -> r
    56:67:void <clinit>() -> <clinit>
net.minecraft.network.Connection$1 -> kt$1:
    net.minecraft.network.Connection val$connection -> a
    286:286:void <init>(net.minecraft.network.Connection) -> <init>
    290:308:void initChannel(io.netty.channel.Channel) -> initChannel
net.minecraft.network.Connection$2 -> kt$2:
    net.minecraft.network.Connection val$connection -> a
    317:317:void <init>(net.minecraft.network.Connection) -> <init>
    320:321:void initChannel(io.netty.channel.Channel) -> initChannel
net.minecraft.network.Connection$PacketHolder -> kt$a:
    net.minecraft.network.protocol.Packet packet -> a
    io.netty.util.concurrent.GenericFutureListener listener -> b
    412:415:void <init>(net.minecraft.network.protocol.Packet,io.netty.util.concurrent.GenericFutureListener) -> <init>
    407:407:net.minecraft.network.protocol.Packet access$000(net.minecraft.network.Connection$PacketHolder) -> a
    407:407:io.netty.util.concurrent.GenericFutureListener access$100(net.minecraft.network.Connection$PacketHolder) -> b
net.minecraft.network.ConnectionProtocol -> ku:
    net.minecraft.network.ConnectionProtocol HANDSHAKING -> a
    net.minecraft.network.ConnectionProtocol PLAY -> b
    net.minecraft.network.ConnectionProtocol STATUS -> c
    net.minecraft.network.ConnectionProtocol LOGIN -> d
    net.minecraft.network.ConnectionProtocol[] LOOKUP -> e
    java.util.Map PROTOCOL_BY_PACKET -> f
    int id -> g
    java.util.Map flows -> h
    net.minecraft.network.ConnectionProtocol[] $VALUES -> i
    171:171:net.minecraft.network.ConnectionProtocol[] values() -> values
    171:171:net.minecraft.network.ConnectionProtocol valueOf(java.lang.String) -> valueOf
    395:395:net.minecraft.network.ConnectionProtocol$ProtocolBuilder protocol() -> b
    415:418:void <init>(java.lang.String,int,int,net.minecraft.network.ConnectionProtocol$ProtocolBuilder) -> <init>
    422:422:java.lang.Integer getPacketId(net.minecraft.network.protocol.PacketFlow,net.minecraft.network.protocol.Packet) -> a
    427:427:net.minecraft.network.protocol.Packet createPacket(net.minecraft.network.protocol.PacketFlow,int) -> a
    431:431:int getId() -> a
    454:457:net.minecraft.network.ConnectionProtocol getById(int) -> a
    461:461:net.minecraft.network.ConnectionProtocol getProtocolForPacket(net.minecraft.network.protocol.Packet) -> a
    443:443:void lambda$static$1(net.minecraft.network.ConnectionProtocol,net.minecraft.network.protocol.PacketFlow,net.minecraft.network.ConnectionProtocol$PacketSet) -> a
    444:448:void lambda$null$0(net.minecraft.network.ConnectionProtocol,java.lang.Class) -> a
    171:450:void <clinit>() -> <clinit>
net.minecraft.network.ConnectionProtocol$1 -> ku$1:
net.minecraft.network.ConnectionProtocol$PacketSet -> ku$a:
    it.unimi.dsi.fastutil.objects.Object2IntMap classToId -> a
    java.util.List idToConstructor -> b
    359:361:void <init>() -> <init>
    364:374:net.minecraft.network.ConnectionProtocol$PacketSet addPacket(java.lang.Class,java.util.function.Supplier) -> a
    379:380:java.lang.Integer getId(java.lang.Class) -> a
    385:386:net.minecraft.network.protocol.Packet createPacket(int) -> a
    390:390:java.lang.Iterable getAllPackets() -> a
    360:360:void lambda$new$0(it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap) -> a
    359:359:void <init>(net.minecraft.network.ConnectionProtocol$1) -> <init>
net.minecraft.network.ConnectionProtocol$ProtocolBuilder -> ku$b:
    java.util.Map flows -> a
    398:399:void <init>() -> <init>
    402:403:net.minecraft.network.ConnectionProtocol$ProtocolBuilder addFlow(net.minecraft.network.protocol.PacketFlow,net.minecraft.network.ConnectionProtocol$PacketSet) -> a
    398:398:void <init>(net.minecraft.network.ConnectionProtocol$1) -> <init>
    398:398:java.util.Map access$200(net.minecraft.network.ConnectionProtocol$ProtocolBuilder) -> a
net.minecraft.network.FriendlyByteBuf -> kv:
    io.netty.buffer.ByteBuf source -> a
    52:54:void <init>(io.netty.buffer.ByteBuf) -> <init>
    57:62:int getVarIntSize(int) -> a
    66:71:int getVarLongSize(long) -> a
    75:77:void writeCollection(java.util.Collection,java.util.function.BiConsumer) -> a
    80:83:net.minecraft.network.FriendlyByteBuf writeByteArray(byte[]) -> a
    87:87:byte[] readByteArray() -> a
    91:98:byte[] readByteArray(int) -> b
    102:108:net.minecraft.network.FriendlyByteBuf writeVarIntArray(int[]) -> a
    112:112:int[] readVarIntArray() -> b
    116:126:int[] readVarIntArray(int) -> c
    130:136:net.minecraft.network.FriendlyByteBuf writeLongArray(long[]) -> a
    140:140:long[] readLongArray() -> c
    144:144:long[] readLongArray(long[]) -> b
    148:160:long[] readLongArray(long[],int) -> a
    165:168:byte[] accessByteBufWithCorrectSize() -> d
    176:176:net.minecraft.core.BlockPos readBlockPos() -> e
    180:181:net.minecraft.network.FriendlyByteBuf writeBlockPos(net.minecraft.core.BlockPos) -> a
    185:185:net.minecraft.world.level.ChunkPos readChunkPos() -> f
    189:190:net.minecraft.network.FriendlyByteBuf writeChunkPos(net.minecraft.world.level.ChunkPos) -> a
    194:194:net.minecraft.core.SectionPos readSectionPos() -> g
    198:199:net.minecraft.network.FriendlyByteBuf writeSectionPos(net.minecraft.core.SectionPos) -> a
    203:203:net.minecraft.network.chat.Component readComponent() -> h
    207:207:net.minecraft.network.FriendlyByteBuf writeComponent(net.minecraft.network.chat.Component) -> a
    211:211:java.lang.Enum readEnum(java.lang.Class) -> a
    215:215:net.minecraft.network.FriendlyByteBuf writeEnum(java.lang.Enum) -> a
    219:236:int readVarInt() -> i
    240:257:long readVarLong() -> j
    261:264:net.minecraft.network.FriendlyByteBuf writeUUID(java.util.UUID) -> a
    268:268:java.util.UUID readUUID() -> k
    273:279:net.minecraft.network.FriendlyByteBuf writeVarInt(int) -> d
    285:291:net.minecraft.network.FriendlyByteBuf writeVarLong(long) -> b
    296:306:net.minecraft.network.FriendlyByteBuf writeNbt(net.minecraft.nbt.CompoundTag) -> a
    311:321:net.minecraft.nbt.CompoundTag readNbt() -> l
    327:342:net.minecraft.network.FriendlyByteBuf writeItem(net.minecraft.world.item.ItemStack) -> a
    346:356:net.minecraft.world.item.ItemStack readItem() -> m
    360:360:java.lang.String readUtf() -> n
    364:378:java.lang.String readUtf(int) -> e
    382:382:net.minecraft.network.FriendlyByteBuf writeUtf(java.lang.String) -> a
    386:392:net.minecraft.network.FriendlyByteBuf writeUtf(java.lang.String,int) -> a
    396:396:net.minecraft.resources.ResourceLocation readResourceLocation() -> o
    400:401:net.minecraft.network.FriendlyByteBuf writeResourceLocation(net.minecraft.resources.ResourceLocation) -> a
    405:405:java.util.Date readDate() -> p
    409:410:net.minecraft.network.FriendlyByteBuf writeDate(java.util.Date) -> a
    414:421:net.minecraft.world.phys.BlockHitResult readBlockHitResult() -> q
    425:433:void writeBlockHitResult(net.minecraft.world.phys.BlockHitResult) -> a
    437:437:int capacity() -> capacity
    442:442:io.netty.buffer.ByteBuf capacity(int) -> capacity
    447:447:int maxCapacity() -> maxCapacity
    452:452:io.netty.buffer.ByteBufAllocator alloc() -> alloc
    457:457:java.nio.ByteOrder order() -> order
    462:462:io.netty.buffer.ByteBuf order(java.nio.ByteOrder) -> order
    467:467:io.netty.buffer.ByteBuf unwrap() -> unwrap
    472:472:boolean isDirect() -> isDirect
    477:477:boolean isReadOnly() -> isReadOnly
    482:482:io.netty.buffer.ByteBuf asReadOnly() -> asReadOnly
    487:487:int readerIndex() -> readerIndex
    492:492:io.netty.buffer.ByteBuf readerIndex(int) -> readerIndex
    497:497:int writerIndex() -> writerIndex
    502:502:io.netty.buffer.ByteBuf writerIndex(int) -> writerIndex
    507:507:io.netty.buffer.ByteBuf setIndex(int,int) -> setIndex
    512:512:int readableBytes() -> readableBytes
    517:517:int writableBytes() -> writableBytes
    522:522:int maxWritableBytes() -> maxWritableBytes
    527:527:boolean isReadable() -> isReadable
    532:532:boolean isReadable(int) -> isReadable
    537:537:boolean isWritable() -> isWritable
    542:542:boolean isWritable(int) -> isWritable
    547:547:io.netty.buffer.ByteBuf clear() -> clear
    552:552:io.netty.buffer.ByteBuf markReaderIndex() -> markReaderIndex
    557:557:io.netty.buffer.ByteBuf resetReaderIndex() -> resetReaderIndex
    562:562:io.netty.buffer.ByteBuf markWriterIndex() -> markWriterIndex
    567:567:io.netty.buffer.ByteBuf resetWriterIndex() -> resetWriterIndex
    572:572:io.netty.buffer.ByteBuf discardReadBytes() -> discardReadBytes
    577:577:io.netty.buffer.ByteBuf discardSomeReadBytes() -> discardSomeReadBytes
    582:582:io.netty.buffer.ByteBuf ensureWritable(int) -> ensureWritable
    587:587:int ensureWritable(int,boolean) -> ensureWritable
    592:592:boolean getBoolean(int) -> getBoolean
    597:597:byte getByte(int) -> getByte
    602:602:short getUnsignedByte(int) -> getUnsignedByte
    607:607:short getShort(int) -> getShort
    612:612:short getShortLE(int) -> getShortLE
    617:617:int getUnsignedShort(int) -> getUnsignedShort
    622:622:int getUnsignedShortLE(int) -> getUnsignedShortLE
    627:627:int getMedium(int) -> getMedium
    632:632:int getMediumLE(int) -> getMediumLE
    637:637:int getUnsignedMedium(int) -> getUnsignedMedium
    642:642:int getUnsignedMediumLE(int) -> getUnsignedMediumLE
    647:647:int getInt(int) -> getInt
    652:652:int getIntLE(int) -> getIntLE
    657:657:long getUnsignedInt(int) -> getUnsignedInt
    662:662:long getUnsignedIntLE(int) -> getUnsignedIntLE
    667:667:long getLong(int) -> getLong
    672:672:long getLongLE(int) -> getLongLE
    677:677:char getChar(int) -> getChar
    682:682:float getFloat(int) -> getFloat
    687:687:double getDouble(int) -> getDouble
    692:692:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf) -> getBytes
    697:697:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int) -> getBytes
    702:702:io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int) -> getBytes
    707:707:io.netty.buffer.ByteBuf getBytes(int,byte[]) -> getBytes
    712:712:io.netty.buffer.ByteBuf getBytes(int,byte[],int,int) -> getBytes
    717:717:io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer) -> getBytes
    722:722:io.netty.buffer.ByteBuf getBytes(int,java.io.OutputStream,int) -> getBytes
    727:727:int getBytes(int,java.nio.channels.GatheringByteChannel,int) -> getBytes
    732:732:int getBytes(int,java.nio.channels.FileChannel,long,int) -> getBytes
    737:737:java.lang.CharSequence getCharSequence(int,int,java.nio.charset.Charset) -> getCharSequence
    742:742:io.netty.buffer.ByteBuf setBoolean(int,boolean) -> setBoolean
    747:747:io.netty.buffer.ByteBuf setByte(int,int) -> setByte
    752:752:io.netty.buffer.ByteBuf setShort(int,int) -> setShort
    757:757:io.netty.buffer.ByteBuf setShortLE(int,int) -> setShortLE
    762:762:io.netty.buffer.ByteBuf setMedium(int,int) -> setMedium
    767:767:io.netty.buffer.ByteBuf setMediumLE(int,int) -> setMediumLE
    772:772:io.netty.buffer.ByteBuf setInt(int,int) -> setInt
    777:777:io.netty.buffer.ByteBuf setIntLE(int,int) -> setIntLE
    782:782:io.netty.buffer.ByteBuf setLong(int,long) -> setLong
    787:787:io.netty.buffer.ByteBuf setLongLE(int,long) -> setLongLE
    792:792:io.netty.buffer.ByteBuf setChar(int,int) -> setChar
    797:797:io.netty.buffer.ByteBuf setFloat(int,float) -> setFloat
    802:802:io.netty.buffer.ByteBuf setDouble(int,double) -> setDouble
    807:807:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf) -> setBytes
    812:812:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int) -> setBytes
    817:817:io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int) -> setBytes
    822:822:io.netty.buffer.ByteBuf setBytes(int,byte[]) -> setBytes
    827:827:io.netty.buffer.ByteBuf setBytes(int,byte[],int,int) -> setBytes
    832:832:io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer) -> setBytes
    837:837:int setBytes(int,java.io.InputStream,int) -> setBytes
    842:842:int setBytes(int,java.nio.channels.ScatteringByteChannel,int) -> setBytes
    847:847:int setBytes(int,java.nio.channels.FileChannel,long,int) -> setBytes
    852:852:io.netty.buffer.ByteBuf setZero(int,int) -> setZero
    857:857:int setCharSequence(int,java.lang.CharSequence,java.nio.charset.Charset) -> setCharSequence
    862:862:boolean readBoolean() -> readBoolean
    867:867:byte readByte() -> readByte
    872:872:short readUnsignedByte() -> readUnsignedByte
    877:877:short readShort() -> readShort
    882:882:short readShortLE() -> readShortLE
    887:887:int readUnsignedShort() -> readUnsignedShort
    892:892:int readUnsignedShortLE() -> readUnsignedShortLE
    897:897:int readMedium() -> readMedium
    902:902:int readMediumLE() -> readMediumLE
    907:907:int readUnsignedMedium() -> readUnsignedMedium
    912:912:int readUnsignedMediumLE() -> readUnsignedMediumLE
    917:917:int readInt() -> readInt
    922:922:int readIntLE() -> readIntLE
    927:927:long readUnsignedInt() -> readUnsignedInt
    932:932:long readUnsignedIntLE() -> readUnsignedIntLE
    937:937:long readLong() -> readLong
    942:942:long readLongLE() -> readLongLE
    947:947:char readChar() -> readChar
    952:952:float readFloat() -> readFloat
    957:957:double readDouble() -> readDouble
    962:962:io.netty.buffer.ByteBuf readBytes(int) -> readBytes
    967:967:io.netty.buffer.ByteBuf readSlice(int) -> readSlice
    972:972:io.netty.buffer.ByteBuf readRetainedSlice(int) -> readRetainedSlice
    977:977:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf) -> readBytes
    982:982:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int) -> readBytes
    987:987:io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int,int) -> readBytes
    992:992:io.netty.buffer.ByteBuf readBytes(byte[]) -> readBytes
    997:997:io.netty.buffer.ByteBuf readBytes(byte[],int,int) -> readBytes
    1002:1002:io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer) -> readBytes
    1007:1007:io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int) -> readBytes
    1012:1012:int readBytes(java.nio.channels.GatheringByteChannel,int) -> readBytes
    1017:1017:java.lang.CharSequence readCharSequence(int,java.nio.charset.Charset) -> readCharSequence
    1022:1022:int readBytes(java.nio.channels.FileChannel,long,int) -> readBytes
    1027:1027:io.netty.buffer.ByteBuf skipBytes(int) -> skipBytes
    1032:1032:io.netty.buffer.ByteBuf writeBoolean(boolean) -> writeBoolean
    1037:1037:io.netty.buffer.ByteBuf writeByte(int) -> writeByte
    1042:1042:io.netty.buffer.ByteBuf writeShort(int) -> writeShort
    1047:1047:io.netty.buffer.ByteBuf writeShortLE(int) -> writeShortLE
    1052:1052:io.netty.buffer.ByteBuf writeMedium(int) -> writeMedium
    1057:1057:io.netty.buffer.ByteBuf writeMediumLE(int) -> writeMediumLE
    1062:1062:io.netty.buffer.ByteBuf writeInt(int) -> writeInt
    1067:1067:io.netty.buffer.ByteBuf writeIntLE(int) -> writeIntLE
    1072:1072:io.netty.buffer.ByteBuf writeLong(long) -> writeLong
    1077:1077:io.netty.buffer.ByteBuf writeLongLE(long) -> writeLongLE
    1082:1082:io.netty.buffer.ByteBuf writeChar(int) -> writeChar
    1087:1087:io.netty.buffer.ByteBuf writeFloat(float) -> writeFloat
    1092:1092:io.netty.buffer.ByteBuf writeDouble(double) -> writeDouble
    1097:1097:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf) -> writeBytes
    1102:1102:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int) -> writeBytes
    1107:1107:io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int) -> writeBytes
    1112:1112:io.netty.buffer.ByteBuf writeBytes(byte[]) -> writeBytes
    1117:1117:io.netty.buffer.ByteBuf writeBytes(byte[],int,int) -> writeBytes
    1122:1122:io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer) -> writeBytes
    1127:1127:int writeBytes(java.io.InputStream,int) -> writeBytes
    1132:1132:int writeBytes(java.nio.channels.ScatteringByteChannel,int) -> writeBytes
    1137:1137:int writeBytes(java.nio.channels.FileChannel,long,int) -> writeBytes
    1142:1142:io.netty.buffer.ByteBuf writeZero(int) -> writeZero
    1147:1147:int writeCharSequence(java.lang.CharSequence,java.nio.charset.Charset) -> writeCharSequence
    1152:1152:int indexOf(int,int,byte) -> indexOf
    1157:1157:int bytesBefore(byte) -> bytesBefore
    1162:1162:int bytesBefore(int,byte) -> bytesBefore
    1167:1167:int bytesBefore(int,int,byte) -> bytesBefore
    1172:1172:int forEachByte(io.netty.util.ByteProcessor) -> forEachByte
    1177:1177:int forEachByte(int,int,io.netty.util.ByteProcessor) -> forEachByte
    1182:1182:int forEachByteDesc(io.netty.util.ByteProcessor) -> forEachByteDesc
    1187:1187:int forEachByteDesc(int,int,io.netty.util.ByteProcessor) -> forEachByteDesc
    1192:1192:io.netty.buffer.ByteBuf copy() -> copy
    1197:1197:io.netty.buffer.ByteBuf copy(int,int) -> copy
    1202:1202:io.netty.buffer.ByteBuf slice() -> slice
    1207:1207:io.netty.buffer.ByteBuf retainedSlice() -> retainedSlice
    1212:1212:io.netty.buffer.ByteBuf slice(int,int) -> slice
    1217:1217:io.netty.buffer.ByteBuf retainedSlice(int,int) -> retainedSlice
    1222:1222:io.netty.buffer.ByteBuf duplicate() -> duplicate
    1227:1227:io.netty.buffer.ByteBuf retainedDuplicate() -> retainedDuplicate
    1232:1232:int nioBufferCount() -> nioBufferCount
    1237:1237:java.nio.ByteBuffer nioBuffer() -> nioBuffer
    1242:1242:java.nio.ByteBuffer nioBuffer(int,int) -> nioBuffer
    1247:1247:java.nio.ByteBuffer internalNioBuffer(int,int) -> internalNioBuffer
    1252:1252:java.nio.ByteBuffer[] nioBuffers() -> nioBuffers
    1257:1257:java.nio.ByteBuffer[] nioBuffers(int,int) -> nioBuffers
    1262:1262:boolean hasArray() -> hasArray
    1267:1267:byte[] array() -> array
    1272:1272:int arrayOffset() -> arrayOffset
    1277:1277:boolean hasMemoryAddress() -> hasMemoryAddress
    1282:1282:long memoryAddress() -> memoryAddress
    1287:1287:java.lang.String toString(java.nio.charset.Charset) -> toString
    1292:1292:java.lang.String toString(int,int,java.nio.charset.Charset) -> toString
    1297:1297:int hashCode() -> hashCode
    1302:1302:boolean equals(java.lang.Object) -> equals
    1307:1307:int compareTo(io.netty.buffer.ByteBuf) -> compareTo
    1312:1312:java.lang.String toString() -> toString
    1317:1317:io.netty.buffer.ByteBuf retain(int) -> retain
    1322:1322:io.netty.buffer.ByteBuf retain() -> retain
    1327:1327:io.netty.buffer.ByteBuf touch() -> touch
    1332:1332:io.netty.buffer.ByteBuf touch(java.lang.Object) -> touch
    1337:1337:int refCnt() -> refCnt
    1342:1342:boolean release() -> release
    1347:1347:boolean release(int) -> release
    41:41:io.netty.util.ReferenceCounted touch(java.lang.Object) -> touch
    41:41:io.netty.util.ReferenceCounted touch() -> touch
    41:41:io.netty.util.ReferenceCounted retain(int) -> retain
    41:41:io.netty.util.ReferenceCounted retain() -> retain
    41:41:int compareTo(java.lang.Object) -> compareTo
    76:76:void lambda$writeCollection$0(java.util.function.BiConsumer,java.lang.Object) -> a
net.minecraft.network.PacketDecoder -> kw:
    org.apache.logging.log4j.Logger LOGGER -> a
    org.apache.logging.log4j.Marker MARKER -> b
    net.minecraft.network.protocol.PacketFlow flow -> c
    22:24:void <init>(net.minecraft.network.protocol.PacketFlow) -> <init>
    28:50:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List) -> decode
    17:18:void <clinit>() -> <clinit>
net.minecraft.network.PacketEncoder -> kx:
    org.apache.logging.log4j.Logger LOGGER -> a
    org.apache.logging.log4j.Marker MARKER -> b
    net.minecraft.network.protocol.PacketFlow flow -> c
    21:23:void <init>(net.minecraft.network.protocol.PacketFlow) -> <init>
    27:55:void encode(io.netty.channel.ChannelHandlerContext,net.minecraft.network.protocol.Packet,io.netty.buffer.ByteBuf) -> a
    15:15:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf) -> encode
    16:17:void <clinit>() -> <clinit>
net.minecraft.network.PacketListener -> ky:
    void onDisconnect(net.minecraft.network.chat.Component) -> a
    net.minecraft.network.Connection getConnection() -> a
net.minecraft.network.SkipPacketException -> kz:
    7:8:void <init>(java.lang.Throwable) -> <init>
net.minecraft.network.Varint21FrameDecoder -> la:
    11:11:void <init>() -> <init>
    14:42:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List) -> decode
net.minecraft.network.Varint21LengthFieldPrepender -> lb:
    9:9:void <init>() -> <init>
    14:27:void encode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf) -> a
    8:8:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf) -> encode
net.minecraft.network.chat.BaseComponent -> lc:
    java.util.List siblings -> a
    net.minecraft.network.chat.Style style -> b
    10:11:void <init>() -> <init>
    16:18:net.minecraft.network.chat.Component append(net.minecraft.network.chat.Component) -> a
    23:23:java.util.List getSiblings() -> a
    28:34:net.minecraft.network.chat.Component setStyle(net.minecraft.network.chat.Style) -> a
    39:45:net.minecraft.network.chat.Style getStyle() -> b
    50:50:java.util.stream.Stream stream() -> c
    55:64:boolean equals(java.lang.Object) -> equals
    69:69:int hashCode() -> hashCode
    74:74:java.lang.String toString() -> toString
net.minecraft.network.chat.ChatType -> ld:
    net.minecraft.network.chat.ChatType CHAT -> a
    net.minecraft.network.chat.ChatType SYSTEM -> b
    net.minecraft.network.chat.ChatType GAME_INFO -> c
    byte index -> d
    boolean interrupt -> e
    net.minecraft.network.chat.ChatType[] $VALUES -> f
    3:3:net.minecraft.network.chat.ChatType[] values() -> values
    3:3:net.minecraft.network.chat.ChatType valueOf(java.lang.String) -> valueOf
    12:15:void <init>(java.lang.String,int,byte,boolean) -> <init>
    18:18:byte getIndex() -> a
    22:27:net.minecraft.network.chat.ChatType getForIndex(byte) -> a
    31:31:boolean shouldInterrupt() -> b
    3:6:void <clinit>() -> <clinit>
net.minecraft.network.chat.ClickEvent -> le:
    net.minecraft.network.chat.ClickEvent$Action action -> a
    java.lang.String value -> b
    11:14:void <init>(net.minecraft.network.chat.ClickEvent$Action,java.lang.String) -> <init>
    17:17:net.minecraft.network.chat.ClickEvent$Action getAction() -> a
    21:21:java.lang.String getValue() -> b
    26:42:boolean equals(java.lang.Object) -> equals
    47:47:java.lang.String toString() -> toString
    55:57:int hashCode() -> hashCode
net.minecraft.network.chat.ClickEvent$Action -> le$a:
    net.minecraft.network.chat.ClickEvent$Action OPEN_URL -> a
    net.minecraft.network.chat.ClickEvent$Action OPEN_FILE -> b
    net.minecraft.network.chat.ClickEvent$Action RUN_COMMAND -> c
    net.minecraft.network.chat.ClickEvent$Action SUGGEST_COMMAND -> d
    net.minecraft.network.chat.ClickEvent$Action CHANGE_PAGE -> e
    net.minecraft.network.chat.ClickEvent$Action COPY_TO_CLIPBOARD -> f
    java.util.Map LOOKUP -> g
    boolean allowFromServer -> h
    java.lang.String name -> i
    net.minecraft.network.chat.ClickEvent$Action[] $VALUES -> j
    60:60:net.minecraft.network.chat.ClickEvent$Action[] values() -> values
    60:60:net.minecraft.network.chat.ClickEvent$Action valueOf(java.lang.String) -> valueOf
    74:77:void <init>(java.lang.String,int,java.lang.String,boolean) -> <init>
    80:80:boolean isAllowedFromServer() -> a
    84:84:java.lang.String getName() -> b
    88:88:net.minecraft.network.chat.ClickEvent$Action getByName(java.lang.String) -> a
    69:69:net.minecraft.network.chat.ClickEvent$Action lambda$static$0(net.minecraft.network.chat.ClickEvent$Action) -> a
    60:69:void <clinit>() -> <clinit>
net.minecraft.network.chat.Component -> lf:
    net.minecraft.network.chat.Component setStyle(net.minecraft.network.chat.Style) -> a
    net.minecraft.network.chat.Style getStyle() -> b
    39:39:net.minecraft.network.chat.Component append(java.lang.String) -> a
    net.minecraft.network.chat.Component append(net.minecraft.network.chat.Component) -> a
    java.lang.String getContents() -> d
    48:54:java.lang.String getString() -> getString
    58:70:java.lang.String getString(int) -> a
    74:98:java.lang.String getColoredString() -> e
    java.util.List getSiblings() -> a
    java.util.stream.Stream stream() -> c
    106:106:java.util.stream.Stream flatStream() -> f
    111:111:java.util.Iterator iterator() -> iterator
    net.minecraft.network.chat.Component copy() -> g
    117:125:net.minecraft.network.chat.Component deepCopy() -> h
    129:130:net.minecraft.network.chat.Component withStyle(java.util.function.Consumer) -> a
    134:137:net.minecraft.network.chat.Component withStyle(net.minecraft.ChatFormatting[]) -> a
    141:166:net.minecraft.network.chat.Component withStyle(net.minecraft.ChatFormatting) -> a
    170:172:net.minecraft.network.chat.Component flattenStyle(net.minecraft.network.chat.Component) -> b
    51:51:void lambda$getString$0(java.lang.StringBuilder,net.minecraft.network.chat.Component) -> a
net.minecraft.network.chat.Component$1 -> lf$1:
    int[] $SwitchMap$net$minecraft$ChatFormatting -> a
    146:146:void <clinit>() -> <clinit>
net.minecraft.network.chat.Component$Serializer -> lf$a:
    com.google.gson.Gson GSON -> a
    java.lang.reflect.Field JSON_READER_POS -> b
    java.lang.reflect.Field JSON_READER_LINESTART -> c
    175:175:void <init>() -> <init>
    209:301:net.minecraft.network.chat.Component deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    306:314:void serializeStyle(net.minecraft.network.chat.Style,com.google.gson.JsonObject,com.google.gson.JsonSerializationContext) -> a
    318:386:com.google.gson.JsonElement serialize(net.minecraft.network.chat.Component,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    390:390:java.lang.String toJson(net.minecraft.network.chat.Component) -> a
    394:394:com.google.gson.JsonElement toJsonTree(net.minecraft.network.chat.Component) -> b
    399:399:net.minecraft.network.chat.Component fromJson(java.lang.String) -> a
    404:404:net.minecraft.network.chat.Component fromJson(com.google.gson.JsonElement) -> a
    409:409:net.minecraft.network.chat.Component fromJsonLenient(java.lang.String) -> b
    414:420:net.minecraft.network.chat.Component fromJson(com.mojang.brigadier.StringReader) -> a
    426:428:int getPos(com.google.gson.stream.JsonReader) -> a
    175:175:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    175:175:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
    198:203:java.lang.reflect.Field lambda$static$2() -> a
    187:192:java.lang.reflect.Field lambda$static$1() -> b
    177:182:com.google.gson.Gson lambda$static$0() -> c
    176:196:void <clinit>() -> <clinit>
net.minecraft.network.chat.ComponentUtils -> lg:
    16:16:void <init>() -> <init>
    18:26:net.minecraft.network.chat.Component mergeStyles(net.minecraft.network.chat.Component,net.minecraft.network.chat.Style) -> a
    30:43:net.minecraft.network.chat.Component updateForEntity(net.minecraft.commands.CommandSourceStack,net.minecraft.network.chat.Component,net.minecraft.world.entity.Entity,int) -> a
    47:52:net.minecraft.network.chat.Component getDisplayName(com.mojang.authlib.GameProfile) -> a
    57:57:net.minecraft.network.chat.Component formatList(java.util.Collection) -> a
    61:69:net.minecraft.network.chat.Component formatAndSortList(java.util.Collection,java.util.function.Function) -> a
    73:89:net.minecraft.network.chat.Component formatList(java.util.Collection,java.util.function.Function) -> b
    93:93:net.minecraft.network.chat.Component wrapInSquareBrackets(net.minecraft.network.chat.Component) -> a
    97:100:net.minecraft.network.chat.Component fromMessage(com.mojang.brigadier.Message) -> a
    57:57:net.minecraft.network.chat.Component lambda$formatList$0(java.lang.String) -> a
net.minecraft.network.chat.ContextAwareComponent -> lh:
    net.minecraft.network.chat.Component resolve(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.Entity,int) -> a
net.minecraft.network.chat.HoverEvent -> li:
    net.minecraft.network.chat.HoverEvent$Action action -> a
    net.minecraft.network.chat.Component value -> b
    11:14:void <init>(net.minecraft.network.chat.HoverEvent$Action,net.minecraft.network.chat.Component) -> <init>
    17:17:net.minecraft.network.chat.HoverEvent$Action getAction() -> a
    21:21:net.minecraft.network.chat.Component getValue() -> b
    26:42:boolean equals(java.lang.Object) -> equals
    47:47:java.lang.String toString() -> toString
    55:57:int hashCode() -> hashCode
net.minecraft.network.chat.HoverEvent$Action -> li$a:
    net.minecraft.network.chat.HoverEvent$Action SHOW_TEXT -> a
    net.minecraft.network.chat.HoverEvent$Action SHOW_ITEM -> b
    net.minecraft.network.chat.HoverEvent$Action SHOW_ENTITY -> c
    java.util.Map LOOKUP -> d
    boolean allowFromServer -> e
    java.lang.String name -> f
    net.minecraft.network.chat.HoverEvent$Action[] $VALUES -> g
    60:60:net.minecraft.network.chat.HoverEvent$Action[] values() -> values
    60:60:net.minecraft.network.chat.HoverEvent$Action valueOf(java.lang.String) -> valueOf
    71:74:void <init>(java.lang.String,int,java.lang.String,boolean) -> <init>
    77:77:boolean isAllowedFromServer() -> a
    81:81:java.lang.String getName() -> b
    85:85:net.minecraft.network.chat.HoverEvent$Action getByName(java.lang.String) -> a
    66:66:net.minecraft.network.chat.HoverEvent$Action lambda$static$0(net.minecraft.network.chat.HoverEvent$Action) -> a
    60:66:void <clinit>() -> <clinit>
net.minecraft.network.chat.KeybindComponent -> lj:
    java.util.function.Function keyResolver -> b
    java.lang.String name -> c
    java.util.function.Supplier nameResolver -> d
    12:14:void <init>(java.lang.String) -> <init>
    18:21:java.lang.String getContents() -> d
    26:26:net.minecraft.network.chat.KeybindComponent copy() -> i
    31:40:boolean equals(java.lang.Object) -> equals
    45:48:java.lang.String toString() -> toString
    53:53:java.lang.String getName() -> j
    6:6:net.minecraft.network.chat.Component copy() -> g
    7:7:java.util.function.Supplier lambda$static$1(java.lang.String) -> b
    7:7:java.lang.String lambda$null$0(java.lang.String) -> c
    7:7:void <clinit>() -> <clinit>
net.minecraft.network.chat.NbtComponent -> lk:
    org.apache.logging.log4j.Logger LOGGER -> e
    boolean interpreting -> b
    java.lang.String nbtPathPattern -> c
    net.minecraft.commands.arguments.NbtPathArgument$NbtPath compiledNbtPath -> d
    252:254:net.minecraft.commands.arguments.NbtPathArgument$NbtPath compileNbtPath(java.lang.String) -> b
    259:260:void <init>(java.lang.String,boolean) -> <init>
    262:266:void <init>(java.lang.String,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,boolean) -> <init>
    java.util.stream.Stream getData(net.minecraft.commands.CommandSourceStack) -> a
    272:272:java.lang.String getContents() -> d
    276:276:java.lang.String getNbtPath() -> i
    280:280:boolean isInterpreting() -> j
    285:311:net.minecraft.network.chat.Component resolve(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.Entity,int) -> a
    308:308:net.minecraft.network.chat.Component lambda$resolve$2(net.minecraft.network.chat.Component,net.minecraft.network.chat.Component) -> a
    301:305:java.util.stream.Stream lambda$resolve$1(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.Entity,int,java.lang.String) -> a
    291:293:java.util.stream.Stream lambda$resolve$0(net.minecraft.nbt.CompoundTag) -> a
    29:29:void <clinit>() -> <clinit>
net.minecraft.network.chat.NbtComponent$BlockNbtComponent -> lk$a:
    java.lang.String posPattern -> e
    net.minecraft.commands.arguments.coordinates.Coordinates compiledPos -> f
    113:116:void <init>(java.lang.String,boolean,java.lang.String) -> <init>
    121:123:net.minecraft.commands.arguments.coordinates.Coordinates compilePos(java.lang.String) -> b
    128:131:void <init>(java.lang.String,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,boolean,java.lang.String,net.minecraft.commands.arguments.coordinates.Coordinates) -> <init>
    135:135:java.lang.String getPos() -> k
    140:140:net.minecraft.network.chat.Component copy() -> g
    145:157:java.util.stream.Stream getData(net.minecraft.commands.CommandSourceStack) -> a
    162:173:boolean equals(java.lang.Object) -> equals
    178:182:java.lang.String toString() -> toString
net.minecraft.network.chat.NbtComponent$EntityNbtComponent -> lk$b:
    java.lang.String selectorPattern -> e
    net.minecraft.commands.arguments.selector.EntitySelector compiledSelector -> f
    39:42:void <init>(java.lang.String,boolean,java.lang.String) -> <init>
    47:50:net.minecraft.commands.arguments.selector.EntitySelector compileSelector(java.lang.String) -> b
    55:58:void <init>(java.lang.String,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,boolean,java.lang.String,net.minecraft.commands.arguments.selector.EntitySelector) -> <init>
    61:61:java.lang.String getSelector() -> k
    66:66:net.minecraft.network.chat.Component copy() -> g
    71:76:java.util.stream.Stream getData(net.minecraft.commands.CommandSourceStack) -> a
    81:92:boolean equals(java.lang.Object) -> equals
    97:101:java.lang.String toString() -> toString
net.minecraft.network.chat.NbtComponent$StorageNbtComponent -> lk$c:
    net.minecraft.resources.ResourceLocation id -> e
    191:193:void <init>(java.lang.String,boolean,net.minecraft.resources.ResourceLocation) -> <init>
    196:198:void <init>(java.lang.String,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,boolean,net.minecraft.resources.ResourceLocation) -> <init>
    201:201:net.minecraft.resources.ResourceLocation getId() -> k
    206:206:net.minecraft.network.chat.Component copy() -> g
    211:212:java.util.stream.Stream getData(net.minecraft.commands.CommandSourceStack) -> a
    217:228:boolean equals(java.lang.Object) -> equals
    233:237:java.lang.String toString() -> toString
net.minecraft.network.chat.ScoreComponent -> ll:
    java.lang.String name -> b
    net.minecraft.commands.arguments.selector.EntitySelector selector -> c
    java.lang.String objective -> d
    java.lang.String value -> e
    26:39:void <init>(java.lang.String,java.lang.String) -> <init>
    42:42:java.lang.String getName() -> i
    47:55:java.lang.String getEntityName(net.minecraft.commands.CommandSourceStack) -> a
    61:61:net.minecraft.commands.arguments.selector.EntitySelector getSelector() -> j
    65:65:java.lang.String getObjective() -> k
    69:70:void setValue(java.lang.String) -> b
    74:74:java.lang.String getContents() -> d
    78:89:void resolve(net.minecraft.commands.CommandSourceStack) -> b
    93:95:net.minecraft.network.chat.ScoreComponent copy() -> l
    100:121:net.minecraft.network.chat.Component resolve(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.Entity,int) -> a
    126:135:boolean equals(java.lang.Object) -> equals
    140:144:java.lang.String toString() -> toString
    19:19:net.minecraft.network.chat.Component copy() -> g
net.minecraft.network.chat.SelectorComponent -> lm:
    org.apache.logging.log4j.Logger LOGGER -> b
    java.lang.String pattern -> c
    net.minecraft.commands.arguments.selector.EntitySelector selector -> d
    21:32:void <init>(java.lang.String) -> <init>
    35:35:java.lang.String getPattern() -> i
    40:40:net.minecraft.commands.arguments.selector.EntitySelector getSelector() -> j
    45:48:net.minecraft.network.chat.Component resolve(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.Entity,int) -> a
    54:54:java.lang.String getContents() -> d
    59:59:net.minecraft.network.chat.SelectorComponent copy() -> k
    64:73:boolean equals(java.lang.Object) -> equals
    78:81:java.lang.String toString() -> toString
    14:14:net.minecraft.network.chat.Component copy() -> g
    15:15:void <clinit>() -> <clinit>
net.minecraft.network.chat.Style -> ln:
    net.minecraft.network.chat.Style parent -> a
    net.minecraft.ChatFormatting color -> b
    java.lang.Boolean bold -> c
    java.lang.Boolean italic -> d
    java.lang.Boolean underlined -> e
    java.lang.Boolean strikethrough -> f
    java.lang.Boolean obfuscated -> g
    net.minecraft.network.chat.ClickEvent clickEvent -> h
    net.minecraft.network.chat.HoverEvent hoverEvent -> i
    java.lang.String insertion -> j
    net.minecraft.network.chat.Style ROOT -> k
    18:18:void <init>() -> <init>
    33:33:net.minecraft.ChatFormatting getColor() -> a
    37:37:boolean isBold() -> b
    41:41:boolean isItalic() -> c
    45:45:boolean isStrikethrough() -> d
    49:49:boolean isUnderlined() -> e
    53:53:boolean isObfuscated() -> f
    57:57:boolean isEmpty() -> g
    62:62:net.minecraft.network.chat.ClickEvent getClickEvent() -> h
    67:67:net.minecraft.network.chat.HoverEvent getHoverEvent() -> i
    72:72:java.lang.String getInsertion() -> j
    76:77:net.minecraft.network.chat.Style setColor(net.minecraft.ChatFormatting) -> a
    81:82:net.minecraft.network.chat.Style setBold(java.lang.Boolean) -> a
    86:87:net.minecraft.network.chat.Style setItalic(java.lang.Boolean) -> b
    91:92:net.minecraft.network.chat.Style setStrikethrough(java.lang.Boolean) -> c
    96:97:net.minecraft.network.chat.Style setUnderlined(java.lang.Boolean) -> d
    101:102:net.minecraft.network.chat.Style setObfuscated(java.lang.Boolean) -> e
    106:107:net.minecraft.network.chat.Style setClickEvent(net.minecraft.network.chat.ClickEvent) -> a
    111:112:net.minecraft.network.chat.Style setHoverEvent(net.minecraft.network.chat.HoverEvent) -> a
    116:117:net.minecraft.network.chat.Style setInsertion(java.lang.String) -> a
    121:122:net.minecraft.network.chat.Style inheritFrom(net.minecraft.network.chat.Style) -> a
    126:156:java.lang.String getLegacyFormatCodes() -> k
    160:160:net.minecraft.network.chat.Style getParent() -> o
    165:174:java.lang.String toStringResolved() -> l
    180:189:java.lang.String toString() -> toString
    195:212:boolean equals(java.lang.Object) -> equals
    217:217:int hashCode() -> hashCode
    337:348:net.minecraft.network.chat.Style copy() -> m
    352:364:net.minecraft.network.chat.Style flatCopy() -> n
    18:18:java.lang.Boolean access$002(net.minecraft.network.chat.Style,java.lang.Boolean) -> a
    18:18:java.lang.Boolean access$102(net.minecraft.network.chat.Style,java.lang.Boolean) -> b
    18:18:java.lang.Boolean access$202(net.minecraft.network.chat.Style,java.lang.Boolean) -> c
    18:18:java.lang.Boolean access$302(net.minecraft.network.chat.Style,java.lang.Boolean) -> d
    18:18:java.lang.Boolean access$402(net.minecraft.network.chat.Style,java.lang.Boolean) -> e
    18:18:net.minecraft.ChatFormatting access$502(net.minecraft.network.chat.Style,net.minecraft.ChatFormatting) -> a
    18:18:java.lang.String access$602(net.minecraft.network.chat.Style,java.lang.String) -> a
    18:18:net.minecraft.network.chat.ClickEvent access$702(net.minecraft.network.chat.Style,net.minecraft.network.chat.ClickEvent) -> a
    18:18:net.minecraft.network.chat.HoverEvent access$802(net.minecraft.network.chat.Style,net.minecraft.network.chat.HoverEvent) -> a
    18:18:java.lang.Boolean access$000(net.minecraft.network.chat.Style) -> b
    18:18:java.lang.Boolean access$100(net.minecraft.network.chat.Style) -> c
    18:18:java.lang.Boolean access$200(net.minecraft.network.chat.Style) -> d
    18:18:java.lang.Boolean access$300(net.minecraft.network.chat.Style) -> e
    18:18:java.lang.Boolean access$400(net.minecraft.network.chat.Style) -> f
    18:18:net.minecraft.ChatFormatting access$500(net.minecraft.network.chat.Style) -> g
    18:18:java.lang.String access$600(net.minecraft.network.chat.Style) -> h
    18:18:net.minecraft.network.chat.ClickEvent access$700(net.minecraft.network.chat.Style) -> i
    18:18:net.minecraft.network.chat.HoverEvent access$800(net.minecraft.network.chat.Style) -> j
    220:220:void <clinit>() -> <clinit>
net.minecraft.network.chat.Style$1 -> ln$1:
    220:220:void <init>() -> <init>
    224:224:net.minecraft.ChatFormatting getColor() -> a
    229:229:boolean isBold() -> b
    234:234:boolean isItalic() -> c
    239:239:boolean isStrikethrough() -> d
    244:244:boolean isUnderlined() -> e
    249:249:boolean isObfuscated() -> f
    255:255:net.minecraft.network.chat.ClickEvent getClickEvent() -> h
    261:261:net.minecraft.network.chat.HoverEvent getHoverEvent() -> i
    267:267:java.lang.String getInsertion() -> j
    272:272:net.minecraft.network.chat.Style setColor(net.minecraft.ChatFormatting) -> a
    277:277:net.minecraft.network.chat.Style setBold(java.lang.Boolean) -> a
    282:282:net.minecraft.network.chat.Style setItalic(java.lang.Boolean) -> b
    287:287:net.minecraft.network.chat.Style setStrikethrough(java.lang.Boolean) -> c
    292:292:net.minecraft.network.chat.Style setUnderlined(java.lang.Boolean) -> d
    297:297:net.minecraft.network.chat.Style setObfuscated(java.lang.Boolean) -> e
    302:302:net.minecraft.network.chat.Style setClickEvent(net.minecraft.network.chat.ClickEvent) -> a
    307:307:net.minecraft.network.chat.Style setHoverEvent(net.minecraft.network.chat.HoverEvent) -> a
    312:312:net.minecraft.network.chat.Style inheritFrom(net.minecraft.network.chat.Style) -> a
    317:317:java.lang.String toString() -> toString
    322:322:net.minecraft.network.chat.Style copy() -> m
    327:327:net.minecraft.network.chat.Style flatCopy() -> n
    332:332:java.lang.String getLegacyFormatCodes() -> k
net.minecraft.network.chat.Style$Serializer -> ln$a:
    367:367:void <init>() -> <init>
    371:426:net.minecraft.network.chat.Style deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    432:473:com.google.gson.JsonElement serialize(net.minecraft.network.chat.Style,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    367:367:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    367:367:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.network.chat.TextComponent -> lo:
    java.lang.String text -> b
    6:8:void <init>(java.lang.String) -> <init>
    11:11:java.lang.String getText() -> i
    16:16:java.lang.String getContents() -> d
    21:21:net.minecraft.network.chat.TextComponent copy() -> j
    26:35:boolean equals(java.lang.Object) -> equals
    40:43:java.lang.String toString() -> toString
    3:3:net.minecraft.network.chat.Component copy() -> g
net.minecraft.network.chat.TranslatableComponent -> lp:
    net.minecraft.locale.Language DEFAULT_LANGUAGE -> d
    net.minecraft.locale.Language LANGUAGE -> e
    java.lang.String key -> f
    java.lang.Object[] args -> g
    java.lang.Object decomposeLock -> h
    long decomposedLanguageTime -> i
    java.util.List decomposedParts -> b
    java.util.regex.Pattern FORMAT_PATTERN -> c
    27:48:void <init>(java.lang.String,java.lang.Object[]) -> <init>
    52:68:void decompose() -> i
    71:118:void decomposeTemplate(java.lang.String) -> b
    121:135:net.minecraft.network.chat.Component getComponent(int) -> b
    140:154:net.minecraft.network.chat.Component setStyle(net.minecraft.network.chat.Style) -> a
    159:161:java.util.stream.Stream stream() -> c
    166:174:java.lang.String getContents() -> d
    179:189:net.minecraft.network.chat.TranslatableComponent copy() -> j
    194:204:net.minecraft.network.chat.Component resolve(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.Entity,int) -> a
    209:218:boolean equals(java.lang.Object) -> equals
    223:226:int hashCode() -> hashCode
    231:235:java.lang.String toString() -> toString
    240:240:java.lang.String getKey() -> k
    244:244:java.lang.Object[] getArgs() -> l
    19:19:net.minecraft.network.chat.Component copy() -> g
    20:32:void <clinit>() -> <clinit>
net.minecraft.network.chat.TranslatableFormatException -> lq:
    5:6:void <init>(net.minecraft.network.chat.TranslatableComponent,java.lang.String) -> <init>
    9:10:void <init>(net.minecraft.network.chat.TranslatableComponent,int) -> <init>
    13:14:void <init>(net.minecraft.network.chat.TranslatableComponent,java.lang.Throwable) -> <init>
net.minecraft.network.chat.package-info -> lr:
net.minecraft.network.package-info -> ls:
net.minecraft.network.protocol.Packet -> lt:
    void read(net.minecraft.network.FriendlyByteBuf) -> a
    void write(net.minecraft.network.FriendlyByteBuf) -> b
    void handle(net.minecraft.network.PacketListener) -> a
    16:16:boolean isSkippable() -> a
net.minecraft.network.protocol.PacketFlow -> lu:
    net.minecraft.network.protocol.PacketFlow SERVERBOUND -> a
    net.minecraft.network.protocol.PacketFlow CLIENTBOUND -> b
    net.minecraft.network.protocol.PacketFlow[] $VALUES -> c
    3:3:net.minecraft.network.protocol.PacketFlow[] values() -> values
    3:3:net.minecraft.network.protocol.PacketFlow valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    9:9:net.minecraft.network.protocol.PacketFlow getOpposite() -> a
    3:5:void <clinit>() -> <clinit>
net.minecraft.network.protocol.PacketUtils -> lv:
    org.apache.logging.log4j.Logger LOGGER -> a
    10:10:void <init>() -> <init>
    14:15:void ensureRunningOnSameThread(net.minecraft.network.protocol.Packet,net.minecraft.network.PacketListener,net.minecraft.server.level.ServerLevel) -> a
    18:28:void ensureRunningOnSameThread(net.minecraft.network.protocol.Packet,net.minecraft.network.PacketListener,net.minecraft.util.thread.BlockableEventLoop) -> a
    20:25:void lambda$ensureRunningOnSameThread$0(net.minecraft.network.PacketListener,net.minecraft.network.protocol.Packet) -> a
    11:11:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientGamePacketListener -> lw:
    void handleAddEntity(net.minecraft.network.protocol.game.ClientboundAddEntityPacket) -> a
    void handleAddExperienceOrb(net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket) -> a
    void handleAddGlobalEntity(net.minecraft.network.protocol.game.ClientboundAddGlobalEntityPacket) -> a
    void handleAddMob(net.minecraft.network.protocol.game.ClientboundAddMobPacket) -> a
    void handleAddObjective(net.minecraft.network.protocol.game.ClientboundSetObjectivePacket) -> a
    void handleAddPainting(net.minecraft.network.protocol.game.ClientboundAddPaintingPacket) -> a
    void handleAddPlayer(net.minecraft.network.protocol.game.ClientboundAddPlayerPacket) -> a
    void handleAnimate(net.minecraft.network.protocol.game.ClientboundAnimatePacket) -> a
    void handleAwardStats(net.minecraft.network.protocol.game.ClientboundAwardStatsPacket) -> a
    void handleAddOrRemoveRecipes(net.minecraft.network.protocol.game.ClientboundRecipePacket) -> a
    void handleBlockDestruction(net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket) -> a
    void handleOpenSignEditor(net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket) -> a
    void handleBlockEntityData(net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket) -> a
    void handleBlockEvent(net.minecraft.network.protocol.game.ClientboundBlockEventPacket) -> a
    void handleBlockUpdate(net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket) -> a
    void handleChat(net.minecraft.network.protocol.game.ClientboundChatPacket) -> a
    void handleChunkBlocksUpdate(net.minecraft.network.protocol.game.ClientboundChunkBlocksUpdatePacket) -> a
    void handleMapItemData(net.minecraft.network.protocol.game.ClientboundMapItemDataPacket) -> a
    void handleContainerAck(net.minecraft.network.protocol.game.ClientboundContainerAckPacket) -> a
    void handleContainerClose(net.minecraft.network.protocol.game.ClientboundContainerClosePacket) -> a
    void handleContainerContent(net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket) -> a
    void handleHorseScreenOpen(net.minecraft.network.protocol.game.ClientboundHorseScreenOpenPacket) -> a
    void handleContainerSetData(net.minecraft.network.protocol.game.ClientboundContainerSetDataPacket) -> a
    void handleContainerSetSlot(net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket) -> a
    void handleCustomPayload(net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket) -> a
    void handleDisconnect(net.minecraft.network.protocol.game.ClientboundDisconnectPacket) -> a
    void handleEntityEvent(net.minecraft.network.protocol.game.ClientboundEntityEventPacket) -> a
    void handleEntityLinkPacket(net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket) -> a
    void handleSetEntityPassengersPacket(net.minecraft.network.protocol.game.ClientboundSetPassengersPacket) -> a
    void handleExplosion(net.minecraft.network.protocol.game.ClientboundExplodePacket) -> a
    void handleGameEvent(net.minecraft.network.protocol.game.ClientboundGameEventPacket) -> a
    void handleKeepAlive(net.minecraft.network.protocol.game.ClientboundKeepAlivePacket) -> a
    void handleLevelChunk(net.minecraft.network.protocol.game.ClientboundLevelChunkPacket) -> a
    void handleForgetLevelChunk(net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket) -> a
    void handleLevelEvent(net.minecraft.network.protocol.game.ClientboundLevelEventPacket) -> a
    void handleLogin(net.minecraft.network.protocol.game.ClientboundLoginPacket) -> a
    void handleMoveEntity(net.minecraft.network.protocol.game.ClientboundMoveEntityPacket) -> a
    void handleMovePlayer(net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket) -> a
    void handleParticleEvent(net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket) -> a
    void handlePlayerAbilities(net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket) -> a
    void handlePlayerInfo(net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket) -> a
    void handleRemoveEntity(net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket) -> a
    void handleRemoveMobEffect(net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket) -> a
    void handleRespawn(net.minecraft.network.protocol.game.ClientboundRespawnPacket) -> a
    void handleRotateMob(net.minecraft.network.protocol.game.ClientboundRotateHeadPacket) -> a
    void handleSetCarriedItem(net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket) -> a
    void handleSetDisplayObjective(net.minecraft.network.protocol.game.ClientboundSetDisplayObjectivePacket) -> a
    void handleSetEntityData(net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket) -> a
    void handleSetEntityMotion(net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket) -> a
    void handleSetEquippedItem(net.minecraft.network.protocol.game.ClientboundSetEquippedItemPacket) -> a
    void handleSetExperience(net.minecraft.network.protocol.game.ClientboundSetExperiencePacket) -> a
    void handleSetHealth(net.minecraft.network.protocol.game.ClientboundSetHealthPacket) -> a
    void handleSetPlayerTeamPacket(net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket) -> a
    void handleSetScore(net.minecraft.network.protocol.game.ClientboundSetScorePacket) -> a
    void handleSetSpawn(net.minecraft.network.protocol.game.ClientboundSetSpawnPositionPacket) -> a
    void handleSetTime(net.minecraft.network.protocol.game.ClientboundSetTimePacket) -> a
    void handleSoundEvent(net.minecraft.network.protocol.game.ClientboundSoundPacket) -> a
    void handleSoundEntityEvent(net.minecraft.network.protocol.game.ClientboundSoundEntityPacket) -> a
    void handleCustomSoundEvent(net.minecraft.network.protocol.game.ClientboundCustomSoundPacket) -> a
    void handleTakeItemEntity(net.minecraft.network.protocol.game.ClientboundTakeItemEntityPacket) -> a
    void handleTeleportEntity(net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket) -> a
    void handleUpdateAttributes(net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket) -> a
    void handleUpdateMobEffect(net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket) -> a
    void handleUpdateTags(net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket) -> a
    void handlePlayerCombat(net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket) -> a
    void handleChangeDifficulty(net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket) -> a
    void handleSetCamera(net.minecraft.network.protocol.game.ClientboundSetCameraPacket) -> a
    void handleSetBorder(net.minecraft.network.protocol.game.ClientboundSetBorderPacket) -> a
    void handleSetTitles(net.minecraft.network.protocol.game.ClientboundSetTitlesPacket) -> a
    void handleTabListCustomisation(net.minecraft.network.protocol.game.ClientboundTabListPacket) -> a
    void handleResourcePack(net.minecraft.network.protocol.game.ClientboundResourcePackPacket) -> a
    void handleBossUpdate(net.minecraft.network.protocol.game.ClientboundBossEventPacket) -> a
    void handleItemCooldown(net.minecraft.network.protocol.game.ClientboundCooldownPacket) -> a
    void handleMoveVehicle(net.minecraft.network.protocol.game.ClientboundMoveVehiclePacket) -> a
    void handleUpdateAdvancementsPacket(net.minecraft.network.protocol.game.ClientboundUpdateAdvancementsPacket) -> a
    void handleSelectAdvancementsTab(net.minecraft.network.protocol.game.ClientboundSelectAdvancementsTabPacket) -> a
    void handlePlaceRecipe(net.minecraft.network.protocol.game.ClientboundPlaceGhostRecipePacket) -> a
    void handleCommands(net.minecraft.network.protocol.game.ClientboundCommandsPacket) -> a
    void handleStopSoundEvent(net.minecraft.network.protocol.game.ClientboundStopSoundPacket) -> a
    void handleCommandSuggestions(net.minecraft.network.protocol.game.ClientboundCommandSuggestionsPacket) -> a
    void handleUpdateRecipes(net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket) -> a
    void handleLookAt(net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket) -> a
    void handleTagQueryPacket(net.minecraft.network.protocol.game.ClientboundTagQueryPacket) -> a
    void handleLightUpdatePacked(net.minecraft.network.protocol.game.ClientboundLightUpdatePacket) -> a
    void handleOpenBook(net.minecraft.network.protocol.game.ClientboundOpenBookPacket) -> a
    void handleOpenScreen(net.minecraft.network.protocol.game.ClientboundOpenScreenPacket) -> a
    void handleMerchantOffers(net.minecraft.network.protocol.game.ClientboundMerchantOffersPacket) -> a
    void handleSetChunkCacheRadius(net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket) -> a
    void handleSetChunkCacheCenter(net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket) -> a
    void handleBlockBreakAck(net.minecraft.network.protocol.game.ClientboundBlockBreakAckPacket) -> a
net.minecraft.network.protocol.game.ClientboundAddEntityPacket -> lx:
    int id -> a
    java.util.UUID uuid -> b
    double x -> c
    double y -> d
    double z -> e
    int xa -> f
    int ya -> g
    int za -> h
    int xRot -> i
    int yRot -> j
    net.minecraft.world.entity.EntityType type -> k
    int data -> l
    31:32:void <init>() -> <init>
    34:48:void <init>(int,java.util.UUID,double,double,double,float,float,net.minecraft.world.entity.EntityType,int,net.minecraft.world.phys.Vec3) -> <init>
    51:52:void <init>(net.minecraft.world.entity.Entity) -> <init>
    55:56:void <init>(net.minecraft.world.entity.Entity,int) -> <init>
    59:60:void <init>(net.minecraft.world.entity.Entity,net.minecraft.world.entity.EntityType,int,net.minecraft.core.BlockPos) -> <init>
    64:77:void read(net.minecraft.network.FriendlyByteBuf) -> a
    81:94:void write(net.minecraft.network.FriendlyByteBuf) -> b
    98:99:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    102:102:int getId() -> b
    106:106:java.util.UUID getUUID() -> c
    110:110:double getX() -> d
    114:114:double getY() -> e
    118:118:double getZ() -> f
    122:122:double getXa() -> g
    126:126:double getYa() -> h
    130:130:double getZa() -> i
    134:134:int getxRot() -> j
    138:138:int getyRot() -> k
    142:142:net.minecraft.world.entity.EntityType getType() -> l
    146:146:int getData() -> m
    15:15:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket -> ly:
    int id -> a
    double x -> b
    double y -> c
    double z -> d
    int value -> e
    17:18:void <init>() -> <init>
    20:26:void <init>(net.minecraft.world.entity.ExperienceOrb) -> <init>
    30:35:void read(net.minecraft.network.FriendlyByteBuf) -> a
    39:44:void write(net.minecraft.network.FriendlyByteBuf) -> b
    48:49:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    52:52:int getId() -> b
    56:56:double getX() -> c
    60:60:double getY() -> d
    64:64:double getZ() -> e
    68:68:int getValue() -> f
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAddGlobalEntityPacket -> lz:
    int id -> a
    double x -> b
    double y -> c
    double z -> d
    int type -> e
    20:21:void <init>() -> <init>
    23:31:void <init>(net.minecraft.world.entity.Entity) -> <init>
    35:40:void read(net.minecraft.network.FriendlyByteBuf) -> a
    44:49:void write(net.minecraft.network.FriendlyByteBuf) -> b
    53:54:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    57:57:int getId() -> b
    61:61:double getX() -> c
    65:65:double getY() -> d
    69:69:double getZ() -> e
    73:73:int getType() -> f
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAddMobPacket -> ma:
    int id -> a
    java.util.UUID uuid -> b
    int type -> c
    double x -> d
    double y -> e
    double z -> f
    int xd -> g
    int yd -> h
    int zd -> i
    byte yRot -> j
    byte xRot -> k
    byte yHeadRot -> l
    28:29:void <init>() -> <init>
    31:54:void <init>(net.minecraft.world.entity.LivingEntity) -> <init>
    58:70:void read(net.minecraft.network.FriendlyByteBuf) -> a
    74:86:void write(net.minecraft.network.FriendlyByteBuf) -> b
    90:91:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    94:94:int getId() -> b
    98:98:java.util.UUID getUUID() -> c
    102:102:int getType() -> d
    106:106:double getX() -> e
    110:110:double getY() -> f
    114:114:double getZ() -> g
    118:118:int getXd() -> h
    122:122:int getYd() -> i
    126:126:int getZd() -> j
    130:130:byte getyRot() -> k
    134:134:byte getxRot() -> l
    138:138:byte getyHeadRot() -> m
    14:14:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAddPaintingPacket -> mb:
    int id -> a
    java.util.UUID uuid -> b
    net.minecraft.core.BlockPos pos -> c
    net.minecraft.core.Direction direction -> d
    int motive -> e
    22:23:void <init>() -> <init>
    25:31:void <init>(net.minecraft.world.entity.decoration.Painting) -> <init>
    35:40:void read(net.minecraft.network.FriendlyByteBuf) -> a
    44:49:void write(net.minecraft.network.FriendlyByteBuf) -> b
    53:54:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    57:57:int getId() -> b
    61:61:java.util.UUID getUUID() -> c
    65:65:net.minecraft.core.BlockPos getPos() -> d
    69:69:net.minecraft.core.Direction getDirection() -> e
    73:73:net.minecraft.world.entity.decoration.Motive getMotive() -> f
    15:15:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAddPlayerPacket -> mc:
    int entityId -> a
    java.util.UUID playerId -> b
    double x -> c
    double y -> d
    double z -> e
    byte yRot -> f
    byte xRot -> g
    20:21:void <init>() -> <init>
    23:31:void <init>(net.minecraft.world.entity.player.Player) -> <init>
    35:42:void read(net.minecraft.network.FriendlyByteBuf) -> a
    46:53:void write(net.minecraft.network.FriendlyByteBuf) -> b
    57:58:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    61:61:int getEntityId() -> b
    65:65:java.util.UUID getPlayerId() -> c
    69:69:double getX() -> d
    73:73:double getY() -> e
    77:77:double getZ() -> f
    81:81:byte getyRot() -> g
    85:85:byte getxRot() -> h
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAnimatePacket -> md:
    int id -> a
    int action -> b
    21:22:void <init>() -> <init>
    24:27:void <init>(net.minecraft.world.entity.Entity,int) -> <init>
    31:33:void read(net.minecraft.network.FriendlyByteBuf) -> a
    37:39:void write(net.minecraft.network.FriendlyByteBuf) -> b
    43:44:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    47:47:int getId() -> b
    51:51:int getAction() -> c
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundAwardStatsPacket -> me:
    it.unimi.dsi.fastutil.objects.Object2IntMap stats -> a
    17:18:void <init>() -> <init>
    20:22:void <init>(it.unimi.dsi.fastutil.objects.Object2IntMap) -> <init>
    26:27:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    33:39:void read(net.minecraft.network.FriendlyByteBuf) -> a
    43:46:void readStat(net.minecraft.stats.StatType,net.minecraft.network.FriendlyByteBuf) -> a
    50:57:void write(net.minecraft.network.FriendlyByteBuf) -> b
    60:60:int getId(net.minecraft.stats.Stat) -> a
    64:64:java.util.Map getStats() -> b
    14:14:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBlockBreakAckPacket -> mf:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.core.BlockPos pos -> c
    net.minecraft.world.level.block.state.BlockState state -> d
    net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action action -> a
    boolean allGood -> e
    22:24:void <init>() -> <init>
    26:34:void <init>(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action,boolean,java.lang.String) -> <init>
    38:42:void read(net.minecraft.network.FriendlyByteBuf) -> a
    46:50:void write(net.minecraft.network.FriendlyByteBuf) -> b
    54:55:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    58:58:net.minecraft.world.level.block.state.BlockState getState() -> b
    62:62:net.minecraft.core.BlockPos getPos() -> c
    66:66:boolean allGood() -> d
    70:70:net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action action() -> e
    14:14:void handle(net.minecraft.network.PacketListener) -> a
    15:15:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket -> mg:
    int id -> a
    net.minecraft.core.BlockPos pos -> b
    int progress -> c
    14:15:void <init>() -> <init>
    17:21:void <init>(int,net.minecraft.core.BlockPos,int) -> <init>
    25:28:void read(net.minecraft.network.FriendlyByteBuf) -> a
    32:35:void write(net.minecraft.network.FriendlyByteBuf) -> b
    39:40:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    43:43:int getId() -> b
    47:47:net.minecraft.core.BlockPos getPos() -> c
    51:51:int getProgress() -> d
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket -> mh:
    net.minecraft.core.BlockPos pos -> a
    int type -> b
    net.minecraft.nbt.CompoundTag tag -> c
    30:31:void <init>() -> <init>
    33:37:void <init>(net.minecraft.core.BlockPos,int,net.minecraft.nbt.CompoundTag) -> <init>
    41:44:void read(net.minecraft.network.FriendlyByteBuf) -> a
    48:51:void write(net.minecraft.network.FriendlyByteBuf) -> b
    55:56:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    59:59:net.minecraft.core.BlockPos getPos() -> b
    63:63:int getType() -> c
    67:67:net.minecraft.nbt.CompoundTag getTag() -> d
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBlockEventPacket -> mi:
    net.minecraft.core.BlockPos pos -> a
    int b0 -> b
    int b1 -> c
    net.minecraft.world.level.block.Block block -> d
    17:18:void <init>() -> <init>
    20:25:void <init>(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,int,int) -> <init>
    29:34:void read(net.minecraft.network.FriendlyByteBuf) -> a
    38:42:void write(net.minecraft.network.FriendlyByteBuf) -> b
    46:47:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    50:50:net.minecraft.core.BlockPos getPos() -> b
    54:54:int getB0() -> c
    58:58:int getB1() -> d
    62:62:net.minecraft.world.level.block.Block getBlock() -> e
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket -> mj:
    net.minecraft.core.BlockPos pos -> a
    net.minecraft.world.level.block.state.BlockState blockState -> b
    17:18:void <init>() -> <init>
    20:23:void <init>(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> <init>
    27:29:void read(net.minecraft.network.FriendlyByteBuf) -> a
    33:35:void write(net.minecraft.network.FriendlyByteBuf) -> b
    39:40:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    43:43:net.minecraft.world.level.block.state.BlockState getBlockState() -> b
    47:47:net.minecraft.core.BlockPos getPos() -> c
    13:13:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBossEventPacket -> mk:
    java.util.UUID id -> a
    net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation operation -> b
    net.minecraft.network.chat.Component name -> c
    float pct -> d
    net.minecraft.world.BossEvent$BossBarColor color -> e
    net.minecraft.world.BossEvent$BossBarOverlay overlay -> f
    boolean darkenScreen -> g
    boolean playMusic -> h
    boolean createWorldFog -> i
    26:27:void <init>() -> <init>
    29:39:void <init>(net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation,net.minecraft.world.BossEvent) -> <init>
    43:70:void read(net.minecraft.network.FriendlyByteBuf) -> a
    73:76:void decodeProperties(int) -> a
    80:107:void write(net.minecraft.network.FriendlyByteBuf) -> b
    110:120:int encodeProperties() -> k
    125:126:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    129:129:java.util.UUID getId() -> b
    133:133:net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation getOperation() -> c
    137:137:net.minecraft.network.chat.Component getName() -> d
    141:141:float getPercent() -> e
    145:145:net.minecraft.world.BossEvent$BossBarColor getColor() -> f
    149:149:net.minecraft.world.BossEvent$BossBarOverlay getOverlay() -> g
    153:153:boolean shouldDarkenScreen() -> h
    157:157:boolean shouldPlayMusic() -> i
    161:161:boolean shouldCreateWorldFog() -> j
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundBossEventPacket$1 -> mk$1:
    int[] $SwitchMap$net$minecraft$network$protocol$game$ClientboundBossEventPacket$Operation -> a
    46:46:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation -> mk$a:
    net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation ADD -> a
    net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation REMOVE -> b
    net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation UPDATE_PCT -> c
    net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation UPDATE_NAME -> d
    net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation UPDATE_STYLE -> e
    net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation UPDATE_PROPERTIES -> f
    net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation[] $VALUES -> g
    164:164:net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation[] values() -> values
    164:164:net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation valueOf(java.lang.String) -> valueOf
    164:164:void <init>(java.lang.String,int) -> <init>
    164:170:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundChangeDifficultyPacket -> ml:
    net.minecraft.world.Difficulty difficulty -> a
    boolean locked -> b
    13:14:void <init>() -> <init>
    16:19:void <init>(net.minecraft.world.Difficulty,boolean) -> <init>
    23:24:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    28:30:void read(net.minecraft.network.FriendlyByteBuf) -> a
    34:36:void write(net.minecraft.network.FriendlyByteBuf) -> b
    39:39:boolean isLocked() -> b
    43:43:net.minecraft.world.Difficulty getDifficulty() -> c
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundChatPacket -> mm:
    net.minecraft.network.chat.Component message -> a
    net.minecraft.network.chat.ChatType type -> b
    14:15:void <init>() -> <init>
    18:19:void <init>(net.minecraft.network.chat.Component) -> <init>
    21:24:void <init>(net.minecraft.network.chat.Component,net.minecraft.network.chat.ChatType) -> <init>
    28:30:void read(net.minecraft.network.FriendlyByteBuf) -> a
    34:36:void write(net.minecraft.network.FriendlyByteBuf) -> b
    40:41:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    44:44:net.minecraft.network.chat.Component getMessage() -> b
    48:48:boolean isSystem() -> c
    52:52:net.minecraft.network.chat.ChatType getType() -> d
    57:57:boolean isSkippable() -> a
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundChunkBlocksUpdatePacket -> mn:
    net.minecraft.world.level.ChunkPos chunkPos -> a
    net.minecraft.network.protocol.game.ClientboundChunkBlocksUpdatePacket$BlockUpdate[] updates -> b
    17:18:void <init>() -> <init>
    20:27:void <init>(int,short[],net.minecraft.world.level.chunk.LevelChunk) -> <init>
    31:37:void read(net.minecraft.network.FriendlyByteBuf) -> a
    41:48:void write(net.minecraft.network.FriendlyByteBuf) -> b
    52:53:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    56:56:net.minecraft.network.protocol.game.ClientboundChunkBlocksUpdatePacket$BlockUpdate[] getUpdates() -> b
    13:13:void handle(net.minecraft.network.PacketListener) -> a
    13:13:net.minecraft.world.level.ChunkPos access$000(net.minecraft.network.protocol.game.ClientboundChunkBlocksUpdatePacket) -> a
net.minecraft.network.protocol.game.ClientboundChunkBlocksUpdatePacket$BlockUpdate -> mn$a:
    short offset -> b
    net.minecraft.world.level.block.state.BlockState block -> c
    net.minecraft.network.protocol.game.ClientboundChunkBlocksUpdatePacket this$0 -> a
    63:66:void <init>(net.minecraft.network.protocol.game.ClientboundChunkBlocksUpdatePacket,short,net.minecraft.world.level.block.state.BlockState) -> <init>
    68:71:void <init>(net.minecraft.network.protocol.game.ClientboundChunkBlocksUpdatePacket,short,net.minecraft.world.level.chunk.LevelChunk) -> <init>
    74:74:net.minecraft.core.BlockPos getPos() -> a
    78:78:short getOffset() -> b
    82:82:net.minecraft.world.level.block.state.BlockState getBlock() -> c
net.minecraft.network.protocol.game.ClientboundCommandSuggestionsPacket -> mo:
    int id -> a
    com.mojang.brigadier.suggestion.Suggestions suggestions -> b
    19:20:void <init>() -> <init>
    22:25:void <init>(int,com.mojang.brigadier.suggestion.Suggestions) -> <init>
    29:44:void read(net.minecraft.network.FriendlyByteBuf) -> a
    48:60:void write(net.minecraft.network.FriendlyByteBuf) -> b
    64:65:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    68:68:int getId() -> b
    72:72:com.mojang.brigadier.suggestion.Suggestions getSuggestions() -> c
    15:15:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundCommandsPacket -> mp:
    com.mojang.brigadier.tree.RootCommandNode root -> a
    39:40:void <init>() -> <init>
    42:44:void <init>(com.mojang.brigadier.tree.RootCommandNode) -> <init>
    48:70:void read(net.minecraft.network.FriendlyByteBuf) -> a
    75:102:void write(net.minecraft.network.FriendlyByteBuf) -> b
    105:109:net.minecraft.network.protocol.game.ClientboundCommandsPacket$Entry readNode(net.minecraft.network.FriendlyByteBuf) -> c
    114:130:com.mojang.brigadier.builder.ArgumentBuilder createBuilder(net.minecraft.network.FriendlyByteBuf,byte) -> a
    135:177:void writeNode(net.minecraft.network.FriendlyByteBuf,com.mojang.brigadier.tree.CommandNode,java.util.Map) -> a
    181:182:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    185:185:com.mojang.brigadier.tree.RootCommandNode getRoot() -> b
    27:27:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundCommandsPacket$1 -> mp$1:
net.minecraft.network.protocol.game.ClientboundCommandsPacket$Entry -> mp$a:
    com.mojang.brigadier.builder.ArgumentBuilder builder -> a
    byte flags -> b
    int redirect -> c
    int[] children -> d
    com.mojang.brigadier.tree.CommandNode node -> e
    196:201:void <init>(com.mojang.brigadier.builder.ArgumentBuilder,byte,int,int[]) -> <init>
    204:236:boolean build(net.minecraft.network.protocol.game.ClientboundCommandsPacket$Entry[]) -> a
    216:216:int lambda$build$0(com.mojang.brigadier.context.CommandContext) -> a
    188:188:com.mojang.brigadier.tree.CommandNode access$000(net.minecraft.network.protocol.game.ClientboundCommandsPacket$Entry) -> a
    188:188:void <init>(com.mojang.brigadier.builder.ArgumentBuilder,byte,int,int[],net.minecraft.network.protocol.game.ClientboundCommandsPacket$1) -> <init>
net.minecraft.network.protocol.game.ClientboundContainerAckPacket -> mq:
    int containerId -> a
    short uid -> b
    boolean accepted -> c
    14:15:void <init>() -> <init>
    17:21:void <init>(int,short,boolean) -> <init>
    25:26:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    30:33:void read(net.minecraft.network.FriendlyByteBuf) -> a
    37:40:void write(net.minecraft.network.FriendlyByteBuf) -> b
    43:43:int getContainerId() -> b
    47:47:short getUid() -> c
    51:51:boolean isAccepted() -> d
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundContainerClosePacket -> mr:
    int containerId -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(int) -> <init>
    21:22:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    26:27:void read(net.minecraft.network.FriendlyByteBuf) -> a
    31:32:void write(net.minecraft.network.FriendlyByteBuf) -> b
    35:35:int getContainerId() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket -> ms:
    int containerId -> a
    java.util.List items -> b
    16:17:void <init>() -> <init>
    19:25:void <init>(int,net.minecraft.core.NonNullList) -> <init>
    29:35:void read(net.minecraft.network.FriendlyByteBuf) -> a
    39:44:void write(net.minecraft.network.FriendlyByteBuf) -> b
    48:49:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    52:52:int getContainerId() -> b
    56:56:java.util.List getItems() -> c
    12:12:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundContainerSetDataPacket -> mt:
    int containerId -> a
    int id -> b
    int value -> c
    14:15:void <init>() -> <init>
    17:21:void <init>(int,int,int) -> <init>
    25:26:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    30:34:void read(net.minecraft.network.FriendlyByteBuf) -> a
    38:41:void write(net.minecraft.network.FriendlyByteBuf) -> b
    44:44:int getContainerId() -> b
    48:48:int getId() -> c
    52:52:int getValue() -> d
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket -> mu:
    int containerId -> a
    int slot -> b
    net.minecraft.world.item.ItemStack itemStack -> c
    16:19:void <init>() -> <init>
    16:25:void <init>(int,int,net.minecraft.world.item.ItemStack) -> <init>
    29:30:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    34:37:void read(net.minecraft.network.FriendlyByteBuf) -> a
    41:44:void write(net.minecraft.network.FriendlyByteBuf) -> b
    47:47:int getContainerId() -> b
    51:51:int getSlot() -> c
    55:55:net.minecraft.world.item.ItemStack getItem() -> d
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundCooldownPacket -> mv:
    net.minecraft.world.item.Item item -> a
    int duration -> b
    13:14:void <init>() -> <init>
    16:19:void <init>(net.minecraft.world.item.Item,int) -> <init>
    23:25:void read(net.minecraft.network.FriendlyByteBuf) -> a
    29:31:void write(net.minecraft.network.FriendlyByteBuf) -> b
    35:36:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    39:39:net.minecraft.world.item.Item getItem() -> b
    43:43:int getDuration() -> c
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundCustomPayloadPacket -> mw:
    net.minecraft.resources.ResourceLocation BRAND -> a
    net.minecraft.resources.ResourceLocation DEBUG_PATHFINDING_PACKET -> b
    net.minecraft.resources.ResourceLocation DEBUG_NEIGHBORSUPDATE_PACKET -> c
    net.minecraft.resources.ResourceLocation DEBUG_CAVES_PACKET -> d
    net.minecraft.resources.ResourceLocation DEBUG_STRUCTURES_PACKET -> e
    net.minecraft.resources.ResourceLocation DEBUG_WORLDGENATTEMPT_PACKET -> f
    net.minecraft.resources.ResourceLocation DEBUG_POI_TICKET_COUNT_PACKET -> g
    net.minecraft.resources.ResourceLocation DEBUG_POI_ADDED_PACKET -> h
    net.minecraft.resources.ResourceLocation DEBUG_POI_REMOVED_PACKET -> i
    net.minecraft.resources.ResourceLocation DEBUG_VILLAGE_SECTIONS -> j
    net.minecraft.resources.ResourceLocation DEBUG_GOAL_SELECTOR -> k
    net.minecraft.resources.ResourceLocation DEBUG_BRAIN -> l
    net.minecraft.resources.ResourceLocation DEBUG_BEE -> m
    net.minecraft.resources.ResourceLocation DEBUG_HIVE -> n
    net.minecraft.resources.ResourceLocation DEBUG_GAME_TEST_ADD_MARKER -> o
    net.minecraft.resources.ResourceLocation DEBUG_GAME_TEST_CLEAR -> p
    net.minecraft.resources.ResourceLocation DEBUG_RAIDS -> q
    net.minecraft.resources.ResourceLocation identifier -> r
    net.minecraft.network.FriendlyByteBuf data -> s
    35:36:void <init>() -> <init>
    38:45:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> <init>
    49:55:void read(net.minecraft.network.FriendlyByteBuf) -> a
    59:61:void write(net.minecraft.network.FriendlyByteBuf) -> b
    65:66:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    69:69:net.minecraft.resources.ResourceLocation getIdentifier() -> b
    73:73:net.minecraft.network.FriendlyByteBuf getData() -> c
    10:10:void handle(net.minecraft.network.PacketListener) -> a
    14:30:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundCustomSoundPacket -> mx:
    net.minecraft.resources.ResourceLocation name -> a
    net.minecraft.sounds.SoundSource source -> b
    int x -> c
    int y -> d
    int z -> e
    float volume -> f
    float pitch -> g
    17:23:void <init>() -> <init>
    17:33:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.sounds.SoundSource,net.minecraft.world.phys.Vec3,float,float) -> <init>
    37:44:void read(net.minecraft.network.FriendlyByteBuf) -> a
    48:55:void write(net.minecraft.network.FriendlyByteBuf) -> b
    58:58:net.minecraft.resources.ResourceLocation getName() -> b
    62:62:net.minecraft.sounds.SoundSource getSource() -> c
    66:66:double getX() -> d
    70:70:double getY() -> e
    74:74:double getZ() -> f
    78:78:float getVolume() -> g
    82:82:float getPitch() -> h
    87:88:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundDisconnectPacket -> my:
    net.minecraft.network.chat.Component reason -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(net.minecraft.network.chat.Component) -> <init>
    21:22:void read(net.minecraft.network.FriendlyByteBuf) -> a
    26:27:void write(net.minecraft.network.FriendlyByteBuf) -> b
    31:32:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    35:35:net.minecraft.network.chat.Component getReason() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundEntityEventPacket -> mz:
    int entityId -> a
    byte eventId -> b
    15:16:void <init>() -> <init>
    18:21:void <init>(net.minecraft.world.entity.Entity,byte) -> <init>
    25:27:void read(net.minecraft.network.FriendlyByteBuf) -> a
    31:33:void write(net.minecraft.network.FriendlyByteBuf) -> b
    37:38:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    41:41:net.minecraft.world.entity.Entity getEntity(net.minecraft.world.level.Level) -> a
    45:45:byte getEventId() -> b
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundExplodePacket -> na:
    double x -> a
    double y -> b
    double z -> c
    float power -> d
    java.util.List toBlow -> e
    float knockbackX -> f
    float knockbackY -> g
    float knockbackZ -> h
    24:25:void <init>() -> <init>
    27:39:void <init>(double,double,double,float,java.util.List,net.minecraft.world.phys.Vec3) -> <init>
    43:64:void read(net.minecraft.network.FriendlyByteBuf) -> a
    68:89:void write(net.minecraft.network.FriendlyByteBuf) -> b
    93:94:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    97:97:float getKnockbackX() -> b
    101:101:float getKnockbackY() -> c
    105:105:float getKnockbackZ() -> d
    109:109:double getX() -> e
    113:113:double getY() -> f
    117:117:double getZ() -> g
    121:121:float getPower() -> h
    125:125:java.util.List getToBlow() -> i
    14:14:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket -> nb:
    int x -> a
    int z -> b
    12:13:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    22:24:void read(net.minecraft.network.FriendlyByteBuf) -> a
    28:30:void write(net.minecraft.network.FriendlyByteBuf) -> b
    34:35:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    38:38:int getX() -> b
    42:42:int getZ() -> c
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundGameEventPacket -> nc:
    java.lang.String[] EVENT_LANGUAGE_ID -> a
    int event -> b
    float param -> c
    36:37:void <init>() -> <init>
    39:42:void <init>(int,float) -> <init>
    46:48:void read(net.minecraft.network.FriendlyByteBuf) -> a
    52:54:void write(net.minecraft.network.FriendlyByteBuf) -> b
    58:59:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    62:62:int getEvent() -> b
    66:66:float getParam() -> c
    9:9:void handle(net.minecraft.network.PacketListener) -> a
    29:29:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundHorseScreenOpenPacket -> nd:
    int containerId -> a
    int size -> b
    int entityId -> c
    13:14:void <init>() -> <init>
    16:20:void <init>(int,int,int) -> <init>
    24:25:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    29:32:void read(net.minecraft.network.FriendlyByteBuf) -> a
    36:39:void write(net.minecraft.network.FriendlyByteBuf) -> b
    42:42:int getContainerId() -> b
    46:46:int getSize() -> c
    50:50:int getEntityId() -> d
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundKeepAlivePacket -> ne:
    long id -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(long) -> <init>
    20:21:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    25:26:void read(net.minecraft.network.FriendlyByteBuf) -> a
    30:31:void write(net.minecraft.network.FriendlyByteBuf) -> b
    34:34:long getId() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundLevelChunkPacket -> nf:
    int x -> a
    int z -> b
    int availableSections -> c
    net.minecraft.nbt.CompoundTag heightmaps -> d
    net.minecraft.world.level.chunk.ChunkBiomeContainer biomes -> e
    byte[] buffer -> f
    java.util.List blockEntitiesTags -> g
    boolean fullChunk -> h
    37:38:void <init>() -> <init>
    40:74:void <init>(net.minecraft.world.level.chunk.LevelChunk,int) -> <init>
    78:100:void read(net.minecraft.network.FriendlyByteBuf) -> a
    104:119:void write(net.minecraft.network.FriendlyByteBuf) -> b
    123:124:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    127:127:net.minecraft.network.FriendlyByteBuf getReadBuffer() -> b
    131:133:io.netty.buffer.ByteBuf getWriteBuffer() -> j
    137:152:int extractChunkData(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.level.chunk.LevelChunk,int) -> a
    156:169:int calculateChunkSize(net.minecraft.world.level.chunk.LevelChunk,int) -> a
    173:173:int getX() -> c
    177:177:int getZ() -> d
    181:181:int getAvailableSections() -> e
    185:185:boolean isFullChunk() -> f
    189:189:net.minecraft.nbt.CompoundTag getHeightmaps() -> g
    193:193:java.util.List getBlockEntitiesTags() -> h
    198:198:net.minecraft.world.level.chunk.ChunkBiomeContainer getBiomes() -> i
    23:23:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundLevelEventPacket -> ng:
    int type -> a
    net.minecraft.core.BlockPos pos -> b
    int data -> c
    boolean globalEvent -> d
    16:17:void <init>() -> <init>
    19:24:void <init>(int,net.minecraft.core.BlockPos,int,boolean) -> <init>
    28:32:void read(net.minecraft.network.FriendlyByteBuf) -> a
    36:40:void write(net.minecraft.network.FriendlyByteBuf) -> b
    44:45:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    48:48:boolean isGlobalEvent() -> b
    52:52:int getType() -> c
    56:56:int getData() -> d
    60:60:net.minecraft.core.BlockPos getPos() -> e
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket -> nh:
    double x -> a
    double y -> b
    double z -> c
    float xDist -> d
    float yDist -> e
    float zDist -> f
    float maxSpeed -> g
    int count -> h
    boolean overrideLimiter -> i
    net.minecraft.core.particles.ParticleOptions particle -> j
    25:26:void <init>() -> <init>
    28:39:void <init>(net.minecraft.core.particles.ParticleOptions,boolean,double,double,double,float,float,float,float,int) -> <init>
    43:57:void read(net.minecraft.network.FriendlyByteBuf) -> a
    60:60:net.minecraft.core.particles.ParticleOptions readParticle(net.minecraft.network.FriendlyByteBuf,net.minecraft.core.particles.ParticleType) -> a
    65:76:void write(net.minecraft.network.FriendlyByteBuf) -> b
    79:79:boolean isOverrideLimiter() -> b
    83:83:double getX() -> c
    87:87:double getY() -> d
    91:91:double getZ() -> e
    95:95:float getXDist() -> f
    99:99:float getYDist() -> g
    103:103:float getZDist() -> h
    107:107:float getMaxSpeed() -> i
    111:111:int getCount() -> j
    115:115:net.minecraft.core.particles.ParticleOptions getParticle() -> k
    120:121:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    13:13:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundLightUpdatePacket -> ni:
    int x -> a
    int z -> b
    int skyYMask -> c
    int blockYMask -> d
    int emptySkyYMask -> e
    int emptyBlockYMask -> f
    java.util.List skyUpdates -> g
    java.util.List blockUpdates -> h
    26:27:void <init>() -> <init>
    29:54:void <init>(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.lighting.LevelLightEngine) -> <init>
    56:87:void <init>(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.lighting.LevelLightEngine,int,int) -> <init>
    91:109:void read(net.minecraft.network.FriendlyByteBuf) -> a
    113:125:void write(net.minecraft.network.FriendlyByteBuf) -> b
    129:130:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    133:133:int getX() -> b
    137:137:int getZ() -> c
    141:141:int getSkyYMask() -> d
    145:145:int getEmptySkyYMask() -> e
    149:149:java.util.List getSkyUpdates() -> f
    153:153:int getBlockYMask() -> g
    157:157:int getEmptyBlockYMask() -> h
    161:161:java.util.List getBlockUpdates() -> i
    16:16:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundLoginPacket -> nj:
    int playerId -> a
    long seed -> b
    boolean hardcore -> c
    net.minecraft.world.level.GameType gameType -> d
    net.minecraft.world.level.dimension.DimensionType dimension -> e
    int maxPlayers -> f
    net.minecraft.world.level.LevelType levelType -> g
    int chunkRadius -> h
    boolean reducedDebugInfo -> i
    boolean showDeathScreen -> j
    27:28:void <init>() -> <init>
    30:41:void <init>(int,net.minecraft.world.level.GameType,long,boolean,net.minecraft.world.level.dimension.DimensionType,int,net.minecraft.world.level.LevelType,int,boolean,boolean) -> <init>
    45:62:void read(net.minecraft.network.FriendlyByteBuf) -> a
    66:79:void write(net.minecraft.network.FriendlyByteBuf) -> b
    83:84:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    87:87:int getPlayerId() -> b
    91:91:long getSeed() -> c
    95:95:boolean isHardcore() -> d
    99:99:net.minecraft.world.level.GameType getGameType() -> e
    103:103:net.minecraft.world.level.dimension.DimensionType getDimension() -> f
    107:107:int getMaxPlayers() -> g
    111:111:net.minecraft.world.level.LevelType getLevelType() -> h
    115:115:int getChunkRadius() -> i
    119:119:boolean isReducedDebugInfo() -> j
    122:122:boolean shouldShowDeathScreen() -> k
    13:13:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMapItemDataPacket -> nk:
    int mapId -> a
    byte scale -> b
    boolean trackingPosition -> c
    boolean locked -> d
    net.minecraft.world.level.saveddata.maps.MapDecoration[] decorations -> e
    int startX -> f
    int startY -> g
    int width -> h
    int height -> i
    byte[] mapColors -> j
    24:25:void <init>() -> <init>
    27:44:void <init>(int,byte,boolean,boolean,java.util.Collection,byte[],int,int,int,int) -> <init>
    48:64:void read(net.minecraft.network.FriendlyByteBuf) -> a
    68:92:void write(net.minecraft.network.FriendlyByteBuf) -> b
    96:97:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    100:100:int getMapId() -> b
    104:117:void applyToMap(net.minecraft.world.level.saveddata.maps.MapItemSavedData) -> a
    120:120:byte getScale() -> c
    12:12:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMerchantOffersPacket -> nl:
    int containerId -> a
    net.minecraft.world.item.trading.MerchantOffers offers -> b
    int villagerLevel -> c
    int villagerXp -> d
    boolean showProgress -> e
    boolean canRestock -> f
    18:19:void <init>() -> <init>
    21:28:void <init>(int,net.minecraft.world.item.trading.MerchantOffers,int,int,boolean,boolean) -> <init>
    32:38:void read(net.minecraft.network.FriendlyByteBuf) -> a
    42:48:void write(net.minecraft.network.FriendlyByteBuf) -> b
    52:53:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    56:56:int getContainerId() -> b
    60:60:net.minecraft.world.item.trading.MerchantOffers getOffers() -> c
    64:64:int getVillagerLevel() -> d
    68:68:int getVillagerXp() -> e
    72:72:boolean showProgress() -> f
    76:76:boolean canRestock() -> g
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMoveEntityPacket -> nm:
    int entityId -> a
    short xa -> b
    short ya -> c
    short za -> d
    byte yRot -> e
    byte xRot -> f
    boolean onGround -> g
    boolean hasRot -> h
    boolean hasPos -> i
    28:28:long entityToPacket(double) -> a
    32:32:net.minecraft.world.phys.Vec3 packetToEntity(long,long,long) -> a
    141:142:void <init>() -> <init>
    144:146:void <init>(int) -> <init>
    150:151:void read(net.minecraft.network.FriendlyByteBuf) -> a
    155:156:void write(net.minecraft.network.FriendlyByteBuf) -> b
    160:161:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    165:165:java.lang.String toString() -> toString
    169:169:net.minecraft.world.entity.Entity getEntity(net.minecraft.world.level.Level) -> a
    173:173:short getXa() -> b
    177:177:short getYa() -> c
    181:181:short getZa() -> d
    185:185:byte getyRot() -> e
    189:189:byte getxRot() -> f
    193:193:boolean hasRotation() -> g
    197:197:boolean hasPosition() -> h
    201:201:boolean isOnGround() -> i
    12:12:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$Pos -> nm$a:
    78:80:void <init>() -> <init>
    83:90:void <init>(int,short,short,short,boolean) -> <init>
    94:99:void read(net.minecraft.network.FriendlyByteBuf) -> a
    103:108:void write(net.minecraft.network.FriendlyByteBuf) -> b
    77:77:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$PosRot -> nm$b:
    36:39:void <init>() -> <init>
    42:52:void <init>(int,short,short,short,byte,byte,boolean) -> <init>
    56:63:void read(net.minecraft.network.FriendlyByteBuf) -> a
    67:74:void write(net.minecraft.network.FriendlyByteBuf) -> b
    35:35:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMoveEntityPacket$Rot -> nm$c:
    112:114:void <init>() -> <init>
    117:122:void <init>(int,byte,byte,boolean) -> <init>
    126:130:void read(net.minecraft.network.FriendlyByteBuf) -> a
    134:138:void write(net.minecraft.network.FriendlyByteBuf) -> b
    111:111:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundMoveVehiclePacket -> nn:
    double x -> a
    double y -> b
    double z -> c
    float yRot -> d
    float xRot -> e
    16:17:void <init>() -> <init>
    19:25:void <init>(net.minecraft.world.entity.Entity) -> <init>
    29:34:void read(net.minecraft.network.FriendlyByteBuf) -> a
    38:43:void write(net.minecraft.network.FriendlyByteBuf) -> b
    47:48:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    51:51:double getX() -> b
    55:55:double getY() -> c
    59:59:double getZ() -> d
    63:63:float getYRot() -> e
    67:67:float getXRot() -> f
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundOpenBookPacket -> no:
    net.minecraft.world.InteractionHand hand -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(net.minecraft.world.InteractionHand) -> <init>
    21:22:void read(net.minecraft.network.FriendlyByteBuf) -> a
    26:27:void write(net.minecraft.network.FriendlyByteBuf) -> b
    31:32:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    35:35:net.minecraft.world.InteractionHand getHand() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundOpenScreenPacket -> np:
    int containerId -> a
    int type -> b
    net.minecraft.network.chat.Component title -> c
    17:18:void <init>() -> <init>
    20:24:void <init>(int,net.minecraft.world.inventory.MenuType,net.minecraft.network.chat.Component) -> <init>
    28:31:void read(net.minecraft.network.FriendlyByteBuf) -> a
    35:38:void write(net.minecraft.network.FriendlyByteBuf) -> b
    42:43:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    46:46:int getContainerId() -> b
    51:51:net.minecraft.world.inventory.MenuType getType() -> c
    55:55:net.minecraft.network.chat.Component getTitle() -> d
    12:12:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundOpenSignEditorPacket -> nq:
    net.minecraft.core.BlockPos pos -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(net.minecraft.core.BlockPos) -> <init>
    21:22:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    26:27:void read(net.minecraft.network.FriendlyByteBuf) -> a
    31:32:void write(net.minecraft.network.FriendlyByteBuf) -> b
    35:35:net.minecraft.core.BlockPos getPos() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlaceGhostRecipePacket -> nr:
    int containerId -> a
    net.minecraft.resources.ResourceLocation recipe -> b
    14:15:void <init>() -> <init>
    17:20:void <init>(int,net.minecraft.world.item.crafting.Recipe) -> <init>
    23:23:net.minecraft.resources.ResourceLocation getRecipe() -> b
    27:27:int getContainerId() -> c
    32:34:void read(net.minecraft.network.FriendlyByteBuf) -> a
    38:40:void write(net.minecraft.network.FriendlyByteBuf) -> b
    44:45:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerAbilitiesPacket -> ns:
    boolean invulnerable -> a
    boolean isFlying -> b
    boolean canFly -> c
    boolean instabuild -> d
    float flyingSpeed -> e
    float walkingSpeed -> f
    23:24:void <init>() -> <init>
    26:33:void <init>(net.minecraft.world.entity.player.Abilities) -> <init>
    37:45:void read(net.minecraft.network.FriendlyByteBuf) -> a
    49:67:void write(net.minecraft.network.FriendlyByteBuf) -> b
    71:72:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    75:75:boolean isInvulnerable() -> b
    79:80:void setInvulnerable(boolean) -> a
    83:83:boolean isFlying() -> c
    87:88:void setFlying(boolean) -> b
    91:91:boolean canFly() -> d
    95:96:void setCanFly(boolean) -> c
    99:99:boolean canInstabuild() -> e
    103:104:void setInstabuild(boolean) -> d
    107:107:float getFlyingSpeed() -> f
    111:112:void setFlyingSpeed(float) -> a
    115:115:float getWalkingSpeed() -> g
    119:120:void setWalkingSpeed(float) -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket -> nt:
    net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$Event event -> a
    int playerId -> b
    int killerId -> c
    int duration -> d
    net.minecraft.network.chat.Component message -> e
    26:27:void <init>() -> <init>
    30:31:void <init>(net.minecraft.world.damagesource.CombatTracker,net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$Event) -> <init>
    33:49:void <init>(net.minecraft.world.damagesource.CombatTracker,net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$Event,net.minecraft.network.chat.Component) -> <init>
    53:63:void read(net.minecraft.network.FriendlyByteBuf) -> a
    67:77:void write(net.minecraft.network.FriendlyByteBuf) -> b
    81:82:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    86:86:boolean isSkippable() -> a
    12:12:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$1 -> nt$1:
    int[] $SwitchMap$net$minecraft$network$protocol$game$ClientboundPlayerCombatPacket$Event -> a
    38:38:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$Event -> nt$a:
    net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$Event ENTER_COMBAT -> a
    net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$Event END_COMBAT -> b
    net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$Event ENTITY_DIED -> c
    net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$Event[] $VALUES -> d
    13:13:net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$Event[] values() -> values
    13:13:net.minecraft.network.protocol.game.ClientboundPlayerCombatPacket$Event valueOf(java.lang.String) -> valueOf
    13:13:void <init>(java.lang.String,int) -> <init>
    13:16:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket -> nu:
    net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action action -> a
    java.util.List entries -> b
    20:23:void <init>() -> <init>
    20:31:void <init>(net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action,net.minecraft.server.level.ServerPlayer[]) -> <init>
    20:39:void <init>(net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action,java.lang.Iterable) -> <init>
    43:93:void read(net.minecraft.network.FriendlyByteBuf) -> a
    97:148:void write(net.minecraft.network.FriendlyByteBuf) -> b
    152:153:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    156:156:java.util.List getEntries() -> b
    160:160:net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action getAction() -> c
    174:177:java.lang.String toString() -> toString
    18:18:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$1 -> nu$1:
    int[] $SwitchMap$net$minecraft$network$protocol$game$ClientboundPlayerInfoPacket$Action -> a
    52:52:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action -> nu$a:
    net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action ADD_PLAYER -> a
    net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action UPDATE_GAME_MODE -> b
    net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action UPDATE_LATENCY -> c
    net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action UPDATE_DISPLAY_NAME -> d
    net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action REMOVE_PLAYER -> e
    net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action[] $VALUES -> f
    163:163:net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action[] values() -> values
    163:163:net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$Action valueOf(java.lang.String) -> valueOf
    163:163:void <init>(java.lang.String,int) -> <init>
    163:168:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket$PlayerUpdate -> nu$b:
    int latency -> b
    net.minecraft.world.level.GameType gameMode -> c
    com.mojang.authlib.GameProfile profile -> d
    net.minecraft.network.chat.Component displayName -> e
    net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket this$0 -> a
    186:191:void <init>(net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket,com.mojang.authlib.GameProfile,int,net.minecraft.world.level.GameType,net.minecraft.network.chat.Component) -> <init>
    194:194:com.mojang.authlib.GameProfile getProfile() -> a
    198:198:int getLatency() -> b
    202:202:net.minecraft.world.level.GameType getGameMode() -> c
    207:207:net.minecraft.network.chat.Component getDisplayName() -> d
    212:217:java.lang.String toString() -> toString
net.minecraft.network.protocol.game.ClientboundPlayerLookAtPacket -> nv:
    double x -> a
    double y -> b
    double z -> c
    int entity -> d
    net.minecraft.commands.arguments.EntityAnchorArgument$Anchor fromAnchor -> e
    net.minecraft.commands.arguments.EntityAnchorArgument$Anchor toAnchor -> f
    boolean atEntity -> g
    22:23:void <init>() -> <init>
    25:30:void <init>(net.minecraft.commands.arguments.EntityAnchorArgument$Anchor,double,double,double) -> <init>
    32:41:void <init>(net.minecraft.commands.arguments.EntityAnchorArgument$Anchor,net.minecraft.world.entity.Entity,net.minecraft.commands.arguments.EntityAnchorArgument$Anchor) -> <init>
    45:54:void read(net.minecraft.network.FriendlyByteBuf) -> a
    58:67:void write(net.minecraft.network.FriendlyByteBuf) -> b
    71:72:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    75:75:net.minecraft.commands.arguments.EntityAnchorArgument$Anchor getFromAnchor() -> b
    80:87:net.minecraft.world.phys.Vec3 getPosition(net.minecraft.world.level.Level) -> a
    13:13:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket -> nw:
    double x -> a
    double y -> b
    double z -> c
    float yRot -> d
    float xRot -> e
    java.util.Set relativeArguments -> f
    int id -> g
    19:20:void <init>() -> <init>
    22:30:void <init>(double,double,double,float,float,java.util.Set,int) -> <init>
    34:41:void read(net.minecraft.network.FriendlyByteBuf) -> a
    45:52:void write(net.minecraft.network.FriendlyByteBuf) -> b
    56:57:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    60:60:double getX() -> b
    64:64:double getY() -> c
    68:68:double getZ() -> d
    72:72:float getYRot() -> e
    76:76:float getXRot() -> f
    80:80:int getId() -> g
    84:84:java.util.Set getRelativeArguments() -> h
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument -> nw$a:
    net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument X -> a
    net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument Y -> b
    net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument Z -> c
    net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument Y_ROT -> d
    net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument X_ROT -> e
    int bit -> f
    net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument[] $VALUES -> g
    87:87:net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument[] values() -> values
    87:87:net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket$RelativeArgument valueOf(java.lang.String) -> valueOf
    97:99:void <init>(java.lang.String,int,int) -> <init>
    102:102:int getMask() -> a
    106:106:boolean isSet(int) -> b
    110:118:java.util.Set unpack(int) -> a
    122:128:int pack(java.util.Set) -> a
    87:92:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundRecipePacket -> nx:
    net.minecraft.network.protocol.game.ClientboundRecipePacket$State state -> a
    java.util.List recipes -> b
    java.util.List toHighlight -> c
    boolean guiOpen -> d
    boolean filteringCraftable -> e
    boolean furnaceGuiOpen -> f
    boolean furnaceFilteringCraftable -> g
    27:28:void <init>() -> <init>
    30:39:void <init>(net.minecraft.network.protocol.game.ClientboundRecipePacket$State,java.util.Collection,java.util.Collection,boolean,boolean,boolean,boolean) -> <init>
    43:44:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    48:67:void read(net.minecraft.network.FriendlyByteBuf) -> a
    71:88:void write(net.minecraft.network.FriendlyByteBuf) -> b
    91:91:java.util.List getRecipes() -> b
    95:95:java.util.List getHighlights() -> c
    99:99:boolean isGuiOpen() -> d
    103:103:boolean isFilteringCraftable() -> e
    107:107:boolean isFurnaceGuiOpen() -> f
    111:111:boolean isFurnaceFilteringCraftable() -> g
    115:115:net.minecraft.network.protocol.game.ClientboundRecipePacket$State getState() -> h
    13:13:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundRecipePacket$State -> nx$a:
    net.minecraft.network.protocol.game.ClientboundRecipePacket$State INIT -> a
    net.minecraft.network.protocol.game.ClientboundRecipePacket$State ADD -> b
    net.minecraft.network.protocol.game.ClientboundRecipePacket$State REMOVE -> c
    net.minecraft.network.protocol.game.ClientboundRecipePacket$State[] $VALUES -> d
    14:14:net.minecraft.network.protocol.game.ClientboundRecipePacket$State[] values() -> values
    14:14:net.minecraft.network.protocol.game.ClientboundRecipePacket$State valueOf(java.lang.String) -> valueOf
    14:14:void <init>(java.lang.String,int) -> <init>
    14:15:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket -> ny:
    int[] entityIds -> a
    14:15:void <init>() -> <init>
    17:19:void <init>(int[]) -> <init>
    23:28:void read(net.minecraft.network.FriendlyByteBuf) -> a
    32:37:void write(net.minecraft.network.FriendlyByteBuf) -> b
    41:42:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    45:45:int[] getEntityIds() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundRemoveMobEffectPacket -> nz:
    int entityId -> a
    net.minecraft.world.effect.MobEffect effect -> b
    16:17:void <init>() -> <init>
    19:22:void <init>(int,net.minecraft.world.effect.MobEffect) -> <init>
    26:28:void read(net.minecraft.network.FriendlyByteBuf) -> a
    32:34:void write(net.minecraft.network.FriendlyByteBuf) -> b
    38:39:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    43:43:net.minecraft.world.entity.Entity getEntity(net.minecraft.world.level.Level) -> a
    48:48:net.minecraft.world.effect.MobEffect getEffect() -> b
    12:12:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundResourcePackPacket -> oa:
    java.lang.String url -> a
    java.lang.String hash -> b
    15:16:void <init>() -> <init>
    18:25:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void read(net.minecraft.network.FriendlyByteBuf) -> a
    35:37:void write(net.minecraft.network.FriendlyByteBuf) -> b
    41:42:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    45:45:java.lang.String getUrl() -> b
    49:49:java.lang.String getHash() -> c
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundRespawnPacket -> ob:
    net.minecraft.world.level.dimension.DimensionType dimension -> a
    long seed -> b
    net.minecraft.world.level.GameType playerGameType -> c
    net.minecraft.world.level.LevelType levelType -> d
    18:19:void <init>() -> <init>
    21:26:void <init>(net.minecraft.world.level.dimension.DimensionType,long,net.minecraft.world.level.LevelType,net.minecraft.world.level.GameType) -> <init>
    30:31:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    35:42:void read(net.minecraft.network.FriendlyByteBuf) -> a
    46:50:void write(net.minecraft.network.FriendlyByteBuf) -> b
    53:53:net.minecraft.world.level.dimension.DimensionType getDimension() -> b
    57:57:long getSeed() -> c
    61:61:net.minecraft.world.level.GameType getPlayerGameType() -> d
    65:65:net.minecraft.world.level.LevelType getLevelType() -> e
    12:12:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundRotateHeadPacket -> oc:
    int entityId -> a
    byte yHeadRot -> b
    15:16:void <init>() -> <init>
    18:21:void <init>(net.minecraft.world.entity.Entity,byte) -> <init>
    25:27:void read(net.minecraft.network.FriendlyByteBuf) -> a
    31:33:void write(net.minecraft.network.FriendlyByteBuf) -> b
    37:38:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    41:41:net.minecraft.world.entity.Entity getEntity(net.minecraft.world.level.Level) -> a
    45:45:byte getYHeadRot() -> b
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSelectAdvancementsTabPacket -> od:
    net.minecraft.resources.ResourceLocation tab -> a
    14:15:void <init>() -> <init>
    17:19:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    23:24:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    28:31:void read(net.minecraft.network.FriendlyByteBuf) -> a
    35:39:void write(net.minecraft.network.FriendlyByteBuf) -> b
    43:43:net.minecraft.resources.ResourceLocation getTab() -> b
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetBorderPacket -> oe:
    net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type type -> a
    int newAbsoluteMaxSize -> b
    double newCenterX -> c
    double newCenterZ -> d
    double newSize -> e
    double oldSize -> f
    long lerpTime -> g
    int warningTime -> h
    int warningBlocks -> i
    20:21:void <init>() -> <init>
    23:33:void <init>(net.minecraft.world.level.border.WorldBorder,net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type) -> <init>
    37:69:void read(net.minecraft.network.FriendlyByteBuf) -> a
    73:105:void write(net.minecraft.network.FriendlyByteBuf) -> b
    109:110:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    113:143:void applyChanges(net.minecraft.world.level.border.WorldBorder) -> a
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetBorderPacket$1 -> oe$1:
    int[] $SwitchMap$net$minecraft$network$protocol$game$ClientboundSetBorderPacket$Type -> a
    39:39:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type -> oe$a:
    net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type SET_SIZE -> a
    net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type LERP_SIZE -> b
    net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type SET_CENTER -> c
    net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type INITIALIZE -> d
    net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type SET_WARNING_TIME -> e
    net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type SET_WARNING_BLOCKS -> f
    net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type[] $VALUES -> g
    145:145:net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type[] values() -> values
    145:145:net.minecraft.network.protocol.game.ClientboundSetBorderPacket$Type valueOf(java.lang.String) -> valueOf
    145:145:void <init>(java.lang.String,int) -> <init>
    145:151:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundSetCameraPacket -> of:
    int cameraId -> a
    14:15:void <init>() -> <init>
    17:19:void <init>(net.minecraft.world.entity.Entity) -> <init>
    23:24:void read(net.minecraft.network.FriendlyByteBuf) -> a
    28:29:void write(net.minecraft.network.FriendlyByteBuf) -> b
    33:34:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    38:38:net.minecraft.world.entity.Entity getEntity(net.minecraft.world.level.Level) -> a
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket -> og:
    int slot -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(int) -> <init>
    21:22:void read(net.minecraft.network.FriendlyByteBuf) -> a
    26:27:void write(net.minecraft.network.FriendlyByteBuf) -> b
    31:32:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    35:35:int getSlot() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket -> oh:
    int x -> a
    int z -> b
    12:13:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    22:24:void read(net.minecraft.network.FriendlyByteBuf) -> a
    28:30:void write(net.minecraft.network.FriendlyByteBuf) -> b
    34:35:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    38:38:int getX() -> b
    42:42:int getZ() -> c
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetChunkCacheRadiusPacket -> oi:
    int radius -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(int) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    34:34:int getRadius() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetDisplayObjectivePacket -> oj:
    int slot -> a
    java.lang.String objectiveName -> b
    15:16:void <init>() -> <init>
    18:26:void <init>(int,net.minecraft.world.scores.Objective) -> <init>
    30:32:void read(net.minecraft.network.FriendlyByteBuf) -> a
    36:38:void write(net.minecraft.network.FriendlyByteBuf) -> b
    42:43:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    46:46:int getSlot() -> b
    51:51:java.lang.String getObjectiveName() -> c
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket -> ok:
    int id -> a
    java.util.List packedItems -> b
    15:16:void <init>() -> <init>
    18:26:void <init>(int,net.minecraft.network.syncher.SynchedEntityData,boolean) -> <init>
    30:32:void read(net.minecraft.network.FriendlyByteBuf) -> a
    36:38:void write(net.minecraft.network.FriendlyByteBuf) -> b
    42:43:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    46:46:java.util.List getUnpackedData() -> b
    50:50:int getId() -> c
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket -> ol:
    int sourceId -> a
    int destId -> b
    14:15:void <init>() -> <init>
    17:20:void <init>(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> <init>
    24:26:void read(net.minecraft.network.FriendlyByteBuf) -> a
    30:32:void write(net.minecraft.network.FriendlyByteBuf) -> b
    36:37:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    40:40:int getSourceId() -> b
    44:44:int getDestId() -> c
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket -> om:
    int id -> a
    int xa -> b
    int ya -> c
    int za -> d
    17:18:void <init>() -> <init>
    21:22:void <init>(net.minecraft.world.entity.Entity) -> <init>
    24:33:void <init>(int,net.minecraft.world.phys.Vec3) -> <init>
    37:41:void read(net.minecraft.network.FriendlyByteBuf) -> a
    45:49:void write(net.minecraft.network.FriendlyByteBuf) -> b
    53:54:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    57:57:int getId() -> b
    61:61:int getXa() -> c
    65:65:int getYa() -> d
    69:69:int getZa() -> e
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetEquippedItemPacket -> on:
    int entity -> a
    net.minecraft.world.entity.EquipmentSlot slot -> b
    net.minecraft.world.item.ItemStack itemStack -> c
    13:16:void <init>() -> <init>
    13:22:void <init>(int,net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.ItemStack) -> <init>
    26:29:void read(net.minecraft.network.FriendlyByteBuf) -> a
    33:36:void write(net.minecraft.network.FriendlyByteBuf) -> b
    40:41:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    44:44:net.minecraft.world.item.ItemStack getItem() -> b
    48:48:int getEntity() -> c
    52:52:net.minecraft.world.entity.EquipmentSlot getSlot() -> d
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetExperiencePacket -> oo:
    float experienceProgress -> a
    int totalExperience -> b
    int experienceLevel -> c
    13:14:void <init>() -> <init>
    16:20:void <init>(float,int,int) -> <init>
    24:27:void read(net.minecraft.network.FriendlyByteBuf) -> a
    31:34:void write(net.minecraft.network.FriendlyByteBuf) -> b
    38:39:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    42:42:float getExperienceProgress() -> b
    46:46:int getTotalExperience() -> c
    50:50:int getExperienceLevel() -> d
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetHealthPacket -> op:
    float health -> a
    int food -> b
    float saturation -> c
    13:14:void <init>() -> <init>
    16:20:void <init>(float,int,float) -> <init>
    24:27:void read(net.minecraft.network.FriendlyByteBuf) -> a
    31:34:void write(net.minecraft.network.FriendlyByteBuf) -> b
    38:39:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    42:42:float getHealth() -> b
    46:46:int getFood() -> c
    50:50:float getSaturation() -> d
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetObjectivePacket -> oq:
    java.lang.String objectiveName -> a
    net.minecraft.network.chat.Component displayName -> b
    net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType renderType -> c
    int method -> d
    21:22:void <init>() -> <init>
    24:29:void <init>(net.minecraft.world.scores.Objective,int) -> <init>
    33:40:void read(net.minecraft.network.FriendlyByteBuf) -> a
    44:51:void write(net.minecraft.network.FriendlyByteBuf) -> b
    55:56:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    59:59:java.lang.String getObjectiveName() -> b
    63:63:net.minecraft.network.chat.Component getDisplayName() -> c
    67:67:int getMethod() -> d
    71:71:net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType getRenderType() -> e
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetPassengersPacket -> or:
    int vehicle -> a
    int[] passengers -> b
    14:15:void <init>() -> <init>
    17:25:void <init>(net.minecraft.world.entity.Entity) -> <init>
    29:31:void read(net.minecraft.network.FriendlyByteBuf) -> a
    35:37:void write(net.minecraft.network.FriendlyByteBuf) -> b
    41:42:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    45:45:int[] getPassengers() -> b
    49:49:int getVehicle() -> c
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket -> os:
    java.lang.String name -> a
    net.minecraft.network.chat.Component displayName -> b
    net.minecraft.network.chat.Component playerPrefix -> c
    net.minecraft.network.chat.Component playerSuffix -> d
    java.lang.String nametagVisibility -> e
    java.lang.String collisionRule -> f
    net.minecraft.ChatFormatting color -> g
    java.util.Collection players -> h
    int method -> i
    int options -> j
    27:39:void <init>() -> <init>
    27:57:void <init>(net.minecraft.world.scores.PlayerTeam,int) -> <init>
    27:70:void <init>(net.minecraft.world.scores.PlayerTeam,java.util.Collection,int) -> <init>
    74:94:void read(net.minecraft.network.FriendlyByteBuf) -> a
    98:118:void write(net.minecraft.network.FriendlyByteBuf) -> b
    122:123:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    126:126:java.lang.String getName() -> b
    130:130:net.minecraft.network.chat.Component getDisplayName() -> c
    134:134:java.util.Collection getPlayers() -> d
    138:138:int getMethod() -> e
    142:142:int getOptions() -> f
    146:146:net.minecraft.ChatFormatting getColor() -> g
    150:150:java.lang.String getNametagVisibility() -> h
    154:154:java.lang.String getCollisionRule() -> i
    158:158:net.minecraft.network.chat.Component getPlayerPrefix() -> j
    162:162:net.minecraft.network.chat.Component getPlayerSuffix() -> k
    16:16:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetScorePacket -> ot:
    java.lang.String owner -> a
    java.lang.String objectiveName -> b
    int score -> c
    net.minecraft.server.ServerScoreboard$Method method -> d
    14:21:void <init>() -> <init>
    14:31:void <init>(net.minecraft.server.ServerScoreboard$Method,java.lang.String,java.lang.String,int) -> <init>
    35:43:void read(net.minecraft.network.FriendlyByteBuf) -> a
    47:54:void write(net.minecraft.network.FriendlyByteBuf) -> b
    58:59:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    62:62:java.lang.String getOwner() -> b
    67:67:java.lang.String getObjectiveName() -> c
    71:71:int getScore() -> d
    75:75:net.minecraft.server.ServerScoreboard$Method getMethod() -> e
    13:13:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetSpawnPositionPacket -> ou:
    net.minecraft.core.BlockPos pos -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(net.minecraft.core.BlockPos) -> <init>
    21:22:void read(net.minecraft.network.FriendlyByteBuf) -> a
    26:27:void write(net.minecraft.network.FriendlyByteBuf) -> b
    31:32:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    35:35:net.minecraft.core.BlockPos getPos() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetTimePacket -> ov:
    long gameTime -> a
    long dayTime -> b
    12:13:void <init>() -> <init>
    15:25:void <init>(long,long,boolean) -> <init>
    29:31:void read(net.minecraft.network.FriendlyByteBuf) -> a
    35:37:void write(net.minecraft.network.FriendlyByteBuf) -> b
    41:42:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    45:45:long getGameTime() -> b
    49:49:long getDayTime() -> c
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetTitlesPacket -> ow:
    net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type type -> a
    net.minecraft.network.chat.Component text -> b
    int fadeInTime -> c
    int stayTime -> d
    int fadeOutTime -> e
    17:18:void <init>() -> <init>
    21:22:void <init>(net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type,net.minecraft.network.chat.Component) -> <init>
    25:26:void <init>(int,int,int) -> <init>
    28:34:void <init>(net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type,net.minecraft.network.chat.Component,int,int,int) -> <init>
    38:47:void read(net.minecraft.network.FriendlyByteBuf) -> a
    51:60:void write(net.minecraft.network.FriendlyByteBuf) -> b
    64:65:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    68:68:net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type getType() -> b
    72:72:net.minecraft.network.chat.Component getText() -> c
    76:76:int getFadeInTime() -> d
    80:80:int getStayTime() -> e
    84:84:int getFadeOutTime() -> f
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type -> ow$a:
    net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type TITLE -> a
    net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type SUBTITLE -> b
    net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type ACTIONBAR -> c
    net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type TIMES -> d
    net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type CLEAR -> e
    net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type RESET -> f
    net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type[] $VALUES -> g
    87:87:net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type[] values() -> values
    87:87:net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type valueOf(java.lang.String) -> valueOf
    87:87:void <init>(java.lang.String,int) -> <init>
    87:93:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ClientboundSoundEntityPacket -> ox:
    net.minecraft.sounds.SoundEvent sound -> a
    net.minecraft.sounds.SoundSource source -> b
    int id -> c
    float volume -> d
    float pitch -> e
    20:21:void <init>() -> <init>
    23:30:void <init>(net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,net.minecraft.world.entity.Entity,float,float) -> <init>
    34:39:void read(net.minecraft.network.FriendlyByteBuf) -> a
    43:48:void write(net.minecraft.network.FriendlyByteBuf) -> b
    51:51:net.minecraft.sounds.SoundEvent getSound() -> b
    55:55:net.minecraft.sounds.SoundSource getSource() -> c
    59:59:int getId() -> d
    63:63:float getVolume() -> e
    67:67:float getPitch() -> f
    72:73:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    13:13:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundSoundPacket -> oy:
    net.minecraft.sounds.SoundEvent sound -> a
    net.minecraft.sounds.SoundSource source -> b
    int x -> c
    int y -> d
    int z -> e
    float volume -> f
    float pitch -> g
    23:24:void <init>() -> <init>
    26:35:void <init>(net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,double,double,double,float,float) -> <init>
    39:46:void read(net.minecraft.network.FriendlyByteBuf) -> a
    50:57:void write(net.minecraft.network.FriendlyByteBuf) -> b
    60:60:net.minecraft.sounds.SoundEvent getSound() -> b
    64:64:net.minecraft.sounds.SoundSource getSource() -> c
    68:68:double getX() -> d
    72:72:double getY() -> e
    76:76:double getZ() -> f
    80:80:float getVolume() -> g
    84:84:float getPitch() -> h
    89:90:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    12:12:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundStopSoundPacket -> oz:
    net.minecraft.resources.ResourceLocation name -> a
    net.minecraft.sounds.SoundSource source -> b
    18:19:void <init>() -> <init>
    21:24:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.sounds.SoundSource) -> <init>
    28:35:void read(net.minecraft.network.FriendlyByteBuf) -> a
    39:56:void write(net.minecraft.network.FriendlyByteBuf) -> b
    60:60:net.minecraft.resources.ResourceLocation getName() -> b
    65:65:net.minecraft.sounds.SoundSource getSource() -> c
    70:71:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundTabListPacket -> pa:
    net.minecraft.network.chat.Component header -> a
    net.minecraft.network.chat.Component footer -> b
    13:14:void <init>() -> <init>
    16:19:void <init>(net.minecraft.network.chat.Component,net.minecraft.network.chat.Component) -> <init>
    23:25:void read(net.minecraft.network.FriendlyByteBuf) -> a
    29:31:void write(net.minecraft.network.FriendlyByteBuf) -> b
    35:36:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    39:39:net.minecraft.network.chat.Component getHeader() -> b
    43:43:net.minecraft.network.chat.Component getFooter() -> c
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundTagQueryPacket -> pb:
    int transactionId -> a
    net.minecraft.nbt.CompoundTag tag -> b
    16:17:void <init>() -> <init>
    19:22:void <init>(int,net.minecraft.nbt.CompoundTag) -> <init>
    26:28:void read(net.minecraft.network.FriendlyByteBuf) -> a
    32:34:void write(net.minecraft.network.FriendlyByteBuf) -> b
    38:39:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    42:42:int getTransactionId() -> b
    47:47:net.minecraft.nbt.CompoundTag getTag() -> c
    52:52:boolean isSkippable() -> a
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundTakeItemEntityPacket -> pc:
    int itemId -> a
    int playerId -> b
    int amount -> c
    13:14:void <init>() -> <init>
    16:20:void <init>(int,int,int) -> <init>
    24:27:void read(net.minecraft.network.FriendlyByteBuf) -> a
    31:34:void write(net.minecraft.network.FriendlyByteBuf) -> b
    38:39:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    42:42:int getItemId() -> b
    46:46:int getPlayerId() -> c
    50:50:int getAmount() -> d
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket -> pd:
    int id -> a
    double x -> b
    double y -> c
    double z -> d
    byte yRot -> e
    byte xRot -> f
    boolean onGround -> g
    18:19:void <init>() -> <init>
    21:29:void <init>(net.minecraft.world.entity.Entity) -> <init>
    33:40:void read(net.minecraft.network.FriendlyByteBuf) -> a
    44:51:void write(net.minecraft.network.FriendlyByteBuf) -> b
    55:56:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    59:59:int getId() -> b
    63:63:double getX() -> c
    67:67:double getY() -> d
    71:71:double getZ() -> e
    75:75:byte getyRot() -> f
    79:79:byte getxRot() -> g
    83:83:boolean isOnGround() -> h
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundUpdateAdvancementsPacket -> pe:
    boolean reset -> a
    java.util.Map added -> b
    java.util.Set removed -> c
    java.util.Map progress -> d
    22:23:void <init>() -> <init>
    25:33:void <init>(boolean,java.util.Collection,java.util.Set,java.util.Map) -> <init>
    37:38:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    42:65:void read(net.minecraft.network.FriendlyByteBuf) -> a
    69:89:void write(net.minecraft.network.FriendlyByteBuf) -> b
    92:92:java.util.Map getAdded() -> b
    96:96:java.util.Set getRemoved() -> c
    100:100:java.util.Map getProgress() -> d
    104:104:boolean shouldReset() -> e
    16:16:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket -> pf:
    int entityId -> a
    java.util.List attributes -> b
    17:20:void <init>() -> <init>
    17:28:void <init>(int,java.util.Collection) -> <init>
    32:48:void read(net.minecraft.network.FriendlyByteBuf) -> a
    52:66:void write(net.minecraft.network.FriendlyByteBuf) -> b
    70:71:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    74:74:int getEntityId() -> b
    78:78:java.util.List getValues() -> c
    15:15:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket$AttributeSnapshot -> pf$a:
    java.lang.String name -> b
    double base -> c
    java.util.Collection modifiers -> d
    net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket this$0 -> a
    86:90:void <init>(net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket,java.lang.String,double,java.util.Collection) -> <init>
    93:93:java.lang.String getName() -> a
    97:97:double getBase() -> b
    101:101:java.util.Collection getModifiers() -> c
net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket -> pg:
    int entityId -> a
    byte effectId -> b
    byte effectAmplifier -> c
    int effectDurationTicks -> d
    byte flags -> e
    24:25:void <init>() -> <init>
    27:47:void <init>(int,net.minecraft.world.effect.MobEffectInstance) -> <init>
    51:56:void read(net.minecraft.network.FriendlyByteBuf) -> a
    60:65:void write(net.minecraft.network.FriendlyByteBuf) -> b
    68:68:boolean isSuperLongDuration() -> b
    73:74:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    77:77:int getEntityId() -> c
    81:81:byte getEffectId() -> d
    85:85:byte getEffectAmplifier() -> e
    89:89:int getEffectDurationTicks() -> f
    93:93:boolean isEffectVisible() -> g
    97:97:boolean isEffectAmbient() -> h
    101:101:boolean effectShowsIcon() -> i
    13:13:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket -> ph:
    java.util.List recipes -> a
    18:19:void <init>() -> <init>
    21:23:void <init>(java.util.Collection) -> <init>
    27:28:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    32:37:void read(net.minecraft.network.FriendlyByteBuf) -> a
    41:45:void write(net.minecraft.network.FriendlyByteBuf) -> b
    48:48:java.util.List getRecipes() -> b
    52:57:net.minecraft.world.item.crafting.Recipe fromNetwork(net.minecraft.network.FriendlyByteBuf) -> c
    62:65:void toNetwork(net.minecraft.world.item.crafting.Recipe,net.minecraft.network.FriendlyByteBuf) -> a
    15:15:void handle(net.minecraft.network.PacketListener) -> a
    56:56:java.lang.IllegalArgumentException lambda$fromNetwork$0(net.minecraft.resources.ResourceLocation) -> a
net.minecraft.network.protocol.game.ClientboundUpdateTagsPacket -> pi:
    net.minecraft.tags.TagManager tags -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(net.minecraft.tags.TagManager) -> <init>
    21:22:void read(net.minecraft.network.FriendlyByteBuf) -> a
    26:27:void write(net.minecraft.network.FriendlyByteBuf) -> b
    31:32:void handle(net.minecraft.network.protocol.game.ClientGamePacketListener) -> a
    35:35:net.minecraft.tags.TagManager getTags() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.DebugMobNameGenerator -> pj:
    java.lang.String[] NAMES_FIRST_PART -> a
    java.lang.String[] NAMES_SECOND_PART -> b
    11:11:void <init>() -> <init>
    28:29:java.lang.String getMobName(java.util.UUID) -> a
    33:33:java.lang.String getRandomString(java.util.Random,java.lang.String[]) -> a
    38:38:java.util.Random getRandom(java.util.UUID) -> b
    12:17:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.DebugPackets -> pk:
    org.apache.logging.log4j.Logger LOGGER -> a
    65:65:void <init>() -> <init>
    69:76:void sendGameTestAddMarker(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.lang.String,int,int) -> a
    79:82:void sendGameTestClearPacket(net.minecraft.server.level.ServerLevel) -> a
    86:86:void sendPoiPacketsForChunk(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.ChunkPos) -> a
    96:96:void sendPoiAddedPacket(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    122:122:void sendPoiRemovedPacket(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> b
    141:141:void sendPoiTicketCountPacket(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> c
    154:154:void sendVillageSectionsPacket(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> d
    200:200:void sendPathFindingPacket(net.minecraft.world.level.Level,net.minecraft.world.entity.Mob,net.minecraft.world.level.pathfinder.Path,float) -> a
    214:214:void sendNeighborsUpdatePacket(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    247:247:void sendStructurePacket(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    268:268:void sendGoalSelector(net.minecraft.world.level.Level,net.minecraft.world.entity.Mob,net.minecraft.world.entity.ai.goal.GoalSelector) -> a
    272:272:void sendRaids(net.minecraft.server.level.ServerLevel,java.util.Collection) -> a
    283:283:void sendEntityBrain(net.minecraft.world.entity.LivingEntity) -> a
    313:313:void sendBeeInfo(net.minecraft.world.entity.animal.Bee) -> a
    375:375:void sendHiveInfo(net.minecraft.world.level.block.entity.BeehiveBlockEntity) -> a
    406:476:void writeBrain(net.minecraft.world.entity.LivingEntity,net.minecraft.network.FriendlyByteBuf) -> a
    482:498:java.util.List getMemoryDescriptions(long,net.minecraft.world.entity.ai.Brain) -> a
    509:533:java.lang.String getShortDescription(java.lang.Object) -> a
    538:542:void sendPacketToAllPlayers(net.minecraft.server.level.ServerLevel,net.minecraft.network.FriendlyByteBuf,net.minecraft.resources.ResourceLocation) -> a
    466:470:void lambda$writeBrain$7(java.util.List,java.util.UUID,it.unimi.dsi.fastutil.objects.Object2IntMap) -> a
    468:469:void lambda$null$6(java.util.List,java.lang.String,net.minecraft.world.entity.ai.gossip.GossipType,java.lang.Integer) -> a
    449:451:void lambda$writeBrain$5(net.minecraft.network.FriendlyByteBuf,java.lang.String) -> a
    437:437:void lambda$writeBrain$4(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.entity.schedule.Activity) -> a
    277:277:void lambda$sendRaids$3(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.entity.raid.Raid) -> a
    258:261:void lambda$sendGoalSelector$2(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.entity.ai.goal.WrappedGoal) -> a
    91:91:void lambda$sendPoiPacketsForChunk$1(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    90:90:boolean lambda$sendPoiPacketsForChunk$0(net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    66:66:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ServerGamePacketListener -> pl:
    void handleAnimate(net.minecraft.network.protocol.game.ServerboundSwingPacket) -> a
    void handleChat(net.minecraft.network.protocol.game.ServerboundChatPacket) -> a
    void handleClientCommand(net.minecraft.network.protocol.game.ServerboundClientCommandPacket) -> a
    void handleClientInformation(net.minecraft.network.protocol.game.ServerboundClientInformationPacket) -> a
    void handleContainerAck(net.minecraft.network.protocol.game.ServerboundContainerAckPacket) -> a
    void handleContainerButtonClick(net.minecraft.network.protocol.game.ServerboundContainerButtonClickPacket) -> a
    void handleContainerClick(net.minecraft.network.protocol.game.ServerboundContainerClickPacket) -> a
    void handlePlaceRecipe(net.minecraft.network.protocol.game.ServerboundPlaceRecipePacket) -> a
    void handleContainerClose(net.minecraft.network.protocol.game.ServerboundContainerClosePacket) -> a
    void handleCustomPayload(net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket) -> a
    void handleInteract(net.minecraft.network.protocol.game.ServerboundInteractPacket) -> a
    void handleKeepAlive(net.minecraft.network.protocol.game.ServerboundKeepAlivePacket) -> a
    void handleMovePlayer(net.minecraft.network.protocol.game.ServerboundMovePlayerPacket) -> a
    void handlePlayerAbilities(net.minecraft.network.protocol.game.ServerboundPlayerAbilitiesPacket) -> a
    void handlePlayerAction(net.minecraft.network.protocol.game.ServerboundPlayerActionPacket) -> a
    void handlePlayerCommand(net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket) -> a
    void handlePlayerInput(net.minecraft.network.protocol.game.ServerboundPlayerInputPacket) -> a
    void handleSetCarriedItem(net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket) -> a
    void handleSetCreativeModeSlot(net.minecraft.network.protocol.game.ServerboundSetCreativeModeSlotPacket) -> a
    void handleSignUpdate(net.minecraft.network.protocol.game.ServerboundSignUpdatePacket) -> a
    void handleUseItemOn(net.minecraft.network.protocol.game.ServerboundUseItemOnPacket) -> a
    void handleUseItem(net.minecraft.network.protocol.game.ServerboundUseItemPacket) -> a
    void handleTeleportToEntityPacket(net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket) -> a
    void handleResourcePackResponse(net.minecraft.network.protocol.game.ServerboundResourcePackPacket) -> a
    void handlePaddleBoat(net.minecraft.network.protocol.game.ServerboundPaddleBoatPacket) -> a
    void handleMoveVehicle(net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket) -> a
    void handleAcceptTeleportPacket(net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket) -> a
    void handleRecipeBookUpdatePacket(net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket) -> a
    void handleSeenAdvancements(net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket) -> a
    void handleCustomCommandSuggestions(net.minecraft.network.protocol.game.ServerboundCommandSuggestionPacket) -> a
    void handleSetCommandBlock(net.minecraft.network.protocol.game.ServerboundSetCommandBlockPacket) -> a
    void handleSetCommandMinecart(net.minecraft.network.protocol.game.ServerboundSetCommandMinecartPacket) -> a
    void handlePickItem(net.minecraft.network.protocol.game.ServerboundPickItemPacket) -> a
    void handleRenameItem(net.minecraft.network.protocol.game.ServerboundRenameItemPacket) -> a
    void handleSetBeaconPacket(net.minecraft.network.protocol.game.ServerboundSetBeaconPacket) -> a
    void handleSetStructureBlock(net.minecraft.network.protocol.game.ServerboundSetStructureBlockPacket) -> a
    void handleSelectTrade(net.minecraft.network.protocol.game.ServerboundSelectTradePacket) -> a
    void handleEditBook(net.minecraft.network.protocol.game.ServerboundEditBookPacket) -> a
    void handleEntityTagQuery(net.minecraft.network.protocol.game.ServerboundEntityTagQuery) -> a
    void handleBlockEntityTagQuery(net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery) -> a
    void handleSetJigsawBlock(net.minecraft.network.protocol.game.ServerboundSetJigsawBlockPacket) -> a
    void handleChangeDifficulty(net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket) -> a
    void handleLockDifficulty(net.minecraft.network.protocol.game.ServerboundLockDifficultyPacket) -> a
net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket -> pm:
    int id -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(int) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    34:34:int getId() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery -> pn:
    int transactionId -> a
    net.minecraft.core.BlockPos pos -> b
    14:15:void <init>() -> <init>
    17:20:void <init>(int,net.minecraft.core.BlockPos) -> <init>
    24:26:void read(net.minecraft.network.FriendlyByteBuf) -> a
    30:32:void write(net.minecraft.network.FriendlyByteBuf) -> b
    36:37:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    40:40:int getTransactionId() -> b
    44:44:net.minecraft.core.BlockPos getPos() -> c
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket -> po:
    net.minecraft.world.Difficulty difficulty -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(net.minecraft.world.Difficulty) -> <init>
    21:22:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    26:27:void read(net.minecraft.network.FriendlyByteBuf) -> a
    31:32:void write(net.minecraft.network.FriendlyByteBuf) -> b
    35:35:net.minecraft.world.Difficulty getDifficulty() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundChatPacket -> pp:
    java.lang.String message -> a
    13:14:void <init>() -> <init>
    16:22:void <init>(java.lang.String) -> <init>
    26:27:void read(net.minecraft.network.FriendlyByteBuf) -> a
    31:32:void write(net.minecraft.network.FriendlyByteBuf) -> b
    36:37:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    40:40:java.lang.String getMessage() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundClientCommandPacket -> pq:
    net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action action -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    34:34:net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action getAction() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action -> pq$a:
    net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action PERFORM_RESPAWN -> a
    net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action REQUEST_STATS -> b
    net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action[] $VALUES -> c
    37:37:net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action[] values() -> values
    37:37:net.minecraft.network.protocol.game.ServerboundClientCommandPacket$Action valueOf(java.lang.String) -> valueOf
    37:37:void <init>(java.lang.String,int) -> <init>
    37:39:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ServerboundClientInformationPacket -> pr:
    java.lang.String language -> a
    int viewDistance -> b
    net.minecraft.world.entity.player.ChatVisiblity chatVisibility -> c
    boolean chatColors -> d
    int modelCustomisation -> e
    net.minecraft.world.entity.HumanoidArm mainHand -> f
    20:21:void <init>() -> <init>
    23:30:void <init>(java.lang.String,int,net.minecraft.world.entity.player.ChatVisiblity,boolean,int,net.minecraft.world.entity.HumanoidArm) -> <init>
    34:42:void read(net.minecraft.network.FriendlyByteBuf) -> a
    46:52:void write(net.minecraft.network.FriendlyByteBuf) -> b
    56:57:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    60:60:java.lang.String getLanguage() -> b
    64:64:int getViewDistance() -> c
    68:68:net.minecraft.world.entity.player.ChatVisiblity getChatVisibility() -> d
    72:72:boolean getChatColors() -> e
    76:76:int getModelCustomisation() -> f
    80:80:net.minecraft.world.entity.HumanoidArm getMainHand() -> g
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundCommandSuggestionPacket -> ps:
    int id -> a
    java.lang.String command -> b
    13:14:void <init>() -> <init>
    16:19:void <init>(int,java.lang.String) -> <init>
    23:25:void read(net.minecraft.network.FriendlyByteBuf) -> a
    29:31:void write(net.minecraft.network.FriendlyByteBuf) -> b
    35:36:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    39:39:int getId() -> b
    43:43:java.lang.String getCommand() -> c
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundContainerAckPacket -> pt:
    int containerId -> a
    short uid -> b
    boolean accepted -> c
    13:14:void <init>() -> <init>
    16:20:void <init>(int,short,boolean) -> <init>
    24:25:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    29:32:void read(net.minecraft.network.FriendlyByteBuf) -> a
    36:39:void write(net.minecraft.network.FriendlyByteBuf) -> b
    42:42:int getContainerId() -> b
    46:46:short getUid() -> c
    50:50:boolean isAccepted() -> d
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundContainerButtonClickPacket -> pu:
    int containerId -> a
    int buttonId -> b
    12:13:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    22:23:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    27:29:void read(net.minecraft.network.FriendlyByteBuf) -> a
    33:35:void write(net.minecraft.network.FriendlyByteBuf) -> b
    38:38:int getContainerId() -> b
    42:42:int getButtonId() -> c
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundContainerClickPacket -> pv:
    int containerId -> a
    int slotNum -> b
    int buttonNum -> c
    short uid -> d
    net.minecraft.world.item.ItemStack itemStack -> e
    net.minecraft.world.inventory.ClickType clickType -> f
    15:19:void <init>() -> <init>
    15:28:void <init>(int,int,int,net.minecraft.world.inventory.ClickType,net.minecraft.world.item.ItemStack,short) -> <init>
    32:33:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    37:44:void read(net.minecraft.network.FriendlyByteBuf) -> a
    48:55:void write(net.minecraft.network.FriendlyByteBuf) -> b
    58:58:int getContainerId() -> b
    62:62:int getSlotNum() -> c
    66:66:int getButtonNum() -> d
    70:70:short getUid() -> e
    74:74:net.minecraft.world.item.ItemStack getItem() -> f
    78:78:net.minecraft.world.inventory.ClickType getClickType() -> g
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundContainerClosePacket -> pw:
    int containerId -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(int) -> <init>
    20:21:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    25:26:void read(net.minecraft.network.FriendlyByteBuf) -> a
    30:31:void write(net.minecraft.network.FriendlyByteBuf) -> b
    34:34:int getContainerId() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket -> px:
    net.minecraft.resources.ResourceLocation BRAND -> a
    net.minecraft.resources.ResourceLocation identifier -> b
    net.minecraft.network.FriendlyByteBuf data -> c
    18:19:void <init>() -> <init>
    21:24:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> <init>
    28:34:void read(net.minecraft.network.FriendlyByteBuf) -> a
    38:40:void write(net.minecraft.network.FriendlyByteBuf) -> b
    44:48:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    51:51:net.minecraft.resources.ResourceLocation getIdentifier() -> b
    55:55:net.minecraft.network.FriendlyByteBuf getData() -> c
    9:9:void handle(net.minecraft.network.PacketListener) -> a
    13:13:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ServerboundEditBookPacket -> py:
    net.minecraft.world.item.ItemStack book -> a
    boolean signing -> b
    net.minecraft.world.InteractionHand hand -> c
    15:16:void <init>() -> <init>
    18:22:void <init>(net.minecraft.world.item.ItemStack,boolean,net.minecraft.world.InteractionHand) -> <init>
    26:29:void read(net.minecraft.network.FriendlyByteBuf) -> a
    33:36:void write(net.minecraft.network.FriendlyByteBuf) -> b
    40:41:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    44:44:net.minecraft.world.item.ItemStack getBook() -> b
    48:48:boolean isSigning() -> c
    52:52:net.minecraft.world.InteractionHand getHand() -> d
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundEntityTagQuery -> pz:
    int transactionId -> a
    int entityId -> b
    13:14:void <init>() -> <init>
    16:19:void <init>(int,int) -> <init>
    23:25:void read(net.minecraft.network.FriendlyByteBuf) -> a
    29:31:void write(net.minecraft.network.FriendlyByteBuf) -> b
    35:36:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    39:39:int getTransactionId() -> b
    43:43:int getEntityId() -> c
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundInteractPacket -> qa:
    int entityId -> a
    net.minecraft.network.protocol.game.ServerboundInteractPacket$Action action -> b
    net.minecraft.world.phys.Vec3 location -> c
    net.minecraft.world.InteractionHand hand -> d
    19:20:void <init>() -> <init>
    22:25:void <init>(net.minecraft.world.entity.Entity) -> <init>
    27:31:void <init>(net.minecraft.world.entity.Entity,net.minecraft.world.InteractionHand) -> <init>
    33:38:void <init>(net.minecraft.world.entity.Entity,net.minecraft.world.InteractionHand,net.minecraft.world.phys.Vec3) -> <init>
    42:50:void read(net.minecraft.network.FriendlyByteBuf) -> a
    54:64:void write(net.minecraft.network.FriendlyByteBuf) -> b
    68:69:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    73:73:net.minecraft.world.entity.Entity getTarget(net.minecraft.world.level.Level) -> a
    77:77:net.minecraft.network.protocol.game.ServerboundInteractPacket$Action getAction() -> b
    81:81:net.minecraft.world.InteractionHand getHand() -> c
    85:85:net.minecraft.world.phys.Vec3 getLocation() -> d
    13:13:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundInteractPacket$Action -> qa$a:
    net.minecraft.network.protocol.game.ServerboundInteractPacket$Action INTERACT -> a
    net.minecraft.network.protocol.game.ServerboundInteractPacket$Action ATTACK -> b
    net.minecraft.network.protocol.game.ServerboundInteractPacket$Action INTERACT_AT -> c
    net.minecraft.network.protocol.game.ServerboundInteractPacket$Action[] $VALUES -> d
    88:88:net.minecraft.network.protocol.game.ServerboundInteractPacket$Action[] values() -> values
    88:88:net.minecraft.network.protocol.game.ServerboundInteractPacket$Action valueOf(java.lang.String) -> valueOf
    88:88:void <init>(java.lang.String,int) -> <init>
    88:91:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ServerboundKeepAlivePacket -> qb:
    long id -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(long) -> <init>
    20:21:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    25:26:void read(net.minecraft.network.FriendlyByteBuf) -> a
    30:31:void write(net.minecraft.network.FriendlyByteBuf) -> b
    34:34:long getId() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundLockDifficultyPacket -> qc:
    boolean locked -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(boolean) -> <init>
    20:21:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    25:26:void read(net.minecraft.network.FriendlyByteBuf) -> a
    30:31:void write(net.minecraft.network.FriendlyByteBuf) -> b
    34:34:boolean isLocked() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMovePlayerPacket -> qd:
    double x -> a
    double y -> b
    double z -> c
    float yRot -> d
    float xRot -> e
    boolean onGround -> f
    boolean hasPos -> g
    boolean hasRot -> h
    113:114:void <init>() -> <init>
    116:118:void <init>(boolean) -> <init>
    122:123:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    127:128:void read(net.minecraft.network.FriendlyByteBuf) -> a
    132:133:void write(net.minecraft.network.FriendlyByteBuf) -> b
    136:136:double getX(double) -> a
    140:140:double getY(double) -> b
    144:144:double getZ(double) -> c
    148:148:float getYRot(float) -> a
    152:152:float getXRot(float) -> b
    156:156:boolean isOnGround() -> b
    160:160:boolean hasPosition() -> c
    164:164:boolean hasRotation() -> d
    168:169:void setHasPosition(boolean) -> a
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMovePlayerPacket$Pos -> qd$a:
    57:59:void <init>() -> <init>
    61:67:void <init>(double,double,double,boolean) -> <init>
    71:75:void read(net.minecraft.network.FriendlyByteBuf) -> a
    79:83:void write(net.minecraft.network.FriendlyByteBuf) -> b
    56:56:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMovePlayerPacket$PosRot -> qd$b:
    19:22:void <init>() -> <init>
    24:33:void <init>(double,double,double,float,float,boolean) -> <init>
    37:43:void read(net.minecraft.network.FriendlyByteBuf) -> a
    47:53:void write(net.minecraft.network.FriendlyByteBuf) -> b
    18:18:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMovePlayerPacket$Rot -> qd$c:
    87:89:void <init>() -> <init>
    91:96:void <init>(float,float,boolean) -> <init>
    100:103:void read(net.minecraft.network.FriendlyByteBuf) -> a
    107:110:void write(net.minecraft.network.FriendlyByteBuf) -> b
    86:86:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket -> qe:
    double x -> a
    double y -> b
    double z -> c
    float yRot -> d
    float xRot -> e
    16:17:void <init>() -> <init>
    19:25:void <init>(net.minecraft.world.entity.Entity) -> <init>
    29:34:void read(net.minecraft.network.FriendlyByteBuf) -> a
    38:43:void write(net.minecraft.network.FriendlyByteBuf) -> b
    47:48:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    51:51:double getX() -> b
    55:55:double getY() -> c
    59:59:double getZ() -> d
    63:63:float getYRot() -> e
    67:67:float getXRot() -> f
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPaddleBoatPacket -> qf:
    boolean left -> a
    boolean right -> b
    12:13:void <init>() -> <init>
    15:18:void <init>(boolean,boolean) -> <init>
    22:24:void read(net.minecraft.network.FriendlyByteBuf) -> a
    28:30:void write(net.minecraft.network.FriendlyByteBuf) -> b
    34:35:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    38:38:boolean getLeft() -> b
    42:42:boolean getRight() -> c
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPickItemPacket -> qg:
    int slot -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(int) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    34:34:int getSlot() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPlaceRecipePacket -> qh:
    int containerId -> a
    net.minecraft.resources.ResourceLocation recipe -> b
    boolean shiftDown -> c
    15:16:void <init>() -> <init>
    18:22:void <init>(int,net.minecraft.world.item.crafting.Recipe,boolean) -> <init>
    26:29:void read(net.minecraft.network.FriendlyByteBuf) -> a
    33:36:void write(net.minecraft.network.FriendlyByteBuf) -> b
    40:41:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    44:44:int getContainerId() -> b
    48:48:net.minecraft.resources.ResourceLocation getRecipe() -> c
    52:52:boolean isShiftDown() -> d
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPlayerAbilitiesPacket -> qi:
    boolean invulnerable -> a
    boolean isFlying -> b
    boolean canFly -> c
    boolean instabuild -> d
    float flyingSpeed -> e
    float walkingSpeed -> f
    22:23:void <init>() -> <init>
    25:32:void <init>(net.minecraft.world.entity.player.Abilities) -> <init>
    36:44:void read(net.minecraft.network.FriendlyByteBuf) -> a
    48:66:void write(net.minecraft.network.FriendlyByteBuf) -> b
    70:71:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    74:74:boolean isInvulnerable() -> b
    78:79:void setInvulnerable(boolean) -> a
    82:82:boolean isFlying() -> c
    86:87:void setFlying(boolean) -> b
    90:90:boolean canFly() -> d
    94:95:void setCanFly(boolean) -> c
    98:98:boolean canInstabuild() -> e
    102:103:void setInstabuild(boolean) -> d
    106:106:float getFlyingSpeed() -> f
    110:111:void setFlyingSpeed(float) -> a
    114:114:float getWalkingSpeed() -> g
    118:119:void setWalkingSpeed(float) -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPlayerActionPacket -> qj:
    net.minecraft.core.BlockPos pos -> a
    net.minecraft.core.Direction direction -> b
    net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action action -> c
    15:16:void <init>() -> <init>
    18:22:void <init>(net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> <init>
    26:29:void read(net.minecraft.network.FriendlyByteBuf) -> a
    33:36:void write(net.minecraft.network.FriendlyByteBuf) -> b
    40:41:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    44:44:net.minecraft.core.BlockPos getPos() -> b
    48:48:net.minecraft.core.Direction getDirection() -> c
    52:52:net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action getAction() -> d
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action -> qj$a:
    net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action START_DESTROY_BLOCK -> a
    net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action ABORT_DESTROY_BLOCK -> b
    net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action STOP_DESTROY_BLOCK -> c
    net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action DROP_ALL_ITEMS -> d
    net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action DROP_ITEM -> e
    net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action RELEASE_USE_ITEM -> f
    net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action SWAP_HELD_ITEMS -> g
    net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action[] $VALUES -> h
    55:55:net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action[] values() -> values
    55:55:net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action valueOf(java.lang.String) -> valueOf
    55:55:void <init>(java.lang.String,int) -> <init>
    55:62:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket -> qk:
    int id -> a
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action action -> b
    int data -> c
    14:15:void <init>() -> <init>
    18:19:void <init>(net.minecraft.world.entity.Entity,net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action) -> <init>
    21:25:void <init>(net.minecraft.world.entity.Entity,net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action,int) -> <init>
    29:32:void read(net.minecraft.network.FriendlyByteBuf) -> a
    36:39:void write(net.minecraft.network.FriendlyByteBuf) -> b
    43:44:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    47:47:int getId() -> b
    51:51:net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action getAction() -> c
    55:55:int getData() -> d
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action -> qk$a:
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action PRESS_SHIFT_KEY -> a
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action RELEASE_SHIFT_KEY -> b
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action STOP_SLEEPING -> c
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action START_SPRINTING -> d
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action STOP_SPRINTING -> e
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action START_RIDING_JUMP -> f
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action STOP_RIDING_JUMP -> g
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action OPEN_INVENTORY -> h
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action START_FALL_FLYING -> i
    net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action[] $VALUES -> j
    58:58:net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action[] values() -> values
    58:58:net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket$Action valueOf(java.lang.String) -> valueOf
    58:58:void <init>(java.lang.String,int) -> <init>
    58:67:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ServerboundPlayerInputPacket -> ql:
    float xxa -> a
    float zza -> b
    boolean isJumping -> c
    boolean isShiftKeyDown -> d
    17:18:void <init>() -> <init>
    20:25:void <init>(float,float,boolean,boolean) -> <init>
    29:35:void read(net.minecraft.network.FriendlyByteBuf) -> a
    39:50:void write(net.minecraft.network.FriendlyByteBuf) -> b
    54:55:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    58:58:float getXxa() -> b
    62:62:float getZza() -> c
    66:66:boolean isJumping() -> d
    70:70:boolean isShiftKeyDown() -> e
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket -> qm:
    net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose purpose -> a
    net.minecraft.resources.ResourceLocation recipe -> b
    boolean guiOpen -> c
    boolean filteringCraftable -> d
    boolean furnaceGuiOpen -> e
    boolean furnaceFilteringCraftable -> f
    boolean blastFurnaceGuiOpen -> g
    boolean blastFurnaceFilteringCraftable -> h
    boolean smokerGuiOpen -> i
    boolean smokerFilteringCraftable -> j
    27:28:void <init>() -> <init>
    30:33:void <init>(net.minecraft.world.item.crafting.Recipe) -> <init>
    35:45:void <init>(boolean,boolean,boolean,boolean,boolean,boolean) -> <init>
    49:62:void read(net.minecraft.network.FriendlyByteBuf) -> a
    66:80:void write(net.minecraft.network.FriendlyByteBuf) -> b
    84:85:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    88:88:net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose getPurpose() -> b
    92:92:net.minecraft.resources.ResourceLocation getRecipe() -> c
    96:96:boolean isGuiOpen() -> d
    100:100:boolean isFilteringCraftable() -> e
    104:104:boolean isFurnaceGuiOpen() -> f
    108:108:boolean isFurnaceFilteringCraftable() -> g
    112:112:boolean isBlastFurnaceGuiOpen() -> h
    116:116:boolean isBlastFurnaceFilteringCraftable() -> i
    120:120:boolean isSmokerGuiOpen() -> j
    124:124:boolean isSmokerFilteringCraftable() -> k
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose -> qm$a:
    net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose SHOWN -> a
    net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose SETTINGS -> b
    net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose[] $VALUES -> c
    11:11:net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose[] values() -> values
    11:11:net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket$Purpose valueOf(java.lang.String) -> valueOf
    11:11:void <init>(java.lang.String,int) -> <init>
    11:12:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ServerboundRenameItemPacket -> qn:
    java.lang.String name -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(java.lang.String) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    34:34:java.lang.String getName() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundResourcePackPacket -> qo:
    net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action action -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    34:34:net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action getAction() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action -> qo$a:
    net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action SUCCESSFULLY_LOADED -> a
    net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action DECLINED -> b
    net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action FAILED_DOWNLOAD -> c
    net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action ACCEPTED -> d
    net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action[] $VALUES -> e
    37:37:net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action[] values() -> values
    37:37:net.minecraft.network.protocol.game.ServerboundResourcePackPacket$Action valueOf(java.lang.String) -> valueOf
    37:37:void <init>(java.lang.String,int) -> <init>
    37:41:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket -> qp:
    net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket$Action action -> a
    net.minecraft.resources.ResourceLocation tab -> b
    15:16:void <init>() -> <init>
    18:21:void <init>(net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket$Action,net.minecraft.resources.ResourceLocation) -> <init>
    24:24:net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket openedTab(net.minecraft.advancements.Advancement) -> a
    28:28:net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket closedScreen() -> b
    33:37:void read(net.minecraft.network.FriendlyByteBuf) -> a
    41:45:void write(net.minecraft.network.FriendlyByteBuf) -> b
    49:50:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    53:53:net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket$Action getAction() -> c
    57:57:net.minecraft.resources.ResourceLocation getTab() -> d
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket$Action -> qp$a:
    net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket$Action OPENED_TAB -> a
    net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket$Action CLOSED_SCREEN -> b
    net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket$Action[] $VALUES -> c
    60:60:net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket$Action[] values() -> values
    60:60:net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket$Action valueOf(java.lang.String) -> valueOf
    60:60:void <init>(java.lang.String,int) -> <init>
    60:62:void <clinit>() -> <clinit>
net.minecraft.network.protocol.game.ServerboundSelectTradePacket -> qq:
    int item -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(int) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    34:34:int getItem() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetBeaconPacket -> qr:
    int primary -> a
    int secondary -> b
    12:13:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    22:24:void read(net.minecraft.network.FriendlyByteBuf) -> a
    28:30:void write(net.minecraft.network.FriendlyByteBuf) -> b
    34:35:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    38:38:int getPrimary() -> b
    42:42:int getSecondary() -> c
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket -> qs:
    int slot -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(int) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    34:34:int getSlot() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetCommandBlockPacket -> qt:
    net.minecraft.core.BlockPos pos -> a
    java.lang.String command -> b
    boolean trackOutput -> c
    boolean conditional -> d
    boolean automatic -> e
    net.minecraft.world.level.block.entity.CommandBlockEntity$Mode mode -> f
    22:23:void <init>() -> <init>
    25:32:void <init>(net.minecraft.core.BlockPos,java.lang.String,net.minecraft.world.level.block.entity.CommandBlockEntity$Mode,boolean,boolean,boolean) -> <init>
    36:43:void read(net.minecraft.network.FriendlyByteBuf) -> a
    47:61:void write(net.minecraft.network.FriendlyByteBuf) -> b
    65:66:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    69:69:net.minecraft.core.BlockPos getPos() -> b
    73:73:java.lang.String getCommand() -> c
    77:77:boolean isTrackOutput() -> d
    81:81:boolean isConditional() -> e
    85:85:boolean isAutomatic() -> f
    89:89:net.minecraft.world.level.block.entity.CommandBlockEntity$Mode getMode() -> g
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetCommandMinecartPacket -> qu:
    int entity -> a
    java.lang.String command -> b
    boolean trackOutput -> c
    18:19:void <init>() -> <init>
    21:25:void <init>(int,java.lang.String,boolean) -> <init>
    29:32:void read(net.minecraft.network.FriendlyByteBuf) -> a
    36:39:void write(net.minecraft.network.FriendlyByteBuf) -> b
    43:44:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    48:52:net.minecraft.world.level.BaseCommandBlock getCommandBlock(net.minecraft.world.level.Level) -> a
    57:57:java.lang.String getCommand() -> b
    61:61:boolean isTrackOutput() -> c
    13:13:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetCreativeModeSlotPacket -> qv:
    int slotNum -> a
    net.minecraft.world.item.ItemStack itemStack -> b
    11:14:void <init>() -> <init>
    11:19:void <init>(int,net.minecraft.world.item.ItemStack) -> <init>
    23:24:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    28:30:void read(net.minecraft.network.FriendlyByteBuf) -> a
    34:36:void write(net.minecraft.network.FriendlyByteBuf) -> b
    39:39:int getSlotNum() -> b
    43:43:net.minecraft.world.item.ItemStack getItem() -> c
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetJigsawBlockPacket -> qw:
    net.minecraft.core.BlockPos pos -> a
    net.minecraft.resources.ResourceLocation attachementType -> b
    net.minecraft.resources.ResourceLocation targetPool -> c
    java.lang.String finalState -> d
    16:17:void <init>() -> <init>
    19:24:void <init>(net.minecraft.core.BlockPos,net.minecraft.resources.ResourceLocation,net.minecraft.resources.ResourceLocation,java.lang.String) -> <init>
    28:32:void read(net.minecraft.network.FriendlyByteBuf) -> a
    36:40:void write(net.minecraft.network.FriendlyByteBuf) -> b
    44:45:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    48:48:net.minecraft.core.BlockPos getPos() -> b
    52:52:net.minecraft.resources.ResourceLocation getTargetPool() -> c
    56:56:net.minecraft.resources.ResourceLocation getAttachementType() -> d
    60:60:java.lang.String getFinalState() -> e
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSetStructureBlockPacket -> qx:
    net.minecraft.core.BlockPos pos -> a
    net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType updateType -> b
    net.minecraft.world.level.block.state.properties.StructureMode mode -> c
    java.lang.String name -> d
    net.minecraft.core.BlockPos offset -> e
    net.minecraft.core.BlockPos size -> f
    net.minecraft.world.level.block.Mirror mirror -> g
    net.minecraft.world.level.block.Rotation rotation -> h
    java.lang.String data -> i
    boolean ignoreEntities -> j
    boolean showAir -> k
    boolean showBoundingBox -> l
    float integrity -> m
    long seed -> n
    34:35:void <init>() -> <init>
    37:52:void <init>(net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType,net.minecraft.world.level.block.state.properties.StructureMode,java.lang.String,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Mirror,net.minecraft.world.level.block.Rotation,java.lang.String,boolean,boolean,boolean,float,long) -> <init>
    56:71:void read(net.minecraft.network.FriendlyByteBuf) -> a
    75:102:void write(net.minecraft.network.FriendlyByteBuf) -> b
    106:107:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    110:110:net.minecraft.core.BlockPos getPos() -> b
    114:114:net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType getUpdateType() -> c
    118:118:net.minecraft.world.level.block.state.properties.StructureMode getMode() -> d
    122:122:java.lang.String getName() -> e
    126:126:net.minecraft.core.BlockPos getOffset() -> f
    130:130:net.minecraft.core.BlockPos getSize() -> g
    134:134:net.minecraft.world.level.block.Mirror getMirror() -> h
    138:138:net.minecraft.world.level.block.Rotation getRotation() -> i
    142:142:java.lang.String getData() -> j
    146:146:boolean isIgnoreEntities() -> k
    150:150:boolean isShowAir() -> l
    154:154:boolean isShowBoundingBox() -> m
    158:158:float getIntegrity() -> n
    162:162:long getSeed() -> o
    14:14:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSignUpdatePacket -> qy:
    net.minecraft.core.BlockPos pos -> a
    java.lang.String[] lines -> b
    15:16:void <init>() -> <init>
    18:23:void <init>(net.minecraft.core.BlockPos,net.minecraft.network.chat.Component,net.minecraft.network.chat.Component,net.minecraft.network.chat.Component,net.minecraft.network.chat.Component) -> <init>
    27:32:void read(net.minecraft.network.FriendlyByteBuf) -> a
    36:40:void write(net.minecraft.network.FriendlyByteBuf) -> b
    44:45:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    48:48:net.minecraft.core.BlockPos getPos() -> b
    52:52:java.lang.String[] getLines() -> c
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundSwingPacket -> qz:
    net.minecraft.world.InteractionHand hand -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(net.minecraft.world.InteractionHand) -> <init>
    21:22:void read(net.minecraft.network.FriendlyByteBuf) -> a
    26:27:void write(net.minecraft.network.FriendlyByteBuf) -> b
    31:32:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    35:35:net.minecraft.world.InteractionHand getHand() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket -> ra:
    java.util.UUID uuid -> a
    15:16:void <init>() -> <init>
    18:20:void <init>(java.util.UUID) -> <init>
    24:25:void read(net.minecraft.network.FriendlyByteBuf) -> a
    29:30:void write(net.minecraft.network.FriendlyByteBuf) -> b
    34:35:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    39:39:net.minecraft.world.entity.Entity getEntity(net.minecraft.server.level.ServerLevel) -> a
    12:12:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundUseItemOnPacket -> rb:
    net.minecraft.world.phys.BlockHitResult blockHit -> a
    net.minecraft.world.InteractionHand hand -> b
    14:15:void <init>() -> <init>
    17:20:void <init>(net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> <init>
    24:26:void read(net.minecraft.network.FriendlyByteBuf) -> a
    30:32:void write(net.minecraft.network.FriendlyByteBuf) -> b
    36:37:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    40:40:net.minecraft.world.InteractionHand getHand() -> b
    44:44:net.minecraft.world.phys.BlockHitResult getHitResult() -> c
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.ServerboundUseItemPacket -> rc:
    net.minecraft.world.InteractionHand hand -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(net.minecraft.world.InteractionHand) -> <init>
    21:22:void read(net.minecraft.network.FriendlyByteBuf) -> a
    26:27:void write(net.minecraft.network.FriendlyByteBuf) -> b
    31:32:void handle(net.minecraft.network.protocol.game.ServerGamePacketListener) -> a
    35:35:net.minecraft.world.InteractionHand getHand() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.game.package-info -> rd:
net.minecraft.network.protocol.handshake.ClientIntentionPacket -> re:
    int protocolVersion -> a
    java.lang.String hostName -> b
    int port -> c
    net.minecraft.network.ConnectionProtocol intention -> d
    20:21:void <init>() -> <init>
    23:28:void <init>(java.lang.String,int,net.minecraft.network.ConnectionProtocol) -> <init>
    32:36:void read(net.minecraft.network.FriendlyByteBuf) -> a
    40:44:void write(net.minecraft.network.FriendlyByteBuf) -> b
    48:49:void handle(net.minecraft.network.protocol.handshake.ServerHandshakePacketListener) -> a
    52:52:net.minecraft.network.ConnectionProtocol getIntention() -> b
    56:56:int getProtocolVersion() -> c
    60:60:java.lang.String getHostName() -> d
    64:64:int getPort() -> e
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.handshake.ServerHandshakePacketListener -> rf:
    void handleIntention(net.minecraft.network.protocol.handshake.ClientIntentionPacket) -> a
net.minecraft.network.protocol.handshake.package-info -> rg:
net.minecraft.network.protocol.login.ClientLoginPacketListener -> rh:
    void handleHello(net.minecraft.network.protocol.login.ClientboundHelloPacket) -> a
    void handleGameProfile(net.minecraft.network.protocol.login.ClientboundGameProfilePacket) -> a
    void handleDisconnect(net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket) -> a
    void handleCompression(net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket) -> a
    void handleCustomQuery(net.minecraft.network.protocol.login.ClientboundCustomQueryPacket) -> a
net.minecraft.network.protocol.login.ClientboundCustomQueryPacket -> ri:
    int transactionId -> a
    net.minecraft.resources.ResourceLocation identifier -> b
    net.minecraft.network.FriendlyByteBuf data -> c
    16:17:void <init>() -> <init>
    19:23:void <init>(int,net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> <init>
    27:34:void read(net.minecraft.network.FriendlyByteBuf) -> a
    38:41:void write(net.minecraft.network.FriendlyByteBuf) -> b
    45:46:void handle(net.minecraft.network.protocol.login.ClientLoginPacketListener) -> a
    49:49:int getTransactionId() -> b
    53:53:net.minecraft.resources.ResourceLocation getIdentifier() -> c
    57:57:net.minecraft.network.FriendlyByteBuf getData() -> d
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ClientboundGameProfilePacket -> rj:
    com.mojang.authlib.GameProfile gameProfile -> a
    14:15:void <init>() -> <init>
    17:19:void <init>(com.mojang.authlib.GameProfile) -> <init>
    23:27:void read(net.minecraft.network.FriendlyByteBuf) -> a
    31:34:void write(net.minecraft.network.FriendlyByteBuf) -> b
    38:39:void handle(net.minecraft.network.protocol.login.ClientLoginPacketListener) -> a
    42:42:com.mojang.authlib.GameProfile getGameProfile() -> b
    11:11:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ClientboundHelloPacket -> rk:
    java.lang.String serverId -> a
    java.security.PublicKey publicKey -> b
    byte[] nonce -> c
    15:16:void <init>() -> <init>
    18:22:void <init>(java.lang.String,java.security.PublicKey,byte[]) -> <init>
    26:29:void read(net.minecraft.network.FriendlyByteBuf) -> a
    33:36:void write(net.minecraft.network.FriendlyByteBuf) -> b
    40:41:void handle(net.minecraft.network.protocol.login.ClientLoginPacketListener) -> a
    44:44:java.lang.String getServerId() -> b
    48:48:java.security.PublicKey getPublicKey() -> c
    52:52:byte[] getNonce() -> d
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ClientboundLoginCompressionPacket -> rl:
    int compressionThreshold -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(int) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.login.ClientLoginPacketListener) -> a
    34:34:int getCompressionThreshold() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket -> rm:
    net.minecraft.network.chat.Component reason -> a
    12:13:void <init>() -> <init>
    15:17:void <init>(net.minecraft.network.chat.Component) -> <init>
    21:22:void read(net.minecraft.network.FriendlyByteBuf) -> a
    26:27:void write(net.minecraft.network.FriendlyByteBuf) -> b
    31:32:void handle(net.minecraft.network.protocol.login.ClientLoginPacketListener) -> a
    35:35:net.minecraft.network.chat.Component getReason() -> b
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ServerLoginPacketListener -> rn:
    void handleHello(net.minecraft.network.protocol.login.ServerboundHelloPacket) -> a
    void handleKey(net.minecraft.network.protocol.login.ServerboundKeyPacket) -> a
    void handleCustomQueryPacket(net.minecraft.network.protocol.login.ServerboundCustomQueryPacket) -> a
net.minecraft.network.protocol.login.ServerboundCustomQueryPacket -> ro:
    int transactionId -> a
    net.minecraft.network.FriendlyByteBuf data -> b
    15:16:void <init>() -> <init>
    18:21:void <init>(int,net.minecraft.network.FriendlyByteBuf) -> <init>
    25:35:void read(net.minecraft.network.FriendlyByteBuf) -> a
    39:46:void write(net.minecraft.network.FriendlyByteBuf) -> b
    50:51:void handle(net.minecraft.network.protocol.login.ServerLoginPacketListener) -> a
    54:54:int getTransactionId() -> b
    58:58:net.minecraft.network.FriendlyByteBuf getData() -> c
    9:9:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ServerboundHelloPacket -> rp:
    com.mojang.authlib.GameProfile gameProfile -> a
    13:14:void <init>() -> <init>
    16:18:void <init>(com.mojang.authlib.GameProfile) -> <init>
    22:23:void read(net.minecraft.network.FriendlyByteBuf) -> a
    27:28:void write(net.minecraft.network.FriendlyByteBuf) -> b
    32:33:void handle(net.minecraft.network.protocol.login.ServerLoginPacketListener) -> a
    36:36:com.mojang.authlib.GameProfile getGameProfile() -> b
    10:10:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.ServerboundKeyPacket -> rq:
    byte[] keybytes -> a
    byte[] nonce -> b
    13:17:void <init>() -> <init>
    13:22:void <init>(javax.crypto.SecretKey,java.security.PublicKey,byte[]) -> <init>
    26:28:void read(net.minecraft.network.FriendlyByteBuf) -> a
    32:34:void write(net.minecraft.network.FriendlyByteBuf) -> b
    38:39:void handle(net.minecraft.network.protocol.login.ServerLoginPacketListener) -> a
    42:42:javax.crypto.SecretKey getSecretKey(java.security.PrivateKey) -> a
    46:49:byte[] getNonce(java.security.PrivateKey) -> b
    12:12:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.login.package-info -> rr:
net.minecraft.network.protocol.package-info -> rs:
net.minecraft.network.protocol.status.ClientStatusPacketListener -> rt:
    void handleStatusResponse(net.minecraft.network.protocol.status.ClientboundStatusResponsePacket) -> a
    void handlePongResponse(net.minecraft.network.protocol.status.ClientboundPongResponsePacket) -> a
net.minecraft.network.protocol.status.ClientboundPongResponsePacket -> ru:
    long time -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(long) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.status.ClientStatusPacketListener) -> a
    34:34:long getTime() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.status.ClientboundStatusResponsePacket -> rv:
    com.google.gson.Gson GSON -> a
    net.minecraft.network.protocol.status.ServerStatus status -> b
    26:27:void <init>() -> <init>
    29:31:void <init>(net.minecraft.network.protocol.status.ServerStatus) -> <init>
    35:36:void read(net.minecraft.network.FriendlyByteBuf) -> a
    40:41:void write(net.minecraft.network.FriendlyByteBuf) -> b
    45:46:void handle(net.minecraft.network.protocol.status.ClientStatusPacketListener) -> a
    49:49:net.minecraft.network.protocol.status.ServerStatus getStatus() -> b
    14:14:void handle(net.minecraft.network.PacketListener) -> a
    15:22:void <clinit>() -> <clinit>
net.minecraft.network.protocol.status.ServerStatus -> rw:
    net.minecraft.network.chat.Component description -> a
    net.minecraft.network.protocol.status.ServerStatus$Players players -> b
    net.minecraft.network.protocol.status.ServerStatus$Version version -> c
    java.lang.String favicon -> d
    18:18:void <init>() -> <init>
    28:28:net.minecraft.network.chat.Component getDescription() -> a
    32:33:void setDescription(net.minecraft.network.chat.Component) -> a
    36:36:net.minecraft.network.protocol.status.ServerStatus$Players getPlayers() -> b
    40:41:void setPlayers(net.minecraft.network.protocol.status.ServerStatus$Players) -> a
    44:44:net.minecraft.network.protocol.status.ServerStatus$Version getVersion() -> c
    48:49:void setVersion(net.minecraft.network.protocol.status.ServerStatus$Version) -> a
    52:53:void setFavicon(java.lang.String) -> a
    56:56:java.lang.String getFavicon() -> d
net.minecraft.network.protocol.status.ServerStatus$Players -> rw$a:
    int maxPlayers -> a
    int numPlayers -> b
    com.mojang.authlib.GameProfile[] sample -> c
    64:67:void <init>(int,int) -> <init>
    70:70:int getMaxPlayers() -> a
    74:74:int getNumPlayers() -> b
    78:78:com.mojang.authlib.GameProfile[] getSample() -> c
    82:83:void setSample(com.mojang.authlib.GameProfile[]) -> a
net.minecraft.network.protocol.status.ServerStatus$Players$Serializer -> rw$a$a:
    85:85:void <init>() -> <init>
    88:104:net.minecraft.network.protocol.status.ServerStatus$Players deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    109:128:com.google.gson.JsonElement serialize(net.minecraft.network.protocol.status.ServerStatus$Players,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    85:85:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    85:85:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.network.protocol.status.ServerStatus$Serializer -> rw$b:
    167:167:void <init>() -> <init>
    170:189:net.minecraft.network.protocol.status.ServerStatus deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    194:212:com.google.gson.JsonElement serialize(net.minecraft.network.protocol.status.ServerStatus,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    167:167:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    167:167:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.network.protocol.status.ServerStatus$Version -> rw$c:
    java.lang.String name -> a
    int protocol -> b
    137:140:void <init>(java.lang.String,int) -> <init>
    143:143:java.lang.String getName() -> a
    147:147:int getProtocol() -> b
net.minecraft.network.protocol.status.ServerStatus$Version$Serializer -> rw$c$a:
    150:150:void <init>() -> <init>
    153:154:net.minecraft.network.protocol.status.ServerStatus$Version deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    159:162:com.google.gson.JsonElement serialize(net.minecraft.network.protocol.status.ServerStatus$Version,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    150:150:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    150:150:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.network.protocol.status.ServerStatusPacketListener -> rx:
    void handlePingRequest(net.minecraft.network.protocol.status.ServerboundPingRequestPacket) -> a
    void handleStatusRequest(net.minecraft.network.protocol.status.ServerboundStatusRequestPacket) -> a
net.minecraft.network.protocol.status.ServerboundPingRequestPacket -> ry:
    long time -> a
    11:12:void <init>() -> <init>
    14:16:void <init>(long) -> <init>
    20:21:void read(net.minecraft.network.FriendlyByteBuf) -> a
    25:26:void write(net.minecraft.network.FriendlyByteBuf) -> b
    30:31:void handle(net.minecraft.network.protocol.status.ServerStatusPacketListener) -> a
    34:34:long getTime() -> b
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.status.ServerboundStatusRequestPacket -> rz:
    9:10:void <init>() -> <init>
    14:14:void read(net.minecraft.network.FriendlyByteBuf) -> a
    18:18:void write(net.minecraft.network.FriendlyByteBuf) -> b
    22:23:void handle(net.minecraft.network.protocol.status.ServerStatusPacketListener) -> a
    8:8:void handle(net.minecraft.network.PacketListener) -> a
net.minecraft.network.protocol.status.package-info -> sa:
net.minecraft.network.syncher.EntityDataAccessor -> sb:
    int id -> a
    net.minecraft.network.syncher.EntityDataSerializer serializer -> b
    7:10:void <init>(int,net.minecraft.network.syncher.EntityDataSerializer) -> <init>
    13:13:int getId() -> a
    17:17:net.minecraft.network.syncher.EntityDataSerializer getSerializer() -> b
    22:31:boolean equals(java.lang.Object) -> equals
    36:36:int hashCode() -> hashCode
    41:41:java.lang.String toString() -> toString
net.minecraft.network.syncher.EntityDataSerializer -> sc:
    void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
    java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    11:11:net.minecraft.network.syncher.EntityDataAccessor createAccessor(int) -> a
    java.lang.Object copy(java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers -> sd:
    net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap SERIALIZERS -> t
    net.minecraft.network.syncher.EntityDataSerializer BYTE -> a
    net.minecraft.network.syncher.EntityDataSerializer INT -> b
    net.minecraft.network.syncher.EntityDataSerializer FLOAT -> c
    net.minecraft.network.syncher.EntityDataSerializer STRING -> d
    net.minecraft.network.syncher.EntityDataSerializer COMPONENT -> e
    net.minecraft.network.syncher.EntityDataSerializer OPTIONAL_COMPONENT -> f
    net.minecraft.network.syncher.EntityDataSerializer ITEM_STACK -> g
    net.minecraft.network.syncher.EntityDataSerializer BLOCK_STATE -> h
    net.minecraft.network.syncher.EntityDataSerializer BOOLEAN -> i
    net.minecraft.network.syncher.EntityDataSerializer PARTICLE -> j
    net.minecraft.network.syncher.EntityDataSerializer ROTATIONS -> k
    net.minecraft.network.syncher.EntityDataSerializer BLOCK_POS -> l
    net.minecraft.network.syncher.EntityDataSerializer OPTIONAL_BLOCK_POS -> m
    net.minecraft.network.syncher.EntityDataSerializer DIRECTION -> n
    net.minecraft.network.syncher.EntityDataSerializer OPTIONAL_UUID -> o
    net.minecraft.network.syncher.EntityDataSerializer COMPOUND_TAG -> p
    net.minecraft.network.syncher.EntityDataSerializer VILLAGER_DATA -> q
    net.minecraft.network.syncher.EntityDataSerializer OPTIONAL_UNSIGNED_INT -> r
    net.minecraft.network.syncher.EntityDataSerializer POSE -> s
    413:414:void registerSerializer(net.minecraft.network.syncher.EntityDataSerializer) -> a
    418:418:net.minecraft.network.syncher.EntityDataSerializer getSerializer(int) -> a
    422:422:int getSerializedId(net.minecraft.network.syncher.EntityDataSerializer) -> b
    425:426:void <init>() -> <init>
    25:410:void <clinit>() -> <clinit>
net.minecraft.network.syncher.EntityDataSerializers$1 -> sd$1:
    27:27:void <init>() -> <init>
    30:31:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Byte) -> a
    35:35:java.lang.Byte read(net.minecraft.network.FriendlyByteBuf) -> b
    40:40:java.lang.Byte copy(java.lang.Byte) -> a
    27:27:java.lang.Object copy(java.lang.Object) -> a
    27:27:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    27:27:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$10 -> sd$2:
    194:194:void <init>() -> <init>
    197:199:void write(net.minecraft.network.FriendlyByteBuf,net.minecraft.core.particles.ParticleOptions) -> a
    203:203:net.minecraft.core.particles.ParticleOptions read(net.minecraft.network.FriendlyByteBuf) -> b
    207:207:net.minecraft.core.particles.ParticleOptions readParticle(net.minecraft.network.FriendlyByteBuf,net.minecraft.core.particles.ParticleType) -> a
    212:212:net.minecraft.core.particles.ParticleOptions copy(net.minecraft.core.particles.ParticleOptions) -> a
    194:194:java.lang.Object copy(java.lang.Object) -> a
    194:194:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    194:194:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$11 -> sd$3:
    216:216:void <init>() -> <init>
    219:222:void write(net.minecraft.network.FriendlyByteBuf,net.minecraft.core.Rotations) -> a
    226:226:net.minecraft.core.Rotations read(net.minecraft.network.FriendlyByteBuf) -> b
    231:231:net.minecraft.core.Rotations copy(net.minecraft.core.Rotations) -> a
    216:216:java.lang.Object copy(java.lang.Object) -> a
    216:216:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    216:216:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$12 -> sd$4:
    235:235:void <init>() -> <init>
    238:239:void write(net.minecraft.network.FriendlyByteBuf,net.minecraft.core.BlockPos) -> a
    243:243:net.minecraft.core.BlockPos read(net.minecraft.network.FriendlyByteBuf) -> b
    248:248:net.minecraft.core.BlockPos copy(net.minecraft.core.BlockPos) -> a
    235:235:java.lang.Object copy(java.lang.Object) -> a
    235:235:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    235:235:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$13 -> sd$5:
    252:252:void <init>() -> <init>
    255:259:void write(net.minecraft.network.FriendlyByteBuf,java.util.Optional) -> a
    263:266:java.util.Optional read(net.minecraft.network.FriendlyByteBuf) -> b
    271:271:java.util.Optional copy(java.util.Optional) -> a
    252:252:java.lang.Object copy(java.lang.Object) -> a
    252:252:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    252:252:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$14 -> sd$6:
    275:275:void <init>() -> <init>
    278:279:void write(net.minecraft.network.FriendlyByteBuf,net.minecraft.core.Direction) -> a
    283:283:net.minecraft.core.Direction read(net.minecraft.network.FriendlyByteBuf) -> b
    288:288:net.minecraft.core.Direction copy(net.minecraft.core.Direction) -> a
    275:275:java.lang.Object copy(java.lang.Object) -> a
    275:275:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    275:275:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$15 -> sd$7:
    292:292:void <init>() -> <init>
    295:299:void write(net.minecraft.network.FriendlyByteBuf,java.util.Optional) -> a
    303:306:java.util.Optional read(net.minecraft.network.FriendlyByteBuf) -> b
    311:311:java.util.Optional copy(java.util.Optional) -> a
    292:292:java.lang.Object copy(java.lang.Object) -> a
    292:292:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    292:292:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$16 -> sd$8:
    315:315:void <init>() -> <init>
    318:319:void write(net.minecraft.network.FriendlyByteBuf,net.minecraft.nbt.CompoundTag) -> a
    323:323:net.minecraft.nbt.CompoundTag read(net.minecraft.network.FriendlyByteBuf) -> b
    328:328:net.minecraft.nbt.CompoundTag copy(net.minecraft.nbt.CompoundTag) -> a
    315:315:java.lang.Object copy(java.lang.Object) -> a
    315:315:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    315:315:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$17 -> sd$9:
    332:332:void <init>() -> <init>
    335:338:void write(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.entity.npc.VillagerData) -> a
    342:345:net.minecraft.world.entity.npc.VillagerData read(net.minecraft.network.FriendlyByteBuf) -> b
    351:351:net.minecraft.world.entity.npc.VillagerData copy(net.minecraft.world.entity.npc.VillagerData) -> a
    332:332:java.lang.Object copy(java.lang.Object) -> a
    332:332:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    332:332:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$18 -> sd$10:
    355:355:void <init>() -> <init>
    358:359:void write(net.minecraft.network.FriendlyByteBuf,java.util.OptionalInt) -> a
    363:364:java.util.OptionalInt read(net.minecraft.network.FriendlyByteBuf) -> b
    369:369:java.util.OptionalInt copy(java.util.OptionalInt) -> a
    355:355:java.lang.Object copy(java.lang.Object) -> a
    355:355:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    355:355:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$19 -> sd$11:
    373:373:void <init>() -> <init>
    376:377:void write(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.entity.Pose) -> a
    381:381:net.minecraft.world.entity.Pose read(net.minecraft.network.FriendlyByteBuf) -> b
    386:386:net.minecraft.world.entity.Pose copy(net.minecraft.world.entity.Pose) -> a
    373:373:java.lang.Object copy(java.lang.Object) -> a
    373:373:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    373:373:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$2 -> sd$12:
    44:44:void <init>() -> <init>
    47:48:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Integer) -> a
    52:52:java.lang.Integer read(net.minecraft.network.FriendlyByteBuf) -> b
    57:57:java.lang.Integer copy(java.lang.Integer) -> a
    44:44:java.lang.Object copy(java.lang.Object) -> a
    44:44:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    44:44:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$3 -> sd$13:
    61:61:void <init>() -> <init>
    64:65:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Float) -> a
    69:69:java.lang.Float read(net.minecraft.network.FriendlyByteBuf) -> b
    74:74:java.lang.Float copy(java.lang.Float) -> a
    61:61:java.lang.Object copy(java.lang.Object) -> a
    61:61:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    61:61:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$4 -> sd$14:
    78:78:void <init>() -> <init>
    81:82:void write(net.minecraft.network.FriendlyByteBuf,java.lang.String) -> a
    86:86:java.lang.String read(net.minecraft.network.FriendlyByteBuf) -> b
    91:91:java.lang.String copy(java.lang.String) -> a
    78:78:java.lang.Object copy(java.lang.Object) -> a
    78:78:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    78:78:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$5 -> sd$15:
    95:95:void <init>() -> <init>
    98:99:void write(net.minecraft.network.FriendlyByteBuf,net.minecraft.network.chat.Component) -> a
    103:103:net.minecraft.network.chat.Component read(net.minecraft.network.FriendlyByteBuf) -> b
    108:108:net.minecraft.network.chat.Component copy(net.minecraft.network.chat.Component) -> a
    95:95:java.lang.Object copy(java.lang.Object) -> a
    95:95:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    95:95:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$6 -> sd$16:
    112:112:void <init>() -> <init>
    115:121:void write(net.minecraft.network.FriendlyByteBuf,java.util.Optional) -> a
    125:125:java.util.Optional read(net.minecraft.network.FriendlyByteBuf) -> b
    130:130:java.util.Optional copy(java.util.Optional) -> a
    112:112:java.lang.Object copy(java.lang.Object) -> a
    112:112:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    112:112:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$7 -> sd$17:
    134:134:void <init>() -> <init>
    137:138:void write(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.ItemStack) -> a
    142:142:net.minecraft.world.item.ItemStack read(net.minecraft.network.FriendlyByteBuf) -> b
    147:147:net.minecraft.world.item.ItemStack copy(net.minecraft.world.item.ItemStack) -> a
    134:134:java.lang.Object copy(java.lang.Object) -> a
    134:134:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    134:134:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$8 -> sd$18:
    151:151:void <init>() -> <init>
    154:159:void write(net.minecraft.network.FriendlyByteBuf,java.util.Optional) -> a
    163:167:java.util.Optional read(net.minecraft.network.FriendlyByteBuf) -> b
    173:173:java.util.Optional copy(java.util.Optional) -> a
    151:151:java.lang.Object copy(java.lang.Object) -> a
    151:151:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    151:151:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.EntityDataSerializers$9 -> sd$19:
    177:177:void <init>() -> <init>
    180:181:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Boolean) -> a
    185:185:java.lang.Boolean read(net.minecraft.network.FriendlyByteBuf) -> b
    190:190:java.lang.Boolean copy(java.lang.Boolean) -> a
    177:177:java.lang.Object copy(java.lang.Object) -> a
    177:177:java.lang.Object read(net.minecraft.network.FriendlyByteBuf) -> a
    177:177:void write(net.minecraft.network.FriendlyByteBuf,java.lang.Object) -> a
net.minecraft.network.syncher.SynchedEntityData -> se:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.Map ENTITY_ID_POOL -> b
    net.minecraft.world.entity.Entity entity -> c
    java.util.Map itemsById -> d
    java.util.concurrent.locks.ReadWriteLock lock -> e
    boolean isEmpty -> f
    boolean isDirty -> g
    31:39:void <init>(net.minecraft.world.entity.Entity) -> <init>
    42:71:net.minecraft.network.syncher.EntityDataAccessor defineId(java.lang.Class,net.minecraft.network.syncher.EntityDataSerializer) -> a
    75:87:void define(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> a
    90:95:void createDataItem(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> c
    100:113:net.minecraft.network.syncher.SynchedEntityData$DataItem getItem(net.minecraft.network.syncher.EntityDataAccessor) -> b
    117:117:java.lang.Object get(net.minecraft.network.syncher.EntityDataAccessor) -> a
    121:130:void set(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> b
    133:133:boolean isDirty() -> a
    137:145:void pack(java.util.List,net.minecraft.network.FriendlyByteBuf) -> a
    149:167:java.util.List packDirty() -> b
    172:183:java.util.List getAll() -> c
    187:195:void writeDataItem(net.minecraft.network.FriendlyByteBuf,net.minecraft.network.syncher.SynchedEntityData$DataItem) -> a
    199:216:java.util.List unpack(net.minecraft.network.FriendlyByteBuf) -> a
    220:220:net.minecraft.network.syncher.SynchedEntityData$DataItem genericHelper(net.minecraft.network.FriendlyByteBuf,int,net.minecraft.network.syncher.EntityDataSerializer) -> a
    224:236:void assignValues(java.util.List) -> a
    240:244:void assignValue(net.minecraft.network.syncher.SynchedEntityData$DataItem,net.minecraft.network.syncher.SynchedEntityData$DataItem) -> a
    247:247:boolean isEmpty() -> d
    251:258:void clearDirty() -> e
    25:26:void <clinit>() -> <clinit>
net.minecraft.network.syncher.SynchedEntityData$DataItem -> se$a:
    net.minecraft.network.syncher.EntityDataAccessor accessor -> a
    java.lang.Object value -> b
    boolean dirty -> c
    265:269:void <init>(net.minecraft.network.syncher.EntityDataAccessor,java.lang.Object) -> <init>
    272:272:net.minecraft.network.syncher.EntityDataAccessor getAccessor() -> a
    276:277:void setValue(java.lang.Object) -> a
    280:280:java.lang.Object getValue() -> b
    284:284:boolean isDirty() -> c
    288:289:void setDirty(boolean) -> a
    292:292:net.minecraft.network.syncher.SynchedEntityData$DataItem copy() -> d
    260:260:net.minecraft.network.syncher.EntityDataAccessor access$000(net.minecraft.network.syncher.SynchedEntityData$DataItem) -> a
    260:260:java.lang.Object access$100(net.minecraft.network.syncher.SynchedEntityData$DataItem) -> b
net.minecraft.network.syncher.package-info -> sf:
net.minecraft.obfuscate.DontObfuscateOrShrink -> net.minecraft.obfuscate.DontObfuscateOrShrink:
net.minecraft.obfuscate.KeepAfterObfuscation -> net.minecraft.obfuscate.KeepAfterObfuscation:
net.minecraft.obfuscate.package-info -> sg:
net.minecraft.package-info -> sh:
net.minecraft.recipebook.PlaceRecipe -> si:
    11:59:void placeRecipe(int,int,int,net.minecraft.world.item.crafting.Recipe,java.util.Iterator,int) -> a
    void addItemToSlot(java.util.Iterator,int,int,int,int) -> a
net.minecraft.recipebook.ServerPlaceRecipe -> sj:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.entity.player.StackedContents stackedContents -> b
    net.minecraft.world.entity.player.Inventory inventory -> c
    net.minecraft.world.inventory.RecipeBookMenu menu -> d
    27:34:void <init>(net.minecraft.world.inventory.RecipeBookMenu) -> <init>
    37:60:void recipeClicked(net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.crafting.Recipe,boolean) -> a
    63:71:void clearGrid() -> a
    74:93:void moveItemToInventory(int) -> a
    96:131:void handleRecipeClicked(net.minecraft.world.item.crafting.Recipe,boolean) -> a
    135:142:void addItemToSlot(java.util.Iterator,int,int,int,int) -> a
    145:166:int getStackSize(boolean,int,boolean) -> a
    170:192:void moveItemToGrid(net.minecraft.world.inventory.Slot,net.minecraft.world.item.ItemStack) -> a
    195:234:boolean testClearGrid() -> b
    238:244:int getAmountOfFreeSlotsInInventory() -> c
    25:25:void <clinit>() -> <clinit>
net.minecraft.recipebook.ServerPlaceSmeltingRecipe -> sk:
    boolean recipeMatchesPlaced -> e
    19:20:void <init>(net.minecraft.world.inventory.RecipeBookMenu) -> <init>
    24:49:void handleRecipeClicked(net.minecraft.world.item.crafting.Recipe,boolean) -> a
    53:55:void clearGrid() -> a
    58:73:void placeRecipe(int,it.unimi.dsi.fastutil.ints.IntList) -> a
net.minecraft.recipebook.package-info -> sl:
net.minecraft.resources.ResourceLocation -> sm:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID -> c
    java.lang.String namespace -> a
    java.lang.String path -> b
    31:40:void <init>(java.lang.String[]) -> <init>
    43:44:void <init>(java.lang.String) -> <init>
    47:48:void <init>(java.lang.String,java.lang.String) -> <init>
    51:51:net.minecraft.resources.ResourceLocation of(java.lang.String,char) -> a
    57:59:net.minecraft.resources.ResourceLocation tryParse(java.lang.String) -> a
    64:73:java.lang.String[] decompose(java.lang.String,char) -> b
    77:77:java.lang.String getPath() -> a
    81:81:java.lang.String getNamespace() -> b
    86:86:java.lang.String toString() -> toString
    91:101:boolean equals(java.lang.Object) -> equals
    106:106:int hashCode() -> hashCode
    112:116:int compareTo(net.minecraft.resources.ResourceLocation) -> a
    132:141:net.minecraft.resources.ResourceLocation read(com.mojang.brigadier.StringReader) -> a
    146:146:boolean isAllowedInResourceLocation(char) -> a
    154:154:boolean isValidPath(java.lang.String) -> c
    158:158:boolean isValidNamespace(java.lang.String) -> d
    162:163:boolean isValidResourceLocation(java.lang.String) -> b
    21:21:int compareTo(java.lang.Object) -> compareTo
    158:158:boolean lambda$isValidNamespace$1(int) -> a
    154:154:boolean lambda$isValidPath$0(int) -> b
    22:22:void <clinit>() -> <clinit>
net.minecraft.resources.ResourceLocation$Serializer -> sm$a:
    119:119:void <init>() -> <init>
    122:122:net.minecraft.resources.ResourceLocation deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    127:127:com.google.gson.JsonElement serialize(net.minecraft.resources.ResourceLocation,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    119:119:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    119:119:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.resources.package-info -> sn:
net.minecraft.server.Bootstrap -> so:
    java.io.PrintStream STDOUT -> a
    boolean isBootstrapped -> b
    org.apache.logging.log4j.Logger LOGGER -> c
    26:26:void <init>() -> <init>
    33:58:void bootStrap() -> a
    61:68:void checkTranslations(net.minecraft.core.Registry,java.util.function.Function,java.util.Set) -> a
    71:79:java.util.Set getMissingTranslations() -> b
    83:90:void validate() -> c
    93:100:void wrapStreams() -> d
    103:104:void realStdoutPrintln(java.lang.String) -> a
    88:88:void lambda$validate$2(java.lang.String) -> b
    78:78:java.lang.String lambda$getMissingTranslations$1(net.minecraft.resources.ResourceLocation) -> a
    63:67:void lambda$checkTranslations$0(java.util.function.Function,net.minecraft.locale.Language,java.util.Set,java.lang.Object) -> a
    27:30:void <clinit>() -> <clinit>
net.minecraft.server.ChainedJsonException -> sp:
    java.util.List entries -> a
    java.lang.String message -> b
    12:18:void <init>(java.lang.String) -> <init>
    12:24:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    27:28:void prependJsonKey(java.lang.String) -> a
    31:33:void setFilenameAndFlush(java.lang.String) -> b
    37:37:java.lang.String getMessage() -> getMessage
    41:48:net.minecraft.server.ChainedJsonException forException(java.lang.Exception) -> a
net.minecraft.server.ChainedJsonException$1 -> sp$1:
net.minecraft.server.ChainedJsonException$Entry -> sp$a:
    java.lang.String filename -> a
    java.util.List jsonKeys -> b
    55:58:void <init>() -> <init>
    61:62:void addJsonKey(java.lang.String) -> a
    66:66:java.lang.String getFilename() -> a
    70:70:java.lang.String getJsonKeys() -> b
    75:85:java.lang.String toString() -> toString
    52:52:void <init>(net.minecraft.server.ChainedJsonException$1) -> <init>
    52:52:void access$100(net.minecraft.server.ChainedJsonException$Entry,java.lang.String) -> a
    52:52:java.lang.String access$202(net.minecraft.server.ChainedJsonException$Entry,java.lang.String) -> b
net.minecraft.server.ConsoleInput -> sq:
    java.lang.String msg -> a
    net.minecraft.commands.CommandSourceStack source -> b
    9:12:void <init>(java.lang.String,net.minecraft.commands.CommandSourceStack) -> <init>
net.minecraft.server.ConsoleInputSource -> sr:
    void info(java.lang.String) -> a
    void warn(java.lang.String) -> b
net.minecraft.server.DebugLoggedPrintStream -> ss:
    7:8:void <init>(java.lang.String,java.io.OutputStream) -> <init>
    12:15:void logLine(java.lang.String) -> a
net.minecraft.server.Eula -> st:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.nio.file.Path file -> b
    boolean agreed -> c
    19:22:void <init>(java.nio.file.Path) -> <init>
    25:33:boolean readFile() -> b
    37:37:boolean hasAgreedToEULA() -> a
    41:51:void saveDefaults() -> c
    14:14:void <clinit>() -> <clinit>
net.minecraft.server.LoggedPrintStream -> su:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.lang.String name -> b
    16:18:void <init>(java.lang.String,java.io.OutputStream) -> <init>
    22:23:void println(java.lang.String) -> println
    27:28:void println(java.lang.Object) -> println
    31:32:void logLine(java.lang.String) -> a
    11:11:void <clinit>() -> <clinit>
net.minecraft.server.MinecraftServer -> net.minecraft.server.MinecraftServer:
    org.apache.logging.log4j.Logger LOGGER -> h
    java.io.File USERID_CACHE_FILE -> b
    java.util.concurrent.CompletableFuture DATA_RELOAD_INITIAL_TASK -> i
    net.minecraft.world.level.LevelSettings DEMO_SETTINGS -> c
    net.minecraft.world.level.storage.LevelStorageSource storageSource -> j
    net.minecraft.world.Snooper snooper -> k
    java.io.File universe -> l
    java.util.List tickables -> m
    net.minecraft.util.profiling.GameProfiler profiler -> n
    net.minecraft.server.network.ServerConnectionListener connection -> o
    net.minecraft.server.level.progress.ChunkProgressListenerFactory progressListenerFactory -> d
    net.minecraft.network.protocol.status.ServerStatus status -> p
    java.util.Random random -> q
    com.mojang.datafixers.DataFixer fixerUpper -> r
    java.lang.String localIp -> s
    int port -> t
    java.util.Map levels -> u
    net.minecraft.server.players.PlayerList playerList -> v
    boolean running -> w
    boolean stopped -> x
    int tickCount -> y
    java.net.Proxy proxy -> e
    boolean onlineMode -> z
    boolean preventProxyConnections -> A
    boolean animals -> B
    boolean npcs -> C
    boolean pvp -> D
    boolean allowFlight -> E
    java.lang.String motd -> F
    int maxBuildHeight -> G
    int playerIdleTimeout -> H
    long[] tickTimes -> f
    java.security.KeyPair keyPair -> I
    java.lang.String singleplayerName -> J
    java.lang.String levelIdName -> K
    java.lang.String levelName -> L
    boolean isDemo -> M
    boolean levelHasStartingBonusChest -> N
    java.lang.String resourcePack -> O
    java.lang.String resourcePackHash -> P
    boolean isReady -> Q
    long lastOverloadWarning -> R
    net.minecraft.network.chat.Component startupState -> S
    boolean delayProfilerStart -> T
    boolean forceGameType -> U
    com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService authenticationService -> V
    com.mojang.authlib.minecraft.MinecraftSessionService sessionService -> W
    com.mojang.authlib.GameProfileRepository profileRepository -> X
    net.minecraft.server.players.GameProfileCache profileCache -> Y
    long lastServerStatus -> Z
    java.lang.Thread serverThread -> g
    long nextTickTime -> aa
    long delayedTasksMaxNextTickTime -> ab
    boolean mayHaveDelayedTasks -> ac
    boolean hasWorldScreenshot -> ad
    net.minecraft.server.packs.resources.ReloadableResourceManager resources -> ae
    net.minecraft.server.packs.repository.PackRepository packRepository -> af
    net.minecraft.server.packs.repository.FolderRepositorySource folderPackSource -> ag
    net.minecraft.commands.Commands commands -> ah
    net.minecraft.world.item.crafting.RecipeManager recipes -> ai
    net.minecraft.tags.TagManager tags -> aj
    net.minecraft.server.ServerScoreboard scoreboard -> ak
    net.minecraft.world.level.storage.CommandStorage commandStorage -> al
    net.minecraft.server.bossevents.CustomBossEvents customBossEvents -> am
    net.minecraft.world.level.storage.loot.PredicateManager predicateManager -> an
    net.minecraft.world.level.storage.loot.LootTables lootTables -> ao
    net.minecraft.server.ServerAdvancementManager advancements -> ap
    net.minecraft.server.ServerFunctionManager functions -> aq
    net.minecraft.util.FrameTimer frameTimer -> ar
    boolean enforceWhitelist -> as
    boolean forceUpgrade -> at
    boolean eraseCache -> au
    float averageTickTime -> av
    java.util.concurrent.Executor executor -> aw
    java.lang.String serverId -> ax
    166:272:void <init>(java.io.File,java.net.Proxy,com.mojang.datafixers.DataFixer,net.minecraft.commands.Commands,com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService,com.mojang.authlib.minecraft.MinecraftSessionService,com.mojang.authlib.GameProfileRepository,net.minecraft.server.players.GameProfileCache,net.minecraft.server.level.progress.ChunkProgressListenerFactory,java.lang.String) -> <init>
    275:278:void readScoreboard(net.minecraft.world.level.storage.DimensionDataStorage) -> a
    boolean initServer() -> d
    283:345:void ensureLevelConversion(java.lang.String) -> a
    348:349:void setServerStartupState(net.minecraft.network.chat.Component) -> b
    353:353:net.minecraft.network.chat.Component getStartupState() -> g_
    357:391:void loadLevel(java.lang.String,java.lang.String,long,net.minecraft.world.level.LevelType,com.google.gson.JsonElement) -> a
    394:437:void createLevels(net.minecraft.world.level.storage.LevelStorage,net.minecraft.world.level.storage.LevelData,net.minecraft.world.level.LevelSettings,net.minecraft.server.level.progress.ChunkProgressListener) -> a
    440:451:void setupDebugLevel(net.minecraft.world.level.storage.LevelData) -> a
    454:472:void loadDataPacks(java.io.File,net.minecraft.world.level.storage.LevelData) -> a
    475:518:void prepareLevels(net.minecraft.server.level.progress.ChunkProgressListener) -> a
    521:529:void detectBundledResources(java.lang.String,net.minecraft.world.level.storage.LevelStorage) -> a
    boolean canGenerateStructures() -> f
    net.minecraft.world.level.GameType getDefaultGameType() -> g
    net.minecraft.world.Difficulty getDefaultDifficulty() -> h
    boolean isHardcore() -> i
    int getOperatorUserPermissionLevel() -> j
    int getFunctionCompilationLevel() -> k
    boolean shouldRconBroadcast() -> l
    546:563:boolean saveAllChunks(boolean,boolean,boolean) -> a
    568:569:void close() -> close
    572:600:void stopServer() -> s
    603:603:java.lang.String getLocalIp() -> t
    607:608:void setLocalIp(java.lang.String) -> b
    611:611:boolean isRunning() -> h_
    615:623:void halt(boolean) -> a
    628:696:void run() -> run
    699:699:boolean haveTime() -> aZ
    703:705:void waitUntilNextTick() -> v
    709:709:net.minecraft.server.TickTask wrapRunnable(java.lang.Runnable) -> a
    714:714:boolean shouldRun(net.minecraft.server.TickTask) -> a
    719:721:boolean pollTask() -> w
    725:737:boolean pollTaskInternal() -> ba
    742:744:void doRunTask(net.minecraft.server.TickTask) -> b
    747:767:void updateStatusIcon(net.minecraft.network.protocol.status.ServerStatus) -> a
    770:771:boolean hasWorldScreenshot() -> x
    775:775:java.io.File getWorldScreenshotFile() -> y
    779:779:java.io.File getServerDirectory() -> z
    783:783:void onServerCrash(net.minecraft.CrashReport) -> a
    786:786:void onServerExit() -> e
    789:835:void tickServer(java.util.function.BooleanSupplier) -> a
    838:878:void tickChildren(java.util.function.BooleanSupplier) -> b
    881:881:boolean isNetherEnabled() -> A
    885:886:void addTickable(java.lang.Runnable) -> b
    890:970:void main(java.lang.String[]) -> main
    973:974:void setId(java.lang.String) -> c
    977:978:void forceUpgrade(boolean) -> b
    981:982:void eraseCache(boolean) -> c
    985:986:void forkAndRun() -> B
    989:989:boolean isShutdown() -> C
    993:993:java.io.File getFile(java.lang.String) -> d
    997:998:void info(java.lang.String) -> e
    1001:1002:void warn(java.lang.String) -> f
    1005:1005:net.minecraft.server.level.ServerLevel getLevel(net.minecraft.world.level.dimension.DimensionType) -> a
    1009:1009:java.lang.Iterable getAllLevels() -> D
    1013:1013:java.lang.String getServerVersion() -> E
    1017:1017:int getPlayerCount() -> F
    1021:1021:int getMaxPlayers() -> G
    1025:1025:java.lang.String[] getPlayerNames() -> H
    1029:1029:com.mojang.authlib.GameProfile[] getPlayerGameProfiles() -> I
    1033:1033:boolean isDebugging() -> J
    1037:1038:void error(java.lang.String) -> g
    1041:1044:void debug(java.lang.String) -> h
    1048:1048:java.lang.String getServerModName() -> getServerModName
    1052:1074:net.minecraft.CrashReport fillReport(net.minecraft.CrashReport) -> b
    java.util.Optional getModdedStatus() -> q
    1080:1080:boolean isInitialized() -> K
    1085:1086:void sendMessage(net.minecraft.network.chat.Component) -> a
    1089:1089:java.security.KeyPair getKeyPair() -> L
    1093:1093:int getPort() -> M
    1097:1098:void setPort(int) -> a
    1101:1101:java.lang.String getSingleplayerName() -> N
    1105:1106:void setSingleplayerName(java.lang.String) -> i
    1109:1109:boolean isSingleplayer() -> O
    1113:1113:java.lang.String getLevelIdName() -> P
    1117:1118:void setLevelName(java.lang.String) -> j
    1121:1121:java.lang.String getLevelName() -> Q
    1125:1126:void setKeyPair(java.security.KeyPair) -> a
    1129:1148:void setDifficulty(net.minecraft.world.Difficulty,boolean) -> a
    1151:1157:void setDifficultyLocked(boolean) -> d
    1160:1162:void sendDifficultyUpdate(net.minecraft.server.level.ServerPlayer) -> a
    1165:1165:boolean getSpawnMonsters() -> R
    1169:1169:boolean isDemo() -> S
    1173:1174:void setDemo(boolean) -> e
    1177:1178:void setBonusChest(boolean) -> f
    1181:1181:net.minecraft.world.level.storage.LevelStorageSource getStorageSource() -> T
    1185:1185:java.lang.String getResourcePack() -> U
    1189:1189:java.lang.String getResourcePackHash() -> V
    1193:1195:void setResourcePack(java.lang.String,java.lang.String) -> a
    1199:1231:void populateSnooper(net.minecraft.world.Snooper) -> a
    1235:1239:void populateSnooperInitial(net.minecraft.world.Snooper) -> b
    1243:1243:boolean isSnooperEnabled() -> W
    boolean isDedicatedServer() -> m
    1249:1249:boolean usesAuthentication() -> X
    1253:1254:void setUsesAuthentication(boolean) -> g
    1257:1257:boolean getPreventProxyConnections() -> Y
    1261:1262:void setPreventProxyConnections(boolean) -> h
    1265:1265:boolean isAnimals() -> Z
    1269:1270:void setAnimals(boolean) -> i
    1273:1273:boolean isNpcsEnabled() -> aa
    boolean isEpollEnabled() -> n
    1279:1280:void setNpcsEnabled(boolean) -> j
    1283:1283:boolean isPvpAllowed() -> ab
    1287:1288:void setPvpAllowed(boolean) -> k
    1291:1291:boolean isFlightAllowed() -> ac
    1295:1296:void setFlightAllowed(boolean) -> l
    boolean isCommandBlockEnabled() -> o
    1301:1301:java.lang.String getMotd() -> ad
    1305:1306:void setMotd(java.lang.String) -> k
    1309:1309:int getMaxBuildHeight() -> ae
    1313:1314:void setMaxBuildHeight(int) -> b
    1317:1317:boolean isStopped() -> af
    1321:1321:net.minecraft.server.players.PlayerList getPlayerList() -> ag
    1325:1326:void setPlayerList(net.minecraft.server.players.PlayerList) -> a
    boolean isPublished() -> p
    1331:1334:void setDefaultGameMode(net.minecraft.world.level.GameType) -> a
    1338:1338:net.minecraft.server.network.ServerConnectionListener getConnection() -> ah
    1342:1342:boolean isReady() -> ai
    1346:1346:boolean hasGui() -> aj
    boolean publishServer(net.minecraft.world.level.GameType,boolean,int) -> a
    1352:1352:int getTickCount() -> ak
    1356:1357:void delayStartProfiler() -> al
    1360:1360:net.minecraft.world.Snooper getSnooper() -> am
    1364:1364:net.minecraft.world.level.BlockGetter getCommandSenderWorld() -> an
    1368:1368:int getSpawnProtectionRadius() -> ao
    1372:1372:boolean isUnderSpawnProtection(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    1376:1377:void setForceGameType(boolean) -> m
    1380:1380:boolean getForceGameType() -> ap
    1384:1384:java.net.Proxy getProxy() -> aq
    1388:1388:int getPlayerIdleTimeout() -> ar
    1392:1393:void setPlayerIdleTimeout(int) -> c
    1396:1396:com.mojang.authlib.minecraft.MinecraftSessionService getSessionService() -> as
    1400:1400:com.mojang.authlib.GameProfileRepository getProfileRepository() -> at
    1404:1404:net.minecraft.server.players.GameProfileCache getProfileCache() -> au
    1408:1408:net.minecraft.network.protocol.status.ServerStatus getStatus() -> av
    1412:1413:void invalidateStatus() -> aw
    1417:1425:net.minecraft.world.entity.Entity getEntityByUUID(java.util.UUID) -> a
    1429:1429:int getAbsoluteMaxWorldSize() -> ax
    1434:1434:boolean scheduleExecutables() -> ay
    1439:1439:java.lang.Thread getRunningThread() -> az
    1443:1443:int getCompressionThreshold() -> aA
    1447:1447:long getNextTickTime() -> aB
    1451:1451:com.mojang.datafixers.DataFixer getFixerUpper() -> aC
    1455:1458:int getSpawnRadius(net.minecraft.server.level.ServerLevel) -> a
    1462:1462:net.minecraft.server.ServerAdvancementManager getAdvancements() -> aD
    1466:1466:net.minecraft.server.ServerFunctionManager getFunctions() -> aE
    1470:1483:void reloadResources() -> aF
    1486:1513:void updateSelectedPacks(net.minecraft.world.level.storage.LevelData) -> b
    1516:1532:void kickUnlistedPlayers(net.minecraft.commands.CommandSourceStack) -> a
    1535:1535:net.minecraft.server.packs.resources.ReloadableResourceManager getResources() -> aG
    1539:1539:net.minecraft.server.packs.repository.PackRepository getPackRepository() -> aH
    1543:1543:net.minecraft.server.packs.repository.FolderRepositorySource getFolderPackSource() -> aI
    1547:1547:net.minecraft.commands.Commands getCommands() -> aJ
    1551:1551:net.minecraft.commands.CommandSourceStack createCommandSourceStack() -> aK
    1556:1556:boolean acceptsSuccess() -> a
    1561:1561:boolean acceptsFailure() -> b
    boolean shouldInformAdmins() -> I_
    1568:1568:net.minecraft.world.item.crafting.RecipeManager getRecipeManager() -> aL
    1572:1572:net.minecraft.tags.TagManager getTags() -> aM
    1576:1576:net.minecraft.server.ServerScoreboard getScoreboard() -> aN
    1580:1584:net.minecraft.world.level.storage.CommandStorage getCommandStorage() -> aO
    1588:1588:net.minecraft.world.level.storage.loot.LootTables getLootTables() -> aP
    1592:1592:net.minecraft.world.level.storage.loot.PredicateManager getPredicateManager() -> aQ
    1596:1596:net.minecraft.world.level.GameRules getGameRules() -> aR
    1600:1600:net.minecraft.server.bossevents.CustomBossEvents getCustomBossEvents() -> aS
    1604:1604:boolean isEnforceWhitelist() -> aT
    1608:1609:void setEnforceWhitelist(boolean) -> n
    1612:1612:float getAverageTickTime() -> aU
    1616:1629:int getProfilePermissions(com.mojang.authlib.GameProfile) -> b
    1633:1633:net.minecraft.util.FrameTimer getFrameTimer() -> aV
    1637:1637:net.minecraft.util.profiling.GameProfiler getProfiler() -> aW
    1641:1641:java.util.concurrent.Executor getBackgroundTaskExecutor() -> aX
    boolean isSingleplayerOwner(com.mojang.authlib.GameProfile) -> a
    1647:1660:void saveDebugReport(java.nio.file.Path) -> a
    1663:1669:void dumpMiscStats(java.nio.file.Path) -> b
    1672:1677:void dumpCrashCategory(java.nio.file.Path) -> c
    1680:1693:void dumpGameRules(java.nio.file.Path) -> d
    1696:1704:void dumpClasspath(java.nio.file.Path) -> e
    1707:1717:void dumpThreads(java.nio.file.Path) -> f
    1723:1724:void refreshRegistries() -> bb
    138:138:void doRunTask(java.lang.Runnable) -> c
    138:138:boolean shouldRun(java.lang.Runnable) -> d
    138:138:java.lang.Runnable wrapRunnable(java.lang.Runnable) -> e
    1509:1512:void lambda$updateSelectedPacks$10(net.minecraft.world.level.storage.LevelData,net.minecraft.server.packs.repository.UnopenedPack) -> a
    1507:1507:void lambda$updateSelectedPacks$9(net.minecraft.world.level.storage.LevelData,net.minecraft.server.packs.repository.UnopenedPack) -> b
    1496:1496:void lambda$updateSelectedPacks$8(java.util.List,net.minecraft.server.packs.repository.UnopenedPack) -> a
    1491:1491:net.minecraft.server.packs.repository.UnopenedPack lambda$updateSelectedPacks$7(net.minecraft.server.packs.repository.UnopenedPack) -> a
    1071:1071:java.lang.String lambda$fillReport$6() -> bc
    1057:1067:java.lang.String lambda$fillReport$5() -> bd
    1053:1053:java.lang.String lambda$fillReport$4() -> be
    844:844:java.lang.String lambda$tickChildren$3(net.minecraft.server.level.ServerLevel) -> b
    704:704:boolean lambda$waitUntilNextTick$2() -> bf
    222:222:void lambda$new$1(java.lang.Thread) -> a
    222:222:void lambda$null$0(java.lang.Thread,java.lang.Throwable) -> a
    138:138:org.apache.logging.log4j.Logger access$000() -> aY
    139:162:void <clinit>() -> <clinit>
net.minecraft.server.MinecraftServer$1 -> net.minecraft.server.MinecraftServer$1:
    long timeStamp -> b
    net.minecraft.server.MinecraftServer this$0 -> a
    286:287:void <init>(net.minecraft.server.MinecraftServer) -> <init>
    291:291:void progressStartNoAbort(net.minecraft.network.chat.Component) -> a
    295:295:void progressStart(net.minecraft.network.chat.Component) -> b
    299:303:void progressStagePercentage(int) -> a
    307:307:void stop() -> a
    311:311:void progressStage(net.minecraft.network.chat.Component) -> c
net.minecraft.server.MinecraftServer$2 -> net.minecraft.server.MinecraftServer$2:
    net.minecraft.server.dedicated.DedicatedServer val$server -> a
    959:959:void <init>(java.lang.String,net.minecraft.server.dedicated.DedicatedServer) -> <init>
    962:963:void run() -> run
net.minecraft.server.MinecraftServer$3 -> net.minecraft.server.MinecraftServer$3:
    java.util.List val$entries -> a
    net.minecraft.world.level.GameRules val$gameRules -> b
    net.minecraft.server.MinecraftServer this$0 -> c
    1683:1683:void <init>(net.minecraft.server.MinecraftServer,java.util.List,net.minecraft.world.level.GameRules) -> <init>
    1686:1687:void visit(net.minecraft.world.level.GameRules$Key,net.minecraft.world.level.GameRules$Type) -> a
net.minecraft.server.PlayerAdvancements -> sv:
    org.apache.logging.log4j.Logger LOGGER -> a
    com.google.gson.Gson GSON -> b
    com.google.gson.reflect.TypeToken TYPE_TOKEN -> c
    net.minecraft.server.MinecraftServer server -> d
    java.io.File file -> e
    java.util.Map advancements -> f
    java.util.Set visible -> g
    java.util.Set visibilityChanged -> h
    java.util.Set progressChanged -> i
    net.minecraft.server.level.ServerPlayer player -> j
    net.minecraft.advancements.Advancement lastSelectedTab -> k
    boolean isFirstPacket -> l
    63:77:void <init>(net.minecraft.server.MinecraftServer,java.io.File,net.minecraft.server.level.ServerPlayer) -> <init>
    80:81:void setPlayer(net.minecraft.server.level.ServerPlayer) -> a
    84:87:void stopListening() -> a
    90:98:void reload() -> b
    101:104:void registerListeners() -> d
    107:117:void ensureAllVisible() -> e
    120:126:void checkForAutomaticTriggers() -> f
    129:166:void load() -> g
    169:187:void save() -> c
    190:212:boolean award(net.minecraft.advancements.Advancement,java.lang.String) -> a
    216:229:boolean revoke(net.minecraft.advancements.Advancement,java.lang.String) -> b
    233:250:void registerListeners(net.minecraft.advancements.Advancement) -> c
    253:267:void unregisterListeners(net.minecraft.advancements.Advancement) -> d
    270:293:void flushDirty(net.minecraft.server.level.ServerPlayer) -> b
    296:305:void setSelectedTab(net.minecraft.advancements.Advancement) -> a
    308:313:net.minecraft.advancements.AdvancementProgress getOrStartProgress(net.minecraft.advancements.Advancement) -> b
    317:319:void startProgress(net.minecraft.advancements.Advancement,net.minecraft.advancements.AdvancementProgress) -> a
    322:344:void ensureVisibility(net.minecraft.advancements.Advancement) -> e
    347:368:boolean shouldBeVisible(net.minecraft.advancements.Advancement) -> f
    372:382:boolean hasCompletedChildrenOrSelf(net.minecraft.advancements.Advancement) -> g
    52:59:void <clinit>() -> <clinit>
net.minecraft.server.PlayerAdvancements$1 -> sv$1:
    59:59:void <init>() -> <init>
net.minecraft.server.RunningOnDifferentThreadException -> sw:
    net.minecraft.server.RunningOnDifferentThreadException RUNNING_ON_DIFFERENT_THREAD -> a
    6:8:void <init>() -> <init>
    12:13:java.lang.Throwable fillInStackTrace() -> fillInStackTrace
    4:4:void <clinit>() -> <clinit>
net.minecraft.server.ServerAdvancementManager -> sx:
    org.apache.logging.log4j.Logger LOGGER -> a
    com.google.gson.Gson GSON -> b
    net.minecraft.advancements.AdvancementList advancements -> c
    41:45:void <init>() -> <init>
    49:70:void apply(java.util.Map,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
    74:74:net.minecraft.advancements.Advancement getAdvancement(net.minecraft.resources.ResourceLocation) -> a
    78:78:java.util.Collection getAllAdvancements() -> a
    28:28:void apply(java.lang.Object,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
    53:58:void lambda$apply$1(java.util.Map,net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> a
    32:33:net.minecraft.advancements.Advancement$Builder lambda$static$0(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    29:39:void <clinit>() -> <clinit>
net.minecraft.server.ServerFunctionManager -> sy:
    org.apache.logging.log4j.Logger LOGGER -> c
    net.minecraft.resources.ResourceLocation TICK_FUNCTION_TAG -> d
    net.minecraft.resources.ResourceLocation LOAD_FUNCTION_TAG -> e
    int PATH_PREFIX_LENGTH -> a
    int PATH_SUFFIX_LENGTH -> b
    net.minecraft.server.MinecraftServer server -> f
    java.util.Map functions -> g
    boolean isInFunction -> h
    java.util.ArrayDeque commandQueue -> i
    java.util.List nestedCalls -> j
    net.minecraft.tags.TagCollection tags -> k
    java.util.List ticking -> l
    boolean postReload -> m
    45:55:void <init>(net.minecraft.server.MinecraftServer) -> <init>
    58:58:java.util.Optional get(net.minecraft.resources.ResourceLocation) -> a
    62:62:net.minecraft.server.MinecraftServer getServer() -> a
    66:66:int getCommandLimit() -> b
    70:70:java.util.Map getFunctions() -> c
    74:74:com.mojang.brigadier.CommandDispatcher getDispatcher() -> d
    78:93:void tick() -> e
    96:139:int execute(net.minecraft.commands.CommandFunction,net.minecraft.commands.CommandSourceStack) -> a
    144:169:void onResourceManagerReload(net.minecraft.server.packs.resources.ResourceManager) -> a
    173:180:net.minecraft.commands.CommandFunction addFunction(net.minecraft.commands.CommandFunction,java.lang.Throwable,net.minecraft.resources.ResourceLocation) -> a
    185:188:java.util.List readLinesAsync(net.minecraft.server.packs.resources.ResourceManager,net.minecraft.resources.ResourceLocation) -> a
    193:193:net.minecraft.commands.CommandSourceStack getGameLoopSender() -> f
    197:197:net.minecraft.commands.CommandSourceStack getCompilationContext() -> g
    201:201:net.minecraft.tags.TagCollection getTags() -> h
    156:156:net.minecraft.commands.CommandFunction lambda$onResourceManagerReload$3(net.minecraft.resources.ResourceLocation,net.minecraft.commands.CommandFunction,java.lang.Throwable) -> a
    155:155:net.minecraft.commands.CommandFunction lambda$onResourceManagerReload$2(net.minecraft.resources.ResourceLocation,java.util.List) -> a
    154:154:java.util.List lambda$onResourceManagerReload$1(net.minecraft.server.packs.resources.ResourceManager,net.minecraft.resources.ResourceLocation) -> b
    147:147:boolean lambda$onResourceManagerReload$0(java.lang.String) -> a
    36:42:void <clinit>() -> <clinit>
net.minecraft.server.ServerFunctionManager$QueuedCommand -> sy$a:
    net.minecraft.server.ServerFunctionManager manager -> a
    net.minecraft.commands.CommandSourceStack sender -> b
    net.minecraft.commands.CommandFunction$Entry entry -> c
    209:213:void <init>(net.minecraft.server.ServerFunctionManager,net.minecraft.commands.CommandSourceStack,net.minecraft.commands.CommandFunction$Entry) -> <init>
    217:220:void execute(java.util.ArrayDeque,int) -> a
    224:224:java.lang.String toString() -> toString
net.minecraft.server.ServerInterface -> sz:
    net.minecraft.server.dedicated.DedicatedServerProperties getProperties() -> d_
    java.lang.String getServerIp() -> e_
    int getServerPort() -> r
    java.lang.String getServerName() -> f_
    java.lang.String getServerVersion() -> E
    int getPlayerCount() -> F
    int getMaxPlayers() -> G
    java.lang.String[] getPlayerNames() -> H
    java.lang.String getLevelIdName() -> P
    java.lang.String getPluginNames() -> u
    java.lang.String runCommand(java.lang.String) -> a_
    boolean isDebugging() -> J
    void info(java.lang.String) -> e
    void warn(java.lang.String) -> f
    void error(java.lang.String) -> g
    void debug(java.lang.String) -> h
net.minecraft.server.ServerScoreboard -> ta:
    net.minecraft.server.MinecraftServer server -> a
    java.util.Set trackedObjectives -> b
    java.lang.Runnable[] dirtyListeners -> c
    23:28:void <init>(net.minecraft.server.MinecraftServer) -> <init>
    31:31:net.minecraft.server.MinecraftServer getServer() -> a
    36:43:void onScoreChanged(net.minecraft.world.scores.Score) -> a
    47:50:void onPlayerRemoved(java.lang.String) -> a
    54:59:void onPlayerScoreRemoved(java.lang.String,net.minecraft.world.scores.Objective) -> a
    63:84:void setDisplayObjective(int,net.minecraft.world.scores.Objective) -> a
    88:95:boolean addPlayerToTeam(java.lang.String,net.minecraft.world.scores.PlayerTeam) -> a
    100:105:void removePlayerFromTeam(java.lang.String,net.minecraft.world.scores.PlayerTeam) -> b
    109:111:void onObjectiveAdded(net.minecraft.world.scores.Objective) -> a
    115:122:void onObjectiveChanged(net.minecraft.world.scores.Objective) -> b
    126:133:void onObjectiveRemoved(net.minecraft.world.scores.Objective) -> c
    137:142:void onTeamAdded(net.minecraft.world.scores.PlayerTeam) -> a
    146:151:void onTeamChanged(net.minecraft.world.scores.PlayerTeam) -> b
    155:160:void onTeamRemoved(net.minecraft.world.scores.PlayerTeam) -> c
    163:165:void addDirtyListener(java.lang.Runnable) -> a
    168:171:void setDirty() -> b
    174:187:java.util.List getStartTrackingPackets(net.minecraft.world.scores.Objective) -> d
    191:200:void startTrackingObjective(net.minecraft.world.scores.Objective) -> e
    203:212:java.util.List getStopTrackingPackets(net.minecraft.world.scores.Objective) -> f
    216:225:void stopTrackingObjective(net.minecraft.world.scores.Objective) -> g
    228:236:int getObjectiveDisplaySlotCount(net.minecraft.world.scores.Objective) -> h
net.minecraft.server.ServerScoreboard$Method -> ta$a:
    net.minecraft.server.ServerScoreboard$Method CHANGE -> a
    net.minecraft.server.ServerScoreboard$Method REMOVE -> b
    net.minecraft.server.ServerScoreboard$Method[] $VALUES -> c
    239:239:net.minecraft.server.ServerScoreboard$Method[] values() -> values
    239:239:net.minecraft.server.ServerScoreboard$Method valueOf(java.lang.String) -> valueOf
    239:239:void <init>(java.lang.String,int) -> <init>
    239:241:void <clinit>() -> <clinit>
net.minecraft.server.TickTask -> tb:
    int tick -> a
    java.lang.Runnable runnable -> b
    7:10:void <init>(int,java.lang.Runnable) -> <init>
    13:13:int getTick() -> a
    18:19:void run() -> run
net.minecraft.server.bossevents.CustomBossEvent -> tc:
    net.minecraft.resources.ResourceLocation id -> h
    java.util.Set players -> i
    int value -> j
    int max -> k
    23:31:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.network.chat.Component) -> <init>
    34:34:net.minecraft.resources.ResourceLocation getTextId() -> a
    39:41:void addPlayer(net.minecraft.server.level.ServerPlayer) -> a
    44:45:void addOfflinePlayer(java.util.UUID) -> a
    49:51:void removePlayer(net.minecraft.server.level.ServerPlayer) -> b
    55:57:void removeAllPlayers() -> b
    60:60:int getValue() -> c
    64:64:int getMax() -> d
    68:70:void setValue(int) -> a
    73:75:void setMax(int) -> b
    78:78:net.minecraft.network.chat.Component getDisplayName() -> e
    86:129:boolean setPlayers(java.util.Collection) -> a
    133:151:net.minecraft.nbt.CompoundTag save() -> f
    155:170:net.minecraft.server.bossevents.CustomBossEvent load(net.minecraft.nbt.CompoundTag,net.minecraft.resources.ResourceLocation) -> a
    174:177:void onPlayerConnect(net.minecraft.server.level.ServerPlayer) -> c
    180:181:void onPlayerDisconnect(net.minecraft.server.level.ServerPlayer) -> d
    78:81:void lambda$getDisplayName$0(net.minecraft.network.chat.Style) -> a
net.minecraft.server.bossevents.CustomBossEvents -> td:
    net.minecraft.server.MinecraftServer server -> a
    java.util.Map events -> b
    16:20:void <init>(net.minecraft.server.MinecraftServer) -> <init>
    24:24:net.minecraft.server.bossevents.CustomBossEvent get(net.minecraft.resources.ResourceLocation) -> a
    28:30:net.minecraft.server.bossevents.CustomBossEvent create(net.minecraft.resources.ResourceLocation,net.minecraft.network.chat.Component) -> a
    34:35:void remove(net.minecraft.server.bossevents.CustomBossEvent) -> a
    38:38:java.util.Collection getIds() -> a
    42:42:java.util.Collection getEvents() -> b
    46:52:net.minecraft.nbt.CompoundTag save() -> c
    56:60:void load(net.minecraft.nbt.CompoundTag) -> a
    63:66:void onPlayerConnect(net.minecraft.server.level.ServerPlayer) -> a
    69:72:void onPlayerDisconnect(net.minecraft.server.level.ServerPlayer) -> b
net.minecraft.server.bossevents.package-info -> te:
net.minecraft.server.commands.AdvancementCommands -> tf:
    com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_ADVANCEMENTS -> a
    27:27:void <init>() -> <init>
    34:132:void register(com.mojang.brigadier.CommandDispatcher) -> a
    135:170:int perform(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.server.commands.AdvancementCommands$Action,java.util.Collection) -> a
    174:200:int performCriterion(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.server.commands.AdvancementCommands$Action,net.minecraft.advancements.Advancement,java.lang.String) -> a
    204:216:java.util.List getAdvancements(net.minecraft.advancements.Advancement,net.minecraft.server.commands.AdvancementCommands$Mode) -> a
    220:224:void addChildren(net.minecraft.advancements.Advancement,java.util.List) -> a
    127:127:int lambda$register$15(com.mojang.brigadier.context.CommandContext) -> a
    122:122:int lambda$register$14(com.mojang.brigadier.context.CommandContext) -> b
    114:114:int lambda$register$13(com.mojang.brigadier.context.CommandContext) -> c
    106:106:int lambda$register$12(com.mojang.brigadier.context.CommandContext) -> d
    97:97:int lambda$register$11(com.mojang.brigadier.context.CommandContext) -> e
    96:96:java.util.concurrent.CompletableFuture lambda$register$10(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    93:93:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> f
    80:80:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> g
    75:75:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> h
    67:67:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> i
    59:59:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> j
    50:50:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> k
    49:49:java.util.concurrent.CompletableFuture lambda$register$3(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    46:46:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> l
    36:36:boolean lambda$register$1(net.minecraft.commands.CommandSourceStack) -> a
    29:30:java.util.concurrent.CompletableFuture lambda$static$0(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> c
    28:28:void <clinit>() -> <clinit>
net.minecraft.server.commands.AdvancementCommands$1 -> tf$1:
net.minecraft.server.commands.AdvancementCommands$Action -> tf$a:
    net.minecraft.server.commands.AdvancementCommands$Action GRANT -> a
    net.minecraft.server.commands.AdvancementCommands$Action REVOKE -> b
    java.lang.String key -> c
    net.minecraft.server.commands.AdvancementCommands$Action[] $VALUES -> d
    226:226:net.minecraft.server.commands.AdvancementCommands$Action[] values() -> values
    226:226:net.minecraft.server.commands.AdvancementCommands$Action valueOf(java.lang.String) -> valueOf
    267:269:void <init>(java.lang.String,int,java.lang.String) -> <init>
    272:278:int perform(net.minecraft.server.level.ServerPlayer,java.lang.Iterable) -> a
    boolean perform(net.minecraft.server.level.ServerPlayer,net.minecraft.advancements.Advancement) -> a
    boolean performCriterion(net.minecraft.server.level.ServerPlayer,net.minecraft.advancements.Advancement,java.lang.String) -> a
    286:286:java.lang.String getKey() -> a
    226:226:void <init>(java.lang.String,int,java.lang.String,net.minecraft.server.commands.AdvancementCommands$1) -> <init>
    226:245:void <clinit>() -> <clinit>
net.minecraft.server.commands.AdvancementCommands$Action$1 -> tf$a$1:
    227:227:void <init>(java.lang.String,int,java.lang.String) -> <init>
    230:237:boolean perform(net.minecraft.server.level.ServerPlayer,net.minecraft.advancements.Advancement) -> a
    242:242:boolean performCriterion(net.minecraft.server.level.ServerPlayer,net.minecraft.advancements.Advancement,java.lang.String) -> a
net.minecraft.server.commands.AdvancementCommands$Action$2 -> tf$a$2:
    245:245:void <init>(java.lang.String,int,java.lang.String) -> <init>
    248:255:boolean perform(net.minecraft.server.level.ServerPlayer,net.minecraft.advancements.Advancement) -> a
    260:260:boolean performCriterion(net.minecraft.server.level.ServerPlayer,net.minecraft.advancements.Advancement,java.lang.String) -> a
net.minecraft.server.commands.AdvancementCommands$Mode -> tf$b:
    net.minecraft.server.commands.AdvancementCommands$Mode ONLY -> a
    net.minecraft.server.commands.AdvancementCommands$Mode THROUGH -> b
    net.minecraft.server.commands.AdvancementCommands$Mode FROM -> c
    net.minecraft.server.commands.AdvancementCommands$Mode UNTIL -> d
    net.minecraft.server.commands.AdvancementCommands$Mode EVERYTHING -> e
    boolean parents -> f
    boolean children -> g
    net.minecraft.server.commands.AdvancementCommands$Mode[] $VALUES -> h
    290:290:net.minecraft.server.commands.AdvancementCommands$Mode[] values() -> values
    290:290:net.minecraft.server.commands.AdvancementCommands$Mode valueOf(java.lang.String) -> valueOf
    301:304:void <init>(java.lang.String,int,boolean,boolean) -> <init>
    290:290:boolean access$000(net.minecraft.server.commands.AdvancementCommands$Mode) -> a
    290:290:boolean access$100(net.minecraft.server.commands.AdvancementCommands$Mode) -> b
    290:295:void <clinit>() -> <clinit>
net.minecraft.server.commands.BanIpCommands -> tg:
    java.util.regex.Pattern IP_ADDRESS_PATTERN -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_IP -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_BANNED -> c
    27:27:void <init>() -> <init>
    33:45:void register(com.mojang.brigadier.CommandDispatcher) -> a
    48:57:int banIpOrName(net.minecraft.commands.CommandSourceStack,java.lang.String,net.minecraft.network.chat.Component) -> a
    61:78:int banIp(net.minecraft.commands.CommandSourceStack,java.lang.String,net.minecraft.network.chat.Component) -> b
    41:41:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    38:38:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> b
    35:35:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    28:30:void <clinit>() -> <clinit>
net.minecraft.server.commands.BanListCommands -> th:
    16:16:void <init>() -> <init>
    18:34:void register(com.mojang.brigadier.CommandDispatcher) -> a
    37:45:int showList(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    31:31:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> a
    27:27:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> b
    22:23:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> c
    20:20:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.BanPlayerCommands -> ti:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_BANNED -> a
    26:26:void <init>() -> <init>
    30:42:void register(com.mojang.brigadier.CommandDispatcher) -> a
    45:66:int banPlayers(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.network.chat.Component) -> a
    38:38:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    35:35:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> b
    32:32:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    27:27:void <clinit>() -> <clinit>
net.minecraft.server.commands.BossBarCommands -> tj:
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_ALREADY_EXISTS -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_DOESNT_EXIST -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_PLAYER_CHANGE -> d
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_NAME_CHANGE -> e
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_COLOR_CHANGE -> f
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_STYLE_CHANGE -> g
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_VALUE_CHANGE -> h
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_MAX_CHANGE -> i
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_HIDDEN -> j
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_VISIBLE -> k
    com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_BOSS_BAR -> a
    38:38:void <init>() -> <init>
    52:198:void register(com.mojang.brigadier.CommandDispatcher) -> a
    201:202:int getValue(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent) -> a
    206:207:int getMax(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent) -> b
    211:216:int getVisible(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent) -> c
    221:226:int getPlayers(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent) -> d
    230:243:int setVisible(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent,boolean) -> a
    247:252:int setValue(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent,int) -> a
    256:261:int setMax(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent,int) -> b
    265:270:int setColor(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent,net.minecraft.world.BossEvent$BossBarColor) -> a
    274:279:int setStyle(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent,net.minecraft.world.BossEvent$BossBarOverlay) -> a
    283:289:int setName(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent,net.minecraft.network.chat.Component) -> a
    293:302:int setPlayers(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent,java.util.Collection) -> a
    306:312:int listBars(net.minecraft.commands.CommandSourceStack) -> a
    316:322:int createBar(net.minecraft.commands.CommandSourceStack,net.minecraft.resources.ResourceLocation,net.minecraft.network.chat.Component) -> a
    326:330:int removeBar(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent) -> e
    334:339:net.minecraft.server.bossevents.CustomBossEvent getBossBar(com.mojang.brigadier.context.CommandContext) -> a
    193:193:int lambda$register$28(com.mojang.brigadier.context.CommandContext) -> b
    189:189:int lambda$register$27(com.mojang.brigadier.context.CommandContext) -> c
    185:185:int lambda$register$26(com.mojang.brigadier.context.CommandContext) -> d
    181:181:int lambda$register$25(com.mojang.brigadier.context.CommandContext) -> e
    169:169:int lambda$register$24(com.mojang.brigadier.context.CommandContext) -> f
    166:166:int lambda$register$23(com.mojang.brigadier.context.CommandContext) -> g
    161:161:int lambda$register$22(com.mojang.brigadier.context.CommandContext) -> h
    154:154:int lambda$register$21(com.mojang.brigadier.context.CommandContext) -> i
    147:147:int lambda$register$20(com.mojang.brigadier.context.CommandContext) -> j
    140:140:int lambda$register$19(com.mojang.brigadier.context.CommandContext) -> k
    136:136:int lambda$register$18(com.mojang.brigadier.context.CommandContext) -> l
    132:132:int lambda$register$17(com.mojang.brigadier.context.CommandContext) -> m
    128:128:int lambda$register$16(com.mojang.brigadier.context.CommandContext) -> n
    124:124:int lambda$register$15(com.mojang.brigadier.context.CommandContext) -> o
    117:117:int lambda$register$14(com.mojang.brigadier.context.CommandContext) -> p
    113:113:int lambda$register$13(com.mojang.brigadier.context.CommandContext) -> q
    109:109:int lambda$register$12(com.mojang.brigadier.context.CommandContext) -> r
    105:105:int lambda$register$11(com.mojang.brigadier.context.CommandContext) -> s
    101:101:int lambda$register$10(com.mojang.brigadier.context.CommandContext) -> t
    97:97:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> u
    93:93:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> v
    86:86:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> w
    75:75:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> x
    70:70:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> y
    61:61:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> z
    54:54:boolean lambda$register$3(net.minecraft.commands.CommandSourceStack) -> b
    49:49:java.util.concurrent.CompletableFuture lambda$static$2(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    40:40:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> a
    39:39:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> b
    39:49:void <clinit>() -> <clinit>
net.minecraft.server.commands.ClearInventoryCommands -> tk:
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_SINGLE -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_MULTIPLE -> b
    25:25:void <init>() -> <init>
    30:47:void register(com.mojang.brigadier.CommandDispatcher) -> a
    50:81:int clearInventory(net.minecraft.commands.CommandSourceStack,java.util.Collection,java.util.function.Predicate,int) -> a
    42:42:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> a
    39:39:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> b
    36:36:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> c
    36:36:boolean lambda$null$5(net.minecraft.world.item.ItemStack) -> a
    33:33:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> d
    33:33:boolean lambda$null$3(net.minecraft.world.item.ItemStack) -> b
    32:32:boolean lambda$register$2(net.minecraft.commands.CommandSourceStack) -> a
    27:27:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> a
    26:26:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> b
    26:27:void <clinit>() -> <clinit>
net.minecraft.server.commands.CloneCommands -> tl:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_OVERLAP -> b
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_AREA_TOO_LARGE -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> d
    java.util.function.Predicate FILTER_AIR -> a
    36:36:void <init>() -> <init>
    44:109:void register(com.mojang.brigadier.CommandDispatcher) -> a
    112:213:int clone(net.minecraft.commands.CommandSourceStack,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,java.util.function.Predicate,net.minecraft.server.commands.CloneCommands$Mode) -> a
    101:101:int lambda$register$20(com.mojang.brigadier.context.CommandContext) -> a
    97:97:int lambda$register$19(com.mojang.brigadier.context.CommandContext) -> b
    93:93:int lambda$register$18(com.mojang.brigadier.context.CommandContext) -> c
    90:90:int lambda$register$17(com.mojang.brigadier.context.CommandContext) -> d
    83:83:int lambda$register$16(com.mojang.brigadier.context.CommandContext) -> e
    79:79:int lambda$register$15(com.mojang.brigadier.context.CommandContext) -> f
    75:75:int lambda$register$14(com.mojang.brigadier.context.CommandContext) -> g
    72:72:int lambda$register$13(com.mojang.brigadier.context.CommandContext) -> h
    67:67:int lambda$register$12(com.mojang.brigadier.context.CommandContext) -> i
    67:67:boolean lambda$null$11(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> a
    63:63:int lambda$register$10(com.mojang.brigadier.context.CommandContext) -> j
    63:63:boolean lambda$null$9(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> b
    59:59:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> k
    59:59:boolean lambda$null$7(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> c
    56:56:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> l
    56:56:boolean lambda$null$5(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> d
    53:53:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> m
    53:53:boolean lambda$null$3(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> e
    46:46:boolean lambda$register$2(net.minecraft.commands.CommandSourceStack) -> a
    41:41:boolean lambda$static$1(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> f
    39:39:com.mojang.brigadier.Message lambda$static$0(java.lang.Object,java.lang.Object) -> a
    38:41:void <clinit>() -> <clinit>
net.minecraft.server.commands.CloneCommands$CloneBlockInfo -> tl$a:
    net.minecraft.core.BlockPos pos -> a
    net.minecraft.world.level.block.state.BlockState state -> b
    net.minecraft.nbt.CompoundTag tag -> c
    239:243:void <init>(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.nbt.CompoundTag) -> <init>
net.minecraft.server.commands.CloneCommands$Mode -> tl$b:
    net.minecraft.server.commands.CloneCommands$Mode FORCE -> a
    net.minecraft.server.commands.CloneCommands$Mode MOVE -> b
    net.minecraft.server.commands.CloneCommands$Mode NORMAL -> c
    boolean canOverlap -> d
    net.minecraft.server.commands.CloneCommands$Mode[] $VALUES -> e
    216:216:net.minecraft.server.commands.CloneCommands$Mode[] values() -> values
    216:216:net.minecraft.server.commands.CloneCommands$Mode valueOf(java.lang.String) -> valueOf
    224:226:void <init>(java.lang.String,int,boolean) -> <init>
    229:229:boolean canOverlap() -> a
    216:219:void <clinit>() -> <clinit>
net.minecraft.server.commands.DataPackCommand -> tm:
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_UNKNOWN_PACK -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_PACK_ALREADY_ENABLED -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_PACK_ALREADY_DISABLED -> c
    com.mojang.brigadier.suggestion.SuggestionProvider SELECTED_PACKS -> d
    com.mojang.brigadier.suggestion.SuggestionProvider AVAILABLE_PACKS -> e
    27:27:void <init>() -> <init>
    36:92:void register(com.mojang.brigadier.CommandDispatcher) -> a
    95:109:int enablePack(net.minecraft.commands.CommandSourceStack,net.minecraft.server.packs.repository.UnopenedPack,net.minecraft.server.commands.DataPackCommand$Inserter) -> a
    113:127:int disablePack(net.minecraft.commands.CommandSourceStack,net.minecraft.server.packs.repository.UnopenedPack) -> a
    131:131:int listPacks(net.minecraft.commands.CommandSourceStack) -> a
    135:143:int listAvailablePacks(net.minecraft.commands.CommandSourceStack) -> b
    147:155:int listEnabledPacks(net.minecraft.commands.CommandSourceStack) -> c
    159:172:net.minecraft.server.packs.repository.UnopenedPack getPack(com.mojang.brigadier.context.CommandContext,java.lang.String,boolean) -> a
    152:152:net.minecraft.network.chat.Component lambda$listEnabledPacks$23(net.minecraft.server.packs.repository.UnopenedPack) -> a
    140:140:net.minecraft.network.chat.Component lambda$listAvailablePacks$22(net.minecraft.server.packs.repository.UnopenedPack) -> b
    121:121:void lambda$disablePack$21(net.minecraft.world.level.storage.LevelData,net.minecraft.server.packs.repository.UnopenedPack) -> a
    103:103:void lambda$enablePack$20(net.minecraft.world.level.storage.LevelData,net.minecraft.server.packs.repository.UnopenedPack) -> b
    88:88:int lambda$register$19(com.mojang.brigadier.context.CommandContext) -> a
    84:84:int lambda$register$18(com.mojang.brigadier.context.CommandContext) -> b
    81:81:int lambda$register$17(com.mojang.brigadier.context.CommandContext) -> c
    76:76:int lambda$register$16(com.mojang.brigadier.context.CommandContext) -> d
    67:67:int lambda$register$15(com.mojang.brigadier.context.CommandContext) -> e
    67:67:void lambda$null$14(java.util.List,net.minecraft.server.packs.repository.UnopenedPack) -> a
    63:63:int lambda$register$13(com.mojang.brigadier.context.CommandContext) -> f
    58:58:int lambda$register$12(com.mojang.brigadier.context.CommandContext) -> g
    58:58:void lambda$null$11(com.mojang.brigadier.context.CommandContext,java.util.List,net.minecraft.server.packs.repository.UnopenedPack) -> a
    50:50:int lambda$register$10(com.mojang.brigadier.context.CommandContext) -> h
    50:50:void lambda$null$9(com.mojang.brigadier.context.CommandContext,java.util.List,net.minecraft.server.packs.repository.UnopenedPack) -> b
    44:44:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> i
    44:44:void lambda$null$7(java.util.List,net.minecraft.server.packs.repository.UnopenedPack) -> b
    44:44:net.minecraft.server.packs.repository.UnopenedPack lambda$null$6(net.minecraft.server.packs.repository.UnopenedPack) -> c
    38:38:boolean lambda$register$5(net.minecraft.commands.CommandSourceStack) -> d
    33:33:java.util.concurrent.CompletableFuture lambda$static$4(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    32:32:java.util.concurrent.CompletableFuture lambda$static$3(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    30:30:com.mojang.brigadier.Message lambda$static$2(java.lang.Object) -> a
    29:29:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> b
    28:28:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> c
    28:33:void <clinit>() -> <clinit>
net.minecraft.server.commands.DataPackCommand$Inserter -> tm$a:
    void apply(java.util.List,net.minecraft.server.packs.repository.UnopenedPack) -> apply
net.minecraft.server.commands.DeOpCommands -> tn:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_OP -> a
    20:20:void <init>() -> <init>
    24:33:void register(com.mojang.brigadier.CommandDispatcher) -> a
    36:52:int deopPlayers(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    30:30:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    29:29:java.util.concurrent.CompletableFuture lambda$register$1(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    26:26:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.server.commands.DebugCommand -> to:
    org.apache.logging.log4j.Logger LOGGER -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_RUNNING -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_RUNNING -> c
    java.nio.file.spi.FileSystemProvider ZIP_FS_PROVIDER -> d
    31:31:void <init>() -> <init>
    40:47:void register(com.mojang.brigadier.CommandDispatcher) -> a
    50:57:int start(net.minecraft.commands.CommandSourceStack) -> a
    61:75:int stop(net.minecraft.commands.CommandSourceStack) -> b
    79:101:int report(net.minecraft.commands.CommandSourceStack) -> c
    45:45:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> a
    44:44:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> b
    43:43:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> c
    42:42:boolean lambda$register$1(net.minecraft.commands.CommandSourceStack) -> d
    37:37:boolean lambda$static$0(java.nio.file.spi.FileSystemProvider) -> a
    32:37:void <clinit>() -> <clinit>
net.minecraft.server.commands.DebugPathCommand -> tp:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_MOB -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_PATH -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_COMPLETE -> c
    22:22:void <init>() -> <init>
    28:36:void register(com.mojang.brigadier.CommandDispatcher) -> a
    39:58:int fillBlocks(net.minecraft.commands.CommandSourceStack,net.minecraft.core.BlockPos) -> a
    33:33:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> a
    30:30:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    23:25:void <clinit>() -> <clinit>
net.minecraft.server.commands.DefaultGameModeCommands -> tq:
    14:14:void <init>() -> <init>
    16:25:void register(com.mojang.brigadier.CommandDispatcher) -> a
    28:43:int setMode(net.minecraft.commands.CommandSourceStack,net.minecraft.world.level.GameType) -> a
    20:20:int lambda$register$1(net.minecraft.world.level.GameType,com.mojang.brigadier.context.CommandContext) -> a
    16:16:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.DifficultyCommand -> tr:
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_ALREADY_DIFFICULT -> a
    16:16:void <init>() -> <init>
    20:35:void register(com.mojang.brigadier.CommandDispatcher) -> a
    38:46:int setDifficulty(net.minecraft.commands.CommandSourceStack,net.minecraft.world.Difficulty) -> a
    30:32:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> a
    28:28:boolean lambda$register$2(net.minecraft.commands.CommandSourceStack) -> a
    23:23:int lambda$register$1(net.minecraft.world.Difficulty,com.mojang.brigadier.context.CommandContext) -> a
    17:17:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    17:17:void <clinit>() -> <clinit>
net.minecraft.server.commands.EffectCommands -> ts:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_GIVE_FAILED -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_CLEAR_EVERYTHING_FAILED -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_CLEAR_SPECIFIC_FAILED -> c
    30:30:void <init>() -> <init>
    36:74:void register(com.mojang.brigadier.CommandDispatcher) -> a
    77:113:int giveEffect(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.effect.MobEffect,java.lang.Integer,int,boolean) -> a
    117:137:int clearEffects(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    141:161:int clearEffect(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.effect.MobEffect) -> a
    66:66:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> a
    63:63:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> b
    60:60:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> c
    57:57:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> d
    47:47:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> e
    44:44:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> f
    41:41:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> g
    38:38:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    31:33:void <clinit>() -> <clinit>
net.minecraft.server.commands.EmoteCommands -> tt:
    12:12:void <init>() -> <init>
    14:23:void register(com.mojang.brigadier.CommandDispatcher) -> a
    18:19:int lambda$register$0(com.mojang.brigadier.context.CommandContext) -> a
net.minecraft.server.commands.EnchantCommand -> tu:
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NOT_LIVING_ENTITY -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NO_ITEM -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INCOMPATIBLE -> c
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_LEVEL_TOO_HIGH -> d
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOTHING_HAPPENED -> e
    28:28:void <init>() -> <init>
    36:51:void register(com.mojang.brigadier.CommandDispatcher) -> a
    54:88:int enchant(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.item.enchantment.Enchantment,int) -> a
    46:46:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> a
    43:43:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> b
    38:38:boolean lambda$register$4(net.minecraft.commands.CommandSourceStack) -> a
    32:32:com.mojang.brigadier.Message lambda$static$3(java.lang.Object,java.lang.Object) -> a
    31:31:com.mojang.brigadier.Message lambda$static$2(java.lang.Object) -> a
    30:30:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> b
    29:29:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> c
    29:33:void <clinit>() -> <clinit>
net.minecraft.server.commands.ExecuteCommand -> tv:
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_AREA_TOO_LARGE -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_CONDITIONAL_FAILED -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_CONDITIONAL_FAILED_COUNT -> c
    java.util.function.BinaryOperator CALLBACK_CHAINER -> d
    com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_PREDICATE -> e
    95:95:void <init>() -> <init>
    123:255:void register(com.mojang.brigadier.CommandDispatcher) -> a
    258:341:com.mojang.brigadier.builder.ArgumentBuilder wrapStores(com.mojang.brigadier.tree.LiteralCommandNode,com.mojang.brigadier.builder.LiteralArgumentBuilder,boolean) -> a
    345:347:net.minecraft.commands.CommandSourceStack storeValue(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.scores.Objective,boolean) -> a
    357:357:net.minecraft.commands.CommandSourceStack storeValue(net.minecraft.commands.CommandSourceStack,net.minecraft.server.bossevents.CustomBossEvent,boolean,boolean) -> a
    368:368:net.minecraft.commands.CommandSourceStack storeData(net.minecraft.commands.CommandSourceStack,net.minecraft.server.commands.data.DataAccessor,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.function.IntFunction,boolean) -> a
    380:504:com.mojang.brigadier.builder.ArgumentBuilder addConditionals(com.mojang.brigadier.tree.CommandNode,com.mojang.brigadier.builder.LiteralArgumentBuilder,boolean) -> a
    508:519:com.mojang.brigadier.Command createNumericConditionalHandler(boolean,net.minecraft.server.commands.ExecuteCommand$CommandNumericPredicate) -> a
    532:532:int checkMatchingData(net.minecraft.server.commands.data.DataAccessor,net.minecraft.commands.arguments.NbtPathArgument$NbtPath) -> a
    536:549:boolean checkScore(com.mojang.brigadier.context.CommandContext,java.util.function.BiPredicate) -> a
    553:562:boolean checkScore(com.mojang.brigadier.context.CommandContext,net.minecraft.advancements.critereon.MinMaxBounds$Ints) -> a
    566:572:boolean checkCustomPredicate(net.minecraft.commands.CommandSourceStack,net.minecraft.world.level.storage.loot.predicates.LootItemCondition) -> a
    576:579:java.util.Collection expect(com.mojang.brigadier.context.CommandContext,boolean,boolean) -> a
    584:586:com.mojang.brigadier.builder.ArgumentBuilder addConditional(com.mojang.brigadier.tree.CommandNode,com.mojang.brigadier.builder.ArgumentBuilder,boolean,net.minecraft.server.commands.ExecuteCommand$CommandPredicate) -> a
    597:599:com.mojang.brigadier.builder.ArgumentBuilder addIfBlocksConditional(com.mojang.brigadier.tree.CommandNode,com.mojang.brigadier.builder.ArgumentBuilder,boolean,boolean) -> a
    603:608:int checkIfRegions(com.mojang.brigadier.context.CommandContext,boolean) -> a
    613:618:int checkUnlessRegions(com.mojang.brigadier.context.CommandContext,boolean) -> b
    623:623:java.util.OptionalInt checkRegions(com.mojang.brigadier.context.CommandContext,boolean) -> c
    627:678:java.util.OptionalInt checkRegions(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,boolean) -> a
    599:599:int lambda$addIfBlocksConditional$61(boolean,com.mojang.brigadier.context.CommandContext) -> a
    599:599:int lambda$addIfBlocksConditional$60(boolean,com.mojang.brigadier.context.CommandContext) -> b
    598:598:java.util.Collection lambda$addIfBlocksConditional$59(boolean,boolean,com.mojang.brigadier.context.CommandContext) -> a
    587:591:int lambda$addConditional$58(boolean,net.minecraft.server.commands.ExecuteCommand$CommandPredicate,com.mojang.brigadier.context.CommandContext) -> a
    585:585:java.util.Collection lambda$addConditional$57(boolean,net.minecraft.server.commands.ExecuteCommand$CommandPredicate,com.mojang.brigadier.context.CommandContext) -> b
    520:525:int lambda$createNumericConditionalHandler$56(net.minecraft.server.commands.ExecuteCommand$CommandNumericPredicate,com.mojang.brigadier.context.CommandContext) -> a
    510:515:int lambda$createNumericConditionalHandler$55(net.minecraft.server.commands.ExecuteCommand$CommandNumericPredicate,com.mojang.brigadier.context.CommandContext) -> b
    494:498:com.mojang.brigadier.builder.ArgumentBuilder lambda$addConditionals$54(com.mojang.brigadier.tree.CommandNode,boolean,net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.builder.ArgumentBuilder) -> a
    498:498:int lambda$null$53(net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.context.CommandContext) -> a
    497:497:java.util.Collection lambda$null$52(boolean,net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.context.CommandContext) -> a
    486:486:boolean lambda$addConditionals$51(com.mojang.brigadier.context.CommandContext) -> a
    479:479:int lambda$addConditionals$50(com.mojang.brigadier.context.CommandContext) -> b
    478:478:java.util.Collection lambda$addConditionals$49(boolean,com.mojang.brigadier.context.CommandContext) -> c
    450:450:boolean lambda$addConditionals$48(com.mojang.brigadier.context.CommandContext) -> c
    443:443:boolean lambda$addConditionals$47(com.mojang.brigadier.context.CommandContext) -> d
    443:443:boolean lambda$null$46(java.lang.Integer,java.lang.Integer) -> a
    433:433:boolean lambda$addConditionals$45(com.mojang.brigadier.context.CommandContext) -> e
    433:433:boolean lambda$null$44(java.lang.Integer,java.lang.Integer) -> b
    423:423:boolean lambda$addConditionals$43(com.mojang.brigadier.context.CommandContext) -> f
    423:423:boolean lambda$null$42(java.lang.Integer,java.lang.Integer) -> c
    413:413:boolean lambda$addConditionals$41(com.mojang.brigadier.context.CommandContext) -> g
    413:413:boolean lambda$null$40(java.lang.Integer,java.lang.Integer) -> d
    403:403:boolean lambda$addConditionals$39(com.mojang.brigadier.context.CommandContext) -> h
    386:386:boolean lambda$addConditionals$38(com.mojang.brigadier.context.CommandContext) -> i
    370:376:void lambda$storeData$37(net.minecraft.server.commands.data.DataAccessor,boolean,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.function.IntFunction,com.mojang.brigadier.context.CommandContext,boolean,int) -> a
    372:372:net.minecraft.nbt.Tag lambda$null$36(java.util.function.IntFunction,int) -> a
    358:364:void lambda$storeValue$35(boolean,boolean,net.minecraft.server.bossevents.CustomBossEvent,com.mojang.brigadier.context.CommandContext,boolean,int) -> a
    348:353:void lambda$storeValue$34(java.util.Collection,net.minecraft.world.scores.Scoreboard,net.minecraft.world.scores.Objective,boolean,com.mojang.brigadier.context.CommandContext,boolean,int) -> a
    287:334:com.mojang.brigadier.builder.ArgumentBuilder lambda$wrapStores$33(com.mojang.brigadier.tree.LiteralCommandNode,net.minecraft.server.commands.data.DataCommands$DataProvider,boolean,com.mojang.brigadier.builder.ArgumentBuilder) -> a
    334:334:net.minecraft.commands.CommandSourceStack lambda$null$32(net.minecraft.server.commands.data.DataCommands$DataProvider,boolean,com.mojang.brigadier.context.CommandContext) -> a
    334:334:net.minecraft.nbt.Tag lambda$null$31(com.mojang.brigadier.context.CommandContext,int) -> a
    326:326:net.minecraft.commands.CommandSourceStack lambda$null$30(net.minecraft.server.commands.data.DataCommands$DataProvider,boolean,com.mojang.brigadier.context.CommandContext) -> b
    326:326:net.minecraft.nbt.Tag lambda$null$29(com.mojang.brigadier.context.CommandContext,int) -> b
    318:318:net.minecraft.commands.CommandSourceStack lambda$null$28(net.minecraft.server.commands.data.DataCommands$DataProvider,boolean,com.mojang.brigadier.context.CommandContext) -> c
    318:318:net.minecraft.nbt.Tag lambda$null$27(com.mojang.brigadier.context.CommandContext,int) -> c
    310:310:net.minecraft.commands.CommandSourceStack lambda$null$26(net.minecraft.server.commands.data.DataCommands$DataProvider,boolean,com.mojang.brigadier.context.CommandContext) -> d
    310:310:net.minecraft.nbt.Tag lambda$null$25(com.mojang.brigadier.context.CommandContext,int) -> d
    302:302:net.minecraft.commands.CommandSourceStack lambda$null$24(net.minecraft.server.commands.data.DataCommands$DataProvider,boolean,com.mojang.brigadier.context.CommandContext) -> e
    302:302:net.minecraft.nbt.Tag lambda$null$23(com.mojang.brigadier.context.CommandContext,int) -> e
    294:294:net.minecraft.commands.CommandSourceStack lambda$null$22(net.minecraft.server.commands.data.DataCommands$DataProvider,boolean,com.mojang.brigadier.context.CommandContext) -> f
    294:294:net.minecraft.nbt.Tag lambda$null$21(com.mojang.brigadier.context.CommandContext,int) -> f
    281:281:net.minecraft.commands.CommandSourceStack lambda$wrapStores$20(boolean,com.mojang.brigadier.context.CommandContext) -> d
    277:277:net.minecraft.commands.CommandSourceStack lambda$wrapStores$19(boolean,com.mojang.brigadier.context.CommandContext) -> e
    265:265:net.minecraft.commands.CommandSourceStack lambda$wrapStores$18(boolean,com.mojang.brigadier.context.CommandContext) -> f
    251:251:net.minecraft.commands.CommandSourceStack lambda$register$17(com.mojang.brigadier.context.CommandContext) -> j
    244:244:net.minecraft.commands.CommandSourceStack lambda$register$16(com.mojang.brigadier.context.CommandContext) -> k
    237:237:net.minecraft.commands.CommandSourceStack lambda$register$15(com.mojang.brigadier.context.CommandContext) -> l
    230:230:net.minecraft.commands.CommandSourceStack lambda$register$14(com.mojang.brigadier.context.CommandContext) -> m
    218:223:java.util.Collection lambda$register$13(com.mojang.brigadier.context.CommandContext) -> n
    200:204:java.util.Collection lambda$register$12(com.mojang.brigadier.context.CommandContext) -> o
    193:193:net.minecraft.commands.CommandSourceStack lambda$register$11(com.mojang.brigadier.context.CommandContext) -> p
    180:184:java.util.Collection lambda$register$10(com.mojang.brigadier.context.CommandContext) -> q
    173:173:net.minecraft.commands.CommandSourceStack lambda$register$9(com.mojang.brigadier.context.CommandContext) -> r
    156:160:java.util.Collection lambda$register$8(com.mojang.brigadier.context.CommandContext) -> s
    143:147:java.util.Collection lambda$register$7(com.mojang.brigadier.context.CommandContext) -> t
    127:127:boolean lambda$register$6(net.minecraft.commands.CommandSourceStack) -> a
    123:123:boolean lambda$register$5(net.minecraft.commands.CommandSourceStack) -> b
    108:109:java.util.concurrent.CompletableFuture lambda$static$4(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    102:102:com.mojang.brigadier.ResultConsumer lambda$static$3(com.mojang.brigadier.ResultConsumer,com.mojang.brigadier.ResultConsumer) -> a
    103:105:void lambda$null$2(com.mojang.brigadier.ResultConsumer,com.mojang.brigadier.ResultConsumer,com.mojang.brigadier.context.CommandContext,boolean,int) -> a
    100:100:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> a
    97:97:com.mojang.brigadier.Message lambda$static$0(java.lang.Object,java.lang.Object) -> a
    97:107:void <clinit>() -> <clinit>
net.minecraft.server.commands.ExecuteCommand$CommandNumericPredicate -> tv$a:
    int test(com.mojang.brigadier.context.CommandContext) -> test
net.minecraft.server.commands.ExecuteCommand$CommandPredicate -> tv$b:
    boolean test(com.mojang.brigadier.context.CommandContext) -> test
net.minecraft.server.commands.ExperienceCommand -> tw:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SET_POINTS_INVALID -> a
    29:29:void <init>() -> <init>
    33:93:void register(com.mojang.brigadier.CommandDispatcher) -> a
    96:98:int queryExperience(net.minecraft.commands.CommandSourceStack,net.minecraft.server.level.ServerPlayer,net.minecraft.server.commands.ExperienceCommand$Type) -> a
    102:112:int addExperience(net.minecraft.commands.CommandSourceStack,java.util.Collection,int,net.minecraft.server.commands.ExperienceCommand$Type) -> a
    116:134:int setExperience(net.minecraft.commands.CommandSourceStack,java.util.Collection,int,net.minecraft.server.commands.ExperienceCommand$Type) -> b
    90:90:boolean lambda$register$9(net.minecraft.commands.CommandSourceStack) -> a
    82:82:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> a
    78:78:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> b
    67:67:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> c
    63:63:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> d
    60:60:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> e
    49:49:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> f
    45:45:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> g
    42:42:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> h
    35:35:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> b
    30:30:void <clinit>() -> <clinit>
net.minecraft.server.commands.ExperienceCommand$Type -> tw$a:
    net.minecraft.server.commands.ExperienceCommand$Type POINTS -> a
    net.minecraft.server.commands.ExperienceCommand$Type LEVELS -> b
    java.util.function.BiConsumer add -> c
    java.util.function.BiPredicate set -> d
    java.lang.String name -> e
    java.util.function.ToIntFunction query -> f
    net.minecraft.server.commands.ExperienceCommand$Type[] $VALUES -> g
    137:137:net.minecraft.server.commands.ExperienceCommand$Type[] values() -> values
    137:137:net.minecraft.server.commands.ExperienceCommand$Type valueOf(java.lang.String) -> valueOf
    155:160:void <init>(java.lang.String,int,java.lang.String,java.util.function.BiConsumer,java.util.function.BiPredicate,java.util.function.ToIntFunction) -> <init>
    148:148:int lambda$static$3(net.minecraft.server.level.ServerPlayer) -> a
    146:147:boolean lambda$static$2(net.minecraft.server.level.ServerPlayer,java.lang.Integer) -> a
    144:144:int lambda$static$1(net.minecraft.server.level.ServerPlayer) -> b
    139:143:boolean lambda$static$0(net.minecraft.server.level.ServerPlayer,java.lang.Integer) -> b
    137:137:java.util.function.ToIntFunction access$000(net.minecraft.server.commands.ExperienceCommand$Type) -> a
    137:145:void <clinit>() -> <clinit>
net.minecraft.server.commands.FillCommand -> tx:
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_AREA_TOO_LARGE -> a
    net.minecraft.commands.arguments.blocks.BlockInput HOLLOW_CORE -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> c
    36:36:void <init>() -> <init>
    43:81:void register(com.mojang.brigadier.CommandDispatcher) -> a
    84:124:int fillBlocks(net.minecraft.commands.CommandSourceStack,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.commands.arguments.blocks.BlockInput,net.minecraft.server.commands.FillCommand$Mode,java.util.function.Predicate) -> a
    75:75:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> a
    71:71:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> b
    67:67:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> c
    63:63:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> d
    63:63:boolean lambda$null$5(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> a
    58:58:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> e
    55:55:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> f
    52:52:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> g
    45:45:boolean lambda$register$1(net.minecraft.commands.CommandSourceStack) -> a
    38:38:com.mojang.brigadier.Message lambda$static$0(java.lang.Object,java.lang.Object) -> a
    36:36:net.minecraft.commands.arguments.blocks.BlockInput access$000() -> a
    38:40:void <clinit>() -> <clinit>
net.minecraft.server.commands.FillCommand$Mode -> tx$a:
    net.minecraft.server.commands.FillCommand$Mode REPLACE -> a
    net.minecraft.server.commands.FillCommand$Mode OUTLINE -> b
    net.minecraft.server.commands.FillCommand$Mode HOLLOW -> c
    net.minecraft.server.commands.FillCommand$Mode DESTROY -> d
    net.minecraft.server.commands.SetBlockCommand$Filter filter -> e
    net.minecraft.server.commands.FillCommand$Mode[] $VALUES -> f
    127:127:net.minecraft.server.commands.FillCommand$Mode[] values() -> values
    127:127:net.minecraft.server.commands.FillCommand$Mode valueOf(java.lang.String) -> valueOf
    150:152:void <init>(java.lang.String,int,net.minecraft.server.commands.SetBlockCommand$Filter) -> <init>
    144:145:net.minecraft.commands.arguments.blocks.BlockInput lambda$static$3(net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.BlockPos,net.minecraft.commands.arguments.blocks.BlockInput,net.minecraft.server.level.ServerLevel) -> a
    137:140:net.minecraft.commands.arguments.blocks.BlockInput lambda$static$2(net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.BlockPos,net.minecraft.commands.arguments.blocks.BlockInput,net.minecraft.server.level.ServerLevel) -> b
    130:133:net.minecraft.commands.arguments.blocks.BlockInput lambda$static$1(net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.BlockPos,net.minecraft.commands.arguments.blocks.BlockInput,net.minecraft.server.level.ServerLevel) -> c
    128:128:net.minecraft.commands.arguments.blocks.BlockInput lambda$static$0(net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.BlockPos,net.minecraft.commands.arguments.blocks.BlockInput,net.minecraft.server.level.ServerLevel) -> d
    127:143:void <clinit>() -> <clinit>
net.minecraft.server.commands.ForceLoadCommand -> ty:
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_TOO_MANY_CHUNKS -> a
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_NOT_TICKING -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALL_ADDED -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NONE_REMOVED -> d
    24:24:void <init>() -> <init>
    33:67:void register(com.mojang.brigadier.CommandDispatcher) -> a
    70:78:int queryForceLoad(net.minecraft.commands.CommandSourceStack,net.minecraft.server.level.ColumnPos) -> a
    83:98:int listForceLoad(net.minecraft.commands.CommandSourceStack) -> a
    102:107:int removeAll(net.minecraft.commands.CommandSourceStack) -> b
    111:162:int changeForceLoad(net.minecraft.commands.CommandSourceStack,net.minecraft.server.level.ColumnPos,net.minecraft.server.level.ColumnPos,boolean) -> a
    105:105:void lambda$removeAll$10(net.minecraft.server.level.ServerLevel,long) -> a
    63:63:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> a
    60:60:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> b
    55:55:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> c
    52:52:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> d
    49:49:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> e
    43:43:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> f
    40:40:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> g
    35:35:boolean lambda$register$2(net.minecraft.commands.CommandSourceStack) -> c
    28:28:com.mojang.brigadier.Message lambda$static$1(java.lang.Object,java.lang.Object) -> a
    27:27:com.mojang.brigadier.Message lambda$static$0(java.lang.Object,java.lang.Object) -> b
    27:30:void <clinit>() -> <clinit>
net.minecraft.server.commands.FunctionCommand -> tz:
    com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_FUNCTION -> a
    19:19:void <init>() -> <init>
    27:36:void register(com.mojang.brigadier.CommandDispatcher) -> a
    39:51:int runFunction(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    33:33:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    29:29:boolean lambda$register$1(net.minecraft.commands.CommandSourceStack) -> a
    21:23:java.util.concurrent.CompletableFuture lambda$static$0(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.server.commands.GameModeCommand -> ua:
    22:22:void <init>() -> <init>
    24:40:void register(com.mojang.brigadier.CommandDispatcher) -> a
    43:53:void logGamemodeChange(net.minecraft.commands.CommandSourceStack,net.minecraft.server.level.ServerPlayer,net.minecraft.world.level.GameType) -> a
    56:64:int setMode(com.mojang.brigadier.context.CommandContext,java.util.Collection,net.minecraft.world.level.GameType) -> a
    33:33:int lambda$register$2(net.minecraft.world.level.GameType,com.mojang.brigadier.context.CommandContext) -> a
    30:30:int lambda$register$1(net.minecraft.world.level.GameType,com.mojang.brigadier.context.CommandContext) -> b
    24:24:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.GameRuleCommand -> ub:
    13:13:void <init>() -> <init>
    15:32:void register(com.mojang.brigadier.CommandDispatcher) -> a
    35:39:int setRule(com.mojang.brigadier.context.CommandContext,net.minecraft.world.level.GameRules$Key) -> b
    43:45:int queryRule(net.minecraft.commands.CommandSourceStack,net.minecraft.world.level.GameRules$Key) -> b
    15:15:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    13:13:int access$000(com.mojang.brigadier.context.CommandContext,net.minecraft.world.level.GameRules$Key) -> a
    13:13:int access$100(net.minecraft.commands.CommandSourceStack,net.minecraft.world.level.GameRules$Key) -> a
net.minecraft.server.commands.GameRuleCommand$1 -> ub$1:
    com.mojang.brigadier.builder.LiteralArgumentBuilder val$base -> a
    17:17:void <init>(com.mojang.brigadier.builder.LiteralArgumentBuilder) -> <init>
    20:28:void visit(net.minecraft.world.level.GameRules$Key,net.minecraft.world.level.GameRules$Type) -> a
    25:25:int lambda$visit$1(net.minecraft.world.level.GameRules$Key,com.mojang.brigadier.context.CommandContext) -> a
    22:22:int lambda$visit$0(net.minecraft.world.level.GameRules$Key,com.mojang.brigadier.context.CommandContext) -> b
net.minecraft.server.commands.GiveCommand -> uc:
    26:26:void <init>() -> <init>
    28:43:void register(com.mojang.brigadier.CommandDispatcher) -> a
    46:80:int giveItem(net.minecraft.commands.CommandSourceStack,net.minecraft.commands.arguments.item.ItemInput,java.util.Collection,int) -> a
    38:38:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    35:35:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> b
    30:30:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.HelpCommand -> ud:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    19:19:void <init>() -> <init>
    23:47:void register(com.mojang.brigadier.CommandDispatcher) -> a
    35:43:int lambda$register$1(com.mojang.brigadier.CommandDispatcher,com.mojang.brigadier.context.CommandContext) -> a
    26:30:int lambda$register$0(com.mojang.brigadier.CommandDispatcher,com.mojang.brigadier.context.CommandContext) -> b
    20:20:void <clinit>() -> <clinit>
net.minecraft.server.commands.KickCommand -> ue:
    19:19:void <init>() -> <init>
    21:33:void register(com.mojang.brigadier.CommandDispatcher) -> a
    36:41:int kickPlayers(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.network.chat.Component) -> a
    29:29:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    26:26:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> b
    23:23:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.KillCommand -> uf:
    17:17:void <init>() -> <init>
    19:28:void register(com.mojang.brigadier.CommandDispatcher) -> a
    31:41:int kill(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    25:25:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    22:22:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> b
    21:21:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.ListPlayersCommand -> ug:
    17:17:void <init>() -> <init>
    19:27:void register(com.mojang.brigadier.CommandDispatcher) -> a
    30:30:int listPlayers(net.minecraft.commands.CommandSourceStack) -> a
    34:34:int listPlayersWithUuids(net.minecraft.commands.CommandSourceStack) -> b
    38:42:int format(net.minecraft.commands.CommandSourceStack,java.util.function.Function) -> a
    24:24:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> a
    21:21:int lambda$register$0(com.mojang.brigadier.context.CommandContext) -> b
net.minecraft.server.commands.LocateCommand -> uh:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    20:20:void <init>() -> <init>
    24:43:void register(com.mojang.brigadier.CommandDispatcher) -> a
    46:60:int locate(net.minecraft.commands.CommandSourceStack,java.lang.String) -> a
    64:66:float dist(int,int,int,int) -> a
    53:56:void lambda$locate$16(net.minecraft.core.BlockPos,net.minecraft.network.chat.Style) -> a
    41:41:int lambda$register$15(com.mojang.brigadier.context.CommandContext) -> a
    40:40:int lambda$register$14(com.mojang.brigadier.context.CommandContext) -> b
    39:39:int lambda$register$13(com.mojang.brigadier.context.CommandContext) -> c
    38:38:int lambda$register$12(com.mojang.brigadier.context.CommandContext) -> d
    37:37:int lambda$register$11(com.mojang.brigadier.context.CommandContext) -> e
    36:36:int lambda$register$10(com.mojang.brigadier.context.CommandContext) -> f
    35:35:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> g
    34:34:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> h
    33:33:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> i
    32:32:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> j
    31:31:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> k
    30:30:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> l
    29:29:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> m
    28:28:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> n
    27:27:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> o
    26:26:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.server.commands.LootCommand -> ui:
    com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_LOOT_TABLE -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NO_HELD_ITEMS -> b
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NO_LOOT_TABLE -> c
    60:60:void <init>() -> <init>
    70:133:void register(com.mojang.brigadier.CommandDispatcher) -> a
    151:204:com.mojang.brigadier.builder.ArgumentBuilder addTargets(com.mojang.brigadier.builder.ArgumentBuilder,net.minecraft.server.commands.LootCommand$TailProvider) -> a
    212:217:net.minecraft.world.Container getContainer(net.minecraft.commands.CommandSourceStack,net.minecraft.core.BlockPos) -> a
    221:232:int blockDistribute(net.minecraft.commands.CommandSourceStack,net.minecraft.core.BlockPos,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    236:257:boolean distributeToContainer(net.minecraft.world.Container,net.minecraft.world.item.ItemStack) -> a
    261:281:int blockReplace(net.minecraft.commands.CommandSourceStack,net.minecraft.core.BlockPos,int,int,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    285:288:boolean canMergeItems(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    292:302:int playerGive(java.util.Collection,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    306:312:void setSlots(net.minecraft.world.entity.Entity,java.util.List,int,int,java.util.List) -> a
    315:329:int entityReplace(java.util.Collection,int,int,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    333:341:int dropInWorld(net.minecraft.commands.CommandSourceStack,net.minecraft.world.phys.Vec3,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    345:351:void callback(net.minecraft.commands.CommandSourceStack,java.util.List) -> a
    354:360:void callback(net.minecraft.commands.CommandSourceStack,java.util.List,net.minecraft.resources.ResourceLocation) -> a
    363:367:net.minecraft.world.item.ItemStack getSourceHandItem(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.EquipmentSlot) -> a
    372:385:int dropBlockLoot(com.mojang.brigadier.context.CommandContext,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
    389:409:int dropKillLoot(com.mojang.brigadier.context.CommandContext,net.minecraft.world.entity.Entity,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
    413:419:int dropChestLoot(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.ResourceLocation,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
    423:430:int dropFishingLoot(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.ResourceLocation,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
    434:437:int drop(com.mojang.brigadier.context.CommandContext,net.minecraft.resources.ResourceLocation,net.minecraft.world.level.storage.loot.LootContext,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
    437:437:void lambda$drop$25(net.minecraft.commands.CommandSourceStack,java.util.List) -> b
    409:409:void lambda$dropKillLoot$24(net.minecraft.commands.CommandSourceStack,net.minecraft.resources.ResourceLocation,java.util.List) -> a
    385:385:void lambda$dropBlockLoot$23(net.minecraft.commands.CommandSourceStack,net.minecraft.world.level.block.state.BlockState,java.util.List) -> a
    335:338:void lambda$dropInWorld$22(net.minecraft.server.level.ServerLevel,net.minecraft.world.phys.Vec3,net.minecraft.world.item.ItemStack) -> a
    205:205:int lambda$addTargets$21(com.mojang.brigadier.context.CommandContext,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> a
    197:197:int lambda$addTargets$20(com.mojang.brigadier.context.CommandContext,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> b
    189:189:int lambda$addTargets$19(com.mojang.brigadier.context.CommandContext,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> c
    178:178:int lambda$addTargets$18(com.mojang.brigadier.context.CommandContext,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> d
    174:174:int lambda$addTargets$17(com.mojang.brigadier.context.CommandContext,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> e
    163:163:int lambda$addTargets$16(com.mojang.brigadier.context.CommandContext,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> f
    159:159:int lambda$addTargets$15(com.mojang.brigadier.context.CommandContext,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> g
    75:127:com.mojang.brigadier.builder.ArgumentBuilder lambda$register$14(com.mojang.brigadier.builder.ArgumentBuilder,net.minecraft.server.commands.LootCommand$DropConsumer) -> a
    127:127:int lambda$null$13(net.minecraft.server.commands.LootCommand$DropConsumer,com.mojang.brigadier.context.CommandContext) -> a
    123:123:int lambda$null$12(net.minecraft.server.commands.LootCommand$DropConsumer,com.mojang.brigadier.context.CommandContext) -> b
    119:119:int lambda$null$11(net.minecraft.server.commands.LootCommand$DropConsumer,com.mojang.brigadier.context.CommandContext) -> c
    116:116:int lambda$null$10(net.minecraft.server.commands.LootCommand$DropConsumer,com.mojang.brigadier.context.CommandContext) -> d
    109:109:int lambda$null$9(net.minecraft.server.commands.LootCommand$DropConsumer,com.mojang.brigadier.context.CommandContext) -> e
    102:102:int lambda$null$8(net.minecraft.server.commands.LootCommand$DropConsumer,com.mojang.brigadier.context.CommandContext) -> f
    93:93:int lambda$null$7(net.minecraft.server.commands.LootCommand$DropConsumer,com.mojang.brigadier.context.CommandContext) -> g
    89:89:int lambda$null$6(net.minecraft.server.commands.LootCommand$DropConsumer,com.mojang.brigadier.context.CommandContext) -> h
    85:85:int lambda$null$5(net.minecraft.server.commands.LootCommand$DropConsumer,com.mojang.brigadier.context.CommandContext) -> i
    82:82:int lambda$null$4(net.minecraft.server.commands.LootCommand$DropConsumer,com.mojang.brigadier.context.CommandContext) -> j
    73:73:boolean lambda$register$3(net.minecraft.commands.CommandSourceStack) -> a
    67:67:com.mojang.brigadier.Message lambda$static$2(java.lang.Object) -> a
    66:66:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> b
    62:63:java.util.concurrent.CompletableFuture lambda$static$0(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    61:67:void <clinit>() -> <clinit>
net.minecraft.server.commands.LootCommand$Callback -> ui$a:
    void accept(java.util.List) -> accept
net.minecraft.server.commands.LootCommand$DropConsumer -> ui$b:
    int accept(com.mojang.brigadier.context.CommandContext,java.util.List,net.minecraft.server.commands.LootCommand$Callback) -> accept
net.minecraft.server.commands.LootCommand$TailProvider -> ui$c:
    com.mojang.brigadier.builder.ArgumentBuilder construct(com.mojang.brigadier.builder.ArgumentBuilder,net.minecraft.server.commands.LootCommand$DropConsumer) -> construct
net.minecraft.server.commands.MsgCommand -> uj:
    20:20:void <init>() -> <init>
    22:34:void register(com.mojang.brigadier.CommandDispatcher) -> a
    37:42:int sendMessage(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.network.chat.Component) -> a
    28:28:int lambda$register$0(com.mojang.brigadier.context.CommandContext) -> a
net.minecraft.server.commands.OpCommand -> uk:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_OP -> a
    20:20:void <init>() -> <init>
    24:36:void register(com.mojang.brigadier.CommandDispatcher) -> a
    39:54:int opPlayers(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    33:33:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> a
    30:31:java.util.concurrent.CompletableFuture lambda$register$3(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    31:31:java.lang.String lambda$null$2(net.minecraft.server.level.ServerPlayer) -> a
    31:31:boolean lambda$null$1(net.minecraft.server.players.PlayerList,net.minecraft.server.level.ServerPlayer) -> a
    26:26:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.server.commands.PardonCommand -> ul:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_BANNED -> a
    21:21:void <init>() -> <init>
    25:34:void register(com.mojang.brigadier.CommandDispatcher) -> a
    37:52:int pardonPlayers(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    31:31:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    30:30:java.util.concurrent.CompletableFuture lambda$register$1(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    27:27:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    22:22:void <clinit>() -> <clinit>
net.minecraft.server.commands.PardonIpCommand -> um:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_BANNED -> b
    19:19:void <init>() -> <init>
    24:33:void register(com.mojang.brigadier.CommandDispatcher) -> a
    36:48:int unban(net.minecraft.commands.CommandSourceStack,java.lang.String) -> a
    30:30:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    29:29:java.util.concurrent.CompletableFuture lambda$register$1(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    26:26:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    20:21:void <clinit>() -> <clinit>
net.minecraft.server.commands.ParticleCommand -> un:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    29:29:void <init>() -> <init>
    33:71:void register(com.mojang.brigadier.CommandDispatcher) -> a
    74:88:int sendParticles(net.minecraft.commands.CommandSourceStack,net.minecraft.core.particles.ParticleOptions,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,float,int,boolean,java.util.Collection) -> a
    62:62:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> a
    59:59:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> b
    54:54:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> c
    51:51:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> d
    48:48:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> e
    41:41:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> f
    38:38:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> g
    35:35:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    30:30:void <clinit>() -> <clinit>
net.minecraft.server.commands.PlaySoundCommand -> uo:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TOO_FAR -> a
    31:31:void <init>() -> <init>
    35:46:void register(com.mojang.brigadier.CommandDispatcher) -> a
    49:64:com.mojang.brigadier.builder.LiteralArgumentBuilder source(net.minecraft.sounds.SoundSource) -> a
    73:108:int playSound(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.resources.ResourceLocation,net.minecraft.sounds.SoundSource,net.minecraft.world.phys.Vec3,float,float,float) -> a
    64:64:int lambda$source$5(net.minecraft.sounds.SoundSource,com.mojang.brigadier.context.CommandContext) -> a
    61:61:int lambda$source$4(net.minecraft.sounds.SoundSource,com.mojang.brigadier.context.CommandContext) -> b
    58:58:int lambda$source$3(net.minecraft.sounds.SoundSource,com.mojang.brigadier.context.CommandContext) -> c
    55:55:int lambda$source$2(net.minecraft.sounds.SoundSource,com.mojang.brigadier.context.CommandContext) -> d
    52:52:int lambda$source$1(net.minecraft.sounds.SoundSource,com.mojang.brigadier.context.CommandContext) -> e
    43:43:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    32:32:void <clinit>() -> <clinit>
net.minecraft.server.commands.PublishCommand -> up:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_ALREADY_PUBLISHED -> b
    17:17:void <init>() -> <init>
    22:31:void register(com.mojang.brigadier.CommandDispatcher) -> a
    34:41:int publish(net.minecraft.commands.CommandSourceStack,int) -> a
    28:28:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> a
    25:25:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> b
    24:24:boolean lambda$register$1(net.minecraft.commands.CommandSourceStack) -> a
    19:19:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    18:19:void <clinit>() -> <clinit>
net.minecraft.server.commands.RaidCommand -> uq:
    32:32:void <init>() -> <init>
    34:58:void register(com.mojang.brigadier.CommandDispatcher) -> a
    61:69:int glow(net.minecraft.commands.CommandSourceStack) -> a
    73:88:int setBadOmenLevel(net.minecraft.commands.CommandSourceStack,int) -> a
    92:101:int spawnLeader(net.minecraft.commands.CommandSourceStack) -> b
    105:108:int playSound(net.minecraft.commands.CommandSourceStack,net.minecraft.network.chat.Component) -> a
    112:129:int start(net.minecraft.commands.CommandSourceStack,int) -> b
    133:144:int stop(net.minecraft.commands.CommandSourceStack) -> c
    149:170:int check(net.minecraft.commands.CommandSourceStack) -> d
    176:176:net.minecraft.world.entity.raid.Raid getRaid(net.minecraft.server.level.ServerPlayer) -> a
    56:56:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> a
    53:53:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> b
    50:50:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> c
    48:48:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> d
    44:44:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> e
    43:43:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> f
    40:40:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> g
    36:36:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> e
net.minecraft.server.commands.RecipeCommand -> ur:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_GIVE_FAILED -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TAKE_FAILED -> b
    23:23:void <init>() -> <init>
    28:62:void register(com.mojang.brigadier.CommandDispatcher) -> a
    65:81:int giveRecipes(net.minecraft.commands.CommandSourceStack,java.util.Collection,java.util.Collection) -> a
    85:101:int takeRecipes(net.minecraft.commands.CommandSourceStack,java.util.Collection,java.util.Collection) -> b
    57:57:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> a
    53:53:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> b
    42:42:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> c
    38:38:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> d
    30:30:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    24:25:void <clinit>() -> <clinit>
net.minecraft.server.commands.ReloadCommand -> us:
    10:10:void <init>() -> <init>
    12:20:void register(com.mojang.brigadier.CommandDispatcher) -> a
    15:17:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> a
    13:13:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.ReplaceItemCommand -> ut:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_A_CONTAINER -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INAPPLICABLE_SLOT -> b
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_ENTITY_SLOT -> c
    35:35:void <init>() -> <init>
    41:79:void register(com.mojang.brigadier.CommandDispatcher) -> a
    82:93:int setBlockItem(net.minecraft.commands.CommandSourceStack,net.minecraft.core.BlockPos,int,net.minecraft.world.item.ItemStack) -> a
    97:121:int setEntityItem(net.minecraft.commands.CommandSourceStack,java.util.Collection,int,net.minecraft.world.item.ItemStack) -> a
    72:72:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> a
    69:69:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> b
    55:55:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> c
    52:52:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> d
    43:43:boolean lambda$register$2(net.minecraft.commands.CommandSourceStack) -> a
    38:38:com.mojang.brigadier.Message lambda$static$1(java.lang.Object,java.lang.Object) -> a
    37:37:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    36:38:void <clinit>() -> <clinit>
net.minecraft.server.commands.SaveAllCommand -> uu:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    13:13:void <init>() -> <init>
    17:26:void register(com.mojang.brigadier.CommandDispatcher) -> a
    29:42:int saveAll(net.minecraft.commands.CommandSourceStack,boolean) -> a
    23:23:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    20:20:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> b
    19:19:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    14:14:void <clinit>() -> <clinit>
net.minecraft.server.commands.SaveOffCommand -> uv:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_OFF -> a
    12:12:void <init>() -> <init>
    16:35:void register(com.mojang.brigadier.CommandDispatcher) -> a
    20:32:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> a
    18:18:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    13:13:void <clinit>() -> <clinit>
net.minecraft.server.commands.SaveOnCommand -> uw:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_ON -> a
    12:12:void <init>() -> <init>
    16:35:void register(com.mojang.brigadier.CommandDispatcher) -> a
    20:32:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> a
    18:18:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    13:13:void <clinit>() -> <clinit>
net.minecraft.server.commands.SayCommand -> ux:
    14:14:void <init>() -> <init>
    16:28:void register(com.mojang.brigadier.CommandDispatcher) -> a
    22:24:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> a
    18:18:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.ScheduleCommand -> uy:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_TICK -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_CANT_REMOVE -> b
    com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_SCHEDULE -> c
    30:30:void <init>() -> <init>
    37:68:void register(com.mojang.brigadier.CommandDispatcher) -> a
    71:98:int schedule(net.minecraft.commands.CommandSourceStack,com.mojang.datafixers.util.Either,int,boolean) -> a
    102:107:int remove(net.minecraft.commands.CommandSourceStack,java.lang.String) -> a
    89:96:void lambda$schedule$8(boolean,net.minecraft.world.level.timers.TimerQueue,long,net.minecraft.commands.CommandSourceStack,int,net.minecraft.tags.Tag) -> a
    80:87:void lambda$schedule$7(boolean,net.minecraft.world.level.timers.TimerQueue,long,net.minecraft.commands.CommandSourceStack,int,net.minecraft.commands.CommandFunction) -> a
    64:64:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> a
    54:54:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> b
    50:50:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> c
    47:47:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> d
    39:39:boolean lambda$register$2(net.minecraft.commands.CommandSourceStack) -> a
    34:34:java.util.concurrent.CompletableFuture lambda$static$1(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    32:32:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    31:34:void <clinit>() -> <clinit>
net.minecraft.server.commands.ScoreboardCommand -> uz:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_OBJECTIVE_ALREADY_EXISTS -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_DISPLAY_SLOT_ALREADY_EMPTY -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_DISPLAY_SLOT_ALREADY_SET -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TRIGGER_ALREADY_ENABLED -> d
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_TRIGGER -> e
    com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType ERROR_NO_VALUE -> f
    53:53:void <init>() -> <init>
    62:228:void register(com.mojang.brigadier.CommandDispatcher) -> a
    231:238:com.mojang.brigadier.builder.LiteralArgumentBuilder createRenderTypeModify() -> a
    242:260:java.util.concurrent.CompletableFuture suggestTriggers(net.minecraft.commands.CommandSourceStack,java.util.Collection,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    264:272:int getScore(net.minecraft.commands.CommandSourceStack,java.lang.String,net.minecraft.world.scores.Objective) -> a
    276:294:int performOperation(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.scores.Objective,net.minecraft.commands.arguments.OperationArgument$Operation,java.util.Collection,net.minecraft.world.scores.Objective) -> a
    298:323:int enableTrigger(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.scores.Objective) -> a
    327:339:int resetScores(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    343:355:int resetScore(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.scores.Objective) -> b
    359:372:int setScore(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.scores.Objective,int) -> a
    376:391:int addScore(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.scores.Objective,int) -> b
    395:410:int removeScore(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.scores.Objective,int) -> c
    414:422:int listTrackedPlayers(net.minecraft.commands.CommandSourceStack) -> a
    426:437:int listTrackedPlayerScores(net.minecraft.commands.CommandSourceStack,java.lang.String) -> a
    441:450:int clearDisplaySlot(net.minecraft.commands.CommandSourceStack,int) -> a
    454:463:int setDisplaySlot(net.minecraft.commands.CommandSourceStack,int,net.minecraft.world.scores.Objective) -> a
    467:472:int setDisplayName(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.Objective,net.minecraft.network.chat.Component) -> a
    476:481:int setRenderType(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.Objective,net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType) -> a
    485:488:int removeObjective(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.Objective) -> a
    492:506:int addObjective(net.minecraft.commands.CommandSourceStack,java.lang.String,net.minecraft.world.scores.criteria.ObjectiveCriteria,net.minecraft.network.chat.Component) -> a
    510:518:int listObjectives(net.minecraft.commands.CommandSourceStack) -> b
    235:235:int lambda$createRenderTypeModify$20(net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType,com.mojang.brigadier.context.CommandContext) -> a
    219:219:int lambda$register$19(com.mojang.brigadier.context.CommandContext) -> a
    201:201:int lambda$register$18(com.mojang.brigadier.context.CommandContext) -> b
    200:200:java.util.concurrent.CompletableFuture lambda$register$17(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    189:189:int lambda$register$16(com.mojang.brigadier.context.CommandContext) -> c
    186:186:int lambda$register$15(com.mojang.brigadier.context.CommandContext) -> d
    176:176:int lambda$register$14(com.mojang.brigadier.context.CommandContext) -> e
    162:162:int lambda$register$13(com.mojang.brigadier.context.CommandContext) -> f
    149:149:int lambda$register$12(com.mojang.brigadier.context.CommandContext) -> g
    137:137:int lambda$register$11(com.mojang.brigadier.context.CommandContext) -> h
    125:125:int lambda$register$10(com.mojang.brigadier.context.CommandContext) -> i
    121:121:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> j
    112:112:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> k
    109:109:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> l
    102:102:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> m
    93:93:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> n
    80:80:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> o
    77:77:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> p
    69:69:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> q
    64:64:boolean lambda$register$1(net.minecraft.commands.CommandSourceStack) -> c
    59:59:com.mojang.brigadier.Message lambda$static$0(java.lang.Object,java.lang.Object) -> a
    54:59:void <clinit>() -> <clinit>
net.minecraft.server.commands.SeedCommand -> va:
    16:16:void <init>() -> <init>
    18:33:void register(com.mojang.brigadier.CommandDispatcher) -> a
    22:30:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    23:27:void lambda$null$1(long,net.minecraft.network.chat.Style) -> a
    20:20:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.SetBlockCommand -> vb:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    28:28:void <init>() -> <init>
    32:55:void register(com.mojang.brigadier.CommandDispatcher) -> a
    58:78:int setBlock(net.minecraft.commands.CommandSourceStack,net.minecraft.core.BlockPos,net.minecraft.commands.arguments.blocks.BlockInput,net.minecraft.server.commands.SetBlockCommand$Mode,java.util.function.Predicate) -> a
    50:50:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> a
    46:46:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> b
    46:46:boolean lambda$null$3(net.minecraft.world.level.block.state.pattern.BlockInWorld) -> a
    42:42:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> c
    39:39:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> d
    34:34:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    29:29:void <clinit>() -> <clinit>
net.minecraft.server.commands.SetBlockCommand$Filter -> vb$a:
    net.minecraft.commands.arguments.blocks.BlockInput filter(net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.BlockPos,net.minecraft.commands.arguments.blocks.BlockInput,net.minecraft.server.level.ServerLevel) -> filter
net.minecraft.server.commands.SetBlockCommand$Mode -> vb$b:
    net.minecraft.server.commands.SetBlockCommand$Mode REPLACE -> a
    net.minecraft.server.commands.SetBlockCommand$Mode DESTROY -> b
    net.minecraft.server.commands.SetBlockCommand$Mode[] $VALUES -> c
    81:81:net.minecraft.server.commands.SetBlockCommand$Mode[] values() -> values
    81:81:net.minecraft.server.commands.SetBlockCommand$Mode valueOf(java.lang.String) -> valueOf
    81:81:void <init>(java.lang.String,int) -> <init>
    81:83:void <clinit>() -> <clinit>
net.minecraft.server.commands.SetPlayerIdleTimeoutCommand -> vc:
    13:13:void <init>() -> <init>
    15:23:void register(com.mojang.brigadier.CommandDispatcher) -> a
    26:28:int setIdleTimeout(net.minecraft.commands.CommandSourceStack,int) -> a
    20:20:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> a
    17:17:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.SetSpawnCommand -> vd:
    20:20:void <init>() -> <init>
    22:35:void register(com.mojang.brigadier.CommandDispatcher) -> a
    38:48:int setSpawn(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.core.BlockPos) -> a
    31:31:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> a
    28:28:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> b
    25:25:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> c
    24:24:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.SetWorldSpawnCommand -> ve:
    15:15:void <init>() -> <init>
    17:26:void register(com.mojang.brigadier.CommandDispatcher) -> a
    29:32:int setSpawn(net.minecraft.commands.CommandSourceStack,net.minecraft.core.BlockPos) -> a
    23:23:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> a
    20:20:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> b
    19:19:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.SpectateCommand -> vf:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SELF -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_NOT_SPECTATOR -> b
    23:23:void <init>() -> <init>
    28:41:void register(com.mojang.brigadier.CommandDispatcher) -> a
    44:56:int spectate(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.Entity,net.minecraft.server.level.ServerPlayer) -> a
    37:37:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> a
    34:34:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> b
    31:31:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> c
    30:30:boolean lambda$register$1(net.minecraft.commands.CommandSourceStack) -> a
    25:25:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    24:25:void <clinit>() -> <clinit>
net.minecraft.server.commands.SpreadPlayersCommand -> vg:
    com.mojang.brigadier.exceptions.Dynamic4CommandExceptionType ERROR_FAILED_TO_SPREAD_TEAMS -> a
    com.mojang.brigadier.exceptions.Dynamic4CommandExceptionType ERROR_FAILED_TO_SPREAD_ENTITIES -> b
    40:40:void <init>() -> <init>
    46:66:void register(com.mojang.brigadier.CommandDispatcher) -> a
    69:80:int spreadPlayers(net.minecraft.commands.CommandSourceStack,net.minecraft.world.phys.Vec2,float,float,boolean,java.util.Collection) -> a
    84:94:int getNumberOfTeams(java.util.Collection) -> a
    98:169:void spreadPositions(net.minecraft.world.phys.Vec2,double,net.minecraft.server.level.ServerLevel,java.util.Random,double,double,double,double,net.minecraft.server.commands.SpreadPlayersCommand$Position[],boolean) -> a
    172:209:double setPlayerPositions(java.util.Collection,net.minecraft.server.level.ServerLevel,net.minecraft.server.commands.SpreadPlayersCommand$Position[],boolean) -> a
    213:221:net.minecraft.server.commands.SpreadPlayersCommand$Position[] createInitialPositions(java.util.Random,int,double,double,double,double) -> a
    59:59:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> a
    48:48:boolean lambda$register$2(net.minecraft.commands.CommandSourceStack) -> a
    43:43:com.mojang.brigadier.Message lambda$static$1(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    42:42:com.mojang.brigadier.Message lambda$static$0(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> b
    42:43:void <clinit>() -> <clinit>
net.minecraft.server.commands.SpreadPlayersCommand$Position -> vg$a:
    double x -> a
    double z -> b
    228:229:void <init>() -> <init>
    231:234:void <init>(double,double) -> <init>
    237:239:void set(double,double) -> a
    242:245:double dist(net.minecraft.server.commands.SpreadPlayersCommand$Position) -> a
    249:252:void normalize() -> a
    255:255:float getLength() -> b
    259:261:void moveAway(net.minecraft.server.commands.SpreadPlayersCommand$Position) -> b
    264:282:boolean clamp(double,double,double,double) -> a
    286:295:int getSpawnY(net.minecraft.world.level.BlockGetter) -> a
    299:310:boolean isSafe(net.minecraft.world.level.BlockGetter) -> b
    314:316:void randomize(java.util.Random,double,double,double,double) -> a
    224:224:double access$000(net.minecraft.server.commands.SpreadPlayersCommand$Position) -> c
    224:224:double access$002(net.minecraft.server.commands.SpreadPlayersCommand$Position,double) -> a
    224:224:double access$100(net.minecraft.server.commands.SpreadPlayersCommand$Position) -> d
    224:224:double access$102(net.minecraft.server.commands.SpreadPlayersCommand$Position,double) -> b
net.minecraft.server.commands.StopCommand -> vh:
    10:10:void <init>() -> <init>
    12:21:void register(com.mojang.brigadier.CommandDispatcher) -> a
    16:18:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> a
    14:14:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.StopSoundCommand -> vi:
    25:25:void <init>() -> <init>
    27:57:void register(com.mojang.brigadier.CommandDispatcher) -> a
    60:79:int stopSound(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.sounds.SoundSource,net.minecraft.resources.ResourceLocation) -> a
    52:52:boolean lambda$register$4(net.minecraft.commands.CommandSourceStack) -> a
    45:45:int lambda$register$3(net.minecraft.sounds.SoundSource,com.mojang.brigadier.context.CommandContext) -> a
    41:41:int lambda$register$2(net.minecraft.sounds.SoundSource,com.mojang.brigadier.context.CommandContext) -> b
    34:34:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> a
    28:28:int lambda$register$0(com.mojang.brigadier.context.CommandContext) -> b
net.minecraft.server.commands.SummonCommand -> vj:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_FAILED -> a
    30:30:void <init>() -> <init>
    34:51:void register(com.mojang.brigadier.CommandDispatcher) -> a
    54:82:int spawnEntity(net.minecraft.commands.CommandSourceStack,net.minecraft.resources.ResourceLocation,net.minecraft.world.phys.Vec3,net.minecraft.nbt.CompoundTag,boolean) -> a
    67:71:net.minecraft.world.entity.Entity lambda$spawnEntity$4(net.minecraft.world.phys.Vec3,net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Entity) -> a
    46:46:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> a
    43:43:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> b
    40:40:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> c
    36:36:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    31:31:void <clinit>() -> <clinit>
net.minecraft.server.commands.TagCommand -> vk:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ADD_FAILED -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_REMOVE_FAILED -> b
    24:24:void <init>() -> <init>
    29:55:void register(com.mojang.brigadier.CommandDispatcher) -> a
    58:62:java.util.Collection getTags(java.util.Collection) -> a
    66:84:int addTag(net.minecraft.commands.CommandSourceStack,java.util.Collection,java.lang.String) -> a
    88:106:int removeTag(net.minecraft.commands.CommandSourceStack,java.util.Collection,java.lang.String) -> b
    110:132:int listTags(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    51:51:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> a
    46:46:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> b
    45:45:java.util.concurrent.CompletableFuture lambda$register$2(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    38:38:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> c
    31:31:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
    25:26:void <clinit>() -> <clinit>
net.minecraft.server.commands.TeamCommand -> vl:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_EXISTS -> a
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_TEAM_NAME_TOO_LONG -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_EMPTY -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_NAME -> d
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_COLOR -> e
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_FRIENDLYFIRE_ENABLED -> f
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_FRIENDLYFIRE_DISABLED -> g
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_FRIENDLYINVISIBLES_ENABLED -> h
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_ALREADY_FRIENDLYINVISIBLES_DISABLED -> i
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_NAMETAG_VISIBLITY_UNCHANGED -> j
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_DEATH_MESSAGE_VISIBLITY_UNCHANGED -> k
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TEAM_COLLISION_UNCHANGED -> l
    38:38:void <init>() -> <init>
    53:179:void register(com.mojang.brigadier.CommandDispatcher) -> a
    182:194:int leaveTeam(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    198:210:int joinTeam(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam,java.util.Collection) -> a
    214:219:int setNametagVisibility(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam,net.minecraft.world.scores.Team$Visibility) -> a
    223:228:int setDeathMessageVisibility(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam,net.minecraft.world.scores.Team$Visibility) -> b
    232:237:int setCollision(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam,net.minecraft.world.scores.Team$CollisionRule) -> a
    241:252:int setFriendlySight(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam,boolean) -> a
    256:267:int setFriendlyFire(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam,boolean) -> b
    271:277:int setDisplayName(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam,net.minecraft.network.chat.Component) -> a
    281:286:int setColor(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam,net.minecraft.ChatFormatting) -> a
    290:303:int emptyTeam(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam) -> a
    307:310:int deleteTeam(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam) -> b
    314:314:int createTeam(net.minecraft.commands.CommandSourceStack,java.lang.String) -> a
    318:331:int createTeam(net.minecraft.commands.CommandSourceStack,java.lang.String,net.minecraft.network.chat.Component) -> a
    335:341:int listMembers(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam) -> c
    345:351:int listTeams(net.minecraft.commands.CommandSourceStack) -> a
    355:357:int setPrefix(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam,net.minecraft.network.chat.Component) -> b
    361:363:int setSuffix(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.PlayerTeam,net.minecraft.network.chat.Component) -> c
    173:173:int lambda$register$28(com.mojang.brigadier.context.CommandContext) -> a
    166:166:int lambda$register$27(com.mojang.brigadier.context.CommandContext) -> b
    160:160:int lambda$register$26(com.mojang.brigadier.context.CommandContext) -> c
    159:159:int lambda$register$25(com.mojang.brigadier.context.CommandContext) -> d
    158:158:int lambda$register$24(com.mojang.brigadier.context.CommandContext) -> e
    157:157:int lambda$register$23(com.mojang.brigadier.context.CommandContext) -> f
    153:153:int lambda$register$22(com.mojang.brigadier.context.CommandContext) -> g
    152:152:int lambda$register$21(com.mojang.brigadier.context.CommandContext) -> h
    151:151:int lambda$register$20(com.mojang.brigadier.context.CommandContext) -> i
    150:150:int lambda$register$19(com.mojang.brigadier.context.CommandContext) -> j
    146:146:int lambda$register$18(com.mojang.brigadier.context.CommandContext) -> k
    145:145:int lambda$register$17(com.mojang.brigadier.context.CommandContext) -> l
    144:144:int lambda$register$16(com.mojang.brigadier.context.CommandContext) -> m
    143:143:int lambda$register$15(com.mojang.brigadier.context.CommandContext) -> n
    138:138:int lambda$register$14(com.mojang.brigadier.context.CommandContext) -> o
    131:131:int lambda$register$13(com.mojang.brigadier.context.CommandContext) -> p
    124:124:int lambda$register$12(com.mojang.brigadier.context.CommandContext) -> q
    117:117:int lambda$register$11(com.mojang.brigadier.context.CommandContext) -> r
    106:106:int lambda$register$10(com.mojang.brigadier.context.CommandContext) -> s
    97:97:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> t
    93:93:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> u
    86:86:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> v
    79:79:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> w
    71:71:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> x
    68:68:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> y
    61:61:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> z
    58:58:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> A
    55:55:boolean lambda$register$1(net.minecraft.commands.CommandSourceStack) -> b
    40:40:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> a
    39:50:void <clinit>() -> <clinit>
net.minecraft.server.commands.TeamMsgCommand -> vm:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_ON_TEAM -> a
    25:25:void <init>() -> <init>
    29:37:void register(com.mojang.brigadier.CommandDispatcher) -> a
    40:62:int sendMessage(net.minecraft.commands.CommandSourceStack,net.minecraft.network.chat.Component) -> a
    45:47:void lambda$sendMessage$1(net.minecraft.network.chat.Style) -> a
    33:33:int lambda$register$0(com.mojang.brigadier.context.CommandContext) -> a
    26:26:void <clinit>() -> <clinit>
net.minecraft.server.commands.TeleportCommand -> vn:
    45:45:void <init>() -> <init>
    47:97:void register(com.mojang.brigadier.CommandDispatcher) -> a
    100:110:int teleportToEntity(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.world.entity.Entity) -> a
    114:153:int teleportToPos(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.server.level.ServerLevel,net.minecraft.commands.arguments.coordinates.Coordinates,net.minecraft.commands.arguments.coordinates.Coordinates,net.minecraft.server.commands.TeleportCommand$LookAt) -> a
    157:207:void performTeleport(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.Entity,net.minecraft.server.level.ServerLevel,double,double,double,java.util.Set,float,float,net.minecraft.server.commands.TeleportCommand$LookAt) -> a
    94:94:boolean lambda$register$9(net.minecraft.commands.CommandSourceStack) -> a
    89:89:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> a
    85:85:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> b
    80:80:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> c
    74:74:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> d
    68:68:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> e
    65:65:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> f
    57:57:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> g
    54:54:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> h
    49:49:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> b
net.minecraft.server.commands.TeleportCommand$LookAt -> vn$a:
    net.minecraft.world.phys.Vec3 position -> a
    net.minecraft.world.entity.Entity entity -> b
    net.minecraft.commands.arguments.EntityAnchorArgument$Anchor anchor -> c
    214:218:void <init>(net.minecraft.world.entity.Entity,net.minecraft.commands.arguments.EntityAnchorArgument$Anchor) -> <init>
    220:224:void <init>(net.minecraft.world.phys.Vec3) -> <init>
    227:236:void perform(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.Entity) -> a
net.minecraft.server.commands.TellRawCommand -> vo:
    16:16:void <init>() -> <init>
    18:36:void register(com.mojang.brigadier.CommandDispatcher) -> a
    26:31:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> a
    20:20:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.TimeCommand -> vp:
    15:15:void <init>() -> <init>
    17:62:void register(com.mojang.brigadier.CommandDispatcher) -> a
    65:65:int getDayTime(net.minecraft.server.level.ServerLevel) -> a
    69:70:int queryTime(net.minecraft.commands.CommandSourceStack,int) -> c
    74:78:int setTime(net.minecraft.commands.CommandSourceStack,int) -> a
    82:87:int addTime(net.minecraft.commands.CommandSourceStack,int) -> b
    58:58:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> a
    54:54:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> b
    50:50:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> c
    43:43:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> d
    36:36:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> e
    33:33:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> f
    30:30:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> g
    27:27:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> h
    24:24:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> i
    19:19:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.TitleCommand -> vq:
    25:25:void <init>() -> <init>
    27:76:void register(com.mojang.brigadier.CommandDispatcher) -> a
    79:90:int clearTitle(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    94:105:int resetTitle(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> b
    109:119:int showTitle(net.minecraft.commands.CommandSourceStack,java.util.Collection,net.minecraft.network.chat.Component,net.minecraft.network.protocol.game.ClientboundSetTitlesPacket$Type) -> a
    123:134:int setTimes(net.minecraft.commands.CommandSourceStack,java.util.Collection,int,int,int) -> a
    69:69:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> a
    58:58:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> b
    51:51:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> c
    44:44:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> d
    38:38:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> e
    34:34:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> f
    29:29:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.TriggerCommand -> vr:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_PRIMED -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_INVALID_OBJECTIVE -> b
    29:29:void <init>() -> <init>
    34:56:void register(com.mojang.brigadier.CommandDispatcher) -> a
    59:76:java.util.concurrent.CompletableFuture suggestObjectives(net.minecraft.commands.CommandSourceStack,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    80:82:int addValue(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.Score,int) -> a
    86:88:int setValue(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.Score,int) -> b
    92:94:int simpleTrigger(net.minecraft.commands.CommandSourceStack,net.minecraft.world.scores.Score) -> a
    98:111:net.minecraft.world.scores.Score getScore(net.minecraft.server.level.ServerPlayer,net.minecraft.world.scores.Objective) -> a
    51:51:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> a
    44:44:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> b
    39:39:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> c
    38:38:java.util.concurrent.CompletableFuture lambda$register$0(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    30:31:void <clinit>() -> <clinit>
net.minecraft.server.commands.WeatherCommand -> vs:
    14:14:void <init>() -> <init>
    18:46:void register(com.mojang.brigadier.CommandDispatcher) -> a
    49:55:int setClear(net.minecraft.commands.CommandSourceStack,int) -> a
    59:65:int setRain(net.minecraft.commands.CommandSourceStack,int) -> b
    69:75:int setThunder(net.minecraft.commands.CommandSourceStack,int) -> c
    42:42:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> a
    39:39:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> b
    34:34:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> c
    31:31:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> d
    26:26:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> e
    23:23:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> f
    20:20:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> a
net.minecraft.server.commands.WhitelistCommand -> vt:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_ENABLED -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_DISABLED -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_ALREADY_WHITELISTED -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_WHITELISTED -> d
    23:23:void <init>() -> <init>
    30:69:void register(com.mojang.brigadier.CommandDispatcher) -> a
    72:75:int reload(net.minecraft.commands.CommandSourceStack) -> a
    79:95:int addPlayers(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> a
    99:116:int removePlayers(net.minecraft.commands.CommandSourceStack,java.util.Collection) -> b
    120:127:int enableWhitelist(net.minecraft.commands.CommandSourceStack) -> b
    131:137:int disableWhitelist(net.minecraft.commands.CommandSourceStack) -> c
    141:147:int showList(net.minecraft.commands.CommandSourceStack) -> d
    66:66:int lambda$register$10(com.mojang.brigadier.context.CommandContext) -> a
    61:61:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> b
    60:60:java.util.concurrent.CompletableFuture lambda$register$8(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    53:53:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> c
    50:51:java.util.concurrent.CompletableFuture lambda$register$6(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> b
    51:51:java.lang.String lambda$null$5(net.minecraft.server.level.ServerPlayer) -> a
    51:51:boolean lambda$null$4(net.minecraft.server.players.PlayerList,net.minecraft.server.level.ServerPlayer) -> a
    43:43:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> d
    39:39:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> e
    35:35:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> f
    32:32:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> e
    24:27:void <clinit>() -> <clinit>
net.minecraft.server.commands.WorldBorderCommand -> vu:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_CENTER -> a
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_SIZE -> b
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TOO_SMALL -> c
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_TOO_BIG -> d
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_WARNING_TIME -> e
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_WARNING_DISTANCE -> f
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_DAMAGE_BUFFER -> g
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_SAME_DAMAGE_AMOUNT -> h
    24:24:void <init>() -> <init>
    35:106:void register(com.mojang.brigadier.CommandDispatcher) -> a
    109:115:int setDamageBuffer(net.minecraft.commands.CommandSourceStack,float) -> a
    119:125:int setDamageAmount(net.minecraft.commands.CommandSourceStack,float) -> b
    129:135:int setWarningTime(net.minecraft.commands.CommandSourceStack,int) -> a
    139:145:int setWarningDistance(net.minecraft.commands.CommandSourceStack,int) -> b
    149:151:int getSize(net.minecraft.commands.CommandSourceStack) -> a
    155:163:int setCenter(net.minecraft.commands.CommandSourceStack,net.minecraft.world.phys.Vec2) -> a
    167:192:int setSize(net.minecraft.commands.CommandSourceStack,double,long) -> a
    101:101:int lambda$register$10(com.mojang.brigadier.context.CommandContext) -> a
    94:94:int lambda$register$9(com.mojang.brigadier.context.CommandContext) -> b
    86:86:int lambda$register$8(com.mojang.brigadier.context.CommandContext) -> c
    80:80:int lambda$register$7(com.mojang.brigadier.context.CommandContext) -> d
    73:73:int lambda$register$6(com.mojang.brigadier.context.CommandContext) -> e
    64:64:int lambda$register$5(com.mojang.brigadier.context.CommandContext) -> f
    56:56:int lambda$register$4(com.mojang.brigadier.context.CommandContext) -> g
    53:53:int lambda$register$3(com.mojang.brigadier.context.CommandContext) -> h
    45:45:int lambda$register$2(com.mojang.brigadier.context.CommandContext) -> i
    42:42:int lambda$register$1(com.mojang.brigadier.context.CommandContext) -> j
    37:37:boolean lambda$register$0(net.minecraft.commands.CommandSourceStack) -> b
    25:32:void <clinit>() -> <clinit>
net.minecraft.server.commands.data.BlockDataAccessor -> vv:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NOT_A_BLOCK_ENTITY -> b
    java.util.function.Function PROVIDER -> a
    net.minecraft.world.level.block.entity.BlockEntity entity -> c
    net.minecraft.core.BlockPos pos -> d
    49:52:void <init>(net.minecraft.world.level.block.entity.BlockEntity,net.minecraft.core.BlockPos) -> <init>
    56:63:void setData(net.minecraft.nbt.CompoundTag) -> a
    67:67:net.minecraft.nbt.CompoundTag getData() -> a
    72:72:net.minecraft.network.chat.Component getModifiedSuccess() -> b
    77:77:net.minecraft.network.chat.Component getPrintSuccess(net.minecraft.nbt.Tag) -> a
    82:82:net.minecraft.network.chat.Component getPrintSuccess(net.minecraft.commands.arguments.NbtPathArgument$NbtPath,double,int) -> a
    29:29:net.minecraft.server.commands.data.DataCommands$DataProvider lambda$static$0(java.lang.String) -> a
    26:26:com.mojang.brigadier.exceptions.SimpleCommandExceptionType access$000() -> c
    27:29:void <clinit>() -> <clinit>
net.minecraft.server.commands.data.BlockDataAccessor$1 -> vv$1:
    java.lang.String val$argPrefix -> a
    29:29:void <init>(java.lang.String) -> <init>
    32:37:net.minecraft.server.commands.data.DataAccessor access(com.mojang.brigadier.context.CommandContext) -> a
    42:42:com.mojang.brigadier.builder.ArgumentBuilder wrap(com.mojang.brigadier.builder.ArgumentBuilder,java.util.function.Function) -> a
net.minecraft.server.commands.data.DataAccessor -> vw:
    void setData(net.minecraft.nbt.CompoundTag) -> a
    net.minecraft.nbt.CompoundTag getData() -> a
    net.minecraft.network.chat.Component getModifiedSuccess() -> b
    net.minecraft.network.chat.Component getPrintSuccess(net.minecraft.nbt.Tag) -> a
    net.minecraft.network.chat.Component getPrintSuccess(net.minecraft.commands.arguments.NbtPathArgument$NbtPath,double,int) -> a
net.minecraft.server.commands.data.DataCommands -> vx:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_MERGE_UNCHANGED -> d
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_GET_NOT_NUMBER -> e
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_GET_NON_EXISTENT -> f
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_MULTIPLE_TAGS -> g
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_EXPECTED_LIST -> h
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_EXPECTED_OBJECT -> i
    com.mojang.brigadier.exceptions.DynamicCommandExceptionType ERROR_INVALID_INDEX -> j
    java.util.List ALL_PROVIDERS -> a
    java.util.List TARGET_PROVIDERS -> b
    java.util.List SOURCE_PROVIDERS -> c
    44:44:void <init>() -> <init>
    59:160:void register(com.mojang.brigadier.CommandDispatcher) -> a
    163:187:int insertAtIndex(int,net.minecraft.nbt.CompoundTag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> a
    199:241:com.mojang.brigadier.builder.ArgumentBuilder decorateModification(java.util.function.BiConsumer) -> a
    245:259:int manipulateData(com.mojang.brigadier.context.CommandContext,net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataManipulator,java.util.List) -> a
    263:273:int removeData(net.minecraft.commands.CommandSourceStack,net.minecraft.server.commands.data.DataAccessor,net.minecraft.commands.arguments.NbtPathArgument$NbtPath) -> a
    277:284:net.minecraft.nbt.Tag getSingleTag(net.minecraft.commands.arguments.NbtPathArgument$NbtPath,net.minecraft.server.commands.data.DataAccessor) -> a
    288:302:int getData(net.minecraft.commands.CommandSourceStack,net.minecraft.server.commands.data.DataAccessor,net.minecraft.commands.arguments.NbtPathArgument$NbtPath) -> b
    306:312:int getNumeric(net.minecraft.commands.CommandSourceStack,net.minecraft.server.commands.data.DataAccessor,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,double) -> a
    316:317:int getData(net.minecraft.commands.CommandSourceStack,net.minecraft.server.commands.data.DataAccessor) -> a
    321:331:int mergeData(net.minecraft.commands.CommandSourceStack,net.minecraft.server.commands.data.DataAccessor,net.minecraft.nbt.CompoundTag) -> a
    203:236:com.mojang.brigadier.builder.ArgumentBuilder lambda$decorateModification$28(java.util.function.BiConsumer,net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.builder.ArgumentBuilder) -> a
    226:229:com.mojang.brigadier.builder.ArgumentBuilder lambda$null$27(net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataManipulator) -> a
    230:231:int lambda$null$26(net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataManipulator,com.mojang.brigadier.context.CommandContext) -> a
    206:206:com.mojang.brigadier.builder.ArgumentBuilder lambda$null$25(net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataManipulator) -> a
    206:214:com.mojang.brigadier.builder.ArgumentBuilder lambda$null$24(net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataManipulator,com.mojang.brigadier.builder.ArgumentBuilder) -> a
    215:218:int lambda$null$23(net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataManipulator,com.mojang.brigadier.context.CommandContext) -> a
    208:209:int lambda$null$22(net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataProvider,net.minecraft.server.commands.data.DataCommands$DataManipulator,com.mojang.brigadier.context.CommandContext) -> b
    93:129:void lambda$register$21(com.mojang.brigadier.builder.ArgumentBuilder,net.minecraft.server.commands.data.DataCommands$DataManipulatorDecorator) -> a
    131:150:int lambda$null$20(com.mojang.brigadier.context.CommandContext,net.minecraft.nbt.CompoundTag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> a
    123:123:int lambda$null$19(com.mojang.brigadier.context.CommandContext,net.minecraft.nbt.CompoundTag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> b
    117:117:int lambda$null$18(com.mojang.brigadier.context.CommandContext,net.minecraft.nbt.CompoundTag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> c
    111:111:int lambda$null$17(com.mojang.brigadier.context.CommandContext,net.minecraft.nbt.CompoundTag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> d
    101:102:int lambda$null$16(com.mojang.brigadier.context.CommandContext,net.minecraft.nbt.CompoundTag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> e
    85:88:com.mojang.brigadier.builder.ArgumentBuilder lambda$register$15(net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.builder.ArgumentBuilder) -> a
    88:88:int lambda$null$14(net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.context.CommandContext) -> a
    72:79:com.mojang.brigadier.builder.ArgumentBuilder lambda$register$13(net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.builder.ArgumentBuilder) -> b
    79:79:int lambda$null$12(net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.context.CommandContext) -> b
    76:76:int lambda$null$11(net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.context.CommandContext) -> c
    73:73:int lambda$null$10(net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.context.CommandContext) -> d
    64:67:com.mojang.brigadier.builder.ArgumentBuilder lambda$register$9(net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.builder.ArgumentBuilder) -> c
    67:67:int lambda$null$8(net.minecraft.server.commands.data.DataCommands$DataProvider,com.mojang.brigadier.context.CommandContext) -> e
    59:59:boolean lambda$register$7(net.minecraft.commands.CommandSourceStack) -> a
    56:56:net.minecraft.server.commands.data.DataCommands$DataProvider lambda$static$6(java.util.function.Function) -> a
    55:55:net.minecraft.server.commands.data.DataCommands$DataProvider lambda$static$5(java.util.function.Function) -> b
    51:51:com.mojang.brigadier.Message lambda$static$4(java.lang.Object) -> a
    50:50:com.mojang.brigadier.Message lambda$static$3(java.lang.Object) -> b
    49:49:com.mojang.brigadier.Message lambda$static$2(java.lang.Object) -> c
    47:47:com.mojang.brigadier.Message lambda$static$1(java.lang.Object) -> d
    46:46:com.mojang.brigadier.Message lambda$static$0(java.lang.Object) -> e
    45:56:void <clinit>() -> <clinit>
net.minecraft.server.commands.data.DataCommands$DataManipulator -> vx$a:
    int modify(com.mojang.brigadier.context.CommandContext,net.minecraft.nbt.CompoundTag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> modify
net.minecraft.server.commands.data.DataCommands$DataManipulatorDecorator -> vx$b:
    com.mojang.brigadier.builder.ArgumentBuilder create(net.minecraft.server.commands.data.DataCommands$DataManipulator) -> create
net.minecraft.server.commands.data.DataCommands$DataProvider -> vx$c:
    net.minecraft.server.commands.data.DataAccessor access(com.mojang.brigadier.context.CommandContext) -> a
    com.mojang.brigadier.builder.ArgumentBuilder wrap(com.mojang.brigadier.builder.ArgumentBuilder,java.util.function.Function) -> a
net.minecraft.server.commands.data.EntityDataAccessor -> vy:
    com.mojang.brigadier.exceptions.SimpleCommandExceptionType ERROR_NO_PLAYERS -> b
    java.util.function.Function PROVIDER -> a
    net.minecraft.world.entity.Entity entity -> c
    43:45:void <init>(net.minecraft.world.entity.Entity) -> <init>
    49:55:void setData(net.minecraft.nbt.CompoundTag) -> a
    59:59:net.minecraft.nbt.CompoundTag getData() -> a
    64:64:net.minecraft.network.chat.Component getModifiedSuccess() -> b
    69:69:net.minecraft.network.chat.Component getPrintSuccess(net.minecraft.nbt.Tag) -> a
    74:74:net.minecraft.network.chat.Component getPrintSuccess(net.minecraft.commands.arguments.NbtPathArgument$NbtPath,double,int) -> a
    29:29:net.minecraft.server.commands.data.DataCommands$DataProvider lambda$static$0(java.lang.String) -> a
    27:29:void <clinit>() -> <clinit>
net.minecraft.server.commands.data.EntityDataAccessor$1 -> vy$1:
    java.lang.String val$arg -> a
    29:29:void <init>(java.lang.String) -> <init>
    32:32:net.minecraft.server.commands.data.DataAccessor access(com.mojang.brigadier.context.CommandContext) -> a
    37:37:com.mojang.brigadier.builder.ArgumentBuilder wrap(com.mojang.brigadier.builder.ArgumentBuilder,java.util.function.Function) -> a
net.minecraft.server.commands.data.StorageDataAccessor -> vz:
    com.mojang.brigadier.suggestion.SuggestionProvider SUGGEST_STORAGE -> b
    java.util.function.Function PROVIDER -> a
    net.minecraft.world.level.storage.CommandStorage storage -> c
    net.minecraft.resources.ResourceLocation id -> d
    41:41:net.minecraft.world.level.storage.CommandStorage getGlobalTags(com.mojang.brigadier.context.CommandContext) -> b
    47:50:void <init>(net.minecraft.world.level.storage.CommandStorage,net.minecraft.resources.ResourceLocation) -> <init>
    54:55:void setData(net.minecraft.nbt.CompoundTag) -> a
    59:59:net.minecraft.nbt.CompoundTag getData() -> a
    64:64:net.minecraft.network.chat.Component getModifiedSuccess() -> b
    69:69:net.minecraft.network.chat.Component getPrintSuccess(net.minecraft.nbt.Tag) -> a
    74:74:net.minecraft.network.chat.Component getPrintSuccess(net.minecraft.commands.arguments.NbtPathArgument$NbtPath,double,int) -> a
    28:28:net.minecraft.server.commands.data.DataCommands$DataProvider lambda$static$1(java.lang.String) -> a
    26:26:java.util.concurrent.CompletableFuture lambda$static$0(com.mojang.brigadier.context.CommandContext,com.mojang.brigadier.suggestion.SuggestionsBuilder) -> a
    24:24:net.minecraft.world.level.storage.CommandStorage access$000(com.mojang.brigadier.context.CommandContext) -> a
    24:24:void <init>(net.minecraft.world.level.storage.CommandStorage,net.minecraft.resources.ResourceLocation,net.minecraft.server.commands.data.StorageDataAccessor$1) -> <init>
    24:24:com.mojang.brigadier.suggestion.SuggestionProvider access$200() -> c
    25:28:void <clinit>() -> <clinit>
net.minecraft.server.commands.data.StorageDataAccessor$1 -> vz$1:
    java.lang.String val$arg -> a
    28:28:void <init>(java.lang.String) -> <init>
    31:31:net.minecraft.server.commands.data.DataAccessor access(com.mojang.brigadier.context.CommandContext) -> a
    36:36:com.mojang.brigadier.builder.ArgumentBuilder wrap(com.mojang.brigadier.builder.ArgumentBuilder,java.util.function.Function) -> a
net.minecraft.server.commands.data.package-info -> wa:
net.minecraft.server.commands.package-info -> wb:
net.minecraft.server.dedicated.DedicatedPlayerList -> wc:
    org.apache.logging.log4j.Logger LOGGER -> a
    14:35:void <init>(net.minecraft.server.dedicated.DedicatedServer) -> <init>
    39:41:void setUsingWhiteList(boolean) -> a
    45:47:void op(com.mojang.authlib.GameProfile) -> a
    51:53:void deop(com.mojang.authlib.GameProfile) -> b
    57:59:void blackList(com.mojang.authlib.GameProfile) -> c
    63:65:void whiteList(com.mojang.authlib.GameProfile) -> d
    69:70:void reloadWhiteList() -> a
    74:78:void saveIpBanList() -> w
    82:86:void saveUserBanList() -> x
    90:94:void loadIpBanList() -> y
    98:102:void loadUserBanList() -> z
    106:110:void loadOps() -> A
    114:118:void saveOps() -> B
    122:126:void loadWhiteList() -> C
    130:134:void saveWhiteList() -> D
    138:138:boolean isWhiteListed(com.mojang.authlib.GameProfile) -> e
    143:143:net.minecraft.server.dedicated.DedicatedServer getServer() -> b
    148:148:boolean canBypassPlayerLimit(com.mojang.authlib.GameProfile) -> f
    10:10:net.minecraft.server.MinecraftServer getServer() -> c
    11:11:void <clinit>() -> <clinit>
net.minecraft.server.dedicated.DedicatedServer -> wd:
    org.apache.logging.log4j.Logger LOGGER -> h
    java.util.regex.Pattern SHA1 -> i
    java.util.List consoleInput -> j
    net.minecraft.server.rcon.thread.QueryThreadGs4 queryThreadGs4 -> k
    net.minecraft.server.rcon.RconConsoleSource rconConsoleSource -> l
    net.minecraft.server.rcon.thread.RconThread rconThread -> m
    net.minecraft.server.dedicated.DedicatedServerSettings settings -> n
    net.minecraft.world.level.GameType gameType -> o
    net.minecraft.server.gui.MinecraftServerGui gui -> p
    70:100:void <init>(java.io.File,net.minecraft.server.dedicated.DedicatedServerSettings,com.mojang.datafixers.DataFixer,com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService,com.mojang.authlib.minecraft.MinecraftSessionService,com.mojang.authlib.GameProfileRepository,net.minecraft.server.players.GameProfileCache,net.minecraft.server.level.progress.ChunkProgressListenerFactory,java.lang.String) -> <init>
    104:251:boolean initServer() -> d
    255:276:java.lang.String getPackHash() -> aZ
    281:283:void setDefaultGameMode(net.minecraft.world.level.GameType) -> a
    287:287:net.minecraft.server.dedicated.DedicatedServerProperties getProperties() -> d_
    292:292:boolean canGenerateStructures() -> f
    297:297:net.minecraft.world.level.GameType getDefaultGameType() -> g
    302:302:net.minecraft.world.Difficulty getDefaultDifficulty() -> h
    307:307:boolean isHardcore() -> i
    312:317:net.minecraft.CrashReport fillReport(net.minecraft.CrashReport) -> b
    322:327:java.util.Optional getModdedStatus() -> q
    332:343:void onServerExit() -> e
    347:349:void tickChildren(java.util.function.BooleanSupplier) -> b
    353:353:boolean isNetherEnabled() -> A
    358:358:boolean getSpawnMonsters() -> R
    363:366:void populateSnooper(net.minecraft.world.Snooper) -> a
    370:370:boolean isSnooperEnabled() -> W
    374:375:void handleConsoleInput(java.lang.String,net.minecraft.commands.CommandSourceStack) -> a
    378:382:void handleConsoleInputs() -> ba
    386:386:boolean isDedicatedServer() -> m
    391:391:boolean isEpollEnabled() -> n
    396:396:net.minecraft.server.dedicated.DedicatedPlayerList getPlayerList() -> bb
    401:401:boolean isPublished() -> p
    406:406:java.lang.String getServerIp() -> e_
    411:411:int getServerPort() -> r
    416:416:java.lang.String getServerName() -> f_
    420:423:void showGui() -> bc
    427:427:boolean hasGui() -> aj
    432:432:boolean publishServer(net.minecraft.world.level.GameType,boolean,int) -> a
    437:437:boolean isCommandBlockEnabled() -> o
    442:442:int getSpawnProtectionRadius() -> ao
    447:467:boolean isUnderSpawnProtection(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    472:472:int getOperatorUserPermissionLevel() -> j
    477:477:int getFunctionCompilationLevel() -> k
    482:484:void setPlayerIdleTimeout(int) -> c
    488:488:boolean shouldRconBroadcast() -> l
    493:493:boolean shouldInformAdmins() -> I_
    498:498:int getAbsoluteMaxWorldSize() -> ax
    503:503:int getCompressionThreshold() -> aA
    509:564:boolean convertOldUsers() -> bd
    569:573:void waitForRetry() -> bn
    576:576:long getMaxTickLength() -> be
    581:581:java.lang.String getPluginNames() -> u
    586:588:java.lang.String runCommand(java.lang.String) -> a_
    592:593:void storeUsingWhiteList(boolean) -> o
    597:599:void stopServer() -> s
    603:603:boolean isSingleplayerOwner(com.mojang.authlib.GameProfile) -> a
    64:64:net.minecraft.server.players.PlayerList getPlayerList() -> ag
    592:592:net.minecraft.server.dedicated.DedicatedServerProperties lambda$storeUsingWhiteList$4(boolean,net.minecraft.server.dedicated.DedicatedServerProperties) -> a
    587:587:void lambda$runCommand$3(java.lang.String) -> l
    483:483:net.minecraft.server.dedicated.DedicatedServerProperties lambda$setPlayerIdleTimeout$2(int,net.minecraft.server.dedicated.DedicatedServerProperties) -> a
    315:315:java.lang.String lambda$fillReport$1() -> bo
    314:314:java.lang.String lambda$fillReport$0() -> bp
    64:64:org.apache.logging.log4j.Logger access$000() -> bf
    65:68:void <clinit>() -> <clinit>
net.minecraft.server.dedicated.DedicatedServer$1 -> wd$1:
    net.minecraft.server.dedicated.DedicatedServer this$0 -> a
    83:88:void <init>(net.minecraft.server.dedicated.DedicatedServer,java.lang.String) -> <init>
    94:96:void run() -> run
net.minecraft.server.dedicated.DedicatedServer$2 -> wd$2:
    net.minecraft.server.dedicated.DedicatedServer this$0 -> a
    104:104:void <init>(net.minecraft.server.dedicated.DedicatedServer,java.lang.String) -> <init>
    107:116:void run() -> run
net.minecraft.server.dedicated.DedicatedServerProperties -> we:
    boolean onlineMode -> a
    boolean preventProxyConnections -> b
    java.lang.String serverIp -> c
    boolean spawnAnimals -> d
    boolean spawnNpcs -> e
    boolean pvp -> f
    boolean allowFlight -> g
    java.lang.String resourcePack -> h
    java.lang.String motd -> i
    boolean forceGameMode -> j
    boolean enforceWhitelist -> k
    boolean generateStructures -> l
    net.minecraft.world.Difficulty difficulty -> m
    net.minecraft.world.level.GameType gamemode -> n
    java.lang.String levelName -> o
    java.lang.String levelSeed -> p
    net.minecraft.world.level.LevelType levelType -> q
    java.lang.String generatorSettings -> r
    int serverPort -> s
    int maxBuildHeight -> t
    java.lang.Boolean announcePlayerAchievements -> u
    boolean enableQuery -> v
    int queryPort -> w
    boolean enableRcon -> x
    int rconPort -> y
    java.lang.String rconPassword -> z
    java.lang.String resourcePackHash -> A
    java.lang.String resourcePackSha1 -> B
    boolean hardcore -> C
    boolean allowNether -> D
    boolean spawnMonsters -> E
    boolean snooperEnabled -> F
    boolean useNativeTransport -> G
    boolean enableCommandBlock -> H
    int spawnProtection -> I
    int opPermissionLevel -> J
    int functionPermissionLevel -> K
    long maxTickTime -> L
    int viewDistance -> M
    int maxPlayers -> N
    int networkCompressionThreshold -> O
    boolean broadcastRconToOps -> P
    boolean broadcastConsoleToOps -> Q
    int maxWorldSize -> R
    net.minecraft.server.dedicated.Settings$MutableValue playerIdleTimeout -> S
    net.minecraft.server.dedicated.Settings$MutableValue whiteList -> T
    16:67:void <init>(java.util.Properties) -> <init>
    70:70:net.minecraft.server.dedicated.DedicatedServerProperties fromFile(java.nio.file.Path) -> a
    75:75:net.minecraft.server.dedicated.DedicatedServerProperties reload(java.util.Properties) -> a
    15:15:net.minecraft.server.dedicated.Settings reload(java.util.Properties) -> b
    60:60:java.lang.Integer lambda$new$1(java.lang.Integer) -> a
    35:35:java.lang.Integer lambda$new$0(java.lang.Integer) -> b
net.minecraft.server.dedicated.DedicatedServerSettings -> wf:
    java.nio.file.Path source -> a
    net.minecraft.server.dedicated.DedicatedServerProperties properties -> b
    10:13:void <init>(java.nio.file.Path) -> <init>
    16:16:net.minecraft.server.dedicated.DedicatedServerProperties getProperties() -> a
    20:21:void forceSave() -> b
    24:25:net.minecraft.server.dedicated.DedicatedServerSettings update(java.util.function.UnaryOperator) -> a
net.minecraft.server.dedicated.ServerWatchdog -> wg:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.server.dedicated.DedicatedServer server -> b
    long maxTickTime -> c
    28:31:void <init>(net.minecraft.server.dedicated.DedicatedServer) -> <init>
    35:79:void run() -> run
    83:95:void exit() -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.server.dedicated.ServerWatchdog$1 -> wg$1:
    net.minecraft.server.dedicated.ServerWatchdog this$0 -> a
    84:84:void <init>(net.minecraft.server.dedicated.ServerWatchdog) -> <init>
    87:88:void run() -> run
net.minecraft.server.dedicated.Settings -> wh:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.Properties properties -> b
    48:50:void <init>(java.util.Properties) -> <init>
    53:59:java.util.Properties loadFromFile(java.nio.file.Path) -> b
    63:68:void store(java.nio.file.Path) -> c
    71:71:java.util.function.Function wrapNumberDeserializer(java.util.function.Function) -> a
    81:81:java.util.function.Function dispatchNumberOrString(java.util.function.IntFunction,java.util.function.Function) -> a
    92:92:java.lang.String getStringRaw(java.lang.String) -> c
    97:102:java.lang.Object getLegacy(java.lang.String,java.util.function.Function) -> a
    106:109:java.lang.Object get(java.lang.String,java.util.function.Function,java.util.function.Function,java.lang.Object) -> a
    113:116:net.minecraft.server.dedicated.Settings$MutableValue getMutable(java.lang.String,java.util.function.Function,java.util.function.Function,java.lang.Object) -> b
    120:120:java.lang.Object get(java.lang.String,java.util.function.Function,java.util.function.UnaryOperator,java.util.function.Function,java.lang.Object) -> a
    127:127:java.lang.Object get(java.lang.String,java.util.function.Function,java.lang.Object) -> a
    131:131:net.minecraft.server.dedicated.Settings$MutableValue getMutable(java.lang.String,java.util.function.Function,java.lang.Object) -> b
    135:135:java.lang.String get(java.lang.String,java.lang.String) -> a
    140:140:java.lang.String getLegacyString(java.lang.String) -> a
    144:144:int get(java.lang.String,int) -> a
    148:148:net.minecraft.server.dedicated.Settings$MutableValue getMutable(java.lang.String,int) -> b
    152:152:int get(java.lang.String,java.util.function.UnaryOperator,int) -> a
    156:156:long get(java.lang.String,long) -> a
    160:160:boolean get(java.lang.String,boolean) -> a
    164:164:net.minecraft.server.dedicated.Settings$MutableValue getMutable(java.lang.String,boolean) -> b
    169:169:java.lang.Boolean getLegacyBoolean(java.lang.String) -> b
    173:175:java.util.Properties cloneProperties() -> a
    net.minecraft.server.dedicated.Settings reload(java.util.Properties) -> b
    121:122:java.lang.Object lambda$get$2(java.util.function.Function,java.util.function.UnaryOperator,java.lang.String) -> a
    83:85:java.lang.Object lambda$dispatchNumberOrString$1(java.util.function.IntFunction,java.util.function.Function,java.lang.String) -> a
    73:75:java.lang.Number lambda$wrapNumberDeserializer$0(java.util.function.Function,java.lang.String) -> a
    44:44:void <clinit>() -> <clinit>
net.minecraft.server.dedicated.Settings$1 -> wh$1:
net.minecraft.server.dedicated.Settings$MutableValue -> wh$a:
    java.lang.String key -> b
    java.lang.Object value -> c
    java.util.function.Function serializer -> d
    net.minecraft.server.dedicated.Settings this$0 -> a
    26:30:void <init>(net.minecraft.server.dedicated.Settings,java.lang.String,java.lang.Object,java.util.function.Function) -> <init>
    34:34:java.lang.Object get() -> get
    38:40:net.minecraft.server.dedicated.Settings update(java.lang.Object) -> a
    21:21:void <init>(net.minecraft.server.dedicated.Settings,java.lang.String,java.lang.Object,java.util.function.Function,net.minecraft.server.dedicated.Settings$1) -> <init>
net.minecraft.server.dedicated.package-info -> wi:
net.minecraft.server.gui.MinecraftServerGui -> wj:
    java.awt.Font MONOSPACED -> a
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.server.dedicated.DedicatedServer server -> c
    java.lang.Thread logAppenderThread -> d
    java.util.Collection finalizers -> e
    java.util.concurrent.atomic.AtomicBoolean isClosing -> f
    48:71:net.minecraft.server.gui.MinecraftServerGui showFrameFor(net.minecraft.server.dedicated.DedicatedServer) -> a
    43:85:void <init>(net.minecraft.server.dedicated.DedicatedServer) -> <init>
    88:89:void addFinalizer(java.lang.Runnable) -> a
    92:98:javax.swing.JComponent buildInfoPanel() -> c
    102:106:javax.swing.JComponent buildPlayerPanel() -> d
    110:143:javax.swing.JComponent buildChatPanel() -> e
    147:148:void start() -> a
    151:154:void close() -> b
    157:158:void runFinalizers() -> f
    161:182:void print(javax.swing.JTextArea,javax.swing.JScrollPane,java.lang.String) -> a
    162:162:void lambda$print$2(javax.swing.JTextArea,javax.swing.JScrollPane,java.lang.String) -> b
    137:140:void lambda$buildChatPanel$1(javax.swing.JTextArea,javax.swing.JScrollPane) -> a
    118:123:void lambda$buildChatPanel$0(javax.swing.JTextField,java.awt.event.ActionEvent) -> a
    35:35:java.util.concurrent.atomic.AtomicBoolean access$000(net.minecraft.server.gui.MinecraftServerGui) -> a
    35:35:void access$100(net.minecraft.server.gui.MinecraftServerGui) -> b
    36:37:void <clinit>() -> <clinit>
net.minecraft.server.gui.MinecraftServerGui$1 -> wj$1:
    net.minecraft.server.gui.MinecraftServerGui val$gui -> a
    javax.swing.JFrame val$frame -> b
    net.minecraft.server.dedicated.DedicatedServer val$server -> c
    59:59:void <init>(net.minecraft.server.gui.MinecraftServerGui,javax.swing.JFrame,net.minecraft.server.dedicated.DedicatedServer) -> <init>
    62:67:void windowClosing(java.awt.event.WindowEvent) -> windowClosing
net.minecraft.server.gui.MinecraftServerGui$2 -> wj$2:
    net.minecraft.server.gui.MinecraftServerGui this$0 -> a
    125:125:void <init>(net.minecraft.server.gui.MinecraftServerGui) -> <init>
    128:128:void focusGained(java.awt.event.FocusEvent) -> focusGained
net.minecraft.server.gui.PlayerListComponent -> wk:
    net.minecraft.server.MinecraftServer server -> a
    int tickCount -> b
    12:15:void <init>(net.minecraft.server.MinecraftServer) -> <init>
    18:25:void tick() -> a
net.minecraft.server.gui.StatsComponent -> wl:
    java.text.DecimalFormat DECIMAL_FORMAT -> a
    int[] values -> b
    int vp -> c
    java.lang.String[] msgs -> d
    net.minecraft.server.MinecraftServer server -> e
    javax.swing.Timer timer -> f
    18:32:void <init>(net.minecraft.server.MinecraftServer) -> <init>
    35:40:void tick() -> b
    43:47:double getAverage(long[]) -> a
    52:67:void paint(java.awt.Graphics) -> paint
    70:71:void close() -> a
    29:29:void lambda$new$1(java.awt.event.ActionEvent) -> a
    16:16:void lambda$static$0(java.text.DecimalFormat) -> a
    16:16:void <clinit>() -> <clinit>
net.minecraft.server.gui.package-info -> wm:
net.minecraft.server.level.BlockDestructionProgress -> wn:
    int id -> a
    net.minecraft.core.BlockPos pos -> b
    int progress -> c
    int updatedRenderTick -> d
    11:14:void <init>(int,net.minecraft.core.BlockPos) -> <init>
    17:17:int getId() -> a
    21:21:net.minecraft.core.BlockPos getPos() -> b
    25:29:void setProgress(int) -> a
    32:32:int getProgress() -> c
    36:37:void updateTick(int) -> b
    40:40:int getUpdatedRenderTick() -> d
    45:52:boolean equals(java.lang.Object) -> equals
    57:57:int hashCode() -> hashCode
    62:65:int compareTo(net.minecraft.server.level.BlockDestructionProgress) -> a
    5:5:int compareTo(java.lang.Object) -> compareTo
net.minecraft.server.level.ChunkHolder -> wo:
    com.mojang.datafixers.util.Either UNLOADED_CHUNK -> a
    java.util.concurrent.CompletableFuture UNLOADED_CHUNK_FUTURE -> b
    com.mojang.datafixers.util.Either UNLOADED_LEVEL_CHUNK -> c
    java.util.concurrent.CompletableFuture UNLOADED_LEVEL_CHUNK_FUTURE -> d
    java.util.List CHUNK_STATUSES -> e
    net.minecraft.server.level.ChunkHolder$FullChunkStatus[] FULL_CHUNK_STATUSES -> f
    java.util.concurrent.atomic.AtomicReferenceArray futures -> g
    java.util.concurrent.CompletableFuture fullChunkFuture -> h
    java.util.concurrent.CompletableFuture tickingChunkFuture -> i
    java.util.concurrent.CompletableFuture entityTickingChunkFuture -> j
    java.util.concurrent.CompletableFuture chunkToSave -> k
    int oldTicketLevel -> l
    int ticketLevel -> m
    int queueLevel -> n
    net.minecraft.world.level.ChunkPos pos -> o
    short[] changedBlocks -> p
    int changes -> q
    int changedSectionFilter -> r
    int sectionsToForceSendLightFor -> s
    int blockChangedLightSectionFilter -> t
    int skyChangedLightSectionFilter -> u
    net.minecraft.world.level.lighting.LevelLightEngine lightEngine -> v
    net.minecraft.server.level.ChunkHolder$LevelChangeListener onLevelChange -> w
    net.minecraft.server.level.ChunkHolder$PlayerProvider playerProvider -> x
    boolean wasAccessibleSinceLastSave -> y
    47:81:void <init>(net.minecraft.world.level.ChunkPos,int,net.minecraft.world.level.lighting.LevelLightEngine,net.minecraft.server.level.ChunkHolder$LevelChangeListener,net.minecraft.server.level.ChunkHolder$PlayerProvider) -> <init>
    84:85:java.util.concurrent.CompletableFuture getFutureIfPresentUnchecked(net.minecraft.world.level.chunk.ChunkStatus) -> a
    89:92:java.util.concurrent.CompletableFuture getFutureIfPresent(net.minecraft.world.level.chunk.ChunkStatus) -> b
    99:99:java.util.concurrent.CompletableFuture getTickingChunkFuture() -> a
    106:106:java.util.concurrent.CompletableFuture getEntityTickingChunkFuture() -> b
    113:113:java.util.concurrent.CompletableFuture getFullChunkFuture() -> c
    121:126:net.minecraft.world.level.chunk.LevelChunk getTickingChunk() -> d
    134:141:net.minecraft.world.level.chunk.ChunkStatus getLastAvailableStatus() -> e
    150:161:net.minecraft.world.level.chunk.ChunkAccess getLastAvailable() -> f
    165:165:java.util.concurrent.CompletableFuture getChunkToSave() -> g
    171:189:void blockChanged(int,int,int) -> a
    192:203:void sectionLightChanged(net.minecraft.world.level.LightLayer,int) -> a
    206:258:void broadcastChanges(net.minecraft.world.level.chunk.LevelChunk) -> a
    261:268:void broadcastBlockEntity(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    271:272:void broadcast(net.minecraft.network.protocol.Packet,boolean) -> a
    278:292:java.util.concurrent.CompletableFuture getOrScheduleFuture(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ChunkMap) -> a
    296:297:void updateChunkToSave(java.util.concurrent.CompletableFuture) -> a
    300:300:net.minecraft.server.level.ChunkHolder$FullChunkStatus getFullStatus() -> h
    304:304:net.minecraft.world.level.ChunkPos getPos() -> i
    308:308:int getTicketLevel() -> j
    312:312:int getQueueLevel() -> k
    316:317:void setQueueLevel(int) -> d
    320:321:void setTicketLevel(int) -> a
    324:394:void updateFutures(net.minecraft.server.level.ChunkMap) -> a
    397:400:net.minecraft.world.level.chunk.ChunkStatus getStatus(int) -> b
    404:404:net.minecraft.server.level.ChunkHolder$FullChunkStatus getFullChunkStatus(int) -> c
    408:408:boolean wasAccessibleSinceLastSave() -> l
    412:413:void refreshAccessibility() -> m
    416:428:void replaceProtoChunk(net.minecraft.world.level.chunk.ImposterProtoChunk) -> a
    362:362:com.mojang.datafixers.util.Either lambda$updateFutures$4(net.minecraft.server.level.ChunkMap,com.mojang.datafixers.util.Either) -> a
    296:296:net.minecraft.world.level.chunk.ChunkAccess lambda$updateChunkToSave$3(net.minecraft.world.level.chunk.ChunkAccess,com.mojang.datafixers.util.Either) -> a
    296:296:net.minecraft.world.level.chunk.ChunkAccess lambda$null$2(net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.server.level.ChunkHolder$ChunkLoadingFailure) -> a
    296:296:net.minecraft.world.level.chunk.ChunkAccess lambda$null$1(net.minecraft.world.level.chunk.ChunkAccess) -> a
    271:271:void lambda$broadcast$0(net.minecraft.network.protocol.Packet,net.minecraft.server.level.ServerPlayer) -> a
    33:33:net.minecraft.world.level.ChunkPos access$000(net.minecraft.server.level.ChunkHolder) -> a
    34:41:void <clinit>() -> <clinit>
net.minecraft.server.level.ChunkHolder$1 -> wo$1:
    net.minecraft.server.level.ChunkHolder this$0 -> a
    334:334:void <init>(net.minecraft.server.level.ChunkHolder) -> <init>
    337:337:java.lang.String toString() -> toString
net.minecraft.server.level.ChunkHolder$ChunkLoadingFailure -> wo$a:
    net.minecraft.server.level.ChunkHolder$ChunkLoadingFailure UNLOADED -> b
    443:443:void <clinit>() -> <clinit>
net.minecraft.server.level.ChunkHolder$ChunkLoadingFailure$1 -> wo$a$1:
    443:443:void <init>() -> <init>
    446:446:java.lang.String toString() -> toString
net.minecraft.server.level.ChunkHolder$FullChunkStatus -> wo$b:
    net.minecraft.server.level.ChunkHolder$FullChunkStatus INACCESSIBLE -> a
    net.minecraft.server.level.ChunkHolder$FullChunkStatus BORDER -> b
    net.minecraft.server.level.ChunkHolder$FullChunkStatus TICKING -> c
    net.minecraft.server.level.ChunkHolder$FullChunkStatus ENTITY_TICKING -> d
    net.minecraft.server.level.ChunkHolder$FullChunkStatus[] $VALUES -> e
    430:430:net.minecraft.server.level.ChunkHolder$FullChunkStatus[] values() -> values
    430:430:net.minecraft.server.level.ChunkHolder$FullChunkStatus valueOf(java.lang.String) -> valueOf
    430:430:void <init>(java.lang.String,int) -> <init>
    438:438:boolean isOrAfter(net.minecraft.server.level.ChunkHolder$FullChunkStatus) -> a
    430:434:void <clinit>() -> <clinit>
net.minecraft.server.level.ChunkHolder$LevelChangeListener -> wo$c:
    void onLevelChange(net.minecraft.world.level.ChunkPos,java.util.function.IntSupplier,int,java.util.function.IntConsumer) -> a
net.minecraft.server.level.ChunkHolder$PlayerProvider -> wo$d:
    java.util.stream.Stream getPlayers(net.minecraft.world.level.ChunkPos,boolean) -> a
net.minecraft.server.level.ChunkMap -> wp:
    org.apache.logging.log4j.Logger LOGGER -> c
    int MAX_CHUNK_DISTANCE -> a
    it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap updatingChunkMap -> d
    it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap visibleChunkMap -> e
    it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap pendingUnloads -> f
    it.unimi.dsi.fastutil.longs.LongSet entitiesInLevel -> g
    net.minecraft.server.level.ServerLevel level -> h
    net.minecraft.server.level.ThreadedLevelLightEngine lightEngine -> i
    net.minecraft.util.thread.BlockableEventLoop mainThreadExecutor -> j
    net.minecraft.world.level.chunk.ChunkGenerator generator -> k
    java.util.function.Supplier overworldDataStorage -> l
    net.minecraft.world.entity.ai.village.poi.PoiManager poiManager -> m
    it.unimi.dsi.fastutil.longs.LongSet toDrop -> n
    boolean modified -> o
    net.minecraft.server.level.ChunkTaskPriorityQueueSorter queueSorter -> p
    net.minecraft.util.thread.ProcessorHandle worldgenMailbox -> q
    net.minecraft.util.thread.ProcessorHandle mainThreadMailbox -> r
    net.minecraft.server.level.progress.ChunkProgressListener progressListener -> s
    net.minecraft.server.level.ChunkMap$DistanceManager distanceManager -> t
    java.util.concurrent.atomic.AtomicInteger tickingGenerated -> u
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager structureManager -> v
    java.io.File storageFolder -> w
    net.minecraft.server.level.PlayerMap playerMap -> x
    it.unimi.dsi.fastutil.ints.Int2ObjectMap entityMap -> y
    java.util.Queue unloadQueue -> z
    int viewDistance -> A
    105:169:void <init>(net.minecraft.server.level.ServerLevel,java.io.File,com.mojang.datafixers.DataFixer,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,java.util.concurrent.Executor,net.minecraft.util.thread.BlockableEventLoop,net.minecraft.world.level.chunk.LightChunkGetter,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.server.level.progress.ChunkProgressListener,java.util.function.Supplier,int) -> <init>
    172:178:double euclideanDistanceSquared(net.minecraft.world.level.ChunkPos,net.minecraft.world.entity.Entity) -> a
    184:192:int checkerboardDistance(net.minecraft.world.level.ChunkPos,net.minecraft.server.level.ServerPlayer,boolean) -> b
    196:196:int checkerboardDistance(net.minecraft.world.level.ChunkPos,net.minecraft.world.entity.Entity) -> b
    200:203:int checkerboardDistance(net.minecraft.world.level.ChunkPos,int,int) -> a
    207:207:net.minecraft.server.level.ThreadedLevelLightEngine getLightEngine() -> a
    212:212:net.minecraft.server.level.ChunkHolder getUpdatingChunkIfPresent(long) -> a
    217:217:net.minecraft.server.level.ChunkHolder getVisibleChunkIfPresent(long) -> b
    221:221:java.util.function.IntSupplier getChunkQueueLevel(long) -> c
    231:246:java.lang.String getChunkDebugData(net.minecraft.world.level.ChunkPos) -> a
    250:274:java.util.concurrent.CompletableFuture getChunkRangeFuture(net.minecraft.world.level.ChunkPos,int,java.util.function.IntFunction) -> a
    296:296:java.util.concurrent.CompletableFuture getEntityTickingRangeFuture(net.minecraft.world.level.ChunkPos) -> b
    301:330:net.minecraft.server.level.ChunkHolder updateChunkScheduling(long,int,net.minecraft.server.level.ChunkHolder,int) -> a
    336:341:void close() -> close
    345:385:void saveAllChunks(boolean) -> a
    388:396:void tick(java.util.function.BooleanSupplier) -> a
    399:418:void processUnloads(java.util.function.BooleanSupplier) -> b
    421:450:void scheduleUnload(long,net.minecraft.server.level.ChunkHolder) -> a
    453:459:boolean promoteChunkMap() -> b
    467:474:java.util.concurrent.CompletableFuture schedule(net.minecraft.server.level.ChunkHolder,net.minecraft.world.level.chunk.ChunkStatus) -> a
    506:506:java.util.concurrent.CompletableFuture scheduleChunkLoad(net.minecraft.world.level.ChunkPos) -> f
    539:543:java.util.concurrent.CompletableFuture scheduleChunkGeneration(net.minecraft.server.level.ChunkHolder,net.minecraft.world.level.chunk.ChunkStatus) -> b
    571:572:void releaseLightTicket(net.minecraft.world.level.ChunkPos) -> c
    576:581:net.minecraft.world.level.chunk.ChunkStatus getDependencyStatus(net.minecraft.world.level.chunk.ChunkStatus,int) -> a
    585:586:java.util.concurrent.CompletableFuture protoChunkToFullChunk(net.minecraft.server.level.ChunkHolder) -> c
    636:653:java.util.concurrent.CompletableFuture postProcess(net.minecraft.server.level.ChunkHolder) -> a
    657:658:java.util.concurrent.CompletableFuture unpackTicks(net.minecraft.server.level.ChunkHolder) -> b
    667:667:int getTickingGenerated() -> c
    671:711:boolean save(net.minecraft.world.level.chunk.ChunkAccess) -> a
    715:731:void setViewDistance(int) -> a
    736:752:void updateChunkTracking(net.minecraft.server.level.ServerPlayer,net.minecraft.world.level.ChunkPos,net.minecraft.network.protocol.Packet[],boolean,boolean) -> a
    755:755:int size() -> d
    759:759:net.minecraft.server.level.ChunkMap$DistanceManager getDistanceManager() -> e
    763:763:java.lang.Iterable getChunks() -> f
    767:804:void dumpChunks(java.io.Writer) -> a
    808:817:java.lang.String printFuture(java.util.concurrent.CompletableFuture) -> a
    823:828:net.minecraft.nbt.CompoundTag readChunk(net.minecraft.world.level.ChunkPos) -> g
    832:838:boolean noPlayersCloseForSpawning(net.minecraft.world.level.ChunkPos) -> d
    842:842:boolean skipPlayer(net.minecraft.server.level.ServerPlayer) -> b
    846:870:void updatePlayerStatus(net.minecraft.server.level.ServerPlayer,boolean) -> a
    873:876:net.minecraft.core.SectionPos updatePlayerPos(net.minecraft.server.level.ServerPlayer) -> c
    880:959:void move(net.minecraft.server.level.ServerPlayer) -> a
    963:963:java.util.stream.Stream getPlayers(net.minecraft.world.level.ChunkPos,boolean) -> a
    974:1000:void addEntity(net.minecraft.world.entity.Entity) -> a
    1003:1014:void removeEntity(net.minecraft.world.entity.Entity) -> b
    1019:1042:void tick() -> g
    1045:1049:void broadcast(net.minecraft.world.entity.Entity,net.minecraft.network.protocol.Packet) -> a
    1052:1056:void broadcastAndSend(net.minecraft.world.entity.Entity,net.minecraft.network.protocol.Packet) -> b
    1059:1099:void playerLoadedChunk(net.minecraft.server.level.ServerPlayer,net.minecraft.network.protocol.Packet[],net.minecraft.world.level.chunk.LevelChunk) -> a
    1102:1102:net.minecraft.world.entity.ai.village.poi.PoiManager getPoiManager() -> h
    1106:1106:java.util.concurrent.CompletableFuture packTicks(net.minecraft.world.level.chunk.LevelChunk) -> a
    1106:1106:void lambda$packTicks$47(net.minecraft.world.level.chunk.LevelChunk) -> b
    964:968:boolean lambda$getPlayers$46(net.minecraft.world.level.ChunkPos,boolean,net.minecraft.server.level.ServerPlayer) -> a
    838:838:boolean lambda$noPlayersCloseForSpawning$45(net.minecraft.world.level.ChunkPos,net.minecraft.server.level.ServerPlayer) -> a
    810:810:java.lang.String lambda$printFuture$44(net.minecraft.server.level.ChunkHolder$ChunkLoadingFailure) -> a
    810:810:java.lang.String lambda$printFuture$43(net.minecraft.world.level.chunk.LevelChunk) -> c
    801:801:java.lang.Integer lambda$dumpChunks$42(net.minecraft.world.level.chunk.LevelChunk) -> d
    800:800:java.lang.Integer lambda$dumpChunks$41(net.minecraft.world.level.chunk.LevelChunk) -> e
    787:787:java.util.Optional lambda$dumpChunks$40(net.minecraft.world.level.chunk.ChunkAccess) -> b
    724:728:void lambda$setViewDistance$39(net.minecraft.world.level.ChunkPos,int,net.minecraft.network.protocol.Packet[],net.minecraft.server.level.ServerPlayer) -> a
    663:663:void lambda$unpackTicks$38(net.minecraft.server.level.ChunkHolder,java.lang.Runnable) -> a
    658:658:com.mojang.datafixers.util.Either lambda$unpackTicks$37(com.mojang.datafixers.util.Either) -> a
    659:661:net.minecraft.world.level.chunk.LevelChunk lambda$null$36(net.minecraft.world.level.chunk.ChunkAccess) -> c
    652:652:void lambda$postProcess$35(net.minecraft.server.level.ChunkHolder,java.lang.Runnable) -> b
    645:645:void lambda$postProcess$34(net.minecraft.world.level.ChunkPos,com.mojang.datafixers.util.Either) -> a
    646:651:com.mojang.datafixers.util.Either lambda$null$33(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.LevelChunk) -> a
    649:649:void lambda$null$32(net.minecraft.network.protocol.Packet[],net.minecraft.world.level.chunk.LevelChunk,net.minecraft.server.level.ServerPlayer) -> a
    643:643:void lambda$postProcess$31(net.minecraft.server.level.ChunkHolder,java.lang.Runnable) -> c
    639:639:com.mojang.datafixers.util.Either lambda$postProcess$30(com.mojang.datafixers.util.Either) -> b
    640:642:com.mojang.datafixers.util.Either lambda$null$29(java.util.List) -> a
    637:637:net.minecraft.world.level.chunk.ChunkStatus lambda$postProcess$28(int) -> b
    632:632:void lambda$protoChunkToFullChunk$27(net.minecraft.server.level.ChunkHolder,java.lang.Runnable) -> d
    587:592:com.mojang.datafixers.util.Either lambda$protoChunkToFullChunk$26(net.minecraft.server.level.ChunkHolder,com.mojang.datafixers.util.Either) -> a
    593:630:net.minecraft.world.level.chunk.ChunkAccess lambda$null$25(net.minecraft.server.level.ChunkHolder,net.minecraft.world.level.chunk.ChunkAccess) -> a
    602:602:net.minecraft.server.level.ChunkHolder$FullChunkStatus lambda$null$24(net.minecraft.server.level.ChunkHolder) -> d
    571:571:java.lang.String lambda$releaseLightTicket$23(net.minecraft.world.level.ChunkPos) -> h
    571:571:void lambda$releaseLightTicket$22(net.minecraft.world.level.ChunkPos) -> i
    567:567:void lambda$scheduleChunkGeneration$21(net.minecraft.server.level.ChunkHolder,java.lang.Runnable) -> e
    543:543:java.util.concurrent.CompletionStage lambda$scheduleChunkGeneration$20(net.minecraft.world.level.ChunkPos,net.minecraft.server.level.ChunkHolder,net.minecraft.world.level.chunk.ChunkStatus,com.mojang.datafixers.util.Either) -> a
    564:565:java.util.concurrent.CompletableFuture lambda$null$19(net.minecraft.world.level.ChunkPos,net.minecraft.server.level.ChunkHolder$ChunkLoadingFailure) -> a
    549:560:java.util.concurrent.CompletableFuture lambda$null$18(net.minecraft.world.level.ChunkPos,net.minecraft.server.level.ChunkHolder,net.minecraft.world.level.chunk.ChunkStatus,java.util.List) -> a
    549:549:java.util.concurrent.CompletableFuture lambda$null$17(net.minecraft.server.level.ChunkHolder,net.minecraft.world.level.chunk.ChunkAccess) -> b
    542:542:java.lang.String lambda$scheduleChunkGeneration$16(net.minecraft.world.level.chunk.ChunkStatus) -> a
    541:541:net.minecraft.world.level.chunk.ChunkStatus lambda$scheduleChunkGeneration$15(net.minecraft.world.level.chunk.ChunkStatus,int) -> b
    510:534:com.mojang.datafixers.util.Either lambda$scheduleChunkLoad$14(net.minecraft.world.level.ChunkPos) -> j
    475:501:java.util.concurrent.CompletionStage lambda$schedule$13(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.world.level.ChunkPos,net.minecraft.server.level.ChunkHolder,com.mojang.datafixers.util.Either) -> a
    494:494:java.util.concurrent.CompletableFuture lambda$null$12(net.minecraft.server.level.ChunkHolder,net.minecraft.world.level.chunk.ChunkAccess) -> c
    446:449:void lambda$scheduleUnload$11(net.minecraft.server.level.ChunkHolder,java.lang.Void,java.lang.Throwable) -> a
    423:445:void lambda$scheduleUnload$10(net.minecraft.server.level.ChunkHolder,java.util.concurrent.CompletableFuture,long,net.minecraft.world.level.chunk.ChunkAccess) -> a
    378:383:void lambda$saveAllChunks$9(net.minecraft.server.level.ChunkHolder) -> e
    369:369:boolean lambda$saveAllChunks$8() -> j
    366:366:void lambda$saveAllChunks$7(org.apache.commons.lang3.mutable.MutableBoolean,net.minecraft.world.level.chunk.ChunkAccess) -> a
    364:364:boolean lambda$saveAllChunks$6(net.minecraft.world.level.chunk.ChunkAccess) -> d
    359:362:net.minecraft.world.level.chunk.ChunkAccess lambda$saveAllChunks$5(net.minecraft.server.level.ChunkHolder) -> f
    296:296:com.mojang.datafixers.util.Either lambda$getEntityTickingRangeFuture$4(com.mojang.datafixers.util.Either) -> c
    296:296:net.minecraft.world.level.chunk.LevelChunk lambda$null$3(java.util.List) -> b
    296:296:net.minecraft.world.level.chunk.ChunkStatus lambda$getEntityTickingRangeFuture$2(int) -> c
    275:291:com.mojang.datafixers.util.Either lambda$getChunkRangeFuture$1(int,int,int,java.util.List) -> a
    222:226:int lambda$getChunkQueueLevel$0(long) -> d
    91:91:it.unimi.dsi.fastutil.longs.LongSet access$300(net.minecraft.server.level.ChunkMap) -> a
    91:91:net.minecraft.server.level.ChunkHolder access$400(net.minecraft.server.level.ChunkMap,long,int,net.minecraft.server.level.ChunkHolder,int) -> a
    91:91:net.minecraft.server.level.ServerLevel access$500(net.minecraft.server.level.ChunkMap) -> b
    91:91:int access$600(net.minecraft.server.level.ChunkMap) -> c
    91:91:int access$700(net.minecraft.world.level.ChunkPos,net.minecraft.server.level.ServerPlayer,boolean) -> a
    92:98:void <clinit>() -> <clinit>
net.minecraft.server.level.ChunkMap$1 -> wp$1:
    net.minecraft.world.level.ChunkPos val$k -> a
    net.minecraft.server.level.ChunkMap this$0 -> c
    261:261:void <init>(net.minecraft.server.level.ChunkMap,net.minecraft.world.level.ChunkPos) -> <init>
    264:264:java.lang.String toString() -> toString
net.minecraft.server.level.ChunkMap$2 -> wp$2:
    int val$startX -> a
    int val$finalI -> c
    int val$range -> d
    int val$startZ -> e
    com.mojang.datafixers.util.Either val$either -> f
    net.minecraft.server.level.ChunkMap this$0 -> g
    281:281:void <init>(net.minecraft.server.level.ChunkMap,int,int,int,int,com.mojang.datafixers.util.Either) -> <init>
    284:284:java.lang.String toString() -> toString
net.minecraft.server.level.ChunkMap$DistanceManager -> wp$a:
    net.minecraft.server.level.ChunkMap this$0 -> a
    1110:1112:void <init>(net.minecraft.server.level.ChunkMap,java.util.concurrent.Executor,java.util.concurrent.Executor) -> <init>
    1116:1116:boolean isChunkToRemove(long) -> a
    1122:1122:net.minecraft.server.level.ChunkHolder getChunk(long) -> b
    1128:1128:net.minecraft.server.level.ChunkHolder updateChunkScheduling(long,int,net.minecraft.server.level.ChunkHolder,int) -> a
net.minecraft.server.level.ChunkMap$TrackedEntity -> wp$b:
    net.minecraft.server.level.ServerEntity serverEntity -> b
    net.minecraft.world.entity.Entity entity -> c
    int range -> d
    net.minecraft.core.SectionPos lastSectionPos -> e
    java.util.Set seenBy -> f
    net.minecraft.server.level.ChunkMap this$0 -> a
    1140:1147:void <init>(net.minecraft.server.level.ChunkMap,net.minecraft.world.entity.Entity,int,int,boolean) -> <init>
    1151:1155:boolean equals(java.lang.Object) -> equals
    1160:1160:int hashCode() -> hashCode
    1164:1167:void broadcast(net.minecraft.network.protocol.Packet) -> a
    1170:1174:void broadcastAndSend(net.minecraft.network.protocol.Packet) -> b
    1177:1180:void broadcastRemoved() -> a
    1183:1186:void removePlayer(net.minecraft.server.level.ServerPlayer) -> a
    1189:1214:void updatePlayer(net.minecraft.server.level.ServerPlayer) -> b
    1217:1225:int getEffectiveRange() -> b
    1229:1232:void updatePlayers(java.util.List) -> a
    1132:1132:net.minecraft.world.entity.Entity access$000(net.minecraft.server.level.ChunkMap$TrackedEntity) -> a
    1132:1132:net.minecraft.core.SectionPos access$100(net.minecraft.server.level.ChunkMap$TrackedEntity) -> b
    1132:1132:net.minecraft.core.SectionPos access$102(net.minecraft.server.level.ChunkMap$TrackedEntity,net.minecraft.core.SectionPos) -> a
    1132:1132:net.minecraft.server.level.ServerEntity access$200(net.minecraft.server.level.ChunkMap$TrackedEntity) -> c
net.minecraft.server.level.ChunkTaskPriorityQueue -> wq:
    int PRIORITY_LEVEL_COUNT -> a
    java.util.List taskQueue -> b
    int firstQueue -> c
    java.lang.String name -> d
    it.unimi.dsi.fastutil.longs.LongSet acquired -> e
    int maxTasks -> f
    20:31:void <init>(java.lang.String,int) -> <init>
    34:48:void resortChunkTasks(int,net.minecraft.world.level.ChunkPos,int) -> a
    51:53:void submit(java.util.Optional,long,int) -> a
    56:74:void release(long,boolean) -> a
    77:77:java.lang.Runnable acquire(long) -> a
    82:95:java.util.stream.Stream pop() -> a
    100:100:java.lang.String toString() -> toString
    105:105:it.unimi.dsi.fastutil.longs.LongSet getAcquired() -> b
    93:93:com.mojang.datafixers.util.Either lambda$pop$6(long,java.util.Optional) -> a
    93:93:com.mojang.datafixers.util.Either lambda$null$5(long) -> b
    77:77:void lambda$acquire$4(long) -> c
    64:64:boolean lambda$release$3(java.util.Optional) -> a
    51:51:java.util.List lambda$submit$2(long) -> d
    45:45:java.util.List lambda$resortChunkTasks$1(long) -> e
    20:20:it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap lambda$new$0(int) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.server.level.ChunkTaskPriorityQueueSorter -> wr:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.Map queues -> b
    java.util.Set sleeping -> c
    net.minecraft.util.thread.ProcessorMailbox mailbox -> d
    34:38:void <init>(java.util.List,java.util.concurrent.Executor,int) -> <init>
    53:53:net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message message(java.util.function.Function,long,java.util.function.IntSupplier) -> a
    57:57:net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message message(java.lang.Runnable,long,java.util.function.IntSupplier) -> a
    64:64:net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message message(net.minecraft.server.level.ChunkHolder,java.lang.Runnable) -> a
    68:68:net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message message(net.minecraft.server.level.ChunkHolder,java.util.function.Function) -> a
    84:84:net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Release release(java.lang.Runnable,long,boolean) -> a
    88:92:net.minecraft.util.thread.ProcessorHandle getProcessor(net.minecraft.util.thread.ProcessorHandle,boolean) -> a
    96:98:net.minecraft.util.thread.ProcessorHandle getReleaseProcessor(net.minecraft.util.thread.ProcessorHandle) -> a
    103:111:void onLevelChange(net.minecraft.world.level.ChunkPos,java.util.function.IntSupplier,int,java.util.function.IntConsumer) -> a
    114:122:void release(net.minecraft.util.thread.ProcessorHandle,long,java.lang.Runnable,boolean) -> a
    125:139:void submit(net.minecraft.util.thread.ProcessorHandle,java.util.function.Function,long,java.util.function.IntSupplier,boolean) -> a
    142:153:void pollTask(net.minecraft.server.level.ChunkTaskPriorityQueue,net.minecraft.util.thread.ProcessorHandle) -> a
    157:161:net.minecraft.server.level.ChunkTaskPriorityQueue getQueue(net.minecraft.util.thread.ProcessorHandle) -> b
    166:168:java.lang.String getDebugStatus() -> a
    173:174:void close() -> close
    167:167:java.lang.String lambda$getDebugStatus$18(java.util.Map$Entry) -> a
    167:167:java.lang.String lambda$null$17(java.lang.Long) -> a
    143:152:void lambda$pollTask$16(net.minecraft.server.level.ChunkTaskPriorityQueue,net.minecraft.util.thread.ProcessorHandle) -> b
    150:150:void lambda$null$15(net.minecraft.server.level.ChunkTaskPriorityQueue,net.minecraft.util.thread.ProcessorHandle,java.util.List) -> a
    147:147:java.util.concurrent.CompletableFuture lambda$null$14(net.minecraft.util.thread.ProcessorHandle,com.mojang.datafixers.util.Either) -> a
    148:149:java.util.concurrent.CompletableFuture lambda$null$13(java.lang.Runnable) -> a
    126:138:void lambda$submit$12(net.minecraft.util.thread.ProcessorHandle,java.util.function.IntSupplier,long,java.util.function.Function,boolean) -> a
    115:121:void lambda$release$11(net.minecraft.util.thread.ProcessorHandle,long,boolean,java.lang.Runnable) -> a
    104:110:void lambda$onLevelChange$10(java.util.function.IntSupplier,net.minecraft.world.level.ChunkPos,int,java.util.function.IntConsumer) -> a
    108:108:void lambda$null$9(int,net.minecraft.world.level.ChunkPos,int,net.minecraft.server.level.ChunkTaskPriorityQueue) -> a
    96:96:net.minecraft.util.thread.StrictQueue$IntRunnable lambda$getReleaseProcessor$8(net.minecraft.util.thread.ProcessorHandle,net.minecraft.util.thread.ProcessorHandle) -> a
    97:97:void lambda$null$7(net.minecraft.util.thread.ProcessorHandle,net.minecraft.util.thread.ProcessorHandle) -> b
    97:97:void lambda$null$6(net.minecraft.util.thread.ProcessorHandle,net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Release) -> a
    88:88:net.minecraft.util.thread.StrictQueue$IntRunnable lambda$getProcessor$5(net.minecraft.util.thread.ProcessorHandle,boolean,net.minecraft.util.thread.ProcessorHandle) -> a
    90:92:void lambda$null$4(net.minecraft.util.thread.ProcessorHandle,net.minecraft.util.thread.ProcessorHandle,boolean) -> a
    91:91:void lambda$null$3(net.minecraft.util.thread.ProcessorHandle,boolean,net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message) -> a
    57:57:java.lang.Runnable lambda$message$2(java.lang.Runnable,net.minecraft.util.thread.ProcessorHandle) -> a
    58:60:void lambda$null$1(java.lang.Runnable,net.minecraft.util.thread.ProcessorHandle) -> b
    35:35:net.minecraft.server.level.ChunkTaskPriorityQueue lambda$new$0(int,net.minecraft.util.thread.ProcessorHandle) -> a
    29:29:void <clinit>() -> <clinit>
net.minecraft.server.level.ChunkTaskPriorityQueueSorter$1 -> wr$1:
net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message -> wr$a:
    java.util.function.Function task -> a
    long pos -> b
    java.util.function.IntSupplier level -> c
    45:49:void <init>(java.util.function.Function,long,java.util.function.IntSupplier) -> <init>
    40:40:void <init>(java.util.function.Function,long,java.util.function.IntSupplier,net.minecraft.server.level.ChunkTaskPriorityQueueSorter$1) -> <init>
    40:40:java.util.function.Function access$500(net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message) -> a
    40:40:long access$600(net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message) -> b
    40:40:java.util.function.IntSupplier access$700(net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Message) -> c
net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Release -> wr$b:
    java.lang.Runnable task -> a
    long pos -> b
    boolean clearQueue -> c
    76:80:void <init>(java.lang.Runnable,long,boolean) -> <init>
    71:71:void <init>(java.lang.Runnable,long,boolean,net.minecraft.server.level.ChunkTaskPriorityQueueSorter$1) -> <init>
    71:71:long access$200(net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Release) -> a
    71:71:java.lang.Runnable access$300(net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Release) -> b
    71:71:boolean access$400(net.minecraft.server.level.ChunkTaskPriorityQueueSorter$Release) -> c
net.minecraft.server.level.ChunkTracker -> ws:
    8:9:void <init>(int,int,int) -> <init>
    13:13:boolean isSource(long) -> a
    18:30:void checkNeighborsAfterUpdate(long,int,boolean) -> a
    34:55:int getComputedLevel(long,long,int) -> a
    60:63:int computeLevelFromNeighbor(long,long,int) -> b
    int getLevelFromSource(long) -> b
    69:70:void update(long,int,boolean) -> b
net.minecraft.server.level.ColumnPos -> wt:
    int x -> a
    int z -> b
    16:19:void <init>(int,int) -> <init>
    21:24:void <init>(net.minecraft.core.BlockPos) -> <init>
    27:27:net.minecraft.world.level.ChunkPos toChunkPos() -> a
    31:31:long toLong() -> b
    35:35:long asLong(int,int) -> a
    40:40:java.lang.String toString() -> toString
    45:47:int hashCode() -> hashCode
    52:61:boolean equals(java.lang.Object) -> equals
net.minecraft.server.level.DemoMode -> wu:
    boolean displayedIntro -> c
    boolean demoHasEnded -> d
    int demoEndedReminder -> e
    int gameModeTicks -> f
    26:27:void <init>(net.minecraft.server.level.ServerLevel) -> <init>
    31:68:void tick() -> a
    71:75:void outputDemoReminder() -> e
    79:84:void handleBlockBreakAction(net.minecraft.core.BlockPos,net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action,net.minecraft.core.Direction,int) -> a
    88:92:net.minecraft.world.InteractionResult useItem(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.world.InteractionHand) -> a
    97:101:net.minecraft.world.InteractionResult useItemOn(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
net.minecraft.server.level.DerivedServerLevel -> wv:
    15:17:void <init>(net.minecraft.server.level.ServerLevel,net.minecraft.server.MinecraftServer,java.util.concurrent.Executor,net.minecraft.world.level.storage.LevelStorage,net.minecraft.world.level.dimension.DimensionType,net.minecraft.util.profiling.ProfilerFiller,net.minecraft.server.level.progress.ChunkProgressListener) -> <init>
    21:21:void tickTime() -> a
net.minecraft.server.level.DistanceManager -> ww:
    org.apache.logging.log4j.Logger LOGGER -> a
    int PLAYER_TICKET_LEVEL -> b
    it.unimi.dsi.fastutil.longs.Long2ObjectMap playersPerChunk -> c
    it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap tickets -> d
    net.minecraft.server.level.DistanceManager$ChunkTicketTracker ticketTracker -> e
    net.minecraft.server.level.DistanceManager$FixedPlayerDistanceChunkTracker naturalSpawnChunkCounter -> f
    net.minecraft.server.level.DistanceManager$PlayerTicketTracker playerTicketManager -> g
    java.util.Set chunksToUpdateFutures -> h
    net.minecraft.server.level.ChunkTaskPriorityQueueSorter ticketThrottler -> i
    net.minecraft.util.thread.ProcessorHandle ticketThrottlerInput -> j
    net.minecraft.util.thread.ProcessorHandle ticketThrottlerReleaser -> k
    it.unimi.dsi.fastutil.longs.LongSet ticketsToRelease -> l
    java.util.concurrent.Executor mainThreadExecutor -> m
    long ticketTickCounter -> n
    48:75:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor) -> <init>
    78:89:void purgeStaleTickets() -> a
    92:92:int getTicketLevelAt(net.minecraft.util.SortedArraySet) -> a
    boolean isChunkToRemove(long) -> a
    net.minecraft.server.level.ChunkHolder getChunk(long) -> b
    net.minecraft.server.level.ChunkHolder updateChunkScheduling(long,int,net.minecraft.server.level.ChunkHolder,int) -> a
    104:132:boolean runAllUpdates(net.minecraft.server.level.ChunkMap) -> a
    136:147:void addTicket(long,net.minecraft.server.level.Ticket) -> a
    150:158:void removeTicket(long,net.minecraft.server.level.Ticket) -> b
    161:162:void addTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkPos,int,java.lang.Object) -> a
    165:167:void removeTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkPos,int,java.lang.Object) -> b
    170:171:void addRegionTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkPos,int,java.lang.Object) -> c
    174:176:void removeRegionTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkPos,int,java.lang.Object) -> d
    179:179:net.minecraft.util.SortedArraySet getTickets(long) -> e
    183:189:void updateChunkForced(net.minecraft.world.level.ChunkPos,boolean) -> a
    192:196:void addPlayer(net.minecraft.core.SectionPos,net.minecraft.server.level.ServerPlayer) -> a
    199:207:void removePlayer(net.minecraft.core.SectionPos,net.minecraft.server.level.ServerPlayer) -> b
    210:217:java.lang.String getTicketDebugString(long) -> c
    221:222:void updatePlayerTickets(int) -> a
    225:226:int getNaturalSpawnChunkCount() -> b
    230:231:boolean hasPlayersNearby(long) -> d
    235:235:java.lang.String getDebugStatus() -> c
    240:255:void dumpTickets(java.lang.String) -> a
    193:193:it.unimi.dsi.fastutil.objects.ObjectSet lambda$addPlayer$7(long) -> f
    179:179:net.minecraft.util.SortedArraySet lambda$getTickets$6(long) -> g
    127:127:void lambda$runAllUpdates$5(long,com.mojang.datafixers.util.Either) -> a
    127:127:void lambda$null$4(long) -> h
    127:127:void lambda$null$3() -> f
    121:121:boolean lambda$runAllUpdates$2(net.minecraft.server.level.Ticket) -> a
    113:113:void lambda$runAllUpdates$1(net.minecraft.server.level.ChunkMap,net.minecraft.server.level.ChunkHolder) -> a
    82:82:boolean lambda$purgeStaleTickets$0(net.minecraft.server.level.Ticket) -> b
    39:39:it.unimi.dsi.fastutil.longs.Long2ObjectMap access$000(net.minecraft.server.level.DistanceManager) -> a
    39:39:org.apache.logging.log4j.Logger access$100() -> d
    39:39:int access$200() -> e
    39:39:net.minecraft.util.thread.ProcessorHandle access$300(net.minecraft.server.level.DistanceManager) -> b
    39:39:net.minecraft.util.thread.ProcessorHandle access$400(net.minecraft.server.level.DistanceManager) -> c
    39:39:net.minecraft.server.level.ChunkTaskPriorityQueueSorter access$500(net.minecraft.server.level.DistanceManager) -> d
    39:39:java.util.concurrent.Executor access$600(net.minecraft.server.level.DistanceManager) -> e
    39:39:void access$700(net.minecraft.server.level.DistanceManager,long,net.minecraft.server.level.Ticket) -> a
    39:39:void access$800(net.minecraft.server.level.DistanceManager,long,net.minecraft.server.level.Ticket) -> b
    39:39:it.unimi.dsi.fastutil.longs.LongSet access$900(net.minecraft.server.level.DistanceManager) -> f
    39:39:it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap access$1000(net.minecraft.server.level.DistanceManager) -> g
    39:39:java.util.Set access$1100(net.minecraft.server.level.DistanceManager) -> h
    40:44:void <clinit>() -> <clinit>
net.minecraft.server.level.DistanceManager$ChunkTicketTracker -> ww$a:
    net.minecraft.server.level.DistanceManager this$0 -> a
    391:393:void <init>(net.minecraft.server.level.DistanceManager) -> <init>
    397:404:int getLevelFromSource(long) -> b
    409:415:int getLevel(long) -> c
    420:429:void setLevel(long,int) -> a
    432:432:int runDistnaceUpdates(int) -> a
net.minecraft.server.level.DistanceManager$FixedPlayerDistanceChunkTracker -> ww$b:
    it.unimi.dsi.fastutil.longs.Long2ByteMap chunks -> a
    int maxDistance -> b
    net.minecraft.server.level.DistanceManager this$0 -> c
    258:265:void <init>(net.minecraft.server.level.DistanceManager,int) -> <init>
    269:269:int getLevel(long) -> c
    275:281:void setLevel(long,int) -> a
    284:284:void onLevelChange(long,int,int) -> a
    288:288:int getLevelFromSource(long) -> b
    292:293:boolean havePlayer(long) -> d
    297:298:void runAllUpdates() -> a
    302:315:void dumpChunks(java.lang.String) -> a
net.minecraft.server.level.DistanceManager$PlayerTicketTracker -> ww$c:
    int viewDistance -> e
    it.unimi.dsi.fastutil.longs.Long2IntMap queueLevels -> f
    it.unimi.dsi.fastutil.longs.LongSet toUpdate -> g
    net.minecraft.server.level.DistanceManager this$0 -> d
    320:327:void <init>(net.minecraft.server.level.DistanceManager,int) -> <init>
    331:332:void onLevelChange(long,int,int) -> a
    335:341:void updateViewDistance(int) -> a
    344:359:void onLevelChange(long,int,boolean,boolean) -> a
    363:383:void runAllUpdates() -> a
    386:386:boolean haveTicketFor(int) -> c
    372:377:void lambda$runAllUpdates$7(long,int) -> b
    371:371:int lambda$runAllUpdates$6(long) -> d
    356:356:void lambda$onLevelChange$5(long,net.minecraft.server.level.Ticket) -> a
    356:356:void lambda$null$4(long,net.minecraft.server.level.Ticket) -> b
    354:354:int lambda$onLevelChange$3(int) -> d
    347:347:void lambda$onLevelChange$2(long,net.minecraft.server.level.Ticket) -> c
    348:354:void lambda$null$1(long,net.minecraft.server.level.Ticket) -> d
    352:352:void lambda$null$0() -> d
net.minecraft.server.level.FeatureSimulator -> wx:
    net.minecraft.core.BlockPos$MutableBlockPos minPos -> a
    net.minecraft.core.BlockPos$MutableBlockPos maxPos -> b
    14:16:void <init>() -> <init>
    20:20:boolean isStateAtPosition(net.minecraft.core.BlockPos,java.util.function.Predicate) -> a
    25:25:boolean isFluidAtPosition(net.minecraft.core.BlockPos,java.util.function.Predicate) -> b
    30:32:boolean setBlock(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,int) -> a
    37:37:boolean removeBlock(net.minecraft.core.BlockPos,boolean) -> a
    42:42:boolean destroyBlock(net.minecraft.core.BlockPos,boolean,net.minecraft.world.entity.Entity) -> a
    46:46:net.minecraft.world.level.levelgen.structure.BoundingBox getBoundingBox() -> a
    51:51:java.lang.String toString() -> toString
    56:59:net.minecraft.core.BlockPos getHeightmapPos(net.minecraft.world.level.levelgen.Heightmap$Types,net.minecraft.core.BlockPos) -> a
net.minecraft.server.level.PlayerMap -> wy:
    it.unimi.dsi.fastutil.objects.Object2BooleanMap players -> a
    9:10:void <init>() -> <init>
    13:13:java.util.stream.Stream getPlayers(long) -> a
    17:18:void addPlayer(long,net.minecraft.server.level.ServerPlayer,boolean) -> a
    21:22:void removePlayer(long,net.minecraft.server.level.ServerPlayer) -> a
    25:26:void ignorePlayer(net.minecraft.server.level.ServerPlayer) -> a
    29:30:void unIgnorePlayer(net.minecraft.server.level.ServerPlayer) -> b
    33:33:boolean ignoredOrUnknown(net.minecraft.server.level.ServerPlayer) -> c
    37:37:boolean ignored(net.minecraft.server.level.ServerPlayer) -> d
    41:41:void updatePlayer(long,long,net.minecraft.server.level.ServerPlayer) -> a
net.minecraft.server.level.SectionTracker -> wz:
    9:10:void <init>(int,int,int) -> <init>
    14:14:boolean isSource(long) -> a
    19:30:void checkNeighborsAfterUpdate(long,int,boolean) -> a
    34:54:int getComputedLevel(long,long,int) -> a
    59:62:int computeLevelFromNeighbor(long,long,int) -> b
    int getLevelFromSource(long) -> b
    68:69:void update(long,int,boolean) -> b
net.minecraft.server.level.ServerBossEvent -> xa:
    java.util.Set players -> h
    java.util.Set unmodifiablePlayers -> i
    boolean visible -> j
    16:22:void <init>(net.minecraft.network.chat.Component,net.minecraft.world.BossEvent$BossBarColor,net.minecraft.world.BossEvent$BossBarOverlay) -> <init>
    26:30:void setPercent(float) -> a
    34:38:void setColor(net.minecraft.world.BossEvent$BossBarColor) -> a
    42:46:void setOverlay(net.minecraft.world.BossEvent$BossBarOverlay) -> a
    50:54:net.minecraft.world.BossEvent setDarkenScreen(boolean) -> a
    59:63:net.minecraft.world.BossEvent setPlayBossMusic(boolean) -> b
    68:72:net.minecraft.world.BossEvent setCreateWorldFog(boolean) -> c
    77:81:void setName(net.minecraft.network.chat.Component) -> a
    84:90:void broadcast(net.minecraft.network.protocol.game.ClientboundBossEventPacket$Operation) -> a
    93:96:void addPlayer(net.minecraft.server.level.ServerPlayer) -> a
    99:102:void removePlayer(net.minecraft.server.level.ServerPlayer) -> b
    105:110:void removeAllPlayers() -> b
    113:113:boolean isVisible() -> g
    117:124:void setVisible(boolean) -> d
    127:127:java.util.Collection getPlayers() -> h
net.minecraft.server.level.ServerChunkCache -> xb:
    int MAGIC_NUMBER -> b
    java.util.List CHUNK_STATUSES -> c
    net.minecraft.server.level.DistanceManager distanceManager -> d
    net.minecraft.world.level.chunk.ChunkGenerator generator -> e
    net.minecraft.server.level.ServerLevel level -> f
    java.lang.Thread mainThread -> g
    net.minecraft.server.level.ThreadedLevelLightEngine lightEngine -> h
    net.minecraft.server.level.ServerChunkCache$MainThreadExecutor mainThreadProcessor -> i
    net.minecraft.server.level.ChunkMap chunkMap -> a
    net.minecraft.world.level.storage.DimensionDataStorage dataStorage -> j
    long lastInhabitedUpdate -> k
    boolean spawnEnemies -> l
    boolean spawnFriendlies -> m
    long[] lastChunkPos -> n
    net.minecraft.world.level.chunk.ChunkStatus[] lastChunkStatus -> o
    net.minecraft.world.level.chunk.ChunkAccess[] lastChunk -> p
    67:91:void <init>(net.minecraft.server.level.ServerLevel,java.io.File,com.mojang.datafixers.DataFixer,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,java.util.concurrent.Executor,net.minecraft.world.level.chunk.ChunkGenerator,int,net.minecraft.server.level.progress.ChunkProgressListener,java.util.function.Supplier) -> <init>
    95:95:net.minecraft.server.level.ThreadedLevelLightEngine getLightEngine() -> a
    100:100:net.minecraft.server.level.ChunkHolder getVisibleChunkIfPresent(long) -> a
    104:104:int getTickingGenerated() -> b
    108:116:void storeInCache(long,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.chunk.ChunkStatus) -> a
    121:149:net.minecraft.world.level.chunk.ChunkAccess getChunk(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> a
    155:184:net.minecraft.world.level.chunk.LevelChunk getChunkNow(int,int) -> a
    188:191:void clearCache() -> m
    194:202:java.util.concurrent.CompletableFuture getChunkFuture(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> b
    209:234:java.util.concurrent.CompletableFuture getChunkFutureMainThread(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> c
    238:238:boolean chunkAbsent(net.minecraft.server.level.ChunkHolder,int) -> a
    243:246:boolean hasChunk(int,int) -> b
    252:269:net.minecraft.world.level.BlockGetter getChunkForLighting(int,int) -> c
    274:274:net.minecraft.world.level.Level getLevel() -> c
    278:278:boolean pollTask() -> d
    282:288:boolean runDistanceManagerUpdates() -> n
    293:294:boolean isEntityTickingChunk(net.minecraft.world.entity.Entity) -> a
    299:299:boolean isEntityTickingChunk(net.minecraft.world.level.ChunkPos) -> a
    304:305:boolean isTickingChunk(net.minecraft.core.BlockPos) -> a
    309:310:boolean isInAccessibleChunk(net.minecraft.world.entity.Entity) -> b
    314:319:boolean checkChunkFuture(long,java.util.function.Function) -> a
    323:325:void save(boolean) -> a
    329:332:void close() -> close
    336:345:void tick(java.util.function.BooleanSupplier) -> a
    348:423:void tickChunks() -> o
    427:427:java.lang.String gatherStats() -> e
    432:432:int getPendingTasksCount() -> f
    436:436:net.minecraft.world.level.chunk.ChunkGenerator getGenerator() -> g
    441:441:int getLoadedChunksCount() -> h
    445:451:void blockChanged(net.minecraft.core.BlockPos) -> b
    455:461:void onLightUpdate(net.minecraft.world.level.LightLayer,net.minecraft.core.SectionPos) -> a
    464:465:void addRegionTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkPos,int,java.lang.Object) -> a
    468:469:void removeRegionTicket(net.minecraft.server.level.TicketType,net.minecraft.world.level.ChunkPos,int,java.lang.Object) -> b
    473:474:void updateChunkForced(net.minecraft.world.level.ChunkPos,boolean) -> a
    479:480:void move(net.minecraft.server.level.ServerPlayer) -> a
    485:486:void removeEntity(net.minecraft.world.entity.Entity) -> c
    489:490:void addEntity(net.minecraft.world.entity.Entity) -> d
    493:494:void broadcastAndSend(net.minecraft.world.entity.Entity,net.minecraft.network.protocol.Packet) -> a
    497:498:void broadcast(net.minecraft.world.entity.Entity,net.minecraft.network.protocol.Packet) -> b
    501:502:void setViewDistance(int) -> a
    506:508:void setSpawnSettings(boolean,boolean) -> a
    511:511:java.lang.String getChunkDebugData(net.minecraft.world.level.ChunkPos) -> b
    515:515:net.minecraft.world.level.storage.DimensionDataStorage getDataStorage() -> i
    519:519:net.minecraft.world.entity.ai.village.poi.PoiManager getPoiManager() -> j
    47:47:net.minecraft.world.level.lighting.LevelLightEngine getLightEngine() -> k
    47:47:net.minecraft.world.level.BlockGetter getLevel() -> l
    456:460:void lambda$onLightUpdate$6(net.minecraft.core.SectionPos,net.minecraft.world.level.LightLayer) -> a
    372:411:void lambda$tickChunks$5(long,boolean,net.minecraft.world.entity.MobCategory[],boolean,int,it.unimi.dsi.fastutil.objects.Object2IntMap,net.minecraft.core.BlockPos,int,net.minecraft.server.level.ChunkHolder) -> a
    200:200:java.util.concurrent.CompletionStage lambda$getChunkFuture$4(java.util.concurrent.CompletableFuture) -> a
    200:200:java.util.concurrent.CompletableFuture lambda$getChunkFuture$3(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> d
    142:145:net.minecraft.world.level.chunk.ChunkAccess lambda$getChunk$2(boolean,net.minecraft.server.level.ChunkHolder$ChunkLoadingFailure) -> a
    141:141:net.minecraft.world.level.chunk.ChunkAccess lambda$getChunk$1(net.minecraft.world.level.chunk.ChunkAccess) -> a
    122:122:net.minecraft.world.level.chunk.ChunkAccess lambda$getChunk$0(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> e
    47:47:java.lang.Thread access$100(net.minecraft.server.level.ServerChunkCache) -> a
    47:47:net.minecraft.server.level.ServerLevel access$200(net.minecraft.server.level.ServerChunkCache) -> b
    47:47:boolean access$300(net.minecraft.server.level.ServerChunkCache) -> c
    47:47:net.minecraft.server.level.ThreadedLevelLightEngine access$400(net.minecraft.server.level.ServerChunkCache) -> d
    50:52:void <clinit>() -> <clinit>
net.minecraft.server.level.ServerChunkCache$1 -> xb$1:
net.minecraft.server.level.ServerChunkCache$MainThreadExecutor -> xb$a:
    net.minecraft.server.level.ServerChunkCache this$0 -> a
    523:525:void <init>(net.minecraft.server.level.ServerChunkCache,net.minecraft.world.level.Level) -> <init>
    529:529:java.lang.Runnable wrapRunnable(java.lang.Runnable) -> e
    534:534:boolean shouldRun(java.lang.Runnable) -> d
    540:540:boolean scheduleExecutables() -> ay
    545:545:java.lang.Thread getRunningThread() -> az
    550:552:void doRunTask(java.lang.Runnable) -> c
    556:560:boolean pollTask() -> w
    522:522:void <init>(net.minecraft.server.level.ServerChunkCache,net.minecraft.world.level.Level,net.minecraft.server.level.ServerChunkCache$1) -> <init>
net.minecraft.server.level.ServerEntity -> xc:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.server.level.ServerLevel level -> b
    net.minecraft.world.entity.Entity entity -> c
    int updateInterval -> d
    boolean trackDelta -> e
    java.util.function.Consumer broadcast -> f
    long xp -> g
    long yp -> h
    long zp -> i
    int yRotp -> j
    int xRotp -> k
    int yHeadRotp -> l
    net.minecraft.world.phys.Vec3 ap -> m
    int tickCount -> n
    int teleportDelay -> o
    java.util.List lastPassengers -> p
    boolean wasRiding -> q
    boolean wasOnGround -> r
    60:81:void <init>(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Entity,int,boolean,java.util.function.Consumer) -> <init>
    84:205:void sendChanges() -> a
    208:210:void removePairing(net.minecraft.server.level.ServerPlayer) -> a
    213:217:void addPairing(net.minecraft.server.level.ServerPlayer) -> b
    220:282:void sendPairingData(java.util.function.Consumer) -> a
    285:300:void sendDirtyEntityData() -> c
    303:306:void updateSentPos() -> d
    309:309:net.minecraft.world.phys.Vec3 sentPos() -> b
    313:317:void broadcastAndSend(net.minecraft.network.protocol.Packet) -> a
    42:42:void <clinit>() -> <clinit>
net.minecraft.server.level.ServerLevel -> xd:
    org.apache.logging.log4j.Logger LOGGER -> u
    java.util.List globalEntities -> v
    it.unimi.dsi.fastutil.ints.Int2ObjectMap entitiesById -> w
    java.util.Map entitiesByUuid -> x
    java.util.Queue toAddAfterTick -> y
    java.util.List players -> z
    boolean tickingEntities -> a
    net.minecraft.server.MinecraftServer server -> A
    net.minecraft.world.level.storage.LevelStorage levelStorage -> B
    boolean noSave -> b
    boolean allPlayersSleeping -> C
    int emptyTime -> D
    net.minecraft.world.level.PortalForcer portalForcer -> E
    net.minecraft.world.level.ServerTickList blockTicks -> F
    net.minecraft.world.level.ServerTickList liquidTicks -> G
    java.util.Set navigations -> H
    net.minecraft.world.entity.raid.Raids raids -> c
    it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet blockEvents -> I
    boolean handlingTick -> J
    net.minecraft.world.entity.npc.WanderingTraderSpawner wanderingTraderSpawner -> K
    143:192:void <init>(net.minecraft.server.MinecraftServer,java.util.concurrent.Executor,net.minecraft.world.level.storage.LevelStorage,net.minecraft.world.level.storage.LevelData,net.minecraft.world.level.dimension.DimensionType,net.minecraft.util.profiling.ProfilerFiller,net.minecraft.server.level.progress.ChunkProgressListener) -> <init>
    196:196:net.minecraft.world.level.biome.Biome getUncachedNoiseBiome(int,int,int) -> a
    200:421:void tick(java.util.function.BooleanSupplier) -> a
    425:428:void wakeUpAllPlayers() -> ab
    431:497:void tickChunk(net.minecraft.world.level.chunk.LevelChunk,int) -> a
    500:513:net.minecraft.core.BlockPos findLightingTargetAround(net.minecraft.core.BlockPos) -> a
    517:517:boolean isHandlingTick() -> b
    521:537:void updateSleepingPlayerList() -> i_
    541:541:net.minecraft.server.ServerScoreboard getScoreboard() -> j_
    545:549:void stopWeather() -> ac
    553:568:void validateSpawn() -> k_
    571:572:void resetEmptyTime() -> l_
    575:579:void tickLiquid(net.minecraft.world.level.TickNextTickData) -> a
    582:586:void tickBlock(net.minecraft.world.level.TickNextTickData) -> b
    589:613:void tickNonPassenger(net.minecraft.world.entity.Entity) -> a
    616:644:void tickPassenger(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> a
    647:664:void updateChunkPos(net.minecraft.world.entity.Entity) -> b
    668:668:boolean mayInteract(net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos) -> a
    672:728:void setInitialSpawn(net.minecraft.world.level.LevelSettings) -> a
    733:735:void generateBonusItemsNearSpawn() -> g
    739:739:net.minecraft.core.BlockPos getDimensionSpecificSpawn() -> h
    743:757:void save(net.minecraft.util.ProgressListener,boolean,boolean) -> a
    760:763:void saveLevelData() -> m_
    766:773:java.util.List getEntities(net.minecraft.world.entity.EntityType,java.util.function.Predicate) -> a
    777:783:java.util.List getDragons() -> j
    787:793:java.util.List getPlayers(java.util.function.Predicate) -> a
    798:802:net.minecraft.server.level.ServerPlayer getRandomPlayer() -> k
    806:823:it.unimi.dsi.fastutil.objects.Object2IntMap getMobCategoryCounts() -> l
    831:831:boolean addFreshEntity(net.minecraft.world.entity.Entity) -> c
    838:838:boolean addWithUUID(net.minecraft.world.entity.Entity) -> d
    846:851:void addFromAnotherDimension(net.minecraft.world.entity.Entity) -> e
    854:856:void addDuringCommandTeleport(net.minecraft.server.level.ServerPlayer) -> a
    859:861:void addDuringPortalTeleport(net.minecraft.server.level.ServerPlayer) -> b
    864:865:void addNewPlayer(net.minecraft.server.level.ServerPlayer) -> c
    868:869:void addRespawnedPlayer(net.minecraft.server.level.ServerPlayer) -> d
    872:886:void addPlayer(net.minecraft.server.level.ServerPlayer) -> f
    889:902:boolean addEntity(net.minecraft.world.entity.Entity) -> k
    909:913:boolean loadFromChunk(net.minecraft.world.entity.Entity) -> f
    917:922:boolean isUUIDUsed(net.minecraft.world.entity.Entity) -> l
    926:939:void unload(net.minecraft.world.level.chunk.LevelChunk) -> a
    942:957:void onEntityRemoved(net.minecraft.world.entity.Entity) -> g
    960:975:void add(net.minecraft.world.entity.Entity) -> m
    978:984:void despawn(net.minecraft.world.entity.Entity) -> h
    987:991:void removeFromChunk(net.minecraft.world.entity.Entity) -> n
    994:997:void removePlayerImmediately(net.minecraft.server.level.ServerPlayer) -> e
    1000:1002:void addGlobalEntity(net.minecraft.world.entity.global.LightningBolt) -> a
    1006:1018:void destroyBlockProgress(int,net.minecraft.core.BlockPos,int) -> a
    1022:1023:void playSound(net.minecraft.world.entity.player.Player,double,double,double,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,float,float) -> a
    1027:1028:void playSound(net.minecraft.world.entity.player.Player,net.minecraft.world.entity.Entity,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,float,float) -> a
    1032:1033:void globalLevelEvent(int,net.minecraft.core.BlockPos,int) -> b
    1037:1038:void levelEvent(net.minecraft.world.entity.player.Player,int,net.minecraft.core.BlockPos,int) -> a
    1042:1056:void sendBlockUpdated(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int) -> a
    1060:1061:void broadcastEntityEvent(net.minecraft.world.entity.Entity,byte) -> a
    1065:1065:net.minecraft.server.level.ServerChunkCache getChunkSource() -> m
    1072:1089:net.minecraft.world.level.Explosion explode(net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource,double,double,double,float,boolean,net.minecraft.world.level.Explosion$BlockInteraction) -> a
    1094:1095:void blockEvent(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,int,int) -> a
    1098:1104:void runBlockEvents() -> ad
    1107:1111:boolean doBlockEvent(net.minecraft.world.level.BlockEventData) -> a
    1116:1116:net.minecraft.world.level.ServerTickList getBlockTicks() -> n
    1121:1121:net.minecraft.world.level.ServerTickList getLiquidTicks() -> n_
    1127:1127:net.minecraft.server.MinecraftServer getServer() -> p
    1131:1131:net.minecraft.world.level.PortalForcer getPortalForcer() -> o_
    1135:1135:net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager getStructureManager() -> r
    1139:1150:int sendParticles(net.minecraft.core.particles.ParticleOptions,double,double,double,int,double,double,double,double) -> a
    1154:1156:boolean sendParticles(net.minecraft.server.level.ServerPlayer,net.minecraft.core.particles.ParticleOptions,boolean,double,double,double,int,double,double,double,double) -> a
    1160:1171:boolean sendParticles(net.minecraft.server.level.ServerPlayer,boolean,double,double,double,net.minecraft.network.protocol.Packet) -> a
    1177:1177:net.minecraft.world.entity.Entity getEntity(int) -> a
    1182:1182:net.minecraft.world.entity.Entity getEntity(java.util.UUID) -> a
    1187:1187:net.minecraft.core.BlockPos findNearestMapFeature(java.lang.String,net.minecraft.core.BlockPos,int,boolean) -> a
    1192:1192:net.minecraft.world.item.crafting.RecipeManager getRecipeManager() -> s
    1197:1197:net.minecraft.tags.TagManager getTagManager() -> t
    1202:1204:void setGameTime(long) -> a
    1208:1208:boolean noSave() -> u
    1213:1214:void checkSession() -> v
    1217:1217:net.minecraft.world.level.storage.LevelStorage getLevelStorage() -> w
    1221:1221:net.minecraft.world.level.storage.DimensionDataStorage getDataStorage() -> x
    1227:1227:net.minecraft.world.level.saveddata.maps.MapItemSavedData getMapData(java.lang.String) -> a
    1232:1233:void setMapData(net.minecraft.world.level.saveddata.maps.MapItemSavedData) -> a
    1237:1237:int getFreeMapId() -> y
    1242:1246:void setSpawnPos(net.minecraft.core.BlockPos) -> a_
    1249:1250:it.unimi.dsi.fastutil.longs.LongSet getForcedChunks() -> z
    1254:1271:boolean setChunkForced(int,int,boolean) -> a
    1276:1276:java.util.List players() -> A
    1281:1298:void onBlockStateChange(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState) -> a
    1301:1301:net.minecraft.world.entity.ai.village.poi.PoiManager getPoiManager() -> B
    1305:1305:boolean isVillage(net.minecraft.core.BlockPos) -> b_
    1309:1309:boolean isVillage(net.minecraft.core.SectionPos) -> a
    1313:1316:boolean closeToVillage(net.minecraft.core.BlockPos,int) -> a
    1320:1320:int sectionsToVillage(net.minecraft.core.SectionPos) -> b
    1324:1324:net.minecraft.world.entity.raid.Raids getRaids() -> C
    1332:1332:net.minecraft.world.entity.raid.Raid getRaidAt(net.minecraft.core.BlockPos) -> c_
    1336:1336:boolean isRaided(net.minecraft.core.BlockPos) -> e
    1340:1341:void onReputationEvent(net.minecraft.world.entity.ai.village.ReputationEventType,net.minecraft.world.entity.Entity,net.minecraft.world.entity.ReputationEventHandler) -> a
    1344:1384:void saveDebugReport(java.nio.file.Path) -> a
    1387:1412:void dumpEntities(java.io.Writer,java.lang.Iterable) -> a
    1415:1431:void dumpBlockEntities(java.io.Writer) -> a
    1435:1436:void clearBlockEvents(net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    139:139:net.minecraft.world.scores.Scoreboard getScoreboard() -> D
    139:139:net.minecraft.world.level.chunk.ChunkSource getChunkSource() -> E
    139:139:net.minecraft.world.level.TickList getLiquidTicks() -> F
    139:139:net.minecraft.world.level.TickList getBlockTicks() -> G
    1435:1435:boolean lambda$clearBlockEvents$16(net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.BlockEventData) -> a
    1294:1294:void lambda$onBlockStateChange$15(net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    1295:1297:void lambda$null$14(net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiType) -> b
    1289:1289:void lambda$onBlockStateChange$13(net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiType) -> c
    1290:1292:void lambda$null$12(net.minecraft.core.BlockPos) -> B
    1227:1227:net.minecraft.world.level.saveddata.maps.MapItemSavedData lambda$getMapData$11(java.lang.String) -> c
    631:631:java.lang.String lambda$tickPassenger$10(net.minecraft.world.entity.Entity) -> o
    600:600:java.lang.String lambda$tickNonPassenger$9(net.minecraft.world.entity.Entity) -> p
    503:503:boolean lambda$findLightingTargetAround$8(net.minecraft.world.entity.LivingEntity) -> a
    426:427:void lambda$wakeUpAllPlayers$7(net.minecraft.server.level.ServerPlayer) -> g
    358:360:void lambda$tick$6(net.minecraft.world.entity.Entity) -> q
    304:304:boolean lambda$tick$5(net.minecraft.server.level.ServerPlayer) -> h
    184:184:net.minecraft.world.entity.raid.Raids lambda$new$4() -> ae
    173:173:net.minecraft.world.level.chunk.ChunkSource lambda$new$3(net.minecraft.world.level.storage.LevelStorage,java.util.concurrent.Executor,net.minecraft.server.MinecraftServer,net.minecraft.server.level.progress.ChunkProgressListener,net.minecraft.world.level.Level,net.minecraft.world.level.dimension.Dimension) -> a
    173:173:net.minecraft.world.level.storage.DimensionDataStorage lambda$null$2(net.minecraft.server.MinecraftServer) -> a
    159:159:boolean lambda$new$1(net.minecraft.world.level.material.Fluid) -> a
    158:158:boolean lambda$new$0(net.minecraft.world.level.block.Block) -> a
    140:140:void <clinit>() -> <clinit>
net.minecraft.server.level.ServerPlayer -> xe:
    org.apache.logging.log4j.Logger LOGGER -> bR
    java.lang.String language -> bS
    net.minecraft.server.network.ServerGamePacketListenerImpl connection -> b
    net.minecraft.server.MinecraftServer server -> c
    net.minecraft.server.level.ServerPlayerGameMode gameMode -> d
    java.util.List entitiesToRemove -> bT
    net.minecraft.server.PlayerAdvancements advancements -> bU
    net.minecraft.stats.ServerStatsCounter stats -> bV
    float lastRecordedHealthAndAbsorption -> bW
    int lastRecordedFoodLevel -> bX
    int lastRecordedAirLevel -> bY
    int lastRecordedArmor -> bZ
    int lastRecordedLevel -> ca
    int lastRecordedExperience -> cb
    float lastSentHealth -> cc
    int lastSentFood -> cd
    boolean lastFoodSaturationZero -> ce
    int lastSentExp -> cf
    int spawnInvulnerableTime -> cg
    net.minecraft.world.entity.player.ChatVisiblity chatVisibility -> ch
    boolean canChatColor -> ci
    long lastActionTime -> cj
    net.minecraft.world.entity.Entity camera -> ck
    boolean isChangingDimension -> cl
    boolean seenCredits -> cm
    net.minecraft.stats.ServerRecipeBook recipeBook -> cn
    net.minecraft.world.phys.Vec3 levitationStartPos -> co
    int levitationStartTime -> cp
    boolean disconnected -> cq
    net.minecraft.world.phys.Vec3 enteredNetherPosition -> cr
    net.minecraft.core.SectionPos lastSectionPos -> cs
    int containerCounter -> ct
    boolean ignoreSlotUpdateHack -> e
    int latency -> f
    boolean wonGame -> g
    127:171:void <init>(net.minecraft.server.MinecraftServer,net.minecraft.server.level.ServerLevel,com.mojang.authlib.GameProfile,net.minecraft.server.level.ServerPlayerGameMode) -> <init>
    174:212:void fudgeSpawnLocation(net.minecraft.server.level.ServerLevel) -> a
    216:216:int getCoprime(int) -> u
    221:245:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    249:275:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    278:282:void setExperiencePoints(int) -> a
    285:287:void setExperienceLevels(int) -> b
    291:293:void giveExperienceLevels(int) -> c
    297:299:void onEnchantmentPerformed(net.minecraft.world.item.ItemStack,int) -> a
    302:303:void initMenu() -> u_
    307:310:void onEnterCombat() -> e
    314:317:void onLeaveCombat() -> f
    321:322:void onInsideBlock(net.minecraft.world.level.block.state.BlockState) -> a
    326:326:net.minecraft.world.item.ItemCooldowns createItemCooldowns() -> g
    331:381:void tick() -> h
    385:452:void doTick() -> i
    455:456:void updateScoreForCriteria(net.minecraft.world.scores.criteria.ObjectiveCriteria,int) -> a
    460:510:void die(net.minecraft.world.damagesource.DamageSource) -> a
    514:536:void awardKillScore(net.minecraft.world.entity.Entity,int,net.minecraft.world.damagesource.DamageSource) -> a
    539:546:void handleTeamKill(java.lang.String,java.lang.String,net.minecraft.world.scores.criteria.ObjectiveCriteria[]) -> a
    550:573:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    578:581:boolean canHarmPlayer(net.minecraft.world.entity.player.Player) -> a
    585:585:boolean isPvpAllowed() -> eC
    591:712:net.minecraft.world.entity.Entity changeDimension(net.minecraft.world.level.dimension.DimensionType) -> a
    716:726:void triggerDimensionChangeTriggers(net.minecraft.server.level.ServerLevel) -> b
    730:738:boolean broadcastToPlayer(net.minecraft.server.level.ServerPlayer) -> a
    742:748:void broadcast(net.minecraft.world.level.block.entity.BlockEntity) -> a
    752:754:void take(net.minecraft.world.entity.Entity,int) -> a
    758:758:com.mojang.datafixers.util.Either startSleepInBed(net.minecraft.core.BlockPos) -> a
    766:773:void stopSleepInBed(boolean,boolean) -> a
    777:788:boolean startRiding(net.minecraft.world.entity.Entity,boolean) -> a
    793:800:void stopRiding() -> j
    804:804:boolean isInvulnerableTo(net.minecraft.world.damagesource.DamageSource) -> b
    810:810:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    814:817:void onChangedBlock(net.minecraft.core.BlockPos) -> b
    820:826:void doCheckFallDamage(double,boolean) -> a
    830:832:void openTextEdit(net.minecraft.world.level.block.entity.SignBlockEntity) -> a
    840:841:void nextContainerCounter() -> eD
    845:865:java.util.OptionalInt openMenu(net.minecraft.world.MenuProvider) -> a
    870:871:void sendMerchantOffers(int,net.minecraft.world.item.trading.MerchantOffers,int,int,boolean,boolean) -> a
    875:882:void openHorseInventory(net.minecraft.world.entity.animal.horse.AbstractHorse,net.minecraft.world.Container) -> a
    886:897:void openItemGui(net.minecraft.world.item.ItemStack,net.minecraft.world.InteractionHand) -> a
    901:903:void openCommandBlock(net.minecraft.world.level.block.entity.CommandBlockEntity) -> a
    907:924:void slotChanged(net.minecraft.world.inventory.AbstractContainerMenu,int,net.minecraft.world.item.ItemStack) -> a
    927:928:void refreshContainer(net.minecraft.world.inventory.AbstractContainerMenu) -> a
    932:934:void refreshContainer(net.minecraft.world.inventory.AbstractContainerMenu,net.minecraft.core.NonNullList) -> a
    938:939:void setContainerData(net.minecraft.world.inventory.AbstractContainerMenu,int,int) -> a
    943:945:void closeContainer() -> v_
    948:956:void broadcastCarriedItem() -> l
    959:961:void doCloseContainer() -> m
    964:974:void setPlayerInput(float,float,boolean,boolean) -> a
    978:980:void awardStat(net.minecraft.stats.Stat,int) -> a
    984:986:void resetStat(net.minecraft.stats.Stat) -> a
    990:990:int awardRecipes(java.util.Collection) -> a
    995:1001:void awardRecipesByKey(net.minecraft.resources.ResourceLocation[]) -> a
    1005:1005:int resetRecipes(java.util.Collection) -> b
    1010:1012:void giveExperiencePoints(int) -> d
    1015:1020:void disconnect() -> n
    1023:1023:boolean hasDisconnected() -> o
    1027:1028:void resetSentInfo() -> p
    1032:1033:void displayClientMessage(net.minecraft.network.chat.Component,boolean) -> a
    1037:1041:void completeUsingItem() -> q
    1045:1047:void lookAt(net.minecraft.commands.arguments.EntityAnchorArgument$Anchor,net.minecraft.world.phys.Vec3) -> a
    1050:1053:void lookAt(net.minecraft.commands.arguments.EntityAnchorArgument$Anchor,net.minecraft.world.entity.Entity,net.minecraft.commands.arguments.EntityAnchorArgument$Anchor) -> a
    1056:1092:void restoreFrom(net.minecraft.server.level.ServerPlayer,boolean) -> a
    1096:1105:void onEffectAdded(net.minecraft.world.effect.MobEffectInstance) -> a
    1109:1113:void onEffectUpdated(net.minecraft.world.effect.MobEffectInstance,boolean) -> a
    1117:1125:void onEffectRemoved(net.minecraft.world.effect.MobEffectInstance) -> b
    1129:1130:void teleportTo(double,double,double) -> a
    1134:1136:void forceMove(double,double,double) -> b
    1140:1141:void crit(net.minecraft.world.entity.Entity) -> a
    1145:1146:void magicCrit(net.minecraft.world.entity.Entity) -> b
    1150:1155:void onUpdateAbilities() -> r
    1158:1158:net.minecraft.server.level.ServerLevel getLevel() -> s
    1163:1175:void setGameMode(net.minecraft.world.level.GameType) -> a
    1179:1179:boolean isSpectator() -> t
    1184:1184:boolean isCreative() -> u
    1189:1190:void sendMessage(net.minecraft.network.chat.Component) -> a
    1193:1202:void sendMessage(net.minecraft.network.chat.Component,net.minecraft.network.chat.ChatType) -> a
    1205:1208:java.lang.String getIpAddress() -> v
    1212:1219:void updateOptions(net.minecraft.network.protocol.game.ServerboundClientInformationPacket) -> a
    1222:1222:boolean canChatInColor() -> w
    1226:1226:net.minecraft.world.entity.player.ChatVisiblity getChatVisibility() -> x
    1230:1231:void sendTexturePack(java.lang.String,java.lang.String) -> a
    1235:1235:int getPermissionLevel() -> y
    1239:1240:void resetLastActionTime() -> z
    1243:1243:net.minecraft.stats.ServerStatsCounter getStats() -> A
    1247:1247:net.minecraft.stats.ServerRecipeBook getRecipeBook() -> B
    1251:1256:void sendRemoveEntity(net.minecraft.world.entity.Entity) -> c
    1259:1260:void cancelRemoveEntity(net.minecraft.world.entity.Entity) -> d
    1264:1270:void updateInvisibilityStatus() -> C
    1273:1273:net.minecraft.world.entity.Entity getCamera() -> D
    1277:1284:void setCamera(net.minecraft.world.entity.Entity) -> e
    1288:1291:void processDimensionDelay() -> E
    1295:1300:void attack(net.minecraft.world.entity.Entity) -> f
    1303:1303:long getLastActionTime() -> F
    1308:1308:net.minecraft.network.chat.Component getTabListDisplayName() -> G
    1313:1315:void swing(net.minecraft.world.InteractionHand) -> a
    1318:1318:boolean isChangingDimension() -> H
    1322:1323:void hasChangedDimension() -> I
    1326:1326:net.minecraft.server.PlayerAdvancements getAdvancements() -> J
    1330:1359:void teleportTo(net.minecraft.server.level.ServerLevel,double,double,double,float,float) -> a
    1365:1367:void trackChunk(net.minecraft.world.level.ChunkPos,net.minecraft.network.protocol.Packet,net.minecraft.network.protocol.Packet) -> a
    1371:1374:void untrackChunk(net.minecraft.world.level.ChunkPos) -> a
    1377:1377:net.minecraft.core.SectionPos getLastSectionPos() -> K
    1381:1382:void setLastSectionPos(net.minecraft.core.SectionPos) -> a
    1386:1387:void playNotifySound(net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,float,float) -> a
    1391:1391:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    1396:1410:net.minecraft.world.entity.item.ItemEntity drop(net.minecraft.world.item.ItemStack,boolean,boolean) -> a
    1194:1200:void lambda$sendMessage$5(net.minecraft.network.chat.ChatType,net.minecraft.network.chat.Component,io.netty.util.concurrent.Future) -> a
    979:979:void lambda$awardStat$4(int,net.minecraft.world.scores.Score) -> a
    759:761:void lambda$startSleepInBed$3(net.minecraft.util.Unit) -> a
    466:473:void lambda$die$2(net.minecraft.network.chat.Component,io.netty.util.concurrent.Future) -> a
    470:470:void lambda$null$1(net.minecraft.network.chat.Component,net.minecraft.network.chat.Style) -> a
    455:455:void lambda$updateScoreForCriteria$0(int,net.minecraft.world.scores.Score) -> b
    126:126:void <clinit>() -> <clinit>
net.minecraft.server.level.ServerPlayerGameMode -> xf:
    org.apache.logging.log4j.Logger LOGGER -> c
    net.minecraft.server.level.ServerLevel level -> a
    net.minecraft.server.level.ServerPlayer player -> b
    net.minecraft.world.level.GameType gameModeForPlayer -> d
    boolean isDestroyingBlock -> e
    int destroyProgressStart -> f
    net.minecraft.core.BlockPos destroyPos -> g
    int gameTicks -> h
    boolean hasDelayedDestroy -> i
    net.minecraft.core.BlockPos delayedDestroyPos -> j
    int delayedTickStart -> k
    int lastSentState -> l
    36:50:void <init>(net.minecraft.server.level.ServerLevel) -> <init>
    53:60:void setGameModeForPlayer(net.minecraft.world.level.GameType) -> a
    63:63:net.minecraft.world.level.GameType getGameModeForPlayer() -> b
    67:67:boolean isSurvival() -> c
    71:71:boolean isCreative() -> d
    75:79:void updateGameMode(net.minecraft.world.level.GameType) -> b
    82:107:void tick() -> a
    110:118:float incrementDestroyProgress(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,int) -> a
    123:214:void handleBlockBreakAction(net.minecraft.core.BlockPos,net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action,net.minecraft.core.Direction,int) -> a
    217:222:void destroyAndAck(net.minecraft.core.BlockPos,net.minecraft.network.protocol.game.ServerboundPlayerActionPacket$Action,java.lang.String) -> a
    225:265:boolean destroyBlock(net.minecraft.core.BlockPos) -> a
    269:302:net.minecraft.world.InteractionResult useItem(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.world.InteractionHand) -> a
    306:341:net.minecraft.world.InteractionResult useItemOn(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    345:346:void setLevel(net.minecraft.server.level.ServerLevel) -> a
    31:31:void <clinit>() -> <clinit>
net.minecraft.server.level.ThreadedLevelLightEngine -> xg:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.util.thread.ProcessorMailbox taskMailbox -> b
    it.unimi.dsi.fastutil.objects.ObjectList lightTasks -> c
    net.minecraft.server.level.ChunkMap chunkMap -> d
    net.minecraft.util.thread.ProcessorHandle sorterMailbox -> e
    int taskPerBatch -> f
    java.util.concurrent.atomic.AtomicBoolean scheduled -> g
    32:43:void <init>(net.minecraft.world.level.chunk.LightChunkGetter,net.minecraft.server.level.ChunkMap,boolean,net.minecraft.util.thread.ProcessorMailbox,net.minecraft.util.thread.ProcessorHandle) -> <init>
    47:47:void close() -> close
    51:51:int runUpdates(int,boolean,boolean) -> a
    56:56:void onBlockEmissionIncrease(net.minecraft.core.BlockPos,int) -> a
    61:63:void checkBlock(net.minecraft.core.BlockPos) -> a
    67:81:void updateChunkStatus(net.minecraft.world.level.ChunkPos) -> a
    86:87:void updateSectionStatus(net.minecraft.core.SectionPos,boolean) -> a
    91:92:void enableLightSources(net.minecraft.world.level.ChunkPos,boolean) -> a
    97:98:void queueSectionData(net.minecraft.world.level.LightLayer,net.minecraft.core.SectionPos,net.minecraft.world.level.chunk.DataLayer) -> a
    101:102:void addTask(int,int,net.minecraft.server.level.ThreadedLevelLightEngine$TaskType,java.lang.Runnable) -> a
    105:111:void addTask(int,int,java.util.function.IntSupplier,net.minecraft.server.level.ThreadedLevelLightEngine$TaskType,java.lang.Runnable) -> a
    115:116:void retainData(net.minecraft.world.level.ChunkPos,boolean) -> b
    119:142:java.util.concurrent.CompletableFuture lightChunk(net.minecraft.world.level.chunk.ChunkAccess,boolean) -> a
    153:159:void tryScheduleUpdate() -> B_
    162:187:void runUpdate() -> b
    190:191:void setTaskPerBatch(int) -> a
    155:157:void lambda$tryScheduleUpdate$22() -> c
    148:148:void lambda$lightChunk$21(net.minecraft.world.level.ChunkPos,java.lang.Runnable) -> a
    144:146:net.minecraft.world.level.chunk.ChunkAccess lambda$lightChunk$20(net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.ChunkPos) -> a
    141:141:java.lang.String lambda$lightChunk$19(net.minecraft.world.level.ChunkPos,boolean) -> c
    122:141:void lambda$lightChunk$18(net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.ChunkPos,boolean) -> a
    135:135:void lambda$null$17(net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.core.BlockPos) -> a
    115:115:java.lang.String lambda$retainData$16(net.minecraft.world.level.ChunkPos) -> b
    115:115:void lambda$retainData$15(net.minecraft.world.level.ChunkPos,boolean) -> d
    115:115:int lambda$retainData$14() -> d
    106:110:void lambda$addTask$13(net.minecraft.server.level.ThreadedLevelLightEngine$TaskType,java.lang.Runnable) -> a
    97:97:java.lang.String lambda$queueSectionData$12(net.minecraft.core.SectionPos) -> a
    97:97:void lambda$queueSectionData$11(net.minecraft.world.level.LightLayer,net.minecraft.core.SectionPos,net.minecraft.world.level.chunk.DataLayer) -> b
    97:97:int lambda$queueSectionData$10() -> e
    91:91:java.lang.String lambda$enableLightSources$9(net.minecraft.world.level.ChunkPos,boolean) -> e
    91:91:void lambda$enableLightSources$8(net.minecraft.world.level.ChunkPos,boolean) -> f
    86:86:java.lang.String lambda$updateSectionStatus$7(net.minecraft.core.SectionPos,boolean) -> b
    86:86:void lambda$updateSectionStatus$6(net.minecraft.core.SectionPos,boolean) -> c
    86:86:int lambda$updateSectionStatus$5() -> f
    80:80:java.lang.String lambda$updateChunkStatus$4(net.minecraft.world.level.ChunkPos) -> c
    69:80:void lambda$updateChunkStatus$3(net.minecraft.world.level.ChunkPos) -> d
    67:67:int lambda$updateChunkStatus$2() -> g
    62:62:java.lang.String lambda$checkBlock$1(net.minecraft.core.BlockPos) -> b
    62:62:void lambda$checkBlock$0(net.minecraft.core.BlockPos) -> c
    30:30:void <clinit>() -> <clinit>
net.minecraft.server.level.ThreadedLevelLightEngine$TaskType -> xg$a:
    net.minecraft.server.level.ThreadedLevelLightEngine$TaskType PRE_UPDATE -> a
    net.minecraft.server.level.ThreadedLevelLightEngine$TaskType POST_UPDATE -> b
    net.minecraft.server.level.ThreadedLevelLightEngine$TaskType[] $VALUES -> c
    193:193:net.minecraft.server.level.ThreadedLevelLightEngine$TaskType[] values() -> values
    193:193:net.minecraft.server.level.ThreadedLevelLightEngine$TaskType valueOf(java.lang.String) -> valueOf
    193:193:void <init>(java.lang.String,int) -> <init>
    193:194:void <clinit>() -> <clinit>
net.minecraft.server.level.Ticket -> xh:
    net.minecraft.server.level.TicketType type -> a
    int ticketLevel -> b
    java.lang.Object key -> c
    long createdTick -> d
    11:15:void <init>(net.minecraft.server.level.TicketType,int,java.lang.Object) -> <init>
    20:30:int compareTo(net.minecraft.server.level.Ticket) -> a
    35:42:boolean equals(java.lang.Object) -> equals
    47:47:int hashCode() -> hashCode
    52:52:java.lang.String toString() -> toString
    56:56:net.minecraft.server.level.TicketType getType() -> a
    60:60:int getTicketLevel() -> b
    65:66:void setCreatedTick(long) -> a
    70:71:boolean timedOut(long) -> b
    5:5:int compareTo(java.lang.Object) -> compareTo
net.minecraft.server.level.TicketType -> xi:
    java.lang.String name -> i
    java.util.Comparator comparator -> j
    long timeout -> k
    net.minecraft.server.level.TicketType START -> a
    net.minecraft.server.level.TicketType DRAGON -> b
    net.minecraft.server.level.TicketType PLAYER -> c
    net.minecraft.server.level.TicketType FORCED -> d
    net.minecraft.server.level.TicketType LIGHT -> e
    net.minecraft.server.level.TicketType PORTAL -> f
    net.minecraft.server.level.TicketType POST_TELEPORT -> g
    net.minecraft.server.level.TicketType UNKNOWN -> h
    25:25:net.minecraft.server.level.TicketType create(java.lang.String,java.util.Comparator) -> a
    29:29:net.minecraft.server.level.TicketType create(java.lang.String,java.util.Comparator,int) -> a
    32:36:void <init>(java.lang.String,java.util.Comparator,long) -> <init>
    40:40:java.lang.String toString() -> toString
    44:44:java.util.Comparator getComparator() -> a
    48:48:long timeout() -> b
    16:16:int lambda$static$1(net.minecraft.util.Unit,net.minecraft.util.Unit) -> a
    15:15:int lambda$static$0(net.minecraft.util.Unit,net.minecraft.util.Unit) -> b
    15:22:void <clinit>() -> <clinit>
net.minecraft.server.level.WorldGenRegion -> xj:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.List cache -> b
    int x -> c
    int z -> d
    int size -> e
    net.minecraft.server.level.ServerLevel level -> f
    long seed -> g
    int seaLevel -> h
    net.minecraft.world.level.storage.LevelData levelData -> i
    java.util.Random random -> j
    net.minecraft.world.level.dimension.Dimension dimension -> k
    net.minecraft.world.level.levelgen.ChunkGeneratorSettings settings -> l
    net.minecraft.world.level.TickList blockTicks -> m
    net.minecraft.world.level.TickList liquidTicks -> n
    net.minecraft.world.level.biome.BiomeManager biomeManager -> o
    60:83:void <init>(net.minecraft.server.level.ServerLevel,java.util.List) -> <init>
    86:86:int getCenterX() -> a
    90:90:int getCenterZ() -> b
    95:95:net.minecraft.world.level.chunk.ChunkAccess getChunk(int,int) -> a
    102:126:net.minecraft.world.level.chunk.ChunkAccess getChunk(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> a
    132:135:boolean hasChunk(int,int) -> b
    140:140:net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos) -> d_
    145:145:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos) -> b
    151:151:net.minecraft.world.entity.player.Player getNearestPlayer(double,double,double,double,java.util.function.Predicate) -> a
    156:156:int getSkyDarken() -> c
    161:161:net.minecraft.world.level.biome.BiomeManager getBiomeManager() -> d
    166:166:net.minecraft.world.level.biome.Biome getUncachedNoiseBiome(int,int,int) -> a
    171:171:net.minecraft.world.level.lighting.LevelLightEngine getLightEngine() -> e
    176:185:boolean destroyBlock(net.minecraft.core.BlockPos,boolean,net.minecraft.world.entity.Entity) -> a
    192:221:net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos) -> c
    226:255:boolean setBlock(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,int) -> a
    259:260:void markPosForPostprocessing(net.minecraft.core.BlockPos) -> e
    267:271:boolean addFreshEntity(net.minecraft.world.entity.Entity) -> c
    276:276:boolean removeBlock(net.minecraft.core.BlockPos,boolean) -> a
    281:281:net.minecraft.world.level.border.WorldBorder getWorldBorder() -> f
    286:286:boolean isClientSide() -> p_
    292:292:net.minecraft.server.level.ServerLevel getLevel() -> h
    297:297:net.minecraft.world.level.storage.LevelData getLevelData() -> i
    302:306:net.minecraft.world.DifficultyInstance getCurrentDifficultyAt(net.minecraft.core.BlockPos) -> d
    312:312:net.minecraft.server.MinecraftServer getServer() -> p
    317:317:net.minecraft.world.level.chunk.ChunkSource getChunkSource() -> E
    322:322:long getSeed() -> r_
    327:327:net.minecraft.world.level.TickList getBlockTicks() -> G
    332:332:net.minecraft.world.level.TickList getLiquidTicks() -> F
    337:337:int getSeaLevel() -> q_
    341:341:net.minecraft.world.level.levelgen.ChunkGeneratorSettings getSettings() -> l
    346:346:java.util.Random getRandom() -> t_
    352:352:void blockUpdated(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block) -> a
    356:356:int getHeight(net.minecraft.world.level.levelgen.Heightmap$Types,int,int) -> a
    361:361:void playSound(net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,float,float) -> a
    365:365:void addParticle(net.minecraft.core.particles.ParticleOptions,double,double,double,double,double,double) -> a
    369:369:void levelEvent(net.minecraft.world.entity.player.Player,int,net.minecraft.core.BlockPos,int) -> a
    373:373:net.minecraft.core.BlockPos getSharedSpawnPos() -> s_
    378:378:net.minecraft.world.level.dimension.Dimension getDimension() -> o
    383:383:boolean isStateAtPosition(net.minecraft.core.BlockPos,java.util.function.Predicate) -> a
    388:388:boolean isFluidAtPosition(net.minecraft.core.BlockPos,java.util.function.Predicate) -> b
    393:393:java.util.List getEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AABB,java.util.function.Predicate) -> a
    398:398:java.util.List getEntities(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.function.Predicate) -> a
    403:403:java.util.List players() -> A
    46:46:net.minecraft.world.level.Level getLevel() -> q
    61:61:net.minecraft.world.level.TickList lambda$new$1(net.minecraft.core.BlockPos) -> i
    60:60:net.minecraft.world.level.TickList lambda$new$0(net.minecraft.core.BlockPos) -> j
    47:47:void <clinit>() -> <clinit>
net.minecraft.server.level.WorldGenTickList -> xk:
    java.util.function.Function index -> a
    14:16:void <init>(java.util.function.Function) -> <init>
    20:20:boolean hasScheduledTick(net.minecraft.core.BlockPos,java.lang.Object) -> a
    25:26:void scheduleTick(net.minecraft.core.BlockPos,java.lang.Object,int,net.minecraft.world.level.TickPriority) -> a
    30:30:boolean willTickThisTick(net.minecraft.core.BlockPos,java.lang.Object) -> b
    35:36:void addAll(java.util.stream.Stream) -> a
    40:40:int size() -> a
    35:35:void lambda$addAll$0(net.minecraft.world.level.TickNextTickData) -> a
net.minecraft.server.level.package-info -> xl:
net.minecraft.server.level.progress.ChunkProgressListener -> xm:
    void updateSpawnPos(net.minecraft.world.level.ChunkPos) -> a
    void onStatusChange(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.ChunkStatus) -> a
    void start() -> a
    void stop() -> b
net.minecraft.server.level.progress.ChunkProgressListenerFactory -> xn:
    net.minecraft.server.level.progress.ChunkProgressListener create(int) -> create
net.minecraft.server.level.progress.LoggerChunkProgressListener -> xo:
    org.apache.logging.log4j.Logger LOGGER -> a
    int maxCount -> b
    int count -> c
    long startTime -> d
    long nextTickTime -> e
    19:24:void <init>(int) -> <init>
    28:30:void updateSpawnPos(net.minecraft.world.level.ChunkPos) -> a
    34:47:void onStatusChange(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.ChunkStatus) -> a
    51:51:void start() -> a
    55:57:void stop() -> b
    60:60:int getProgress() -> c
    15:15:void <clinit>() -> <clinit>
net.minecraft.server.level.progress.ProcessorChunkProgressListener -> xp:
    net.minecraft.server.level.progress.ChunkProgressListener delegate -> a
    net.minecraft.util.thread.ProcessorMailbox mailbox -> b
    14:17:void <init>(net.minecraft.server.level.progress.ChunkProgressListener,java.util.concurrent.Executor) -> <init>
    21:22:void updateSpawnPos(net.minecraft.world.level.ChunkPos) -> a
    26:27:void onStatusChange(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.ChunkStatus) -> a
    31:32:void start() -> a
    36:37:void stop() -> b
    26:26:void lambda$onStatusChange$1(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.ChunkStatus) -> b
    21:21:void lambda$updateSpawnPos$0(net.minecraft.world.level.ChunkPos) -> b
net.minecraft.server.level.progress.StoringChunkProgressListener -> xq:
    net.minecraft.server.level.progress.LoggerChunkProgressListener delegate -> a
    it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap statuses -> b
    net.minecraft.world.level.ChunkPos spawnPos -> c
    int fullDiameter -> d
    int radius -> e
    int diameter -> f
    boolean started -> g
    13:25:void <init>(int) -> <init>
    29:34:void updateSpawnPos(net.minecraft.world.level.ChunkPos) -> a
    38:47:void onStatusChange(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.ChunkStatus) -> a
    51:53:void start() -> a
    57:59:void stop() -> b
    62:62:int getFullDiameter() -> c
    66:66:int getDiameter() -> d
    70:70:int getProgress() -> e
    75:75:net.minecraft.world.level.chunk.ChunkStatus getStatus(int,int) -> a
net.minecraft.server.level.progress.package-info -> xr:
net.minecraft.server.network.LegacyQueryHandler -> xs:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.server.network.ServerConnectionListener serverConnectionListener -> b
    21:23:void <init>(net.minecraft.server.network.ServerConnectionListener) -> <init>
    27:97:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object) -> channelRead
    100:101:void sendFlushAndClose(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf) -> a
    104:113:io.netty.buffer.ByteBuf createReply(java.lang.String) -> a
    16:16:void <clinit>() -> <clinit>
net.minecraft.server.network.MemoryServerHandshakePacketListenerImpl -> xt:
    net.minecraft.server.MinecraftServer server -> a
    net.minecraft.network.Connection connection -> b
    13:16:void <init>(net.minecraft.server.MinecraftServer,net.minecraft.network.Connection) -> <init>
    20:22:void handleIntention(net.minecraft.network.protocol.handshake.ClientIntentionPacket) -> a
    27:27:void onDisconnect(net.minecraft.network.chat.Component) -> a
    31:31:net.minecraft.network.Connection getConnection() -> a
net.minecraft.server.network.ServerConnectionListener -> xu:
    org.apache.logging.log4j.Logger LOGGER -> d
    net.minecraft.util.LazyLoadedValue SERVER_EVENT_GROUP -> a
    net.minecraft.util.LazyLoadedValue SERVER_EPOLL_EVENT_GROUP -> b
    net.minecraft.server.MinecraftServer server -> e
    boolean running -> c
    java.util.List channels -> f
    java.util.List connections -> g
    63:69:void <init>(net.minecraft.server.MinecraftServer) -> <init>
    72:116:void startTcpServerListener(java.net.InetAddress,int) -> a
    121:144:java.net.SocketAddress startMemoryChannel() -> a
    148:157:void stop() -> b
    160:193:void tick() -> c
    196:196:net.minecraft.server.MinecraftServer getServer() -> d
    183:183:void lambda$tick$2(net.minecraft.network.Connection,net.minecraft.network.chat.Component,io.netty.util.concurrent.Future) -> a
    58:58:io.netty.channel.epoll.EpollEventLoopGroup lambda$static$1() -> e
    55:55:io.netty.channel.nio.NioEventLoopGroup lambda$static$0() -> f
    52:52:java.util.List access$000(net.minecraft.server.network.ServerConnectionListener) -> a
    52:52:net.minecraft.server.MinecraftServer access$100(net.minecraft.server.network.ServerConnectionListener) -> b
    53:57:void <clinit>() -> <clinit>
net.minecraft.server.network.ServerConnectionListener$1 -> xu$1:
    net.minecraft.server.network.ServerConnectionListener this$0 -> a
    87:87:void <init>(net.minecraft.server.network.ServerConnectionListener) -> <init>
    91:109:void initChannel(io.netty.channel.Channel) -> initChannel
net.minecraft.server.network.ServerConnectionListener$2 -> xu$2:
    net.minecraft.server.network.ServerConnectionListener this$0 -> a
    124:124:void <init>(net.minecraft.server.network.ServerConnectionListener) -> <init>
    127:134:void initChannel(io.netty.channel.Channel) -> initChannel
net.minecraft.server.network.ServerConnectionListener$LatencySimulator -> xu$a:
    io.netty.util.Timer TIMER -> a
    int delay -> b
    204:206:void <init>(int) -> <init>
    210:211:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object) -> channelRead
    214:215:void delayDownstream(io.netty.channel.ChannelHandlerContext,java.lang.Object) -> a
    214:214:void lambda$delayDownstream$0(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.util.Timeout) -> a
    200:200:void <clinit>() -> <clinit>
net.minecraft.server.network.ServerGamePacketListenerImpl -> xv:
    org.apache.logging.log4j.Logger LOGGER -> c
    net.minecraft.network.Connection connection -> a
    net.minecraft.server.MinecraftServer server -> d
    net.minecraft.server.level.ServerPlayer player -> b
    int tickCount -> e
    long keepAliveTime -> f
    boolean keepAlivePending -> g
    long keepAliveChallenge -> h
    int chatSpamTickCount -> i
    int dropSpamTickCount -> j
    it.unimi.dsi.fastutil.ints.Int2ShortMap expectedAcks -> k
    double firstGoodX -> l
    double firstGoodY -> m
    double firstGoodZ -> n
    double lastGoodX -> o
    double lastGoodY -> p
    double lastGoodZ -> q
    net.minecraft.world.entity.Entity lastVehicle -> r
    double vehicleFirstGoodX -> s
    double vehicleFirstGoodY -> t
    double vehicleFirstGoodZ -> u
    double vehicleLastGoodX -> v
    double vehicleLastGoodY -> w
    double vehicleLastGoodZ -> x
    net.minecraft.world.phys.Vec3 awaitingPositionFromClient -> y
    int awaitingTeleport -> z
    int awaitingTeleportTime -> A
    boolean clientIsFloating -> B
    int aboveGroundTickCount -> C
    boolean clientVehicleIsFloating -> D
    int aboveGroundVehicleTickCount -> E
    int receivedMovePacketCount -> F
    int knownMovePacketCount -> G
    161:191:void <init>(net.minecraft.server.MinecraftServer,net.minecraft.network.Connection,net.minecraft.server.level.ServerPlayer) -> <init>
    194:262:void tick() -> b
    265:271:void resetPosition() -> c
    275:275:net.minecraft.network.Connection getConnection() -> a
    279:279:boolean isSingleplayerOwner() -> d
    283:286:void disconnect(net.minecraft.network.chat.Component) -> b
    290:292:void handlePlayerInput(net.minecraft.network.protocol.game.ServerboundPlayerInputPacket) -> a
    295:301:boolean containsInvalidValues(net.minecraft.network.protocol.game.ServerboundMovePlayerPacket) -> b
    305:305:boolean containsInvalidValues(net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket) -> b
    310:383:void handleMoveVehicle(net.minecraft.network.protocol.game.ServerboundMoveVehiclePacket) -> a
    387:400:void handleAcceptTeleportPacket(net.minecraft.network.protocol.game.ServerboundAcceptTeleportationPacket) -> a
    404:417:void handleRecipeBookUpdatePacket(net.minecraft.network.protocol.game.ServerboundRecipeBookUpdatePacket) -> a
    421:429:void handleSeenAdvancements(net.minecraft.network.protocol.game.ServerboundSeenAdvancementsPacket) -> a
    433:440:void handleCustomCommandSuggestions(net.minecraft.network.protocol.game.ServerboundCommandSuggestionPacket) -> a
    444:502:void handleSetCommandBlock(net.minecraft.network.protocol.game.ServerboundSetCommandBlockPacket) -> a
    506:526:void handleSetCommandMinecart(net.minecraft.network.protocol.game.ServerboundSetCommandMinecartPacket) -> a
    530:535:void handlePickItem(net.minecraft.network.protocol.game.ServerboundPickItemPacket) -> a
    539:547:void handleRenameItem(net.minecraft.network.protocol.game.ServerboundRenameItemPacket) -> a
    551:555:void handleSetBeaconPacket(net.minecraft.network.protocol.game.ServerboundSetBeaconPacket) -> a
    559:612:void handleSetStructureBlock(net.minecraft.network.protocol.game.ServerboundSetStructureBlockPacket) -> a
    616:631:void handleSetJigsawBlock(net.minecraft.network.protocol.game.ServerboundSetJigsawBlockPacket) -> a
    635:643:void handleSelectTrade(net.minecraft.network.protocol.game.ServerboundSelectTradePacket) -> a
    647:682:void handleEditBook(net.minecraft.network.protocol.game.ServerboundEditBookPacket) -> a
    686:697:void handleEntityTagQuery(net.minecraft.network.protocol.game.ServerboundEntityTagQuery) -> a
    701:710:void handleBlockEntityTagQuery(net.minecraft.network.protocol.game.ServerboundBlockEntityTagQuery) -> a
    714:854:void handleMovePlayer(net.minecraft.network.protocol.game.ServerboundMovePlayerPacket) -> a
    857:857:boolean isPlayerCollidingWithAnything(net.minecraft.world.level.LevelReader) -> a
    861:862:void teleport(double,double,double,float,float) -> a
    865:878:void teleport(double,double,double,float,float,java.util.Set) -> a
    882:915:void handlePlayerAction(net.minecraft.network.protocol.game.ServerboundPlayerActionPacket) -> a
    921:951:void handleUseItemOn(net.minecraft.network.protocol.game.ServerboundUseItemOnPacket) -> a
    955:967:void handleUseItem(net.minecraft.network.protocol.game.ServerboundUseItemPacket) -> a
    971:982:void handleTeleportToEntityPacket(net.minecraft.network.protocol.game.ServerboundTeleportToEntityPacket) -> a
    986:986:void handleResourcePackResponse(net.minecraft.network.protocol.game.ServerboundResourcePackPacket) -> a
    990:995:void handlePaddleBoat(net.minecraft.network.protocol.game.ServerboundPaddleBoatPacket) -> a
    999:1009:void onDisconnect(net.minecraft.network.chat.Component) -> a
    1012:1013:void send(net.minecraft.network.protocol.Packet) -> a
    1016:1038:void send(net.minecraft.network.protocol.Packet,io.netty.util.concurrent.GenericFutureListener) -> a
    1042:1049:void handleSetCarriedItem(net.minecraft.network.protocol.game.ServerboundSetCarriedItemPacket) -> a
    1053:1080:void handleChat(net.minecraft.network.protocol.game.ServerboundChatPacket) -> a
    1083:1084:void handleCommand(java.lang.String) -> c
    1088:1091:void handleAnimate(net.minecraft.network.protocol.game.ServerboundSwingPacket) -> a
    1095:1146:void handlePlayerCommand(net.minecraft.network.protocol.game.ServerboundPlayerCommandPacket) -> a
    1150:1151:void info(java.lang.String) -> a
    1155:1156:void warn(java.lang.String) -> b
    1160:1193:void handleInteract(net.minecraft.network.protocol.game.ServerboundInteractPacket) -> a
    1197:1221:void handleClientCommand(net.minecraft.network.protocol.game.ServerboundClientCommandPacket) -> a
    1225:1227:void handleContainerClose(net.minecraft.network.protocol.game.ServerboundContainerClosePacket) -> a
    1231:1265:void handleContainerClick(net.minecraft.network.protocol.game.ServerboundContainerClickPacket) -> a
    1269:1277:void handlePlaceRecipe(net.minecraft.network.protocol.game.ServerboundPlaceRecipePacket) -> a
    1281:1287:void handleContainerButtonClick(net.minecraft.network.protocol.game.ServerboundContainerButtonClickPacket) -> a
    1291:1330:void handleSetCreativeModeSlot(net.minecraft.network.protocol.game.ServerboundSetCreativeModeSlotPacket) -> a
    1334:1339:void handleContainerAck(net.minecraft.network.protocol.game.ServerboundContainerAckPacket) -> a
    1343:1369:void handleSignUpdate(net.minecraft.network.protocol.game.ServerboundSignUpdatePacket) -> a
    1373:1382:void handleKeepAlive(net.minecraft.network.protocol.game.ServerboundKeepAlivePacket) -> a
    1386:1388:void handlePlayerAbilities(net.minecraft.network.protocol.game.ServerboundPlayerAbilitiesPacket) -> a
    1392:1394:void handleClientInformation(net.minecraft.network.protocol.game.ServerboundClientInformationPacket) -> a
    1398:1398:void handleCustomPayload(net.minecraft.network.protocol.game.ServerboundCustomPayloadPacket) -> a
    1402:1409:void handleChangeDifficulty(net.minecraft.network.protocol.game.ServerboundChangeDifficultyPacket) -> a
    1413:1420:void handleLockDifficulty(net.minecraft.network.protocol.game.ServerboundLockDifficultyPacket) -> a
    1276:1276:void lambda$handlePlaceRecipe$3(net.minecraft.network.protocol.game.ServerboundPlaceRecipePacket,net.minecraft.world.item.crafting.Recipe) -> a
    1034:1034:java.lang.String lambda$send$2(net.minecraft.network.protocol.Packet) -> b
    439:439:void lambda$handleCustomCommandSuggestions$1(net.minecraft.network.protocol.game.ServerboundCommandSuggestionPacket,com.mojang.brigadier.suggestion.Suggestions) -> a
    283:283:void lambda$disconnect$0(net.minecraft.network.chat.Component,io.netty.util.concurrent.Future) -> a
    147:147:void <clinit>() -> <clinit>
net.minecraft.server.network.ServerGamePacketListenerImpl$1 -> xv$1:
    int[] $SwitchMap$net$minecraft$world$level$block$entity$CommandBlockEntity$Mode -> a
    int[] $SwitchMap$net$minecraft$network$protocol$game$ServerboundPlayerActionPacket$Action -> b
    int[] $SwitchMap$net$minecraft$network$protocol$game$ServerboundPlayerCommandPacket$Action -> c
    int[] $SwitchMap$net$minecraft$network$protocol$game$ServerboundClientCommandPacket$Action -> d
    470:1200:void <clinit>() -> <clinit>
net.minecraft.server.network.ServerHandshakePacketListenerImpl -> xw:
    net.minecraft.server.MinecraftServer server -> a
    net.minecraft.network.Connection connection -> b
    17:20:void <init>(net.minecraft.server.MinecraftServer,net.minecraft.network.Connection) -> <init>
    24:47:void handleIntention(net.minecraft.network.protocol.handshake.ClientIntentionPacket) -> a
    52:52:void onDisconnect(net.minecraft.network.chat.Component) -> a
    56:56:net.minecraft.network.Connection getConnection() -> a
net.minecraft.server.network.ServerHandshakePacketListenerImpl$1 -> xw$1:
    int[] $SwitchMap$net$minecraft$network$ConnectionProtocol -> a
    24:24:void <clinit>() -> <clinit>
net.minecraft.server.network.ServerLoginPacketListenerImpl -> xx:
    java.util.concurrent.atomic.AtomicInteger UNIQUE_THREAD_ID -> b
    org.apache.logging.log4j.Logger LOGGER -> c
    java.util.Random RANDOM -> d
    byte[] nonce -> e
    net.minecraft.server.MinecraftServer server -> f
    net.minecraft.network.Connection connection -> a
    net.minecraft.server.network.ServerLoginPacketListenerImpl$State state -> g
    int tick -> h
    com.mojang.authlib.GameProfile gameProfile -> i
    java.lang.String serverId -> j
    javax.crypto.SecretKey secretKey -> k
    net.minecraft.server.level.ServerPlayer delayedAcceptPlayer -> l
    45:59:void <init>(net.minecraft.server.MinecraftServer,net.minecraft.network.Connection) -> <init>
    62:75:void tick() -> b
    79:79:net.minecraft.network.Connection getConnection() -> a
    84:90:void disconnect(net.minecraft.network.chat.Component) -> b
    93:114:void handleAcceptedLogin() -> c
    118:119:void onDisconnect(net.minecraft.network.chat.Component) -> a
    122:125:java.lang.String getUserName() -> d
    130:139:void handleHello(net.minecraft.network.protocol.login.ServerboundHelloPacket) -> a
    143:195:void handleKey(net.minecraft.network.protocol.login.ServerboundKeyPacket) -> a
    199:200:void handleCustomQueryPacket(net.minecraft.network.protocol.login.ServerboundCustomQueryPacket) -> a
    203:204:com.mojang.authlib.GameProfile createFakeProfile(com.mojang.authlib.GameProfile) -> a
    103:103:void lambda$handleAcceptedLogin$0(io.netty.channel.ChannelFuture) -> a
    39:39:com.mojang.authlib.GameProfile access$000(net.minecraft.server.network.ServerLoginPacketListenerImpl) -> a
    39:39:net.minecraft.server.MinecraftServer access$100(net.minecraft.server.network.ServerLoginPacketListenerImpl) -> b
    39:39:javax.crypto.SecretKey access$200(net.minecraft.server.network.ServerLoginPacketListenerImpl) -> c
    39:39:com.mojang.authlib.GameProfile access$002(net.minecraft.server.network.ServerLoginPacketListenerImpl,com.mojang.authlib.GameProfile) -> a
    39:39:org.apache.logging.log4j.Logger access$300() -> e
    39:39:net.minecraft.server.network.ServerLoginPacketListenerImpl$State access$402(net.minecraft.server.network.ServerLoginPacketListenerImpl,net.minecraft.server.network.ServerLoginPacketListenerImpl$State) -> a
    40:43:void <clinit>() -> <clinit>
net.minecraft.server.network.ServerLoginPacketListenerImpl$1 -> xx$1:
    net.minecraft.server.network.ServerLoginPacketListenerImpl this$0 -> a
    155:155:void <init>(net.minecraft.server.network.ServerLoginPacketListenerImpl,java.lang.String) -> <init>
    158:185:void run() -> run
    189:190:java.net.InetAddress getAddress() -> a
net.minecraft.server.network.ServerLoginPacketListenerImpl$State -> xx$a:
    net.minecraft.server.network.ServerLoginPacketListenerImpl$State HELLO -> a
    net.minecraft.server.network.ServerLoginPacketListenerImpl$State KEY -> b
    net.minecraft.server.network.ServerLoginPacketListenerImpl$State AUTHENTICATING -> c
    net.minecraft.server.network.ServerLoginPacketListenerImpl$State NEGOTIATING -> d
    net.minecraft.server.network.ServerLoginPacketListenerImpl$State READY_TO_ACCEPT -> e
    net.minecraft.server.network.ServerLoginPacketListenerImpl$State DELAY_ACCEPT -> f
    net.minecraft.server.network.ServerLoginPacketListenerImpl$State ACCEPTED -> g
    net.minecraft.server.network.ServerLoginPacketListenerImpl$State[] $VALUES -> h
    207:207:net.minecraft.server.network.ServerLoginPacketListenerImpl$State[] values() -> values
    207:207:net.minecraft.server.network.ServerLoginPacketListenerImpl$State valueOf(java.lang.String) -> valueOf
    207:207:void <init>(java.lang.String,int) -> <init>
    207:208:void <clinit>() -> <clinit>
net.minecraft.server.network.ServerStatusPacketListenerImpl -> xy:
    net.minecraft.network.chat.Component DISCONNECT_REASON -> a
    net.minecraft.server.MinecraftServer server -> b
    net.minecraft.network.Connection connection -> c
    boolean hasRequestedStatus -> d
    20:23:void <init>(net.minecraft.server.MinecraftServer,net.minecraft.network.Connection) -> <init>
    28:28:void onDisconnect(net.minecraft.network.chat.Component) -> a
    32:32:net.minecraft.network.Connection getConnection() -> a
    37:43:void handleStatusRequest(net.minecraft.network.protocol.status.ServerboundStatusRequestPacket) -> a
    47:49:void handlePingRequest(net.minecraft.network.protocol.status.ServerboundPingRequestPacket) -> a
    14:14:void <clinit>() -> <clinit>
net.minecraft.server.network.package-info -> xz:
net.minecraft.server.package-info -> ya:
net.minecraft.server.packs.AbstractResourcePack -> yb:
    org.apache.logging.log4j.Logger LOGGER -> b
    java.io.File file -> a
    24:26:void <init>(java.io.File) -> <init>
    29:29:java.lang.String getPathFromLocation(net.minecraft.server.packs.PackType,net.minecraft.resources.ResourceLocation) -> c
    33:33:java.lang.String getRelativePath(java.io.File,java.io.File) -> a
    38:38:java.io.InputStream getResource(net.minecraft.server.packs.PackType,net.minecraft.resources.ResourceLocation) -> a
    43:43:boolean hasResource(net.minecraft.server.packs.PackType,net.minecraft.resources.ResourceLocation) -> b
    java.io.InputStream getResource(java.lang.String) -> a
    50:53:java.io.InputStream getRootResource(java.lang.String) -> b
    boolean hasResource(java.lang.String) -> c
    59:60:void logWarning(java.lang.String) -> d
    65:67:java.lang.Object getMetadataSection(net.minecraft.server.packs.metadata.MetadataSectionSerializer) -> a
    73:87:java.lang.Object getMetadataFromStream(net.minecraft.server.packs.metadata.MetadataSectionSerializer,java.io.InputStream) -> a
    93:93:java.lang.String getName() -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.server.packs.FileResourcePack -> yc:
    com.google.common.base.Splitter SPLITTER -> b
    java.util.zip.ZipFile zipFile -> c
    27:28:void <init>(java.io.File) -> <init>
    31:35:java.util.zip.ZipFile getOrCreateZipFile() -> b
    40:47:java.io.InputStream getResource(java.lang.String) -> a
    53:55:boolean hasResource(java.lang.String) -> c
    63:89:java.util.Set getNamespaces(net.minecraft.server.packs.PackType) -> a
    95:97:void finalize() -> finalize
    101:105:void close() -> close
    111:138:java.util.Collection getResources(net.minecraft.server.packs.PackType,java.lang.String,java.lang.String,int,java.util.function.Predicate) -> a
    23:23:void <clinit>() -> <clinit>
net.minecraft.server.packs.FolderResourcePack -> yd:
    org.apache.logging.log4j.Logger LOGGER -> b
    boolean ON_WINDOWS -> c
    com.google.common.base.CharMatcher BACKSLASH_MATCHER -> d
    32:33:void <init>(java.io.File) -> <init>
    36:42:boolean validatePath(java.io.File,java.lang.String) -> a
    47:52:java.io.InputStream getResource(java.lang.String) -> a
    57:57:boolean hasResource(java.lang.String) -> c
    63:69:java.io.File getFile(java.lang.String) -> e
    74:90:java.util.Set getNamespaces(net.minecraft.server.packs.PackType) -> a
    95:95:void close() -> close
    99:102:java.util.Collection getResources(net.minecraft.server.packs.PackType,java.lang.String,java.lang.String,int,java.util.function.Predicate) -> a
    106:124:void listResources(java.io.File,int,java.lang.String,java.util.List,java.lang.String,java.util.function.Predicate) -> a
    26:29:void <clinit>() -> <clinit>
net.minecraft.server.packs.Pack -> ye:
    java.io.InputStream getRootResource(java.lang.String) -> b
    java.io.InputStream getResource(net.minecraft.server.packs.PackType,net.minecraft.resources.ResourceLocation) -> a
    java.util.Collection getResources(net.minecraft.server.packs.PackType,java.lang.String,java.lang.String,int,java.util.function.Predicate) -> a
    boolean hasResource(net.minecraft.server.packs.PackType,net.minecraft.resources.ResourceLocation) -> b
    java.util.Set getNamespaces(net.minecraft.server.packs.PackType) -> a
    java.lang.Object getMetadataSection(net.minecraft.server.packs.metadata.MetadataSectionSerializer) -> a
    java.lang.String getName() -> a
net.minecraft.server.packs.PackType -> yf:
    net.minecraft.server.packs.PackType CLIENT_RESOURCES -> a
    net.minecraft.server.packs.PackType SERVER_DATA -> b
    java.lang.String directory -> c
    net.minecraft.server.packs.PackType[] $VALUES -> d
    3:3:net.minecraft.server.packs.PackType[] values() -> values
    3:3:net.minecraft.server.packs.PackType valueOf(java.lang.String) -> valueOf
    10:12:void <init>(java.lang.String,int,java.lang.String) -> <init>
    15:15:java.lang.String getDirectory() -> a
    3:5:void <clinit>() -> <clinit>
net.minecraft.server.packs.ResourcePackFileNotFoundException -> yg:
    8:9:void <init>(java.io.File,java.lang.String) -> <init>
net.minecraft.server.packs.VanillaPack -> yh:
    java.nio.file.Path generatedDir -> a
    org.apache.logging.log4j.Logger LOGGER -> d
    java.lang.Class clientObject -> b
    java.util.Map JAR_FILESYSTEM_BY_TYPE -> e
    java.util.Set namespaces -> c
    65:67:void <init>(java.lang.String[]) -> <init>
    71:80:java.io.InputStream getRootResource(java.lang.String) -> b
    85:89:java.io.InputStream getResource(net.minecraft.server.packs.PackType,net.minecraft.resources.ResourceLocation) -> a
    94:143:java.util.Collection getResources(net.minecraft.server.packs.PackType,java.lang.String,java.lang.String,int,java.util.function.Predicate) -> a
    147:154:void getResources(java.util.Collection,int,java.lang.String,java.nio.file.Path,java.lang.String,java.util.function.Predicate) -> a
    158:179:java.io.InputStream getResourceAsStream(net.minecraft.server.packs.PackType,net.minecraft.resources.ResourceLocation) -> c
    183:183:java.lang.String createPath(net.minecraft.server.packs.PackType,net.minecraft.resources.ResourceLocation) -> d
    187:187:boolean isResourceUrlValid(java.lang.String,java.net.URL) -> a
    192:192:java.io.InputStream getResourceAsStream(java.lang.String) -> a
    197:212:boolean hasResource(net.minecraft.server.packs.PackType,net.minecraft.resources.ResourceLocation) -> b
    217:217:java.util.Set getNamespaces(net.minecraft.server.packs.PackType) -> a
    223:226:java.lang.Object getMetadataSection(net.minecraft.server.packs.metadata.MetadataSectionSerializer) -> a
    232:232:java.lang.String getName() -> a
    237:237:void close() -> close
    151:151:net.minecraft.resources.ResourceLocation lambda$getResources$2(java.lang.String,java.nio.file.Path,java.nio.file.Path) -> a
    150:150:boolean lambda$getResources$1(java.util.function.Predicate,java.nio.file.Path) -> a
    42:61:void lambda$static$0(java.util.HashMap) -> a
    38:41:void <clinit>() -> <clinit>
net.minecraft.server.packs.metadata.MetadataSectionSerializer -> yi:
    java.lang.String getMetadataSectionName() -> a
    java.lang.Object fromJson(com.google.gson.JsonObject) -> a
net.minecraft.server.packs.metadata.pack.PackMetadataSection -> yj:
    net.minecraft.server.packs.metadata.pack.PackMetadataSectionSerializer SERIALIZER -> a
    net.minecraft.network.chat.Component description -> b
    int packFormat -> c
    11:14:void <init>(net.minecraft.network.chat.Component,int) -> <init>
    17:17:net.minecraft.network.chat.Component getDescription() -> a
    21:21:int getPackFormat() -> b
    6:6:void <clinit>() -> <clinit>
net.minecraft.server.packs.metadata.pack.PackMetadataSectionSerializer -> yk:
    9:9:void <init>() -> <init>
    12:17:net.minecraft.server.packs.metadata.pack.PackMetadataSection fromJson(com.google.gson.JsonObject) -> b
    22:22:java.lang.String getMetadataSectionName() -> a
    9:9:java.lang.Object fromJson(com.google.gson.JsonObject) -> a
net.minecraft.server.packs.metadata.pack.package-info -> yl:
net.minecraft.server.packs.metadata.package-info -> ym:
net.minecraft.server.packs.package-info -> yn:
net.minecraft.server.packs.repository.FolderRepositorySource -> yo:
    java.io.FileFilter RESOURCEPACK_FILTER -> a
    java.io.File folder -> b
    22:24:void <init>(java.io.File) -> <init>
    28:43:void loadPacks(java.util.Map,net.minecraft.server.packs.repository.UnopenedPack$UnopenedPackConstructor) -> a
    46:49:java.util.function.Supplier createSupplier(java.io.File) -> a
    49:49:net.minecraft.server.packs.Pack lambda$createSupplier$2(java.io.File) -> b
    47:47:net.minecraft.server.packs.Pack lambda$createSupplier$1(java.io.File) -> c
    14:17:boolean lambda$static$0(java.io.File) -> d
    13:13:void <clinit>() -> <clinit>
net.minecraft.server.packs.repository.PackCompatibility -> yp:
    net.minecraft.server.packs.repository.PackCompatibility TOO_OLD -> a
    net.minecraft.server.packs.repository.PackCompatibility TOO_NEW -> b
    net.minecraft.server.packs.repository.PackCompatibility COMPATIBLE -> c
    net.minecraft.network.chat.Component description -> d
    net.minecraft.network.chat.Component confirmation -> e
    net.minecraft.server.packs.repository.PackCompatibility[] $VALUES -> f
    7:7:net.minecraft.server.packs.repository.PackCompatibility[] values() -> values
    7:7:net.minecraft.server.packs.repository.PackCompatibility valueOf(java.lang.String) -> valueOf
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean isCompatible() -> a
    26:31:net.minecraft.server.packs.repository.PackCompatibility forFormat(int) -> a
    36:36:net.minecraft.network.chat.Component getDescription() -> b
    40:40:net.minecraft.network.chat.Component getConfirmation() -> c
    7:10:void <clinit>() -> <clinit>
net.minecraft.server.packs.repository.PackRepository -> yq:
    java.util.Set sources -> a
    java.util.Map available -> b
    java.util.List selected -> c
    net.minecraft.server.packs.repository.UnopenedPack$UnopenedPackConstructor constructor -> d
    18:25:void <init>(net.minecraft.server.packs.repository.UnopenedPack$UnopenedPackConstructor) -> <init>
    28:42:void reload() -> a
    45:48:void sortAvailable() -> e
    51:58:void setSelected(java.util.Collection) -> a
    61:61:java.util.Collection getAvailable() -> b
    65:67:java.util.Collection getUnselected() -> c
    71:71:java.util.Collection getSelected() -> d
    76:76:net.minecraft.server.packs.repository.UnopenedPack getPack(java.lang.String) -> a
    80:81:void addSource(net.minecraft.server.packs.repository.RepositorySource) -> a
    85:86:void close() -> close
    47:47:void lambda$sortAvailable$0(java.util.Map$Entry) -> a
net.minecraft.server.packs.repository.RepositorySource -> yr:
    void loadPacks(java.util.Map,net.minecraft.server.packs.repository.UnopenedPack$UnopenedPackConstructor) -> a
net.minecraft.server.packs.repository.ServerPacksSource -> ys:
    net.minecraft.server.packs.VanillaPack vanillaPack -> a
    8:11:void <init>() -> <init>
    15:19:void loadPacks(java.util.Map,net.minecraft.server.packs.repository.UnopenedPack$UnopenedPackConstructor) -> a
    15:15:net.minecraft.server.packs.Pack lambda$loadPacks$0() -> a
net.minecraft.server.packs.repository.UnopenedPack -> yt:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.server.packs.metadata.pack.PackMetadataSection BROKEN_ASSETS_FALLBACK -> b
    java.lang.String id -> c
    java.util.function.Supplier supplier -> d
    net.minecraft.network.chat.Component title -> e
    net.minecraft.network.chat.Component description -> f
    net.minecraft.server.packs.repository.PackCompatibility compatibility -> g
    net.minecraft.server.packs.repository.UnopenedPack$Position defaultPosition -> h
    boolean required -> i
    boolean fixedPosition -> j
    37:52:net.minecraft.server.packs.repository.UnopenedPack create(java.lang.String,boolean,java.util.function.Supplier,net.minecraft.server.packs.repository.UnopenedPack$UnopenedPackConstructor,net.minecraft.server.packs.repository.UnopenedPack$Position) -> a
    55:64:void <init>(java.lang.String,boolean,java.util.function.Supplier,net.minecraft.network.chat.Component,net.minecraft.network.chat.Component,net.minecraft.server.packs.repository.PackCompatibility,net.minecraft.server.packs.repository.UnopenedPack$Position,boolean) -> <init>
    67:68:void <init>(java.lang.String,boolean,java.util.function.Supplier,net.minecraft.server.packs.Pack,net.minecraft.server.packs.metadata.pack.PackMetadataSection,net.minecraft.server.packs.repository.UnopenedPack$Position) -> <init>
    71:71:net.minecraft.network.chat.Component getTitle() -> a
    75:75:net.minecraft.network.chat.Component getDescription() -> b
    79:79:net.minecraft.network.chat.Component getChatLink(boolean) -> a
    87:87:net.minecraft.server.packs.repository.PackCompatibility getCompatibility() -> c
    91:91:net.minecraft.server.packs.Pack open() -> d
    95:95:java.lang.String getId() -> e
    99:99:boolean isRequired() -> f
    103:103:boolean isFixedPosition() -> g
    107:107:net.minecraft.server.packs.repository.UnopenedPack$Position getDefaultPosition() -> h
    118:127:boolean equals(java.lang.Object) -> equals
    132:132:int hashCode() -> hashCode
    137:137:void close() -> close
    79:82:void lambda$getChatLink$0(boolean,net.minecraft.network.chat.Style) -> a
    23:24:void <clinit>() -> <clinit>
net.minecraft.server.packs.repository.UnopenedPack$Position -> yt$a:
    net.minecraft.server.packs.repository.UnopenedPack$Position TOP -> a
    net.minecraft.server.packs.repository.UnopenedPack$Position BOTTOM -> b
    net.minecraft.server.packs.repository.UnopenedPack$Position[] $VALUES -> c
    139:139:net.minecraft.server.packs.repository.UnopenedPack$Position[] values() -> values
    139:139:net.minecraft.server.packs.repository.UnopenedPack$Position valueOf(java.lang.String) -> valueOf
    139:139:void <init>(java.lang.String,int) -> <init>
    146:170:int insert(java.util.List,java.lang.Object,java.util.function.Function,boolean) -> a
    175:175:net.minecraft.server.packs.repository.UnopenedPack$Position opposite() -> a
    139:141:void <clinit>() -> <clinit>
net.minecraft.server.packs.repository.UnopenedPack$UnopenedPackConstructor -> yt$b:
    net.minecraft.server.packs.repository.UnopenedPack create(java.lang.String,boolean,java.util.function.Supplier,net.minecraft.server.packs.Pack,net.minecraft.server.packs.metadata.pack.PackMetadataSection,net.minecraft.server.packs.repository.UnopenedPack$Position) -> create
net.minecraft.server.packs.repository.package-info -> yu:
net.minecraft.server.packs.resources.FallbackResourceManager -> yv:
    org.apache.logging.log4j.Logger LOGGER -> b
    java.util.List fallbacks -> a
    net.minecraft.server.packs.PackType type -> c
    java.lang.String namespace -> d
    26:33:void <init>(net.minecraft.server.packs.PackType,java.lang.String) -> <init>
    37:38:void add(net.minecraft.server.packs.Pack) -> a
    42:42:java.util.Set getNamespaces() -> a
    47:67:net.minecraft.server.packs.resources.Resource getResource(net.minecraft.resources.ResourceLocation) -> a
    72:84:boolean hasResource(net.minecraft.resources.ResourceLocation) -> b
    88:89:java.io.InputStream getWrappedResource(net.minecraft.resources.ResourceLocation,net.minecraft.server.packs.Pack) -> a
    93:96:void validateLocation(net.minecraft.resources.ResourceLocation) -> e
    99:99:boolean isValidLocation(net.minecraft.resources.ResourceLocation) -> f
    132:148:java.util.List getResources(net.minecraft.resources.ResourceLocation) -> c
    153:161:java.util.Collection listResources(java.lang.String,java.util.function.Predicate) -> a
    165:165:net.minecraft.resources.ResourceLocation getMetadataLocation(net.minecraft.resources.ResourceLocation) -> d
    23:23:org.apache.logging.log4j.Logger access$000() -> b
    24:24:void <clinit>() -> <clinit>
net.minecraft.server.packs.resources.FallbackResourceManager$LeakedResourceWarningInputStream -> yv$a:
    java.lang.String message -> a
    boolean closed -> b
    108:112:void <init>(java.io.InputStream,net.minecraft.resources.ResourceLocation,java.lang.String) -> <init>
    116:118:void close() -> close
    122:127:void finalize() -> finalize
net.minecraft.server.packs.resources.PreparableReloadListener -> yw:
    java.util.concurrent.CompletableFuture reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller,net.minecraft.util.profiling.ProfilerFiller,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
    16:16:java.lang.String getName() -> i
net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier -> yw$a:
    java.util.concurrent.CompletableFuture wait(java.lang.Object) -> a
net.minecraft.server.packs.resources.ProfiledReloadInstance -> yx:
    org.apache.logging.log4j.Logger LOGGER -> d
    com.google.common.base.Stopwatch total -> e
    20:48:void <init>(net.minecraft.server.packs.resources.ResourceManager,java.util.List,java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.concurrent.CompletableFuture) -> <init>
    51:79:void finish(java.util.List) -> a
    24:44:java.util.concurrent.CompletableFuture lambda$new$7(java.util.concurrent.Executor,net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.server.packs.resources.PreparableReloadListener,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
    44:44:net.minecraft.server.packs.resources.ProfiledReloadInstance$State lambda$null$6(net.minecraft.server.packs.resources.PreparableReloadListener,net.minecraft.util.profiling.ActiveProfiler,net.minecraft.util.profiling.ActiveProfiler,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,java.lang.Void) -> a
    38:38:void lambda$null$5(java.util.concurrent.Executor,java.util.concurrent.atomic.AtomicLong,java.lang.Runnable) -> a
    39:42:void lambda$null$4(java.lang.Runnable,java.util.concurrent.atomic.AtomicLong) -> a
    33:33:void lambda$null$3(java.util.concurrent.Executor,java.util.concurrent.atomic.AtomicLong,java.lang.Runnable) -> b
    34:37:void lambda$null$2(java.lang.Runnable,java.util.concurrent.atomic.AtomicLong) -> b
    27:27:int lambda$null$1() -> f
    26:26:int lambda$null$0() -> g
    19:19:void <clinit>() -> <clinit>
net.minecraft.server.packs.resources.ProfiledReloadInstance$1 -> yx$1:
net.minecraft.server.packs.resources.ProfiledReloadInstance$State -> yx$a:
    java.lang.String name -> a
    net.minecraft.util.profiling.ProfileResults preparationResult -> b
    net.minecraft.util.profiling.ProfileResults reloadResult -> c
    java.util.concurrent.atomic.AtomicLong preparationNanos -> d
    java.util.concurrent.atomic.AtomicLong reloadNanos -> e
    88:94:void <init>(java.lang.String,net.minecraft.util.profiling.ProfileResults,net.minecraft.util.profiling.ProfileResults,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong) -> <init>
    81:81:net.minecraft.util.profiling.ProfileResults access$000(net.minecraft.server.packs.resources.ProfiledReloadInstance$State) -> a
    81:81:net.minecraft.util.profiling.ProfileResults access$100(net.minecraft.server.packs.resources.ProfiledReloadInstance$State) -> b
    81:81:java.util.concurrent.atomic.AtomicLong access$200(net.minecraft.server.packs.resources.ProfiledReloadInstance$State) -> c
    81:81:java.util.concurrent.atomic.AtomicLong access$300(net.minecraft.server.packs.resources.ProfiledReloadInstance$State) -> d
    81:81:java.lang.String access$400(net.minecraft.server.packs.resources.ProfiledReloadInstance$State) -> e
    81:81:void <init>(java.lang.String,net.minecraft.util.profiling.ProfileResults,net.minecraft.util.profiling.ProfileResults,java.util.concurrent.atomic.AtomicLong,java.util.concurrent.atomic.AtomicLong,net.minecraft.server.packs.resources.ProfiledReloadInstance$1) -> <init>
net.minecraft.server.packs.resources.ReloadInstance -> yy:
    java.util.concurrent.CompletableFuture done() -> a
    float getActualProgress() -> b
    boolean isApplying() -> c
    boolean isDone() -> d
    void checkExceptions() -> e
net.minecraft.server.packs.resources.ReloadableResourceManager -> yz:
    java.util.concurrent.CompletableFuture reload(java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.List,java.util.concurrent.CompletableFuture) -> a
    net.minecraft.server.packs.resources.ReloadInstance createQueuedReload(java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.concurrent.CompletableFuture) -> a
    net.minecraft.server.packs.resources.ReloadInstance createFullReload(java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.List) -> a
    void registerReloadListener(net.minecraft.server.packs.resources.PreparableReloadListener) -> a
net.minecraft.server.packs.resources.Resource -> za:
    net.minecraft.resources.ResourceLocation getLocation() -> a
    java.io.InputStream getInputStream() -> b
    boolean hasMetadata() -> c
    java.lang.Object getMetadata(net.minecraft.server.packs.metadata.MetadataSectionSerializer) -> a
    java.lang.String getSourceName() -> d
net.minecraft.server.packs.resources.ResourceManager -> zb:
    java.util.Set getNamespaces() -> a
    net.minecraft.server.packs.resources.Resource getResource(net.minecraft.resources.ResourceLocation) -> a
    boolean hasResource(net.minecraft.resources.ResourceLocation) -> b
    java.util.List getResources(net.minecraft.resources.ResourceLocation) -> c
    java.util.Collection listResources(java.lang.String,java.util.function.Predicate) -> a
    void add(net.minecraft.server.packs.Pack) -> a
net.minecraft.server.packs.resources.ResourceManagerReloadListener -> zc:
    12:12:java.util.concurrent.CompletableFuture reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller,net.minecraft.util.profiling.ProfilerFiller,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
    void onResourceManagerReload(net.minecraft.server.packs.resources.ResourceManager) -> a
    12:12:void lambda$reload$0(net.minecraft.server.packs.resources.ResourceManager) -> b
net.minecraft.server.packs.resources.SimpleJsonResourceReloadListener -> zd:
    org.apache.logging.log4j.Logger LOGGER -> a
    int PATH_SUFFIX_LENGTH -> b
    com.google.gson.Gson gson -> c
    java.lang.String directory -> d
    29:32:void <init>(com.google.gson.Gson,java.lang.String) -> <init>
    36:61:java.util.Map prepare(net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
    21:21:java.lang.Object prepare(net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> b
    40:40:boolean lambda$prepare$0(java.lang.String) -> a
    22:24:void <clinit>() -> <clinit>
net.minecraft.server.packs.resources.SimplePreparableReloadListener -> ze:
    8:8:void <init>() -> <init>
    11:13:java.util.concurrent.CompletableFuture reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller,net.minecraft.util.profiling.ProfilerFiller,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
    java.lang.Object prepare(net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> b
    void apply(java.lang.Object,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
    13:13:void lambda$reload$1(net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller,java.lang.Object) -> a
    11:11:java.lang.Object lambda$reload$0(net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
net.minecraft.server.packs.resources.SimpleReloadInstance -> zf:
    net.minecraft.server.packs.resources.ResourceManager resourceManager -> a
    java.util.concurrent.CompletableFuture allPreparations -> b
    java.util.concurrent.CompletableFuture allDone -> c
    java.util.Set preparingListeners -> d
    int listenerCount -> e
    int startedReloads -> f
    int finishedReloads -> g
    java.util.concurrent.atomic.AtomicInteger startedTaskCounter -> h
    java.util.concurrent.atomic.AtomicInteger doneTaskCounter -> i
    33:33:net.minecraft.server.packs.resources.SimpleReloadInstance of(net.minecraft.server.packs.resources.ResourceManager,java.util.List,java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.concurrent.CompletableFuture) -> a
    21:80:void <init>(java.util.concurrent.Executor,java.util.concurrent.Executor,net.minecraft.server.packs.resources.ResourceManager,java.util.List,net.minecraft.server.packs.resources.SimpleReloadInstance$StateFactory,java.util.concurrent.CompletableFuture) -> <init>
    84:84:java.util.concurrent.CompletableFuture done() -> a
    89:92:float getActualProgress() -> b
    101:101:boolean isApplying() -> c
    106:106:boolean isDone() -> d
    111:114:void checkExceptions() -> e
    84:84:net.minecraft.util.Unit lambda$done$5(java.util.List) -> a
    69:74:void lambda$new$4(java.util.concurrent.Executor,java.lang.Runnable) -> a
    71:73:void lambda$null$3(java.lang.Runnable) -> a
    62:67:void lambda$new$2(java.util.concurrent.Executor,java.lang.Runnable) -> b
    64:66:void lambda$null$1(java.lang.Runnable) -> b
    33:33:java.util.concurrent.CompletableFuture lambda$of$0(java.util.concurrent.Executor,net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.server.packs.resources.PreparableReloadListener,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
    15:15:java.util.Set access$000(net.minecraft.server.packs.resources.SimpleReloadInstance) -> a
net.minecraft.server.packs.resources.SimpleReloadInstance$1 -> zf$1:
    java.util.concurrent.Executor val$mainThreadExecutor -> a
    net.minecraft.server.packs.resources.PreparableReloadListener val$listener -> b
    java.util.concurrent.CompletableFuture val$previousTask -> c
    net.minecraft.server.packs.resources.SimpleReloadInstance this$0 -> d
    47:47:void <init>(net.minecraft.server.packs.resources.SimpleReloadInstance,java.util.concurrent.Executor,net.minecraft.server.packs.resources.PreparableReloadListener,java.util.concurrent.CompletableFuture) -> <init>
    50:56:java.util.concurrent.CompletableFuture wait(java.lang.Object) -> a
    56:56:java.lang.Object lambda$wait$1(java.lang.Object,net.minecraft.util.Unit,java.lang.Object) -> a
    51:55:void lambda$wait$0(net.minecraft.server.packs.resources.PreparableReloadListener) -> a
net.minecraft.server.packs.resources.SimpleReloadInstance$StateFactory -> zf$a:
    java.util.concurrent.CompletableFuture create(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.server.packs.resources.PreparableReloadListener,java.util.concurrent.Executor,java.util.concurrent.Executor) -> create
net.minecraft.server.packs.resources.SimpleReloadableResourceManager -> zg:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.Map namespacedPacks -> b
    java.util.List listeners -> c
    java.util.List recentlyRegistered -> d
    java.util.Set namespaces -> e
    net.minecraft.server.packs.PackType type -> f
    java.lang.Thread mainThread -> g
    29:39:void <init>(net.minecraft.server.packs.PackType,java.lang.Thread) -> <init>
    43:52:void add(net.minecraft.server.packs.Pack) -> a
    56:56:java.util.Set getNamespaces() -> a
    64:70:net.minecraft.server.packs.resources.Resource getResource(net.minecraft.resources.ResourceLocation) -> a
    75:81:boolean hasResource(net.minecraft.resources.ResourceLocation) -> b
    86:92:java.util.List getResources(net.minecraft.resources.ResourceLocation) -> c
    97:105:java.util.Collection listResources(java.lang.String,java.util.function.Predicate) -> a
    109:111:void clear() -> b
    115:116:java.util.concurrent.CompletableFuture reload(java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.List,java.util.concurrent.CompletableFuture) -> a
    121:123:void registerReloadListener(net.minecraft.server.packs.resources.PreparableReloadListener) -> a
    127:133:net.minecraft.server.packs.resources.ReloadInstance createReload(java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.List,java.util.concurrent.CompletableFuture) -> b
    138:138:net.minecraft.server.packs.resources.ReloadInstance createQueuedReload(java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.concurrent.CompletableFuture) -> a
    143:156:net.minecraft.server.packs.resources.ReloadInstance createFullReload(java.util.concurrent.Executor,java.util.concurrent.Executor,java.util.concurrent.CompletableFuture,java.util.List) -> a
    27:27:void <clinit>() -> <clinit>
net.minecraft.server.packs.resources.SimpleReloadableResourceManager$FailingReloadInstance -> zg$a:
    net.minecraft.server.packs.resources.SimpleReloadableResourceManager$ResourcePackLoadingFailure exception -> a
    java.util.concurrent.CompletableFuture failedFuture -> b
    176:180:void <init>(net.minecraft.server.packs.resources.SimpleReloadableResourceManager$ResourcePackLoadingFailure) -> <init>
    184:184:java.util.concurrent.CompletableFuture done() -> a
    189:189:float getActualProgress() -> b
    194:194:boolean isApplying() -> c
    199:199:boolean isDone() -> d
    204:204:void checkExceptions() -> e
net.minecraft.server.packs.resources.SimpleReloadableResourceManager$ResourcePackLoadingFailure -> zg$b:
    net.minecraft.server.packs.Pack pack -> a
    163:165:void <init>(net.minecraft.server.packs.Pack,java.lang.Throwable) -> <init>
    168:168:net.minecraft.server.packs.Pack getPack() -> a
net.minecraft.server.packs.resources.SimpleResource -> zh:
    org.apache.logging.log4j.Logger LOGGER -> b
    java.util.concurrent.Executor IO_EXECUTOR -> a
    java.lang.String sourceName -> c
    net.minecraft.resources.ResourceLocation location -> d
    java.io.InputStream resourceStream -> e
    java.io.InputStream metadataStream -> f
    boolean triedMetadata -> g
    com.google.gson.JsonObject metadata -> h
    33:38:void <init>(java.lang.String,net.minecraft.resources.ResourceLocation,java.io.InputStream,java.io.InputStream) -> <init>
    42:42:net.minecraft.resources.ResourceLocation getLocation() -> a
    47:47:java.io.InputStream getInputStream() -> b
    52:52:boolean hasMetadata() -> c
    58:81:java.lang.Object getMetadata(net.minecraft.server.packs.metadata.MetadataSectionSerializer) -> a
    86:86:java.lang.String getSourceName() -> d
    91:107:boolean equals(java.lang.Object) -> equals
    112:114:int hashCode() -> hashCode
    119:123:void close() -> close
    23:24:void <clinit>() -> <clinit>
net.minecraft.server.packs.resources.package-info -> zi:
net.minecraft.server.players.BanListEntry -> zj:
    java.text.SimpleDateFormat DATE_FORMAT -> a
    java.util.Date created -> b
    java.lang.String source -> c
    java.util.Date expires -> d
    java.lang.String reason -> e
    21:26:void <init>(java.lang.Object,java.util.Date,java.lang.String,java.util.Date,java.lang.String) -> <init>
    29:46:void <init>(java.lang.Object,com.google.gson.JsonObject) -> <init>
    49:49:java.util.Date getCreated() -> a
    53:53:java.lang.String getSource() -> b
    57:57:java.util.Date getExpires() -> c
    61:61:java.lang.String getReason() -> d
    net.minecraft.network.chat.Component getDisplayName() -> e
    68:71:boolean hasExpired() -> f
    76:80:void serialize(com.google.gson.JsonObject) -> a
    12:12:void <clinit>() -> <clinit>
net.minecraft.server.players.GameProfileCache -> zk:
    java.text.SimpleDateFormat DATE_FORMAT -> a
    boolean usesAuthentication -> c
    java.util.Map profilesByName -> d
    java.util.Map profilesByUUID -> e
    java.util.Deque profileMRUList -> f
    com.mojang.authlib.GameProfileRepository profileRepository -> g
    com.google.gson.Gson gson -> b
    java.io.File file -> h
    java.lang.reflect.ParameterizedType GAMEPROFILE_ENTRY_TYPE -> i
    48:64:void <init>(com.mojang.authlib.GameProfileRepository,java.io.File) -> <init>
    67:86:com.mojang.authlib.GameProfile lookupGameProfile(com.mojang.authlib.GameProfileRepository,java.lang.String) -> a
    90:91:void setUsesAuthentication(boolean) -> a
    94:94:boolean usesAuthentication() -> d
    98:99:void add(com.mojang.authlib.GameProfile) -> a
    102:119:void add(com.mojang.authlib.GameProfile,java.util.Date) -> a
    123:147:com.mojang.authlib.GameProfile get(java.lang.String) -> a
    151:152:java.lang.String[] getKnownNames() -> a
    157:158:com.mojang.authlib.GameProfile get(java.util.UUID) -> a
    162:169:net.minecraft.server.players.GameProfileCache$GameProfileInfo getProfileInfo(java.util.UUID) -> b
    173:195:void load() -> b
    198:210:void save() -> c
    213:222:java.util.List getTopMRUProfiles(int) -> a
    46:289:void <clinit>() -> <clinit>
net.minecraft.server.players.GameProfileCache$1 -> zk$1:
    com.mojang.authlib.GameProfile[] val$result -> a
    68:68:void <init>(com.mojang.authlib.GameProfile[]) -> <init>
    71:72:void onProfileLookupSucceeded(com.mojang.authlib.GameProfile) -> onProfileLookupSucceeded
    76:77:void onProfileLookupFailed(com.mojang.authlib.GameProfile,java.lang.Exception) -> onProfileLookupFailed
net.minecraft.server.players.GameProfileCache$2 -> zk$2:
    289:289:void <init>() -> <init>
    292:292:java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    297:297:java.lang.reflect.Type getRawType() -> getRawType
    302:302:java.lang.reflect.Type getOwnerType() -> getOwnerType
net.minecraft.server.players.GameProfileCache$GameProfileInfo -> zk$a:
    com.mojang.authlib.GameProfile profile -> b
    java.util.Date expirationDate -> c
    net.minecraft.server.players.GameProfileCache this$0 -> a
    275:278:void <init>(net.minecraft.server.players.GameProfileCache,com.mojang.authlib.GameProfile,java.util.Date) -> <init>
    281:281:com.mojang.authlib.GameProfile getProfile() -> a
    285:285:java.util.Date getExpirationDate() -> b
    271:271:void <init>(net.minecraft.server.players.GameProfileCache,com.mojang.authlib.GameProfile,java.util.Date,net.minecraft.server.players.GameProfileCache$1) -> <init>
    271:271:java.util.Date access$200(net.minecraft.server.players.GameProfileCache$GameProfileInfo) -> a
net.minecraft.server.players.GameProfileCache$Serializer -> zk$b:
    net.minecraft.server.players.GameProfileCache this$0 -> a
    225:225:void <init>(net.minecraft.server.players.GameProfileCache) -> <init>
    228:233:com.google.gson.JsonElement serialize(net.minecraft.server.players.GameProfileCache$GameProfileInfo,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    238:267:net.minecraft.server.players.GameProfileCache$GameProfileInfo deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    225:225:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    225:225:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
    225:225:void <init>(net.minecraft.server.players.GameProfileCache,net.minecraft.server.players.GameProfileCache$1) -> <init>
net.minecraft.server.players.IpBanList -> zl:
    10:11:void <init>(java.io.File) -> <init>
    15:15:net.minecraft.server.players.StoredUserEntry createEntry(com.google.gson.JsonObject) -> a
    19:20:boolean isBanned(java.net.SocketAddress) -> a
    24:24:boolean isBanned(java.lang.String) -> a
    28:29:net.minecraft.server.players.IpBanListEntry get(java.net.SocketAddress) -> b
    33:40:java.lang.String getIpFromAddress(java.net.SocketAddress) -> c
net.minecraft.server.players.IpBanListEntry -> zm:
    12:13:void <init>(java.lang.String) -> <init>
    16:17:void <init>(java.lang.String,java.util.Date,java.lang.String,java.util.Date,java.lang.String) -> <init>
    21:21:net.minecraft.network.chat.Component getDisplayName() -> e
    25:26:void <init>(com.google.gson.JsonObject) -> <init>
    29:29:java.lang.String createIpInfo(com.google.gson.JsonObject) -> b
    34:39:void serialize(com.google.gson.JsonObject) -> a
net.minecraft.server.players.OldUsersConverter -> zn:
    org.apache.logging.log4j.Logger LOGGER -> e
    java.io.File OLD_IPBANLIST -> a
    java.io.File OLD_USERBANLIST -> b
    java.io.File OLD_OPLIST -> c
    java.io.File OLD_WHITELIST -> d
    29:29:void <init>() -> <init>
    37:46:java.util.List readOldListFormat(java.io.File,java.util.Map) -> a
    50:60:void lookupPlayers(net.minecraft.server.MinecraftServer,java.util.Collection,com.mojang.authlib.ProfileLookupCallback) -> a
    63:113:boolean convertUserBanlist(net.minecraft.server.MinecraftServer) -> a
    117:146:boolean convertIpBanlist(net.minecraft.server.MinecraftServer) -> b
    150:188:boolean convertOpsList(net.minecraft.server.MinecraftServer) -> c
    192:230:boolean convertWhiteList(net.minecraft.server.MinecraftServer) -> d
    234:263:java.lang.String convertMobOwnerIfNecessary(net.minecraft.server.MinecraftServer,java.lang.String) -> a
    277:349:boolean convertPlayers(net.minecraft.server.dedicated.DedicatedServer) -> a
    353:364:void ensureDirectoryExists(java.io.File) -> b
    367:369:boolean serverReadyAfterUserconversion(net.minecraft.server.MinecraftServer) -> e
    373:407:boolean areOldUserlistsRemoved() -> b
    411:420:boolean areOldPlayersConverted(net.minecraft.server.MinecraftServer) -> f
    424:426:java.io.File getWorldPlayersDirectory(net.minecraft.server.MinecraftServer) -> g
    430:432:void renameOldFile(java.io.File) -> c
    437:441:java.util.Date parseDate(java.lang.String,java.util.Date) -> b
    50:50:java.lang.String[] lambda$lookupPlayers$1(int) -> a
    50:50:boolean lambda$lookupPlayers$0(java.lang.String) -> a
    29:29:org.apache.logging.log4j.Logger access$000() -> a
    29:29:java.util.Date access$200(java.lang.String,java.util.Date) -> a
    29:29:void access$400(java.io.File) -> a
    30:34:void <clinit>() -> <clinit>
net.minecraft.server.players.OldUsersConverter$1 -> zn$1:
    net.minecraft.server.MinecraftServer val$server -> a
    java.util.Map val$userMap -> b
    net.minecraft.server.players.UserBanList val$bans -> c
    76:76:void <init>(net.minecraft.server.MinecraftServer,java.util.Map,net.minecraft.server.players.UserBanList) -> <init>
    79:91:void onProfileLookupSucceeded(com.mojang.authlib.GameProfile) -> onProfileLookupSucceeded
    95:99:void onProfileLookupFailed(com.mojang.authlib.GameProfile,java.lang.Exception) -> onProfileLookupFailed
net.minecraft.server.players.OldUsersConverter$2 -> zn$2:
    net.minecraft.server.MinecraftServer val$server -> a
    net.minecraft.server.players.ServerOpList val$opsList -> b
    161:161:void <init>(net.minecraft.server.MinecraftServer,net.minecraft.server.players.ServerOpList) -> <init>
    164:166:void onProfileLookupSucceeded(com.mojang.authlib.GameProfile) -> onProfileLookupSucceeded
    170:174:void onProfileLookupFailed(com.mojang.authlib.GameProfile,java.lang.Exception) -> onProfileLookupFailed
net.minecraft.server.players.OldUsersConverter$3 -> zn$3:
    net.minecraft.server.MinecraftServer val$server -> a
    net.minecraft.server.players.UserWhiteList val$whitelist -> b
    203:203:void <init>(net.minecraft.server.MinecraftServer,net.minecraft.server.players.UserWhiteList) -> <init>
    206:208:void onProfileLookupSucceeded(com.mojang.authlib.GameProfile) -> onProfileLookupSucceeded
    212:216:void onProfileLookupFailed(com.mojang.authlib.GameProfile,java.lang.Exception) -> onProfileLookupFailed
net.minecraft.server.players.OldUsersConverter$4 -> zn$4:
    net.minecraft.server.MinecraftServer val$server -> a
    java.util.List val$profiles -> b
    246:246:void <init>(net.minecraft.server.MinecraftServer,java.util.List) -> <init>
    249:251:void onProfileLookupSucceeded(com.mojang.authlib.GameProfile) -> onProfileLookupSucceeded
    255:256:void onProfileLookupFailed(com.mojang.authlib.GameProfile,java.lang.Exception) -> onProfileLookupFailed
net.minecraft.server.players.OldUsersConverter$5 -> zn$5:
    net.minecraft.server.dedicated.DedicatedServer val$server -> a
    java.io.File val$worldNewPlayerDirectory -> b
    java.io.File val$unknownPlayerDirectory -> c
    java.io.File val$worldPlayerDirectory -> d
    java.lang.String[] val$names -> e
    298:298:void <init>(net.minecraft.server.dedicated.DedicatedServer,java.io.File,java.io.File,java.io.File,java.lang.String[]) -> <init>
    301:307:void onProfileLookupSucceeded(com.mojang.authlib.GameProfile) -> onProfileLookupSucceeded
    311:318:void onProfileLookupFailed(com.mojang.authlib.GameProfile,java.lang.Exception) -> onProfileLookupFailed
    321:327:void movePlayerFile(java.io.File,java.lang.String,java.lang.String) -> a
    330:340:java.lang.String getFileNameForProfile(com.mojang.authlib.GameProfile) -> a
net.minecraft.server.players.OldUsersConverter$ConversionError -> zn$a:
    268:269:void <init>(java.lang.String,java.lang.Throwable) -> <init>
    272:273:void <init>(java.lang.String) -> <init>
    266:266:void <init>(java.lang.String,net.minecraft.server.players.OldUsersConverter$1) -> <init>
    266:266:void <init>(java.lang.String,java.lang.Throwable,net.minecraft.server.players.OldUsersConverter$1) -> <init>
net.minecraft.server.players.PlayerList -> zo:
    java.io.File USERBANLIST_FILE -> b
    java.io.File IPBANLIST_FILE -> c
    java.io.File OPLIST_FILE -> d
    java.io.File WHITELIST_FILE -> e
    org.apache.logging.log4j.Logger LOGGER -> a
    java.text.SimpleDateFormat BAN_DATE_FORMAT -> g
    net.minecraft.server.MinecraftServer server -> h
    java.util.List players -> i
    java.util.Map playersByUUID -> j
    net.minecraft.server.players.UserBanList bans -> k
    net.minecraft.server.players.IpBanList ipBans -> l
    net.minecraft.server.players.ServerOpList ops -> m
    net.minecraft.server.players.UserWhiteList whitelist -> n
    java.util.Map stats -> o
    java.util.Map advancements -> p
    net.minecraft.world.level.storage.PlayerIO playerIo -> q
    boolean doWhiteList -> r
    int maxPlayers -> f
    int viewDistance -> s
    net.minecraft.world.level.GameType overrideGameMode -> t
    boolean allowCheatsForAllPlayers -> u
    int sendAllPlayerInfoIn -> v
    92:113:void <init>(net.minecraft.server.MinecraftServer,int) -> <init>
    116:230:void placeNewPlayer(net.minecraft.network.Connection,net.minecraft.server.level.ServerPlayer) -> a
    233:252:void updateEntireScoreboard(net.minecraft.server.ServerScoreboard,net.minecraft.server.level.ServerPlayer) -> a
    255:290:void setLevel(net.minecraft.server.level.ServerLevel) -> a
    294:304:net.minecraft.nbt.CompoundTag load(net.minecraft.server.level.ServerPlayer) -> a
    308:317:void save(net.minecraft.server.level.ServerPlayer) -> b
    325:354:void remove(net.minecraft.server.level.ServerPlayer) -> c
    358:388:net.minecraft.network.chat.Component canPlayerLogin(java.net.SocketAddress,com.mojang.authlib.GameProfile) -> a
    392:416:net.minecraft.server.level.ServerPlayer getPlayerForLogin(com.mojang.authlib.GameProfile) -> g
    420:479:net.minecraft.server.level.ServerPlayer respawn(net.minecraft.server.level.ServerPlayer,net.minecraft.world.level.dimension.DimensionType,boolean) -> a
    483:486:void sendPlayerPermissionLevel(net.minecraft.server.level.ServerPlayer) -> d
    491:495:void tick() -> d
    498:501:void broadcastAll(net.minecraft.network.protocol.Packet) -> a
    504:510:void broadcastAll(net.minecraft.network.protocol.Packet,net.minecraft.world.level.dimension.DimensionType) -> a
    513:525:void broadcastToTeam(net.minecraft.world.entity.player.Player,net.minecraft.network.chat.Component) -> a
    528:539:void broadcastToAllExceptTeam(net.minecraft.world.entity.player.Player,net.minecraft.network.chat.Component) -> b
    542:553:java.lang.String getPlayerNames(boolean) -> b
    557:561:java.lang.String[] getPlayerNamesArray() -> e
    565:569:com.mojang.authlib.GameProfile[] getPlayerGameProfiles() -> f
    573:573:net.minecraft.server.players.UserBanList getBans() -> g
    577:577:net.minecraft.server.players.IpBanList getIpBans() -> h
    581:586:void op(com.mojang.authlib.GameProfile) -> a
    589:594:void deop(com.mojang.authlib.GameProfile) -> b
    597:609:void sendPlayerPermissionLevel(net.minecraft.server.level.ServerPlayer,int) -> a
    612:612:boolean isWhiteListed(com.mojang.authlib.GameProfile) -> e
    616:616:boolean isOp(com.mojang.authlib.GameProfile) -> h
    621:626:net.minecraft.server.level.ServerPlayer getPlayerByName(java.lang.String) -> a
    630:645:void broadcast(net.minecraft.world.entity.player.Player,double,double,double,double,net.minecraft.world.level.dimension.DimensionType,net.minecraft.network.protocol.Packet) -> a
    648:651:void saveAll() -> i
    654:655:void whiteList(com.mojang.authlib.GameProfile) -> d
    658:659:void blackList(com.mojang.authlib.GameProfile) -> c
    662:662:net.minecraft.server.players.UserWhiteList getWhiteList() -> j
    666:666:java.lang.String[] getWhiteListNames() -> k
    670:670:net.minecraft.server.players.ServerOpList getOps() -> l
    674:674:java.lang.String[] getOpNames() -> m
    678:678:void reloadWhiteList() -> a
    681:693:void sendLevelInfo(net.minecraft.server.level.ServerPlayer,net.minecraft.server.level.ServerLevel) -> a
    696:699:void sendAllPlayerInfo(net.minecraft.server.level.ServerPlayer) -> e
    702:702:int getPlayerCount() -> n
    706:706:int getMaxPlayers() -> o
    710:710:boolean isUsingWhitelist() -> p
    714:715:void setUsingWhiteList(boolean) -> a
    718:726:java.util.List getPlayersWithAddress(java.lang.String) -> b
    730:730:int getViewDistance() -> q
    734:734:net.minecraft.server.MinecraftServer getServer() -> c
    738:738:net.minecraft.nbt.CompoundTag getSingleplayerData() -> r
    742:743:void setOverrideGameMode(net.minecraft.world.level.GameType) -> a
    748:754:void updatePlayerGameMode(net.minecraft.server.level.ServerPlayer,net.minecraft.server.level.ServerPlayer,net.minecraft.world.level.LevelAccessor) -> a
    757:758:void setAllowCheatsForAllPlayers(boolean) -> c
    761:764:void removeAll() -> s
    767:770:void broadcastMessage(net.minecraft.network.chat.Component,boolean) -> a
    773:774:void broadcastMessage(net.minecraft.network.chat.Component) -> a
    777:796:net.minecraft.stats.ServerStatsCounter getPlayerStats(net.minecraft.world.entity.player.Player) -> a
    800:812:net.minecraft.server.PlayerAdvancements getPlayerAdvancements(net.minecraft.server.level.ServerPlayer) -> f
    816:824:void setViewDistance(int) -> a
    827:827:java.util.List getPlayers() -> t
    832:832:net.minecraft.server.level.ServerPlayer getPlayer(java.util.UUID) -> a
    836:836:boolean canBypassPlayerLimit(com.mojang.authlib.GameProfile) -> f
    840:849:void reloadResources() -> u
    852:852:boolean isAllowCheatsForAllPlayers() -> v
    202:205:net.minecraft.world.entity.Entity lambda$placeNewPlayer$0(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Entity) -> a
    83:89:void <clinit>() -> <clinit>
net.minecraft.server.players.PlayerList$1 -> zo$1:
    net.minecraft.server.players.PlayerList this$0 -> a
    256:256:void <init>(net.minecraft.server.players.PlayerList) -> <init>
    259:260:void onBorderSizeSet(net.minecraft.world.level.border.WorldBorder,double) -> a
    264:265:void onBorderSizeLerping(net.minecraft.world.level.border.WorldBorder,double,double,long) -> a
    269:270:void onBorderCenterSet(net.minecraft.world.level.border.WorldBorder,double,double) -> a
    274:275:void onBorderSetWarningTime(net.minecraft.world.level.border.WorldBorder,int) -> a
    279:280:void onBorderSetWarningBlocks(net.minecraft.world.level.border.WorldBorder,int) -> b
    284:284:void onBorderSetDamagePerBlock(net.minecraft.world.level.border.WorldBorder,double) -> b
    288:288:void onBorderSetDamageSafeZOne(net.minecraft.world.level.border.WorldBorder,double) -> c
net.minecraft.server.players.ServerOpList -> zp:
    11:12:void <init>(java.io.File) -> <init>
    16:16:net.minecraft.server.players.StoredUserEntry createEntry(com.google.gson.JsonObject) -> a
    21:26:java.lang.String[] getUserList() -> a
    30:36:int getOpLevel(com.mojang.authlib.GameProfile) -> a
    40:46:boolean canBypassPlayerLimit(com.mojang.authlib.GameProfile) -> b
    51:51:java.lang.String getKeyForUser(com.mojang.authlib.GameProfile) -> c
    55:60:com.mojang.authlib.GameProfile find(java.lang.String) -> a
    9:9:java.lang.String getKeyForUser(java.lang.Object) -> a
net.minecraft.server.players.ServerOpListEntry -> zq:
    int level -> a
    boolean bypassesPlayerLimit -> b
    14:17:void <init>(com.mojang.authlib.GameProfile,int,boolean) -> <init>
    20:23:void <init>(com.google.gson.JsonObject) -> <init>
    26:26:int getLevel() -> a
    30:30:boolean getBypassesPlayerLimit() -> b
    35:43:void serialize(com.google.gson.JsonObject) -> a
    46:56:com.mojang.authlib.GameProfile createGameProfile(com.google.gson.JsonObject) -> b
net.minecraft.server.players.StoredUserEntry -> zr:
    java.lang.Object user -> a
    11:13:void <init>(java.lang.Object) -> <init>
    15:17:void <init>(java.lang.Object,com.google.gson.JsonObject) -> <init>
    21:21:java.lang.Object getUser() -> g
    25:25:boolean hasExpired() -> f
    29:29:void serialize(com.google.gson.JsonObject) -> a
net.minecraft.server.players.StoredUserList -> zs:
    org.apache.logging.log4j.Logger LOGGER -> a
    com.google.gson.Gson gson -> b
    java.io.File file -> c
    java.util.Map map -> d
    boolean enabled -> e
    java.lang.reflect.ParameterizedType USERLIST_ENTRY_TYPE -> f
    38:46:void <init>(java.io.File) -> <init>
    49:49:boolean isEnabled() -> b
    53:54:void setEnabled(boolean) -> a
    57:57:java.io.File getFile() -> c
    61:67:void add(net.minecraft.server.players.StoredUserEntry) -> a
    71:72:net.minecraft.server.players.StoredUserEntry get(java.lang.Object) -> b
    76:82:void remove(java.lang.Object) -> c
    85:86:void remove(net.minecraft.server.players.StoredUserEntry) -> b
    89:89:java.lang.String[] getUserList() -> a
    93:93:boolean isEmpty() -> d
    97:97:java.lang.String getKeyForUser(java.lang.Object) -> a
    101:101:boolean contains(java.lang.Object) -> d
    105:114:void removeExpired() -> h
    117:117:net.minecraft.server.players.StoredUserEntry createEntry(com.google.gson.JsonObject) -> a
    121:121:java.util.Collection getEntries() -> e
    125:134:void save() -> f
    139:158:void load() -> g
    34:178:void <clinit>() -> <clinit>
net.minecraft.server.players.StoredUserList$1 -> zs$1:
    178:178:void <init>() -> <init>
    181:181:java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    188:188:java.lang.reflect.Type getRawType() -> getRawType
    193:193:java.lang.reflect.Type getOwnerType() -> getOwnerType
net.minecraft.server.players.StoredUserList$Serializer -> zs$a:
    net.minecraft.server.players.StoredUserList this$0 -> a
    160:160:void <init>(net.minecraft.server.players.StoredUserList) -> <init>
    163:165:com.google.gson.JsonElement serialize(net.minecraft.server.players.StoredUserEntry,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    170:174:net.minecraft.server.players.StoredUserEntry deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    160:160:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    160:160:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
    160:160:void <init>(net.minecraft.server.players.StoredUserList,net.minecraft.server.players.StoredUserList$1) -> <init>
net.minecraft.server.players.UserBanList -> zt:
    10:11:void <init>(java.io.File) -> <init>
    15:15:net.minecraft.server.players.StoredUserEntry createEntry(com.google.gson.JsonObject) -> a
    19:19:boolean isBanned(com.mojang.authlib.GameProfile) -> a
    24:29:java.lang.String[] getUserList() -> a
    34:34:java.lang.String getKeyForUser(com.mojang.authlib.GameProfile) -> b
    38:43:com.mojang.authlib.GameProfile find(java.lang.String) -> a
    8:8:java.lang.String getKeyForUser(java.lang.Object) -> a
net.minecraft.server.players.UserBanListEntry -> zu:
    15:16:void <init>(com.mojang.authlib.GameProfile) -> <init>
    19:20:void <init>(com.mojang.authlib.GameProfile,java.util.Date,java.lang.String,java.util.Date,java.lang.String) -> <init>
    23:24:void <init>(com.google.gson.JsonObject) -> <init>
    28:34:void serialize(com.google.gson.JsonObject) -> a
    38:39:net.minecraft.network.chat.Component getDisplayName() -> e
    43:53:com.mojang.authlib.GameProfile createGameProfile(com.google.gson.JsonObject) -> b
net.minecraft.server.players.UserWhiteList -> zv:
    10:11:void <init>(java.io.File) -> <init>
    15:15:net.minecraft.server.players.StoredUserEntry createEntry(com.google.gson.JsonObject) -> a
    19:19:boolean isWhiteListed(com.mojang.authlib.GameProfile) -> a
    24:29:java.lang.String[] getUserList() -> a
    34:34:java.lang.String getKeyForUser(com.mojang.authlib.GameProfile) -> b
    38:43:com.mojang.authlib.GameProfile find(java.lang.String) -> a
    8:8:java.lang.String getKeyForUser(java.lang.Object) -> a
net.minecraft.server.players.UserWhiteListEntry -> zw:
    10:11:void <init>(com.mojang.authlib.GameProfile) -> <init>
    14:15:void <init>(com.google.gson.JsonObject) -> <init>
    19:25:void serialize(com.google.gson.JsonObject) -> a
    28:38:com.mojang.authlib.GameProfile createGameProfile(com.google.gson.JsonObject) -> b
net.minecraft.server.players.package-info -> zx:
net.minecraft.server.rcon.NetworkDataOutputStream -> zy:
    java.io.ByteArrayOutputStream outputStream -> a
    java.io.DataOutputStream dataOutputStream -> b
    11:14:void <init>(int) -> <init>
    17:18:void writeBytes(byte[]) -> a
    21:23:void writeString(java.lang.String) -> a
    26:27:void write(int) -> a
    31:32:void writeShort(short) -> a
    35:36:void writeInt(int) -> b
    39:40:void writeFloat(float) -> a
    43:43:byte[] toByteArray() -> a
    47:48:void reset() -> b
net.minecraft.server.rcon.PktUtils -> zz:
    char[] HEX_CHAR -> a
    5:5:void <init>() -> <init>
    12:18:java.lang.String stringFromByteArray(byte[],int,int) -> a
    22:22:int intFromByteArray(byte[],int) -> a
    26:31:int intFromByteArray(byte[],int,int) -> b
    35:40:int intFromNetworkByteArray(byte[],int,int) -> c
    44:44:java.lang.String toHexString(byte) -> a
    7:7:void <clinit>() -> <clinit>
net.minecraft.server.rcon.RconConsoleSource -> aaa:
    java.lang.StringBuffer buffer -> b
    net.minecraft.server.MinecraftServer server -> c
    15:20:void <init>(net.minecraft.server.MinecraftServer) -> <init>
    23:24:void prepareForCommand() -> d
    27:27:java.lang.String getCommandResponse() -> e
    31:32:net.minecraft.commands.CommandSourceStack createCommandSourceStack() -> f
    37:38:void sendMessage(net.minecraft.network.chat.Component) -> a
    42:42:boolean acceptsSuccess() -> a
    47:47:boolean acceptsFailure() -> b
    52:52:boolean shouldInformAdmins() -> I_
net.minecraft.server.rcon.package-info -> aab:
net.minecraft.server.rcon.thread.GenericThread -> aac:
    org.apache.logging.log4j.Logger LOGGER -> h
    java.util.concurrent.atomic.AtomicInteger UNIQUE_THREAD_ID -> i
    boolean running -> a
    net.minecraft.server.ServerInterface serverInterface -> b
    java.lang.String name -> c
    java.lang.Thread thread -> d
    int maxStopWait -> e
    java.util.List datagramSockets -> f
    java.util.List serverSockets -> g
    22:32:void <init>(net.minecraft.server.ServerInterface,java.lang.String) -> <init>
    void run() -> run
    38:42:void start() -> a
    45:77:void stop() -> b
    80:80:boolean isRunning() -> c
    84:85:void debug(java.lang.String) -> a
    88:89:void info(java.lang.String) -> b
    92:93:void warn(java.lang.String) -> c
    96:97:void error(java.lang.String) -> d
    100:100:int currentPlayerCount() -> d
    104:106:void registerSocket(java.net.DatagramSocket) -> a
    109:111:void registerSocket(java.net.ServerSocket) -> a
    114:114:boolean closeSocket(java.net.DatagramSocket) -> b
    118:133:boolean closeSocket(java.net.DatagramSocket,boolean) -> a
    137:137:boolean closeSocket(java.net.ServerSocket) -> b
    141:160:boolean closeSocket(java.net.ServerSocket,boolean) -> a
    164:165:void closeSockets() -> e
    168:186:void closeSockets(boolean) -> a
    16:17:void <clinit>() -> <clinit>
net.minecraft.server.rcon.thread.QueryThreadGs4 -> aad:
    long lastChallengeCheck -> h
    int port -> i
    int serverPort -> j
    int maxPlayers -> k
    java.lang.String serverName -> l
    java.lang.String worldName -> m
    java.net.DatagramSocket socket -> n
    byte[] buffer -> o
    java.net.DatagramPacket request -> p
    java.util.Map idents -> q
    java.lang.String hostIp -> r
    java.lang.String serverIp -> s
    java.util.Map validChallenges -> t
    long lastChallengeClean -> u
    net.minecraft.server.rcon.NetworkDataOutputStream rulesResponse -> v
    long lastRulesResponse -> w
    38:84:void <init>(net.minecraft.server.ServerInterface) -> <init>
    87:88:void sendTo(byte[],java.net.DatagramPacket) -> a
    91:139:boolean processPacket(java.net.DatagramPacket) -> a
    143:200:byte[] buildRuleResponse(java.net.DatagramPacket) -> b
    204:204:byte[] getIdentBytes(java.net.SocketAddress) -> a
    208:221:java.lang.Boolean validChallenge(java.net.DatagramPacket) -> c
    225:229:void sendChallenge(java.net.DatagramPacket) -> d
    232:249:void pruneChallenges() -> f
    253:280:void run() -> run
    284:296:void start() -> a
    299:311:void recoverSocketError(java.lang.Exception) -> a
    315:327:boolean initSocket() -> g
net.minecraft.server.rcon.thread.QueryThreadGs4$RequestChallenge -> aad$a:
    long time -> b
    int challenge -> c
    byte[] identBytes -> d
    byte[] challengeBytes -> e
    java.lang.String ident -> f
    net.minecraft.server.rcon.thread.QueryThreadGs4 this$0 -> a
    337:348:void <init>(net.minecraft.server.rcon.thread.QueryThreadGs4,java.net.DatagramPacket) -> <init>
    351:351:java.lang.Boolean before(long) -> a
    355:355:int getChallenge() -> a
    359:359:byte[] getChallengeBytes() -> b
    363:363:byte[] getIdentBytes() -> c
    368:368:java.lang.String getIdent() -> d
net.minecraft.server.rcon.thread.RconClient -> aae:
    org.apache.logging.log4j.Logger LOGGER -> h
    boolean authed -> i
    java.net.Socket client -> j
    byte[] buf -> k
    java.lang.String rconPassword -> l
    24:39:void <init>(net.minecraft.server.ServerInterface,java.lang.String,java.net.Socket) -> <init>
    44:99:void run() -> run
    104:114:void send(int,int,java.lang.String) -> a
    117:118:void sendAuthFailure() -> f
    121:132:void sendCmdResponse(int,java.lang.String) -> a
    136:138:void stop() -> b
    141:151:void closeSocket() -> g
    16:16:void <clinit>() -> <clinit>
net.minecraft.server.rcon.thread.RconThread -> aaf:
    int port -> h
    java.lang.String serverIp -> i
    java.net.ServerSocket socket -> j
    java.lang.String rconPassword -> k
    java.util.Map clients -> l
    24:35:void <init>(net.minecraft.server.ServerInterface) -> <init>
    38:39:void initClients() -> f
    42:49:void clearClients() -> g
    53:78:void run() -> run
    82:103:void start() -> a
    107:118:void stop() -> b
net.minecraft.server.rcon.thread.package-info -> aag:
net.minecraft.sounds.SoundEvent -> aah:
    net.minecraft.resources.ResourceLocation location -> a
    8:10:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    13:13:net.minecraft.resources.ResourceLocation getLocation() -> a
net.minecraft.sounds.SoundEvents -> aai:
    net.minecraft.sounds.SoundEvent AMBIENT_CAVE -> a
    net.minecraft.sounds.SoundEvent AMBIENT_UNDERWATER_ENTER -> b
    net.minecraft.sounds.SoundEvent AMBIENT_UNDERWATER_EXIT -> c
    net.minecraft.sounds.SoundEvent AMBIENT_UNDERWATER_LOOP -> d
    net.minecraft.sounds.SoundEvent AMBIENT_UNDERWATER_LOOP_ADDITIONS -> e
    net.minecraft.sounds.SoundEvent AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE -> f
    net.minecraft.sounds.SoundEvent AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE -> g
    net.minecraft.sounds.SoundEvent ANVIL_BREAK -> h
    net.minecraft.sounds.SoundEvent ANVIL_DESTROY -> i
    net.minecraft.sounds.SoundEvent ANVIL_FALL -> j
    net.minecraft.sounds.SoundEvent ANVIL_HIT -> k
    net.minecraft.sounds.SoundEvent ANVIL_LAND -> l
    net.minecraft.sounds.SoundEvent ANVIL_PLACE -> m
    net.minecraft.sounds.SoundEvent ANVIL_STEP -> n
    net.minecraft.sounds.SoundEvent ANVIL_USE -> o
    net.minecraft.sounds.SoundEvent ARMOR_EQUIP_CHAIN -> p
    net.minecraft.sounds.SoundEvent ARMOR_EQUIP_DIAMOND -> q
    net.minecraft.sounds.SoundEvent ARMOR_EQUIP_ELYTRA -> r
    net.minecraft.sounds.SoundEvent ARMOR_EQUIP_GENERIC -> s
    net.minecraft.sounds.SoundEvent ARMOR_EQUIP_GOLD -> t
    net.minecraft.sounds.SoundEvent ARMOR_EQUIP_IRON -> u
    net.minecraft.sounds.SoundEvent ARMOR_EQUIP_LEATHER -> v
    net.minecraft.sounds.SoundEvent ARMOR_EQUIP_TURTLE -> w
    net.minecraft.sounds.SoundEvent ARMOR_STAND_BREAK -> x
    net.minecraft.sounds.SoundEvent ARMOR_STAND_FALL -> y
    net.minecraft.sounds.SoundEvent ARMOR_STAND_HIT -> z
    net.minecraft.sounds.SoundEvent ARMOR_STAND_PLACE -> A
    net.minecraft.sounds.SoundEvent ARROW_HIT -> B
    net.minecraft.sounds.SoundEvent ARROW_HIT_PLAYER -> C
    net.minecraft.sounds.SoundEvent ARROW_SHOOT -> D
    net.minecraft.sounds.SoundEvent AXE_STRIP -> E
    net.minecraft.sounds.SoundEvent BAMBOO_BREAK -> F
    net.minecraft.sounds.SoundEvent BAMBOO_FALL -> G
    net.minecraft.sounds.SoundEvent BAMBOO_HIT -> H
    net.minecraft.sounds.SoundEvent BAMBOO_PLACE -> I
    net.minecraft.sounds.SoundEvent BAMBOO_STEP -> J
    net.minecraft.sounds.SoundEvent BAMBOO_SAPLING_BREAK -> K
    net.minecraft.sounds.SoundEvent BAMBOO_SAPLING_HIT -> L
    net.minecraft.sounds.SoundEvent BAMBOO_SAPLING_PLACE -> M
    net.minecraft.sounds.SoundEvent BARREL_CLOSE -> N
    net.minecraft.sounds.SoundEvent BARREL_OPEN -> O
    net.minecraft.sounds.SoundEvent BAT_AMBIENT -> P
    net.minecraft.sounds.SoundEvent BAT_DEATH -> Q
    net.minecraft.sounds.SoundEvent BAT_HURT -> R
    net.minecraft.sounds.SoundEvent BAT_LOOP -> S
    net.minecraft.sounds.SoundEvent BAT_TAKEOFF -> T
    net.minecraft.sounds.SoundEvent BEACON_ACTIVATE -> U
    net.minecraft.sounds.SoundEvent BEACON_AMBIENT -> V
    net.minecraft.sounds.SoundEvent BEACON_DEACTIVATE -> W
    net.minecraft.sounds.SoundEvent BEACON_POWER_SELECT -> X
    net.minecraft.sounds.SoundEvent BEE_DEATH -> Y
    net.minecraft.sounds.SoundEvent BEE_HURT -> Z
    net.minecraft.sounds.SoundEvent BEE_LOOP_AGGRESSIVE -> aa
    net.minecraft.sounds.SoundEvent BEE_LOOP -> ab
    net.minecraft.sounds.SoundEvent BEE_STING -> ac
    net.minecraft.sounds.SoundEvent BEE_POLLINATE -> ad
    net.minecraft.sounds.SoundEvent BEEHIVE_DRIP -> ae
    net.minecraft.sounds.SoundEvent BEEHIVE_ENTER -> af
    net.minecraft.sounds.SoundEvent BEEHIVE_EXIT -> ag
    net.minecraft.sounds.SoundEvent BEEHIVE_SHEAR -> ah
    net.minecraft.sounds.SoundEvent BEEHIVE_WORK -> ai
    net.minecraft.sounds.SoundEvent BELL_BLOCK -> aj
    net.minecraft.sounds.SoundEvent BELL_RESONATE -> ak
    net.minecraft.sounds.SoundEvent BLAZE_AMBIENT -> al
    net.minecraft.sounds.SoundEvent BLAZE_BURN -> am
    net.minecraft.sounds.SoundEvent BLAZE_DEATH -> an
    net.minecraft.sounds.SoundEvent BLAZE_HURT -> ao
    net.minecraft.sounds.SoundEvent BLAZE_SHOOT -> ap
    net.minecraft.sounds.SoundEvent BOAT_PADDLE_LAND -> aq
    net.minecraft.sounds.SoundEvent BOAT_PADDLE_WATER -> ar
    net.minecraft.sounds.SoundEvent BOOK_PAGE_TURN -> as
    net.minecraft.sounds.SoundEvent BOOK_PUT -> at
    net.minecraft.sounds.SoundEvent FISHING_BOBBER_RETRIEVE -> au
    net.minecraft.sounds.SoundEvent FISHING_BOBBER_SPLASH -> av
    net.minecraft.sounds.SoundEvent FISHING_BOBBER_THROW -> aw
    net.minecraft.sounds.SoundEvent BLASTFURNACE_FIRE_CRACKLE -> ax
    net.minecraft.sounds.SoundEvent BOTTLE_EMPTY -> ay
    net.minecraft.sounds.SoundEvent BOTTLE_FILL -> az
    net.minecraft.sounds.SoundEvent BOTTLE_FILL_DRAGONBREATH -> aA
    net.minecraft.sounds.SoundEvent BREWING_STAND_BREW -> aB
    net.minecraft.sounds.SoundEvent BUBBLE_COLUMN_BUBBLE_POP -> aC
    net.minecraft.sounds.SoundEvent BUBBLE_COLUMN_UPWARDS_AMBIENT -> aD
    net.minecraft.sounds.SoundEvent BUBBLE_COLUMN_UPWARDS_INSIDE -> aE
    net.minecraft.sounds.SoundEvent BUBBLE_COLUMN_WHIRLPOOL_AMBIENT -> aF
    net.minecraft.sounds.SoundEvent BUBBLE_COLUMN_WHIRLPOOL_INSIDE -> aG
    net.minecraft.sounds.SoundEvent BUCKET_EMPTY -> aH
    net.minecraft.sounds.SoundEvent BUCKET_EMPTY_FISH -> aI
    net.minecraft.sounds.SoundEvent BUCKET_EMPTY_LAVA -> aJ
    net.minecraft.sounds.SoundEvent BUCKET_FILL -> aK
    net.minecraft.sounds.SoundEvent BUCKET_FILL_FISH -> aL
    net.minecraft.sounds.SoundEvent BUCKET_FILL_LAVA -> aM
    net.minecraft.sounds.SoundEvent CAMPFIRE_CRACKLE -> aN
    net.minecraft.sounds.SoundEvent CAT_AMBIENT -> aO
    net.minecraft.sounds.SoundEvent CAT_STRAY_AMBIENT -> aP
    net.minecraft.sounds.SoundEvent CAT_DEATH -> aQ
    net.minecraft.sounds.SoundEvent CAT_EAT -> aR
    net.minecraft.sounds.SoundEvent CAT_HISS -> aS
    net.minecraft.sounds.SoundEvent CAT_BEG_FOR_FOOD -> aT
    net.minecraft.sounds.SoundEvent CAT_HURT -> aU
    net.minecraft.sounds.SoundEvent CAT_PURR -> aV
    net.minecraft.sounds.SoundEvent CAT_PURREOW -> aW
    net.minecraft.sounds.SoundEvent CHEST_CLOSE -> aX
    net.minecraft.sounds.SoundEvent CHEST_LOCKED -> aY
    net.minecraft.sounds.SoundEvent CHEST_OPEN -> aZ
    net.minecraft.sounds.SoundEvent CHICKEN_AMBIENT -> ba
    net.minecraft.sounds.SoundEvent CHICKEN_DEATH -> bb
    net.minecraft.sounds.SoundEvent CHICKEN_EGG -> bc
    net.minecraft.sounds.SoundEvent CHICKEN_HURT -> bd
    net.minecraft.sounds.SoundEvent CHICKEN_STEP -> be
    net.minecraft.sounds.SoundEvent CHORUS_FLOWER_DEATH -> bf
    net.minecraft.sounds.SoundEvent CHORUS_FLOWER_GROW -> bg
    net.minecraft.sounds.SoundEvent CHORUS_FRUIT_TELEPORT -> bh
    net.minecraft.sounds.SoundEvent WOOL_BREAK -> bi
    net.minecraft.sounds.SoundEvent WOOL_FALL -> bj
    net.minecraft.sounds.SoundEvent WOOL_HIT -> bk
    net.minecraft.sounds.SoundEvent WOOL_PLACE -> bl
    net.minecraft.sounds.SoundEvent WOOL_STEP -> bm
    net.minecraft.sounds.SoundEvent COD_AMBIENT -> bn
    net.minecraft.sounds.SoundEvent COD_DEATH -> bo
    net.minecraft.sounds.SoundEvent COD_FLOP -> bp
    net.minecraft.sounds.SoundEvent COD_HURT -> bq
    net.minecraft.sounds.SoundEvent COMPARATOR_CLICK -> br
    net.minecraft.sounds.SoundEvent COMPOSTER_EMPTY -> bs
    net.minecraft.sounds.SoundEvent COMPOSTER_FILL -> bt
    net.minecraft.sounds.SoundEvent COMPOSTER_FILL_SUCCESS -> bu
    net.minecraft.sounds.SoundEvent COMPOSTER_READY -> bv
    net.minecraft.sounds.SoundEvent CONDUIT_ACTIVATE -> bw
    net.minecraft.sounds.SoundEvent CONDUIT_AMBIENT -> bx
    net.minecraft.sounds.SoundEvent CONDUIT_AMBIENT_SHORT -> by
    net.minecraft.sounds.SoundEvent CONDUIT_ATTACK_TARGET -> bz
    net.minecraft.sounds.SoundEvent CONDUIT_DEACTIVATE -> bA
    net.minecraft.sounds.SoundEvent COW_AMBIENT -> bB
    net.minecraft.sounds.SoundEvent COW_DEATH -> bC
    net.minecraft.sounds.SoundEvent COW_HURT -> bD
    net.minecraft.sounds.SoundEvent COW_MILK -> bE
    net.minecraft.sounds.SoundEvent COW_STEP -> bF
    net.minecraft.sounds.SoundEvent CREEPER_DEATH -> bG
    net.minecraft.sounds.SoundEvent CREEPER_HURT -> bH
    net.minecraft.sounds.SoundEvent CREEPER_PRIMED -> bI
    net.minecraft.sounds.SoundEvent CROP_BREAK -> bJ
    net.minecraft.sounds.SoundEvent CROP_PLANTED -> bK
    net.minecraft.sounds.SoundEvent CROSSBOW_HIT -> bL
    net.minecraft.sounds.SoundEvent CROSSBOW_LOADING_END -> bM
    net.minecraft.sounds.SoundEvent CROSSBOW_LOADING_MIDDLE -> bN
    net.minecraft.sounds.SoundEvent CROSSBOW_LOADING_START -> bO
    net.minecraft.sounds.SoundEvent CROSSBOW_QUICK_CHARGE_1 -> bP
    net.minecraft.sounds.SoundEvent CROSSBOW_QUICK_CHARGE_2 -> bQ
    net.minecraft.sounds.SoundEvent CROSSBOW_QUICK_CHARGE_3 -> bR
    net.minecraft.sounds.SoundEvent CROSSBOW_SHOOT -> bS
    net.minecraft.sounds.SoundEvent DISPENSER_DISPENSE -> bT
    net.minecraft.sounds.SoundEvent DISPENSER_FAIL -> bU
    net.minecraft.sounds.SoundEvent DISPENSER_LAUNCH -> bV
    net.minecraft.sounds.SoundEvent DOLPHIN_AMBIENT -> bW
    net.minecraft.sounds.SoundEvent DOLPHIN_AMBIENT_WATER -> bX
    net.minecraft.sounds.SoundEvent DOLPHIN_ATTACK -> bY
    net.minecraft.sounds.SoundEvent DOLPHIN_DEATH -> bZ
    net.minecraft.sounds.SoundEvent DOLPHIN_EAT -> ca
    net.minecraft.sounds.SoundEvent DOLPHIN_HURT -> cb
    net.minecraft.sounds.SoundEvent DOLPHIN_JUMP -> cc
    net.minecraft.sounds.SoundEvent DOLPHIN_PLAY -> cd
    net.minecraft.sounds.SoundEvent DOLPHIN_SPLASH -> ce
    net.minecraft.sounds.SoundEvent DOLPHIN_SWIM -> cf
    net.minecraft.sounds.SoundEvent DONKEY_AMBIENT -> cg
    net.minecraft.sounds.SoundEvent DONKEY_ANGRY -> ch
    net.minecraft.sounds.SoundEvent DONKEY_CHEST -> ci
    net.minecraft.sounds.SoundEvent DONKEY_DEATH -> cj
    net.minecraft.sounds.SoundEvent DONKEY_HURT -> ck
    net.minecraft.sounds.SoundEvent DROWNED_AMBIENT -> cl
    net.minecraft.sounds.SoundEvent DROWNED_AMBIENT_WATER -> cm
    net.minecraft.sounds.SoundEvent DROWNED_DEATH -> cn
    net.minecraft.sounds.SoundEvent DROWNED_DEATH_WATER -> co
    net.minecraft.sounds.SoundEvent DROWNED_HURT -> cp
    net.minecraft.sounds.SoundEvent DROWNED_HURT_WATER -> cq
    net.minecraft.sounds.SoundEvent DROWNED_SHOOT -> cr
    net.minecraft.sounds.SoundEvent DROWNED_STEP -> cs
    net.minecraft.sounds.SoundEvent DROWNED_SWIM -> ct
    net.minecraft.sounds.SoundEvent EGG_THROW -> cu
    net.minecraft.sounds.SoundEvent ELDER_GUARDIAN_AMBIENT -> cv
    net.minecraft.sounds.SoundEvent ELDER_GUARDIAN_AMBIENT_LAND -> cw
    net.minecraft.sounds.SoundEvent ELDER_GUARDIAN_CURSE -> cx
    net.minecraft.sounds.SoundEvent ELDER_GUARDIAN_DEATH -> cy
    net.minecraft.sounds.SoundEvent ELDER_GUARDIAN_DEATH_LAND -> cz
    net.minecraft.sounds.SoundEvent ELDER_GUARDIAN_FLOP -> cA
    net.minecraft.sounds.SoundEvent ELDER_GUARDIAN_HURT -> cB
    net.minecraft.sounds.SoundEvent ELDER_GUARDIAN_HURT_LAND -> cC
    net.minecraft.sounds.SoundEvent ELYTRA_FLYING -> cD
    net.minecraft.sounds.SoundEvent ENCHANTMENT_TABLE_USE -> cE
    net.minecraft.sounds.SoundEvent ENDER_CHEST_CLOSE -> cF
    net.minecraft.sounds.SoundEvent ENDER_CHEST_OPEN -> cG
    net.minecraft.sounds.SoundEvent ENDER_DRAGON_AMBIENT -> cH
    net.minecraft.sounds.SoundEvent ENDER_DRAGON_DEATH -> cI
    net.minecraft.sounds.SoundEvent DRAGON_FIREBALL_EXPLODE -> cJ
    net.minecraft.sounds.SoundEvent ENDER_DRAGON_FLAP -> cK
    net.minecraft.sounds.SoundEvent ENDER_DRAGON_GROWL -> cL
    net.minecraft.sounds.SoundEvent ENDER_DRAGON_HURT -> cM
    net.minecraft.sounds.SoundEvent ENDER_DRAGON_SHOOT -> cN
    net.minecraft.sounds.SoundEvent ENDER_EYE_DEATH -> cO
    net.minecraft.sounds.SoundEvent ENDER_EYE_LAUNCH -> cP
    net.minecraft.sounds.SoundEvent ENDERMAN_AMBIENT -> cQ
    net.minecraft.sounds.SoundEvent ENDERMAN_DEATH -> cR
    net.minecraft.sounds.SoundEvent ENDERMAN_HURT -> cS
    net.minecraft.sounds.SoundEvent ENDERMAN_SCREAM -> cT
    net.minecraft.sounds.SoundEvent ENDERMAN_STARE -> cU
    net.minecraft.sounds.SoundEvent ENDERMAN_TELEPORT -> cV
    net.minecraft.sounds.SoundEvent ENDERMITE_AMBIENT -> cW
    net.minecraft.sounds.SoundEvent ENDERMITE_DEATH -> cX
    net.minecraft.sounds.SoundEvent ENDERMITE_HURT -> cY
    net.minecraft.sounds.SoundEvent ENDERMITE_STEP -> cZ
    net.minecraft.sounds.SoundEvent ENDER_PEARL_THROW -> da
    net.minecraft.sounds.SoundEvent END_GATEWAY_SPAWN -> db
    net.minecraft.sounds.SoundEvent END_PORTAL_FRAME_FILL -> dc
    net.minecraft.sounds.SoundEvent END_PORTAL_SPAWN -> dd
    net.minecraft.sounds.SoundEvent EVOKER_AMBIENT -> de
    net.minecraft.sounds.SoundEvent EVOKER_CAST_SPELL -> df
    net.minecraft.sounds.SoundEvent EVOKER_CELEBRATE -> dg
    net.minecraft.sounds.SoundEvent EVOKER_DEATH -> dh
    net.minecraft.sounds.SoundEvent EVOKER_FANGS_ATTACK -> di
    net.minecraft.sounds.SoundEvent EVOKER_HURT -> dj
    net.minecraft.sounds.SoundEvent EVOKER_PREPARE_ATTACK -> dk
    net.minecraft.sounds.SoundEvent EVOKER_PREPARE_SUMMON -> dl
    net.minecraft.sounds.SoundEvent EVOKER_PREPARE_WOLOLO -> dm
    net.minecraft.sounds.SoundEvent EXPERIENCE_BOTTLE_THROW -> dn
    net.minecraft.sounds.SoundEvent EXPERIENCE_ORB_PICKUP -> do
    net.minecraft.sounds.SoundEvent FENCE_GATE_CLOSE -> dp
    net.minecraft.sounds.SoundEvent FENCE_GATE_OPEN -> dq
    net.minecraft.sounds.SoundEvent FIRECHARGE_USE -> dr
    net.minecraft.sounds.SoundEvent FIREWORK_ROCKET_BLAST -> ds
    net.minecraft.sounds.SoundEvent FIREWORK_ROCKET_BLAST_FAR -> dt
    net.minecraft.sounds.SoundEvent FIREWORK_ROCKET_LARGE_BLAST -> du
    net.minecraft.sounds.SoundEvent FIREWORK_ROCKET_LARGE_BLAST_FAR -> dv
    net.minecraft.sounds.SoundEvent FIREWORK_ROCKET_LAUNCH -> dw
    net.minecraft.sounds.SoundEvent FIREWORK_ROCKET_SHOOT -> dx
    net.minecraft.sounds.SoundEvent FIREWORK_ROCKET_TWINKLE -> dy
    net.minecraft.sounds.SoundEvent FIREWORK_ROCKET_TWINKLE_FAR -> dz
    net.minecraft.sounds.SoundEvent FIRE_AMBIENT -> dA
    net.minecraft.sounds.SoundEvent FIRE_EXTINGUISH -> dB
    net.minecraft.sounds.SoundEvent FISH_SWIM -> dC
    net.minecraft.sounds.SoundEvent FLINTANDSTEEL_USE -> dD
    net.minecraft.sounds.SoundEvent FOX_AGGRO -> dE
    net.minecraft.sounds.SoundEvent FOX_AMBIENT -> dF
    net.minecraft.sounds.SoundEvent FOX_BITE -> dG
    net.minecraft.sounds.SoundEvent FOX_DEATH -> dH
    net.minecraft.sounds.SoundEvent FOX_EAT -> dI
    net.minecraft.sounds.SoundEvent FOX_HURT -> dJ
    net.minecraft.sounds.SoundEvent FOX_SCREECH -> dK
    net.minecraft.sounds.SoundEvent FOX_SLEEP -> dL
    net.minecraft.sounds.SoundEvent FOX_SNIFF -> dM
    net.minecraft.sounds.SoundEvent FOX_SPIT -> dN
    net.minecraft.sounds.SoundEvent FURNACE_FIRE_CRACKLE -> dO
    net.minecraft.sounds.SoundEvent GENERIC_BIG_FALL -> dP
    net.minecraft.sounds.SoundEvent GENERIC_BURN -> dQ
    net.minecraft.sounds.SoundEvent GENERIC_DEATH -> dR
    net.minecraft.sounds.SoundEvent GENERIC_DRINK -> dS
    net.minecraft.sounds.SoundEvent GENERIC_EAT -> dT
    net.minecraft.sounds.SoundEvent GENERIC_EXPLODE -> dU
    net.minecraft.sounds.SoundEvent GENERIC_EXTINGUISH_FIRE -> dV
    net.minecraft.sounds.SoundEvent GENERIC_HURT -> dW
    net.minecraft.sounds.SoundEvent GENERIC_SMALL_FALL -> dX
    net.minecraft.sounds.SoundEvent GENERIC_SPLASH -> dY
    net.minecraft.sounds.SoundEvent GENERIC_SWIM -> dZ
    net.minecraft.sounds.SoundEvent GHAST_AMBIENT -> ea
    net.minecraft.sounds.SoundEvent GHAST_DEATH -> eb
    net.minecraft.sounds.SoundEvent GHAST_HURT -> ec
    net.minecraft.sounds.SoundEvent GHAST_SCREAM -> ed
    net.minecraft.sounds.SoundEvent GHAST_SHOOT -> ee
    net.minecraft.sounds.SoundEvent GHAST_WARN -> ef
    net.minecraft.sounds.SoundEvent GLASS_BREAK -> eg
    net.minecraft.sounds.SoundEvent GLASS_FALL -> eh
    net.minecraft.sounds.SoundEvent GLASS_HIT -> ei
    net.minecraft.sounds.SoundEvent GLASS_PLACE -> ej
    net.minecraft.sounds.SoundEvent GLASS_STEP -> ek
    net.minecraft.sounds.SoundEvent GRASS_BREAK -> el
    net.minecraft.sounds.SoundEvent GRASS_FALL -> em
    net.minecraft.sounds.SoundEvent GRASS_HIT -> en
    net.minecraft.sounds.SoundEvent GRASS_PLACE -> eo
    net.minecraft.sounds.SoundEvent GRASS_STEP -> ep
    net.minecraft.sounds.SoundEvent WET_GRASS_BREAK -> eq
    net.minecraft.sounds.SoundEvent WET_GRASS_FALL -> er
    net.minecraft.sounds.SoundEvent WET_GRASS_HIT -> es
    net.minecraft.sounds.SoundEvent WET_GRASS_PLACE -> et
    net.minecraft.sounds.SoundEvent WET_GRASS_STEP -> eu
    net.minecraft.sounds.SoundEvent CORAL_BLOCK_BREAK -> ev
    net.minecraft.sounds.SoundEvent CORAL_BLOCK_FALL -> ew
    net.minecraft.sounds.SoundEvent CORAL_BLOCK_HIT -> ex
    net.minecraft.sounds.SoundEvent CORAL_BLOCK_PLACE -> ey
    net.minecraft.sounds.SoundEvent CORAL_BLOCK_STEP -> ez
    net.minecraft.sounds.SoundEvent GRAVEL_BREAK -> eA
    net.minecraft.sounds.SoundEvent GRAVEL_FALL -> eB
    net.minecraft.sounds.SoundEvent GRAVEL_HIT -> eC
    net.minecraft.sounds.SoundEvent GRAVEL_PLACE -> eD
    net.minecraft.sounds.SoundEvent GRAVEL_STEP -> eE
    net.minecraft.sounds.SoundEvent GRINDSTONE_USE -> eF
    net.minecraft.sounds.SoundEvent GUARDIAN_AMBIENT -> eG
    net.minecraft.sounds.SoundEvent GUARDIAN_AMBIENT_LAND -> eH
    net.minecraft.sounds.SoundEvent GUARDIAN_ATTACK -> eI
    net.minecraft.sounds.SoundEvent GUARDIAN_DEATH -> eJ
    net.minecraft.sounds.SoundEvent GUARDIAN_DEATH_LAND -> eK
    net.minecraft.sounds.SoundEvent GUARDIAN_FLOP -> eL
    net.minecraft.sounds.SoundEvent GUARDIAN_HURT -> eM
    net.minecraft.sounds.SoundEvent GUARDIAN_HURT_LAND -> eN
    net.minecraft.sounds.SoundEvent HOE_TILL -> eO
    net.minecraft.sounds.SoundEvent HONEY_BLOCK_BREAK -> eP
    net.minecraft.sounds.SoundEvent HONEY_BLOCK_FALL -> eQ
    net.minecraft.sounds.SoundEvent HONEY_BLOCK_HIT -> eR
    net.minecraft.sounds.SoundEvent HONEY_BLOCK_PLACE -> eS
    net.minecraft.sounds.SoundEvent HONEY_BLOCK_SLIDE -> eT
    net.minecraft.sounds.SoundEvent HONEY_BLOCK_STEP -> eU
    net.minecraft.sounds.SoundEvent HONEY_DRINK -> eV
    net.minecraft.sounds.SoundEvent HORSE_AMBIENT -> eW
    net.minecraft.sounds.SoundEvent HORSE_ANGRY -> eX
    net.minecraft.sounds.SoundEvent HORSE_ARMOR -> eY
    net.minecraft.sounds.SoundEvent HORSE_BREATHE -> eZ
    net.minecraft.sounds.SoundEvent HORSE_DEATH -> fa
    net.minecraft.sounds.SoundEvent HORSE_EAT -> fb
    net.minecraft.sounds.SoundEvent HORSE_GALLOP -> fc
    net.minecraft.sounds.SoundEvent HORSE_HURT -> fd
    net.minecraft.sounds.SoundEvent HORSE_JUMP -> fe
    net.minecraft.sounds.SoundEvent HORSE_LAND -> ff
    net.minecraft.sounds.SoundEvent HORSE_SADDLE -> fg
    net.minecraft.sounds.SoundEvent HORSE_STEP -> fh
    net.minecraft.sounds.SoundEvent HORSE_STEP_WOOD -> fi
    net.minecraft.sounds.SoundEvent HOSTILE_BIG_FALL -> fj
    net.minecraft.sounds.SoundEvent HOSTILE_DEATH -> fk
    net.minecraft.sounds.SoundEvent HOSTILE_HURT -> fl
    net.minecraft.sounds.SoundEvent HOSTILE_SMALL_FALL -> fm
    net.minecraft.sounds.SoundEvent HOSTILE_SPLASH -> fn
    net.minecraft.sounds.SoundEvent HOSTILE_SWIM -> fo
    net.minecraft.sounds.SoundEvent HUSK_AMBIENT -> fp
    net.minecraft.sounds.SoundEvent HUSK_CONVERTED_TO_ZOMBIE -> fq
    net.minecraft.sounds.SoundEvent HUSK_DEATH -> fr
    net.minecraft.sounds.SoundEvent HUSK_HURT -> fs
    net.minecraft.sounds.SoundEvent HUSK_STEP -> ft
    net.minecraft.sounds.SoundEvent RAVAGER_AMBIENT -> fu
    net.minecraft.sounds.SoundEvent RAVAGER_ATTACK -> fv
    net.minecraft.sounds.SoundEvent RAVAGER_CELEBRATE -> fw
    net.minecraft.sounds.SoundEvent RAVAGER_DEATH -> fx
    net.minecraft.sounds.SoundEvent RAVAGER_HURT -> fy
    net.minecraft.sounds.SoundEvent RAVAGER_STEP -> fz
    net.minecraft.sounds.SoundEvent RAVAGER_STUNNED -> fA
    net.minecraft.sounds.SoundEvent RAVAGER_ROAR -> fB
    net.minecraft.sounds.SoundEvent ILLUSIONER_AMBIENT -> fC
    net.minecraft.sounds.SoundEvent ILLUSIONER_CAST_SPELL -> fD
    net.minecraft.sounds.SoundEvent ILLUSIONER_DEATH -> fE
    net.minecraft.sounds.SoundEvent ILLUSIONER_HURT -> fF
    net.minecraft.sounds.SoundEvent ILLUSIONER_MIRROR_MOVE -> fG
    net.minecraft.sounds.SoundEvent ILLUSIONER_PREPARE_BLINDNESS -> fH
    net.minecraft.sounds.SoundEvent ILLUSIONER_PREPARE_MIRROR -> fI
    net.minecraft.sounds.SoundEvent IRON_DOOR_CLOSE -> fJ
    net.minecraft.sounds.SoundEvent IRON_DOOR_OPEN -> fK
    net.minecraft.sounds.SoundEvent IRON_GOLEM_ATTACK -> fL
    net.minecraft.sounds.SoundEvent IRON_GOLEM_DAMAGE -> fM
    net.minecraft.sounds.SoundEvent IRON_GOLEM_DEATH -> fN
    net.minecraft.sounds.SoundEvent IRON_GOLEM_HURT -> fO
    net.minecraft.sounds.SoundEvent IRON_GOLEM_REPAIR -> fP
    net.minecraft.sounds.SoundEvent IRON_GOLEM_STEP -> fQ
    net.minecraft.sounds.SoundEvent IRON_TRAPDOOR_CLOSE -> fR
    net.minecraft.sounds.SoundEvent IRON_TRAPDOOR_OPEN -> fS
    net.minecraft.sounds.SoundEvent ITEM_FRAME_ADD_ITEM -> fT
    net.minecraft.sounds.SoundEvent ITEM_FRAME_BREAK -> fU
    net.minecraft.sounds.SoundEvent ITEM_FRAME_PLACE -> fV
    net.minecraft.sounds.SoundEvent ITEM_FRAME_REMOVE_ITEM -> fW
    net.minecraft.sounds.SoundEvent ITEM_FRAME_ROTATE_ITEM -> fX
    net.minecraft.sounds.SoundEvent ITEM_BREAK -> fY
    net.minecraft.sounds.SoundEvent ITEM_PICKUP -> fZ
    net.minecraft.sounds.SoundEvent LADDER_BREAK -> ga
    net.minecraft.sounds.SoundEvent LADDER_FALL -> gb
    net.minecraft.sounds.SoundEvent LADDER_HIT -> gc
    net.minecraft.sounds.SoundEvent LADDER_PLACE -> gd
    net.minecraft.sounds.SoundEvent LADDER_STEP -> ge
    net.minecraft.sounds.SoundEvent LANTERN_BREAK -> gf
    net.minecraft.sounds.SoundEvent LANTERN_FALL -> gg
    net.minecraft.sounds.SoundEvent LANTERN_HIT -> gh
    net.minecraft.sounds.SoundEvent LANTERN_PLACE -> gi
    net.minecraft.sounds.SoundEvent LANTERN_STEP -> gj
    net.minecraft.sounds.SoundEvent LAVA_AMBIENT -> gk
    net.minecraft.sounds.SoundEvent LAVA_EXTINGUISH -> gl
    net.minecraft.sounds.SoundEvent LAVA_POP -> gm
    net.minecraft.sounds.SoundEvent LEASH_KNOT_BREAK -> gn
    net.minecraft.sounds.SoundEvent LEASH_KNOT_PLACE -> go
    net.minecraft.sounds.SoundEvent LEVER_CLICK -> gp
    net.minecraft.sounds.SoundEvent LIGHTNING_BOLT_IMPACT -> gq
    net.minecraft.sounds.SoundEvent LIGHTNING_BOLT_THUNDER -> gr
    net.minecraft.sounds.SoundEvent LINGERING_POTION_THROW -> gs
    net.minecraft.sounds.SoundEvent LLAMA_AMBIENT -> gt
    net.minecraft.sounds.SoundEvent LLAMA_ANGRY -> gu
    net.minecraft.sounds.SoundEvent LLAMA_CHEST -> gv
    net.minecraft.sounds.SoundEvent LLAMA_DEATH -> gw
    net.minecraft.sounds.SoundEvent LLAMA_EAT -> gx
    net.minecraft.sounds.SoundEvent LLAMA_HURT -> gy
    net.minecraft.sounds.SoundEvent LLAMA_SPIT -> gz
    net.minecraft.sounds.SoundEvent LLAMA_STEP -> gA
    net.minecraft.sounds.SoundEvent LLAMA_SWAG -> gB
    net.minecraft.sounds.SoundEvent MAGMA_CUBE_DEATH -> gC
    net.minecraft.sounds.SoundEvent MAGMA_CUBE_HURT -> gD
    net.minecraft.sounds.SoundEvent MAGMA_CUBE_JUMP -> gE
    net.minecraft.sounds.SoundEvent MAGMA_CUBE_SQUISH -> gF
    net.minecraft.sounds.SoundEvent METAL_BREAK -> gG
    net.minecraft.sounds.SoundEvent METAL_FALL -> gH
    net.minecraft.sounds.SoundEvent METAL_HIT -> gI
    net.minecraft.sounds.SoundEvent METAL_PLACE -> gJ
    net.minecraft.sounds.SoundEvent METAL_PRESSURE_PLATE_CLICK_OFF -> gK
    net.minecraft.sounds.SoundEvent METAL_PRESSURE_PLATE_CLICK_ON -> gL
    net.minecraft.sounds.SoundEvent METAL_STEP -> gM
    net.minecraft.sounds.SoundEvent MINECART_INSIDE -> gN
    net.minecraft.sounds.SoundEvent MINECART_RIDING -> gO
    net.minecraft.sounds.SoundEvent MOOSHROOM_CONVERT -> gP
    net.minecraft.sounds.SoundEvent MOOSHROOM_EAT -> gQ
    net.minecraft.sounds.SoundEvent MOOSHROOM_MILK -> gR
    net.minecraft.sounds.SoundEvent MOOSHROOM_MILK_SUSPICIOUSLY -> gS
    net.minecraft.sounds.SoundEvent MOOSHROOM_SHEAR -> gT
    net.minecraft.sounds.SoundEvent MULE_AMBIENT -> gU
    net.minecraft.sounds.SoundEvent MULE_CHEST -> gV
    net.minecraft.sounds.SoundEvent MULE_DEATH -> gW
    net.minecraft.sounds.SoundEvent MULE_HURT -> gX
    net.minecraft.sounds.SoundEvent MUSIC_CREATIVE -> gY
    net.minecraft.sounds.SoundEvent MUSIC_CREDITS -> gZ
    net.minecraft.sounds.SoundEvent MUSIC_DRAGON -> ha
    net.minecraft.sounds.SoundEvent MUSIC_END -> hb
    net.minecraft.sounds.SoundEvent MUSIC_GAME -> hc
    net.minecraft.sounds.SoundEvent MUSIC_MENU -> hd
    net.minecraft.sounds.SoundEvent MUSIC_NETHER -> he
    net.minecraft.sounds.SoundEvent MUSIC_UNDER_WATER -> hf
    net.minecraft.sounds.SoundEvent NETHER_WART_BREAK -> hg
    net.minecraft.sounds.SoundEvent NETHER_WART_PLANTED -> hh
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_BASEDRUM -> hi
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_BASS -> hj
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_BELL -> hk
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_CHIME -> hl
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_FLUTE -> hm
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_GUITAR -> hn
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_HARP -> ho
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_HAT -> hp
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_PLING -> hq
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_SNARE -> hr
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_XYLOPHONE -> hs
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_IRON_XYLOPHONE -> ht
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_COW_BELL -> hu
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_DIDGERIDOO -> hv
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_BIT -> hw
    net.minecraft.sounds.SoundEvent NOTE_BLOCK_BANJO -> hx
    net.minecraft.sounds.SoundEvent OCELOT_HURT -> hy
    net.minecraft.sounds.SoundEvent OCELOT_AMBIENT -> hz
    net.minecraft.sounds.SoundEvent OCELOT_DEATH -> hA
    net.minecraft.sounds.SoundEvent PAINTING_BREAK -> hB
    net.minecraft.sounds.SoundEvent PAINTING_PLACE -> hC
    net.minecraft.sounds.SoundEvent PANDA_PRE_SNEEZE -> hD
    net.minecraft.sounds.SoundEvent PANDA_SNEEZE -> hE
    net.minecraft.sounds.SoundEvent PANDA_AMBIENT -> hF
    net.minecraft.sounds.SoundEvent PANDA_DEATH -> hG
    net.minecraft.sounds.SoundEvent PANDA_EAT -> hH
    net.minecraft.sounds.SoundEvent PANDA_STEP -> hI
    net.minecraft.sounds.SoundEvent PANDA_CANT_BREED -> hJ
    net.minecraft.sounds.SoundEvent PANDA_AGGRESSIVE_AMBIENT -> hK
    net.minecraft.sounds.SoundEvent PANDA_WORRIED_AMBIENT -> hL
    net.minecraft.sounds.SoundEvent PANDA_HURT -> hM
    net.minecraft.sounds.SoundEvent PANDA_BITE -> hN
    net.minecraft.sounds.SoundEvent PARROT_AMBIENT -> hO
    net.minecraft.sounds.SoundEvent PARROT_DEATH -> hP
    net.minecraft.sounds.SoundEvent PARROT_EAT -> hQ
    net.minecraft.sounds.SoundEvent PARROT_FLY -> hR
    net.minecraft.sounds.SoundEvent PARROT_HURT -> hS
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_BLAZE -> hT
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_CREEPER -> hU
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_DROWNED -> hV
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_ELDER_GUARDIAN -> hW
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_ENDER_DRAGON -> hX
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_ENDERMITE -> hY
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_EVOKER -> hZ
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_GHAST -> ia
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_GUARDIAN -> ib
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_HUSK -> ic
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_ILLUSIONER -> id
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_MAGMA_CUBE -> ie
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_PHANTOM -> if
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_PILLAGER -> ig
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_RAVAGER -> ih
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_SHULKER -> ii
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_SILVERFISH -> ij
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_SKELETON -> ik
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_SLIME -> il
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_SPIDER -> im
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_STRAY -> in
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_VEX -> io
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_VINDICATOR -> ip
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_WITCH -> iq
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_WITHER -> ir
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_WITHER_SKELETON -> is
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_ZOMBIE -> it
    net.minecraft.sounds.SoundEvent PARROT_IMITATE_ZOMBIE_VILLAGER -> iu
    net.minecraft.sounds.SoundEvent PARROT_STEP -> iv
    net.minecraft.sounds.SoundEvent PHANTOM_AMBIENT -> iw
    net.minecraft.sounds.SoundEvent PHANTOM_BITE -> ix
    net.minecraft.sounds.SoundEvent PHANTOM_DEATH -> iy
    net.minecraft.sounds.SoundEvent PHANTOM_FLAP -> iz
    net.minecraft.sounds.SoundEvent PHANTOM_HURT -> iA
    net.minecraft.sounds.SoundEvent PHANTOM_SWOOP -> iB
    net.minecraft.sounds.SoundEvent PIG_AMBIENT -> iC
    net.minecraft.sounds.SoundEvent PIG_DEATH -> iD
    net.minecraft.sounds.SoundEvent PIG_HURT -> iE
    net.minecraft.sounds.SoundEvent PIG_SADDLE -> iF
    net.minecraft.sounds.SoundEvent PIG_STEP -> iG
    net.minecraft.sounds.SoundEvent PILLAGER_AMBIENT -> iH
    net.minecraft.sounds.SoundEvent PILLAGER_CELEBRATE -> iI
    net.minecraft.sounds.SoundEvent PILLAGER_DEATH -> iJ
    net.minecraft.sounds.SoundEvent PILLAGER_HURT -> iK
    net.minecraft.sounds.SoundEvent PISTON_CONTRACT -> iL
    net.minecraft.sounds.SoundEvent PISTON_EXTEND -> iM
    net.minecraft.sounds.SoundEvent PLAYER_ATTACK_CRIT -> iN
    net.minecraft.sounds.SoundEvent PLAYER_ATTACK_KNOCKBACK -> iO
    net.minecraft.sounds.SoundEvent PLAYER_ATTACK_NODAMAGE -> iP
    net.minecraft.sounds.SoundEvent PLAYER_ATTACK_STRONG -> iQ
    net.minecraft.sounds.SoundEvent PLAYER_ATTACK_SWEEP -> iR
    net.minecraft.sounds.SoundEvent PLAYER_ATTACK_WEAK -> iS
    net.minecraft.sounds.SoundEvent PLAYER_BIG_FALL -> iT
    net.minecraft.sounds.SoundEvent PLAYER_BREATH -> iU
    net.minecraft.sounds.SoundEvent PLAYER_BURP -> iV
    net.minecraft.sounds.SoundEvent PLAYER_DEATH -> iW
    net.minecraft.sounds.SoundEvent PLAYER_HURT -> iX
    net.minecraft.sounds.SoundEvent PLAYER_HURT_DROWN -> iY
    net.minecraft.sounds.SoundEvent PLAYER_HURT_ON_FIRE -> iZ
    net.minecraft.sounds.SoundEvent PLAYER_HURT_SWEET_BERRY_BUSH -> ja
    net.minecraft.sounds.SoundEvent PLAYER_LEVELUP -> jb
    net.minecraft.sounds.SoundEvent PLAYER_SMALL_FALL -> jc
    net.minecraft.sounds.SoundEvent PLAYER_SPLASH -> jd
    net.minecraft.sounds.SoundEvent PLAYER_SPLASH_HIGH_SPEED -> je
    net.minecraft.sounds.SoundEvent PLAYER_SWIM -> jf
    net.minecraft.sounds.SoundEvent POLAR_BEAR_AMBIENT -> jg
    net.minecraft.sounds.SoundEvent POLAR_BEAR_AMBIENT_BABY -> jh
    net.minecraft.sounds.SoundEvent POLAR_BEAR_DEATH -> ji
    net.minecraft.sounds.SoundEvent POLAR_BEAR_HURT -> jj
    net.minecraft.sounds.SoundEvent POLAR_BEAR_STEP -> jk
    net.minecraft.sounds.SoundEvent POLAR_BEAR_WARNING -> jl
    net.minecraft.sounds.SoundEvent PORTAL_AMBIENT -> jm
    net.minecraft.sounds.SoundEvent PORTAL_TRAVEL -> jn
    net.minecraft.sounds.SoundEvent PORTAL_TRIGGER -> jo
    net.minecraft.sounds.SoundEvent PUFFER_FISH_AMBIENT -> jp
    net.minecraft.sounds.SoundEvent PUFFER_FISH_BLOW_OUT -> jq
    net.minecraft.sounds.SoundEvent PUFFER_FISH_BLOW_UP -> jr
    net.minecraft.sounds.SoundEvent PUFFER_FISH_DEATH -> js
    net.minecraft.sounds.SoundEvent PUFFER_FISH_FLOP -> jt
    net.minecraft.sounds.SoundEvent PUFFER_FISH_HURT -> ju
    net.minecraft.sounds.SoundEvent PUFFER_FISH_STING -> jv
    net.minecraft.sounds.SoundEvent PUMPKIN_CARVE -> jw
    net.minecraft.sounds.SoundEvent RABBIT_AMBIENT -> jx
    net.minecraft.sounds.SoundEvent RABBIT_ATTACK -> jy
    net.minecraft.sounds.SoundEvent RABBIT_DEATH -> jz
    net.minecraft.sounds.SoundEvent RABBIT_HURT -> jA
    net.minecraft.sounds.SoundEvent RABBIT_JUMP -> jB
    net.minecraft.sounds.SoundEvent RAID_HORN -> jC
    net.minecraft.sounds.SoundEvent MUSIC_DISC_11 -> jD
    net.minecraft.sounds.SoundEvent MUSIC_DISC_13 -> jE
    net.minecraft.sounds.SoundEvent MUSIC_DISC_BLOCKS -> jF
    net.minecraft.sounds.SoundEvent MUSIC_DISC_CAT -> jG
    net.minecraft.sounds.SoundEvent MUSIC_DISC_CHIRP -> jH
    net.minecraft.sounds.SoundEvent MUSIC_DISC_FAR -> jI
    net.minecraft.sounds.SoundEvent MUSIC_DISC_MALL -> jJ
    net.minecraft.sounds.SoundEvent MUSIC_DISC_MELLOHI -> jK
    net.minecraft.sounds.SoundEvent MUSIC_DISC_STAL -> jL
    net.minecraft.sounds.SoundEvent MUSIC_DISC_STRAD -> jM
    net.minecraft.sounds.SoundEvent MUSIC_DISC_WAIT -> jN
    net.minecraft.sounds.SoundEvent MUSIC_DISC_WARD -> jO
    net.minecraft.sounds.SoundEvent REDSTONE_TORCH_BURNOUT -> jP
    net.minecraft.sounds.SoundEvent SALMON_AMBIENT -> jQ
    net.minecraft.sounds.SoundEvent SALMON_DEATH -> jR
    net.minecraft.sounds.SoundEvent SALMON_FLOP -> jS
    net.minecraft.sounds.SoundEvent SALMON_HURT -> jT
    net.minecraft.sounds.SoundEvent SAND_BREAK -> jU
    net.minecraft.sounds.SoundEvent SAND_FALL -> jV
    net.minecraft.sounds.SoundEvent SAND_HIT -> jW
    net.minecraft.sounds.SoundEvent SAND_PLACE -> jX
    net.minecraft.sounds.SoundEvent SAND_STEP -> jY
    net.minecraft.sounds.SoundEvent SCAFFOLDING_BREAK -> jZ
    net.minecraft.sounds.SoundEvent SCAFFOLDING_FALL -> ka
    net.minecraft.sounds.SoundEvent SCAFFOLDING_HIT -> kb
    net.minecraft.sounds.SoundEvent SCAFFOLDING_PLACE -> kc
    net.minecraft.sounds.SoundEvent SCAFFOLDING_STEP -> kd
    net.minecraft.sounds.SoundEvent SHEEP_AMBIENT -> ke
    net.minecraft.sounds.SoundEvent SHEEP_DEATH -> kf
    net.minecraft.sounds.SoundEvent SHEEP_HURT -> kg
    net.minecraft.sounds.SoundEvent SHEEP_SHEAR -> kh
    net.minecraft.sounds.SoundEvent SHEEP_STEP -> ki
    net.minecraft.sounds.SoundEvent SHIELD_BLOCK -> kj
    net.minecraft.sounds.SoundEvent SHIELD_BREAK -> kk
    net.minecraft.sounds.SoundEvent SHOVEL_FLATTEN -> kl
    net.minecraft.sounds.SoundEvent SHULKER_AMBIENT -> km
    net.minecraft.sounds.SoundEvent SHULKER_BOX_CLOSE -> kn
    net.minecraft.sounds.SoundEvent SHULKER_BOX_OPEN -> ko
    net.minecraft.sounds.SoundEvent SHULKER_BULLET_HIT -> kp
    net.minecraft.sounds.SoundEvent SHULKER_BULLET_HURT -> kq
    net.minecraft.sounds.SoundEvent SHULKER_CLOSE -> kr
    net.minecraft.sounds.SoundEvent SHULKER_DEATH -> ks
    net.minecraft.sounds.SoundEvent SHULKER_HURT -> kt
    net.minecraft.sounds.SoundEvent SHULKER_HURT_CLOSED -> ku
    net.minecraft.sounds.SoundEvent SHULKER_OPEN -> kv
    net.minecraft.sounds.SoundEvent SHULKER_SHOOT -> kw
    net.minecraft.sounds.SoundEvent SHULKER_TELEPORT -> kx
    net.minecraft.sounds.SoundEvent SILVERFISH_AMBIENT -> ky
    net.minecraft.sounds.SoundEvent SILVERFISH_DEATH -> kz
    net.minecraft.sounds.SoundEvent SILVERFISH_HURT -> kA
    net.minecraft.sounds.SoundEvent SILVERFISH_STEP -> kB
    net.minecraft.sounds.SoundEvent SKELETON_AMBIENT -> kC
    net.minecraft.sounds.SoundEvent SKELETON_DEATH -> kD
    net.minecraft.sounds.SoundEvent SKELETON_HORSE_AMBIENT -> kE
    net.minecraft.sounds.SoundEvent SKELETON_HORSE_DEATH -> kF
    net.minecraft.sounds.SoundEvent SKELETON_HORSE_HURT -> kG
    net.minecraft.sounds.SoundEvent SKELETON_HORSE_SWIM -> kH
    net.minecraft.sounds.SoundEvent SKELETON_HORSE_AMBIENT_WATER -> kI
    net.minecraft.sounds.SoundEvent SKELETON_HORSE_GALLOP_WATER -> kJ
    net.minecraft.sounds.SoundEvent SKELETON_HORSE_JUMP_WATER -> kK
    net.minecraft.sounds.SoundEvent SKELETON_HORSE_STEP_WATER -> kL
    net.minecraft.sounds.SoundEvent SKELETON_HURT -> kM
    net.minecraft.sounds.SoundEvent SKELETON_SHOOT -> kN
    net.minecraft.sounds.SoundEvent SKELETON_STEP -> kO
    net.minecraft.sounds.SoundEvent SLIME_ATTACK -> kP
    net.minecraft.sounds.SoundEvent SLIME_DEATH -> kQ
    net.minecraft.sounds.SoundEvent SLIME_HURT -> kR
    net.minecraft.sounds.SoundEvent SLIME_JUMP -> kS
    net.minecraft.sounds.SoundEvent SLIME_SQUISH -> kT
    net.minecraft.sounds.SoundEvent SLIME_BLOCK_BREAK -> kU
    net.minecraft.sounds.SoundEvent SLIME_BLOCK_FALL -> kV
    net.minecraft.sounds.SoundEvent SLIME_BLOCK_HIT -> kW
    net.minecraft.sounds.SoundEvent SLIME_BLOCK_PLACE -> kX
    net.minecraft.sounds.SoundEvent SLIME_BLOCK_STEP -> kY
    net.minecraft.sounds.SoundEvent MAGMA_CUBE_DEATH_SMALL -> kZ
    net.minecraft.sounds.SoundEvent MAGMA_CUBE_HURT_SMALL -> la
    net.minecraft.sounds.SoundEvent MAGMA_CUBE_SQUISH_SMALL -> lb
    net.minecraft.sounds.SoundEvent SLIME_DEATH_SMALL -> lc
    net.minecraft.sounds.SoundEvent SLIME_HURT_SMALL -> ld
    net.minecraft.sounds.SoundEvent SLIME_JUMP_SMALL -> le
    net.minecraft.sounds.SoundEvent SLIME_SQUISH_SMALL -> lf
    net.minecraft.sounds.SoundEvent SMOKER_SMOKE -> lg
    net.minecraft.sounds.SoundEvent SNOWBALL_THROW -> lh
    net.minecraft.sounds.SoundEvent SNOW_BREAK -> li
    net.minecraft.sounds.SoundEvent SNOW_FALL -> lj
    net.minecraft.sounds.SoundEvent SNOW_GOLEM_AMBIENT -> lk
    net.minecraft.sounds.SoundEvent SNOW_GOLEM_DEATH -> ll
    net.minecraft.sounds.SoundEvent SNOW_GOLEM_HURT -> lm
    net.minecraft.sounds.SoundEvent SNOW_GOLEM_SHOOT -> ln
    net.minecraft.sounds.SoundEvent SNOW_HIT -> lo
    net.minecraft.sounds.SoundEvent SNOW_PLACE -> lp
    net.minecraft.sounds.SoundEvent SNOW_STEP -> lq
    net.minecraft.sounds.SoundEvent SPIDER_AMBIENT -> lr
    net.minecraft.sounds.SoundEvent SPIDER_DEATH -> ls
    net.minecraft.sounds.SoundEvent SPIDER_HURT -> lt
    net.minecraft.sounds.SoundEvent SPIDER_STEP -> lu
    net.minecraft.sounds.SoundEvent SPLASH_POTION_BREAK -> lv
    net.minecraft.sounds.SoundEvent SPLASH_POTION_THROW -> lw
    net.minecraft.sounds.SoundEvent SQUID_AMBIENT -> lx
    net.minecraft.sounds.SoundEvent SQUID_DEATH -> ly
    net.minecraft.sounds.SoundEvent SQUID_HURT -> lz
    net.minecraft.sounds.SoundEvent SQUID_SQUIRT -> lA
    net.minecraft.sounds.SoundEvent STONE_BREAK -> lB
    net.minecraft.sounds.SoundEvent STONE_BUTTON_CLICK_OFF -> lC
    net.minecraft.sounds.SoundEvent STONE_BUTTON_CLICK_ON -> lD
    net.minecraft.sounds.SoundEvent STONE_FALL -> lE
    net.minecraft.sounds.SoundEvent STONE_HIT -> lF
    net.minecraft.sounds.SoundEvent STONE_PLACE -> lG
    net.minecraft.sounds.SoundEvent STONE_PRESSURE_PLATE_CLICK_OFF -> lH
    net.minecraft.sounds.SoundEvent STONE_PRESSURE_PLATE_CLICK_ON -> lI
    net.minecraft.sounds.SoundEvent STONE_STEP -> lJ
    net.minecraft.sounds.SoundEvent STRAY_AMBIENT -> lK
    net.minecraft.sounds.SoundEvent STRAY_DEATH -> lL
    net.minecraft.sounds.SoundEvent STRAY_HURT -> lM
    net.minecraft.sounds.SoundEvent STRAY_STEP -> lN
    net.minecraft.sounds.SoundEvent SWEET_BERRY_BUSH_BREAK -> lO
    net.minecraft.sounds.SoundEvent SWEET_BERRY_BUSH_PLACE -> lP
    net.minecraft.sounds.SoundEvent SWEET_BERRY_BUSH_PICK_BERRIES -> lQ
    net.minecraft.sounds.SoundEvent THORNS_HIT -> lR
    net.minecraft.sounds.SoundEvent TNT_PRIMED -> lS
    net.minecraft.sounds.SoundEvent TOTEM_USE -> lT
    net.minecraft.sounds.SoundEvent TRIDENT_HIT -> lU
    net.minecraft.sounds.SoundEvent TRIDENT_HIT_GROUND -> lV
    net.minecraft.sounds.SoundEvent TRIDENT_RETURN -> lW
    net.minecraft.sounds.SoundEvent TRIDENT_RIPTIDE_1 -> lX
    net.minecraft.sounds.SoundEvent TRIDENT_RIPTIDE_2 -> lY
    net.minecraft.sounds.SoundEvent TRIDENT_RIPTIDE_3 -> lZ
    net.minecraft.sounds.SoundEvent TRIDENT_THROW -> ma
    net.minecraft.sounds.SoundEvent TRIDENT_THUNDER -> mb
    net.minecraft.sounds.SoundEvent TRIPWIRE_ATTACH -> mc
    net.minecraft.sounds.SoundEvent TRIPWIRE_CLICK_OFF -> md
    net.minecraft.sounds.SoundEvent TRIPWIRE_CLICK_ON -> me
    net.minecraft.sounds.SoundEvent TRIPWIRE_DETACH -> mf
    net.minecraft.sounds.SoundEvent TROPICAL_FISH_AMBIENT -> mg
    net.minecraft.sounds.SoundEvent TROPICAL_FISH_DEATH -> mh
    net.minecraft.sounds.SoundEvent TROPICAL_FISH_FLOP -> mi
    net.minecraft.sounds.SoundEvent TROPICAL_FISH_HURT -> mj
    net.minecraft.sounds.SoundEvent TURTLE_AMBIENT_LAND -> mk
    net.minecraft.sounds.SoundEvent TURTLE_DEATH -> ml
    net.minecraft.sounds.SoundEvent TURTLE_DEATH_BABY -> mm
    net.minecraft.sounds.SoundEvent TURTLE_EGG_BREAK -> mn
    net.minecraft.sounds.SoundEvent TURTLE_EGG_CRACK -> mo
    net.minecraft.sounds.SoundEvent TURTLE_EGG_HATCH -> mp
    net.minecraft.sounds.SoundEvent TURTLE_HURT -> mq
    net.minecraft.sounds.SoundEvent TURTLE_HURT_BABY -> mr
    net.minecraft.sounds.SoundEvent TURTLE_LAY_EGG -> ms
    net.minecraft.sounds.SoundEvent TURTLE_SHAMBLE -> mt
    net.minecraft.sounds.SoundEvent TURTLE_SHAMBLE_BABY -> mu
    net.minecraft.sounds.SoundEvent TURTLE_SWIM -> mv
    net.minecraft.sounds.SoundEvent UI_BUTTON_CLICK -> mw
    net.minecraft.sounds.SoundEvent UI_LOOM_SELECT_PATTERN -> mx
    net.minecraft.sounds.SoundEvent UI_LOOM_TAKE_RESULT -> my
    net.minecraft.sounds.SoundEvent UI_CARTOGRAPHY_TABLE_TAKE_RESULT -> mz
    net.minecraft.sounds.SoundEvent UI_STONECUTTER_TAKE_RESULT -> mA
    net.minecraft.sounds.SoundEvent UI_STONECUTTER_SELECT_RECIPE -> mB
    net.minecraft.sounds.SoundEvent UI_TOAST_CHALLENGE_COMPLETE -> mC
    net.minecraft.sounds.SoundEvent UI_TOAST_IN -> mD
    net.minecraft.sounds.SoundEvent UI_TOAST_OUT -> mE
    net.minecraft.sounds.SoundEvent VEX_AMBIENT -> mF
    net.minecraft.sounds.SoundEvent VEX_CHARGE -> mG
    net.minecraft.sounds.SoundEvent VEX_DEATH -> mH
    net.minecraft.sounds.SoundEvent VEX_HURT -> mI
    net.minecraft.sounds.SoundEvent VILLAGER_AMBIENT -> mJ
    net.minecraft.sounds.SoundEvent VILLAGER_CELEBRATE -> mK
    net.minecraft.sounds.SoundEvent VILLAGER_DEATH -> mL
    net.minecraft.sounds.SoundEvent VILLAGER_HURT -> mM
    net.minecraft.sounds.SoundEvent VILLAGER_NO -> mN
    net.minecraft.sounds.SoundEvent VILLAGER_TRADE -> mO
    net.minecraft.sounds.SoundEvent VILLAGER_YES -> mP
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_ARMORER -> mQ
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_BUTCHER -> mR
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_CARTOGRAPHER -> mS
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_CLERIC -> mT
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_FARMER -> mU
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_FISHERMAN -> mV
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_FLETCHER -> mW
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_LEATHERWORKER -> mX
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_LIBRARIAN -> mY
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_MASON -> mZ
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_SHEPHERD -> na
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_TOOLSMITH -> nb
    net.minecraft.sounds.SoundEvent VILLAGER_WORK_WEAPONSMITH -> nc
    net.minecraft.sounds.SoundEvent VINDICATOR_AMBIENT -> nd
    net.minecraft.sounds.SoundEvent VINDICATOR_CELEBRATE -> ne
    net.minecraft.sounds.SoundEvent VINDICATOR_DEATH -> nf
    net.minecraft.sounds.SoundEvent VINDICATOR_HURT -> ng
    net.minecraft.sounds.SoundEvent LILY_PAD_PLACE -> nh
    net.minecraft.sounds.SoundEvent WANDERING_TRADER_AMBIENT -> ni
    net.minecraft.sounds.SoundEvent WANDERING_TRADER_DEATH -> nj
    net.minecraft.sounds.SoundEvent WANDERING_TRADER_DISAPPEARED -> nk
    net.minecraft.sounds.SoundEvent WANDERING_TRADER_DRINK_MILK -> nl
    net.minecraft.sounds.SoundEvent WANDERING_TRADER_DRINK_POTION -> nm
    net.minecraft.sounds.SoundEvent WANDERING_TRADER_HURT -> nn
    net.minecraft.sounds.SoundEvent WANDERING_TRADER_NO -> no
    net.minecraft.sounds.SoundEvent WANDERING_TRADER_REAPPEARED -> np
    net.minecraft.sounds.SoundEvent WANDERING_TRADER_TRADE -> nq
    net.minecraft.sounds.SoundEvent WANDERING_TRADER_YES -> nr
    net.minecraft.sounds.SoundEvent WATER_AMBIENT -> ns
    net.minecraft.sounds.SoundEvent WEATHER_RAIN -> nt
    net.minecraft.sounds.SoundEvent WEATHER_RAIN_ABOVE -> nu
    net.minecraft.sounds.SoundEvent WITCH_AMBIENT -> nv
    net.minecraft.sounds.SoundEvent WITCH_CELEBRATE -> nw
    net.minecraft.sounds.SoundEvent WITCH_DEATH -> nx
    net.minecraft.sounds.SoundEvent WITCH_DRINK -> ny
    net.minecraft.sounds.SoundEvent WITCH_HURT -> nz
    net.minecraft.sounds.SoundEvent WITCH_THROW -> nA
    net.minecraft.sounds.SoundEvent WITHER_AMBIENT -> nB
    net.minecraft.sounds.SoundEvent WITHER_BREAK_BLOCK -> nC
    net.minecraft.sounds.SoundEvent WITHER_DEATH -> nD
    net.minecraft.sounds.SoundEvent WITHER_HURT -> nE
    net.minecraft.sounds.SoundEvent WITHER_SHOOT -> nF
    net.minecraft.sounds.SoundEvent WITHER_SKELETON_AMBIENT -> nG
    net.minecraft.sounds.SoundEvent WITHER_SKELETON_DEATH -> nH
    net.minecraft.sounds.SoundEvent WITHER_SKELETON_HURT -> nI
    net.minecraft.sounds.SoundEvent WITHER_SKELETON_STEP -> nJ
    net.minecraft.sounds.SoundEvent WITHER_SPAWN -> nK
    net.minecraft.sounds.SoundEvent WOLF_AMBIENT -> nL
    net.minecraft.sounds.SoundEvent WOLF_DEATH -> nM
    net.minecraft.sounds.SoundEvent WOLF_GROWL -> nN
    net.minecraft.sounds.SoundEvent WOLF_HOWL -> nO
    net.minecraft.sounds.SoundEvent WOLF_HURT -> nP
    net.minecraft.sounds.SoundEvent WOLF_PANT -> nQ
    net.minecraft.sounds.SoundEvent WOLF_SHAKE -> nR
    net.minecraft.sounds.SoundEvent WOLF_STEP -> nS
    net.minecraft.sounds.SoundEvent WOLF_WHINE -> nT
    net.minecraft.sounds.SoundEvent WOODEN_DOOR_CLOSE -> nU
    net.minecraft.sounds.SoundEvent WOODEN_DOOR_OPEN -> nV
    net.minecraft.sounds.SoundEvent WOODEN_TRAPDOOR_CLOSE -> nW
    net.minecraft.sounds.SoundEvent WOODEN_TRAPDOOR_OPEN -> nX
    net.minecraft.sounds.SoundEvent WOOD_BREAK -> nY
    net.minecraft.sounds.SoundEvent WOODEN_BUTTON_CLICK_OFF -> nZ
    net.minecraft.sounds.SoundEvent WOODEN_BUTTON_CLICK_ON -> oa
    net.minecraft.sounds.SoundEvent WOOD_FALL -> ob
    net.minecraft.sounds.SoundEvent WOOD_HIT -> oc
    net.minecraft.sounds.SoundEvent WOOD_PLACE -> od
    net.minecraft.sounds.SoundEvent WOODEN_PRESSURE_PLATE_CLICK_OFF -> oe
    net.minecraft.sounds.SoundEvent WOODEN_PRESSURE_PLATE_CLICK_ON -> of
    net.minecraft.sounds.SoundEvent WOOD_STEP -> og
    net.minecraft.sounds.SoundEvent ZOMBIE_AMBIENT -> oh
    net.minecraft.sounds.SoundEvent ZOMBIE_ATTACK_WOODEN_DOOR -> oi
    net.minecraft.sounds.SoundEvent ZOMBIE_ATTACK_IRON_DOOR -> oj
    net.minecraft.sounds.SoundEvent ZOMBIE_BREAK_WOODEN_DOOR -> ok
    net.minecraft.sounds.SoundEvent ZOMBIE_CONVERTED_TO_DROWNED -> ol
    net.minecraft.sounds.SoundEvent ZOMBIE_DEATH -> om
    net.minecraft.sounds.SoundEvent ZOMBIE_DESTROY_EGG -> on
    net.minecraft.sounds.SoundEvent ZOMBIE_HORSE_AMBIENT -> oo
    net.minecraft.sounds.SoundEvent ZOMBIE_HORSE_DEATH -> op
    net.minecraft.sounds.SoundEvent ZOMBIE_HORSE_HURT -> oq
    net.minecraft.sounds.SoundEvent ZOMBIE_HURT -> or
    net.minecraft.sounds.SoundEvent ZOMBIE_INFECT -> os
    net.minecraft.sounds.SoundEvent ZOMBIE_PIGMAN_AMBIENT -> ot
    net.minecraft.sounds.SoundEvent ZOMBIE_PIGMAN_ANGRY -> ou
    net.minecraft.sounds.SoundEvent ZOMBIE_PIGMAN_DEATH -> ov
    net.minecraft.sounds.SoundEvent ZOMBIE_PIGMAN_HURT -> ow
    net.minecraft.sounds.SoundEvent ZOMBIE_STEP -> ox
    net.minecraft.sounds.SoundEvent ZOMBIE_VILLAGER_AMBIENT -> oy
    net.minecraft.sounds.SoundEvent ZOMBIE_VILLAGER_CONVERTED -> oz
    net.minecraft.sounds.SoundEvent ZOMBIE_VILLAGER_CURE -> oA
    net.minecraft.sounds.SoundEvent ZOMBIE_VILLAGER_DEATH -> oB
    net.minecraft.sounds.SoundEvent ZOMBIE_VILLAGER_HURT -> oC
    net.minecraft.sounds.SoundEvent ZOMBIE_VILLAGER_STEP -> oD
    6:6:void <init>() -> <init>
    819:819:net.minecraft.sounds.SoundEvent register(java.lang.String) -> a
    7:816:void <clinit>() -> <clinit>
net.minecraft.sounds.SoundSource -> aaj:
    net.minecraft.sounds.SoundSource MASTER -> a
    net.minecraft.sounds.SoundSource MUSIC -> b
    net.minecraft.sounds.SoundSource RECORDS -> c
    net.minecraft.sounds.SoundSource WEATHER -> d
    net.minecraft.sounds.SoundSource BLOCKS -> e
    net.minecraft.sounds.SoundSource HOSTILE -> f
    net.minecraft.sounds.SoundSource NEUTRAL -> g
    net.minecraft.sounds.SoundSource PLAYERS -> h
    net.minecraft.sounds.SoundSource AMBIENT -> i
    net.minecraft.sounds.SoundSource VOICE -> j
    java.util.Map BY_NAME -> k
    java.lang.String name -> l
    net.minecraft.sounds.SoundSource[] $VALUES -> m
    9:9:net.minecraft.sounds.SoundSource[] values() -> values
    9:9:net.minecraft.sounds.SoundSource valueOf(java.lang.String) -> valueOf
    26:28:void <init>(java.lang.String,int,java.lang.String) -> <init>
    31:31:java.lang.String getName() -> a
    35:35:net.minecraft.sounds.SoundSource byName(java.lang.String) -> a
    39:39:java.util.Set getNames() -> b
    9:22:void <clinit>() -> <clinit>
net.minecraft.sounds.package-info -> aak:
net.minecraft.stats.RecipeBook -> aal:
    java.util.Set known -> a
    java.util.Set highlight -> b
    boolean guiOpen -> c
    boolean filteringCraftable -> d
    boolean furnaceGuiOpen -> e
    boolean furnaceFilteringCraftable -> f
    boolean blastingFurnaceGuiOpen -> g
    boolean blastingFurnaceFilteringCraftable -> h
    boolean smokerGuiOpen -> i
    boolean smokerFilteringCraftable -> j
    14:16:void <init>() -> <init>
    32:37:void copyOverData(net.minecraft.stats.RecipeBook) -> a
    40:43:void add(net.minecraft.world.item.crafting.Recipe) -> a
    46:47:void add(net.minecraft.resources.ResourceLocation) -> a
    50:53:boolean contains(net.minecraft.world.item.crafting.Recipe) -> b
    57:57:boolean contains(net.minecraft.resources.ResourceLocation) -> b
    61:62:void remove(net.minecraft.world.item.crafting.Recipe) -> c
    65:67:void remove(net.minecraft.resources.ResourceLocation) -> c
    70:70:boolean willHighlight(net.minecraft.world.item.crafting.Recipe) -> d
    74:75:void removeHighlight(net.minecraft.world.item.crafting.Recipe) -> e
    78:79:void addHighlight(net.minecraft.world.item.crafting.Recipe) -> f
    82:83:void addHighlight(net.minecraft.resources.ResourceLocation) -> d
    86:86:boolean isGuiOpen() -> a
    90:91:void setGuiOpen(boolean) -> a
    94:101:boolean isFilteringCraftable(net.minecraft.world.inventory.RecipeBookMenu) -> a
    106:106:boolean isFilteringCraftable() -> b
    110:111:void setFilteringCraftable(boolean) -> b
    114:114:boolean isFurnaceGuiOpen() -> c
    118:119:void setFurnaceGuiOpen(boolean) -> c
    122:122:boolean isFurnaceFilteringCraftable() -> d
    126:127:void setFurnaceFilteringCraftable(boolean) -> d
    130:130:boolean isBlastingFurnaceGuiOpen() -> e
    134:135:void setBlastingFurnaceGuiOpen(boolean) -> e
    138:138:boolean isBlastingFurnaceFilteringCraftable() -> f
    142:143:void setBlastingFurnaceFilteringCraftable(boolean) -> f
    146:146:boolean isSmokerGuiOpen() -> g
    150:151:void setSmokerGuiOpen(boolean) -> g
    154:154:boolean isSmokerFilteringCraftable() -> h
    158:159:void setSmokerFilteringCraftable(boolean) -> h
net.minecraft.stats.ServerRecipeBook -> aam:
    org.apache.logging.log4j.Logger LOGGER -> k
    net.minecraft.world.item.crafting.RecipeManager manager -> l
    30:32:void <init>(net.minecraft.world.item.crafting.RecipeManager) -> <init>
    35:50:int addRecipes(java.util.Collection,net.minecraft.server.level.ServerPlayer) -> a
    54:67:int removeRecipes(java.util.Collection,net.minecraft.server.level.ServerPlayer) -> b
    71:72:void sendRecipes(net.minecraft.network.protocol.game.ClientboundRecipePacket$State,net.minecraft.server.level.ServerPlayer,java.util.List) -> a
    75:93:net.minecraft.nbt.CompoundTag toNbt() -> i
    97:107:void fromNbt(net.minecraft.nbt.CompoundTag) -> a
    110:124:void loadRecipes(net.minecraft.nbt.ListTag,java.util.function.Consumer) -> a
    127:128:void sendInitialRecipeBook(net.minecraft.server.level.ServerPlayer) -> a
    26:26:void <clinit>() -> <clinit>
net.minecraft.stats.ServerStatsCounter -> aan:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.server.MinecraftServer server -> c
    java.io.File file -> d
    java.util.Set dirty -> e
    int lastStatRequest -> f
    43:58:void <init>(net.minecraft.server.MinecraftServer,java.io.File) -> <init>
    62:66:void save() -> a
    70:72:void setValue(net.minecraft.world.entity.player.Player,net.minecraft.stats.Stat,int) -> a
    75:77:java.util.Set getDirty() -> d
    81:122:void parseLocal(com.mojang.datafixers.DataFixer,java.lang.String) -> a
    125:127:java.util.Optional getStat(net.minecraft.stats.StatType,java.lang.String) -> a
    131:143:net.minecraft.nbt.CompoundTag fromJson(com.google.gson.JsonObject) -> a
    147:162:java.lang.String toJson() -> b
    168:168:net.minecraft.resources.ResourceLocation getKey(net.minecraft.stats.Stat) -> b
    172:173:void markAllDirty() -> c
    176:188:void sendStats(net.minecraft.server.level.ServerPlayer) -> a
    150:150:com.google.gson.JsonObject lambda$toJson$4(net.minecraft.stats.StatType) -> a
    115:115:void lambda$parseLocal$3(java.lang.String) -> a
    103:114:void lambda$parseLocal$2(net.minecraft.nbt.CompoundTag,java.lang.String,net.minecraft.stats.StatType) -> a
    108:108:void lambda$null$1(java.lang.String) -> b
    107:107:void lambda$null$0(net.minecraft.nbt.CompoundTag,java.lang.String,net.minecraft.stats.Stat) -> a
    38:38:void <clinit>() -> <clinit>
net.minecraft.stats.Stat -> aao:
    net.minecraft.stats.StatFormatter formatter -> o
    java.lang.Object value -> p
    net.minecraft.stats.StatType type -> q
    16:20:void <init>(net.minecraft.stats.StatType,java.lang.Object,net.minecraft.stats.StatFormatter) -> <init>
    23:23:java.lang.String buildName(net.minecraft.stats.StatType,java.lang.Object) -> a
    29:29:java.lang.String locationToKey(net.minecraft.resources.ResourceLocation) -> a
    33:33:net.minecraft.stats.StatType getType() -> a
    37:37:java.lang.Object getValue() -> b
    41:41:java.lang.String format(int) -> a
    46:46:boolean equals(java.lang.Object) -> equals
    51:51:int hashCode() -> hashCode
    56:57:java.lang.String toString() -> toString
net.minecraft.stats.StatFormatter -> aap:
    java.text.DecimalFormat DECIMAL_FORMAT -> a
    net.minecraft.stats.StatFormatter DEFAULT -> b
    net.minecraft.stats.StatFormatter DIVIDE_BY_TEN -> c
    net.minecraft.stats.StatFormatter DISTANCE -> d
    net.minecraft.stats.StatFormatter TIME -> e
    java.lang.String format(int) -> format
    27:42:java.lang.String lambda$static$3(int) -> a
    16:24:java.lang.String lambda$static$2(int) -> b
    14:14:java.lang.String lambda$static$1(int) -> c
    11:11:void lambda$static$0(java.text.DecimalFormat) -> a
    11:26:void <clinit>() -> <clinit>
net.minecraft.stats.StatType -> aaq:
    net.minecraft.core.Registry registry -> a
    java.util.Map map -> b
    11:15:void <init>(net.minecraft.core.Registry) -> <init>
    18:18:boolean contains(java.lang.Object) -> a
    23:23:net.minecraft.stats.Stat get(java.lang.Object,net.minecraft.stats.StatFormatter) -> a
    27:27:net.minecraft.core.Registry getRegistry() -> a
    31:31:int size() -> b
    36:36:java.util.Iterator iterator() -> iterator
    40:40:net.minecraft.stats.Stat get(java.lang.Object) -> b
    44:44:java.lang.String getTranslationKey() -> c
    23:23:net.minecraft.stats.Stat lambda$get$0(net.minecraft.stats.StatFormatter,java.lang.Object) -> a
net.minecraft.stats.Stats -> aar:
    net.minecraft.stats.StatType BLOCK_MINED -> a
    net.minecraft.stats.StatType ITEM_CRAFTED -> b
    net.minecraft.stats.StatType ITEM_USED -> c
    net.minecraft.stats.StatType ITEM_BROKEN -> d
    net.minecraft.stats.StatType ITEM_PICKED_UP -> e
    net.minecraft.stats.StatType ITEM_DROPPED -> f
    net.minecraft.stats.StatType ENTITY_KILLED -> g
    net.minecraft.stats.StatType ENTITY_KILLED_BY -> h
    net.minecraft.stats.StatType CUSTOM -> i
    net.minecraft.resources.ResourceLocation LEAVE_GAME -> j
    net.minecraft.resources.ResourceLocation PLAY_ONE_MINUTE -> k
    net.minecraft.resources.ResourceLocation TIME_SINCE_DEATH -> l
    net.minecraft.resources.ResourceLocation TIME_SINCE_REST -> m
    net.minecraft.resources.ResourceLocation CROUCH_TIME -> n
    net.minecraft.resources.ResourceLocation WALK_ONE_CM -> o
    net.minecraft.resources.ResourceLocation CROUCH_ONE_CM -> p
    net.minecraft.resources.ResourceLocation SPRINT_ONE_CM -> q
    net.minecraft.resources.ResourceLocation WALK_ON_WATER_ONE_CM -> r
    net.minecraft.resources.ResourceLocation FALL_ONE_CM -> s
    net.minecraft.resources.ResourceLocation CLIMB_ONE_CM -> t
    net.minecraft.resources.ResourceLocation FLY_ONE_CM -> u
    net.minecraft.resources.ResourceLocation WALK_UNDER_WATER_ONE_CM -> v
    net.minecraft.resources.ResourceLocation MINECART_ONE_CM -> w
    net.minecraft.resources.ResourceLocation BOAT_ONE_CM -> x
    net.minecraft.resources.ResourceLocation PIG_ONE_CM -> y
    net.minecraft.resources.ResourceLocation HORSE_ONE_CM -> z
    net.minecraft.resources.ResourceLocation AVIATE_ONE_CM -> A
    net.minecraft.resources.ResourceLocation SWIM_ONE_CM -> B
    net.minecraft.resources.ResourceLocation JUMP -> C
    net.minecraft.resources.ResourceLocation DROP -> D
    net.minecraft.resources.ResourceLocation DAMAGE_DEALT -> E
    net.minecraft.resources.ResourceLocation DAMAGE_DEALT_ABSORBED -> F
    net.minecraft.resources.ResourceLocation DAMAGE_DEALT_RESISTED -> G
    net.minecraft.resources.ResourceLocation DAMAGE_TAKEN -> H
    net.minecraft.resources.ResourceLocation DAMAGE_BLOCKED_BY_SHIELD -> I
    net.minecraft.resources.ResourceLocation DAMAGE_ABSORBED -> J
    net.minecraft.resources.ResourceLocation DAMAGE_RESISTED -> K
    net.minecraft.resources.ResourceLocation DEATHS -> L
    net.minecraft.resources.ResourceLocation MOB_KILLS -> M
    net.minecraft.resources.ResourceLocation ANIMALS_BRED -> N
    net.minecraft.resources.ResourceLocation PLAYER_KILLS -> O
    net.minecraft.resources.ResourceLocation FISH_CAUGHT -> P
    net.minecraft.resources.ResourceLocation TALKED_TO_VILLAGER -> Q
    net.minecraft.resources.ResourceLocation TRADED_WITH_VILLAGER -> R
    net.minecraft.resources.ResourceLocation EAT_CAKE_SLICE -> S
    net.minecraft.resources.ResourceLocation FILL_CAULDRON -> T
    net.minecraft.resources.ResourceLocation USE_CAULDRON -> U
    net.minecraft.resources.ResourceLocation CLEAN_ARMOR -> V
    net.minecraft.resources.ResourceLocation CLEAN_BANNER -> W
    net.minecraft.resources.ResourceLocation CLEAN_SHULKER_BOX -> X
    net.minecraft.resources.ResourceLocation INTERACT_WITH_BREWINGSTAND -> Y
    net.minecraft.resources.ResourceLocation INTERACT_WITH_BEACON -> Z
    net.minecraft.resources.ResourceLocation INSPECT_DROPPER -> aa
    net.minecraft.resources.ResourceLocation INSPECT_HOPPER -> ab
    net.minecraft.resources.ResourceLocation INSPECT_DISPENSER -> ac
    net.minecraft.resources.ResourceLocation PLAY_NOTEBLOCK -> ad
    net.minecraft.resources.ResourceLocation TUNE_NOTEBLOCK -> ae
    net.minecraft.resources.ResourceLocation POT_FLOWER -> af
    net.minecraft.resources.ResourceLocation TRIGGER_TRAPPED_CHEST -> ag
    net.minecraft.resources.ResourceLocation OPEN_ENDERCHEST -> ah
    net.minecraft.resources.ResourceLocation ENCHANT_ITEM -> ai
    net.minecraft.resources.ResourceLocation PLAY_RECORD -> aj
    net.minecraft.resources.ResourceLocation INTERACT_WITH_FURNACE -> ak
    net.minecraft.resources.ResourceLocation INTERACT_WITH_CRAFTING_TABLE -> al
    net.minecraft.resources.ResourceLocation OPEN_CHEST -> am
    net.minecraft.resources.ResourceLocation SLEEP_IN_BED -> an
    net.minecraft.resources.ResourceLocation OPEN_SHULKER_BOX -> ao
    net.minecraft.resources.ResourceLocation OPEN_BARREL -> ap
    net.minecraft.resources.ResourceLocation INTERACT_WITH_BLAST_FURNACE -> aq
    net.minecraft.resources.ResourceLocation INTERACT_WITH_SMOKER -> ar
    net.minecraft.resources.ResourceLocation INTERACT_WITH_LECTERN -> as
    net.minecraft.resources.ResourceLocation INTERACT_WITH_CAMPFIRE -> at
    net.minecraft.resources.ResourceLocation INTERACT_WITH_CARTOGRAPHY_TABLE -> au
    net.minecraft.resources.ResourceLocation INTERACT_WITH_LOOM -> av
    net.minecraft.resources.ResourceLocation INTERACT_WITH_STONECUTTER -> aw
    net.minecraft.resources.ResourceLocation BELL_RING -> ax
    net.minecraft.resources.ResourceLocation RAID_TRIGGER -> ay
    net.minecraft.resources.ResourceLocation RAID_WIN -> az
    net.minecraft.resources.ResourceLocation INTERACT_WITH_ANVIL -> aA
    net.minecraft.resources.ResourceLocation INTERACT_WITH_GRINDSTONE -> aB
    9:9:void <init>() -> <init>
    102:105:net.minecraft.resources.ResourceLocation makeCustomStat(java.lang.String,net.minecraft.stats.StatFormatter) -> a
    110:110:net.minecraft.stats.StatType makeRegistryStatType(java.lang.String,net.minecraft.core.Registry) -> a
    11:99:void <clinit>() -> <clinit>
net.minecraft.stats.StatsCounter -> aas:
    it.unimi.dsi.fastutil.objects.Object2IntMap stats -> a
    9:13:void <init>() -> <init>
    16:17:void increment(net.minecraft.world.entity.player.Player,net.minecraft.stats.Stat,int) -> b
    20:21:void setValue(net.minecraft.world.entity.player.Player,net.minecraft.stats.Stat,int) -> a
    24:24:int getValue(net.minecraft.stats.StatType,java.lang.Object) -> a
    28:28:int getValue(net.minecraft.stats.Stat) -> a
net.minecraft.stats.package-info -> aat:
net.minecraft.tags.BlockTags -> aau:
    net.minecraft.tags.TagCollection source -> ae
    int resetCount -> af
    net.minecraft.tags.Tag WOOL -> a
    net.minecraft.tags.Tag PLANKS -> b
    net.minecraft.tags.Tag STONE_BRICKS -> c
    net.minecraft.tags.Tag WOODEN_BUTTONS -> d
    net.minecraft.tags.Tag BUTTONS -> e
    net.minecraft.tags.Tag CARPETS -> f
    net.minecraft.tags.Tag WOODEN_DOORS -> g
    net.minecraft.tags.Tag WOODEN_STAIRS -> h
    net.minecraft.tags.Tag WOODEN_SLABS -> i
    net.minecraft.tags.Tag WOODEN_FENCES -> j
    net.minecraft.tags.Tag WOODEN_PRESSURE_PLATES -> k
    net.minecraft.tags.Tag WOODEN_TRAPDOORS -> l
    net.minecraft.tags.Tag DOORS -> m
    net.minecraft.tags.Tag SAPLINGS -> n
    net.minecraft.tags.Tag LOGS -> o
    net.minecraft.tags.Tag DARK_OAK_LOGS -> p
    net.minecraft.tags.Tag OAK_LOGS -> q
    net.minecraft.tags.Tag BIRCH_LOGS -> r
    net.minecraft.tags.Tag ACACIA_LOGS -> s
    net.minecraft.tags.Tag JUNGLE_LOGS -> t
    net.minecraft.tags.Tag SPRUCE_LOGS -> u
    net.minecraft.tags.Tag BANNERS -> v
    net.minecraft.tags.Tag SAND -> w
    net.minecraft.tags.Tag STAIRS -> x
    net.minecraft.tags.Tag SLABS -> y
    net.minecraft.tags.Tag WALLS -> z
    net.minecraft.tags.Tag ANVIL -> A
    net.minecraft.tags.Tag RAILS -> B
    net.minecraft.tags.Tag LEAVES -> C
    net.minecraft.tags.Tag TRAPDOORS -> D
    net.minecraft.tags.Tag SMALL_FLOWERS -> E
    net.minecraft.tags.Tag BEDS -> F
    net.minecraft.tags.Tag FENCES -> G
    net.minecraft.tags.Tag TALL_FLOWERS -> H
    net.minecraft.tags.Tag FLOWERS -> I
    net.minecraft.tags.Tag SHULKER_BOXES -> J
    net.minecraft.tags.Tag FLOWER_POTS -> K
    net.minecraft.tags.Tag ENDERMAN_HOLDABLE -> L
    net.minecraft.tags.Tag ICE -> M
    net.minecraft.tags.Tag VALID_SPAWN -> N
    net.minecraft.tags.Tag IMPERMEABLE -> O
    net.minecraft.tags.Tag UNDERWATER_BONEMEALS -> P
    net.minecraft.tags.Tag CORAL_BLOCKS -> Q
    net.minecraft.tags.Tag WALL_CORALS -> R
    net.minecraft.tags.Tag CORAL_PLANTS -> S
    net.minecraft.tags.Tag CORALS -> T
    net.minecraft.tags.Tag BAMBOO_PLANTABLE_ON -> U
    net.minecraft.tags.Tag STANDING_SIGNS -> V
    net.minecraft.tags.Tag WALL_SIGNS -> W
    net.minecraft.tags.Tag SIGNS -> X
    net.minecraft.tags.Tag DRAGON_IMMUNE -> Y
    net.minecraft.tags.Tag WITHER_IMMUNE -> Z
    net.minecraft.tags.Tag BEEHIVES -> aa
    net.minecraft.tags.Tag CROPS -> ab
    net.minecraft.tags.Tag BEE_GROWABLES -> ac
    net.minecraft.tags.Tag PORTALS -> ad
    13:14:void <init>() -> <init>
    77:79:void reset(net.minecraft.tags.TagCollection) -> a
    82:82:net.minecraft.tags.TagCollection getAllTags() -> a
    86:86:net.minecraft.tags.Tag bind(java.lang.String) -> a
    10:10:java.util.Optional lambda$static$0(net.minecraft.resources.ResourceLocation) -> a
    9:9:int access$000() -> b
    9:9:net.minecraft.tags.TagCollection access$100() -> c
    10:74:void <clinit>() -> <clinit>
net.minecraft.tags.BlockTags$Wrapper -> aau$a:
    int check -> a
    net.minecraft.tags.Tag actual -> b
    90:95:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    99:103:boolean contains(net.minecraft.world.level.block.Block) -> a
    108:112:java.util.Collection getValues() -> a
    117:121:java.util.Collection getSource() -> b
    89:89:boolean contains(java.lang.Object) -> a
net.minecraft.tags.EntityTypeTags -> aav:
    net.minecraft.tags.TagCollection source -> e
    int resetCount -> f
    net.minecraft.tags.Tag SKELETONS -> a
    net.minecraft.tags.Tag RAIDERS -> b
    net.minecraft.tags.Tag BEEHIVE_INHABITORS -> c
    net.minecraft.tags.Tag ARROWS -> d
    13:14:void <init>() -> <init>
    22:24:void reset(net.minecraft.tags.TagCollection) -> a
    27:27:net.minecraft.tags.TagCollection getAllTags() -> a
    31:31:net.minecraft.tags.Tag bind(java.lang.String) -> a
    10:10:java.util.Optional lambda$static$0(net.minecraft.resources.ResourceLocation) -> a
    9:9:int access$000() -> b
    9:9:net.minecraft.tags.TagCollection access$100() -> c
    10:19:void <clinit>() -> <clinit>
net.minecraft.tags.EntityTypeTags$Wrapper -> aav$a:
    int check -> a
    net.minecraft.tags.Tag actual -> b
    35:40:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    44:48:boolean contains(net.minecraft.world.entity.EntityType) -> a
    53:57:java.util.Collection getValues() -> a
    62:66:java.util.Collection getSource() -> b
    34:34:boolean contains(java.lang.Object) -> a
net.minecraft.tags.FluidTags -> aaw:
    net.minecraft.tags.TagCollection source -> c
    int resetCount -> d
    net.minecraft.tags.Tag WATER -> a
    net.minecraft.tags.Tag LAVA -> b
    13:14:void <init>() -> <init>
    20:22:void reset(net.minecraft.tags.TagCollection) -> a
    25:25:net.minecraft.tags.TagCollection getAllTags() -> a
    29:29:net.minecraft.tags.Tag bind(java.lang.String) -> a
    10:10:java.util.Optional lambda$static$0(net.minecraft.resources.ResourceLocation) -> a
    9:9:int access$000() -> b
    9:9:net.minecraft.tags.TagCollection access$100() -> c
    10:17:void <clinit>() -> <clinit>
net.minecraft.tags.FluidTags$Wrapper -> aaw$a:
    int check -> a
    net.minecraft.tags.Tag actual -> b
    33:38:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    42:46:boolean contains(net.minecraft.world.level.material.Fluid) -> a
    51:55:java.util.Collection getValues() -> a
    60:64:java.util.Collection getSource() -> b
    32:32:boolean contains(java.lang.Object) -> a
net.minecraft.tags.ItemTags -> aax:
    net.minecraft.tags.TagCollection source -> Q
    int resetCount -> R
    net.minecraft.tags.Tag WOOL -> a
    net.minecraft.tags.Tag PLANKS -> b
    net.minecraft.tags.Tag STONE_BRICKS -> c
    net.minecraft.tags.Tag WOODEN_BUTTONS -> d
    net.minecraft.tags.Tag BUTTONS -> e
    net.minecraft.tags.Tag CARPETS -> f
    net.minecraft.tags.Tag WOODEN_DOORS -> g
    net.minecraft.tags.Tag WOODEN_STAIRS -> h
    net.minecraft.tags.Tag WOODEN_SLABS -> i
    net.minecraft.tags.Tag WOODEN_FENCES -> j
    net.minecraft.tags.Tag WOODEN_PRESSURE_PLATES -> k
    net.minecraft.tags.Tag WOODEN_TRAPDOORS -> l
    net.minecraft.tags.Tag DOORS -> m
    net.minecraft.tags.Tag SAPLINGS -> n
    net.minecraft.tags.Tag LOGS -> o
    net.minecraft.tags.Tag DARK_OAK_LOGS -> p
    net.minecraft.tags.Tag OAK_LOGS -> q
    net.minecraft.tags.Tag BIRCH_LOGS -> r
    net.minecraft.tags.Tag ACACIA_LOGS -> s
    net.minecraft.tags.Tag JUNGLE_LOGS -> t
    net.minecraft.tags.Tag SPRUCE_LOGS -> u
    net.minecraft.tags.Tag BANNERS -> v
    net.minecraft.tags.Tag SAND -> w
    net.minecraft.tags.Tag STAIRS -> x
    net.minecraft.tags.Tag SLABS -> y
    net.minecraft.tags.Tag WALLS -> z
    net.minecraft.tags.Tag ANVIL -> A
    net.minecraft.tags.Tag RAILS -> B
    net.minecraft.tags.Tag LEAVES -> C
    net.minecraft.tags.Tag TRAPDOORS -> D
    net.minecraft.tags.Tag SMALL_FLOWERS -> E
    net.minecraft.tags.Tag BEDS -> F
    net.minecraft.tags.Tag FENCES -> G
    net.minecraft.tags.Tag TALL_FLOWERS -> H
    net.minecraft.tags.Tag FLOWERS -> I
    net.minecraft.tags.Tag BOATS -> J
    net.minecraft.tags.Tag FISHES -> K
    net.minecraft.tags.Tag SIGNS -> L
    net.minecraft.tags.Tag MUSIC_DISCS -> M
    net.minecraft.tags.Tag COALS -> N
    net.minecraft.tags.Tag ARROWS -> O
    net.minecraft.tags.Tag LECTERN_BOOKS -> P
    13:14:void <init>() -> <init>
    64:66:void reset(net.minecraft.tags.TagCollection) -> a
    69:69:net.minecraft.tags.TagCollection getAllTags() -> a
    73:73:net.minecraft.tags.Tag bind(java.lang.String) -> a
    10:10:java.util.Optional lambda$static$0(net.minecraft.resources.ResourceLocation) -> a
    9:9:int access$000() -> b
    9:9:net.minecraft.tags.TagCollection access$100() -> c
    10:61:void <clinit>() -> <clinit>
net.minecraft.tags.ItemTags$Wrapper -> aax$a:
    int check -> a
    net.minecraft.tags.Tag actual -> b
    77:82:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    86:90:boolean contains(net.minecraft.world.item.Item) -> a
    95:99:java.util.Collection getValues() -> a
    104:108:java.util.Collection getSource() -> b
    76:76:boolean contains(java.lang.Object) -> a
net.minecraft.tags.SynchronizableTagCollection -> aay:
    net.minecraft.core.Registry registry -> a
    14:16:void <init>(net.minecraft.core.Registry,java.lang.String,java.lang.String) -> <init>
    19:28:void serializeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    31:44:void loadFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
net.minecraft.tags.Tag -> aaz:
    net.minecraft.resources.ResourceLocation id -> a
    java.util.Set values -> b
    java.util.Collection source -> c
    27:31:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    33:41:void <init>(net.minecraft.resources.ResourceLocation,java.util.Collection,boolean) -> <init>
    44:54:com.google.gson.JsonObject serializeToJson(java.util.function.Function) -> a
    58:58:boolean contains(java.lang.Object) -> a
    62:62:java.util.Collection getValues() -> a
    66:66:java.util.Collection getSource() -> b
    70:71:java.lang.Object getRandomElement(java.util.Random) -> a
    75:75:net.minecraft.resources.ResourceLocation getId() -> c
net.minecraft.tags.Tag$Builder -> aaz$a:
    java.util.Set values -> a
    boolean ordered -> b
    78:79:void <init>() -> <init>
    83:83:net.minecraft.tags.Tag$Builder tag() -> a
    87:88:net.minecraft.tags.Tag$Builder add(net.minecraft.tags.Tag$Entry) -> a
    92:93:net.minecraft.tags.Tag$Builder add(java.lang.Object) -> a
    98:99:net.minecraft.tags.Tag$Builder add(java.lang.Object[]) -> a
    103:104:net.minecraft.tags.Tag$Builder add(java.util.Collection) -> a
    108:109:net.minecraft.tags.Tag$Builder addTag(net.minecraft.resources.ResourceLocation) -> a
    113:114:net.minecraft.tags.Tag$Builder addTag(net.minecraft.tags.Tag) -> a
    118:119:net.minecraft.tags.Tag$Builder keepOrder(boolean) -> a
    123:128:boolean canBuild(java.util.function.Function) -> a
    132:132:net.minecraft.tags.Tag build(net.minecraft.resources.ResourceLocation) -> b
    136:155:net.minecraft.tags.Tag$Builder addFromJson(java.util.function.Function,com.google.gson.JsonObject) -> a
    146:146:com.google.gson.JsonParseException lambda$addFromJson$0(net.minecraft.resources.ResourceLocation) -> c
net.minecraft.tags.Tag$Entry -> aaz$b:
    161:161:boolean canBuild(java.util.function.Function) -> a
    void build(java.util.Collection) -> a
    void serializeTo(com.google.gson.JsonArray,java.util.function.Function) -> a
net.minecraft.tags.Tag$TagEntry -> aaz$c:
    net.minecraft.resources.ResourceLocation id -> a
    net.minecraft.tags.Tag tag -> b
    204:206:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    208:211:void <init>(net.minecraft.tags.Tag) -> <init>
    215:219:boolean canBuild(java.util.function.Function) -> a
    224:228:void build(java.util.Collection) -> a
    231:236:net.minecraft.resources.ResourceLocation getId() -> a
    242:243:void serializeTo(com.google.gson.JsonArray,java.util.function.Function) -> a
net.minecraft.tags.Tag$ValuesEntry -> aaz$d:
    java.util.Collection values -> a
    172:174:void <init>(java.util.Collection) -> <init>
    178:179:void build(java.util.Collection) -> a
    183:190:void serializeTo(com.google.gson.JsonArray,java.util.function.Function) -> a
    193:193:java.util.Collection getValues() -> a
net.minecraft.tags.TagCollection -> aba:
    org.apache.logging.log4j.Logger LOGGER -> a
    com.google.gson.Gson GSON -> b
    int PATH_SUFFIX_LENGTH -> c
    java.util.Map tags -> d
    java.util.function.Function idToValue -> e
    java.lang.String directory -> f
    boolean ordered -> g
    java.lang.String name -> h
    39:50:void <init>(java.util.function.Function,java.lang.String,boolean,java.lang.String) -> <init>
    54:54:net.minecraft.tags.Tag getTag(net.minecraft.resources.ResourceLocation) -> a
    58:62:net.minecraft.tags.Tag getTagOrEmpty(net.minecraft.resources.ResourceLocation) -> b
    66:66:boolean hasTag(net.minecraft.resources.ResourceLocation) -> c
    70:70:java.util.Collection getAvailableTags() -> a
    74:80:java.util.Collection getMatchingTags(java.lang.Object) -> a
    84:84:java.util.concurrent.CompletableFuture prepare(net.minecraft.server.packs.resources.ResourceManager,java.util.concurrent.Executor) -> a
    116:140:void load(java.util.Map) -> a
    143:144:void replace(java.util.Map) -> b
    147:147:java.util.Map getAllTags() -> b
    136:136:void lambda$load$5(java.util.Map,net.minecraft.resources.ResourceLocation,net.minecraft.tags.Tag$Builder) -> a
    131:131:void lambda$load$4(net.minecraft.resources.ResourceLocation,net.minecraft.tags.Tag$Builder) -> a
    85:111:java.util.Map lambda$prepare$3(net.minecraft.server.packs.resources.ResourceManager) -> a
    98:98:net.minecraft.tags.Tag$Builder lambda$null$2(net.minecraft.resources.ResourceLocation) -> d
    98:98:void lambda$null$1(net.minecraft.tags.Tag$Builder) -> a
    87:87:boolean lambda$null$0(java.lang.String) -> a
    34:37:void <clinit>() -> <clinit>
net.minecraft.tags.TagManager -> abb:
    net.minecraft.tags.SynchronizableTagCollection blocks -> a
    net.minecraft.tags.SynchronizableTagCollection items -> b
    net.minecraft.tags.SynchronizableTagCollection fluids -> c
    net.minecraft.tags.SynchronizableTagCollection entityTypes -> d
    19:23:void <init>() -> <init>
    26:26:net.minecraft.tags.SynchronizableTagCollection getBlocks() -> a
    30:30:net.minecraft.tags.SynchronizableTagCollection getItems() -> b
    34:34:net.minecraft.tags.SynchronizableTagCollection getFluids() -> c
    38:38:net.minecraft.tags.SynchronizableTagCollection getEntityTypes() -> d
    42:46:void serializeToNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    49:54:net.minecraft.tags.TagManager deserializeFromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    59:67:java.util.concurrent.CompletableFuture reload(net.minecraft.server.packs.resources.PreparableReloadListener$PreparationBarrier,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller,net.minecraft.util.profiling.ProfilerFiller,java.util.concurrent.Executor,java.util.concurrent.Executor) -> a
    68:76:void lambda$reload$1(net.minecraft.tags.TagManager$Preparations) -> a
    65:65:net.minecraft.tags.TagManager$Preparations lambda$reload$0(com.mojang.datafixers.util.Pair,com.mojang.datafixers.util.Pair) -> a
net.minecraft.tags.TagManager$Preparations -> abb$a:
    java.util.Map blocks -> a
    java.util.Map items -> b
    java.util.Map fluids -> c
    java.util.Map entityTypes -> d
    86:91:void <init>(java.util.Map,java.util.Map,java.util.Map,java.util.Map) -> <init>
net.minecraft.tags.package-info -> abc:
net.minecraft.util.BitStorage -> abd:
    long[] data -> a
    int bits -> b
    long mask -> c
    int size -> d
    18:19:void <init>(int,int) -> <init>
    21:33:void <init>(int,int,long[]) -> <init>
    36:56:int getAndSet(int,int) -> a
    60:74:void set(int,int) -> b
    77:88:int get(int) -> a
    93:93:long[] getRaw() -> a
    97:97:int getSize() -> b
    101:101:int getBits() -> c
    105:132:void getAll(java.util.function.IntConsumer) -> a
net.minecraft.util.ClassInstanceMultiMap -> abe:
    java.util.Map byClass -> a
    java.lang.Class baseClass -> b
    java.util.List allInstances -> c
    16:23:void <init>(java.lang.Class) -> <init>
    27:33:boolean add(java.lang.Object) -> add
    38:45:boolean remove(java.lang.Object) -> remove
    50:50:boolean contains(java.lang.Object) -> contains
    55:59:java.util.Collection find(java.lang.Class) -> a
    64:67:java.util.Iterator iterator() -> iterator
    72:72:int size() -> size
    58:58:java.util.List lambda$find$0(java.lang.Class) -> b
net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap -> abf:
    java.lang.Object EMPTY_SLOT -> a
    java.lang.Object[] keys -> b
    int[] values -> c
    java.lang.Object[] byId -> d
    int nextId -> e
    int size -> f
    24:29:void <init>(int) -> <init>
    33:33:int getId(java.lang.Object) -> a
    39:43:java.lang.Object byId(int) -> a
    47:50:int getValue(int) -> c
    54:54:boolean contains(java.lang.Object) -> b
    58:58:boolean contains(int) -> b
    62:66:int add(java.lang.Object) -> c
    70:73:int nextId() -> c
    78:92:void grow(int) -> d
    95:113:void addMapping(java.lang.Object,int) -> a
    127:127:int hash(java.lang.Object) -> d
    131:149:int indexOf(java.lang.Object,int) -> b
    153:165:int findEmpty(int) -> e
    170:170:java.util.Iterator iterator() -> iterator
    174:178:void clear() -> a
    181:181:int size() -> b
    13:13:void <clinit>() -> <clinit>
net.minecraft.util.Crypt -> abg:
    org.apache.logging.log4j.Logger LOGGER -> a
    29:29:void <init>() -> <init>
    41:45:javax.crypto.SecretKey generateSecretKey() -> a
    51:59:java.security.KeyPair generateKeyPair() -> b
    64:74:byte[] digestData(java.lang.String,java.security.PublicKey,javax.crypto.SecretKey) -> a
    79:88:byte[] digestData(java.lang.String,byte[][]) -> a
    93:100:java.security.PublicKey byteToPublicKey(byte[]) -> a
    104:104:javax.crypto.SecretKey decryptByteToSecretKey(java.security.PrivateKey,byte[]) -> a
    108:108:byte[] encryptUsingKey(java.security.Key,byte[]) -> a
    112:112:byte[] decryptUsingKey(java.security.Key,byte[]) -> b
    117:124:byte[] cipherData(int,java.security.Key,byte[]) -> a
    129:140:javax.crypto.Cipher setupCipher(int,java.lang.String,java.security.Key) -> a
    145:149:javax.crypto.Cipher getCipher(int,java.security.Key) -> a
    30:30:void <clinit>() -> <clinit>
net.minecraft.util.CsvOutput -> abh:
    java.io.Writer output -> a
    int columnCount -> b
    19:23:void <init>(java.io.Writer,java.util.List) -> <init>
    26:26:net.minecraft.util.CsvOutput$Builder builder() -> a
    30:35:void writeRow(java.lang.Object[]) -> a
    38:39:void writeLine(java.util.stream.Stream) -> a
    42:42:java.lang.String getStringValue(java.lang.Object) -> a
    13:13:void <init>(java.io.Writer,java.util.List,net.minecraft.util.CsvOutput$1) -> <init>
net.minecraft.util.CsvOutput$1 -> abh$1:
net.minecraft.util.CsvOutput$Builder -> abh$a:
    java.util.List headers -> a
    45:46:void <init>() -> <init>
    49:50:net.minecraft.util.CsvOutput$Builder addColumn(java.lang.String) -> a
    54:54:net.minecraft.util.CsvOutput build(java.io.Writer) -> a
net.minecraft.util.Deserializer -> abi:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.lang.Object deserialize(com.mojang.datafixers.Dynamic) -> deserialize
    15:23:java.lang.Object deserialize(com.mojang.datafixers.Dynamic,net.minecraft.core.Registry,java.lang.String,java.lang.Object) -> a
    10:10:void <clinit>() -> <clinit>
net.minecraft.util.FrameTimer -> abj:
    long[] loggedTimes -> a
    int logStart -> b
    int logLength -> c
    int logEnd -> d
    6:12:void <init>() -> <init>
    15:28:void logFrameDuration(long) -> a
    31:39:long getAverageDuration(int) -> a
    43:43:int scaleAverageDurationTo(int,int) -> a
    47:48:int scaleSampleTo(long,int,int) -> a
    52:52:int getLogStart() -> a
    56:56:int getLogEnd() -> b
    60:60:int wrapIndex(int) -> b
    64:64:long[] getLog() -> c
net.minecraft.util.GsonHelper -> abk:
    com.google.gson.Gson GSON -> a
    27:27:void <init>() -> <init>
    31:34:boolean isStringValue(com.google.gson.JsonObject,java.lang.String) -> a
    38:41:boolean isStringValue(com.google.gson.JsonElement) -> a
    45:48:boolean isNumberValue(com.google.gson.JsonObject,java.lang.String) -> b
    52:55:boolean isNumberValue(com.google.gson.JsonElement) -> b
    59:62:boolean isBooleanValue(com.google.gson.JsonObject,java.lang.String) -> c
    66:69:boolean isBooleanValue(com.google.gson.JsonElement) -> c
    73:76:boolean isArrayNode(com.google.gson.JsonObject,java.lang.String) -> d
    80:83:boolean isObjectNode(com.google.gson.JsonObject,java.lang.String) -> e
    87:90:boolean isValidPrimitive(com.google.gson.JsonObject,java.lang.String) -> f
    94:97:boolean isValidNode(com.google.gson.JsonObject,java.lang.String) -> g
    101:104:java.lang.String convertToString(com.google.gson.JsonElement,java.lang.String) -> a
    109:112:java.lang.String getAsString(com.google.gson.JsonObject,java.lang.String) -> h
    117:120:java.lang.String getAsString(com.google.gson.JsonObject,java.lang.String,java.lang.String) -> a
    125:130:net.minecraft.world.item.Item convertToItem(com.google.gson.JsonElement,java.lang.String) -> b
    135:138:net.minecraft.world.item.Item getAsItem(com.google.gson.JsonObject,java.lang.String) -> i
    143:146:net.minecraft.world.item.Item getAsItem(com.google.gson.JsonObject,java.lang.String,net.minecraft.world.item.Item) -> a
    151:154:boolean convertToBoolean(com.google.gson.JsonElement,java.lang.String) -> c
    159:162:boolean getAsBoolean(com.google.gson.JsonObject,java.lang.String) -> j
    167:170:boolean getAsBoolean(com.google.gson.JsonObject,java.lang.String,boolean) -> a
    175:178:double convertToDouble(com.google.gson.JsonElement,java.lang.String) -> d
    183:186:double getAsDouble(com.google.gson.JsonObject,java.lang.String) -> k
    191:194:double getAsDouble(com.google.gson.JsonObject,java.lang.String,double) -> a
    199:202:float convertToFloat(com.google.gson.JsonElement,java.lang.String) -> e
    207:210:float getAsFloat(com.google.gson.JsonObject,java.lang.String) -> l
    215:218:float getAsFloat(com.google.gson.JsonObject,java.lang.String,float) -> a
    223:226:long convertToLong(com.google.gson.JsonElement,java.lang.String) -> f
    231:234:long getAsLong(com.google.gson.JsonObject,java.lang.String) -> m
    239:242:long getAsLong(com.google.gson.JsonObject,java.lang.String,long) -> a
    247:250:int convertToInt(com.google.gson.JsonElement,java.lang.String) -> g
    255:258:int getAsInt(com.google.gson.JsonObject,java.lang.String) -> n
    263:266:int getAsInt(com.google.gson.JsonObject,java.lang.String,int) -> a
    271:274:byte convertToByte(com.google.gson.JsonElement,java.lang.String) -> h
    279:282:byte getAsByte(com.google.gson.JsonObject,java.lang.String) -> o
    287:290:byte getAsByte(com.google.gson.JsonObject,java.lang.String,byte) -> a
    295:298:char convertToCharacter(com.google.gson.JsonElement,java.lang.String) -> i
    303:306:char getAsCharacter(com.google.gson.JsonObject,java.lang.String) -> p
    311:314:char getAsCharacter(com.google.gson.JsonObject,java.lang.String,char) -> a
    319:322:java.math.BigDecimal convertToBigDecimal(com.google.gson.JsonElement,java.lang.String) -> j
    327:330:java.math.BigDecimal getAsBigDecimal(com.google.gson.JsonObject,java.lang.String) -> q
    335:338:java.math.BigDecimal getAsBigDecimal(com.google.gson.JsonObject,java.lang.String,java.math.BigDecimal) -> a
    343:346:java.math.BigInteger convertToBigInteger(com.google.gson.JsonElement,java.lang.String) -> k
    351:354:java.math.BigInteger getAsBigInteger(com.google.gson.JsonObject,java.lang.String) -> r
    359:362:java.math.BigInteger getAsBigInteger(com.google.gson.JsonObject,java.lang.String,java.math.BigInteger) -> a
    367:370:short convertToShort(com.google.gson.JsonElement,java.lang.String) -> l
    375:378:short getAsShort(com.google.gson.JsonObject,java.lang.String) -> s
    383:386:short getAsShort(com.google.gson.JsonObject,java.lang.String,short) -> a
    391:394:com.google.gson.JsonObject convertToJsonObject(com.google.gson.JsonElement,java.lang.String) -> m
    399:402:com.google.gson.JsonObject getAsJsonObject(com.google.gson.JsonObject,java.lang.String) -> t
    407:410:com.google.gson.JsonObject getAsJsonObject(com.google.gson.JsonObject,java.lang.String,com.google.gson.JsonObject) -> a
    415:418:com.google.gson.JsonArray convertToJsonArray(com.google.gson.JsonElement,java.lang.String) -> n
    423:426:com.google.gson.JsonArray getAsJsonArray(com.google.gson.JsonObject,java.lang.String) -> u
    432:435:com.google.gson.JsonArray getAsJsonArray(com.google.gson.JsonObject,java.lang.String,com.google.gson.JsonArray) -> a
    440:443:java.lang.Object convertToObject(com.google.gson.JsonElement,java.lang.String,com.google.gson.JsonDeserializationContext,java.lang.Class) -> a
    448:451:java.lang.Object getAsObject(com.google.gson.JsonObject,java.lang.String,com.google.gson.JsonDeserializationContext,java.lang.Class) -> a
    456:459:java.lang.Object getAsObject(com.google.gson.JsonObject,java.lang.String,java.lang.Object,com.google.gson.JsonDeserializationContext,java.lang.Class) -> a
    464:486:java.lang.String getType(com.google.gson.JsonElement) -> d
    492:496:java.lang.Object fromJson(com.google.gson.Gson,java.io.Reader,java.lang.Class,boolean) -> a
    504:508:java.lang.Object fromJson(com.google.gson.Gson,java.io.Reader,java.lang.reflect.Type,boolean) -> a
    514:514:java.lang.Object fromJson(com.google.gson.Gson,java.lang.String,java.lang.reflect.Type,boolean) -> a
    519:519:java.lang.Object fromJson(com.google.gson.Gson,java.lang.String,java.lang.Class,boolean) -> a
    524:524:java.lang.Object fromJson(com.google.gson.Gson,java.io.Reader,java.lang.reflect.Type) -> a
    529:529:java.lang.Object fromJson(com.google.gson.Gson,java.lang.String,java.lang.reflect.Type) -> a
    534:534:java.lang.Object fromJson(com.google.gson.Gson,java.io.Reader,java.lang.Class) -> a
    539:539:java.lang.Object fromJson(com.google.gson.Gson,java.lang.String,java.lang.Class) -> a
    543:543:com.google.gson.JsonObject parse(java.lang.String,boolean) -> a
    547:547:com.google.gson.JsonObject parse(java.io.Reader,boolean) -> a
    551:551:com.google.gson.JsonObject parse(java.lang.String) -> a
    555:555:com.google.gson.JsonObject parse(java.io.Reader) -> a
    128:128:com.google.gson.JsonSyntaxException lambda$convertToItem$0(java.lang.String,java.lang.String) -> a
    28:28:void <clinit>() -> <clinit>
net.minecraft.util.HttpUtil -> abl:
    org.apache.logging.log4j.Logger LOGGER -> b
    com.google.common.util.concurrent.ListeningExecutorService DOWNLOAD_EXECUTOR -> a
    38:39:void <init>() -> <init>
    42:65:java.lang.String buildQuery(java.util.Map) -> a
    69:69:java.lang.String performPost(java.net.URL,java.util.Map,boolean,java.net.Proxy) -> a
    74:110:java.lang.String performPost(java.net.URL,java.lang.String,boolean,java.net.Proxy) -> a
    115:115:java.util.concurrent.CompletableFuture downloadTo(java.io.File,java.lang.String,java.util.Map,int,net.minecraft.util.ProgressListener,java.net.Proxy) -> a
    225:228:int getAvailablePort() -> a
    116:220:java.lang.Object lambda$downloadTo$0(net.minecraft.util.ProgressListener,java.lang.String,java.net.Proxy,java.util.Map,java.io.File,int) -> a
    35:36:void <clinit>() -> <clinit>
net.minecraft.util.InsensitiveStringMap -> abm:
    java.util.Map map -> a
    10:11:void <init>() -> <init>
    15:15:int size() -> size
    20:20:boolean isEmpty() -> isEmpty
    25:25:boolean containsKey(java.lang.Object) -> containsKey
    30:30:boolean containsValue(java.lang.Object) -> containsValue
    35:35:java.lang.Object get(java.lang.Object) -> get
    40:40:java.lang.Object put(java.lang.String,java.lang.Object) -> a
    45:45:java.lang.Object remove(java.lang.Object) -> remove
    50:53:void putAll(java.util.Map) -> putAll
    57:58:void clear() -> clear
    62:62:java.util.Set keySet() -> keySet
    67:67:java.util.Collection values() -> values
    72:72:java.util.Set entrySet() -> entrySet
    10:10:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
net.minecraft.util.LazyLoadedValue -> abn:
    java.util.function.Supplier factory -> a
    java.lang.Object value -> b
    9:11:void <init>(java.util.function.Supplier) -> <init>
    14:20:java.lang.Object get() -> a
net.minecraft.util.LimitedCapacityList -> abo:
    java.lang.Object[] items -> a
    java.lang.Class clazz -> b
    java.util.concurrent.locks.ReadWriteLock locks -> c
    int size -> d
    int head -> e
    10:18:void <init>(java.lang.Class,int) -> <init>
    21:30:java.lang.Object add(java.lang.Object) -> a
    34:37:int getSize() -> a
    41:44:int getMaxSize() -> b
    49:61:java.lang.Object[] getItems() -> c
net.minecraft.util.LinearCongruentialGenerator -> abp:
    3:3:void <init>() -> <init>
    8:10:long next(long,long) -> a
net.minecraft.util.LowerCaseEnumTypeAdapterFactory -> abq:
    20:20:void <init>() -> <init>
    24:34:com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> create
    58:61:java.lang.String toLowercase(java.lang.Object) -> a
    20:20:java.lang.String access$000(net.minecraft.util.LowerCaseEnumTypeAdapterFactory,java.lang.Object) -> a
net.minecraft.util.LowerCaseEnumTypeAdapterFactory$1 -> abq$1:
    java.util.Map val$lowercaseToConstant -> a
    net.minecraft.util.LowerCaseEnumTypeAdapterFactory this$0 -> b
    34:34:void <init>(net.minecraft.util.LowerCaseEnumTypeAdapterFactory,java.util.Map) -> <init>
    37:42:void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
    47:51:java.lang.Object read(com.google.gson.stream.JsonReader) -> read
net.minecraft.util.Mth -> abr:
    float SQRT_OF_TWO -> a
    float[] SIN -> b
    java.util.Random RANDOM -> c
    int[] MULTIPLY_DE_BRUIJN_BIT_POSITION -> d
    double FRAC_BIAS -> e
    double[] ASIN_TAB -> f
    double[] COS_TAB -> g
    14:14:void <init>() -> <init>
    45:45:float sin(float) -> a
    49:49:float cos(float) -> b
    53:53:float sqrt(float) -> c
    57:57:float sqrt(double) -> a
    61:62:int floor(float) -> d
    66:66:int fastFloor(double) -> b
    70:71:int floor(double) -> c
    75:76:long lfloor(double) -> d
    80:80:int absFloor(double) -> e
    84:84:float abs(float) -> e
    88:88:int abs(int) -> a
    92:93:int ceil(float) -> f
    97:98:int ceil(double) -> f
    102:108:byte clamp(byte,byte,byte) -> a
    112:118:int clamp(int,int,int) -> a
    122:128:long clamp(long,long,long) -> a
    132:138:float clamp(float,float,float) -> a
    142:148:double clamp(double,double,double) -> a
    152:158:double clampedLerp(double,double,double) -> b
    162:168:double absMax(double,double) -> a
    172:172:int intFloorDiv(int,int) -> a
    176:179:int nextInt(java.util.Random,int,int) -> a
    183:186:float nextFloat(java.util.Random,float,float) -> a
    190:193:double nextDouble(java.util.Random,double,double) -> a
    197:203:double average(long[]) -> a
    207:207:boolean equal(float,float) -> a
    211:211:boolean equal(double,double) -> b
    215:215:int positiveModulo(int,int) -> b
    219:219:float positiveModulo(float,float) -> b
    223:223:double positiveModulo(double,double) -> c
    230:237:int wrapDegrees(int) -> b
    244:251:float wrapDegrees(float) -> g
    258:265:double wrapDegrees(double) -> g
    273:273:float degreesDifference(float,float) -> c
    281:281:float degreesDifferenceAbs(float,float) -> d
    290:292:float rotateIfNecessary(float,float,float) -> b
    296:301:float approach(float,float,float) -> c
    306:307:float approachDegrees(float,float,float) -> d
    311:311:int getInt(java.lang.String,int) -> a
    315:315:int getInt(java.lang.String,int,int) -> a
    320:322:double getDouble(java.lang.String,double) -> a
    327:327:double getDouble(java.lang.String,double,double) -> a
    332:338:int smallestEncompassingPowerOfTwo(int) -> c
    343:343:boolean isPowerOfTwo(int) -> g
    352:353:int ceillog2(int) -> d
    357:357:int log2(int) -> e
    362:377:int roundUp(int,int) -> c
    382:382:int color(float,float,float) -> e
    386:389:int color(int,int,int) -> b
    393:404:int colorMultiply(int,int) -> d
    408:416:int colorMultiply(int,float,float,float) -> a
    420:420:float frac(float) -> h
    424:424:double frac(double) -> h
    428:433:net.minecraft.world.phys.Vec3 catmullRomSplinePos(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,double) -> a
    437:437:long getSeed(net.minecraft.core.Vec3i) -> a
    441:443:long getSeed(int,int,int) -> c
    447:449:java.util.UUID createInsecureUUID(java.util.Random) -> a
    453:453:java.util.UUID createInsecureUUID() -> a
    457:457:double pct(double,double,double) -> c
    462:499:boolean rayIntersectsAABB(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.AABB) -> a
    503:565:double atan2(double,double) -> d
    569:574:float fastInvSqrt(float) -> i
    578:583:double fastInvSqrt(double) -> i
    587:592:float fastInvCubeRoot(float) -> j
    613:662:int hsvToRgb(float,float,float) -> f
    667:672:int murmurHash3Mixer(int) -> f
    676:681:long murmurHash3Mixer(long) -> a
    686:698:double[] cumulativeSum(double[]) -> a
    702:708:int getRandomForDistributionIntegral(java.util.Random,double[]) -> a
    712:723:double[] binNormalDistribution(double,double,double,int,int) -> a
    727:739:double[] binBiModalNormalDistribution(double,double,double,double,double,double,int,int) -> a
    743:751:double[] binLogDistribution(double,double,int,int) -> a
    769:781:int binarySearch(int,int,java.util.function.IntPredicate) -> a
    785:785:float lerp(float,float,float) -> g
    789:789:double lerp(double,double,double) -> d
    793:796:double lerp2(double,double,double,double,double,double) -> a
    805:808:double lerp3(double,double,double,double,double,double,double,double,double,double,double) -> a
    816:816:double smoothstep(double) -> j
    820:823:int sign(double) -> k
    827:827:float rotLerp(float,float,float) -> h
    831:831:float diffuseLight(float,float,float) -> i
    837:844:float rotlerp(float,float,float) -> j
    849:855:float rotWrap(double) -> l
    37:40:void lambda$static$0(float[]) -> a
    32:610:void <clinit>() -> <clinit>
net.minecraft.util.ProgressListener -> abs:
    void progressStartNoAbort(net.minecraft.network.chat.Component) -> a
    void progressStart(net.minecraft.network.chat.Component) -> b
    void progressStage(net.minecraft.network.chat.Component) -> c
    void progressStagePercentage(int) -> a
    void stop() -> a
net.minecraft.util.RewindableStream -> abt:
    java.util.List cache -> a
    java.util.Spliterator source -> b
    16:21:void <init>(java.util.stream.Stream) -> <init>
    25:25:java.util.stream.Stream getStream() -> a
    15:15:java.util.List access$000(net.minecraft.util.RewindableStream) -> a
    15:15:java.util.Spliterator access$100(net.minecraft.util.RewindableStream) -> b
net.minecraft.util.RewindableStream$1 -> abt$1:
    int index -> b
    net.minecraft.util.RewindableStream this$0 -> a
    25:25:void <init>(net.minecraft.util.RewindableStream,long,int) -> <init>
    30:36:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
net.minecraft.util.Serializable -> abu:
    java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.util.SmoothDouble -> abv:
    double targetValue -> a
    double remainingValue -> b
    double lastAmount -> c
    3:3:void <init>() -> <init>
    9:24:double getNewDeltaValue(double,double) -> a
    28:31:void reset() -> a
net.minecraft.util.SortedArraySet -> abw:
    java.util.Comparator comparator -> a
    java.lang.Object[] contents -> b
    int size -> c
    25:32:void <init>(int,java.util.Comparator) -> <init>
    35:35:net.minecraft.util.SortedArraySet create() -> a
    39:39:net.minecraft.util.SortedArraySet create(int) -> a
    43:43:net.minecraft.util.SortedArraySet create(java.util.Comparator) -> a
    47:47:net.minecraft.util.SortedArraySet create(java.util.Comparator,int) -> a
    52:52:java.lang.Object[] castRawArray(java.lang.Object[]) -> a
    56:56:int findIndex(java.lang.Object) -> c
    65:65:int getInsertionPosition(int) -> b
    70:77:boolean add(java.lang.Object) -> add
    81:93:void grow(int) -> c
    96:102:void addInternal(java.lang.Object,int) -> a
    106:111:void removeInternal(int) -> d
    114:114:java.lang.Object getInternal(int) -> e
    118:124:java.lang.Object addOrGet(java.lang.Object) -> a
    130:135:boolean remove(java.lang.Object) -> remove
    140:144:java.lang.Object get(java.lang.Object) -> b
    148:148:java.lang.Object first() -> b
    152:152:java.lang.Object last() -> c
    158:159:boolean contains(java.lang.Object) -> contains
    193:193:java.util.Iterator iterator() -> iterator
    198:198:int size() -> size
    203:203:java.lang.Object[] toArray() -> toArray
    209:216:java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    221:223:void clear() -> clear
    227:237:boolean equals(java.lang.Object) -> equals
    18:18:int access$000(net.minecraft.util.SortedArraySet) -> a
    18:18:java.lang.Object[] access$100(net.minecraft.util.SortedArraySet) -> b
    18:18:void access$200(net.minecraft.util.SortedArraySet,int) -> a
net.minecraft.util.SortedArraySet$1 -> abw$1:
net.minecraft.util.SortedArraySet$ArrayIterator -> abw$a:
    int index -> b
    int last -> c
    net.minecraft.util.SortedArraySet this$0 -> a
    162:164:void <init>(net.minecraft.util.SortedArraySet) -> <init>
    168:168:boolean hasNext() -> hasNext
    173:177:java.lang.Object next() -> next
    182:188:void remove() -> remove
    162:162:void <init>(net.minecraft.util.SortedArraySet,net.minecraft.util.SortedArraySet$1) -> <init>
net.minecraft.util.StringRepresentable -> abx:
    java.lang.String getSerializedName() -> o
net.minecraft.util.StringUtil -> aby:
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> a
    9:9:void <init>() -> <init>
    13:20:java.lang.String formatTickDuration(int) -> a
    24:24:java.lang.String stripColor(java.lang.String) -> a
    28:28:boolean isNullOrEmpty(java.lang.String) -> b
    37:44:java.lang.String truncateStringIfNecessary(java.lang.String,int,boolean) -> a
    10:10:void <clinit>() -> <clinit>
net.minecraft.util.Tuple -> abz:
    java.lang.Object a -> a
    java.lang.Object b -> b
    7:10:void <init>(java.lang.Object,java.lang.Object) -> <init>
    13:13:java.lang.Object getA() -> a
    17:18:void setA(java.lang.Object) -> a
    21:21:java.lang.Object getB() -> b
    25:26:void setB(java.lang.Object) -> b
net.minecraft.util.Unit -> aca:
    net.minecraft.util.Unit INSTANCE -> a
    net.minecraft.util.Unit[] $VALUES -> b
    3:3:net.minecraft.util.Unit[] values() -> values
    3:3:net.minecraft.util.Unit valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:4:void <clinit>() -> <clinit>
net.minecraft.util.VisibleForDebug -> acb:
net.minecraft.util.WeighedRandom -> acc:
    8:8:void <init>() -> <init>
    10:15:int getTotalWeight(java.util.List) -> a
    19:24:net.minecraft.util.WeighedRandom$WeighedRandomItem getRandomItem(java.util.Random,java.util.List,int) -> a
    28:35:net.minecraft.util.WeighedRandom$WeighedRandomItem getWeightedItem(java.util.List,int) -> a
    39:39:net.minecraft.util.WeighedRandom$WeighedRandomItem getRandomItem(java.util.Random,java.util.List) -> a
net.minecraft.util.WeighedRandom$WeighedRandomItem -> acc$a:
    int weight -> a
    45:47:void <init>(int) -> <init>
net.minecraft.util.datafix.DataFixTypes -> acd:
    net.minecraft.util.datafix.DataFixTypes LEVEL -> a
    net.minecraft.util.datafix.DataFixTypes PLAYER -> b
    net.minecraft.util.datafix.DataFixTypes CHUNK -> c
    net.minecraft.util.datafix.DataFixTypes HOTBAR -> d
    net.minecraft.util.datafix.DataFixTypes OPTIONS -> e
    net.minecraft.util.datafix.DataFixTypes STRUCTURE -> f
    net.minecraft.util.datafix.DataFixTypes STATS -> g
    net.minecraft.util.datafix.DataFixTypes SAVED_DATA -> h
    net.minecraft.util.datafix.DataFixTypes ADVANCEMENTS -> i
    net.minecraft.util.datafix.DataFixTypes POI_CHUNK -> j
    com.mojang.datafixers.DSL$TypeReference type -> k
    net.minecraft.util.datafix.DataFixTypes[] $VALUES -> l
    6:6:net.minecraft.util.datafix.DataFixTypes[] values() -> values
    6:6:net.minecraft.util.datafix.DataFixTypes valueOf(java.lang.String) -> valueOf
    21:23:void <init>(java.lang.String,int,com.mojang.datafixers.DSL$TypeReference) -> <init>
    26:26:com.mojang.datafixers.DSL$TypeReference getType() -> a
    6:16:void <clinit>() -> <clinit>
net.minecraft.util.datafix.DataFixers -> ace:
    java.util.function.BiFunction SAME -> a
    java.util.function.BiFunction SAME_NAMESPACED -> b
    com.mojang.datafixers.DataFixer DATA_FIXER -> c
    162:162:void <init>() -> <init>
    169:171:com.mojang.datafixers.DataFixer createFixerUpper() -> b
    175:175:com.mojang.datafixers.DataFixer getDataFixer() -> a
    183:605:void addFixers(com.mojang.datafixers.DataFixerBuilder) -> a
    597:597:java.lang.String lambda$addFixers$27(java.lang.String) -> a
    593:593:java.lang.String lambda$addFixers$26(java.lang.String) -> b
    586:586:java.lang.String lambda$addFixers$25(java.lang.String) -> c
    585:585:java.lang.String lambda$addFixers$24(java.lang.String) -> d
    555:555:java.lang.String lambda$addFixers$23(java.lang.String) -> e
    514:517:java.lang.String lambda$addFixers$22(java.lang.String) -> f
    507:511:java.lang.String lambda$addFixers$21(java.lang.String) -> g
    500:500:java.lang.String lambda$addFixers$20(java.lang.String) -> h
    493:493:java.lang.String lambda$addFixers$19(java.lang.String) -> i
    482:482:java.lang.String lambda$addFixers$18(java.lang.String) -> j
    481:481:java.lang.String lambda$addFixers$17(java.lang.String) -> k
    449:453:java.lang.String lambda$addFixers$16(java.lang.String) -> l
    446:446:java.lang.String lambda$addFixers$15(java.lang.String) -> m
    428:428:java.lang.String lambda$addFixers$14(java.lang.String) -> n
    422:425:java.lang.String lambda$addFixers$13(java.lang.String) -> o
    414:417:java.lang.String lambda$addFixers$12(java.lang.String) -> p
    408:411:java.lang.String lambda$addFixers$11(java.lang.String) -> q
    404:404:java.lang.String lambda$addFixers$10(java.lang.String) -> r
    393:396:java.lang.String lambda$addFixers$9(java.lang.String) -> s
    389:392:java.lang.String lambda$addFixers$8(java.lang.String) -> t
    386:386:java.lang.String lambda$addFixers$7(java.lang.String) -> u
    379:379:java.lang.String lambda$addFixers$6(java.lang.String) -> v
    378:378:java.lang.String lambda$addFixers$5(java.lang.String) -> w
    371:374:java.lang.String lambda$addFixers$4(java.lang.String) -> x
    367:367:java.lang.String lambda$addFixers$3(java.lang.String) -> y
    366:366:java.lang.String lambda$addFixers$2(java.lang.String) -> z
    289:289:java.lang.String lambda$addFixers$1(java.lang.String) -> A
    239:239:java.lang.String lambda$addFixers$0(java.lang.String) -> B
    163:166:void <clinit>() -> <clinit>
net.minecraft.util.datafix.DataFixers$1 -> ace$1:
    430:430:void <init>(com.mojang.datafixers.schemas.Schema,boolean,java.lang.String,com.mojang.datafixers.DSL$TypeReference,java.lang.String) -> <init>
    433:433:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.DataFixers$2 -> ace$2:
    436:436:void <init>(com.mojang.datafixers.schemas.Schema,boolean,java.lang.String,com.mojang.datafixers.DSL$TypeReference,java.lang.String) -> <init>
    439:439:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.OminousBannerBlockEntityRenameFix -> acf:
    14:15:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    19:19:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    23:29:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.OminousBannerRenameFix -> acg:
    22:23:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    26:37:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    42:46:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    47:56:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.AddNewChoices -> ach:
    java.lang.String name -> a
    com.mojang.datafixers.DSL$TypeReference type -> b
    14:17:void <init>(com.mojang.datafixers.schemas.Schema,java.lang.String,com.mojang.datafixers.DSL$TypeReference) -> <init>
    21:23:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    28:32:com.mojang.datafixers.TypeRewriteRule cap(java.lang.String,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType) -> a
    32:32:java.util.function.Function lambda$cap$1(com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.DynamicOps) -> a
    33:36:com.mojang.datafixers.util.Pair lambda$null$0(com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.util.Pair) -> a
net.minecraft.util.datafix.fixes.AdvancementsFix -> aci:
    java.util.Map RENAMES -> a
    68:69:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    68:68:java.lang.String lambda$new$0(java.lang.String) -> a
    9:65:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.AdvancementsRenameFix -> acj:
    java.lang.String name -> a
    java.util.function.Function renamer -> b
    15:18:void <init>(com.mojang.datafixers.schemas.Schema,boolean,java.lang.String,java.util.function.Function) -> <init>
    22:22:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    22:22:com.mojang.datafixers.Typed lambda$makeRule$3(com.mojang.datafixers.Typed) -> a
    23:23:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic) -> a
    24:25:com.mojang.datafixers.util.Pair lambda$null$1(com.mojang.datafixers.Dynamic,com.mojang.datafixers.util.Pair) -> a
    25:25:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic,java.lang.String,com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.BedBlockEntityInjecter -> ack:
    26:27:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    31:39:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    43:52:com.mojang.datafixers.TypeRewriteRule cap(com.mojang.datafixers.types.Type,com.mojang.datafixers.types.templates.List$ListType) -> a
    53:86:com.mojang.datafixers.Typed lambda$cap$4(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
    78:78:java.lang.IllegalStateException lambda$null$3() -> a
    64:64:java.lang.Integer lambda$null$2(com.mojang.datafixers.Dynamic) -> a
    51:51:java.util.function.Function lambda$cap$1(com.mojang.datafixers.types.DynamicOps) -> a
    51:51:com.mojang.datafixers.util.Pair lambda$null$0(com.mojang.datafixers.util.Pair) -> a
net.minecraft.util.datafix.fixes.BedItemColorFix -> acl:
    16:17:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    21:23:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    24:31:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.BeehivePoiRenameFix -> acm:
    7:8:void <init>(com.mojang.datafixers.schemas.Schema) -> <init>
    12:12:java.lang.String rename(java.lang.String) -> a
net.minecraft.util.datafix.fixes.BiomeFix -> acn:
    java.util.Map BIOMES -> a
    75:76:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    80:84:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    84:84:java.util.function.Function lambda$makeRule$2(com.mojang.datafixers.types.DynamicOps) -> a
    84:84:com.mojang.datafixers.util.Pair lambda$null$1(com.mojang.datafixers.util.Pair) -> a
    85:85:java.lang.String lambda$null$0(java.lang.String) -> a
    17:72:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.BlockEntityBannerColorFix -> aco:
    11:12:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    15:23:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    28:28:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    17:20:com.mojang.datafixers.Dynamic lambda$fixTag$4(com.mojang.datafixers.Dynamic) -> b
    18:18:java.util.stream.Stream lambda$null$3(java.util.stream.Stream) -> a
    19:19:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic) -> c
    19:19:com.mojang.datafixers.Dynamic lambda$null$1(com.mojang.datafixers.Dynamic) -> d
    15:15:com.mojang.datafixers.Dynamic lambda$fixTag$0(com.mojang.datafixers.Dynamic) -> e
net.minecraft.util.datafix.fixes.BlockEntityBlockStateFix -> acp:
    12:13:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    17:30:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    30:30:java.lang.IllegalStateException lambda$fix$1() -> a
    29:29:java.lang.IllegalStateException lambda$fix$0() -> b
net.minecraft.util.datafix.fixes.BlockEntityCustomNameToComponentFix -> acq:
    14:15:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    19:20:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    20:20:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    21:25:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Typed,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.BlockEntityIdFix -> acr:
    java.util.Map ID_MAP -> a
    16:17:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    47:55:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    55:55:java.util.function.Function lambda$makeRule$3(com.mojang.datafixers.types.DynamicOps) -> a
    56:56:com.mojang.datafixers.util.Pair lambda$null$2(com.mojang.datafixers.util.Pair) -> a
    56:56:java.lang.String lambda$null$1(java.lang.String) -> a
    20:43:void lambda$static$0(java.util.HashMap) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.BlockEntityJukeboxFix -> acs:
    12:13:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    17:33:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    30:30:java.lang.IllegalStateException lambda$fix$0() -> a
net.minecraft.util.datafix.fixes.BlockEntityKeepPacked -> act:
    10:11:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    14:14:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    19:19:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.BlockEntityShulkerBoxColorFix -> acu:
    9:10:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    14:14:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    14:14:com.mojang.datafixers.Dynamic lambda$fix$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.BlockEntitySignTextStrictJsonFix -> acv:
    com.google.gson.Gson GSON -> a
    23:24:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    56:94:com.mojang.datafixers.Dynamic updateLine(com.mojang.datafixers.Dynamic,java.lang.String) -> a
    99:99:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    100:105:com.mojang.datafixers.Dynamic lambda$fix$0(com.mojang.datafixers.Dynamic) -> a
    26:53:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.BlockEntitySignTextStrictJsonFix$1 -> acv$1:
    27:27:void <init>() -> <init>
    30:49:net.minecraft.network.chat.Component deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    27:27:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.util.datafix.fixes.BlockNameFlatteningFix -> acw:
    16:17:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    21:30:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    30:30:java.util.function.Function lambda$makeRule$3(com.mojang.datafixers.types.DynamicOps) -> a
    30:30:com.mojang.datafixers.util.Pair lambda$null$2(com.mojang.datafixers.util.Pair) -> a
    30:30:java.lang.String lambda$null$1(com.mojang.datafixers.util.Either) -> a
    32:32:java.lang.String lambda$null$0(java.lang.String) -> a
net.minecraft.util.datafix.fixes.BlockRenameFix -> acx:
    java.lang.String name -> a
    18:20:void <init>(com.mojang.datafixers.schemas.Schema,java.lang.String) -> <init>
    24:40:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    java.lang.String fixBlock(java.lang.String) -> a
    46:46:com.mojang.datafixers.DataFix create(com.mojang.datafixers.schemas.Schema,java.lang.String,java.util.function.Function) -> a
    32:32:com.mojang.datafixers.Typed lambda$makeRule$3(com.mojang.datafixers.Typed) -> a
    33:37:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic) -> a
    30:30:java.util.function.Function lambda$makeRule$1(com.mojang.datafixers.types.DynamicOps) -> a
    30:30:com.mojang.datafixers.util.Pair lambda$null$0(com.mojang.datafixers.util.Pair) -> a
net.minecraft.util.datafix.fixes.BlockRenameFix$1 -> acx$1:
    java.util.function.Function val$fixBlock -> a
    46:46:void <init>(com.mojang.datafixers.schemas.Schema,java.lang.String,java.util.function.Function) -> <init>
    49:49:java.lang.String fixBlock(java.lang.String) -> a
net.minecraft.util.datafix.fixes.BlockStateData -> acy:
    org.apache.logging.log4j.Logger LOGGER -> a
    com.mojang.datafixers.Dynamic[] MAP -> b
    com.mojang.datafixers.Dynamic[] BLOCK_DEFAULTS -> c
    it.unimi.dsi.fastutil.objects.Object2IntMap ID_BY_OLD -> d
    it.unimi.dsi.fastutil.objects.Object2IntMap ID_BY_OLD_NAME -> e
    12:12:void <init>() -> <init>
    21:33:void register(int,java.lang.String,java.lang.String[]) -> a
    36:41:void finalizeMaps() -> a
    44:49:com.mojang.datafixers.Dynamic upgradeBlockStateTag(com.mojang.datafixers.Dynamic) -> a
    53:58:java.lang.String upgradeBlock(java.lang.String) -> a
    62:66:java.lang.String upgradeBlock(int) -> a
    72:75:com.mojang.datafixers.Dynamic parse(java.lang.String) -> b
    80:84:com.mojang.datafixers.Dynamic getTag(int) -> b
    17:17:void lambda$static$1(it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap) -> a
    16:16:void lambda$static$0(it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap) -> b
    13:1785:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.BlockStateStructureTemplateFix -> acz:
    10:11:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    15:15:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    15:15:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.CatTypeFix -> ada:
    10:11:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    14:17:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    22:22:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.ChunkBiomeFix -> adb:
    16:17:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    21:24:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    24:24:com.mojang.datafixers.Typed lambda$makeRule$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    24:24:com.mojang.datafixers.Typed lambda$null$1(com.mojang.datafixers.Typed) -> a
    25:44:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.ChunkLightRemoveFix -> adc:
    12:13:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    17:22:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    22:22:com.mojang.datafixers.Typed lambda$makeRule$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    22:22:com.mojang.datafixers.Typed lambda$null$1(com.mojang.datafixers.Typed) -> a
    23:23:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix -> add:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.BitSet VIRTUAL -> b
    java.util.BitSet FIX -> c
    com.mojang.datafixers.Dynamic PUMPKIN -> d
    com.mojang.datafixers.Dynamic SNOWY_PODZOL -> e
    com.mojang.datafixers.Dynamic SNOWY_GRASS -> f
    com.mojang.datafixers.Dynamic SNOWY_MYCELIUM -> g
    com.mojang.datafixers.Dynamic UPPER_SUNFLOWER -> h
    com.mojang.datafixers.Dynamic UPPER_LILAC -> i
    com.mojang.datafixers.Dynamic UPPER_TALL_GRASS -> j
    com.mojang.datafixers.Dynamic UPPER_LARGE_FERN -> k
    com.mojang.datafixers.Dynamic UPPER_ROSE_BUSH -> l
    com.mojang.datafixers.Dynamic UPPER_PEONY -> m
    java.util.Map FLOWER_POT_MAP -> n
    java.util.Map SKULL_MAP -> o
    java.util.Map DOOR_MAP -> p
    java.util.Map NOTE_BLOCK_MAP -> q
    it.unimi.dsi.fastutil.ints.Int2ObjectMap DYE_COLOR_MAP -> r
    java.util.Map BED_BLOCK_MAP -> s
    java.util.Map BANNER_BLOCK_MAP -> t
    com.mojang.datafixers.Dynamic AIR -> u
    41:42:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    94:101:void mapSkull(java.util.Map,int,java.lang.String,java.lang.String) -> a
    114:178:void mapDoor(java.util.Map,java.lang.String,int) -> a
    215:227:void addBeds(java.util.Map,int,java.lang.String) -> a
    239:246:void addBanners(java.util.Map,int,java.lang.String) -> b
    336:336:java.lang.String getName(com.mojang.datafixers.Dynamic) -> a
    340:340:java.lang.String getProperty(com.mojang.datafixers.Dynamic,java.lang.String) -> a
    344:348:int idFor(net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap,com.mojang.datafixers.Dynamic) -> a
    352:356:com.mojang.datafixers.Dynamic fix(com.mojang.datafixers.Dynamic) -> b
    361:363:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    834:856:int getSideMask(boolean,boolean,boolean,boolean) -> a
    230:236:void lambda$static$6(java.util.HashMap) -> a
    207:212:void lambda$static$5(java.util.HashMap) -> b
    188:204:void lambda$static$4(it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap) -> a
    181:185:void lambda$static$3(java.util.HashMap) -> c
    104:111:void lambda$static$2(java.util.HashMap) -> d
    85:91:void lambda$static$1(java.util.HashMap) -> e
    60:82:void lambda$static$0(java.util.HashMap) -> f
    30:30:com.mojang.datafixers.Dynamic access$000() -> a
    30:30:java.util.BitSet access$100() -> b
    30:30:java.util.BitSet access$200() -> c
    30:30:com.mojang.datafixers.Dynamic access$400() -> d
    30:30:com.mojang.datafixers.Dynamic access$500() -> e
    30:30:com.mojang.datafixers.Dynamic access$600() -> f
    30:30:java.util.Map access$700() -> g
    30:30:java.util.Map access$800() -> h
    30:30:java.util.Map access$900() -> i
    30:30:com.mojang.datafixers.Dynamic access$1000() -> j
    30:30:java.util.Map access$1100() -> k
    30:30:java.util.Map access$1200() -> l
    30:30:java.util.Map access$1300() -> m
    30:30:com.mojang.datafixers.Dynamic access$1400() -> n
    30:30:com.mojang.datafixers.Dynamic access$1500() -> o
    30:30:com.mojang.datafixers.Dynamic access$1600() -> p
    30:30:com.mojang.datafixers.Dynamic access$1700() -> q
    30:30:com.mojang.datafixers.Dynamic access$1800() -> r
    30:30:com.mojang.datafixers.Dynamic access$1900() -> s
    30:30:org.apache.logging.log4j.Logger access$2100() -> t
    44:332:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$1 -> add$1:
    int[] $SwitchMap$net$minecraft$util$datafix$fixes$ChunkPalettedStorageFix$Direction$Axis -> a
    724:724:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$DataLayer -> add$a:
    byte[] data -> a
    802:804:void <init>() -> <init>
    806:812:void <init>(byte[]) -> <init>
    815:820:int get(int,int,int) -> a
    825:825:boolean isFirst(int) -> a
    829:829:int getPosition(int) -> b
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction -> add$b:
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction DOWN -> a
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction UP -> b
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction NORTH -> c
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction SOUTH -> d
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction WEST -> e
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction EAST -> f
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis axis -> g
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection axisDirection -> h
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction[] $VALUES -> i
    859:859:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction[] values() -> values
    859:859:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction valueOf(java.lang.String) -> valueOf
    871:874:void <init>(java.lang.String,int,net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection,net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis) -> <init>
    877:877:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection getAxisDirection() -> a
    881:881:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis getAxis() -> b
    859:865:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis -> add$b$a:
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis X -> a
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis Y -> b
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis Z -> c
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis[] $VALUES -> d
    884:884:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis[] values() -> values
    884:884:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$Axis valueOf(java.lang.String) -> valueOf
    884:884:void <init>(java.lang.String,int) -> <init>
    884:887:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection -> add$b$b:
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection POSITIVE -> a
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection NEGATIVE -> b
    int step -> c
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection[] $VALUES -> d
    890:890:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection[] values() -> values
    890:890:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction$AxisDirection valueOf(java.lang.String) -> valueOf
    897:899:void <init>(java.lang.String,int,int) -> <init>
    902:902:int getStep() -> a
    890:892:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Section -> add$c:
    net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap palette -> b
    com.mojang.datafixers.Dynamic listTag -> c
    com.mojang.datafixers.Dynamic section -> d
    boolean hasData -> e
    it.unimi.dsi.fastutil.ints.Int2ObjectMap toFix -> f
    it.unimi.dsi.fastutil.ints.IntList update -> g
    int y -> a
    java.util.Set seen -> h
    int[] buffer -> i
    367:384:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    387:392:com.mojang.datafixers.Dynamic getBlock(int) -> a
    396:400:void setBlock(int,com.mojang.datafixers.Dynamic) -> a
    403:437:int upgrade(int) -> b
    441:447:void addFix(int,int) -> a
    450:468:com.mojang.datafixers.Dynamic write() -> a
    408:408:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$DataLayer lambda$upgrade$1(java.nio.ByteBuffer) -> a
    407:407:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$DataLayer lambda$upgrade$0(java.nio.ByteBuffer) -> b
    366:366:it.unimi.dsi.fastutil.ints.Int2ObjectMap access$300(net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Section) -> a
    366:366:it.unimi.dsi.fastutil.ints.IntList access$2000(net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Section) -> b
net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$UpgradeChunk -> add$d:
    int sides -> a
    net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Section[] sections -> b
    com.mojang.datafixers.Dynamic level -> c
    int x -> d
    int z -> e
    it.unimi.dsi.fastutil.ints.Int2ObjectMap blockEntities -> f
    475:711:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    715:715:com.mojang.datafixers.Dynamic getBlockEntity(int) -> b
    720:720:com.mojang.datafixers.Dynamic removeBlockEntity(int) -> c
    724:735:int relative(int,net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Direction) -> a
    739:750:void setBlock(int,com.mojang.datafixers.Dynamic) -> a
    754:755:net.minecraft.util.datafix.fixes.ChunkPalettedStorageFix$Section getSection(int) -> d
    759:769:com.mojang.datafixers.Dynamic getBlock(int) -> a
    773:792:com.mojang.datafixers.Dynamic write() -> a
    502:502:void lambda$new$3(java.util.stream.Stream) -> a
    503:508:void lambda$null$2(com.mojang.datafixers.Dynamic) -> a
    488:488:void lambda$new$1(java.util.stream.Stream) -> b
    489:497:void lambda$null$0(com.mojang.datafixers.Dynamic) -> b
net.minecraft.util.datafix.fixes.ChunkStatusFix -> ade:
    15:16:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    20:25:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    25:25:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    26:31:com.mojang.datafixers.Typed lambda$null$0(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.ChunkStatusFix2 -> adf:
    java.util.Map RENAMES_AND_DOWNGRADES -> a
    30:31:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    35:40:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    40:40:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    41:48:com.mojang.datafixers.Typed lambda$null$0(com.mojang.datafixers.Typed) -> a
    16:27:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ChunkStructuresTemplateRenameFix -> adg:
    com.google.common.collect.ImmutableMap RENAMES -> a
    105:106:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    110:112:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    116:124:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic,com.mojang.datafixers.Dynamic) -> a
    112:112:com.mojang.datafixers.Typed lambda$makeRule$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    112:112:com.mojang.datafixers.Typed lambda$null$1(com.mojang.datafixers.Typed,com.mojang.datafixers.Typed) -> a
    112:112:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Typed,com.mojang.datafixers.Dynamic) -> a
    14:102:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ChunkToProtochunkFix -> adh:
    24:25:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    29:82:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    87:87:short packOffsetCoordinates(int,int,int) -> a
    39:39:com.mojang.datafixers.Typed lambda$makeRule$4(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    40:80:com.mojang.datafixers.Typed lambda$null$3(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
    80:80:java.lang.IllegalStateException lambda$null$2() -> a
    67:72:void lambda$null$1(java.util.List,com.mojang.datafixers.Dynamic,com.mojang.datafixers.Dynamic) -> a
    63:63:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic,int) -> a
net.minecraft.util.datafix.fixes.ColorlessShulkerEntityFix -> adi:
    9:10:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    14:14:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    15:18:com.mojang.datafixers.Dynamic lambda$fix$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.DyeItemRenameFix -> adj:
    java.util.Map RENAMED_IDS -> a
    7:7:void <init>() -> <init>
    8:12:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityArmorStandSilentFix -> adk:
    10:11:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    14:17:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    22:22:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityBlockStateFix -> adl:
    java.util.Map MAP -> a
    34:35:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    295:296:int getBlockId(java.lang.String) -> a
    301:314:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    339:355:com.mojang.datafixers.Typed updateFallingBlock(com.mojang.datafixers.Typed) -> a
    359:369:com.mojang.datafixers.Typed updateBlockToBlockState(com.mojang.datafixers.Typed,java.lang.String,java.lang.String,java.lang.String) -> a
    373:375:com.mojang.datafixers.Typed updateEntity(com.mojang.datafixers.Typed,java.lang.String,java.util.function.Function) -> a
    365:368:com.mojang.datafixers.util.Pair lambda$updateBlockToBlockState$12(com.mojang.datafixers.Dynamic,java.lang.String,com.mojang.datafixers.util.Pair) -> a
    365:365:java.lang.Integer lambda$null$11(java.lang.Integer) -> a
    345:354:com.mojang.datafixers.util.Either lambda$updateFallingBlock$10(com.mojang.datafixers.Dynamic,com.mojang.datafixers.util.Either) -> a
    349:350:java.lang.Integer lambda$null$9(com.mojang.datafixers.Dynamic,com.mojang.datafixers.util.Unit) -> a
    350:350:java.lang.Integer lambda$null$8(com.mojang.datafixers.Dynamic) -> a
    347:347:java.lang.Integer lambda$null$7(com.mojang.datafixers.util.Pair) -> a
    347:347:java.lang.Integer lambda$null$6(java.lang.Integer) -> b
    315:334:com.mojang.datafixers.Typed lambda$makeRule$5(java.util.function.Function,java.util.function.Function,java.util.function.Function,com.mojang.datafixers.Typed) -> a
    316:316:com.mojang.datafixers.Typed lambda$null$4(com.mojang.datafixers.Typed) -> b
    312:312:com.mojang.datafixers.Typed lambda$makeRule$3(com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
    305:305:com.mojang.datafixers.Typed lambda$makeRule$2(com.mojang.datafixers.Typed) -> c
    304:304:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.Typed) -> d
    38:292:void lambda$static$0(java.util.HashMap) -> a
    37:37:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityCatSplitFix -> adm:
    11:12:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    16:31:com.mojang.datafixers.util.Pair getNewNameAndTag(java.lang.String,com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityCodSalmonFix -> adn:
    java.util.Map RENAMED_IDS -> a
    java.util.Map RENAMED_EGG_IDS -> b
    20:21:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    25:25:java.lang.String rename(java.lang.String) -> a
    9:17:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityCustomNameToComponentFix -> ado:
    17:18:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    22:23:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    33:37:com.mojang.datafixers.Dynamic fixTagCustomName(com.mojang.datafixers.Dynamic) -> a
    23:23:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    24:28:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Typed,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityElderGuardianSplitFix -> adp:
    11:12:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    16:16:com.mojang.datafixers.util.Pair getNewNameAndTag(java.lang.String,com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityEquipmentToArmorAndHandFix -> adq:
    32:33:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    37:37:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    42:56:com.mojang.datafixers.TypeRewriteRule cap(com.mojang.datafixers.types.Type) -> a
    57:107:com.mojang.datafixers.Typed lambda$cap$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
    85:85:com.mojang.datafixers.Dynamic lambda$null$1(com.mojang.datafixers.Dynamic) -> a
    66:66:java.lang.IllegalStateException lambda$null$0() -> a
net.minecraft.util.datafix.fixes.EntityHealthFix -> adr:
    java.util.Set ENTITIES -> a
    15:16:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    58:68:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    73:73:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    73:73:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.Typed) -> a
    18:18:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityHorseSaddleFix -> ads:
    15:16:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    22:41:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntityHorseSplitFix -> adt:
    14:15:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    19:46:com.mojang.datafixers.util.Pair fix(java.lang.String,com.mojang.datafixers.Typed) -> a
    44:44:java.lang.IllegalStateException lambda$fix$0() -> a
net.minecraft.util.datafix.fixes.EntityIdFix -> adu:
    java.util.Map ID_MAP -> a
    15:16:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    98:106:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    106:106:java.util.function.Function lambda$makeRule$3(com.mojang.datafixers.types.DynamicOps) -> a
    107:107:com.mojang.datafixers.util.Pair lambda$null$2(com.mojang.datafixers.util.Pair) -> a
    107:107:java.lang.String lambda$null$1(java.lang.String) -> a
    19:94:void lambda$static$0(java.util.HashMap) -> a
    18:18:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityItemFrameDirectionFix -> adv:
    10:11:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    14:14:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    19:19:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    23:32:byte direction2dTo3d(byte) -> a
net.minecraft.util.datafix.fixes.EntityMinecartIdentifiersFix -> adw:
    java.util.List MINECART_BY_ID -> a
    18:19:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    30:33:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    33:33:java.util.function.Function lambda$makeRule$2(com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.DynamicOps) -> a
    34:47:com.mojang.datafixers.util.Pair lambda$null$1(com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.DynamicOps,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.util.Pair) -> a
    45:45:java.lang.IllegalStateException lambda$null$0() -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityPaintingItemFrameDirectionFix -> adx:
    int[][] DIRECTIONS -> a
    20:21:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    24:46:com.mojang.datafixers.Dynamic doFix(com.mojang.datafixers.Dynamic,boolean,boolean) -> a
    51:66:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    63:63:com.mojang.datafixers.Typed lambda$makeRule$5(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
    63:63:com.mojang.datafixers.Typed lambda$null$4(com.mojang.datafixers.Typed) -> a
    63:63:com.mojang.datafixers.Dynamic lambda$null$3(com.mojang.datafixers.Dynamic) -> a
    60:60:com.mojang.datafixers.Typed lambda$makeRule$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> b
    60:60:com.mojang.datafixers.Typed lambda$null$1(com.mojang.datafixers.Typed) -> b
    60:60:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> b
    12:12:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityPaintingMotiveFix -> ady:
    java.util.Map MAP -> a
    17:18:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    27:32:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    37:37:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    21:24:void lambda$static$0(java.util.HashMap) -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityPufferfishRenameFix -> adz:
    java.util.Map RENAMED_IDS -> a
    15:16:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    20:20:java.lang.String rename(java.lang.String) -> a
    10:12:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityRavagerRenameFix -> aea:
    java.util.Map RENAMED_IDS -> a
    15:16:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    20:20:java.lang.String rename(java.lang.String) -> a
    10:12:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityRedundantChanceTagsFix -> aeb:
    15:16:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    20:20:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    20:20:com.mojang.datafixers.Typed lambda$makeRule$3(com.mojang.datafixers.Typed) -> a
    21:29:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic) -> a
    26:26:com.mojang.datafixers.Dynamic lambda$null$1(com.mojang.datafixers.Dynamic) -> b
    22:22:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> c
net.minecraft.util.datafix.fixes.EntityRenameFix -> aec:
    java.lang.String name -> a
    16:18:void <init>(java.lang.String,com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    23:26:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    43:43:com.mojang.datafixers.Typed getEntity(java.lang.Object,com.mojang.datafixers.types.DynamicOps,com.mojang.datafixers.types.Type) -> a
    com.mojang.datafixers.util.Pair fix(java.lang.String,com.mojang.datafixers.Typed) -> a
    26:26:java.util.function.Function lambda$makeRule$1(com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.DynamicOps) -> a
    27:37:com.mojang.datafixers.util.Pair lambda$null$0(com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.DynamicOps,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.util.Pair) -> a
net.minecraft.util.datafix.fixes.EntityRidingToPassengersFix -> aed:
    22:23:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    27:34:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    38:90:com.mojang.datafixers.TypeRewriteRule cap(com.mojang.datafixers.schemas.Schema,com.mojang.datafixers.schemas.Schema,com.mojang.datafixers.types.Type,com.mojang.datafixers.types.Type,com.mojang.datafixers.types.Type) -> a
    67:67:java.util.function.Function lambda$cap$6(com.mojang.datafixers.types.Type,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.DynamicOps) -> a
    68:87:com.mojang.datafixers.util.Pair lambda$null$5(com.mojang.datafixers.types.Type,com.mojang.datafixers.types.DynamicOps,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.util.Pair) -> a
    87:87:java.lang.IllegalStateException lambda$null$4() -> a
    84:84:java.lang.IllegalStateException lambda$null$3() -> b
    73:75:com.mojang.datafixers.util.Either lambda$null$2(com.mojang.datafixers.types.Type,com.mojang.datafixers.types.DynamicOps,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.util.Pair) -> a
    74:74:java.lang.IllegalStateException lambda$null$1() -> c
    73:73:java.lang.IllegalStateException lambda$null$0() -> d
net.minecraft.util.datafix.fixes.EntityShulkerColorFix -> aee:
    10:11:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    14:17:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    22:22:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.EntitySkeletonSplitFix -> aef:
    11:12:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    16:24:com.mojang.datafixers.util.Pair getNewNameAndTag(java.lang.String,com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityStringUuidFix -> aeg:
    13:14:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    18:18:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    18:18:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.Typed) -> a
    19:27:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityTheRenameningFix -> aeh:
    java.util.Map RENAMED_IDS -> a
    java.util.Map RENAMED_BLOCKS -> b
    java.util.Map RENAMED_ITEMS -> c
    52:53:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    58:61:java.lang.String rename(java.lang.String) -> a
    9:47:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.EntityTippedArrowFix -> aei:
    9:10:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    14:14:java.lang.String rename(java.lang.String) -> a
net.minecraft.util.datafix.fixes.EntityWolfColorFix -> aej:
    10:11:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    14:14:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    19:19:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    14:14:com.mojang.datafixers.Dynamic lambda$fixTag$0(com.mojang.datafixers.Dynamic) -> b
net.minecraft.util.datafix.fixes.EntityZombieSplitFix -> aek:
    11:12:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    16:38:com.mojang.datafixers.util.Pair getNewNameAndTag(java.lang.String,com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.EntityZombieVillagerTypeFix -> ael:
    java.util.Random RANDOM -> a
    14:15:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    20:32:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    36:39:int getVillagerProfession(int) -> a
    44:44:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    17:17:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ForcePoiRebuild -> aem:
    18:19:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    23:28:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    32:32:com.mojang.datafixers.Dynamic cap(com.mojang.datafixers.Dynamic) -> a
    33:33:com.mojang.datafixers.Dynamic lambda$cap$4(com.mojang.datafixers.Dynamic) -> b
    33:33:com.mojang.datafixers.util.Pair lambda$null$3(com.mojang.datafixers.util.Pair) -> a
    33:33:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic) -> c
    28:28:java.util.function.Function lambda$makeRule$1(com.mojang.datafixers.types.DynamicOps) -> a
    28:28:com.mojang.datafixers.util.Pair lambda$null$0(com.mojang.datafixers.util.Pair) -> b
net.minecraft.util.datafix.fixes.HeightmapRenamingFix -> aen:
    15:16:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    20:22:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    28:61:com.mojang.datafixers.Dynamic fix(com.mojang.datafixers.Dynamic) -> a
    22:22:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    23:23:com.mojang.datafixers.Typed lambda$null$0(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.IglooMetadataRemovalFix -> aeo:
    11:12:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    16:19:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    23:28:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    33:33:com.mojang.datafixers.Dynamic removeIglooPieces(com.mojang.datafixers.Dynamic) -> b
    37:37:boolean isIglooPiece(com.mojang.datafixers.Dynamic) -> c
    33:33:java.util.stream.Stream lambda$removeIglooPieces$2(java.util.stream.Stream) -> a
    33:33:boolean lambda$null$1(com.mojang.datafixers.Dynamic) -> d
    23:23:java.lang.Boolean lambda$fixTag$0(java.util.stream.Stream) -> b
net.minecraft.util.datafix.fixes.ItemBannerColorFix -> aep:
    19:20:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    24:30:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    31:66:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.ItemCustomNameToComponentFix -> aeq:
    18:19:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    22:37:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    42:45:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    45:45:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    45:45:com.mojang.datafixers.Typed lambda$null$0(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.ItemIdFix -> aer:
    it.unimi.dsi.fastutil.ints.Int2ObjectMap ITEM_NAMES -> a
    22:23:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    345:345:java.lang.String getItem(int) -> a
    350:353:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    354:354:com.mojang.datafixers.Typed lambda$makeRule$4(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
    355:355:com.mojang.datafixers.util.Pair lambda$null$3(com.mojang.datafixers.util.Either) -> a
    357:357:com.mojang.datafixers.util.Pair lambda$null$2(com.mojang.datafixers.util.Pair) -> a
    356:356:com.mojang.datafixers.util.Pair lambda$null$1(java.lang.Integer) -> a
    26:342:void lambda$static$0(it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap) -> a
    25:25:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ItemLoreFix -> aes:
    18:19:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    23:26:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    40:40:java.util.stream.Stream fixLoreList(java.util.stream.Stream) -> a
    46:46:java.lang.String fixLoreEntry(java.lang.String) -> a
    41:41:com.mojang.datafixers.Dynamic lambda$fixLoreList$5(com.mojang.datafixers.Dynamic) -> a
    27:27:com.mojang.datafixers.Typed lambda$makeRule$4(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    28:28:com.mojang.datafixers.Typed lambda$null$3(com.mojang.datafixers.Typed) -> a
    29:29:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic) -> b
    30:30:com.mojang.datafixers.Dynamic lambda$null$1(com.mojang.datafixers.Dynamic) -> c
    31:31:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> d
net.minecraft.util.datafix.fixes.ItemPotionFix -> aet:
    java.lang.String[] POTIONS -> a
    23:24:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    162:166:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    167:193:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    28:156:void lambda$static$0(java.lang.String[]) -> a
    27:27:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ItemRenameFix -> aeu:
    java.lang.String name -> a
    19:21:void <init>(com.mojang.datafixers.schemas.Schema,java.lang.String) -> <init>
    25:29:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    java.lang.String fixItem(java.lang.String) -> a
    35:35:com.mojang.datafixers.DataFix create(com.mojang.datafixers.schemas.Schema,java.lang.String,java.util.function.Function) -> a
    29:29:java.util.function.Function lambda$makeRule$1(com.mojang.datafixers.types.DynamicOps) -> a
    29:29:com.mojang.datafixers.util.Pair lambda$null$0(com.mojang.datafixers.util.Pair) -> a
net.minecraft.util.datafix.fixes.ItemRenameFix$1 -> aeu$1:
    java.util.function.Function val$fixItem -> a
    35:35:void <init>(com.mojang.datafixers.schemas.Schema,java.lang.String,java.util.function.Function) -> <init>
    38:38:java.lang.String fixItem(java.lang.String) -> a
net.minecraft.util.datafix.fixes.ItemShulkerBoxColorFix -> aev:
    java.lang.String[] NAMES_BY_COLOR -> a
    18:19:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    42:48:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    49:64:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ItemSpawnEggFix -> aew:
    java.lang.String[] ID_TO_ENTITY -> a
    19:20:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    105:114:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    115:144:com.mojang.datafixers.Typed lambda$makeRule$5(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    134:134:java.lang.IllegalStateException lambda$null$4() -> a
    123:123:java.util.Optional lambda$null$3(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    122:122:java.util.Optional lambda$null$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> b
    121:121:java.util.Optional lambda$null$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> c
    24:101:void lambda$static$0(java.lang.String[]) -> a
    22:22:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ItemStackEnchantmentNamesFix -> aex:
    it.unimi.dsi.fastutil.ints.Int2ObjectMap MAP -> a
    61:62:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    66:68:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    72:80:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    80:83:com.mojang.datafixers.Dynamic lambda$fixTag$7(com.mojang.datafixers.Dynamic) -> b
    81:81:java.util.stream.Stream lambda$null$6(java.util.stream.Stream) -> a
    82:82:com.mojang.datafixers.Dynamic lambda$null$5(com.mojang.datafixers.Dynamic) -> c
    72:72:java.util.stream.Stream lambda$fixTag$4(java.util.stream.Stream) -> b
    73:73:com.mojang.datafixers.Dynamic lambda$null$3(com.mojang.datafixers.Dynamic) -> d
    68:68:com.mojang.datafixers.Typed lambda$makeRule$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    68:68:com.mojang.datafixers.Typed lambda$null$1(com.mojang.datafixers.Typed) -> a
    18:58:void lambda$static$0(it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap) -> a
    17:17:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ItemStackMapIdFix -> aey:
    18:19:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    23:28:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    29:37:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.ItemStackSpawnEggFix -> aez:
    java.util.Map MAP -> a
    20:21:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    73:80:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    81:91:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    24:69:void lambda$static$0(java.util.HashMap) -> a
    23:23:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ItemStackTheFlatteningFix -> afa:
    java.util.Map MAP -> a
    java.util.Set IDS -> b
    java.util.Set DAMAGE_IDS -> c
    24:25:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    410:415:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    444:448:java.lang.String updateItem(java.lang.String,int) -> a
    416:438:com.mojang.datafixers.Typed lambda$makeRule$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    351:351:java.lang.String lambda$static$1(java.lang.String) -> a
    28:349:void lambda$static$0(java.util.HashMap) -> a
    27:353:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ItemWaterPotionFix -> afb:
    17:18:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    22:27:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    28:44:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.ItemWrittenBookPagesStrictJsonFix -> afc:
    19:20:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    23:23:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    72:75:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    76:76:com.mojang.datafixers.Typed lambda$makeRule$4(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    77:77:com.mojang.datafixers.Typed lambda$null$3(com.mojang.datafixers.Typed) -> a
    23:66:com.mojang.datafixers.Dynamic lambda$fixTag$2(com.mojang.datafixers.Dynamic,com.mojang.datafixers.Dynamic) -> a
    24:24:java.util.stream.Stream lambda$null$1(java.util.stream.Stream) -> a
    25:65:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> b
net.minecraft.util.datafix.fixes.LeavesFix -> afd:
    int[][] DIRECTIONS -> a
    it.unimi.dsi.fastutil.objects.Object2IntMap LEAVES -> b
    java.util.Set LOGS -> c
    89:90:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    94:105:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    346:346:int getIndex(int,int,int) -> a
    350:350:int getX(int) -> a
    354:354:int getY(int) -> b
    358:358:int getZ(int) -> c
    362:384:int getSideMask(boolean,boolean,boolean,boolean) -> a
    105:105:com.mojang.datafixers.Typed lambda$makeRule$7(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    106:185:com.mojang.datafixers.Typed lambda$null$6(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    180:181:com.mojang.datafixers.Dynamic lambda$null$5(int[],com.mojang.datafixers.Dynamic) -> a
    109:175:com.mojang.datafixers.Typed lambda$null$4(com.mojang.datafixers.OpticFinder,int[],com.mojang.datafixers.Typed) -> a
    175:175:com.mojang.datafixers.Typed lambda$null$3(it.unimi.dsi.fastutil.ints.Int2ObjectMap,com.mojang.datafixers.Typed) -> a
    109:109:net.minecraft.util.datafix.fixes.LeavesFix$LeavesSection lambda$null$2(net.minecraft.util.datafix.fixes.LeavesFix$LeavesSection) -> a
    109:109:net.minecraft.util.datafix.fixes.LeavesFix$LeavesSection lambda$null$1(com.mojang.datafixers.Typed) -> a
    59:65:void lambda$static$0(it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap) -> a
    35:35:it.unimi.dsi.fastutil.objects.Object2IntMap access$000() -> a
    35:35:java.util.Set access$100() -> b
    45:67:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.LeavesFix$LeavesSection -> afd$a:
    it.unimi.dsi.fastutil.ints.IntSet leaveIds -> e
    it.unimi.dsi.fastutil.ints.IntSet logIds -> f
    it.unimi.dsi.fastutil.ints.Int2IntMap stateToIdMap -> g
    268:269:void <init>(com.mojang.datafixers.Typed,com.mojang.datafixers.schemas.Schema) -> <init>
    273:291:boolean skippable() -> a
    295:302:com.mojang.datafixers.Dynamic makeLeafTag(com.mojang.datafixers.Dynamic,java.lang.String,boolean,int) -> a
    306:306:boolean isLog(int) -> a
    310:310:boolean isLeaf(int) -> b
    314:317:int getDistance(int) -> d
    321:342:void setDistance(int,int,int) -> a
    254:254:int access$200(net.minecraft.util.datafix.fixes.LeavesFix$LeavesSection,int) -> a
    254:254:void access$300(net.minecraft.util.datafix.fixes.LeavesFix$LeavesSection,int,int,int) -> a
net.minecraft.util.datafix.fixes.LeavesFix$Section -> afd$b:
    com.mojang.datafixers.types.Type blockStateType -> e
    com.mojang.datafixers.OpticFinder paletteFinder -> a
    java.util.List palette -> b
    int index -> c
    net.minecraft.util.BitStorage storage -> d
    193:214:void <init>(com.mojang.datafixers.Typed,com.mojang.datafixers.schemas.Schema) -> <init>
    217:224:void readStorage(com.mojang.datafixers.Dynamic) -> a
    227:232:com.mojang.datafixers.Typed write(com.mojang.datafixers.Typed) -> a
    236:236:boolean isSkippable() -> b
    240:240:int getBlock(int) -> c
    244:244:int getStateId(java.lang.String,boolean,int) -> a
    248:248:int getIndex() -> c
    boolean skippable() -> a
    232:232:com.mojang.datafixers.util.Pair lambda$write$2(com.mojang.datafixers.Dynamic) -> b
    231:231:com.mojang.datafixers.Dynamic lambda$write$1(com.mojang.datafixers.Dynamic) -> c
    208:208:java.util.List lambda$new$0(java.util.List) -> a
net.minecraft.util.datafix.fixes.LevelDataGeneratorOptionsFix -> afe:
    java.util.Map MAP -> a
    110:111:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    115:116:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    134:198:com.mojang.datafixers.Dynamic convert(java.lang.String,com.mojang.datafixers.types.DynamicOps) -> a
    204:218:com.mojang.datafixers.util.Pair getLayerInfoFromString(java.lang.String) -> a
    222:233:java.util.List getLayersInfoFromString(java.lang.String) -> b
    187:191:com.mojang.datafixers.util.Pair lambda$convert$5(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> a
    190:190:com.mojang.datafixers.util.Pair lambda$null$4(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> b
    181:183:java.lang.Object lambda$convert$3(com.mojang.datafixers.types.DynamicOps,com.mojang.datafixers.util.Pair) -> a
    117:129:com.mojang.datafixers.Typed lambda$makeRule$2(com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
    129:129:java.lang.IllegalStateException lambda$null$1() -> a
    30:106:void lambda$static$0(java.util.HashMap) -> a
    29:29:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.LevelFlatGeneratorInfoFix -> aff:
    com.google.common.base.Splitter SPLITTER -> a
    com.google.common.base.Splitter LAYER_SPLITTER -> b
    com.google.common.base.Splitter OLD_AMOUNT_SPLITTER -> c
    com.google.common.base.Splitter AMOUNT_SPLITTER -> d
    com.google.common.base.Splitter BLOCK_SPLITTER -> e
    20:21:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    35:35:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    39:42:com.mojang.datafixers.Dynamic fix(com.mojang.datafixers.Dynamic) -> a
    47:99:java.lang.String fixString(java.lang.String) -> a
    75:92:java.lang.String lambda$fixString$2(com.google.common.base.Splitter,int,java.lang.String) -> a
    40:40:com.mojang.datafixers.Dynamic lambda$fix$1(com.mojang.datafixers.Dynamic) -> b
    35:35:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.Typed) -> a
    27:31:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.MapIdFix -> afg:
    15:16:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    20:22:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    23:29:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    29:29:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.MobSpawnerEntityIdentifiersFix -> afh:
    18:19:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    22:50:com.mojang.datafixers.Dynamic fix(com.mojang.datafixers.Dynamic) -> a
    55:56:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    57:64:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
    38:46:com.mojang.datafixers.Dynamic lambda$fix$0(com.mojang.datafixers.Dynamic) -> b
net.minecraft.util.datafix.fixes.NamedEntityFix -> afi:
    java.lang.String name -> a
    java.lang.String entityName -> b
    com.mojang.datafixers.DSL$TypeReference type -> c
    16:20:void <init>(com.mojang.datafixers.schemas.Schema,boolean,java.lang.String,com.mojang.datafixers.DSL$TypeReference,java.lang.String) -> <init>
    24:26:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    27:27:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.NewVillageFix -> afj:
    22:23:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    27:30:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    34:57:com.mojang.datafixers.TypeRewriteRule cap(com.mojang.datafixers.types.templates.CompoundList$CompoundListType) -> a
    57:57:com.mojang.datafixers.Typed lambda$cap$13(com.mojang.datafixers.Typed) -> a
    58:58:com.mojang.datafixers.Dynamic lambda$null$12(com.mojang.datafixers.Dynamic) -> a
    59:59:com.mojang.datafixers.Dynamic lambda$null$11(com.mojang.datafixers.Dynamic) -> b
    42:42:com.mojang.datafixers.Typed lambda$cap$10(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    43:43:com.mojang.datafixers.Typed lambda$null$9(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    44:48:com.mojang.datafixers.Typed lambda$null$8(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    49:49:com.mojang.datafixers.Dynamic lambda$null$7(com.mojang.datafixers.Dynamic) -> c
    50:51:com.mojang.datafixers.Dynamic lambda$null$6(com.mojang.datafixers.Dynamic) -> d
    51:51:com.mojang.datafixers.Dynamic lambda$null$5(com.mojang.datafixers.Dynamic,com.mojang.datafixers.Dynamic) -> a
    45:45:com.mojang.datafixers.Typed lambda$null$4(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    46:46:java.util.List lambda$null$3(java.util.List) -> a
    46:46:com.mojang.datafixers.util.Pair lambda$null$2(com.mojang.datafixers.util.Pair) -> a
    46:46:java.lang.String lambda$null$1(java.lang.String) -> a
    46:46:boolean lambda$null$0(com.mojang.datafixers.util.Pair) -> b
net.minecraft.util.datafix.fixes.ObjectiveDisplayNameFix -> afk:
    20:21:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    25:31:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    31:31:java.util.function.Function lambda$makeRule$4(com.mojang.datafixers.types.DynamicOps) -> a
    32:32:com.mojang.datafixers.util.Pair lambda$null$3(com.mojang.datafixers.util.Pair) -> a
    33:33:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic) -> a
    34:34:com.mojang.datafixers.Dynamic lambda$null$1(com.mojang.datafixers.Dynamic,com.mojang.datafixers.Dynamic) -> a
    34:34:java.lang.String lambda$null$0(java.lang.String) -> a
net.minecraft.util.datafix.fixes.ObjectiveRenderTypeFix -> afl:
    19:20:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    23:23:net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType getRenderType(java.lang.String) -> a
    28:34:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    34:34:java.util.function.Function lambda$makeRule$2(com.mojang.datafixers.types.DynamicOps) -> a
    35:35:com.mojang.datafixers.util.Pair lambda$null$1(com.mojang.datafixers.util.Pair) -> a
    36:43:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.OptionsAddTextBackgroundFix -> afm:
    11:12:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    16:16:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    23:26:double calculateBackground(java.lang.String) -> a
    16:16:com.mojang.datafixers.Typed lambda$makeRule$2(com.mojang.datafixers.Typed) -> a
    17:17:com.mojang.datafixers.Dynamic lambda$null$1(com.mojang.datafixers.Dynamic) -> a
    17:17:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic,java.lang.String) -> a
net.minecraft.util.datafix.fixes.OptionsForceVBOFix -> afn:
    10:11:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    15:15:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    15:15:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.Typed) -> a
    16:16:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.OptionsKeyLwjgl3Fix -> afo:
    it.unimi.dsi.fastutil.ints.Int2ObjectMap MAP -> a
    17:18:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    159:159:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    159:159:com.mojang.datafixers.Typed lambda$makeRule$4(com.mojang.datafixers.Typed) -> a
    160:183:com.mojang.datafixers.Dynamic lambda$null$3(com.mojang.datafixers.Dynamic) -> a
    160:183:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic,java.util.Map) -> a
    161:182:com.mojang.datafixers.util.Pair lambda$null$1(java.util.Map$Entry) -> a
    22:155:void lambda$static$0(it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap) -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.OptionsKeyTranslationFix -> afp:
    14:15:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    19:19:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    19:19:com.mojang.datafixers.Typed lambda$makeRule$3(com.mojang.datafixers.Typed) -> a
    20:28:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic) -> a
    20:28:com.mojang.datafixers.Dynamic lambda$null$1(com.mojang.datafixers.Dynamic,java.util.Map) -> a
    21:27:com.mojang.datafixers.util.Pair lambda$null$0(com.mojang.datafixers.Dynamic,java.util.Map$Entry) -> a
net.minecraft.util.datafix.fixes.OptionsLowerCaseLanguageFix -> afq:
    13:14:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    18:18:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    18:18:com.mojang.datafixers.Typed lambda$makeRule$1(com.mojang.datafixers.Typed) -> a
    19:23:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.PoiTypeRename -> afr:
    19:20:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    24:29:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    33:33:com.mojang.datafixers.Dynamic cap(com.mojang.datafixers.Dynamic) -> a
    39:39:java.util.Optional renameRecords(com.mojang.datafixers.Dynamic) -> b
    java.lang.String rename(java.lang.String) -> a
    40:40:com.mojang.datafixers.Dynamic lambda$renameRecords$8(com.mojang.datafixers.Dynamic,java.util.stream.Stream) -> a
    41:41:com.mojang.datafixers.Dynamic lambda$null$7(com.mojang.datafixers.Dynamic) -> c
    41:41:com.mojang.datafixers.Dynamic lambda$null$6(com.mojang.datafixers.Dynamic) -> d
    34:34:com.mojang.datafixers.Dynamic lambda$cap$5(com.mojang.datafixers.Dynamic) -> e
    34:34:com.mojang.datafixers.util.Pair lambda$null$4(com.mojang.datafixers.util.Pair) -> a
    34:34:com.mojang.datafixers.Dynamic lambda$null$3(com.mojang.datafixers.Dynamic) -> f
    34:34:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic) -> g
    29:29:java.util.function.Function lambda$makeRule$1(com.mojang.datafixers.types.DynamicOps) -> a
    29:29:com.mojang.datafixers.util.Pair lambda$null$0(com.mojang.datafixers.util.Pair) -> b
net.minecraft.util.datafix.fixes.RecipesFix -> afs:
    java.util.Map RECIPES -> a
    67:68:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    67:67:java.lang.String lambda$new$0(java.lang.String) -> a
    9:64:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.RecipesRenameFix -> aft:
    java.lang.String name -> a
    java.util.function.Function renamer -> b
    20:23:void <init>(com.mojang.datafixers.schemas.Schema,boolean,java.lang.String,java.util.function.Function) -> <init>
    27:31:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    31:31:java.util.function.Function lambda$makeRule$1(com.mojang.datafixers.types.DynamicOps) -> a
    31:31:com.mojang.datafixers.util.Pair lambda$null$0(com.mojang.datafixers.util.Pair) -> a
net.minecraft.util.datafix.fixes.RecipesRenameningFix -> afu:
    java.util.Map RECIPES -> a
    19:20:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    19:19:java.lang.String lambda$new$0(java.lang.String) -> a
    9:16:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.References -> afv:
    com.mojang.datafixers.DSL$TypeReference LEVEL -> a
    com.mojang.datafixers.DSL$TypeReference PLAYER -> b
    com.mojang.datafixers.DSL$TypeReference CHUNK -> c
    com.mojang.datafixers.DSL$TypeReference HOTBAR -> d
    com.mojang.datafixers.DSL$TypeReference OPTIONS -> e
    com.mojang.datafixers.DSL$TypeReference STRUCTURE -> f
    com.mojang.datafixers.DSL$TypeReference STATS -> g
    com.mojang.datafixers.DSL$TypeReference SAVED_DATA -> h
    com.mojang.datafixers.DSL$TypeReference ADVANCEMENTS -> i
    com.mojang.datafixers.DSL$TypeReference POI_CHUNK -> j
    com.mojang.datafixers.DSL$TypeReference BLOCK_ENTITY -> k
    com.mojang.datafixers.DSL$TypeReference ITEM_STACK -> l
    com.mojang.datafixers.DSL$TypeReference BLOCK_STATE -> m
    com.mojang.datafixers.DSL$TypeReference ENTITY_NAME -> n
    com.mojang.datafixers.DSL$TypeReference ENTITY_TREE -> o
    com.mojang.datafixers.DSL$TypeReference ENTITY -> p
    com.mojang.datafixers.DSL$TypeReference BLOCK_NAME -> q
    com.mojang.datafixers.DSL$TypeReference ITEM_NAME -> r
    com.mojang.datafixers.DSL$TypeReference UNTAGGED_SPAWNER -> s
    com.mojang.datafixers.DSL$TypeReference STRUCTURE_FEATURE -> t
    com.mojang.datafixers.DSL$TypeReference OBJECTIVE -> u
    com.mojang.datafixers.DSL$TypeReference TEAM -> v
    com.mojang.datafixers.DSL$TypeReference RECIPE -> w
    com.mojang.datafixers.DSL$TypeReference BIOME -> x
    5:5:void <init>() -> <init>
    51:51:java.lang.String lambda$static$23() -> a
    48:48:java.lang.String lambda$static$22() -> b
    45:45:java.lang.String lambda$static$21() -> c
    42:42:java.lang.String lambda$static$20() -> d
    39:39:java.lang.String lambda$static$19() -> e
    36:36:java.lang.String lambda$static$18() -> f
    33:33:java.lang.String lambda$static$17() -> g
    32:32:java.lang.String lambda$static$16() -> h
    29:29:java.lang.String lambda$static$15() -> i
    27:27:java.lang.String lambda$static$14() -> j
    24:24:java.lang.String lambda$static$13() -> k
    21:21:java.lang.String lambda$static$12() -> l
    20:20:java.lang.String lambda$static$11() -> m
    19:19:java.lang.String lambda$static$10() -> n
    16:16:java.lang.String lambda$static$9() -> o
    15:15:java.lang.String lambda$static$8() -> p
    14:14:java.lang.String lambda$static$7() -> q
    13:13:java.lang.String lambda$static$6() -> r
    12:12:java.lang.String lambda$static$5() -> s
    11:11:java.lang.String lambda$static$4() -> t
    10:10:java.lang.String lambda$static$3() -> u
    9:9:java.lang.String lambda$static$2() -> v
    8:8:java.lang.String lambda$static$1() -> w
    7:7:java.lang.String lambda$static$0() -> x
    7:51:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.RenamedCoralFansFix -> afw:
    java.util.Map RENAMED_IDS -> a
    7:7:void <init>() -> <init>
    8:14:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.RenamedCoralFix -> afx:
    java.util.Map RENAMED_IDS -> a
    7:7:void <init>() -> <init>
    8:29:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.ReorganizePoi -> afy:
    21:22:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    26:31:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    35:47:com.mojang.datafixers.Dynamic cap(com.mojang.datafixers.Dynamic) -> a
    31:31:java.util.function.Function lambda$makeRule$1(com.mojang.datafixers.types.DynamicOps) -> a
    31:31:com.mojang.datafixers.util.Pair lambda$null$0(com.mojang.datafixers.util.Pair) -> a
net.minecraft.util.datafix.fixes.SavedDataVillageCropFix -> afz:
    12:13:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    17:17:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    21:21:com.mojang.datafixers.Dynamic fixTag(com.mojang.datafixers.Dynamic) -> a
    25:25:com.mojang.datafixers.Dynamic updateChildren(com.mojang.datafixers.Dynamic) -> b
    29:29:java.util.stream.Stream updateChildren(java.util.stream.Stream) -> a
    43:44:com.mojang.datafixers.Dynamic updateSingleField(com.mojang.datafixers.Dynamic) -> c
    48:51:com.mojang.datafixers.Dynamic updateDoubleField(com.mojang.datafixers.Dynamic) -> d
    55:58:com.mojang.datafixers.Dynamic updateCrop(com.mojang.datafixers.Dynamic,java.lang.String) -> a
    31:37:com.mojang.datafixers.Dynamic lambda$updateChildren$0(com.mojang.datafixers.Dynamic) -> e
net.minecraft.util.datafix.fixes.SimpleEntityRenameFix -> aga:
    11:12:void <init>(java.lang.String,com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    16:17:com.mojang.datafixers.util.Pair fix(java.lang.String,com.mojang.datafixers.Typed) -> a
    com.mojang.datafixers.util.Pair getNewNameAndTag(java.lang.String,com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.SimplestEntityRenameFix -> agb:
    java.lang.String name -> a
    17:19:void <init>(java.lang.String,com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    24:45:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    java.lang.String rename(java.lang.String) -> a
    45:45:java.util.function.Function lambda$makeRule$4(com.mojang.datafixers.types.DynamicOps) -> a
    45:45:com.mojang.datafixers.util.Pair lambda$null$3(com.mojang.datafixers.util.Pair) -> a
    33:33:java.util.function.Function lambda$makeRule$2(com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.DynamicOps) -> a
    33:33:com.mojang.datafixers.util.Pair lambda$null$1(com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.util.Pair) -> a
    34:43:java.lang.String lambda$null$0(com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,java.lang.String) -> a
net.minecraft.util.datafix.fixes.StatsCounterFix -> agc:
    java.util.Set SKIP -> a
    java.util.Map CUSTOM_MAP -> b
    java.util.Map ITEM_KEYS -> c
    java.util.Map ENTITY_KEYS -> d
    java.util.Map ENTITIES -> e
    21:22:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    150:151:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    201:201:java.lang.String upgradeItem(java.lang.String) -> a
    205:205:java.lang.String upgradeBlock(java.lang.String) -> b
    152:195:com.mojang.datafixers.Typed lambda$makeRule$2(com.mojang.datafixers.types.Type,com.mojang.datafixers.Typed) -> a
    195:195:java.lang.IllegalStateException lambda$null$1() -> a
    190:190:com.mojang.datafixers.Dynamic lambda$null$0(com.mojang.datafixers.Dynamic,com.mojang.datafixers.Dynamic) -> a
    24:144:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.StructureReferenceCountFix -> agd:
    12:13:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    17:18:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    24:24:com.mojang.datafixers.Dynamic setCountToAtLeastOne(com.mojang.datafixers.Dynamic) -> a
    24:24:com.mojang.datafixers.Dynamic lambda$setCountToAtLeastOne$2(com.mojang.datafixers.Dynamic) -> b
    24:24:boolean lambda$null$1(java.lang.Integer) -> a
    19:19:com.mojang.datafixers.Typed lambda$makeRule$0(com.mojang.datafixers.Typed) -> a
net.minecraft.util.datafix.fixes.SwimStatsRenameFix -> age:
    12:13:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    17:22:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    22:22:com.mojang.datafixers.Typed lambda$makeRule$3(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    23:23:com.mojang.datafixers.Typed lambda$null$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    23:23:com.mojang.datafixers.Typed lambda$null$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    24:32:java.lang.String lambda$null$0(java.lang.String) -> a
net.minecraft.util.datafix.fixes.TeamDisplayNameFix -> agf:
    20:21:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    25:31:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    31:31:java.util.function.Function lambda$makeRule$4(com.mojang.datafixers.types.DynamicOps) -> a
    32:32:com.mojang.datafixers.util.Pair lambda$null$3(com.mojang.datafixers.util.Pair) -> a
    33:33:com.mojang.datafixers.Dynamic lambda$null$2(com.mojang.datafixers.Dynamic) -> a
    34:34:com.mojang.datafixers.Dynamic lambda$null$1(com.mojang.datafixers.Dynamic,com.mojang.datafixers.Dynamic) -> a
    34:34:java.lang.String lambda$null$0(java.lang.String) -> a
net.minecraft.util.datafix.fixes.TrappedChestBlockEntityFix -> agg:
    org.apache.logging.log4j.Logger LOGGER -> a
    33:34:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    38:61:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    61:61:com.mojang.datafixers.Typed lambda$makeRule$5(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    62:91:com.mojang.datafixers.Typed lambda$null$4(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    91:91:com.mojang.datafixers.Typed lambda$null$3(com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,int,int,it.unimi.dsi.fastutil.ints.IntSet,com.mojang.datafixers.Typed) -> a
    92:107:com.mojang.datafixers.Typed lambda$null$2(int,int,it.unimi.dsi.fastutil.ints.IntSet,com.mojang.datafixers.types.templates.TaggedChoice$TaggedChoiceType,com.mojang.datafixers.Typed) -> a
    99:99:com.mojang.datafixers.util.Pair lambda$null$1(com.mojang.datafixers.util.Pair) -> a
    100:104:java.lang.String lambda$null$0(java.lang.String) -> a
    27:27:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.TrappedChestBlockEntityFix$TrappedChestSection -> agg$a:
    it.unimi.dsi.fastutil.ints.IntSet chestIds -> e
    117:118:void <init>(com.mojang.datafixers.Typed,com.mojang.datafixers.schemas.Schema) -> <init>
    122:132:boolean skippable() -> a
    136:136:boolean isTrappedChest(int) -> a
net.minecraft.util.datafix.fixes.VillagerDataFix -> agh:
    12:13:void <init>(com.mojang.datafixers.schemas.Schema,java.lang.String) -> <init>
    17:27:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    34:69:java.lang.String upgradeData(int,int) -> a
net.minecraft.util.datafix.fixes.VillagerRebuildLevelAndXpFix -> agi:
    int[] LEVEL_XP_THRESHOLDS -> a
    21:21:int getMinXpPerLevel(int) -> a
    25:26:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    30:39:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
    72:72:com.mojang.datafixers.Typed addLevel(com.mojang.datafixers.Typed,int) -> a
    79:80:com.mojang.datafixers.Typed addXpFromLevel(com.mojang.datafixers.Typed,int) -> b
    81:81:com.mojang.datafixers.Dynamic lambda$addXpFromLevel$6(int,com.mojang.datafixers.Dynamic) -> a
    73:73:com.mojang.datafixers.Dynamic lambda$addLevel$5(int,com.mojang.datafixers.Dynamic) -> b
    74:74:com.mojang.datafixers.Dynamic lambda$null$4(int,com.mojang.datafixers.Dynamic) -> c
    40:40:com.mojang.datafixers.Typed lambda$makeRule$3(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.types.Type,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    41:66:com.mojang.datafixers.Typed lambda$null$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    52:52:java.lang.Integer lambda$null$1(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    51:51:java.util.Optional lambda$null$0(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> b
    18:18:void <clinit>() -> <clinit>
net.minecraft.util.datafix.fixes.VillagerTradeFix -> agj:
    16:17:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    21:37:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    46:46:com.mojang.datafixers.Typed updateItemStack(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    47:47:com.mojang.datafixers.util.Pair lambda$updateItemStack$5(com.mojang.datafixers.util.Pair) -> a
    48:48:java.lang.String lambda$null$4(java.lang.String) -> a
    37:37:com.mojang.datafixers.Typed lambda$fix$3(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,java.util.function.Function,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    37:37:com.mojang.datafixers.Typed lambda$null$2(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,java.util.function.Function,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    38:41:com.mojang.datafixers.Typed lambda$null$1(com.mojang.datafixers.OpticFinder,java.util.function.Function,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> a
    35:35:com.mojang.datafixers.Typed lambda$fix$0(com.mojang.datafixers.OpticFinder,com.mojang.datafixers.Typed) -> b
net.minecraft.util.datafix.fixes.WriteAndReadFix -> agk:
    java.lang.String name -> a
    com.mojang.datafixers.DSL$TypeReference type -> b
    13:16:void <init>(com.mojang.datafixers.schemas.Schema,java.lang.String,com.mojang.datafixers.DSL$TypeReference) -> <init>
    20:20:com.mojang.datafixers.TypeRewriteRule makeRule() -> makeRule
net.minecraft.util.datafix.fixes.ZombieVillagerRebuildXpFix -> agl:
    11:12:void <init>(com.mojang.datafixers.schemas.Schema,boolean) -> <init>
    16:16:com.mojang.datafixers.Typed fix(com.mojang.datafixers.Typed) -> a
    17:22:com.mojang.datafixers.Dynamic lambda$fix$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.util.datafix.fixes.package-info -> agm:
net.minecraft.util.datafix.package-info -> agn:
net.minecraft.util.datafix.schemas.NamespacedSchema -> ago:
    10:11:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    14:18:java.lang.String ensureNamespaced(java.lang.String) -> a
    23:23:com.mojang.datafixers.types.Type getChoiceType(com.mojang.datafixers.DSL$TypeReference,java.lang.String) -> getChoiceType
net.minecraft.util.datafix.schemas.V100 -> agp:
    21:22:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    25:27:com.mojang.datafixers.types.templates.TypeTemplate equipment(com.mojang.datafixers.schemas.Schema) -> a
    32:33:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    37:99:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    104:112:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    106:109:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$4(com.mojang.datafixers.schemas.Schema) -> b
    80:91:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$3(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
    73:77:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$2(com.mojang.datafixers.schemas.Schema,java.lang.String) -> b
    49:51:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$1(com.mojang.datafixers.schemas.Schema,java.lang.String) -> c
    32:32:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> c
net.minecraft.util.datafix.schemas.V102 -> agq:
    21:22:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    26:37:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    28:34:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V1022 -> agr:
    22:23:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    27:47:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    46:46:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$2(com.mojang.datafixers.schemas.Schema) -> a
    30:41:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$1(com.mojang.datafixers.schemas.Schema) -> b
    29:29:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$0() -> a
net.minecraft.util.datafix.schemas.V106 -> ags:
    17:18:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    22:30:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    24:28:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V107 -> agt:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    16:20:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
net.minecraft.util.datafix.schemas.V1125 -> agu:
    20:21:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    25:29:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    34:51:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    50:50:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$2() -> a
    49:49:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$1() -> b
    35:46:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V135 -> agv:
    18:19:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    23:36:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    32:34:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$1(com.mojang.datafixers.schemas.Schema) -> a
    25:30:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$0(com.mojang.datafixers.schemas.Schema) -> b
net.minecraft.util.datafix.schemas.V143 -> agw:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    16:20:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
net.minecraft.util.datafix.schemas.V1451 -> agx:
    15:16:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    20:26:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    22:23:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V1451_1 -> agy:
    20:21:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    25:37:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    27:33:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V1451_2 -> agz:
    14:15:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    19:25:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    21:22:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$0(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V1451_3 -> aha:
    18:19:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    23:76:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    72:73:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$11(com.mojang.datafixers.schemas.Schema) -> a
    68:70:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$10(com.mojang.datafixers.schemas.Schema) -> b
    65:66:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$9(com.mojang.datafixers.schemas.Schema) -> c
    61:63:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$8(com.mojang.datafixers.schemas.Schema) -> d
    58:59:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$7(com.mojang.datafixers.schemas.Schema) -> e
    55:56:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$6(com.mojang.datafixers.schemas.Schema) -> f
    51:53:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$5(com.mojang.datafixers.schemas.Schema) -> g
    48:49:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$4(com.mojang.datafixers.schemas.Schema) -> h
    44:46:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$3(com.mojang.datafixers.schemas.Schema) -> i
    40:42:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$2(com.mojang.datafixers.schemas.Schema) -> j
    37:38:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$1(com.mojang.datafixers.schemas.Schema) -> k
    29:30:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$0(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V1451_4 -> ahb:
    15:16:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    20:23:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    22:22:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$0() -> a
net.minecraft.util.datafix.schemas.V1451_5 -> ahc:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    16:21:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
net.minecraft.util.datafix.schemas.V1451_6 -> ahd:
    21:22:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    26:45:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    30:41:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$1(com.mojang.datafixers.schemas.Schema,java.util.function.Supplier) -> a
    28:28:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V1451_7 -> ahe:
    16:17:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    21:31:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    23:28:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V1460 -> ahf:
    50:51:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    54:55:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    58:61:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> b
    65:222:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    227:258:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    263:374:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    372:372:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$45() -> a
    371:371:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$44() -> b
    357:368:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$43(com.mojang.datafixers.schemas.Schema) -> a
    351:355:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$42(com.mojang.datafixers.schemas.Schema) -> b
    341:346:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$41(com.mojang.datafixers.schemas.Schema) -> c
    334:338:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$40(com.mojang.datafixers.schemas.Schema) -> d
    319:330:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$39(com.mojang.datafixers.schemas.Schema,java.util.function.Supplier) -> a
    317:317:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$38(com.mojang.datafixers.schemas.Schema) -> e
    315:315:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$37() -> c
    314:314:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$36() -> d
    309:312:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$35(com.mojang.datafixers.schemas.Schema) -> f
    307:307:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$34(com.mojang.datafixers.schemas.Schema) -> g
    298:304:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$33(com.mojang.datafixers.schemas.Schema) -> h
    297:297:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$32(java.util.Map) -> a
    293:295:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$31(com.mojang.datafixers.schemas.Schema) -> i
    292:292:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$30(java.util.Map) -> b
    282:288:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$29(com.mojang.datafixers.schemas.Schema) -> j
    265:278:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$28(com.mojang.datafixers.schemas.Schema) -> k
    264:264:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$27() -> e
    240:241:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$26(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
    239:239:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$25(com.mojang.datafixers.schemas.Schema,java.lang.String) -> b
    233:234:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$24(com.mojang.datafixers.schemas.Schema,java.lang.String) -> c
    215:217:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$23(com.mojang.datafixers.schemas.Schema,java.lang.String) -> d
    192:203:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$22(com.mojang.datafixers.schemas.Schema,java.lang.String) -> e
    188:189:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$21(com.mojang.datafixers.schemas.Schema,java.lang.String) -> f
    181:182:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$20(com.mojang.datafixers.schemas.Schema,java.lang.String) -> g
    177:179:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$19(com.mojang.datafixers.schemas.Schema,java.lang.String) -> h
    169:171:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$18(com.mojang.datafixers.schemas.Schema,java.lang.String) -> i
    160:161:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$17(com.mojang.datafixers.schemas.Schema,java.lang.String) -> j
    150:153:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$16(com.mojang.datafixers.schemas.Schema,java.lang.String) -> k
    146:147:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$15(com.mojang.datafixers.schemas.Schema,java.lang.String) -> l
    138:142:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$14(com.mojang.datafixers.schemas.Schema,java.lang.String) -> m
    134:135:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$13(com.mojang.datafixers.schemas.Schema,java.lang.String) -> n
    131:132:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$12(com.mojang.datafixers.schemas.Schema,java.lang.String) -> o
    123:127:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$11(com.mojang.datafixers.schemas.Schema,java.lang.String) -> p
    119:121:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$10(com.mojang.datafixers.schemas.Schema,java.lang.String) -> q
    113:114:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$9(com.mojang.datafixers.schemas.Schema,java.lang.String) -> r
    110:111:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$8(com.mojang.datafixers.schemas.Schema,java.lang.String) -> s
    105:107:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$7(com.mojang.datafixers.schemas.Schema,java.lang.String) -> t
    96:98:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$6(com.mojang.datafixers.schemas.Schema,java.lang.String) -> u
    86:89:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$5(com.mojang.datafixers.schemas.Schema,java.lang.String) -> v
    81:82:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$4(com.mojang.datafixers.schemas.Schema,java.lang.String) -> w
    76:78:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$3(com.mojang.datafixers.schemas.Schema,java.lang.String) -> x
    69:70:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$2(com.mojang.datafixers.schemas.Schema,java.lang.String) -> y
    58:59:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerInventory$1(com.mojang.datafixers.schemas.Schema) -> l
    54:54:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> m
net.minecraft.util.datafix.schemas.V1466 -> ahg:
    24:25:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    29:53:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    57:61:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    44:51:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$1(com.mojang.datafixers.schemas.Schema) -> a
    31:40:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$0(com.mojang.datafixers.schemas.Schema) -> b
net.minecraft.util.datafix.schemas.V1470 -> ahh:
    14:15:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    18:19:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    23:39:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    35:36:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$1(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
    18:18:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V1481 -> ahi:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    16:20:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
net.minecraft.util.datafix.schemas.V1483 -> ahj:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    16:20:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
net.minecraft.util.datafix.schemas.V1486 -> ahk:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    16:21:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
net.minecraft.util.datafix.schemas.V1510 -> ahl:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    16:31:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
net.minecraft.util.datafix.schemas.V1800 -> ahm:
    15:16:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    19:20:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    24:32:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    27:29:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$1(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
    19:19:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V1801 -> ahn:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    15:16:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    20:22:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    15:15:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V1904 -> aho:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    15:16:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    20:24:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    15:15:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V1906 -> ahp:
    15:16:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    20:32:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    36:39:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    36:37:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerInventory$1(com.mojang.datafixers.schemas.Schema) -> a
    26:27:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$0(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
net.minecraft.util.datafix.schemas.V1909 -> ahq:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    16:20:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
net.minecraft.util.datafix.schemas.V1920 -> ahr:
    15:16:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    19:22:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    26:30:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    19:20:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerInventory$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V1928 -> ahs:
    15:16:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    19:21:com.mojang.datafixers.types.templates.TypeTemplate equipment(com.mojang.datafixers.schemas.Schema) -> a
    26:27:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    31:36:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    26:26:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> b
net.minecraft.util.datafix.schemas.V1929 -> aht:
    15:16:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    20:42:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    35:39:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$1(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
    21:32:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$0(com.mojang.datafixers.schemas.Schema,java.lang.String) -> b
net.minecraft.util.datafix.schemas.V1931 -> ahu:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    15:16:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    20:22:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    15:15:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V2100 -> ahv:
    16:17:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    20:21:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    25:28:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    33:43:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    35:38:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$1(com.mojang.datafixers.schemas.Schema) -> a
    20:20:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> b
net.minecraft.util.datafix.schemas.V501 -> ahw:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    15:16:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    20:24:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    15:15:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V700 -> ahx:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    15:16:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    20:24:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    15:15:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V701 -> ahy:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    15:16:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    20:25:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    15:15:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V702 -> ahz:
    11:12:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    15:16:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    20:25:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    15:15:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V703 -> aia:
    15:16:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    20:47:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    42:44:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$4(com.mojang.datafixers.schemas.Schema) -> a
    38:40:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$3(com.mojang.datafixers.schemas.Schema) -> b
    33:36:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$2(com.mojang.datafixers.schemas.Schema) -> c
    28:31:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$1(com.mojang.datafixers.schemas.Schema) -> d
    23:26:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$0(com.mojang.datafixers.schemas.Schema) -> e
net.minecraft.util.datafix.schemas.V704 -> aib:
    java.util.Map ITEM_TO_BLOCKENTITY -> a
    com.mojang.datafixers.types.templates.Hook$HookFunction ADD_NAMES -> b
    34:35:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    38:41:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    45:48:com.mojang.datafixers.types.Type getChoiceType(com.mojang.datafixers.DSL$TypeReference,java.lang.String) -> getChoiceType
    53:83:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    88:101:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    105:185:void lambda$static$6(java.util.HashMap) -> a
    92:98:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$5(com.mojang.datafixers.schemas.Schema) -> a
    90:90:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$4(java.util.Map) -> a
    75:76:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$3(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
    64:64:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$2(com.mojang.datafixers.schemas.Schema,java.lang.String) -> b
    58:59:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$1(com.mojang.datafixers.schemas.Schema,java.lang.String) -> c
    38:39:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerInventory$0(com.mojang.datafixers.schemas.Schema) -> b
    103:187:void <clinit>() -> <clinit>
net.minecraft.util.datafix.schemas.V704$1 -> aib$1:
    187:187:void <init>() -> <init>
    190:190:java.lang.Object apply(com.mojang.datafixers.types.DynamicOps,java.lang.Object) -> apply
net.minecraft.util.datafix.schemas.V705 -> aic:
    com.mojang.datafixers.types.templates.Hook$HookFunction ADD_NAMES -> a
    28:29:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    32:33:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    36:39:void registerThrowableProjectile(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> b
    43:203:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    208:219:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    210:216:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$25(com.mojang.datafixers.schemas.Schema) -> a
    209:209:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$24(java.util.Map) -> a
    193:197:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$23(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
    182:184:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$22(com.mojang.datafixers.schemas.Schema,java.lang.String) -> b
    160:171:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$21(com.mojang.datafixers.schemas.Schema,java.lang.String) -> c
    157:158:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$20(com.mojang.datafixers.schemas.Schema,java.lang.String) -> d
    150:151:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$19(com.mojang.datafixers.schemas.Schema,java.lang.String) -> e
    146:148:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$18(com.mojang.datafixers.schemas.Schema,java.lang.String) -> f
    138:140:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$17(com.mojang.datafixers.schemas.Schema,java.lang.String) -> g
    128:130:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$16(com.mojang.datafixers.schemas.Schema,java.lang.String) -> h
    118:121:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$15(com.mojang.datafixers.schemas.Schema,java.lang.String) -> i
    114:115:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$14(com.mojang.datafixers.schemas.Schema,java.lang.String) -> j
    109:110:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$13(com.mojang.datafixers.schemas.Schema,java.lang.String) -> k
    106:107:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$12(com.mojang.datafixers.schemas.Schema,java.lang.String) -> l
    99:103:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$11(com.mojang.datafixers.schemas.Schema,java.lang.String) -> m
    95:97:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$10(com.mojang.datafixers.schemas.Schema,java.lang.String) -> n
    89:90:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$9(com.mojang.datafixers.schemas.Schema,java.lang.String) -> o
    86:87:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$8(com.mojang.datafixers.schemas.Schema,java.lang.String) -> p
    81:83:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$7(com.mojang.datafixers.schemas.Schema,java.lang.String) -> q
    74:76:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$6(com.mojang.datafixers.schemas.Schema,java.lang.String) -> r
    64:67:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$5(com.mojang.datafixers.schemas.Schema,java.lang.String) -> s
    59:60:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$4(com.mojang.datafixers.schemas.Schema,java.lang.String) -> t
    54:56:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$3(com.mojang.datafixers.schemas.Schema,java.lang.String) -> u
    47:48:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$2(com.mojang.datafixers.schemas.Schema,java.lang.String) -> v
    36:37:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerThrowableProjectile$1(com.mojang.datafixers.schemas.Schema) -> b
    32:32:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> c
    221:221:void <clinit>() -> <clinit>
net.minecraft.util.datafix.schemas.V705$1 -> aic$1:
    221:221:void <init>() -> <init>
    224:224:java.lang.Object apply(com.mojang.datafixers.types.DynamicOps,java.lang.Object) -> apply
net.minecraft.util.datafix.schemas.V808 -> aid:
    15:16:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    19:22:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    26:30:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    19:20:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerInventory$0(com.mojang.datafixers.schemas.Schema) -> a
net.minecraft.util.datafix.schemas.V99 -> aie:
    org.apache.logging.log4j.Logger LOGGER -> b
    java.util.Map ITEM_TO_BLOCKENTITY -> c
    com.mojang.datafixers.types.templates.Hook$HookFunction ADD_NAMES -> a
    52:53:void <init>(int,com.mojang.datafixers.schemas.Schema) -> <init>
    56:57:com.mojang.datafixers.types.templates.TypeTemplate equipment(com.mojang.datafixers.schemas.Schema) -> a
    62:63:void registerMob(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> a
    66:70:void registerThrowableProjectile(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> b
    73:76:void registerMinecart(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> c
    79:82:void registerInventory(com.mojang.datafixers.schemas.Schema,java.util.Map,java.lang.String) -> d
    86:214:java.util.Map registerEntities(com.mojang.datafixers.schemas.Schema) -> registerEntities
    219:251:java.util.Map registerBlockEntities(com.mojang.datafixers.schemas.Schema) -> registerBlockEntities
    256:301:void registerTypes(com.mojang.datafixers.schemas.Schema,java.util.Map,java.util.Map) -> registerTypes
    353:369:java.lang.Object addNames(com.mojang.datafixers.Dynamic,java.util.Map,java.lang.String) -> a
    353:363:com.mojang.datafixers.Dynamic lambda$addNames$35(com.mojang.datafixers.Dynamic,java.util.Map,java.lang.String,com.mojang.datafixers.Dynamic) -> a
    364:368:com.mojang.datafixers.Dynamic lambda$null$34(com.mojang.datafixers.Dynamic,java.lang.String,com.mojang.datafixers.Dynamic) -> a
    354:362:com.mojang.datafixers.Dynamic lambda$null$33(com.mojang.datafixers.Dynamic,java.util.Map,com.mojang.datafixers.Dynamic) -> a
    305:343:void lambda$static$32(java.util.HashMap) -> a
    288:292:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$31(com.mojang.datafixers.schemas.Schema) -> b
    286:286:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$30() -> b
    285:285:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$29() -> c
    275:281:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$28(com.mojang.datafixers.schemas.Schema) -> c
    274:274:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$27(java.util.Map) -> a
    273:273:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$26() -> d
    269:271:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$25(com.mojang.datafixers.schemas.Schema) -> d
    268:268:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$24(java.util.Map) -> b
    261:265:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$23(com.mojang.datafixers.schemas.Schema) -> e
    257:259:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerTypes$22(com.mojang.datafixers.schemas.Schema) -> f
    242:243:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$21(com.mojang.datafixers.schemas.Schema,java.lang.String) -> a
    230:230:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$20(com.mojang.datafixers.schemas.Schema,java.lang.String) -> b
    224:225:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerBlockEntities$19(com.mojang.datafixers.schemas.Schema,java.lang.String) -> c
    193:204:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$18(com.mojang.datafixers.schemas.Schema,java.lang.String) -> d
    186:190:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$17(com.mojang.datafixers.schemas.Schema,java.lang.String) -> e
    162:164:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$16(com.mojang.datafixers.schemas.Schema,java.lang.String) -> f
    144:146:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$15(com.mojang.datafixers.schemas.Schema,java.lang.String) -> g
    140:142:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$14(com.mojang.datafixers.schemas.Schema) -> g
    134:136:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$13(com.mojang.datafixers.schemas.Schema,java.lang.String) -> h
    129:131:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$12(com.mojang.datafixers.schemas.Schema) -> h
    123:124:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$11(com.mojang.datafixers.schemas.Schema,java.lang.String) -> i
    119:121:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$10(com.mojang.datafixers.schemas.Schema,java.lang.String) -> j
    114:115:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$9(com.mojang.datafixers.schemas.Schema,java.lang.String) -> k
    109:111:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$8(com.mojang.datafixers.schemas.Schema,java.lang.String) -> l
    101:102:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$7(com.mojang.datafixers.schemas.Schema,java.lang.String) -> m
    98:99:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$6(com.mojang.datafixers.schemas.Schema,java.lang.String) -> n
    95:96:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$5(com.mojang.datafixers.schemas.Schema,java.lang.String) -> o
    88:89:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerEntities$4(com.mojang.datafixers.schemas.Schema,java.lang.String) -> p
    79:80:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerInventory$3(com.mojang.datafixers.schemas.Schema) -> i
    73:74:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMinecart$2(com.mojang.datafixers.schemas.Schema) -> j
    66:68:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerThrowableProjectile$1(com.mojang.datafixers.schemas.Schema) -> k
    62:62:com.mojang.datafixers.types.templates.TypeTemplate lambda$registerMob$0(com.mojang.datafixers.schemas.Schema) -> l
    48:48:java.util.Map access$000() -> a
    49:345:void <clinit>() -> <clinit>
net.minecraft.util.datafix.schemas.V99$1 -> aie$1:
    345:345:void <init>() -> <init>
    348:348:java.lang.Object apply(com.mojang.datafixers.types.DynamicOps,java.lang.Object) -> apply
net.minecraft.util.datafix.schemas.package-info -> aif:
net.minecraft.util.package-info -> aig:
net.minecraft.util.profiling.ActiveProfiler -> aih:
    long WARNING_TIME_NANOS -> a
    org.apache.logging.log4j.Logger LOGGER -> b
    java.util.List paths -> c
    it.unimi.dsi.fastutil.longs.LongList startTimes -> d
    java.util.Map entries -> e
    java.util.function.IntSupplier getTickTime -> f
    long startTimeNano -> g
    int startTimeTicks -> h
    java.lang.String path -> i
    boolean started -> j
    net.minecraft.util.profiling.ActiveProfiler$PathEntry currentEntry -> k
    boolean warn -> l
    25:44:void <init>(long,java.util.function.IntSupplier,boolean) -> <init>
    48:57:void startTick() -> a
    61:72:void endTick() -> b
    76:88:void push(java.lang.String) -> a
    92:93:void push(java.util.function.Supplier) -> a
    97:120:void pop() -> c
    124:126:void popPush(java.lang.String) -> b
    130:132:void popPush(java.util.function.Supplier) -> b
    135:139:net.minecraft.util.profiling.ActiveProfiler$PathEntry getCurrentEntry() -> e
    144:145:void incrementCounter(java.lang.String) -> c
    149:150:void incrementCounter(java.util.function.Supplier) -> c
    155:155:net.minecraft.util.profiling.ProfileResults getResults() -> d
    136:136:net.minecraft.util.profiling.ActiveProfiler$PathEntry lambda$getCurrentEntry$3(java.lang.String) -> d
    115:115:java.lang.Object lambda$pop$2(long) -> a
    115:115:java.lang.Object lambda$pop$1() -> f
    70:70:java.lang.Object lambda$endTick$0() -> g
    22:23:void <clinit>() -> <clinit>
net.minecraft.util.profiling.ActiveProfiler$1 -> aih$1:
net.minecraft.util.profiling.ActiveProfiler$PathEntry -> aih$a:
    long duration -> a
    long count -> b
    it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap counters -> c
    158:161:void <init>() -> <init>
    165:165:long getDuration() -> a
    170:170:long getCount() -> b
    175:175:it.unimi.dsi.fastutil.objects.Object2LongMap getCounters() -> c
    158:158:long access$000(net.minecraft.util.profiling.ActiveProfiler$PathEntry) -> a
    158:158:long access$002(net.minecraft.util.profiling.ActiveProfiler$PathEntry,long) -> a
    158:158:long access$100(net.minecraft.util.profiling.ActiveProfiler$PathEntry) -> b
    158:158:long access$102(net.minecraft.util.profiling.ActiveProfiler$PathEntry,long) -> b
    158:158:it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap access$200(net.minecraft.util.profiling.ActiveProfiler$PathEntry) -> c
    158:158:void <init>(net.minecraft.util.profiling.ActiveProfiler$1) -> <init>
net.minecraft.util.profiling.EmptyProfileResults -> aii:
    net.minecraft.util.profiling.EmptyProfileResults EMPTY -> a
    10:11:void <init>() -> <init>
    15:15:java.util.List getTimes(java.lang.String) -> a
    20:20:boolean saveResults(java.io.File) -> a
    25:25:long getStartTimeNano() -> a
    30:30:int getStartTimeTicks() -> b
    35:35:long getEndTimeNano() -> c
    40:40:int getEndTimeTicks() -> d
    45:45:java.lang.String getProfilerResults() -> e
    8:8:void <clinit>() -> <clinit>
net.minecraft.util.profiling.FilledProfileResults -> aij:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.util.profiling.ProfilerPathEntry EMPTY -> b
    com.google.common.base.Splitter SPLITTER -> c
    java.util.Comparator COUNTER_ENTRY_COMPARATOR -> d
    java.util.Map entries -> e
    long startTimeNano -> f
    int startTimeTicks -> g
    long endTimeNano -> h
    int endTimeTicks -> i
    int tickDuration -> j
    56:63:void <init>(java.util.Map,long,int,long,int) -> <init>
    67:68:net.minecraft.util.profiling.ProfilerPathEntry getEntry(java.lang.String) -> c
    73:118:java.util.List getTimes(java.lang.String) -> a
    122:122:boolean isDirectChild(java.lang.String,java.lang.String) -> a
    126:136:java.util.Map getCounterValues() -> h
    141:141:long getStartTimeNano() -> a
    146:146:int getStartTimeTicks() -> b
    151:151:long getEndTimeNano() -> c
    156:156:int getEndTimeTicks() -> d
    161:173:boolean saveResults(java.io.File) -> a
    177:203:java.lang.String getProfilerResults(long,int) -> a
    208:210:java.lang.String getProfilerResults() -> e
    214:218:java.lang.StringBuilder indentLine(java.lang.StringBuilder,int) -> a
    222:263:void appendProfilerResults(int,java.lang.String,java.lang.StringBuilder) -> a
    266:275:void appendCounterResults(int,java.lang.String,net.minecraft.util.profiling.FilledProfileResults$CounterCollector,int,java.lang.StringBuilder) -> a
    278:283:void appendCounters(java.util.Map,java.lang.StringBuilder,int) -> a
    287:307:java.lang.String getComment() -> i
    313:313:int getTickDuration() -> f
    279:282:void lambda$appendCounters$6(java.lang.StringBuilder,int,java.lang.String,net.minecraft.util.profiling.FilledProfileResults$CounterCollector) -> a
    274:274:void lambda$appendCounterResults$5(int,int,java.lang.StringBuilder,java.util.Map$Entry) -> a
    226:233:void lambda$appendProfilerResults$4(java.lang.StringBuilder,int,java.lang.String,java.lang.Long) -> a
    128:135:void lambda$getCounterValues$3(java.util.Map,java.lang.String,net.minecraft.util.profiling.ProfilerPathEntry) -> a
    132:132:void lambda$null$2(java.util.Map,java.util.List,java.lang.String,java.lang.Long) -> a
    132:132:net.minecraft.util.profiling.FilledProfileResults$CounterCollector lambda$null$1(java.lang.String) -> d
    47:47:long lambda$static$0(net.minecraft.util.profiling.FilledProfileResults$CounterCollector) -> a
    27:47:void <clinit>() -> <clinit>
net.minecraft.util.profiling.FilledProfileResults$1 -> aij$1:
    29:29:void <init>() -> <init>
    32:32:long getDuration() -> a
    37:37:long getCount() -> b
    42:42:it.unimi.dsi.fastutil.objects.Object2LongMap getCounters() -> c
net.minecraft.util.profiling.FilledProfileResults$CounterCollector -> aij$a:
    long selfValue -> a
    long totalValue -> b
    java.util.Map children -> c
    316:319:void <init>() -> <init>
    322:328:void addValue(java.util.Iterator,long) -> a
    326:326:net.minecraft.util.profiling.FilledProfileResults$CounterCollector lambda$addValue$0(java.lang.String) -> a
    316:316:long access$000(net.minecraft.util.profiling.FilledProfileResults$CounterCollector) -> a
    316:316:long access$100(net.minecraft.util.profiling.FilledProfileResults$CounterCollector) -> b
    316:316:java.util.Map access$200(net.minecraft.util.profiling.FilledProfileResults$CounterCollector) -> c
    316:316:void <init>(net.minecraft.util.profiling.FilledProfileResults$1) -> <init>
net.minecraft.util.profiling.GameProfiler -> aik:
    org.apache.logging.log4j.Logger LOGGER -> a
    long MAXIMUM_TICK_TIME_NANOS -> b
    java.util.function.IntSupplier getTickTime -> c
    net.minecraft.util.profiling.GameProfiler$ProfilerImpl continuous -> d
    net.minecraft.util.profiling.GameProfiler$ProfilerImpl perTick -> e
    22:27:void <init>(java.util.function.IntSupplier) -> <init>
    30:30:net.minecraft.util.profiling.GameProfiler$Profiler continuous() -> d
    39:41:void startTick() -> a
    45:56:void endTick() -> b
    60:62:void push(java.lang.String) -> a
    66:68:void push(java.util.function.Supplier) -> a
    72:74:void pop() -> c
    78:80:void popPush(java.lang.String) -> b
    84:86:void popPush(java.util.function.Supplier) -> b
    90:92:void incrementCounter(java.lang.String) -> c
    96:98:void incrementCounter(java.util.function.Supplier) -> c
    14:14:java.util.function.IntSupplier access$100(net.minecraft.util.profiling.GameProfiler) -> a
    15:17:void <clinit>() -> <clinit>
net.minecraft.util.profiling.GameProfiler$1 -> aik$1:
net.minecraft.util.profiling.GameProfiler$Profiler -> aik$a:
    boolean isEnabled() -> a
    net.minecraft.util.profiling.ProfileResults disable() -> b
    net.minecraft.util.profiling.ProfileResults getResults() -> c
    void enable() -> d
net.minecraft.util.profiling.GameProfiler$ProfilerImpl -> aik$b:
    net.minecraft.util.profiling.ProfileCollector collector -> a
    net.minecraft.util.profiling.GameProfiler this$0 -> b
    110:111:void <init>(net.minecraft.util.profiling.GameProfiler) -> <init>
    115:115:boolean isEnabled() -> a
    120:122:net.minecraft.util.profiling.ProfileResults disable() -> b
    127:127:net.minecraft.util.profiling.ProfileResults getResults() -> c
    132:135:void enable() -> d
    110:110:void <init>(net.minecraft.util.profiling.GameProfiler,net.minecraft.util.profiling.GameProfiler$1) -> <init>
net.minecraft.util.profiling.InactiveProfiler -> ail:
    net.minecraft.util.profiling.InactiveProfiler INACTIVE -> a
    8:9:void <init>() -> <init>
    13:13:void startTick() -> a
    17:17:void endTick() -> b
    21:21:void push(java.lang.String) -> a
    25:25:void push(java.util.function.Supplier) -> a
    29:29:void pop() -> c
    33:33:void popPush(java.lang.String) -> b
    37:37:void popPush(java.util.function.Supplier) -> b
    41:41:void incrementCounter(java.lang.String) -> c
    45:45:void incrementCounter(java.util.function.Supplier) -> c
    49:49:net.minecraft.util.profiling.ProfileResults getResults() -> d
    6:6:void <clinit>() -> <clinit>
net.minecraft.util.profiling.ProfileCollector -> aim:
    net.minecraft.util.profiling.ProfileResults getResults() -> d
net.minecraft.util.profiling.ProfileResults -> ain:
    java.util.List getTimes(java.lang.String) -> a
    boolean saveResults(java.io.File) -> a
    long getStartTimeNano() -> a
    int getStartTimeTicks() -> b
    long getEndTimeNano() -> c
    int getEndTimeTicks() -> d
    22:22:long getNanoDuration() -> g
    26:26:int getTickDuration() -> f
    java.lang.String getProfilerResults() -> e
    32:32:java.lang.String demanglePath(java.lang.String) -> b
net.minecraft.util.profiling.ProfilerFiller -> aio:
    void startTick() -> a
    void endTick() -> b
    void push(java.lang.String) -> a
    void push(java.util.function.Supplier) -> a
    void pop() -> c
    void popPush(java.lang.String) -> b
    void popPush(java.util.function.Supplier) -> b
    void incrementCounter(java.lang.String) -> c
    void incrementCounter(java.util.function.Supplier) -> c
net.minecraft.util.profiling.ProfilerPathEntry -> aip:
    long getDuration() -> a
    long getCount() -> b
    it.unimi.dsi.fastutil.objects.Object2LongMap getCounters() -> c
net.minecraft.util.profiling.ResultField -> aiq:
    double percentage -> a
    double globalPercentage -> b
    long count -> c
    java.lang.String name -> d
    9:14:void <init>(java.lang.String,double,double,long) -> <init>
    18:24:int compareTo(net.minecraft.util.profiling.ResultField) -> a
    28:28:int getColor() -> a
    3:3:int compareTo(java.lang.Object) -> compareTo
net.minecraft.util.profiling.package-info -> air:
net.minecraft.util.thread.BlockableEventLoop -> ais:
    java.lang.String name -> b
    org.apache.logging.log4j.Logger LOGGER -> c
    java.util.Queue pendingRunnables -> d
    int blockingCount -> e
    19:24:void <init>(java.lang.String) -> <init>
    java.lang.Runnable wrapRunnable(java.lang.Runnable) -> e
    boolean shouldRun(java.lang.Runnable) -> d
    31:31:boolean isSameThread() -> bg
    java.lang.Thread getRunningThread() -> az
    37:37:boolean scheduleExecutables() -> ay
    41:41:int getPendingTasksCount() -> bh
    46:46:java.lang.String name() -> bi
    50:53:java.util.concurrent.CompletableFuture submit(java.util.function.Supplier) -> a
    58:58:java.util.concurrent.CompletableFuture submitAsync(java.lang.Runnable) -> a
    67:71:java.util.concurrent.CompletableFuture submit(java.lang.Runnable) -> f
    76:81:void executeBlocking(java.lang.Runnable) -> g
    85:87:void tell(java.lang.Runnable) -> h
    91:96:void execute(java.lang.Runnable) -> execute
    99:100:void dropAllTasks() -> bj
    103:106:void runAllTasks() -> bk
    109:120:boolean pollTask() -> w
    124:135:void managedBlock(java.util.function.BooleanSupplier) -> c
    138:140:void waitForTasks() -> bl
    144:148:void doRunTask(java.lang.Runnable) -> c
    14:14:void tell(java.lang.Object) -> a
    59:60:java.lang.Void lambda$submitAsync$0(java.lang.Runnable) -> b
    17:17:void <clinit>() -> <clinit>
net.minecraft.util.thread.NamedThreadFactory -> ait:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.lang.ThreadGroup group -> b
    java.util.concurrent.atomic.AtomicInteger threadNumber -> c
    java.lang.String namePrefix -> d
    13:20:void <init>(java.lang.String) -> <init>
    24:32:java.lang.Thread newThread(java.lang.Runnable) -> newThread
    26:28:void lambda$newThread$0(java.lang.Runnable,java.lang.Thread,java.lang.Throwable) -> a
    10:10:void <clinit>() -> <clinit>
net.minecraft.util.thread.ProcessorHandle -> aiu:
    java.lang.String name() -> bi
    void tell(java.lang.Object) -> a
    14:14:void close() -> close
    17:20:java.util.concurrent.CompletableFuture ask(java.util.function.Function) -> a
    24:24:net.minecraft.util.thread.ProcessorHandle of(java.lang.String,java.util.function.Consumer) -> a
net.minecraft.util.thread.ProcessorHandle$1 -> aiu$1:
    java.lang.String val$name -> a
    java.util.function.Consumer val$tell -> b
    24:24:void <init>(java.lang.String,java.util.function.Consumer) -> <init>
    27:27:java.lang.String name() -> bi
    32:33:void tell(java.lang.Object) -> a
    37:37:java.lang.String toString() -> toString
net.minecraft.util.thread.ProcessorMailbox -> aiv:
    org.apache.logging.log4j.Logger LOGGER -> b
    java.util.concurrent.atomic.AtomicInteger status -> c
    net.minecraft.util.thread.StrictQueue queue -> a
    java.util.concurrent.Executor dispatcher -> d
    java.lang.String name -> e
    26:26:net.minecraft.util.thread.ProcessorMailbox create(java.util.concurrent.Executor,java.lang.String) -> a
    20:33:void <init>(net.minecraft.util.thread.StrictQueue,java.util.concurrent.Executor,java.lang.String) -> <init>
    38:43:boolean setAsScheduled() -> a
    49:51:void setAsIdle() -> b
    54:58:boolean canBeScheduled() -> c
    65:67:void close() -> close
    70:70:boolean shouldProcess() -> d
    74:85:boolean pollTask() -> e
    91:96:void run() -> run
    100:102:void tell(java.lang.Object) -> a
    105:119:void registerForExecution() -> f
    122:126:int pollUntil(it.unimi.dsi.fastutil.ints.Int2BooleanFunction) -> a
    131:131:java.lang.String toString() -> toString
    136:136:java.lang.String name() -> bi
    91:91:boolean lambda$run$0(int) -> a
    16:16:void <clinit>() -> <clinit>
net.minecraft.util.thread.ReentrantBlockableEventLoop -> aiw:
    int reentrantCount -> b
    7:8:void <init>(java.lang.String) -> <init>
    12:12:boolean scheduleExecutables() -> ay
    16:16:boolean runningTask() -> bm
    21:27:void doRunTask(java.lang.Runnable) -> c
net.minecraft.util.thread.StrictQueue -> aix:
    java.lang.Object pop() -> a
    boolean push(java.lang.Object) -> a
    boolean isEmpty() -> b
net.minecraft.util.thread.StrictQueue$FixedPriorityQueue -> aix$a:
    java.util.List queueList -> a
    65:67:void <init>(int) -> <init>
    73:79:java.lang.Runnable pop() -> c
    84:86:boolean push(net.minecraft.util.thread.StrictQueue$IntRunnable) -> a
    91:91:boolean isEmpty() -> b
    62:62:boolean push(java.lang.Object) -> a
    62:62:java.lang.Object pop() -> a
    66:66:java.util.concurrent.ConcurrentLinkedQueue lambda$new$0(int) -> a
net.minecraft.util.thread.StrictQueue$IntRunnable -> aix$b:
    int priority -> a
    java.lang.Runnable task -> b
    47:50:void <init>(int,java.lang.Runnable) -> <init>
    54:55:void run() -> run
    58:58:int getPriority() -> a
net.minecraft.util.thread.StrictQueue$QueueStrictQueue -> aix$c:
    java.util.Queue queue -> a
    22:24:void <init>(java.util.Queue) -> <init>
    29:29:java.lang.Object pop() -> a
    34:34:boolean push(java.lang.Object) -> a
    39:39:boolean isEmpty() -> b
net.minecraft.util.thread.package-info -> aiy:
net.minecraft.util.worldupdate.WorldUpgrader -> aiz:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.concurrent.ThreadFactory THREAD_FACTORY -> b
    java.lang.String levelName -> c
    boolean eraseCache -> d
    net.minecraft.world.level.storage.LevelStorage levelStorage -> e
    java.lang.Thread thread -> f
    java.io.File pathToWorld -> g
    boolean running -> h
    boolean finished -> i
    float progress -> j
    int totalChunks -> k
    int converted -> l
    int skipped -> m
    it.unimi.dsi.fastutil.objects.Object2FloatMap progressMap -> n
    net.minecraft.network.chat.Component status -> o
    java.util.regex.Pattern REGEX -> p
    net.minecraft.world.level.storage.DimensionDataStorage overworldDataStorage -> q
    46:74:void <init>(java.lang.String,net.minecraft.world.level.storage.LevelStorageSource,net.minecraft.world.level.storage.LevelData,boolean) -> <init>
    77:82:void cancel() -> a
    85:190:void work() -> i
    193:226:java.util.List getAllChunkPos(net.minecraft.world.level.dimension.DimensionType) -> b
    230:230:boolean isFinished() -> b
    234:234:float dimensionProgress(net.minecraft.world.level.dimension.DimensionType) -> a
    238:238:float getProgress() -> c
    242:242:int getTotalChunks() -> d
    246:246:int getConverted() -> e
    250:250:int getSkipped() -> f
    254:254:net.minecraft.network.chat.Component getStatus() -> g
    258:258:java.lang.String getLevelName() -> h
    196:196:boolean lambda$getAllChunkPos$2(java.io.File,java.lang.String) -> a
    125:125:net.minecraft.world.level.storage.DimensionDataStorage lambda$work$1() -> j
    69:72:void lambda$new$0(java.lang.Thread,java.lang.Throwable) -> a
    37:56:void <clinit>() -> <clinit>
net.minecraft.util.worldupdate.package-info -> aja:
net.minecraft.world.BossEvent -> ajb:
    java.util.UUID id -> h
    net.minecraft.network.chat.Component name -> a
    float percent -> b
    net.minecraft.world.BossEvent$BossBarColor color -> c
    net.minecraft.world.BossEvent$BossBarOverlay overlay -> d
    boolean darkenScreen -> e
    boolean playBossMusic -> f
    boolean createWorldFog -> g
    18:24:void <init>(java.util.UUID,net.minecraft.network.chat.Component,net.minecraft.world.BossEvent$BossBarColor,net.minecraft.world.BossEvent$BossBarOverlay) -> <init>
    27:27:java.util.UUID getId() -> i
    31:31:net.minecraft.network.chat.Component getName() -> j
    35:36:void setName(net.minecraft.network.chat.Component) -> a
    39:39:float getPercent() -> k
    43:44:void setPercent(float) -> a
    47:47:net.minecraft.world.BossEvent$BossBarColor getColor() -> l
    51:52:void setColor(net.minecraft.world.BossEvent$BossBarColor) -> a
    55:55:net.minecraft.world.BossEvent$BossBarOverlay getOverlay() -> m
    59:60:void setOverlay(net.minecraft.world.BossEvent$BossBarOverlay) -> a
    63:63:boolean shouldDarkenScreen() -> n
    67:68:net.minecraft.world.BossEvent setDarkenScreen(boolean) -> a
    72:72:boolean shouldPlayBossMusic() -> o
    76:77:net.minecraft.world.BossEvent setPlayBossMusic(boolean) -> b
    81:82:net.minecraft.world.BossEvent setCreateWorldFog(boolean) -> c
    86:86:boolean shouldCreateWorldFog() -> p
net.minecraft.world.BossEvent$BossBarColor -> ajb$a:
    net.minecraft.world.BossEvent$BossBarColor PINK -> a
    net.minecraft.world.BossEvent$BossBarColor BLUE -> b
    net.minecraft.world.BossEvent$BossBarColor RED -> c
    net.minecraft.world.BossEvent$BossBarColor GREEN -> d
    net.minecraft.world.BossEvent$BossBarColor YELLOW -> e
    net.minecraft.world.BossEvent$BossBarColor PURPLE -> f
    net.minecraft.world.BossEvent$BossBarColor WHITE -> g
    java.lang.String name -> h
    net.minecraft.ChatFormatting formatting -> i
    net.minecraft.world.BossEvent$BossBarColor[] $VALUES -> j
    89:89:net.minecraft.world.BossEvent$BossBarColor[] values() -> values
    89:89:net.minecraft.world.BossEvent$BossBarColor valueOf(java.lang.String) -> valueOf
    102:105:void <init>(java.lang.String,int,java.lang.String,net.minecraft.ChatFormatting) -> <init>
    108:108:net.minecraft.ChatFormatting getFormatting() -> a
    112:112:java.lang.String getName() -> b
    116:121:net.minecraft.world.BossEvent$BossBarColor byName(java.lang.String) -> a
    89:96:void <clinit>() -> <clinit>
net.minecraft.world.BossEvent$BossBarOverlay -> ajb$b:
    net.minecraft.world.BossEvent$BossBarOverlay PROGRESS -> a
    net.minecraft.world.BossEvent$BossBarOverlay NOTCHED_6 -> b
    net.minecraft.world.BossEvent$BossBarOverlay NOTCHED_10 -> c
    net.minecraft.world.BossEvent$BossBarOverlay NOTCHED_12 -> d
    net.minecraft.world.BossEvent$BossBarOverlay NOTCHED_20 -> e
    java.lang.String name -> f
    net.minecraft.world.BossEvent$BossBarOverlay[] $VALUES -> g
    125:125:net.minecraft.world.BossEvent$BossBarOverlay[] values() -> values
    125:125:net.minecraft.world.BossEvent$BossBarOverlay valueOf(java.lang.String) -> valueOf
    135:137:void <init>(java.lang.String,int,java.lang.String) -> <init>
    140:140:java.lang.String getName() -> a
    144:149:net.minecraft.world.BossEvent$BossBarOverlay byName(java.lang.String) -> a
    125:130:void <clinit>() -> <clinit>
net.minecraft.world.Clearable -> ajc:
    void clearContent() -> N_
    9:12:void tryClear(java.lang.Object) -> a
net.minecraft.world.CompoundContainer -> ajd:
    net.minecraft.world.Container container1 -> a
    net.minecraft.world.Container container2 -> b
    10:19:void <init>(net.minecraft.world.Container,net.minecraft.world.Container) -> <init>
    23:23:int getContainerSize() -> O_
    28:28:boolean isEmpty() -> c
    32:32:boolean contains(net.minecraft.world.Container) -> a
    37:40:net.minecraft.world.item.ItemStack getItem(int) -> a
    46:49:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    55:58:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    64:69:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    73:73:int getMaxStackSize() -> L_
    78:80:void setChanged() -> e
    84:84:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    89:91:void startOpen(net.minecraft.world.entity.player.Player) -> a_
    95:97:void stopOpen(net.minecraft.world.entity.player.Player) -> b_
    101:104:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    110:112:void clearContent() -> N_
net.minecraft.world.Container -> aje:
    int getContainerSize() -> O_
    boolean isEmpty() -> c
    net.minecraft.world.item.ItemStack getItem(int) -> a
    net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    void setItem(int,net.minecraft.world.item.ItemStack) -> a
    25:25:int getMaxStackSize() -> L_
    void setChanged() -> e
    boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    33:33:void startOpen(net.minecraft.world.entity.player.Player) -> a_
    36:36:void stopOpen(net.minecraft.world.entity.player.Player) -> b_
    39:39:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    43:50:int countItem(net.minecraft.world.item.Item) -> a
    54:60:boolean hasAnyOf(java.util.Set) -> a
net.minecraft.world.ContainerHelper -> ajf:
    11:11:void <init>() -> <init>
    13:17:net.minecraft.world.item.ItemStack removeItem(java.util.List,int,int) -> a
    21:25:net.minecraft.world.item.ItemStack takeItem(java.util.List,int) -> a
    29:29:net.minecraft.nbt.CompoundTag saveAllItems(net.minecraft.nbt.CompoundTag,net.minecraft.core.NonNullList) -> a
    33:46:net.minecraft.nbt.CompoundTag saveAllItems(net.minecraft.nbt.CompoundTag,net.minecraft.core.NonNullList,boolean) -> a
    50:58:void loadAllItems(net.minecraft.nbt.CompoundTag,net.minecraft.core.NonNullList) -> b
net.minecraft.world.ContainerListener -> ajg:
    void containerChanged(net.minecraft.world.Container) -> a
net.minecraft.world.Containers -> ajh:
    java.util.Random RANDOM -> a
    13:13:void <init>() -> <init>
    17:18:void dropContents(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.Container) -> a
    21:22:void dropContents(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,net.minecraft.world.Container) -> a
    25:28:void dropContents(net.minecraft.world.level.Level,double,double,double,net.minecraft.world.Container) -> a
    31:32:void dropContents(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.NonNullList) -> a
    35:54:void dropItemStack(net.minecraft.world.level.Level,double,double,double,net.minecraft.world.item.ItemStack) -> a
    31:31:void lambda$dropContents$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.Difficulty -> aji:
    net.minecraft.world.Difficulty PEACEFUL -> a
    net.minecraft.world.Difficulty EASY -> b
    net.minecraft.world.Difficulty NORMAL -> c
    net.minecraft.world.Difficulty HARD -> d
    net.minecraft.world.Difficulty[] BY_ID -> e
    int id -> f
    java.lang.String key -> g
    net.minecraft.world.Difficulty[] $VALUES -> h
    10:10:net.minecraft.world.Difficulty[] values() -> values
    10:10:net.minecraft.world.Difficulty valueOf(java.lang.String) -> valueOf
    22:25:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    28:28:int getId() -> a
    32:32:net.minecraft.network.chat.Component getDisplayName() -> b
    36:36:net.minecraft.world.Difficulty byId(int) -> a
    41:46:net.minecraft.world.Difficulty byName(java.lang.String) -> a
    53:53:java.lang.String getKey() -> c
    17:17:net.minecraft.world.Difficulty[] lambda$static$0(int) -> b
    10:17:void <clinit>() -> <clinit>
net.minecraft.world.DifficultyInstance -> ajj:
    net.minecraft.world.Difficulty base -> a
    float effectiveDifficulty -> b
    17:20:void <init>(net.minecraft.world.Difficulty,long,long,float) -> <init>
    23:23:net.minecraft.world.Difficulty getDifficulty() -> a
    27:27:float getEffectiveDifficulty() -> b
    31:31:boolean isHard() -> c
    35:35:boolean isHarderThan(float) -> a
    48:54:float getSpecialMultiplier() -> d
    58:83:float calculateDifficulty(net.minecraft.world.Difficulty,long,long,float) -> a
net.minecraft.world.InteractionHand -> ajk:
    net.minecraft.world.InteractionHand MAIN_HAND -> a
    net.minecraft.world.InteractionHand OFF_HAND -> b
    net.minecraft.world.InteractionHand[] $VALUES -> c
    3:3:net.minecraft.world.InteractionHand[] values() -> values
    3:3:net.minecraft.world.InteractionHand valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
net.minecraft.world.InteractionResult -> ajl:
    net.minecraft.world.InteractionResult SUCCESS -> a
    net.minecraft.world.InteractionResult CONSUME -> b
    net.minecraft.world.InteractionResult PASS -> c
    net.minecraft.world.InteractionResult FAIL -> d
    net.minecraft.world.InteractionResult[] $VALUES -> e
    3:3:net.minecraft.world.InteractionResult[] values() -> values
    3:3:net.minecraft.world.InteractionResult valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    10:10:boolean consumesAction() -> a
    14:14:boolean shouldSwing() -> b
    3:7:void <clinit>() -> <clinit>
net.minecraft.world.InteractionResultHolder -> ajm:
    net.minecraft.world.InteractionResult result -> a
    java.lang.Object object -> b
    7:10:void <init>(net.minecraft.world.InteractionResult,java.lang.Object) -> <init>
    13:13:net.minecraft.world.InteractionResult getResult() -> a
    17:17:java.lang.Object getObject() -> b
    21:21:net.minecraft.world.InteractionResultHolder success(java.lang.Object) -> a
    25:25:net.minecraft.world.InteractionResultHolder consume(java.lang.Object) -> b
    29:29:net.minecraft.world.InteractionResultHolder pass(java.lang.Object) -> c
    33:33:net.minecraft.world.InteractionResultHolder fail(java.lang.Object) -> d
net.minecraft.world.LockCode -> ajn:
    net.minecraft.world.LockCode NO_LOCK -> a
    java.lang.String key -> b
    16:18:void <init>(java.lang.String) -> <init>
    21:21:boolean unlocksWith(net.minecraft.world.item.ItemStack) -> a
    25:28:void addToTag(net.minecraft.nbt.CompoundTag) -> a
    31:34:net.minecraft.world.LockCode fromTag(net.minecraft.nbt.CompoundTag) -> b
    11:11:void <clinit>() -> <clinit>
net.minecraft.world.MenuProvider -> ajo:
    net.minecraft.network.chat.Component getDisplayName() -> d
net.minecraft.world.Nameable -> ajp:
    net.minecraft.network.chat.Component getName() -> M
    11:11:boolean hasCustomName() -> N
    15:15:net.minecraft.network.chat.Component getDisplayName() -> d
    20:20:net.minecraft.network.chat.Component getCustomName() -> O
net.minecraft.world.SimpleContainer -> ajq:
    int size -> a
    net.minecraft.core.NonNullList items -> b
    java.util.List listeners -> c
    19:22:void <init>(int) -> <init>
    24:27:void <init>(net.minecraft.world.item.ItemStack[]) -> <init>
    30:34:void addListener(net.minecraft.world.ContainerListener) -> a
    37:38:void removeListener(net.minecraft.world.ContainerListener) -> b
    42:45:net.minecraft.world.item.ItemStack getItem(int) -> a
    50:54:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    62:78:net.minecraft.world.item.ItemStack removeItemType(net.minecraft.world.item.Item,int) -> a
    86:98:net.minecraft.world.item.ItemStack addItem(net.minecraft.world.item.ItemStack) -> a
    103:108:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    113:118:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    122:122:int getContainerSize() -> O_
    127:132:boolean isEmpty() -> c
    137:142:void setChanged() -> e
    146:146:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    151:153:void clearContent() -> N_
    157:160:void fillStackedContents(net.minecraft.world.entity.player.StackedContents) -> a
    164:167:java.lang.String toString() -> toString
    171:179:void moveItemToEmptySlots(net.minecraft.world.item.ItemStack) -> b
    182:191:void moveItemToOccupiedSlotsWithSameType(net.minecraft.world.item.ItemStack) -> c
    197:204:void moveItemsBetweenStacks(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    165:165:boolean lambda$toString$0(net.minecraft.world.item.ItemStack) -> d
net.minecraft.world.SimpleMenuProvider -> ajr:
    net.minecraft.network.chat.Component title -> a
    net.minecraft.world.inventory.MenuConstructor menuConstructor -> b
    13:16:void <init>(net.minecraft.world.inventory.MenuConstructor,net.minecraft.network.chat.Component) -> <init>
    20:20:net.minecraft.network.chat.Component getDisplayName() -> d
    25:25:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> createMenu
net.minecraft.world.Snooper -> ajs:
    java.util.Map fixedData -> a
    java.util.Map dynamicData -> b
    java.lang.String token -> c
    java.net.URL url -> d
    net.minecraft.world.SnooperPopulator populator -> e
    java.util.Timer timer -> f
    java.lang.Object lock -> g
    long startupTime -> h
    boolean started -> i
    int count -> j
    21:42:void <init>(java.lang.String,net.minecraft.world.SnooperPopulator,long) -> <init>
    45:46:void start() -> a
    76:87:void populateFixedData() -> h
    90:93:void setJvmArgs() -> i
    96:102:void prepare() -> b
    105:108:void setDynamicData(java.lang.String,java.lang.Object) -> a
    111:114:void setFixedData(java.lang.String,java.lang.Object) -> b
    117:131:java.util.Map getValues() -> c
    135:135:boolean isStarted() -> d
    139:140:void interrupt() -> e
    143:143:java.lang.String getToken() -> f
    147:147:long getStartupTime() -> g
    91:91:void lambda$setJvmArgs$0(int[],java.lang.String) -> a
    16:16:net.minecraft.world.SnooperPopulator access$000(net.minecraft.world.Snooper) -> a
    16:16:java.lang.Object access$100(net.minecraft.world.Snooper) -> b
    16:16:java.util.Map access$200(net.minecraft.world.Snooper) -> c
    16:16:int access$300(net.minecraft.world.Snooper) -> d
    16:16:java.util.Map access$400(net.minecraft.world.Snooper) -> e
    16:16:int access$308(net.minecraft.world.Snooper) -> f
    16:16:java.lang.String access$500(net.minecraft.world.Snooper) -> g
    16:16:java.net.URL access$600(net.minecraft.world.Snooper) -> h
net.minecraft.world.Snooper$1 -> ajs$1:
    net.minecraft.world.Snooper this$0 -> a
    52:52:void <init>(net.minecraft.world.Snooper) -> <init>
    55:71:void run() -> run
net.minecraft.world.SnooperPopulator -> ajt:
    void populateSnooper(net.minecraft.world.Snooper) -> a
    void populateSnooperInitial(net.minecraft.world.Snooper) -> b
    boolean isSnooperEnabled() -> W
net.minecraft.world.WorldlyContainer -> aju:
    int[] getSlotsForFace(net.minecraft.core.Direction) -> a
    boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> a
    boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> b
net.minecraft.world.WorldlyContainerHolder -> ajv:
    net.minecraft.world.WorldlyContainer getContainer(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
net.minecraft.world.damagesource.CombatEntry -> ajw:
    net.minecraft.world.damagesource.DamageSource source -> a
    int time -> b
    float damage -> c
    float health -> d
    java.lang.String location -> e
    float fallDistance -> f
    17:24:void <init>(net.minecraft.world.damagesource.DamageSource,int,float,float,java.lang.String,float) -> <init>
    27:27:net.minecraft.world.damagesource.DamageSource getSource() -> a
    31:31:int getTime() -> b
    35:35:float getDamage() -> c
    39:39:float getHealthBeforeDamage() -> d
    43:43:float getHealthAfterDamage() -> e
    47:47:boolean isCombatRelated() -> f
    52:52:java.lang.String getLocation() -> g
    57:57:net.minecraft.network.chat.Component getAttackerName() -> h
    62:62:net.minecraft.world.entity.Entity getAttacker() -> i
    66:69:float getFallDistance() -> j
net.minecraft.world.damagesource.CombatRules -> ajx:
    5:5:void <init>() -> <init>
    13:15:float getDamageAfterAbsorb(float,float,float) -> a
    19:20:float getDamageAfterMagicAbsorb(float,float) -> a
net.minecraft.world.damagesource.CombatTracker -> ajy:
    java.util.List entries -> a
    net.minecraft.world.entity.LivingEntity mob -> b
    int lastDamageTime -> c
    int combatStartTime -> d
    int combatEndTime -> e
    boolean inCombat -> f
    boolean takingDamage -> g
    java.lang.String nextLocation -> h
    22:33:void <init>(net.minecraft.world.entity.LivingEntity) -> <init>
    36:49:void prepareForDamage() -> a
    52:67:void recordDamage(net.minecraft.world.damagesource.DamageSource,float,float) -> a
    70:108:net.minecraft.network.chat.Component getDeathMessage() -> b
    113:133:net.minecraft.world.entity.LivingEntity getKiller() -> c
    139:168:net.minecraft.world.damagesource.CombatEntry getMostSignificantFall() -> j
    173:173:java.lang.String getFallLocation(net.minecraft.world.damagesource.CombatEntry) -> a
    177:178:boolean isTakingDamage() -> d
    182:183:boolean isInCombat() -> e
    187:190:int getCombatDuration() -> f
    195:196:void resetPreparedStatus() -> k
    199:212:void recheckStatus() -> g
    215:215:net.minecraft.world.entity.LivingEntity getMob() -> h
    220:223:net.minecraft.world.damagesource.CombatEntry getLastEntry() -> i
net.minecraft.world.damagesource.DamageSource -> ajz:
    net.minecraft.world.damagesource.DamageSource IN_FIRE -> a
    net.minecraft.world.damagesource.DamageSource LIGHTNING_BOLT -> b
    net.minecraft.world.damagesource.DamageSource ON_FIRE -> c
    net.minecraft.world.damagesource.DamageSource LAVA -> d
    net.minecraft.world.damagesource.DamageSource HOT_FLOOR -> e
    net.minecraft.world.damagesource.DamageSource IN_WALL -> f
    net.minecraft.world.damagesource.DamageSource CRAMMING -> g
    net.minecraft.world.damagesource.DamageSource DROWN -> h
    net.minecraft.world.damagesource.DamageSource STARVE -> i
    net.minecraft.world.damagesource.DamageSource CACTUS -> j
    net.minecraft.world.damagesource.DamageSource FALL -> k
    net.minecraft.world.damagesource.DamageSource FLY_INTO_WALL -> l
    net.minecraft.world.damagesource.DamageSource OUT_OF_WORLD -> m
    net.minecraft.world.damagesource.DamageSource GENERIC -> n
    net.minecraft.world.damagesource.DamageSource MAGIC -> o
    net.minecraft.world.damagesource.DamageSource WITHER -> p
    net.minecraft.world.damagesource.DamageSource ANVIL -> q
    net.minecraft.world.damagesource.DamageSource FALLING_BLOCK -> r
    net.minecraft.world.damagesource.DamageSource DRAGON_BREATH -> s
    net.minecraft.world.damagesource.DamageSource FIREWORKS -> t
    net.minecraft.world.damagesource.DamageSource DRY_OUT -> u
    net.minecraft.world.damagesource.DamageSource SWEET_BERRY_BUSH -> v
    boolean bypassArmor -> x
    boolean bypassInvul -> y
    boolean bypassMagic -> z
    float exhaustion -> A
    boolean isFireSource -> B
    boolean isProjectile -> C
    boolean scalesWithDifficulty -> D
    boolean isMagic -> E
    boolean isExplosion -> F
    java.lang.String msgId -> w
    41:41:net.minecraft.world.damagesource.DamageSource sting(net.minecraft.world.entity.LivingEntity) -> a
    45:45:net.minecraft.world.damagesource.DamageSource mobAttack(net.minecraft.world.entity.LivingEntity) -> b
    49:49:net.minecraft.world.damagesource.DamageSource indirectMobAttack(net.minecraft.world.entity.Entity,net.minecraft.world.entity.LivingEntity) -> a
    53:53:net.minecraft.world.damagesource.DamageSource playerAttack(net.minecraft.world.entity.player.Player) -> a
    57:57:net.minecraft.world.damagesource.DamageSource arrow(net.minecraft.world.entity.projectile.AbstractArrow,net.minecraft.world.entity.Entity) -> a
    61:61:net.minecraft.world.damagesource.DamageSource trident(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> a
    65:68:net.minecraft.world.damagesource.DamageSource fireball(net.minecraft.world.entity.projectile.AbstractHurtingProjectile,net.minecraft.world.entity.Entity) -> a
    72:72:net.minecraft.world.damagesource.DamageSource thrown(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> b
    76:76:net.minecraft.world.damagesource.DamageSource indirectMagic(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> c
    80:80:net.minecraft.world.damagesource.DamageSource thorns(net.minecraft.world.entity.Entity) -> a
    84:87:net.minecraft.world.damagesource.DamageSource explosion(net.minecraft.world.level.Explosion) -> a
    92:95:net.minecraft.world.damagesource.DamageSource explosion(net.minecraft.world.entity.LivingEntity) -> c
    100:100:net.minecraft.world.damagesource.DamageSource netherBedExplosion() -> a
    115:115:boolean isProjectile() -> b
    119:120:net.minecraft.world.damagesource.DamageSource setProjectile() -> c
    124:124:boolean isExplosion() -> d
    128:129:net.minecraft.world.damagesource.DamageSource setExplosion() -> e
    133:133:boolean isBypassArmor() -> f
    137:137:float getFoodExhaustion() -> g
    141:141:boolean isBypassInvul() -> h
    145:145:boolean isBypassMagic() -> i
    107:152:void <init>(java.lang.String) -> <init>
    160:160:net.minecraft.world.entity.Entity getDirectEntity() -> j
    169:169:net.minecraft.world.entity.Entity getEntity() -> k
    173:176:net.minecraft.world.damagesource.DamageSource bypassArmor() -> l
    180:181:net.minecraft.world.damagesource.DamageSource bypassInvul() -> m
    185:188:net.minecraft.world.damagesource.DamageSource bypassMagic() -> n
    192:193:net.minecraft.world.damagesource.DamageSource setIsFire() -> o
    197:204:net.minecraft.network.chat.Component getLocalizedDeathMessage(net.minecraft.world.entity.LivingEntity) -> d
    209:209:boolean isFire() -> p
    213:213:java.lang.String getMsgId() -> q
    217:218:net.minecraft.world.damagesource.DamageSource setScalesWithDifficulty() -> r
    222:222:boolean scalesWithDifficulty() -> s
    226:226:boolean isMagic() -> t
    230:231:net.minecraft.world.damagesource.DamageSource setMagic() -> u
    235:236:boolean isCreativePlayer() -> v
    241:241:net.minecraft.world.phys.Vec3 getSourcePosition() -> w
    17:38:void <clinit>() -> <clinit>
net.minecraft.world.damagesource.EntityDamageSource -> aka:
    net.minecraft.world.entity.Entity entity -> x
    boolean isThorns -> y
    19:21:void <init>(java.lang.String,net.minecraft.world.entity.Entity) -> <init>
    24:25:net.minecraft.world.damagesource.EntityDamageSource setThorns() -> x
    29:29:boolean isThorns() -> y
    35:35:net.minecraft.world.entity.Entity getEntity() -> k
    40:46:net.minecraft.network.chat.Component getLocalizedDeathMessage(net.minecraft.world.entity.LivingEntity) -> d
    52:52:boolean scalesWithDifficulty() -> s
    58:58:net.minecraft.world.phys.Vec3 getSourcePosition() -> w
net.minecraft.world.damagesource.IndirectEntityDamageSource -> akb:
    net.minecraft.world.entity.Entity owner -> y
    15:17:void <init>(java.lang.String,net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> <init>
    22:22:net.minecraft.world.entity.Entity getDirectEntity() -> j
    28:28:net.minecraft.world.entity.Entity getEntity() -> k
    33:41:net.minecraft.network.chat.Component getLocalizedDeathMessage(net.minecraft.world.entity.LivingEntity) -> d
net.minecraft.world.damagesource.NetherBedDamage -> akc:
    13:16:void <init>() -> <init>
    20:24:net.minecraft.network.chat.Component getLocalizedDeathMessage(net.minecraft.world.entity.LivingEntity) -> d
    20:22:void lambda$getLocalizedDeathMessage$0(net.minecraft.network.chat.Style) -> a
net.minecraft.world.damagesource.package-info -> akd:
net.minecraft.world.effect.AbsoptionMobEffect -> ake:
    8:9:void <init>(net.minecraft.world.effect.MobEffectCategory,int) -> <init>
    13:15:void removeAttributeModifiers(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.attributes.BaseAttributeMap,int) -> a
    19:21:void addAttributeModifiers(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.attributes.BaseAttributeMap,int) -> b
net.minecraft.world.effect.AttackDamageMobEffect -> akf:
    double multiplier -> a
    9:11:void <init>(net.minecraft.world.effect.MobEffectCategory,int,double) -> <init>
    15:15:double getAttributeModifierValue(int,net.minecraft.world.entity.ai.attributes.AttributeModifier) -> a
net.minecraft.world.effect.HealthBoostMobEffect -> akg:
    8:9:void <init>(net.minecraft.world.effect.MobEffectCategory,int) -> <init>
    13:17:void removeAttributeModifiers(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.attributes.BaseAttributeMap,int) -> a
net.minecraft.world.effect.InstantenousMobEffect -> akh:
    5:6:void <init>(net.minecraft.world.effect.MobEffectCategory,int) -> <init>
    10:10:boolean isInstantenous() -> a
    15:15:boolean isDurationEffectTick(int,int) -> a
net.minecraft.world.effect.MobEffect -> aki:
    java.util.Map attributeModifiers -> a
    net.minecraft.world.effect.MobEffectCategory category -> b
    int color -> c
    java.lang.String descriptionId -> d
    25:25:net.minecraft.world.effect.MobEffect byId(int) -> a
    29:29:int getId(net.minecraft.world.effect.MobEffect) -> a
    32:41:void <init>(net.minecraft.world.effect.MobEffectCategory,int) -> <init>
    56:79:void applyEffectTick(net.minecraft.world.entity.LivingEntity,int) -> a
    82:95:void applyInstantenousEffect(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity,net.minecraft.world.entity.LivingEntity,int,double) -> a
    108:130:boolean isDurationEffectTick(int,int) -> a
    135:135:boolean isInstantenous() -> a
    139:142:java.lang.String getOrCreateDescriptionId() -> b
    146:146:java.lang.String getDescriptionId() -> c
    150:150:net.minecraft.network.chat.Component getDisplayName() -> d
    154:154:net.minecraft.world.effect.MobEffectCategory getCategory() -> e
    158:158:int getColor() -> f
    162:164:net.minecraft.world.effect.MobEffect addAttributeModifier(net.minecraft.world.entity.ai.attributes.Attribute,java.lang.String,double,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> a
    168:168:java.util.Map getAttributeModifiers() -> g
    172:179:void removeAttributeModifiers(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.attributes.BaseAttributeMap,int) -> a
    182:191:void addAttributeModifiers(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.attributes.BaseAttributeMap,int) -> b
    194:194:double getAttributeModifierValue(int,net.minecraft.world.entity.ai.attributes.AttributeModifier) -> a
    198:198:boolean isBeneficial() -> h
net.minecraft.world.effect.MobEffectCategory -> akj:
    net.minecraft.world.effect.MobEffectCategory BENEFICIAL -> a
    net.minecraft.world.effect.MobEffectCategory HARMFUL -> b
    net.minecraft.world.effect.MobEffectCategory NEUTRAL -> c
    net.minecraft.ChatFormatting tooltipFormatting -> d
    net.minecraft.world.effect.MobEffectCategory[] $VALUES -> e
    5:5:net.minecraft.world.effect.MobEffectCategory[] values() -> values
    5:5:net.minecraft.world.effect.MobEffectCategory valueOf(java.lang.String) -> valueOf
    12:14:void <init>(java.lang.String,int,net.minecraft.ChatFormatting) -> <init>
    17:17:net.minecraft.ChatFormatting getTooltipFormatting() -> a
    5:8:void <clinit>() -> <clinit>
net.minecraft.world.effect.MobEffectInstance -> akk:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.effect.MobEffect effect -> b
    int duration -> c
    int amplifier -> d
    boolean splash -> e
    boolean ambient -> f
    boolean noCounter -> g
    boolean visible -> h
    boolean showIcon -> i
    net.minecraft.world.effect.MobEffectInstance hiddenEffect -> j
    28:29:void <init>(net.minecraft.world.effect.MobEffect) -> <init>
    32:33:void <init>(net.minecraft.world.effect.MobEffect,int) -> <init>
    36:37:void <init>(net.minecraft.world.effect.MobEffect,int,int) -> <init>
    40:41:void <init>(net.minecraft.world.effect.MobEffect,int,int,boolean,boolean) -> <init>
    44:45:void <init>(net.minecraft.world.effect.MobEffect,int,int,boolean,boolean,boolean) -> <init>
    47:55:void <init>(net.minecraft.world.effect.MobEffect,int,int,boolean,boolean,boolean,net.minecraft.world.effect.MobEffectInstance) -> <init>
    57:60:void <init>(net.minecraft.world.effect.MobEffectInstance) -> <init>
    63:68:void setDetailsFrom(net.minecraft.world.effect.MobEffectInstance) -> a
    71:108:boolean update(net.minecraft.world.effect.MobEffectInstance) -> b
    112:112:net.minecraft.world.effect.MobEffect getEffect() -> a
    116:116:int getDuration() -> b
    120:120:int getAmplifier() -> c
    124:125:void setSplash(boolean) -> a
    128:128:boolean isAmbient() -> d
    132:132:boolean isVisible() -> e
    136:136:boolean showIcon() -> f
    146:157:boolean tick(net.minecraft.world.entity.LivingEntity,java.lang.Runnable) -> a
    161:164:int tickDownDuration() -> i
    168:171:void applyEffect(net.minecraft.world.entity.LivingEntity) -> a
    174:174:java.lang.String getDescriptionId() -> g
    180:195:java.lang.String toString() -> toString
    200:209:boolean equals(java.lang.Object) -> equals
    214:219:int hashCode() -> hashCode
    223:225:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> a
    229:239:void writeDetailsTo(net.minecraft.nbt.CompoundTag) -> c
    242:247:net.minecraft.world.effect.MobEffectInstance load(net.minecraft.nbt.CompoundTag) -> b
    251:266:net.minecraft.world.effect.MobEffectInstance loadSpecifiedEffect(net.minecraft.world.effect.MobEffect,net.minecraft.nbt.CompoundTag) -> a
    270:271:void setNoCounter(boolean) -> b
    274:274:boolean isNoCounter() -> h
    279:291:int compareTo(net.minecraft.world.effect.MobEffectInstance) -> c
    13:13:int compareTo(java.lang.Object) -> compareTo
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.effect.MobEffectUtil -> akl:
    7:7:void <init>() -> <init>
    9:13:java.lang.String formatDuration(net.minecraft.world.effect.MobEffectInstance,float) -> a
    17:17:boolean hasDigSpeed(net.minecraft.world.entity.LivingEntity) -> a
    21:29:int getDigSpeedAmplification(net.minecraft.world.entity.LivingEntity) -> b
    33:33:boolean hasWaterBreathing(net.minecraft.world.entity.LivingEntity) -> c
net.minecraft.world.effect.MobEffects -> akm:
    net.minecraft.world.effect.MobEffect MOVEMENT_SPEED -> a
    net.minecraft.world.effect.MobEffect MOVEMENT_SLOWDOWN -> b
    net.minecraft.world.effect.MobEffect DIG_SPEED -> c
    net.minecraft.world.effect.MobEffect DIG_SLOWDOWN -> d
    net.minecraft.world.effect.MobEffect DAMAGE_BOOST -> e
    net.minecraft.world.effect.MobEffect HEAL -> f
    net.minecraft.world.effect.MobEffect HARM -> g
    net.minecraft.world.effect.MobEffect JUMP -> h
    net.minecraft.world.effect.MobEffect CONFUSION -> i
    net.minecraft.world.effect.MobEffect REGENERATION -> j
    net.minecraft.world.effect.MobEffect DAMAGE_RESISTANCE -> k
    net.minecraft.world.effect.MobEffect FIRE_RESISTANCE -> l
    net.minecraft.world.effect.MobEffect WATER_BREATHING -> m
    net.minecraft.world.effect.MobEffect INVISIBILITY -> n
    net.minecraft.world.effect.MobEffect BLINDNESS -> o
    net.minecraft.world.effect.MobEffect NIGHT_VISION -> p
    net.minecraft.world.effect.MobEffect HUNGER -> q
    net.minecraft.world.effect.MobEffect WEAKNESS -> r
    net.minecraft.world.effect.MobEffect POISON -> s
    net.minecraft.world.effect.MobEffect WITHER -> t
    net.minecraft.world.effect.MobEffect HEALTH_BOOST -> u
    net.minecraft.world.effect.MobEffect ABSORPTION -> v
    net.minecraft.world.effect.MobEffect SATURATION -> w
    net.minecraft.world.effect.MobEffect GLOWING -> x
    net.minecraft.world.effect.MobEffect LEVITATION -> y
    net.minecraft.world.effect.MobEffect LUCK -> z
    net.minecraft.world.effect.MobEffect UNLUCK -> A
    net.minecraft.world.effect.MobEffect SLOW_FALLING -> B
    net.minecraft.world.effect.MobEffect CONDUIT_POWER -> C
    net.minecraft.world.effect.MobEffect DOLPHINS_GRACE -> D
    net.minecraft.world.effect.MobEffect BAD_OMEN -> E
    net.minecraft.world.effect.MobEffect HERO_OF_THE_VILLAGE -> F
    12:12:void <init>() -> <init>
    67:67:net.minecraft.world.effect.MobEffect register(int,java.lang.String,net.minecraft.world.effect.MobEffect) -> a
    13:63:void <clinit>() -> <clinit>
net.minecraft.world.effect.MobEffects$1 -> akm$1:
    43:43:void <init>(net.minecraft.world.effect.MobEffectCategory,int) -> <init>
    46:46:boolean isDurationEffectTick(int,int) -> a
    51:61:void applyEffectTick(net.minecraft.world.entity.LivingEntity,int) -> a
net.minecraft.world.effect.package-info -> akn:
net.minecraft.world.entity.AgableMob -> ako:
    net.minecraft.network.syncher.EntityDataAccessor DATA_BABY_ID -> bw
    int age -> b
    int forcedAge -> c
    int forcedAgeTimer -> d
    32:33:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    37:49:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    56:56:void onOffspringSpawnedFromEgg(net.minecraft.world.entity.player.Player,net.minecraft.world.entity.AgableMob) -> a
    60:84:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    89:91:void defineSynchedData() -> w_
    94:97:int getAge() -> i
    102:119:void ageUp(int,boolean) -> a
    122:123:void ageUp(int) -> a
    126:133:void setAge(int) -> b_
    137:140:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    144:147:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    151:155:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    159:178:void aiStep() -> k
    181:181:void ageBoundaryReached() -> l
    185:185:boolean isBaby() -> x_
    21:21:void <clinit>() -> <clinit>
net.minecraft.world.entity.AgableMob$AgableMobGroupData -> ako$a:
    int groupSize -> a
    boolean shouldSpawnBaby -> b
    float babySpawnChance -> c
    188:191:void <init>() -> <init>
    194:194:int getGroupSize() -> a
    198:199:void increaseGroupSizeByOne() -> b
    202:202:boolean isShouldSpawnBaby() -> c
    206:207:void setShouldSpawnBaby(boolean) -> a
    210:210:float getBabySpawnChance() -> d
    214:215:void setBabySpawnChance(float) -> a
net.minecraft.world.entity.AreaEffectCloud -> akp:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_RADIUS -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_COLOR -> d
    net.minecraft.network.syncher.EntityDataAccessor DATA_WAITING -> e
    net.minecraft.network.syncher.EntityDataAccessor DATA_PARTICLE -> f
    net.minecraft.world.item.alchemy.Potion potion -> g
    java.util.List effects -> ao
    java.util.Map victims -> ap
    int duration -> aq
    int waitTime -> ar
    int reapplicationDelay -> as
    boolean fixedColor -> at
    int durationOnUse -> au
    float radiusOnUse -> av
    float radiusPerTick -> aw
    net.minecraft.world.entity.LivingEntity owner -> ax
    java.util.UUID ownerUUID -> ay
    47:64:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    67:69:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    73:77:void defineSynchedData() -> w_
    80:83:void setRadius(float) -> a
    87:92:void refreshDimensions() -> z_
    95:95:float getRadius() -> f
    99:103:void setPotion(net.minecraft.world.item.alchemy.Potion) -> a
    106:111:void updateColor() -> z
    114:118:void addEffect(net.minecraft.world.effect.MobEffectInstance) -> a
    121:121:int getColor() -> i
    125:127:void setFixedColor(int) -> a
    130:130:net.minecraft.core.particles.ParticleOptions getParticle() -> k
    134:135:void setParticle(net.minecraft.core.particles.ParticleOptions) -> a
    138:139:void setWaiting(boolean) -> a
    142:142:boolean isWaiting() -> l
    146:146:int getDuration() -> m
    150:151:void setDuration(int) -> b
    155:279:void tick() -> h
    282:282:float getRadiusOnUse() -> n
    286:287:void setRadiusOnUse(float) -> b
    290:290:float getRadiusPerTick() -> o
    294:295:void setRadiusPerTick(float) -> c
    298:298:int getDurationOnUse() -> p
    302:303:void setDurationOnUse(int) -> c
    306:306:int getWaitTime() -> q
    310:312:void use() -> r
    315:315:boolean canUse() -> s
    319:320:void setWaitTime(int) -> d
    323:325:void setOwner(net.minecraft.world.entity.LivingEntity) -> a
    329:336:net.minecraft.world.entity.LivingEntity getOwner() -> u
    341:376:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    380:409:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    413:417:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    420:420:net.minecraft.world.item.alchemy.Potion getPotion() -> v
    424:424:java.util.List getEffects() -> w
    429:429:net.minecraft.world.level.material.PushReaction getPistonPushReaction() -> A_
    434:434:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    439:439:net.minecraft.world.entity.EntityDimensions getDimensions(net.minecraft.world.entity.Pose) -> a
    38:45:void <clinit>() -> <clinit>
net.minecraft.world.entity.Entity -> akq:
    org.apache.logging.log4j.Logger LOGGER -> h
    java.util.concurrent.atomic.AtomicInteger ENTITY_COUNTER -> b
    java.util.List EMPTY_LIST -> c
    net.minecraft.world.phys.AABB INITIAL_AABB -> d
    double viewScale -> e
    net.minecraft.world.entity.EntityType type -> f
    int id -> g
    boolean blocksBuilding -> i
    java.util.List passengers -> ao
    int boardingCooldown -> j
    net.minecraft.world.entity.Entity vehicle -> ap
    boolean forcedLoading -> k
    net.minecraft.world.level.Level level -> l
    double xo -> m
    double yo -> n
    double zo -> o
    double x -> aq
    double y -> ar
    double z -> as
    net.minecraft.world.phys.Vec3 deltaMovement -> at
    float yRot -> p
    float xRot -> q
    float yRotO -> r
    float xRotO -> s
    net.minecraft.world.phys.AABB bb -> au
    boolean onGround -> t
    boolean horizontalCollision -> u
    boolean verticalCollision -> v
    boolean collision -> w
    boolean hurtMarked -> x
    net.minecraft.world.phys.Vec3 stuckSpeedMultiplier -> y
    boolean removed -> z
    float walkDistO -> A
    float walkDist -> B
    float moveDist -> C
    float fallDistance -> D
    float nextStep -> av
    float nextFlap -> aw
    double xOld -> E
    double yOld -> F
    double zOld -> G
    float maxUpStep -> H
    boolean noPhysics -> I
    float pushthrough -> J
    java.util.Random random -> K
    int tickCount -> L
    int remainingFireTicks -> ax
    boolean wasInWater -> M
    double waterHeight -> N
    boolean wasUnderWater -> O
    boolean isInLava -> P
    int invulnerableTime -> Q
    boolean firstTick -> R
    net.minecraft.network.syncher.SynchedEntityData entityData -> S
    net.minecraft.network.syncher.EntityDataAccessor DATA_SHARED_FLAGS_ID -> T
    net.minecraft.network.syncher.EntityDataAccessor DATA_AIR_SUPPLY_ID -> ay
    net.minecraft.network.syncher.EntityDataAccessor DATA_CUSTOM_NAME -> az
    net.minecraft.network.syncher.EntityDataAccessor DATA_CUSTOM_NAME_VISIBLE -> aA
    net.minecraft.network.syncher.EntityDataAccessor DATA_SILENT -> aB
    net.minecraft.network.syncher.EntityDataAccessor DATA_NO_GRAVITY -> aC
    net.minecraft.network.syncher.EntityDataAccessor DATA_POSE -> U
    boolean inChunk -> V
    int xChunk -> W
    int yChunk -> X
    int zChunk -> Y
    long xp -> Z
    long yp -> aa
    long zp -> ab
    boolean noCulling -> ac
    boolean hasImpulse -> ad
    int changingDimensionDelay -> ae
    boolean isInsidePortal -> af
    int portalTime -> ag
    net.minecraft.world.level.dimension.DimensionType dimension -> ah
    net.minecraft.core.BlockPos portalEntranceBlock -> ai
    net.minecraft.world.phys.Vec3 portalEntranceOffset -> aj
    net.minecraft.core.Direction portalEntranceForwards -> ak
    boolean invulnerable -> aD
    java.util.UUID uuid -> al
    java.lang.String stringUUID -> am
    boolean glowing -> an
    java.util.Set tags -> aE
    boolean teleported -> aF
    double[] pistonDeltas -> aG
    long pistonDeltasGameTime -> aH
    net.minecraft.world.entity.EntityDimensions dimensions -> aI
    float eyeHeight -> aJ
    124:256:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    259:263:int getTeamColor() -> P
    267:267:boolean isSpectator() -> t
    271:277:void unRide() -> Q
    280:283:void setPacketCoordinates(double,double,double) -> c
    286:286:net.minecraft.world.entity.EntityType getType() -> R
    290:290:int getId() -> S
    294:295:void setId(int) -> e
    298:298:java.util.Set getTags() -> T
    302:305:boolean addTag(java.lang.String) -> a
    309:309:boolean removeTag(java.lang.String) -> b
    313:314:void kill() -> U
    void defineSynchedData() -> w_
    319:319:net.minecraft.network.syncher.SynchedEntityData getEntityData() -> V
    324:327:boolean equals(java.lang.Object) -> equals
    332:332:int hashCode() -> hashCode
    336:350:void resetPos() -> W
    354:355:void remove() -> X
    358:358:void setDropContainerContent(boolean) -> b
    361:362:void setPose(net.minecraft.world.entity.Pose) -> b
    365:365:net.minecraft.world.entity.Pose getPose() -> Y
    369:371:void setRot(float,float) -> a
    375:379:void setPos(double,double,double) -> d
    383:384:void reapplyPosition() -> Z
    387:401:void turn(double,double) -> a
    404:408:void tick() -> h
    411:466:void baseTick() -> aa
    469:472:void processDimensionDelay() -> E
    475:475:int getPortalWaitTime() -> ab
    479:485:void lavaHurt() -> ac
    488:495:void setSecondsOnFire(int) -> f
    498:499:void setRemainingFireTicks(int) -> g
    502:502:int getRemainingFireTicks() -> ad
    506:507:void clearFire() -> ae
    510:511:void outOfWorld() -> af
    514:514:boolean isFree(double,double,double) -> e
    518:518:boolean isFree(net.minecraft.world.phys.AABB) -> b
    522:656:void move(net.minecraft.world.entity.MoverType,net.minecraft.world.phys.Vec3) -> a
    669:688:net.minecraft.core.BlockPos getOnPos() -> ag
    697:699:float getBlockJumpFactor() -> ah
    708:713:float getBlockSpeedFactor() -> ai
    724:724:net.minecraft.core.BlockPos getBlockPosBelowThatAffectsMyMovement() -> aj
    731:731:net.minecraft.world.phys.Vec3 maybeBackOffFromEdge(net.minecraft.world.phys.Vec3,net.minecraft.world.entity.MoverType) -> a
    736:759:net.minecraft.world.phys.Vec3 limitPistonMovement(net.minecraft.world.phys.Vec3) -> a
    763:767:double applyPistonMovementRestriction(net.minecraft.core.Direction$Axis,double) -> a
    771:808:net.minecraft.world.phys.Vec3 collide(net.minecraft.world.phys.Vec3) -> e
    812:812:double getHorizontalDistanceSqr(net.minecraft.world.phys.Vec3) -> b
    816:828:net.minecraft.world.phys.Vec3 collideBoundingBoxHeuristically(net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.AABB,net.minecraft.world.level.Level,net.minecraft.world.phys.shapes.CollisionContext,net.minecraft.util.RewindableStream) -> a
    833:865:net.minecraft.world.phys.Vec3 collideBoundingBoxLegacy(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.AABB,net.minecraft.util.RewindableStream) -> a
    869:901:net.minecraft.world.phys.Vec3 collideBoundingBox(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.AABB,net.minecraft.world.level.LevelReader,net.minecraft.world.phys.shapes.CollisionContext,net.minecraft.util.RewindableStream) -> a
    905:905:float nextStep() -> ak
    909:911:void setLocationFromBoundingbox() -> al
    914:914:net.minecraft.sounds.SoundEvent getSwimSound() -> am
    918:918:net.minecraft.sounds.SoundEvent getSwimSplashSound() -> an
    922:922:net.minecraft.sounds.SoundEvent getSwimHighSpeedSplashSound() -> ao
    926:955:void checkInsideBlocks() -> ap
    958:958:void onInsideBlock(net.minecraft.world.level.block.state.BlockState) -> a
    961:968:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    971:972:void playSwimSound(float) -> d
    975:975:float playFlySound(float) -> e
    979:979:boolean makeFlySound() -> aq
    983:986:void playSound(net.minecraft.sounds.SoundEvent,float,float) -> a
    989:989:boolean isSilent() -> ar
    993:994:void setSilent(boolean) -> c
    997:997:boolean isNoGravity() -> as
    1001:1002:void setNoGravity(boolean) -> d
    1005:1005:boolean isMovementNoisy() -> at
    1010:1019:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    1023:1023:net.minecraft.world.phys.AABB getCollideBox() -> au
    1027:1030:void burn(int) -> h
    1033:1033:boolean fireImmune() -> av
    1040:1045:boolean causeFallDamage(float,float) -> b
    1049:1049:boolean isInWater() -> aw
    1053:1055:boolean isInRain() -> k
    1059:1059:boolean isInBubbleColumn() -> l
    1063:1063:boolean isInWaterOrRain() -> ax
    1067:1067:boolean isInWaterRainOrBubble() -> ay
    1071:1071:boolean isInWaterOrBubble() -> az
    1075:1075:boolean isUnderWater() -> aA
    1079:1082:void updateWaterState() -> m
    1085:1090:void updateSwimming() -> aB
    1093:1105:boolean updateInWaterState() -> aC
    1109:1110:void updateUnderWaterState() -> n
    1113:1141:void doWaterSplashEffect() -> aD
    1144:1147:void updateSprintingState() -> aE
    1150:1160:void doSprintParticleEffect() -> aF
    1163:1163:boolean isUnderLiquid(net.minecraft.tags.Tag) -> a
    1167:1179:boolean isUnderLiquid(net.minecraft.tags.Tag,boolean) -> a
    1183:1184:void setInLava() -> aG
    1187:1187:boolean isInLava() -> aH
    1191:1194:void moveRelative(float,net.minecraft.world.phys.Vec3) -> a
    1197:1206:net.minecraft.world.phys.Vec3 getInputVector(net.minecraft.world.phys.Vec3,float,float) -> a
    1211:1216:float getBrightness() -> aI
    1220:1221:void setLevel(net.minecraft.world.level.Level) -> a
    1224:1238:void absMoveTo(double,double,double,float,float) -> a
    1241:1242:void moveTo(net.minecraft.core.BlockPos,float,float) -> a
    1245:1250:void moveTo(double,double,double,float,float) -> b
    1253:1260:void setPosAndOldPos(double,double,double) -> f
    1263:1266:float distanceTo(net.minecraft.world.entity.Entity) -> g
    1270:1273:double distanceToSqr(double,double,double) -> g
    1277:1277:double distanceToSqr(net.minecraft.world.entity.Entity) -> h
    1281:1284:double distanceToSqr(net.minecraft.world.phys.Vec3) -> c
    1288:1288:void playerTouch(net.minecraft.world.entity.player.Player) -> b
    1291:1328:void push(net.minecraft.world.entity.Entity) -> i
    1331:1333:void push(double,double,double) -> h
    1336:1337:void markHurt() -> aJ
    1340:1344:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    1348:1348:net.minecraft.world.phys.Vec3 getViewVector(float) -> f
    1352:1355:float getViewXRot(float) -> g
    1359:1362:float getViewYRot(float) -> h
    1368:1376:net.minecraft.world.phys.Vec3 calculateViewVector(float,float) -> c
    1380:1380:net.minecraft.world.phys.Vec3 getUpVector(float) -> i
    1384:1384:net.minecraft.world.phys.Vec3 calculateUpVector(float,float) -> d
    1388:1395:net.minecraft.world.phys.Vec3 getEyePosition(float) -> j
    1399:1402:net.minecraft.world.phys.HitResult pick(double,float,boolean) -> a
    1406:1406:boolean isPickable() -> aK
    1410:1410:boolean isPushable() -> aL
    1414:1417:void awardKillScore(net.minecraft.world.entity.Entity,int,net.minecraft.world.damagesource.DamageSource) -> a
    1420:1424:boolean shouldRender(double,double,double) -> i
    1428:1433:boolean shouldRenderAtSqrDistance(double) -> a
    1437:1443:boolean saveAsPassenger(net.minecraft.nbt.CompoundTag) -> c
    1447:1450:boolean save(net.minecraft.nbt.CompoundTag) -> d
    1455:1515:net.minecraft.nbt.CompoundTag saveWithoutId(net.minecraft.nbt.CompoundTag) -> e
    1520:1598:void load(net.minecraft.nbt.CompoundTag) -> f
    1601:1601:boolean repositionEntityAfterLoad() -> aM
    1606:1608:java.lang.String getEncodeId() -> aN
    void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    1616:1620:net.minecraft.nbt.ListTag newDoubleList(double[]) -> a
    1624:1628:net.minecraft.nbt.ListTag newFloatList(float[]) -> a
    1633:1633:net.minecraft.world.entity.item.ItemEntity spawnAtLocation(net.minecraft.world.level.ItemLike) -> a
    1638:1638:net.minecraft.world.entity.item.ItemEntity spawnAtLocation(net.minecraft.world.level.ItemLike,int) -> a
    1643:1643:net.minecraft.world.entity.item.ItemEntity spawnAtLocation(net.minecraft.world.item.ItemStack) -> a
    1648:1658:net.minecraft.world.entity.item.ItemEntity spawnAtLocation(net.minecraft.world.item.ItemStack,float) -> a
    1662:1662:boolean isAlive() -> aO
    1666:1686:boolean isInWall() -> aP
    1690:1690:boolean interact(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> b
    1695:1695:net.minecraft.world.phys.AABB getCollideAgainstBox(net.minecraft.world.entity.Entity) -> j
    1699:1706:void rideTick() -> aQ
    1709:1710:void positionRider(net.minecraft.world.entity.Entity) -> k
    1713:1717:void positionRider(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity$MoveCallback) -> a
    1720:1720:void onPassengerTurned(net.minecraft.world.entity.Entity) -> l
    1723:1723:double getRidingHeight() -> aR
    1727:1727:double getRideHeight() -> aS
    1731:1731:boolean startRiding(net.minecraft.world.entity.Entity) -> m
    1735:1735:boolean showVehicleHealth() -> aT
    1739:1759:boolean startRiding(net.minecraft.world.entity.Entity,boolean) -> a
    1763:1763:boolean canRide(net.minecraft.world.entity.Entity) -> n
    1767:1767:boolean canEnterPose(net.minecraft.world.entity.Pose) -> c
    1771:1774:void ejectPassengers() -> aU
    1777:1782:void stopRiding() -> j
    1785:1794:void addPassenger(net.minecraft.world.entity.Entity) -> o
    1797:1803:void removePassenger(net.minecraft.world.entity.Entity) -> p
    1806:1806:boolean canAddPassenger(net.minecraft.world.entity.Entity) -> q
    1810:1812:void lerpTo(double,double,double,float,float,int,boolean) -> a
    1815:1816:void lerpHeadTo(float,int) -> a
    1819:1819:float getPickRadius() -> aV
    1823:1823:net.minecraft.world.phys.Vec3 getLookAngle() -> aW
    1827:1827:net.minecraft.world.phys.Vec2 getRotationVector() -> aX
    1831:1831:net.minecraft.world.phys.Vec3 getForward() -> aY
    1835:1852:void handleInsidePortal(net.minecraft.core.BlockPos) -> c
    1855:1881:void handleNetherPortal() -> aZ
    1884:1884:int getDimensionChangingDelay() -> ba
    1888:1889:void lerpMotion(double,double,double) -> j
    1892:1897:void handleEntityEvent(byte) -> a
    1900:1900:void animateHurt() -> bb
    1903:1903:java.lang.Iterable getHandSlots() -> bc
    1907:1907:java.lang.Iterable getArmorSlots() -> bd
    1911:1911:java.lang.Iterable getAllSlots() -> be
    1915:1915:void setItemSlot(net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.ItemStack) -> a
    1919:1921:boolean isOnFire() -> bf
    1925:1925:boolean isPassenger() -> bg
    1929:1929:boolean isVehicle() -> bh
    1933:1933:boolean rideableUnderWater() -> bi
    1937:1938:void setShiftKeyDown(boolean) -> e
    1942:1942:boolean isShiftKeyDown() -> bj
    1949:1949:boolean isSteppingCarefully() -> bk
    1953:1953:boolean isSuppressingBounce() -> bl
    1960:1960:boolean isDiscrete() -> bm
    1967:1967:boolean isDescending() -> bn
    1974:1974:boolean isCrouching() -> bo
    1978:1978:boolean isSprinting() -> bp
    1982:1983:void setSprinting(boolean) -> f
    1986:1986:boolean isSwimming() -> bq
    1996:1996:boolean isVisuallySwimming() -> br
    2000:2000:boolean isVisuallyCrawling() -> bs
    2004:2005:void setSwimming(boolean) -> g
    2008:2008:boolean isGlowing() -> bt
    2012:2016:void setGlowing(boolean) -> h
    2019:2019:boolean isInvisible() -> bu
    2023:2030:boolean isInvisibleTo(net.minecraft.world.entity.player.Player) -> c
    2035:2035:net.minecraft.world.scores.Team getTeam() -> bv
    2039:2039:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> r
    2043:2046:boolean isAlliedTo(net.minecraft.world.scores.Team) -> a
    2050:2051:void setInvisible(boolean) -> i
    2054:2054:boolean getSharedFlag(int) -> i
    2058:2064:void setSharedFlag(int,boolean) -> b
    2067:2067:int getMaxAirSupply() -> bw
    2071:2071:int getAirSupply() -> bx
    2075:2076:void setAirSupply(int) -> j
    2079:2084:void thunderHit(net.minecraft.world.entity.global.LightningBolt) -> a
    2087:2095:void onAboveBubbleCol(boolean) -> j
    2098:2107:void onInsideBubbleColumn(boolean) -> k
    2110:2110:void killed(net.minecraft.world.entity.LivingEntity) -> b
    2113:2159:void checkInBlock(double,double,double) -> k
    2162:2164:void makeStuckInBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.Vec3) -> a
    2167:2168:void removeAction(net.minecraft.network.chat.Component) -> c
    2172:2178:net.minecraft.network.chat.Component getName() -> M
    2182:2182:net.minecraft.network.chat.Component getTypeName() -> by
    2187:2187:boolean is(net.minecraft.world.entity.Entity) -> s
    2191:2191:float getYHeadRot() -> bz
    2195:2195:void setYHeadRot(float) -> k
    2198:2198:void setYBodyRot(float) -> l
    2201:2201:boolean isAttackable() -> bA
    2205:2205:boolean skipAttackInteraction(net.minecraft.world.entity.Entity) -> t
    2210:2210:java.lang.String toString() -> toString
    2214:2214:boolean isInvulnerableTo(net.minecraft.world.damagesource.DamageSource) -> b
    2218:2218:boolean isInvulnerable() -> bB
    2222:2223:void setInvulnerable(boolean) -> l
    2226:2227:void copyPosition(net.minecraft.world.entity.Entity) -> u
    2230:2237:void restoreFrom(net.minecraft.world.entity.Entity) -> v
    2241:2318:net.minecraft.world.entity.Entity changeDimension(net.minecraft.world.level.dimension.DimensionType) -> a
    2322:2322:boolean canChangeDimensions() -> bC
    2326:2326:float getBlockExplosionResistance(net.minecraft.world.level.Explosion,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState,float) -> a
    2330:2330:boolean shouldBlockExplode(net.minecraft.world.level.Explosion,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,float) -> a
    2334:2334:int getMaxFallDistance() -> bD
    2338:2338:net.minecraft.core.BlockPos getPortalEntranceBlock() -> bE
    2342:2342:net.minecraft.world.phys.Vec3 getPortalEntranceOffset() -> bF
    2346:2346:net.minecraft.core.Direction getPortalEntranceForwards() -> bG
    2350:2350:boolean isIgnoringBlockTriggers() -> bH
    2354:2363:void fillCrashReportCategory(net.minecraft.CrashReportCategory) -> a
    2366:2366:boolean displayFireAnimation() -> bI
    2370:2372:void setUUID(java.util.UUID) -> a
    2375:2375:java.util.UUID getUUID() -> bJ
    2379:2379:java.lang.String getStringUUID() -> bK
    2383:2383:java.lang.String getScoreboardName() -> bL
    2387:2387:boolean isPushedByWater() -> bM
    2391:2391:double getViewScale() -> bN
    2395:2396:void setViewScale(double) -> b
    2400:2400:net.minecraft.network.chat.Component getDisplayName() -> d
    2404:2405:void setCustomName(net.minecraft.network.chat.Component) -> b
    2410:2410:net.minecraft.network.chat.Component getCustomName() -> O
    2415:2415:boolean hasCustomName() -> N
    2419:2420:void setCustomNameVisible(boolean) -> m
    2423:2423:boolean isCustomNameVisible() -> bO
    2427:2436:void teleportToWithTicket(double,double,double) -> l
    2439:2449:void teleportTo(double,double,double) -> a
    2452:2452:boolean shouldShowName() -> bP
    2456:2459:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    2462:2482:void refreshDimensions() -> z_
    2485:2485:net.minecraft.core.Direction getDirection() -> bQ
    2489:2489:net.minecraft.core.Direction getMotionDirection() -> bR
    2493:2502:net.minecraft.network.chat.HoverEvent createHoverEvent() -> bS
    2506:2506:boolean broadcastToPlayer(net.minecraft.server.level.ServerPlayer) -> a
    2510:2510:net.minecraft.world.phys.AABB getBoundingBox() -> bT
    2514:2514:net.minecraft.world.phys.AABB getBoundingBoxForCulling() -> bU
    2521:2526:net.minecraft.world.phys.AABB getBoundingBoxForPose(net.minecraft.world.entity.Pose) -> d
    2530:2531:void setBoundingBox(net.minecraft.world.phys.AABB) -> a
    2534:2534:float getEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> a
    2538:2538:float getEyeHeight(net.minecraft.world.entity.Pose) -> e
    2542:2542:float getEyeHeight() -> bV
    2546:2546:boolean setSlot(int,net.minecraft.world.item.ItemStack) -> a_
    2551:2551:void sendMessage(net.minecraft.network.chat.Component) -> a
    2554:2554:net.minecraft.core.BlockPos getCommandSenderBlockPosition() -> bW
    2558:2558:net.minecraft.world.phys.Vec3 getCommandSenderWorldPosition() -> bX
    2562:2562:net.minecraft.world.level.Level getCommandSenderWorld() -> bY
    2567:2567:net.minecraft.server.MinecraftServer getServer() -> bZ
    2571:2571:net.minecraft.world.InteractionResult interactAt(net.minecraft.world.entity.player.Player,net.minecraft.world.phys.Vec3,net.minecraft.world.InteractionHand) -> a
    2575:2575:boolean ignoreExplosion() -> ca
    2579:2583:void doEnchantDamageEffects(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.Entity) -> a
    2586:2586:void startSeenByPlayer(net.minecraft.server.level.ServerPlayer) -> b
    2589:2589:void stopSeenByPlayer(net.minecraft.server.level.ServerPlayer) -> c
    2592:2601:float rotate(net.minecraft.world.level.block.Rotation) -> a
    2606:2613:float mirror(net.minecraft.world.level.block.Mirror) -> a
    2618:2618:boolean onlyOpCanSetNbt() -> cb
    2622:2624:boolean checkAndResetTeleportedFlag() -> cc
    2629:2629:net.minecraft.world.entity.Entity getControllingPassenger() -> cd
    2633:2636:java.util.List getPassengers() -> ce
    2641:2646:boolean hasPassenger(net.minecraft.world.entity.Entity) -> w
    2650:2655:boolean hasPassenger(java.lang.Class) -> a
    2659:2664:java.util.Collection getIndirectPassengers() -> cf
    2668:2668:java.util.stream.Stream getSelfAndPassengers() -> cg
    2672:2674:boolean hasOnePlayerPassenger() -> ch
    2678:2685:void fillIndirectPassengers(boolean,java.util.Set) -> a
    2688:2692:net.minecraft.world.entity.Entity getRootVehicle() -> ci
    2696:2696:boolean isPassengerOfSameVehicle(net.minecraft.world.entity.Entity) -> x
    2700:2708:boolean hasIndirectPassenger(net.minecraft.world.entity.Entity) -> y
    2712:2715:void repositionDirectPassengers(net.minecraft.world.entity.Entity$MoveCallback) -> a
    2719:2723:boolean isControlledByLocalInstance() -> cj
    2729:2729:net.minecraft.world.entity.Entity getVehicle() -> ck
    2733:2733:net.minecraft.world.level.material.PushReaction getPistonPushReaction() -> A_
    2737:2737:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    2741:2741:int getFireImmuneTicks() -> cm
    2746:2746:net.minecraft.commands.CommandSourceStack createCommandSourceStack() -> cn
    2750:2750:int getPermissionLevel() -> y
    2754:2754:boolean hasPermissions(int) -> k
    2759:2759:boolean acceptsSuccess() -> a
    2764:2764:boolean acceptsFailure() -> b
    2769:2769:boolean shouldInformAdmins() -> I_
    2773:2784:void lookAt(net.minecraft.commands.arguments.EntityAnchorArgument$Anchor,net.minecraft.world.phys.Vec3) -> a
    2787:2844:boolean checkAndHandleWater(net.minecraft.tags.Tag) -> b
    2848:2848:double getWaterHeight() -> co
    2852:2852:float getBbWidth() -> cp
    2856:2856:float getBbHeight() -> cq
    net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    2862:2862:net.minecraft.world.entity.EntityDimensions getDimensions(net.minecraft.world.entity.Pose) -> a
    2866:2866:net.minecraft.world.phys.Vec3 position() -> cr
    2870:2870:net.minecraft.world.phys.Vec3 getDeltaMovement() -> cs
    2874:2875:void setDeltaMovement(net.minecraft.world.phys.Vec3) -> d
    2878:2879:void setDeltaMovement(double,double,double) -> m
    2882:2882:double getX() -> ct
    2886:2886:double getX(double) -> c
    2890:2890:double getRandomX(double) -> d
    2894:2894:double getY() -> cu
    2898:2898:double getY(double) -> e
    2902:2902:double getRandomY() -> cv
    2906:2906:double getEyeY() -> cw
    2910:2910:double getZ() -> cx
    2914:2914:double getZ(double) -> f
    2918:2918:double getRandomZ(double) -> g
    2922:2925:void setPosRaw(double,double,double) -> n
    2928:2928:void checkDespawn() -> cy
    2931:2932:void forceMove(double,double,double) -> b
    2445:2448:void lambda$teleportTo$6(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Entity) -> a
    2400:2400:void lambda$getDisplayName$5(net.minecraft.network.chat.Style) -> a
    2362:2362:java.lang.String lambda$fillCrashReportCategory$4() -> o
    2361:2361:java.lang.String lambda$fillCrashReportCategory$3() -> p
    2356:2356:java.lang.String lambda$fillCrashReportCategory$2() -> q
    2354:2354:java.lang.String lambda$fillCrashReportCategory$1() -> r
    2167:2167:void lambda$removeAction$0(net.minecraft.network.chat.Style) -> b
    109:203:void <clinit>() -> <clinit>
net.minecraft.world.entity.Entity$1 -> akq$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> b
    2593:2607:void <clinit>() -> <clinit>
net.minecraft.world.entity.Entity$MoveCallback -> akq$a:
    void accept(net.minecraft.world.entity.Entity,double,double,double) -> accept
net.minecraft.world.entity.EntityDimensions -> akr:
    float width -> a
    float height -> b
    boolean fixed -> c
    8:12:void <init>(float,float,boolean) -> <init>
    15:15:net.minecraft.world.entity.EntityDimensions scale(float) -> a
    19:22:net.minecraft.world.entity.EntityDimensions scale(float,float) -> a
    27:27:net.minecraft.world.entity.EntityDimensions scalable(float,float) -> b
    31:31:net.minecraft.world.entity.EntityDimensions fixed(float,float) -> c
    36:36:java.lang.String toString() -> toString
net.minecraft.world.entity.EntityEvent -> aks:
    3:3:void <init>() -> <init>
net.minecraft.world.entity.EntitySelector -> akt:
    java.util.function.Predicate ENTITY_STILL_ALIVE -> a
    java.util.function.Predicate LIVING_ENTITY_STILL_ALIVE -> b
    java.util.function.Predicate ENTITY_NOT_BEING_RIDDEN -> c
    java.util.function.Predicate CONTAINER_ENTITY_SELECTOR -> d
    java.util.function.Predicate NO_CREATIVE_OR_SPECTATOR -> e
    java.util.function.Predicate NO_SPECTATORS -> f
    13:14:void <init>() -> <init>
    44:45:java.util.function.Predicate withinDistance(double,double,double,double) -> a
    49:54:java.util.function.Predicate pushableBy(net.minecraft.world.entity.Entity) -> a
    78:78:java.util.function.Predicate notRiding(net.minecraft.world.entity.Entity) -> b
    79:85:boolean lambda$notRiding$6(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> a
    55:73:boolean lambda$pushableBy$5(net.minecraft.world.entity.Entity,net.minecraft.world.scores.Team,net.minecraft.world.scores.Team$CollisionRule,net.minecraft.world.entity.Entity) -> a
    45:45:boolean lambda$withinDistance$4(double,double,double,double,net.minecraft.world.entity.Entity) -> a
    21:21:boolean lambda$static$3(net.minecraft.world.entity.Entity) -> c
    20:20:boolean lambda$static$2(net.minecraft.world.entity.Entity) -> d
    19:19:boolean lambda$static$1(net.minecraft.world.entity.Entity) -> e
    18:18:boolean lambda$static$0(net.minecraft.world.entity.Entity) -> f
    16:21:void <clinit>() -> <clinit>
net.minecraft.world.entity.EntitySelector$MobCanWearArmourEntitySelector -> akt$a:
    net.minecraft.world.item.ItemStack itemStack -> a
    26:28:void <init>(net.minecraft.world.item.ItemStack) -> <init>
    32:39:boolean test(net.minecraft.world.entity.Entity) -> a
    23:23:boolean test(java.lang.Object) -> test
net.minecraft.world.entity.EntityType -> aku:
    org.apache.logging.log4j.Logger LOGGER -> aZ
    net.minecraft.world.entity.EntityType AREA_EFFECT_CLOUD -> a
    net.minecraft.world.entity.EntityType ARMOR_STAND -> b
    net.minecraft.world.entity.EntityType ARROW -> c
    net.minecraft.world.entity.EntityType BAT -> d
    net.minecraft.world.entity.EntityType BEE -> e
    net.minecraft.world.entity.EntityType BLAZE -> f
    net.minecraft.world.entity.EntityType BOAT -> g
    net.minecraft.world.entity.EntityType CAT -> h
    net.minecraft.world.entity.EntityType CAVE_SPIDER -> i
    net.minecraft.world.entity.EntityType CHICKEN -> j
    net.minecraft.world.entity.EntityType COD -> k
    net.minecraft.world.entity.EntityType COW -> l
    net.minecraft.world.entity.EntityType CREEPER -> m
    net.minecraft.world.entity.EntityType DONKEY -> n
    net.minecraft.world.entity.EntityType DOLPHIN -> o
    net.minecraft.world.entity.EntityType DRAGON_FIREBALL -> p
    net.minecraft.world.entity.EntityType DROWNED -> q
    net.minecraft.world.entity.EntityType ELDER_GUARDIAN -> r
    net.minecraft.world.entity.EntityType END_CRYSTAL -> s
    net.minecraft.world.entity.EntityType ENDER_DRAGON -> t
    net.minecraft.world.entity.EntityType ENDERMAN -> u
    net.minecraft.world.entity.EntityType ENDERMITE -> v
    net.minecraft.world.entity.EntityType EVOKER_FANGS -> w
    net.minecraft.world.entity.EntityType EVOKER -> x
    net.minecraft.world.entity.EntityType EXPERIENCE_ORB -> y
    net.minecraft.world.entity.EntityType EYE_OF_ENDER -> z
    net.minecraft.world.entity.EntityType FALLING_BLOCK -> A
    net.minecraft.world.entity.EntityType FIREWORK_ROCKET -> B
    net.minecraft.world.entity.EntityType FOX -> C
    net.minecraft.world.entity.EntityType GHAST -> D
    net.minecraft.world.entity.EntityType GIANT -> E
    net.minecraft.world.entity.EntityType GUARDIAN -> F
    net.minecraft.world.entity.EntityType HORSE -> G
    net.minecraft.world.entity.EntityType HUSK -> H
    net.minecraft.world.entity.EntityType ILLUSIONER -> I
    net.minecraft.world.entity.EntityType ITEM -> J
    net.minecraft.world.entity.EntityType ITEM_FRAME -> K
    net.minecraft.world.entity.EntityType FIREBALL -> L
    net.minecraft.world.entity.EntityType LEASH_KNOT -> M
    net.minecraft.world.entity.EntityType LLAMA -> N
    net.minecraft.world.entity.EntityType LLAMA_SPIT -> O
    net.minecraft.world.entity.EntityType MAGMA_CUBE -> P
    net.minecraft.world.entity.EntityType MINECART -> Q
    net.minecraft.world.entity.EntityType CHEST_MINECART -> R
    net.minecraft.world.entity.EntityType COMMAND_BLOCK_MINECART -> S
    net.minecraft.world.entity.EntityType FURNACE_MINECART -> T
    net.minecraft.world.entity.EntityType HOPPER_MINECART -> U
    net.minecraft.world.entity.EntityType SPAWNER_MINECART -> V
    net.minecraft.world.entity.EntityType TNT_MINECART -> W
    net.minecraft.world.entity.EntityType MULE -> X
    net.minecraft.world.entity.EntityType MOOSHROOM -> Y
    net.minecraft.world.entity.EntityType OCELOT -> Z
    net.minecraft.world.entity.EntityType PAINTING -> aa
    net.minecraft.world.entity.EntityType PANDA -> ab
    net.minecraft.world.entity.EntityType PARROT -> ac
    net.minecraft.world.entity.EntityType PIG -> ad
    net.minecraft.world.entity.EntityType PUFFERFISH -> ae
    net.minecraft.world.entity.EntityType ZOMBIE_PIGMAN -> af
    net.minecraft.world.entity.EntityType POLAR_BEAR -> ag
    net.minecraft.world.entity.EntityType TNT -> ah
    net.minecraft.world.entity.EntityType RABBIT -> ai
    net.minecraft.world.entity.EntityType SALMON -> aj
    net.minecraft.world.entity.EntityType SHEEP -> ak
    net.minecraft.world.entity.EntityType SHULKER -> al
    net.minecraft.world.entity.EntityType SHULKER_BULLET -> am
    net.minecraft.world.entity.EntityType SILVERFISH -> an
    net.minecraft.world.entity.EntityType SKELETON -> ao
    net.minecraft.world.entity.EntityType SKELETON_HORSE -> ap
    net.minecraft.world.entity.EntityType SLIME -> aq
    net.minecraft.world.entity.EntityType SMALL_FIREBALL -> ar
    net.minecraft.world.entity.EntityType SNOW_GOLEM -> as
    net.minecraft.world.entity.EntityType SNOWBALL -> at
    net.minecraft.world.entity.EntityType SPECTRAL_ARROW -> au
    net.minecraft.world.entity.EntityType SPIDER -> av
    net.minecraft.world.entity.EntityType SQUID -> aw
    net.minecraft.world.entity.EntityType STRAY -> ax
    net.minecraft.world.entity.EntityType TRADER_LLAMA -> ay
    net.minecraft.world.entity.EntityType TROPICAL_FISH -> az
    net.minecraft.world.entity.EntityType TURTLE -> aA
    net.minecraft.world.entity.EntityType EGG -> aB
    net.minecraft.world.entity.EntityType ENDER_PEARL -> aC
    net.minecraft.world.entity.EntityType EXPERIENCE_BOTTLE -> aD
    net.minecraft.world.entity.EntityType POTION -> aE
    net.minecraft.world.entity.EntityType TRIDENT -> aF
    net.minecraft.world.entity.EntityType VEX -> aG
    net.minecraft.world.entity.EntityType VILLAGER -> aH
    net.minecraft.world.entity.EntityType IRON_GOLEM -> aI
    net.minecraft.world.entity.EntityType VINDICATOR -> aJ
    net.minecraft.world.entity.EntityType PILLAGER -> aK
    net.minecraft.world.entity.EntityType WANDERING_TRADER -> aL
    net.minecraft.world.entity.EntityType WITCH -> aM
    net.minecraft.world.entity.EntityType WITHER -> aN
    net.minecraft.world.entity.EntityType WITHER_SKELETON -> aO
    net.minecraft.world.entity.EntityType WITHER_SKULL -> aP
    net.minecraft.world.entity.EntityType WOLF -> aQ
    net.minecraft.world.entity.EntityType ZOMBIE -> aR
    net.minecraft.world.entity.EntityType ZOMBIE_HORSE -> aS
    net.minecraft.world.entity.EntityType ZOMBIE_VILLAGER -> aT
    net.minecraft.world.entity.EntityType PHANTOM -> aU
    net.minecraft.world.entity.EntityType RAVAGER -> aV
    net.minecraft.world.entity.EntityType LIGHTNING_BOLT -> aW
    net.minecraft.world.entity.EntityType PLAYER -> aX
    net.minecraft.world.entity.EntityType FISHING_BOBBER -> aY
    net.minecraft.world.entity.EntityType$EntityFactory factory -> ba
    net.minecraft.world.entity.MobCategory category -> bb
    boolean serialize -> bc
    boolean summon -> bd
    boolean fireImmune -> be
    boolean canSpawnFarFromPlayer -> bf
    java.lang.String descriptionId -> bg
    net.minecraft.network.chat.Component description -> bh
    net.minecraft.resources.ResourceLocation lootTable -> bi
    net.minecraft.world.entity.EntityDimensions dimensions -> bj
    141:141:net.minecraft.world.entity.EntityType register(java.lang.String,net.minecraft.world.entity.EntityType$Builder) -> a
    253:253:net.minecraft.resources.ResourceLocation getKey(net.minecraft.world.entity.EntityType) -> a
    257:257:java.util.Optional byString(java.lang.String) -> a
    274:282:void <init>(net.minecraft.world.entity.EntityType$EntityFactory,net.minecraft.world.entity.MobCategory,boolean,boolean,boolean,boolean,net.minecraft.world.entity.EntityDimensions) -> <init>
    286:289:net.minecraft.world.entity.Entity spawn(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.entity.MobSpawnType,boolean,boolean) -> a
    295:297:net.minecraft.world.entity.Entity spawn(net.minecraft.world.level.Level,net.minecraft.nbt.CompoundTag,net.minecraft.network.chat.Component,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.entity.MobSpawnType,boolean,boolean) -> a
    305:339:net.minecraft.world.entity.Entity create(net.minecraft.world.level.Level,net.minecraft.nbt.CompoundTag,net.minecraft.network.chat.Component,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.entity.MobSpawnType,boolean,boolean) -> b
    343:349:double getYOffset(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,boolean,net.minecraft.world.phys.AABB) -> a
    353:371:void updateCustomEntityTag(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.entity.Entity,net.minecraft.nbt.CompoundTag) -> a
    374:374:boolean canSerialize() -> a
    378:378:boolean canSummon() -> b
    382:382:boolean fireImmune() -> c
    386:386:boolean canSpawnFarFromPlayer() -> d
    390:390:net.minecraft.world.entity.MobCategory getCategory() -> e
    394:397:java.lang.String getDescriptionId() -> f
    401:404:net.minecraft.network.chat.Component getDescription() -> g
    408:413:net.minecraft.resources.ResourceLocation getDefaultLootTable() -> h
    417:417:float getWidth() -> i
    421:421:float getHeight() -> j
    426:426:net.minecraft.world.entity.Entity create(net.minecraft.world.level.Level) -> a
    431:431:net.minecraft.world.entity.Entity create(int,net.minecraft.world.level.Level) -> a
    435:435:java.util.Optional create(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.Level) -> a
    444:444:net.minecraft.world.entity.Entity create(net.minecraft.world.level.Level,net.minecraft.world.entity.EntityType) -> a
    448:454:net.minecraft.world.phys.AABB getAABB(double,double,double) -> a
    460:460:net.minecraft.world.entity.EntityDimensions getDimensions() -> k
    464:464:java.util.Optional by(net.minecraft.nbt.CompoundTag) -> a
    469:483:net.minecraft.world.entity.Entity loadEntityRecursive(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.Level,java.util.function.Function) -> a
    488:491:java.util.Optional loadStaticEntity(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.Level) -> b
    497:540:int chunkRange() -> l
    545:592:int updateInterval() -> m
    597:597:boolean trackDeltas() -> n
    610:610:boolean is(net.minecraft.tags.Tag) -> a
    472:482:net.minecraft.world.entity.Entity lambda$loadEntityRecursive$3(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.Level,java.util.function.Function,net.minecraft.world.entity.Entity) -> a
    437:437:void lambda$create$2(net.minecraft.nbt.CompoundTag) -> b
    436:436:void lambda$create$1(net.minecraft.nbt.CompoundTag,net.minecraft.world.entity.Entity) -> a
    435:435:net.minecraft.world.entity.Entity lambda$create$0(net.minecraft.world.level.Level,net.minecraft.world.entity.EntityType) -> b
    136:136:org.apache.logging.log4j.Logger access$000() -> o
    137:250:void <clinit>() -> <clinit>
net.minecraft.world.entity.EntityType$Builder -> aku$a:
    net.minecraft.world.entity.EntityType$EntityFactory factory -> a
    net.minecraft.world.entity.MobCategory category -> b
    boolean serialize -> c
    boolean summon -> d
    boolean fireImmune -> e
    boolean canSpawnFarFromPlayer -> f
    net.minecraft.world.entity.EntityDimensions dimensions -> g
    616:626:void <init>(net.minecraft.world.entity.EntityType$EntityFactory,net.minecraft.world.entity.MobCategory) -> <init>
    629:629:net.minecraft.world.entity.EntityType$Builder of(net.minecraft.world.entity.EntityType$EntityFactory,net.minecraft.world.entity.MobCategory) -> a
    633:633:net.minecraft.world.entity.EntityType$Builder createNothing(net.minecraft.world.entity.MobCategory) -> a
    637:638:net.minecraft.world.entity.EntityType$Builder sized(float,float) -> a
    642:643:net.minecraft.world.entity.EntityType$Builder noSummon() -> a
    647:648:net.minecraft.world.entity.EntityType$Builder noSave() -> b
    652:653:net.minecraft.world.entity.EntityType$Builder fireImmune() -> c
    657:658:net.minecraft.world.entity.EntityType$Builder canSpawnFarFromPlayer() -> d
    662:673:net.minecraft.world.entity.EntityType build(java.lang.String) -> a
    633:633:net.minecraft.world.entity.Entity lambda$createNothing$0(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> a
net.minecraft.world.entity.EntityType$EntityFactory -> aku$b:
    net.minecraft.world.entity.Entity create(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> create
net.minecraft.world.entity.EquipmentSlot -> akv:
    net.minecraft.world.entity.EquipmentSlot MAINHAND -> a
    net.minecraft.world.entity.EquipmentSlot OFFHAND -> b
    net.minecraft.world.entity.EquipmentSlot FEET -> c
    net.minecraft.world.entity.EquipmentSlot LEGS -> d
    net.minecraft.world.entity.EquipmentSlot CHEST -> e
    net.minecraft.world.entity.EquipmentSlot HEAD -> f
    net.minecraft.world.entity.EquipmentSlot$Type type -> g
    int index -> h
    int filterFlag -> i
    java.lang.String name -> j
    net.minecraft.world.entity.EquipmentSlot[] $VALUES -> k
    3:3:net.minecraft.world.entity.EquipmentSlot[] values() -> values
    3:3:net.minecraft.world.entity.EquipmentSlot valueOf(java.lang.String) -> valueOf
    16:21:void <init>(java.lang.String,int,net.minecraft.world.entity.EquipmentSlot$Type,int,int,java.lang.String) -> <init>
    24:24:net.minecraft.world.entity.EquipmentSlot$Type getType() -> a
    28:28:int getIndex() -> b
    32:32:int getFilterFlag() -> c
    36:36:java.lang.String getName() -> d
    45:51:net.minecraft.world.entity.EquipmentSlot byName(java.lang.String) -> a
    55:61:net.minecraft.world.entity.EquipmentSlot byTypeAndIndex(net.minecraft.world.entity.EquipmentSlot$Type,int) -> a
    3:9:void <clinit>() -> <clinit>
net.minecraft.world.entity.EquipmentSlot$Type -> akv$a:
    net.minecraft.world.entity.EquipmentSlot$Type HAND -> a
    net.minecraft.world.entity.EquipmentSlot$Type ARMOR -> b
    net.minecraft.world.entity.EquipmentSlot$Type[] $VALUES -> c
    39:39:net.minecraft.world.entity.EquipmentSlot$Type[] values() -> values
    39:39:net.minecraft.world.entity.EquipmentSlot$Type valueOf(java.lang.String) -> valueOf
    39:39:void <init>(java.lang.String,int) -> <init>
    39:41:void <clinit>() -> <clinit>
net.minecraft.world.entity.ExperienceOrb -> akw:
    int tickCount -> b
    int age -> c
    int throwTime -> d
    int health -> e
    int value -> f
    net.minecraft.world.entity.player.Player followingPlayer -> g
    int followingTime -> ao
    33:45:void <init>(net.minecraft.world.level.Level,double,double,double,int) -> <init>
    27:49:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    53:53:boolean isMovementNoisy() -> at
    58:58:void defineSynchedData() -> w_
    62:135:void tick() -> h
    139:146:void setUnderwaterMovement() -> k
    150:150:void doWaterSplashEffect() -> aD
    154:155:void burn(int) -> h
    159:167:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    172:175:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    179:182:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    186:207:void playerTouch(net.minecraft.world.entity.player.Player) -> b
    210:210:int durabilityToXp(int) -> b
    214:214:int xpToDurability(int) -> c
    218:218:int getValue() -> f
    222:244:int getIcon() -> i
    256:278:int getExperienceValue(int) -> a
    283:283:boolean isAttackable() -> bA
    288:288:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
net.minecraft.world.entity.FlyingMob -> akx:
    11:12:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    16:16:boolean causeFallDamage(float,float) -> b
    23:23:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    27:63:void travel(net.minecraft.world.phys.Vec3) -> e
    67:67:boolean onLadder() -> y_
net.minecraft.world.entity.HumanoidArm -> aky:
    net.minecraft.world.entity.HumanoidArm LEFT -> a
    net.minecraft.world.entity.HumanoidArm RIGHT -> b
    net.minecraft.network.chat.Component name -> c
    net.minecraft.world.entity.HumanoidArm[] $VALUES -> d
    6:6:net.minecraft.world.entity.HumanoidArm[] values() -> values
    6:6:net.minecraft.world.entity.HumanoidArm valueOf(java.lang.String) -> valueOf
    13:15:void <init>(java.lang.String,int,net.minecraft.network.chat.Component) -> <init>
    18:21:net.minecraft.world.entity.HumanoidArm getOpposite() -> a
    26:26:java.lang.String toString() -> toString
    6:8:void <clinit>() -> <clinit>
net.minecraft.world.entity.LivingEntity -> akz:
    java.util.UUID SPEED_MODIFIER_SPRINTING_UUID -> b
    net.minecraft.world.entity.ai.attributes.AttributeModifier SPEED_MODIFIER_SPRINTING -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_LIVING_ENTITY_FLAGS -> ao
    net.minecraft.network.syncher.EntityDataAccessor DATA_HEALTH_ID -> d
    net.minecraft.network.syncher.EntityDataAccessor DATA_EFFECT_COLOR_ID -> e
    net.minecraft.network.syncher.EntityDataAccessor DATA_EFFECT_AMBIENCE_ID -> f
    net.minecraft.network.syncher.EntityDataAccessor DATA_ARROW_COUNT_ID -> g
    net.minecraft.network.syncher.EntityDataAccessor DATA_STINGER_COUNT_ID -> bp
    net.minecraft.network.syncher.EntityDataAccessor SLEEPING_POS_ID -> bq
    net.minecraft.world.entity.EntityDimensions SLEEPING_DIMENSIONS -> ap
    net.minecraft.world.entity.ai.attributes.BaseAttributeMap attributes -> br
    net.minecraft.world.damagesource.CombatTracker combatTracker -> bs
    java.util.Map activeEffects -> bt
    net.minecraft.core.NonNullList lastHandItemStacks -> bu
    net.minecraft.core.NonNullList lastArmorItemStacks -> bv
    boolean swinging -> aq
    net.minecraft.world.InteractionHand swingingArm -> ar
    int swingTime -> as
    int removeArrowTime -> at
    int removeStingerTime -> au
    int hurtTime -> av
    int hurtDuration -> aw
    float hurtDir -> ax
    int deathTime -> ay
    float oAttackAnim -> az
    float attackAnim -> aA
    int attackStrengthTicker -> aB
    float animationSpeedOld -> aC
    float animationSpeed -> aD
    float animationPosition -> aE
    int invulnerableDuration -> aF
    float timeOffs -> aG
    float rotA -> aH
    float yBodyRot -> aI
    float yBodyRotO -> aJ
    float yHeadRot -> aK
    float yHeadRotO -> aL
    float flyingSpeed -> aM
    net.minecraft.world.entity.player.Player lastHurtByPlayer -> aN
    int lastHurtByPlayerTime -> aO
    boolean dead -> aP
    int noActionTime -> aQ
    float oRun -> aR
    float run -> aS
    float animStep -> aT
    float animStepO -> aU
    float rotOffs -> aV
    int deathScore -> aW
    float lastHurt -> aX
    boolean jumping -> aY
    float xxa -> aZ
    float yya -> ba
    float zza -> bb
    int lerpSteps -> bc
    double lerpX -> bd
    double lerpY -> be
    double lerpZ -> bf
    double lerpYRot -> bg
    double lerpXRot -> bh
    double lyHeadRot -> bi
    int lerpHeadSteps -> bj
    boolean effectsDirty -> bw
    net.minecraft.world.entity.LivingEntity lastHurtByMob -> bx
    int lastHurtByMobTimestamp -> by
    net.minecraft.world.entity.LivingEntity lastHurtMob -> bz
    int lastHurtMobTimestamp -> bA
    float speed -> bB
    int noJumpDelay -> bC
    float absorptionAmount -> bD
    net.minecraft.world.item.ItemStack useItem -> bk
    int useItemRemaining -> bl
    int fallFlyTicks -> bm
    net.minecraft.core.BlockPos lastPos -> bE
    net.minecraft.world.damagesource.DamageSource lastDamageSource -> bF
    long lastDamageStamp -> bG
    int autoSpinAttackTicks -> bn
    float swimAmount -> bH
    float swimAmountO -> bI
    net.minecraft.world.entity.ai.Brain brain -> bo
    139:224:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    227:227:net.minecraft.world.entity.ai.Brain getBrain() -> cz
    231:231:net.minecraft.world.entity.ai.Brain makeBrain(com.mojang.datafixers.Dynamic) -> a
    236:237:void kill() -> U
    240:240:boolean canAttackType(net.minecraft.world.entity.EntityType) -> a
    245:252:void defineSynchedData() -> w_
    255:260:void registerAttributes() -> cA
    264:279:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    282:282:boolean canBreatheUnderwater() -> cB
    286:286:float getSwimAmount(float) -> a
    291:395:void baseTick() -> aa
    398:402:void onChangedBlock(net.minecraft.core.BlockPos) -> b
    405:405:boolean isBaby() -> x_
    409:409:float getScale() -> cC
    414:414:boolean rideableUnderWater() -> bi
    418:428:void tickDeath() -> cD
    431:431:boolean shouldDropExperience() -> cE
    435:442:int decreaseAirSupply(int) -> l
    446:446:int increaseAirSupply(int) -> m
    450:450:int getExperienceReward(net.minecraft.world.entity.player.Player) -> d
    454:454:boolean isAlwaysExperienceDropper() -> cF
    458:458:java.util.Random getRandom() -> cG
    463:463:net.minecraft.world.entity.LivingEntity getLastHurtByMob() -> cH
    467:467:int getLastHurtByMobTimestamp() -> cI
    471:473:void setLastHurtByMob(net.minecraft.world.entity.LivingEntity) -> a
    477:477:net.minecraft.world.entity.LivingEntity getLastHurtMob() -> cJ
    481:481:int getLastHurtMobTimestamp() -> cK
    485:491:void setLastHurtMob(net.minecraft.world.entity.Entity) -> z
    494:494:int getNoActionTime() -> cL
    498:499:void setNoActionTime(int) -> n
    502:515:void playEquipSound(net.minecraft.world.item.ItemStack) -> b
    519:545:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    549:605:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    608:660:void tickEffects() -> cM
    663:672:void updateInvisibilityStatus() -> C
    675:700:double getVisibilityPercent(net.minecraft.world.entity.Entity) -> A
    704:704:boolean canAttack(net.minecraft.world.entity.LivingEntity) -> c
    708:708:boolean canAttack(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.targeting.TargetingConditions) -> a
    712:718:boolean areAllEffectsAmbient(java.util.Collection) -> c
    722:724:void removeEffectParticles() -> cN
    727:738:boolean removeAllEffects() -> cO
    742:742:java.util.Collection getActiveEffects() -> cP
    746:746:java.util.Map getActiveEffectsMap() -> cQ
    750:750:boolean hasEffect(net.minecraft.world.effect.MobEffect) -> a
    755:755:net.minecraft.world.effect.MobEffectInstance getEffect(net.minecraft.world.effect.MobEffect) -> b
    759:776:boolean addEffect(net.minecraft.world.effect.MobEffectInstance) -> c
    780:787:boolean canBeAffected(net.minecraft.world.effect.MobEffectInstance) -> d
    791:791:boolean isInvertedHealAndHarm() -> cR
    796:796:net.minecraft.world.effect.MobEffectInstance removeEffectNoUpdate(net.minecraft.world.effect.MobEffect) -> c
    800:805:boolean removeEffect(net.minecraft.world.effect.MobEffect) -> d
    809:813:void onEffectAdded(net.minecraft.world.effect.MobEffectInstance) -> a
    816:822:void onEffectUpdated(net.minecraft.world.effect.MobEffectInstance,boolean) -> a
    825:829:void onEffectRemoved(net.minecraft.world.effect.MobEffectInstance) -> b
    832:836:void heal(float) -> b
    839:839:float getHealth() -> cS
    843:844:void setHealth(float) -> c
    848:1000:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    1004:1005:void blockUsingShield(net.minecraft.world.entity.LivingEntity) -> d
    1008:1009:void blockedByShield(net.minecraft.world.entity.LivingEntity) -> e
    1012:1040:boolean checkTotemDeathProtection(net.minecraft.world.damagesource.DamageSource) -> f
    1045:1048:net.minecraft.world.damagesource.DamageSource getLastDamageSource() -> cT
    1052:1056:void playHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    1059:1081:boolean isDamageSourceBlocked(net.minecraft.world.damagesource.DamageSource) -> g
    1085:1091:void breakItem(net.minecraft.world.item.ItemStack) -> g
    1094:1122:void die(net.minecraft.world.damagesource.DamageSource) -> a
    1125:1145:void createWitherRose(net.minecraft.world.entity.LivingEntity) -> f
    1148:1165:void dropAllDeathLoot(net.minecraft.world.damagesource.DamageSource) -> d
    1168:1168:void dropEquipment() -> cU
    1171:1179:void dropExperience() -> cV
    1182:1182:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    1185:1185:net.minecraft.resources.ResourceLocation getLootTable() -> cW
    1189:1195:void dropFromLootTable(net.minecraft.world.damagesource.DamageSource,boolean) -> a
    1198:1209:net.minecraft.world.level.storage.loot.LootContext$Builder createLootContext(boolean,net.minecraft.world.damagesource.DamageSource) -> a
    1213:1228:void knockback(net.minecraft.world.entity.Entity,float,double,double) -> a
    1232:1232:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    1237:1237:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    1241:1244:net.minecraft.sounds.SoundEvent getFallDamageSound(int) -> o
    1249:1249:net.minecraft.sounds.SoundEvent getDrinkingSound(net.minecraft.world.item.ItemStack) -> c
    1253:1253:net.minecraft.sounds.SoundEvent getEatingSound(net.minecraft.world.item.ItemStack) -> d
    1257:1267:boolean onLadder() -> y_
    1271:1271:net.minecraft.world.level.block.state.BlockState getFeetBlockState() -> cY
    1275:1281:boolean trapdoorUsableAsLadder(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    1286:1286:boolean isAlive() -> aO
    1291:1300:boolean causeFallDamage(float,float) -> b
    1304:1306:int calculateFallDamage(float,float) -> e
    1310:1322:void playBlockFallSound() -> cZ
    1326:1329:void animateHurt() -> bb
    1337:1338:int getArmorValue() -> da
    1342:1342:void hurtArmor(float) -> m
    1345:1345:void hurtCurrentlyUsedShield(float) -> n
    1348:1352:float getDamageAfterArmorAbsorb(net.minecraft.world.damagesource.DamageSource,float) -> b
    1356:1386:float getDamageAfterMagicAbsorb(net.minecraft.world.damagesource.DamageSource,float) -> c
    1390:1413:void actuallyHurt(net.minecraft.world.damagesource.DamageSource,float) -> d
    1416:1416:net.minecraft.world.damagesource.CombatTracker getCombatTracker() -> db
    1421:1430:net.minecraft.world.entity.LivingEntity getKillCredit() -> dc
    1434:1434:float getMaxHealth() -> dd
    1438:1438:int getArrowCount() -> de
    1442:1443:void setArrowCount(int) -> p
    1446:1446:int getStingerCount() -> df
    1450:1451:void setStingerCount(int) -> q
    1454:1460:int getCurrentSwingDuration() -> l
    1464:1465:void swing(net.minecraft.world.InteractionHand) -> a
    1468:1484:void swing(net.minecraft.world.InteractionHand,boolean) -> a
    1488:1586:void handleEntityEvent(byte) -> a
    1590:1591:void outOfWorld() -> af
    1594:1606:void updateSwingTime() -> dg
    1609:1609:net.minecraft.world.entity.ai.attributes.AttributeInstance getAttribute(net.minecraft.world.entity.ai.attributes.Attribute) -> a
    1613:1617:net.minecraft.world.entity.ai.attributes.BaseAttributeMap getAttributes() -> dh
    1621:1621:net.minecraft.world.entity.MobType getMobType() -> di
    1625:1625:net.minecraft.world.item.ItemStack getMainHandItem() -> dj
    1629:1629:net.minecraft.world.item.ItemStack getOffhandItem() -> dk
    java.lang.Iterable getHandSlots() -> bc
    1636:1641:net.minecraft.world.item.ItemStack getItemInHand(net.minecraft.world.InteractionHand) -> b
    1646:1653:void setItemInHand(net.minecraft.world.InteractionHand,net.minecraft.world.item.ItemStack) -> a
    1656:1656:boolean hasItemInSlot(net.minecraft.world.entity.EquipmentSlot) -> a
    java.lang.Iterable getArmorSlots() -> bd
    net.minecraft.world.item.ItemStack getItemBySlot(net.minecraft.world.entity.EquipmentSlot) -> b
    void setItemSlot(net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.ItemStack) -> a
    1668:1678:float getArmorCoverPercentage() -> dl
    1683:1692:void setSprinting(boolean) -> f
    1695:1695:float getSoundVolume() -> dm
    1699:1702:float getVoicePitch() -> dn
    1706:1706:boolean isImmobile() -> do
    1711:1714:void push(net.minecraft.world.entity.Entity) -> i
    1717:1818:void findStandUpPosition(net.minecraft.world.entity.Entity) -> a
    1822:1822:boolean shouldShowName() -> bP
    1826:1826:float getJumpPower() -> dp
    1830:1849:void jumpFromGround() -> dq
    1852:1853:void goDownInWater() -> dr
    1856:1857:void jumpInLiquid(net.minecraft.tags.Tag) -> c
    1860:1860:float getWaterSlowDown() -> ds
    1864:2054:void travel(net.minecraft.world.phys.Vec3) -> e
    2057:2071:net.minecraft.world.phys.Vec3 handleOnClimbable(net.minecraft.world.phys.Vec3) -> f
    2075:2078:float getFrictionInfluencedSpeed(float) -> r
    2083:2083:float getSpeed() -> dt
    2087:2088:void setSpeed(float) -> o
    2091:2092:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    2097:2252:void tick() -> h
    2255:2275:float tickHeadTurn(float,float) -> f
    2279:2370:void aiStep() -> k
    2373:2391:void updateFallFlying() -> n
    2394:2394:void serverAiStep() -> du
    2397:2417:void pushEntities() -> dv
    2420:2438:void checkAutoSpinAttack(net.minecraft.world.phys.AABB,net.minecraft.world.phys.AABB) -> a
    2441:2442:void doPush(net.minecraft.world.entity.Entity) -> C
    2445:2445:void doAutoAttackOnTouch(net.minecraft.world.entity.LivingEntity) -> g
    2448:2452:void startAutoSpinAttack(int) -> r
    2455:2455:boolean isAutoSpinAttack() -> dw
    2460:2465:void stopRiding() -> j
    2469:2473:void rideTick() -> aQ
    2477:2484:void lerpTo(double,double,double,float,float,int,boolean) -> a
    2488:2491:void lerpHeadTo(float,int) -> a
    2494:2495:void setJumping(boolean) -> a_
    2498:2503:void take(net.minecraft.world.entity.Entity,int) -> a
    2506:2508:boolean canSee(net.minecraft.world.entity.Entity) -> D
    2513:2516:float getViewYRot(float) -> h
    2520:2524:float getAttackAnim(float) -> p
    2528:2528:boolean isEffectiveAi() -> dx
    2533:2533:boolean isPickable() -> aK
    2538:2538:boolean isPushable() -> aL
    2543:2544:void markHurt() -> aJ
    2548:2548:float getYHeadRot() -> bz
    2553:2554:void setYHeadRot(float) -> k
    2558:2559:void setYBodyRot(float) -> l
    2562:2562:float getAbsorptionAmount() -> dy
    2566:2570:void setAbsorptionAmount(float) -> q
    2573:2573:void onEnterCombat() -> e
    2576:2576:void onLeaveCombat() -> f
    2579:2580:void updateEffectVisibility() -> dz
    net.minecraft.world.entity.HumanoidArm getMainArm() -> dA
    2585:2585:boolean isUsingItem() -> dB
    2589:2589:net.minecraft.world.InteractionHand getUsedItemHand() -> dC
    2593:2607:void updatingUsingItem() -> o
    2610:2615:boolean shouldTriggerItemUseEffects() -> p
    2619:2625:void updateSwimAmount() -> r
    2628:2635:void setLivingEntityFlag(int,boolean) -> c
    2638:2650:void startUsingItem(net.minecraft.world.InteractionHand) -> c
    2654:2672:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    2676:2680:void lookAt(net.minecraft.commands.arguments.EntityAnchorArgument$Anchor,net.minecraft.world.phys.Vec3) -> a
    2683:2695:void triggerItemUseEffects(net.minecraft.world.item.ItemStack,int) -> b
    2698:2710:void spawnItemParticles(net.minecraft.world.item.ItemStack,int) -> a
    2713:2724:void completeUsingItem() -> q
    2727:2727:net.minecraft.world.item.ItemStack getUseItem() -> dD
    2731:2731:int getUseItemRemainingTicks() -> dE
    2735:2738:int getTicksUsingItem() -> dF
    2742:2749:void releaseUsingItem() -> dG
    2752:2757:void stopUsingItem() -> dH
    2760:2770:boolean isBlocking() -> dI
    2774:2774:boolean isSuppressingSlidingDownLadder() -> dJ
    2778:2778:boolean isFallFlying() -> dK
    2785:2785:boolean isVisuallySwimming() -> br
    2789:2789:int getFallFlyingTicks() -> dL
    2793:2835:boolean randomTeleport(double,double,double,boolean) -> a
    2839:2839:boolean isAffectedByPotions() -> dM
    2843:2843:boolean attackable() -> dN
    2847:2847:void setRecordPlayingNearby(net.minecraft.core.BlockPos,boolean) -> a
    2850:2850:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> e
    2855:2855:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    2860:2860:net.minecraft.world.entity.EntityDimensions getDimensions(net.minecraft.world.entity.Pose) -> a
    2864:2864:java.util.Optional getSleepingPos() -> dO
    2868:2869:void setSleepingPos(net.minecraft.core.BlockPos) -> d
    2872:2873:void clearSleepingPos() -> dP
    2876:2876:boolean isSleeping() -> dQ
    2880:2894:void startSleeping(net.minecraft.core.BlockPos) -> e
    2897:2898:void setPosToBed(net.minecraft.core.BlockPos) -> a
    2901:2901:boolean checkBedExists() -> s
    2905:2920:void stopSleeping() -> dR
    2924:2925:net.minecraft.core.Direction getBedOrientation() -> dS
    2930:2930:boolean isInWall() -> aP
    2935:2935:float getEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> a
    2939:2939:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    2943:2943:net.minecraft.world.item.ItemStack getProjectile(net.minecraft.world.item.ItemStack) -> f
    2947:2955:net.minecraft.world.item.ItemStack eat(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack) -> a
    2959:2968:void addEatEffect(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> a
    2971:2985:byte entityEventForEquipmentBreak(net.minecraft.world.entity.EquipmentSlot) -> d
    2990:2991:void broadcastBreakEvent(net.minecraft.world.entity.EquipmentSlot) -> c
    2994:2995:void broadcastBreakEvent(net.minecraft.world.InteractionHand) -> d
    2906:2916:void lambda$stopSleeping$6(net.minecraft.core.BlockPos) -> f
    2911:2912:net.minecraft.world.phys.Vec3 lambda$null$5(net.minecraft.core.BlockPos) -> g
    2901:2901:java.lang.Boolean lambda$checkBedExists$4(net.minecraft.core.BlockPos) -> h
    2380:2380:void lambda$updateFallFlying$3(net.minecraft.world.entity.LivingEntity) -> h
    871:871:void lambda$hurt$2(net.minecraft.world.entity.LivingEntity) -> i
    614:614:void lambda$tickEffects$1(net.minecraft.world.effect.MobEffectInstance) -> e
    539:542:void lambda$addAdditionalSaveData$0(net.minecraft.nbt.CompoundTag,net.minecraft.core.BlockPos) -> a
    110:136:void <clinit>() -> <clinit>
net.minecraft.world.entity.LivingEntity$1 -> akz$1:
    int[] $SwitchMap$net$minecraft$world$entity$EquipmentSlot$Type -> a
    int[] $SwitchMap$net$minecraft$world$entity$EquipmentSlot -> b
    2126:2971:void <clinit>() -> <clinit>
net.minecraft.world.entity.Mob -> ala:
    net.minecraft.network.syncher.EntityDataAccessor DATA_MOB_FLAGS_ID -> b
    int ambientSoundTime -> e
    int xpReward -> f
    net.minecraft.world.entity.ai.control.LookControl lookControl -> g
    net.minecraft.world.entity.ai.control.MoveControl moveControl -> bp
    net.minecraft.world.entity.ai.control.JumpControl jumpControl -> bq
    net.minecraft.world.entity.ai.control.BodyRotationControl bodyRotationControl -> c
    net.minecraft.world.entity.ai.navigation.PathNavigation navigation -> br
    net.minecraft.world.entity.ai.goal.GoalSelector goalSelector -> bs
    net.minecraft.world.entity.ai.goal.GoalSelector targetSelector -> bt
    net.minecraft.world.entity.LivingEntity target -> d
    net.minecraft.world.entity.ai.sensing.Sensing sensing -> bw
    net.minecraft.core.NonNullList handItems -> bx
    float[] handDropChances -> bu
    net.minecraft.core.NonNullList armorItems -> by
    float[] armorDropChances -> bv
    boolean canPickUpLoot -> bz
    boolean persistenceRequired -> bA
    java.util.Map pathfindingMalus -> bB
    net.minecraft.resources.ResourceLocation lootTable -> bC
    long lootTableSeed -> bD
    net.minecraft.world.entity.Entity leashHolder -> bE
    int delayedLeashHolderId -> bF
    net.minecraft.nbt.CompoundTag leashInfoTag -> bG
    net.minecraft.core.BlockPos restrictCenter -> bH
    float restrictRadius -> bI
    94:133:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    136:136:void registerGoals() -> n
    140:144:void registerAttributes() -> cA
    147:147:net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level) -> b
    151:152:float getPathfindingMalus(net.minecraft.world.level.pathfinder.BlockPathTypes) -> a
    156:157:void setPathfindingMalus(net.minecraft.world.level.pathfinder.BlockPathTypes,float) -> a
    160:160:net.minecraft.world.entity.ai.control.BodyRotationControl createBodyControl() -> o
    164:164:net.minecraft.world.entity.ai.control.LookControl getLookControl() -> p
    168:172:net.minecraft.world.entity.ai.control.MoveControl getMoveControl() -> r
    176:176:net.minecraft.world.entity.ai.control.JumpControl getJumpControl() -> s
    180:184:net.minecraft.world.entity.ai.navigation.PathNavigation getNavigation() -> u
    188:188:net.minecraft.world.entity.ai.sensing.Sensing getSensing() -> v
    193:193:net.minecraft.world.entity.LivingEntity getTarget() -> w
    197:198:void setTarget(net.minecraft.world.entity.LivingEntity) -> h
    202:202:boolean canAttackType(net.minecraft.world.entity.EntityType) -> a
    207:207:void ate() -> z
    211:213:void defineSynchedData() -> w_
    216:216:int getAmbientSoundInterval() -> A
    220:224:void playAmbientSound() -> B
    228:236:void baseTick() -> aa
    240:242:void playHurtSound(net.minecraft.world.damagesource.DamageSource) -> c
    245:246:void resetAmbientSoundTime() -> l
    250:266:int getExperienceReward(net.minecraft.world.entity.player.Player) -> d
    271:282:void spawnAnim() -> D
    286:291:void handleEntityEvent(byte) -> a
    295:304:void tick() -> h
    310:315:void updateControlFlags() -> F
    319:320:float tickHeadTurn(float,float) -> f
    325:325:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    330:396:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    400:447:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    451:453:void dropFromLootTable(net.minecraft.world.damagesource.DamageSource,boolean) -> a
    457:458:net.minecraft.world.level.storage.loot.LootContext$Builder createLootContext(boolean,net.minecraft.world.damagesource.DamageSource) -> a
    463:463:net.minecraft.resources.ResourceLocation getLootTable() -> cW
    467:467:net.minecraft.resources.ResourceLocation getDefaultLootTable() -> H
    471:472:void setZza(float) -> r
    475:476:void setYya(float) -> s
    479:480:void setXxa(float) -> t
    484:486:void setSpeed(float) -> o
    490:504:void aiStep() -> k
    507:532:void pickUpItem(net.minecraft.world.entity.item.ItemEntity) -> a
    535:573:boolean canReplaceCurrentItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.EquipmentSlot) -> a
    577:577:boolean canHoldItem(net.minecraft.world.item.ItemStack) -> g
    581:581:boolean removeWhenFarAway(double) -> h
    585:585:boolean requiresCustomPersistence() -> I
    589:589:boolean shouldDespawnInPeaceful() -> J
    594:617:void checkDespawn() -> cy
    622:655:void serverAiStep() -> du
    658:659:void sendDebugPackets() -> K
    662:662:void customServerAiStep() -> dT
    665:665:int getMaxHeadXRot() -> dU
    672:672:int getMaxHeadYRot() -> dV
    679:679:int getHeadRotSpeed() -> dW
    683:700:void lookAt(net.minecraft.world.entity.Entity,float,float) -> a
    703:710:float rotlerp(float,float,float) -> a
    714:715:boolean checkMobSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> a
    719:719:boolean checkSpawnRules(net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType) -> a
    723:723:boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader) -> a
    727:727:int getMaxSpawnClusterSize() -> dX
    731:731:boolean isMaxGroupSizeReached(int) -> c
    736:744:int getMaxFallDistance() -> bD
    749:749:java.lang.Iterable getHandSlots() -> bc
    754:754:java.lang.Iterable getArmorSlots() -> bd
    759:765:net.minecraft.world.item.ItemStack getItemBySlot(net.minecraft.world.entity.EquipmentSlot) -> b
    770:778:void setItemSlot(net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.ItemStack) -> a
    782:794:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    798:810:float getEquipmentDropChance(net.minecraft.world.entity.EquipmentSlot) -> d
    814:845:void populateDefaultEquipmentSlots(net.minecraft.world.DifficultyInstance) -> a
    848:865:net.minecraft.world.entity.EquipmentSlot getEquipmentSlotForItem(net.minecraft.world.item.ItemStack) -> h
    870:937:net.minecraft.world.item.Item getEquipmentForSlot(net.minecraft.world.entity.EquipmentSlot,int) -> a
    941:956:void populateDefaultEquipmentEnchantments(net.minecraft.world.DifficultyInstance) -> b
    960:968:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    972:972:boolean canBeControlledByRider() -> dY
    976:977:void setPersistenceRequired() -> dZ
    980:988:void setDropChance(net.minecraft.world.entity.EquipmentSlot,float) -> a
    991:991:boolean canPickUpLoot() -> ea
    995:996:void setCanPickUpLoot(boolean) -> n
    1000:1001:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> e
    1005:1005:boolean isPersistenceRequired() -> eb
    1010:1032:boolean interact(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> b
    1036:1036:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    1043:1043:boolean isWithinRestriction() -> ec
    1047:1050:boolean isWithinRestriction(net.minecraft.core.BlockPos) -> a
    1054:1056:void restrictTo(net.minecraft.core.BlockPos,int) -> a
    1059:1059:net.minecraft.core.BlockPos getRestrictCenter() -> ed
    1063:1063:float getRestrictRadius() -> ee
    1067:1068:void clearRestriction() -> ef
    1071:1071:boolean hasRestriction() -> eg
    1075:1084:void tickLeash() -> eh
    1087:1102:void dropLeash(boolean,boolean) -> a
    1105:1105:boolean canBeLeashed(net.minecraft.world.entity.player.Player) -> a
    1109:1109:boolean isLeashed() -> ei
    1115:1118:net.minecraft.world.entity.Entity getLeashHolder() -> ej
    1122:1136:void setLeashedTo(net.minecraft.world.entity.Entity,boolean) -> b
    1139:1141:void setDelayedLeashHolderId(int) -> d
    1145:1150:boolean startRiding(net.minecraft.world.entity.Entity,boolean) -> a
    1155:1170:void restoreLeashFromSave() -> eo
    1175:1196:boolean setSlot(int,net.minecraft.world.item.ItemStack) -> a_
    1201:1201:boolean isControlledByLocalInstance() -> cj
    1205:1206:boolean isValidSlotForItem(net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.ItemStack) -> b
    1214:1214:boolean isEffectiveAi() -> dx
    1218:1220:void setNoAi(boolean) -> o
    1223:1225:void setLeftHanded(boolean) -> p
    1228:1230:void setAggressive(boolean) -> q
    1233:1233:boolean isNoAi() -> ek
    1237:1237:boolean isLeftHanded() -> el
    1241:1241:boolean isAggressive() -> em
    1246:1246:net.minecraft.world.entity.HumanoidArm getMainArm() -> dA
    1251:1255:boolean canAttack(net.minecraft.world.entity.LivingEntity) -> c
    1266:1310:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    1314:1321:boolean isSunBurnTick() -> en
    1326:1331:void jumpInLiquid(net.minecraft.tags.Tag) -> c
    1334:1334:boolean isHolding(net.minecraft.world.item.Item) -> a
    72:72:void <clinit>() -> <clinit>
net.minecraft.world.entity.Mob$1 -> ala$1:
    int[] $SwitchMap$net$minecraft$world$entity$EquipmentSlot$Type -> a
    int[] $SwitchMap$net$minecraft$world$entity$EquipmentSlot -> b
    520:870:void <clinit>() -> <clinit>
net.minecraft.world.entity.MobCategory -> alb:
    net.minecraft.world.entity.MobCategory MONSTER -> a
    net.minecraft.world.entity.MobCategory CREATURE -> b
    net.minecraft.world.entity.MobCategory AMBIENT -> c
    net.minecraft.world.entity.MobCategory WATER_CREATURE -> d
    net.minecraft.world.entity.MobCategory MISC -> e
    java.util.Map BY_NAME -> f
    int max -> g
    boolean isFriendly -> h
    boolean isPersistent -> i
    java.lang.String name -> j
    net.minecraft.world.entity.MobCategory[] $VALUES -> k
    7:7:net.minecraft.world.entity.MobCategory[] values() -> values
    7:7:net.minecraft.world.entity.MobCategory valueOf(java.lang.String) -> valueOf
    21:26:void <init>(java.lang.String,int,java.lang.String,int,boolean,boolean) -> <init>
    29:29:java.lang.String getName() -> a
    33:33:net.minecraft.world.entity.MobCategory byName(java.lang.String) -> a
    37:37:int getMaxInstancesPerChunk() -> b
    41:41:boolean isFriendly() -> c
    45:45:boolean isPersistent() -> d
    15:15:net.minecraft.world.entity.MobCategory lambda$static$0(net.minecraft.world.entity.MobCategory) -> a
    7:15:void <clinit>() -> <clinit>
net.minecraft.world.entity.MobSpawnType -> alc:
    net.minecraft.world.entity.MobSpawnType NATURAL -> a
    net.minecraft.world.entity.MobSpawnType CHUNK_GENERATION -> b
    net.minecraft.world.entity.MobSpawnType SPAWNER -> c
    net.minecraft.world.entity.MobSpawnType STRUCTURE -> d
    net.minecraft.world.entity.MobSpawnType BREEDING -> e
    net.minecraft.world.entity.MobSpawnType MOB_SUMMONED -> f
    net.minecraft.world.entity.MobSpawnType JOCKEY -> g
    net.minecraft.world.entity.MobSpawnType EVENT -> h
    net.minecraft.world.entity.MobSpawnType CONVERSION -> i
    net.minecraft.world.entity.MobSpawnType REINFORCEMENT -> j
    net.minecraft.world.entity.MobSpawnType TRIGGERED -> k
    net.minecraft.world.entity.MobSpawnType BUCKET -> l
    net.minecraft.world.entity.MobSpawnType SPAWN_EGG -> m
    net.minecraft.world.entity.MobSpawnType COMMAND -> n
    net.minecraft.world.entity.MobSpawnType DISPENSER -> o
    net.minecraft.world.entity.MobSpawnType PATROL -> p
    net.minecraft.world.entity.MobSpawnType[] $VALUES -> q
    3:3:net.minecraft.world.entity.MobSpawnType[] values() -> values
    3:3:net.minecraft.world.entity.MobSpawnType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:19:void <clinit>() -> <clinit>
net.minecraft.world.entity.MobType -> ald:
    net.minecraft.world.entity.MobType UNDEFINED -> a
    net.minecraft.world.entity.MobType UNDEAD -> b
    net.minecraft.world.entity.MobType ARTHROPOD -> c
    net.minecraft.world.entity.MobType ILLAGER -> d
    net.minecraft.world.entity.MobType WATER -> e
    3:3:void <init>() -> <init>
    4:8:void <clinit>() -> <clinit>
net.minecraft.world.entity.MoverType -> ale:
    net.minecraft.world.entity.MoverType SELF -> a
    net.minecraft.world.entity.MoverType PLAYER -> b
    net.minecraft.world.entity.MoverType PISTON -> c
    net.minecraft.world.entity.MoverType SHULKER_BOX -> d
    net.minecraft.world.entity.MoverType SHULKER -> e
    net.minecraft.world.entity.MoverType[] $VALUES -> f
    3:3:net.minecraft.world.entity.MoverType[] values() -> values
    3:3:net.minecraft.world.entity.MoverType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
net.minecraft.world.entity.OwnableEntity -> alf:
    java.util.UUID getOwnerUUID() -> C_
    net.minecraft.world.entity.Entity getOwner() -> D_
net.minecraft.world.entity.PathfinderMob -> alg:
    12:13:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    16:16:float getWalkTargetValue(net.minecraft.core.BlockPos) -> f
    20:20:float getWalkTargetValue(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader) -> a
    25:25:boolean checkSpawnRules(net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType) -> a
    29:29:boolean isPathFinding() -> eo
    34:74:void tickLeash() -> eh
    77:77:double followLeashSpeed() -> ep
    81:81:void onLeashDistance(float) -> u
net.minecraft.world.entity.PlayerRideable -> alh:
net.minecraft.world.entity.PlayerRideableJumping -> ali:
    void onPlayerJump(int) -> a_
    boolean canJump() -> G_
    float getJumpRidingScale() -> H_
    void setJumpRidingScale(float) -> a_
    void handleStartJump(int) -> b
    void handleStopJump() -> c
net.minecraft.world.entity.Pose -> alj:
    net.minecraft.world.entity.Pose STANDING -> a
    net.minecraft.world.entity.Pose FALL_FLYING -> b
    net.minecraft.world.entity.Pose SLEEPING -> c
    net.minecraft.world.entity.Pose SWIMMING -> d
    net.minecraft.world.entity.Pose SPIN_ATTACK -> e
    net.minecraft.world.entity.Pose CROUCHING -> f
    net.minecraft.world.entity.Pose DYING -> g
    net.minecraft.world.entity.Pose[] $VALUES -> h
    3:3:net.minecraft.world.entity.Pose[] values() -> values
    3:3:net.minecraft.world.entity.Pose valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:10:void <clinit>() -> <clinit>
net.minecraft.world.entity.PowerableMob -> alk:
    boolean isPowered() -> J_
net.minecraft.world.entity.ReputationEventHandler -> all:
    void onReputationEventFrom(net.minecraft.world.entity.ai.village.ReputationEventType,net.minecraft.world.entity.Entity) -> a
net.minecraft.world.entity.SpawnGroupData -> alm:
net.minecraft.world.entity.SpawnPlacements -> aln:
    java.util.Map DATA_BY_TYPE -> a
    36:36:void <init>() -> <init>
    57:61:void register(net.minecraft.world.entity.EntityType,net.minecraft.world.entity.SpawnPlacements$Type,net.minecraft.world.level.levelgen.Heightmap$Types,net.minecraft.world.entity.SpawnPlacements$SpawnPredicate) -> a
    134:135:net.minecraft.world.entity.SpawnPlacements$Type getPlacementType(net.minecraft.world.entity.EntityType) -> a
    139:140:net.minecraft.world.level.levelgen.Heightmap$Types getHeightmapType(net.minecraft.world.entity.EntityType) -> b
    145:146:boolean checkSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> a
    54:131:void <clinit>() -> <clinit>
net.minecraft.world.entity.SpawnPlacements$Data -> aln$a:
    net.minecraft.world.level.levelgen.Heightmap$Types heightMap -> a
    net.minecraft.world.entity.SpawnPlacements$Type placement -> b
    net.minecraft.world.entity.SpawnPlacements$SpawnPredicate predicate -> c
    47:51:void <init>(net.minecraft.world.level.levelgen.Heightmap$Types,net.minecraft.world.entity.SpawnPlacements$Type,net.minecraft.world.entity.SpawnPlacements$SpawnPredicate) -> <init>
    42:42:net.minecraft.world.entity.SpawnPlacements$Type access$000(net.minecraft.world.entity.SpawnPlacements$Data) -> a
    42:42:net.minecraft.world.level.levelgen.Heightmap$Types access$100(net.minecraft.world.entity.SpawnPlacements$Data) -> b
    42:42:net.minecraft.world.entity.SpawnPlacements$SpawnPredicate access$200(net.minecraft.world.entity.SpawnPlacements$Data) -> c
net.minecraft.world.entity.SpawnPlacements$SpawnPredicate -> aln$b:
    boolean test(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> test
net.minecraft.world.entity.SpawnPlacements$Type -> aln$c:
    net.minecraft.world.entity.SpawnPlacements$Type ON_GROUND -> a
    net.minecraft.world.entity.SpawnPlacements$Type IN_WATER -> b
    net.minecraft.world.entity.SpawnPlacements$Type NO_RESTRICTIONS -> c
    net.minecraft.world.entity.SpawnPlacements$Type[] $VALUES -> d
    149:149:net.minecraft.world.entity.SpawnPlacements$Type[] values() -> values
    149:149:net.minecraft.world.entity.SpawnPlacements$Type valueOf(java.lang.String) -> valueOf
    149:149:void <init>(java.lang.String,int) -> <init>
    149:152:void <clinit>() -> <clinit>
net.minecraft.world.entity.TamableAnimal -> alo:
    net.minecraft.network.syncher.EntityDataAccessor DATA_FLAGS_ID -> bw
    net.minecraft.network.syncher.EntityDataAccessor DATA_OWNERUUID_ID -> bx
    net.minecraft.world.entity.ai.goal.SitGoal sitGoal -> by
    32:34:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    38:41:void defineSynchedData() -> w_
    45:52:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    56:76:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    80:80:boolean canBeLeashed(net.minecraft.world.entity.player.Player) -> a
    84:94:void spawnTamingParticles(boolean) -> r
    98:105:void handleEntityEvent(byte) -> a
    108:108:boolean isTame() -> eq
    112:120:void setTame(boolean) -> s
    123:123:void reassessTameGoals() -> er
    126:126:boolean isSitting() -> es
    130:136:void setSitting(boolean) -> t
    141:141:java.util.UUID getOwnerUUID() -> C_
    145:146:void setOwnerUUID(java.util.UUID) -> b
    149:154:void tame(net.minecraft.world.entity.player.Player) -> e
    160:166:net.minecraft.world.entity.LivingEntity getOwner() -> et
    172:175:boolean canAttack(net.minecraft.world.entity.LivingEntity) -> c
    179:179:boolean isOwnedBy(net.minecraft.world.entity.LivingEntity) -> i
    183:183:net.minecraft.world.entity.ai.goal.SitGoal getSitGoal() -> eu
    187:187:boolean wantsToAttack(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    192:198:net.minecraft.world.scores.Team getTeam() -> bv
    203:212:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> r
    217:223:void die(net.minecraft.world.damagesource.DamageSource) -> a
    25:25:net.minecraft.world.entity.Entity getOwner() -> D_
    26:27:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.Brain -> alp:
    java.util.Map memories -> a
    java.util.Map sensors -> b
    java.util.Map availableGoalsByPriority -> c
    net.minecraft.world.entity.schedule.Schedule schedule -> d
    java.util.Map activityRequirements -> e
    java.util.Set coreActivities -> f
    java.util.Set activeActivities -> g
    net.minecraft.world.entity.schedule.Activity defaultActivity -> h
    long lastScheduleUpdate -> i
    44:81:void <init>(java.util.Collection,java.util.Collection,com.mojang.datafixers.Dynamic) -> <init>
    84:84:boolean hasMemoryValue(net.minecraft.world.entity.ai.memory.MemoryModuleType) -> a
    88:89:void readMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType,com.mojang.datafixers.Dynamic) -> a
    92:93:void eraseMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType) -> b
    100:101:void setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType,java.lang.Object) -> a
    108:115:void setMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType,java.util.Optional) -> a
    119:119:java.util.Optional getMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType) -> c
    125:125:java.util.Map getMemories() -> a
    130:137:boolean checkMemory(net.minecraft.world.entity.ai.memory.MemoryModuleType,net.minecraft.world.entity.ai.memory.MemoryStatus) -> a
    141:141:net.minecraft.world.entity.schedule.Schedule getSchedule() -> b
    145:146:void setSchedule(net.minecraft.world.entity.schedule.Schedule) -> a
    149:150:void setCoreActivities(java.util.Set) -> a
    153:153:java.util.Set getActiveActivities() -> c
    159:162:java.util.stream.Stream getRunningBehaviorsStream() -> d
    166:167:void useDefaultActivity() -> e
    173:178:void setActivity(net.minecraft.world.entity.schedule.Activity) -> a
    181:188:void updateActivity(long,long) -> a
    191:192:void setDefaultActivity(net.minecraft.world.entity.schedule.Activity) -> b
    195:196:void addActivity(net.minecraft.world.entity.schedule.Activity,com.google.common.collect.ImmutableList) -> a
    199:207:void addActivity(net.minecraft.world.entity.schedule.Activity,com.google.common.collect.ImmutableList,java.util.Set) -> a
    210:210:boolean isActive(net.minecraft.world.entity.schedule.Activity) -> c
    215:217:net.minecraft.world.entity.ai.Brain copyWithoutGoals() -> f
    221:224:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    227:230:void stopAll(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> b
    234:244:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    249:250:void tickEachSensor(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> c
    256:264:void startEachNonRunningBehavior(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> d
    271:273:void tickEachRunningBehavior(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> e
    276:277:boolean activityRequirementsAreMet(net.minecraft.world.entity.schedule.Activity) -> d
    285:285:boolean isEmptyCollection(java.lang.Object) -> a
    278:280:boolean lambda$activityRequirementsAreMet$19(com.mojang.datafixers.util.Pair) -> a
    272:272:void lambda$tickEachRunningBehavior$18(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long,net.minecraft.world.entity.ai.behavior.Behavior) -> a
    263:263:void lambda$startEachNonRunningBehavior$17(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long,net.minecraft.world.entity.ai.behavior.Behavior) -> b
    262:262:boolean lambda$startEachNonRunningBehavior$16(net.minecraft.world.entity.ai.behavior.Behavior) -> a
    259:259:boolean lambda$startEachNonRunningBehavior$15(java.util.Map$Entry) -> a
    258:258:java.util.stream.Stream lambda$startEachNonRunningBehavior$14(java.util.Map) -> a
    249:249:void lambda$tickEachSensor$13(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.sensing.Sensor) -> a
    236:238:com.mojang.datafixers.util.Pair lambda$serialize$12(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> a
    235:235:boolean lambda$serialize$11(java.util.Map$Entry) -> b
    229:229:void lambda$stopAll$10(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long,net.minecraft.world.entity.ai.behavior.Behavior) -> c
    216:216:void lambda$copyWithoutGoals$9(net.minecraft.world.entity.ai.Brain,net.minecraft.world.entity.ai.memory.MemoryModuleType,java.util.Optional) -> a
    216:216:void lambda$null$8(net.minecraft.world.entity.ai.Brain,net.minecraft.world.entity.ai.memory.MemoryModuleType,java.lang.Object) -> a
    202:206:void lambda$addActivity$7(net.minecraft.world.entity.schedule.Activity,com.mojang.datafixers.util.Pair) -> a
    204:204:java.util.Set lambda$null$6(net.minecraft.world.entity.schedule.Activity) -> e
    203:203:java.util.Map lambda$null$5(java.lang.Integer) -> a
    162:162:boolean lambda$getRunningBehaviorsStream$4(net.minecraft.world.entity.ai.behavior.Behavior) -> b
    160:160:java.util.stream.Stream lambda$getRunningBehaviorsStream$3(java.util.Map) -> b
    73:76:void lambda$new$2(net.minecraft.world.entity.ai.sensing.Sensor) -> a
    70:70:void lambda$new$1(net.minecraft.world.entity.ai.sensing.SensorType) -> a
    69:69:void lambda$new$0(net.minecraft.world.entity.ai.memory.MemoryModuleType) -> d
net.minecraft.world.entity.ai.attributes.Attribute -> alq:
    java.lang.String getName() -> a
    double sanitizeValue(double) -> a
    double getDefaultValue() -> b
    boolean isClientSyncable() -> c
    net.minecraft.world.entity.ai.attributes.Attribute getParentAttribute() -> d
net.minecraft.world.entity.ai.attributes.AttributeInstance -> alr:
    net.minecraft.world.entity.ai.attributes.Attribute getAttribute() -> a
    double getBaseValue() -> b
    void setBaseValue(double) -> a
    java.util.Set getModifiers(net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> a
    java.util.Set getModifiers() -> c
    boolean hasModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> a
    net.minecraft.world.entity.ai.attributes.AttributeModifier getModifier(java.util.UUID) -> a
    void addModifiers(java.util.Collection) -> a
    void addModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> b
    void removeModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> c
    java.util.Collection getModifiers(java.lang.String) -> a
    void removeModifiers(java.lang.String) -> b
    void removeModifier(java.util.UUID) -> b
    void removeModifiers() -> d
    double getValue() -> e
    44:52:void copyFrom(net.minecraft.world.entity.ai.attributes.AttributeInstance) -> a
net.minecraft.world.entity.ai.attributes.AttributeModifier -> als:
    double amount -> a
    net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation operation -> b
    java.util.function.Supplier nameGetter -> c
    java.util.UUID id -> d
    boolean serialize -> e
    44:45:void <init>(java.lang.String,double,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> <init>
    48:49:void <init>(java.util.UUID,java.lang.String,double,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> <init>
    41:56:void <init>(java.util.UUID,java.util.function.Supplier,double,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> <init>
    59:59:java.util.UUID getId() -> a
    63:63:java.lang.String getName() -> b
    67:67:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation getOperation() -> c
    71:71:double getAmount() -> d
    75:75:boolean isSerializable() -> e
    79:80:net.minecraft.world.entity.ai.attributes.AttributeModifier setSerialize(boolean) -> a
    85:94:boolean equals(java.lang.Object) -> equals
    99:99:int hashCode() -> hashCode
    104:107:java.lang.String toString() -> toString
    48:48:java.lang.String lambda$new$1(java.lang.String) -> a
    44:44:java.lang.String lambda$new$0(java.lang.String) -> b
net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation -> als$a:
    net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation ADDITION -> a
    net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation MULTIPLY_BASE -> b
    net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation MULTIPLY_TOTAL -> c
    net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation[] OPERATIONS -> d
    int value -> e
    net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation[] $VALUES -> f
    11:11:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation[] values() -> values
    11:11:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation valueOf(java.lang.String) -> valueOf
    20:22:void <init>(java.lang.String,int,int) -> <init>
    25:25:int toValue() -> a
    29:33:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation fromValue(int) -> a
    11:16:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.attributes.BaseAttribute -> alt:
    net.minecraft.world.entity.ai.attributes.Attribute parent -> a
    java.lang.String name -> b
    double defaultValue -> c
    boolean syncable -> d
    11:19:void <init>(net.minecraft.world.entity.ai.attributes.Attribute,java.lang.String,double) -> <init>
    23:23:java.lang.String getName() -> a
    28:28:double getDefaultValue() -> b
    33:33:boolean isClientSyncable() -> c
    37:38:net.minecraft.world.entity.ai.attributes.BaseAttribute setSyncable(boolean) -> a
    44:44:net.minecraft.world.entity.ai.attributes.Attribute getParentAttribute() -> d
    49:49:int hashCode() -> hashCode
    54:54:boolean equals(java.lang.Object) -> equals
net.minecraft.world.entity.ai.attributes.BaseAttributeMap -> alu:
    java.util.Map attributesByObject -> a
    java.util.Map attributesByName -> b
    com.google.common.collect.Multimap descendantsByParent -> c
    12:15:void <init>() -> <init>
    19:19:net.minecraft.world.entity.ai.attributes.AttributeInstance getInstance(net.minecraft.world.entity.ai.attributes.Attribute) -> a
    24:24:net.minecraft.world.entity.ai.attributes.AttributeInstance getInstance(java.lang.String) -> a
    28:42:net.minecraft.world.entity.ai.attributes.AttributeInstance registerAttribute(net.minecraft.world.entity.ai.attributes.Attribute) -> b
    net.minecraft.world.entity.ai.attributes.AttributeInstance createAttributeInstance(net.minecraft.world.entity.ai.attributes.Attribute) -> c
    48:48:java.util.Collection getAttributes() -> a
    52:52:void onAttributeModified(net.minecraft.world.entity.ai.attributes.AttributeInstance) -> a
    55:62:void removeAttributeModifiers(com.google.common.collect.Multimap) -> a
    65:73:void addAttributeModifiers(com.google.common.collect.Multimap) -> b
    76:76:java.util.Collection getDescendants(net.minecraft.world.entity.ai.attributes.Attribute) -> d
    80:86:void assignValues(net.minecraft.world.entity.ai.attributes.BaseAttributeMap) -> a
    81:85:void lambda$assignValues$0(net.minecraft.world.entity.ai.attributes.BaseAttributeMap,net.minecraft.world.entity.ai.attributes.AttributeInstance) -> a
net.minecraft.world.entity.ai.attributes.ModifiableAttributeInstance -> alv:
    net.minecraft.world.entity.ai.attributes.BaseAttributeMap attributeMap -> a
    net.minecraft.world.entity.ai.attributes.Attribute attribute -> b
    java.util.Map modifiers -> c
    java.util.Map modifiersByName -> d
    java.util.Map modifierById -> e
    double baseValue -> f
    boolean dirty -> g
    double cachedValue -> h
    16:31:void <init>(net.minecraft.world.entity.ai.attributes.BaseAttributeMap,net.minecraft.world.entity.ai.attributes.Attribute) -> <init>
    35:35:net.minecraft.world.entity.ai.attributes.Attribute getAttribute() -> a
    40:40:double getBaseValue() -> b
    45:50:void setBaseValue(double) -> a
    54:54:java.util.Set getModifiers(net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> a
    59:65:java.util.Set getModifiers() -> c
    71:71:net.minecraft.world.entity.ai.attributes.AttributeModifier getModifier(java.util.UUID) -> a
    76:76:boolean hasModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> a
    81:84:void addModifiers(java.util.Collection) -> a
    88:99:void addModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> b
    102:104:void setDirty() -> f
    108:124:void removeModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> c
    128:128:java.util.Collection getModifiers(java.lang.String) -> a
    133:143:void removeModifiers(java.lang.String) -> b
    147:151:void removeModifier(java.util.UUID) -> b
    155:165:void removeModifiers() -> d
    169:174:double getValue() -> e
    178:194:double calculateValue() -> g
    198:209:java.util.Collection getAppliedModifiers(net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> b
    92:92:java.util.Set lambda$addModifier$0(java.lang.String) -> c
net.minecraft.world.entity.ai.attributes.ModifiableAttributeMap -> alw:
    java.util.Set dirtyAttributes -> e
    java.util.Map attributesByLegacy -> d
    10:12:void <init>() -> <init>
    16:16:net.minecraft.world.entity.ai.attributes.ModifiableAttributeInstance getInstance(net.minecraft.world.entity.ai.attributes.Attribute) -> e
    21:25:net.minecraft.world.entity.ai.attributes.ModifiableAttributeInstance getInstance(java.lang.String) -> b
    30:36:net.minecraft.world.entity.ai.attributes.AttributeInstance registerAttribute(net.minecraft.world.entity.ai.attributes.Attribute) -> b
    41:41:net.minecraft.world.entity.ai.attributes.AttributeInstance createAttributeInstance(net.minecraft.world.entity.ai.attributes.Attribute) -> c
    46:56:void onAttributeModified(net.minecraft.world.entity.ai.attributes.AttributeInstance) -> a
    59:59:java.util.Set getDirtyAttributes() -> b
    63:71:java.util.Collection getSyncableAttributes() -> c
    10:10:net.minecraft.world.entity.ai.attributes.AttributeInstance getInstance(java.lang.String) -> a
    10:10:net.minecraft.world.entity.ai.attributes.AttributeInstance getInstance(net.minecraft.world.entity.ai.attributes.Attribute) -> a
net.minecraft.world.entity.ai.attributes.RangedAttribute -> alx:
    double minValue -> a
    double maxValue -> b
    java.lang.String importLegacyName -> c
    13:26:void <init>(net.minecraft.world.entity.ai.attributes.Attribute,java.lang.String,double,double,double) -> <init>
    29:29:double getMinValue() -> e
    33:33:double getMaxValue() -> f
    37:38:net.minecraft.world.entity.ai.attributes.RangedAttribute importLegacyName(java.lang.String) -> a
    42:42:java.lang.String getImportLegacyName() -> g
    47:49:double sanitizeValue(double) -> a
net.minecraft.world.entity.ai.attributes.package-info -> aly:
net.minecraft.world.entity.ai.behavior.AcquirePoi -> alz:
    net.minecraft.world.entity.ai.village.poi.PoiType poiType -> a
    net.minecraft.world.entity.ai.memory.MemoryModuleType memoryType -> b
    boolean onlyIfAdult -> c
    long lastUpdate -> d
    it.unimi.dsi.fastutil.longs.Long2LongMap batchCache -> e
    int triedCount -> f
    39:48:void <init>(net.minecraft.world.entity.ai.village.poi.PoiType,net.minecraft.world.entity.ai.memory.MemoryModuleType,boolean) -> <init>
    52:59:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob) -> a
    64:96:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob,long) -> a
    27:27:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    27:27:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    94:94:boolean lambda$start$3(it.unimi.dsi.fastutil.longs.Long2LongMap$Entry) -> a
    89:92:void lambda$start$2(net.minecraft.world.entity.ai.village.poi.PoiManager,net.minecraft.core.BlockPos,net.minecraft.world.entity.PathfinderMob,net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    89:89:boolean lambda$null$1(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    70:80:boolean lambda$start$0(net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.behavior.AssignProfessionFromJobSite -> ama:
    20:21:void <init>() -> <init>
    25:25:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    30:39:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    18:18:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    18:18:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    34:38:void lambda$start$2(net.minecraft.world.entity.npc.Villager,net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    35:37:void lambda$null$1(net.minecraft.world.entity.npc.Villager,net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.VillagerProfession) -> a
    34:34:boolean lambda$null$0(net.minecraft.world.entity.ai.village.poi.PoiType,net.minecraft.world.entity.npc.VillagerProfession) -> a
net.minecraft.world.entity.ai.behavior.Behavior -> amb:
    java.util.Map entryCondition -> a
    net.minecraft.world.entity.ai.behavior.Behavior$Status status -> b
    long endTimestamp -> c
    int minDuration -> d
    int maxDuration -> e
    24:25:void <init>(java.util.Map) -> <init>
    28:29:void <init>(java.util.Map,int) -> <init>
    18:38:void <init>(java.util.Map,int,int) -> <init>
    41:41:net.minecraft.world.entity.ai.behavior.Behavior$Status getStatus() -> a
    45:52:boolean tryStart(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> b
    59:59:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    62:67:void tickOrStop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> c
    73:73:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    76:78:void doStop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> e
    84:84:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    94:94:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    102:102:boolean timedOut(long) -> a
    110:110:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    115:115:java.lang.String toString() -> toString
    119:119:boolean hasRequiredMemories(net.minecraft.world.entity.LivingEntity) -> a
    120:122:boolean lambda$hasRequiredMemories$0(net.minecraft.world.entity.LivingEntity,java.util.Map$Entry) -> a
net.minecraft.world.entity.ai.behavior.Behavior$Status -> amb$a:
    net.minecraft.world.entity.ai.behavior.Behavior$Status STOPPED -> a
    net.minecraft.world.entity.ai.behavior.Behavior$Status RUNNING -> b
    net.minecraft.world.entity.ai.behavior.Behavior$Status[] $VALUES -> c
    126:126:net.minecraft.world.entity.ai.behavior.Behavior$Status[] values() -> values
    126:126:net.minecraft.world.entity.ai.behavior.Behavior$Status valueOf(java.lang.String) -> valueOf
    126:126:void <init>(java.lang.String,int) -> <init>
    126:128:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.behavior.BehaviorUtils -> amc:
    22:22:void <init>() -> <init>
    24:26:void lockGazeAndWalkToEachOther(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    29:31:boolean entityIsVisible(net.minecraft.world.entity.ai.Brain,net.minecraft.world.entity.LivingEntity) -> a
    36:40:boolean targetIsValid(net.minecraft.world.entity.ai.Brain,net.minecraft.world.entity.ai.memory.MemoryModuleType,net.minecraft.world.entity.EntityType) -> a
    44:46:void lookAtEachOther(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> b
    49:50:void lookAtEntity(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> c
    53:56:void walkToEachOther(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> d
    59:64:void walkToEntity(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity,int) -> a
    67:79:void throwItem(net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.LivingEntity) -> a
    82:87:net.minecraft.core.SectionPos findSectionClosestToVillage(net.minecraft.server.level.ServerLevel,net.minecraft.core.SectionPos,int) -> a
    85:85:boolean lambda$findSectionClosestToVillage$3(net.minecraft.server.level.ServerLevel,int,net.minecraft.core.SectionPos) -> a
    39:39:boolean lambda$targetIsValid$2(net.minecraft.world.entity.ai.Brain,net.minecraft.world.entity.LivingEntity) -> b
    37:37:boolean lambda$targetIsValid$1(net.minecraft.world.entity.EntityType,net.minecraft.world.entity.LivingEntity) -> a
    30:30:boolean lambda$entityIsVisible$0(net.minecraft.world.entity.LivingEntity,java.util.List) -> a
net.minecraft.world.entity.ai.behavior.BlockPosWrapper -> amd:
    net.minecraft.core.BlockPos pos -> a
    net.minecraft.world.phys.Vec3 lookAt -> b
    11:14:void <init>(net.minecraft.core.BlockPos) -> <init>
    18:18:net.minecraft.core.BlockPos getPos() -> a
    23:23:net.minecraft.world.phys.Vec3 getLookAtPos() -> b
    28:28:boolean isVisible(net.minecraft.world.entity.LivingEntity) -> a
    33:33:java.lang.String toString() -> toString
net.minecraft.world.entity.ai.behavior.Celebrate -> ame:
    net.minecraft.world.entity.raid.Raid currentRaid -> a
    26:27:void <init>(int,int) -> <init>
    31:33:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    38:38:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    43:45:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> b
    49:63:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> c
    67:91:net.minecraft.world.item.ItemStack getFirework(net.minecraft.world.item.DyeColor,int) -> a
    21:21:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    21:21:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    21:21:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    21:21:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
net.minecraft.world.entity.ai.behavior.DoNothing -> amf:
    14:15:void <init>(int,int) -> <init>
    19:19:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
net.minecraft.world.entity.ai.behavior.EntityPosWrapper -> amg:
    net.minecraft.world.entity.Entity entity -> a
    15:17:void <init>(net.minecraft.world.entity.Entity) -> <init>
    21:21:net.minecraft.core.BlockPos getPos() -> a
    26:26:net.minecraft.world.phys.Vec3 getLookAtPos() -> b
    31:32:boolean isVisible(net.minecraft.world.entity.LivingEntity) -> a
    36:36:net.minecraft.world.entity.Entity getEntity() -> c
    41:41:java.lang.String toString() -> toString
net.minecraft.world.entity.ai.behavior.GateBehavior -> amh:
    java.util.Set exitErasedMemories -> a
    net.minecraft.world.entity.ai.behavior.GateBehavior$OrderPolicy orderPolicy -> b
    net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy runningPolicy -> c
    net.minecraft.world.entity.ai.behavior.WeightedList behaviors -> d
    25:33:void <init>(java.util.Map,java.util.Set,net.minecraft.world.entity.ai.behavior.GateBehavior$OrderPolicy,net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy,java.util.List) -> <init>
    38:40:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    46:46:boolean timedOut(long) -> a
    51:54:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    59:62:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    67:72:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    115:119:java.lang.String toString() -> toString
    116:116:boolean lambda$toString$7(net.minecraft.world.entity.ai.behavior.Behavior) -> a
    69:69:void lambda$stop$6(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long,net.minecraft.world.entity.ai.behavior.Behavior) -> a
    68:68:boolean lambda$stop$5(net.minecraft.world.entity.ai.behavior.Behavior) -> b
    61:61:void lambda$tick$4(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long,net.minecraft.world.entity.ai.behavior.Behavior) -> b
    60:60:boolean lambda$tick$3(net.minecraft.world.entity.ai.behavior.Behavior) -> c
    40:40:boolean lambda$canStillUse$2(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long,net.minecraft.world.entity.ai.behavior.Behavior) -> c
    39:39:boolean lambda$canStillUse$1(net.minecraft.world.entity.ai.behavior.Behavior) -> d
    32:32:void lambda$new$0(com.mojang.datafixers.util.Pair) -> a
net.minecraft.world.entity.ai.behavior.GateBehavior$1 -> amh$1:
net.minecraft.world.entity.ai.behavior.GateBehavior$OrderPolicy -> amh$a:
    net.minecraft.world.entity.ai.behavior.GateBehavior$OrderPolicy ORDERED -> a
    net.minecraft.world.entity.ai.behavior.GateBehavior$OrderPolicy SHUFFLED -> b
    java.util.function.Consumer consumer -> c
    net.minecraft.world.entity.ai.behavior.GateBehavior$OrderPolicy[] $VALUES -> d
    74:74:net.minecraft.world.entity.ai.behavior.GateBehavior$OrderPolicy[] values() -> values
    74:74:net.minecraft.world.entity.ai.behavior.GateBehavior$OrderPolicy valueOf(java.lang.String) -> valueOf
    81:83:void <init>(java.lang.String,int,java.util.function.Consumer) -> <init>
    86:87:void apply(net.minecraft.world.entity.ai.behavior.WeightedList) -> a
    75:75:void lambda$static$0(net.minecraft.world.entity.ai.behavior.WeightedList) -> b
    74:76:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy -> amh$b:
    net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy RUN_ONE -> a
    net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy TRY_ALL -> b
    net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy[] $VALUES -> c
    90:90:net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy[] values() -> values
    90:90:net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy valueOf(java.lang.String) -> valueOf
    90:90:void <init>(java.lang.String,int) -> <init>
    void apply(net.minecraft.world.entity.ai.behavior.WeightedList,net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    90:90:void <init>(java.lang.String,int,net.minecraft.world.entity.ai.behavior.GateBehavior$1) -> <init>
    90:100:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy$1 -> amh$b$1:
    91:91:void <init>(java.lang.String,int) -> <init>
    94:98:void apply(net.minecraft.world.entity.ai.behavior.WeightedList,net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    96:96:boolean lambda$apply$1(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long,net.minecraft.world.entity.ai.behavior.Behavior) -> a
    95:95:boolean lambda$apply$0(net.minecraft.world.entity.ai.behavior.Behavior) -> a
net.minecraft.world.entity.ai.behavior.GateBehavior$RunningPolicy$2 -> amh$b$2:
    100:100:void <init>(java.lang.String,int) -> <init>
    103:106:void apply(net.minecraft.world.entity.ai.behavior.WeightedList,net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    105:105:void lambda$apply$1(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long,net.minecraft.world.entity.ai.behavior.Behavior) -> a
    104:104:boolean lambda$apply$0(net.minecraft.world.entity.ai.behavior.Behavior) -> a
net.minecraft.world.entity.ai.behavior.GiveGiftToHero -> ami:
    java.util.Map gifts -> a
    int timeUntilNextGift -> b
    boolean giftGivenDuringThisRun -> c
    long timeSinceStart -> d
    55:69:void <init>(int) -> <init>
    73:82:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    87:92:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    96:96:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> b
    101:112:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> c
    116:120:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> d
    123:127:void throwGift(net.minecraft.world.entity.npc.Villager,net.minecraft.world.entity.LivingEntity) -> a
    130:145:java.util.List getItemToThrow(net.minecraft.world.entity.npc.Villager) -> a
    149:149:boolean isHeroVisible(net.minecraft.world.entity.npc.Villager) -> b
    153:154:java.util.Optional getNearestTargetableHero(net.minecraft.world.entity.npc.Villager) -> c
    158:158:boolean isHero(net.minecraft.world.entity.player.Player) -> a
    162:164:boolean isWithinThrowingDistance(net.minecraft.world.entity.npc.Villager,net.minecraft.world.entity.player.Player) -> a
    168:168:int calculateTimeUntilNextGift(net.minecraft.server.level.ServerLevel) -> a
    30:30:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    30:30:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    30:30:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    30:30:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    30:30:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    40:53:void lambda$static$0(java.util.HashMap) -> a
    39:39:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.behavior.GoOutsideToCelebrate -> amj:
    10:11:void <init>(float) -> <init>
    15:16:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.ai.behavior.GoToClosestVillage -> amk:
    float speed -> a
    int closeEnoughDistance -> b
    20:25:void <init>(float,int) -> <init>
    29:29:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    34:56:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    15:15:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    15:15:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    39:39:double lambda$start$0(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.behavior.HarvestFarmland -> aml:
    net.minecraft.core.BlockPos aboveFarmlandPos -> a
    boolean canPlantStuff -> b
    boolean wantsToReapStuff -> c
    long nextOkStartTime -> d
    int timeWorkedSoFar -> e
    java.util.List validFarmlandAroundVillager -> f
    38:46:void <init>() -> <init>
    50:90:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    95:95:net.minecraft.core.BlockPos getValidFarmland(net.minecraft.server.level.ServerLevel) -> a
    99:103:boolean validPos(net.minecraft.core.BlockPos,net.minecraft.server.level.ServerLevel) -> a
    108:112:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    116:120:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> b
    124:177:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> c
    181:181:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> d
    28:28:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    28:28:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    28:28:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    28:28:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    28:28:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.InsideBrownianWalk -> amm:
    float speed -> a
    20:22:void <init>(float) -> <init>
    26:26:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob) -> a
    31:43:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob,long) -> a
    16:16:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    16:16:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    42:42:void lambda$start$3(net.minecraft.world.entity.PathfinderMob,net.minecraft.core.BlockPos) -> a
    39:39:boolean lambda$start$2(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob,net.minecraft.core.BlockPos) -> a
    38:38:boolean lambda$start$1(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob,net.minecraft.core.BlockPos) -> b
    37:37:boolean lambda$start$0(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.behavior.InteractWith -> amn:
    int maxDist -> a
    float speed -> b
    net.minecraft.world.entity.EntityType type -> c
    int interactionRangeSqr -> d
    java.util.function.Predicate targetFilter -> e
    java.util.function.Predicate selfFilter -> f
    net.minecraft.world.entity.ai.memory.MemoryModuleType memory -> g
    27:41:void <init>(net.minecraft.world.entity.EntityType,int,java.util.function.Predicate,java.util.function.Predicate,net.minecraft.world.entity.ai.memory.MemoryModuleType,float,int) -> <init>
    44:44:net.minecraft.world.entity.ai.behavior.InteractWith of(net.minecraft.world.entity.EntityType,int,net.minecraft.world.entity.ai.memory.MemoryModuleType,float,int) -> a
    49:49:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    54:68:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    56:67:void lambda$start$7(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.Brain,java.util.List) -> a
    63:66:void lambda$null$6(net.minecraft.world.entity.ai.Brain,net.minecraft.world.entity.LivingEntity) -> a
    59:59:boolean lambda$null$5(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    58:58:net.minecraft.world.entity.LivingEntity lambda$null$4(net.minecraft.world.entity.LivingEntity) -> a
    57:57:boolean lambda$null$3(net.minecraft.world.entity.LivingEntity) -> b
    49:49:boolean lambda$checkExtraStartConditions$2(net.minecraft.world.entity.LivingEntity) -> c
    44:44:boolean lambda$of$1(net.minecraft.world.entity.LivingEntity) -> d
    44:44:boolean lambda$of$0(net.minecraft.world.entity.LivingEntity) -> e
net.minecraft.world.entity.ai.behavior.InteractWithDoor -> amo:
    31:36:void <init>() -> <init>
    41:51:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    54:59:java.util.Set getDoorsThatAreOnMyPath(net.minecraft.server.level.ServerLevel,java.util.List,java.util.List) -> a
    67:90:void openOrCloseDoors(net.minecraft.server.level.ServerLevel,java.util.List,java.util.Set,int,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.Brain) -> a
    94:118:void closeAllOpenedDoors(net.minecraft.server.level.ServerLevel,java.util.List,int,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.Brain) -> a
    95:117:void lambda$closeAllOpenedDoors$4(java.util.List,net.minecraft.server.level.ServerLevel,int,net.minecraft.world.entity.LivingEntity,java.util.Set) -> a
    68:88:void lambda$openOrCloseDoors$3(java.util.List,net.minecraft.server.level.ServerLevel,int,net.minecraft.world.entity.ai.Brain,net.minecraft.core.BlockPos) -> a
    80:85:void lambda$null$2(boolean,net.minecraft.core.GlobalPos,java.util.Set) -> a
    56:56:boolean lambda$getDoorsThatAreOnMyPath$1(net.minecraft.server.level.ServerLevel,net.minecraft.core.GlobalPos) -> a
    44:44:net.minecraft.core.BlockPos lambda$start$0(net.minecraft.world.level.pathfinder.Node) -> a
net.minecraft.world.entity.ai.behavior.JumpOnBed -> amp:
    float speed -> a
    net.minecraft.core.BlockPos targetBed -> b
    int remainingTimeToReachBed -> c
    int remainingJumps -> d
    int remainingCooldownUntilNextJump -> e
    35:40:void <init>(float) -> <init>
    44:44:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob) -> a
    49:58:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> a
    62:68:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> b
    72:76:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> c
    81:81:boolean timedOut(long) -> a
    86:101:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> d
    104:105:void startWalkingTowardsBed(net.minecraft.world.entity.Mob,net.minecraft.core.BlockPos) -> a
    108:108:boolean nearBed(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob) -> b
    115:117:boolean onOrOverBed(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob) -> c
    121:121:boolean onBedSurface(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob) -> d
    125:125:boolean isBed(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    129:129:java.util.Optional getNearestBed(net.minecraft.world.entity.Mob) -> a
    133:133:boolean tiredOfWalking(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob) -> e
    137:137:boolean tiredOfJumping(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob) -> f
    19:19:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    19:19:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    19:19:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    19:19:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    19:19:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    52:57:void lambda$start$0(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.behavior.LocateHidingPlace -> amq:
    float speed -> a
    int radius -> b
    int closeEnoughDist -> c
    java.util.Optional currentPos -> d
    21:33:void <init>(int,float,int) -> <init>
    37:45:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    50:74:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    55:55:boolean lambda$start$3(net.minecraft.core.BlockPos) -> a
    55:55:boolean lambda$start$2(net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    37:37:boolean lambda$checkExtraStartConditions$1(net.minecraft.core.BlockPos) -> b
    37:37:boolean lambda$checkExtraStartConditions$0(net.minecraft.world.entity.ai.village.poi.PoiType) -> b
net.minecraft.world.entity.ai.behavior.LocateHidingPlaceDuringRaid -> amr:
    10:11:void <init>(int,float) -> <init>
    15:16:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.ai.behavior.LookAndFollowTradingPlayerSink -> ams:
    float speed -> a
    16:24:void <init>(float) -> <init>
    28:34:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    41:41:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    46:47:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> b
    51:54:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> c
    58:59:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> d
    63:63:boolean timedOut(long) -> a
    67:71:void followPlayer(net.minecraft.world.entity.npc.Villager) -> a
    12:12:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    12:12:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    12:12:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    12:12:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    12:12:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.LookAtTargetSink -> amt:
    11:12:void <init>(int,int) -> <init>
    16:18:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> a
    23:24:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> b
    28:31:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> c
    9:9:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    9:9:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    9:9:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    29:30:void lambda$tick$1(net.minecraft.world.entity.Mob,net.minecraft.world.entity.ai.behavior.PositionWrapper) -> a
    17:17:boolean lambda$canStillUse$0(net.minecraft.world.entity.Mob,net.minecraft.world.entity.ai.behavior.PositionWrapper) -> b
net.minecraft.world.entity.ai.behavior.MakeLove -> amu:
    long birthTimestamp -> a
    29:37:void <init>() -> <init>
    41:41:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    46:46:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    51:60:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> b
    64:82:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> c
    86:101:void tryToGiveBirth(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,net.minecraft.world.entity.npc.Villager) -> a
    105:106:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> d
    109:109:net.minecraft.world.entity.npc.Villager getBreedingTarget(net.minecraft.world.entity.npc.Villager) -> a
    113:121:boolean isBreedingPossible(net.minecraft.world.entity.npc.Villager) -> b
    125:126:java.util.Optional takeVacantBed(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> b
    134:135:boolean canReach(net.minecraft.world.entity.npc.Villager,net.minecraft.core.BlockPos) -> a
    139:151:java.util.Optional breed(net.minecraft.world.entity.npc.Villager,net.minecraft.world.entity.npc.Villager) -> a
    155:157:void giveBedToChild(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,net.minecraft.core.BlockPos) -> a
    24:24:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    24:24:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    24:24:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    24:24:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    24:24:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    127:127:boolean lambda$takeVacantBed$0(net.minecraft.world.entity.npc.Villager,net.minecraft.core.BlockPos) -> b
net.minecraft.world.entity.ai.behavior.MoveToSkySeeingSpot -> amv:
    float speed -> a
    21:24:void <init>(float) -> <init>
    28:32:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    36:36:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    41:51:net.minecraft.world.phys.Vec3 getOutdoorPosition(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> b
    55:55:boolean hasNoBlocksAbove(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,net.minecraft.core.BlockPos) -> a
    30:30:net.minecraft.world.entity.ai.memory.WalkTarget lambda$start$0(net.minecraft.world.phys.Vec3) -> a
net.minecraft.world.entity.ai.behavior.MoveToTargetSink -> amw:
    net.minecraft.world.level.pathfinder.Path path -> a
    net.minecraft.core.BlockPos lastTargetPos -> b
    float speed -> c
    int remainingDelay -> d
    36:43:void <init>(int) -> <init>
    47:58:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob) -> a
    63:69:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> a
    74:78:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> b
    82:87:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> c
    91:115:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> d
    118:142:boolean tryComputePath(net.minecraft.world.entity.Mob,net.minecraft.world.entity.ai.memory.WalkTarget,long) -> a
    146:146:boolean reachedTarget(net.minecraft.world.entity.Mob,net.minecraft.world.entity.ai.memory.WalkTarget) -> a
    25:25:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    25:25:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    25:25:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    25:25:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    25:25:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.PickUpItems -> amx:
    java.util.List items -> a
    17:24:void <init>() -> <init>
    28:29:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    34:40:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    16:16:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    16:16:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.PlayTagWithOtherKids -> amy:
    37:43:void <init>() -> <init>
    50:50:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob) -> a
    55:71:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob,long) -> a
    74:81:void fleeFromChaser(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob,net.minecraft.world.entity.LivingEntity) -> a
    84:88:void chaseKid(net.minecraft.world.entity.PathfinderMob,net.minecraft.world.entity.LivingEntity) -> a
    91:91:java.util.Optional findSomeoneToChase(net.minecraft.world.entity.PathfinderMob) -> a
    96:105:java.util.Optional findSomeoneBeingChased(net.minecraft.world.entity.PathfinderMob) -> b
    109:117:java.util.Map checkHowManyChasersEachFriendHas(net.minecraft.world.entity.PathfinderMob) -> c
    121:121:java.util.List getFriendsNearby(net.minecraft.world.entity.PathfinderMob) -> d
    125:125:net.minecraft.world.entity.LivingEntity whoAreYouChasing(net.minecraft.world.entity.LivingEntity) -> a
    130:133:net.minecraft.world.entity.LivingEntity seeIfSomeoneIsChasingMe(net.minecraft.world.entity.LivingEntity) -> b
    137:137:boolean isChasingSomeone(net.minecraft.world.entity.LivingEntity) -> c
    141:143:boolean isFriendChasingMe(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    147:147:boolean hasFriendsNearby(net.minecraft.world.entity.PathfinderMob) -> e
    25:25:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    25:25:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    142:142:boolean lambda$isFriendChasingMe$5(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> b
    131:131:boolean lambda$seeIfSomeoneIsChasingMe$4(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> c
    114:114:void lambda$checkHowManyChasersEachFriendHas$3(java.util.Map,net.minecraft.world.entity.LivingEntity) -> a
    114:114:java.lang.Integer lambda$null$2(net.minecraft.world.entity.LivingEntity,java.lang.Integer) -> a
    103:103:boolean lambda$findSomeoneBeingChased$1(java.util.Map$Entry) -> a
    70:70:void lambda$start$0(net.minecraft.world.entity.PathfinderMob,net.minecraft.world.entity.LivingEntity) -> b
net.minecraft.world.entity.ai.behavior.PositionWrapper -> amz:
    net.minecraft.core.BlockPos getPos() -> a
    net.minecraft.world.phys.Vec3 getLookAtPos() -> b
    boolean isVisible(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.ai.behavior.ReactToBell -> ana:
    15:16:void <init>() -> <init>
    20:27:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.ResetProfession -> anb:
    17:18:void <init>() -> <init>
    22:26:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    31:33:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    15:15:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    15:15:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.ResetRaidStatus -> anc:
    13:14:void <init>() -> <init>
    18:18:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    23:31:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.RingBell -> and:
    19:20:void <init>() -> <init>
    24:24:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    29:39:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.RunOne -> ane:
    19:23:void <init>(java.util.List) -> <init>
    26:33:void <init>(java.util.Map,java.util.List) -> <init>
net.minecraft.world.entity.ai.behavior.SetClosestHomeAsWalkTarget -> anf:
    float speed -> a
    it.unimi.dsi.fastutil.longs.Long2LongMap batchCache -> b
    int triedCount -> c
    long lastUpdate -> d
    31:42:void <init>(float) -> <init>
    46:54:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    59:93:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    91:91:boolean lambda$start$2(it.unimi.dsi.fastutil.longs.Long2LongMap$Entry) -> a
    66:76:boolean lambda$start$1(net.minecraft.core.BlockPos) -> a
    53:53:boolean lambda$checkExtraStartConditions$0(net.minecraft.core.BlockPos) -> b
net.minecraft.world.entity.ai.behavior.SetEntityLookTarget -> ang:
    java.util.function.Predicate predicate -> a
    float maxDistSqr -> b
    24:25:void <init>(net.minecraft.tags.Tag,float) -> <init>
    28:29:void <init>(net.minecraft.world.entity.MobCategory,float) -> <init>
    32:33:void <init>(net.minecraft.world.entity.EntityType,float) -> <init>
    36:42:void <init>(java.util.function.Predicate,float) -> <init>
    46:47:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    52:60:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    54:59:void lambda$start$5(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.Brain,java.util.List) -> a
    58:58:void lambda$null$4(net.minecraft.world.entity.ai.Brain,net.minecraft.world.entity.LivingEntity) -> a
    56:56:boolean lambda$null$3(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    32:32:boolean lambda$new$2(net.minecraft.world.entity.EntityType,net.minecraft.world.entity.LivingEntity) -> a
    28:28:boolean lambda$new$1(net.minecraft.world.entity.MobCategory,net.minecraft.world.entity.LivingEntity) -> a
    24:24:boolean lambda$new$0(net.minecraft.tags.Tag,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.ai.behavior.SetHiddenState -> anh:
    int closeEnoughDist -> a
    int stayHiddenTicks -> b
    int ticksHidden -> c
    29:37:void <init>(int,int) -> <init>
    41:57:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.SetLookAndInteract -> ani:
    net.minecraft.world.entity.EntityType type -> a
    int interactionRangeSqr -> b
    java.util.function.Predicate targetFilter -> c
    java.util.function.Predicate selfFilter -> d
    21:31:void <init>(net.minecraft.world.entity.EntityType,int,java.util.function.Predicate,java.util.function.Predicate) -> <init>
    34:35:void <init>(net.minecraft.world.entity.EntityType,int) -> <init>
    39:39:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    44:57:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    60:60:boolean isMatchingTarget(net.minecraft.world.entity.LivingEntity) -> a
    64:64:java.util.List getVisibleEntities(net.minecraft.world.entity.LivingEntity) -> b
    48:56:void lambda$start$4(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.Brain,java.util.List) -> a
    53:55:void lambda$null$3(net.minecraft.world.entity.ai.Brain,net.minecraft.world.entity.LivingEntity) -> a
    49:49:boolean lambda$null$2(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    34:34:boolean lambda$new$1(net.minecraft.world.entity.LivingEntity) -> c
    34:34:boolean lambda$new$0(net.minecraft.world.entity.LivingEntity) -> d
net.minecraft.world.entity.ai.behavior.SetRaidStatus -> anj:
    13:14:void <init>() -> <init>
    18:18:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    23:36:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.SetWalkTargetAwayFromEntity -> ank:
    net.minecraft.world.entity.ai.memory.MemoryModuleType memory -> a
    float speed -> b
    23:30:void <init>(net.minecraft.world.entity.ai.memory.MemoryModuleType,float) -> <init>
    34:35:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob) -> a
    40:43:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob,long) -> a
    46:54:void moveAwayFromMob(net.minecraft.world.entity.PathfinderMob,net.minecraft.world.entity.Entity,float) -> a
    17:17:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    17:17:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.SetWalkTargetFromBlockMemory -> anl:
    net.minecraft.world.entity.ai.memory.MemoryModuleType memoryType -> a
    float speed -> b
    int closeEnoughDist -> c
    int tooFarDistance -> d
    int tooLongUnreachableDuration -> e
    34:44:void <init>(net.minecraft.world.entity.ai.memory.MemoryModuleType,float,int,int,int) -> <init>
    47:52:void dropPOI(net.minecraft.world.entity.npc.Villager,long) -> a
    56:85:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    88:92:boolean tiredOfTryingToFindTarget(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    96:97:boolean tooFar(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,net.minecraft.core.GlobalPos) -> a
    101:102:boolean closeEnough(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,net.minecraft.core.GlobalPos) -> b
    21:21:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    58:84:void lambda$start$0(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long,net.minecraft.world.entity.ai.Brain,net.minecraft.core.GlobalPos) -> a
net.minecraft.world.entity.ai.behavior.SetWalkTargetFromLookTarget -> anm:
    float speed -> a
    int closeEnoughDistance -> b
    19:26:void <init>(float,int) -> <init>
    30:33:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.ShowTradesToPlayer -> ann:
    net.minecraft.world.item.ItemStack playerItemStack -> a
    java.util.List displayItems -> b
    int cycleCounter -> c
    int displayIndex -> d
    int lookTime -> e
    27:40:void <init>(int,int) -> <init>
    44:54:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    59:61:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    66:72:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> b
    76:87:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> c
    91:96:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> d
    99:114:void findItemsToDisplay(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.npc.Villager) -> a
    117:118:void displayFirstItem(net.minecraft.world.entity.npc.Villager) -> a
    121:126:void updateDisplayItems(net.minecraft.world.entity.npc.Villager) -> b
    129:129:boolean playerItemStackMatchesCostOfOffer(net.minecraft.world.item.trading.MerchantOffer) -> a
    133:138:net.minecraft.world.entity.LivingEntity lookAtTarget(net.minecraft.world.entity.npc.Villager) -> c
    142:150:void displayCyclingItems(net.minecraft.world.entity.npc.Villager) -> d
    20:20:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    20:20:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    20:20:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    20:20:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    20:20:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.SleepInBed -> ano:
    long nextOkStartTime -> a
    27:31:void <init>() -> <init>
    35:54:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    59:66:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    71:78:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    82:82:boolean timedOut(long) -> a
    87:91:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    73:74:void lambda$start$0(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,java.util.Set) -> a
net.minecraft.world.entity.ai.behavior.SocializeAtBell -> anp:
    18:25:void <init>() -> <init>
    29:35:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    40:52:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    42:51:void lambda$start$4(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.Brain,java.util.List) -> a
    47:50:void lambda$null$3(net.minecraft.world.entity.ai.Brain,net.minecraft.world.entity.LivingEntity) -> a
    44:44:boolean lambda$null$2(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    43:43:boolean lambda$null$1(net.minecraft.world.entity.LivingEntity) -> a
    35:35:boolean lambda$checkExtraStartConditions$0(net.minecraft.world.entity.LivingEntity) -> b
net.minecraft.world.entity.ai.behavior.StrollAroundPoi -> anq:
    net.minecraft.world.entity.ai.memory.MemoryModuleType memoryType -> a
    long nextOkStartTime -> b
    int maxDistanceFromPoi -> c
    31:38:void <init>(net.minecraft.world.entity.ai.memory.MemoryModuleType,int) -> <init>
    42:45:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob) -> a
    50:55:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob,long) -> a
    20:20:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    20:20:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    52:52:net.minecraft.world.entity.ai.memory.WalkTarget lambda$start$0(net.minecraft.world.phys.Vec3) -> a
net.minecraft.world.entity.ai.behavior.StrollToPoi -> anr:
    net.minecraft.world.entity.ai.memory.MemoryModuleType memoryType -> a
    int closeEnoughDist -> b
    int maxDistanceFromPoi -> c
    long nextOkStartTime -> d
    23:31:void <init>(net.minecraft.world.entity.ai.memory.MemoryModuleType,int,int) -> <init>
    35:36:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob) -> a
    41:47:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob,long) -> a
    16:16:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    16:16:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    44:44:void lambda$start$0(net.minecraft.world.entity.ai.Brain,net.minecraft.core.GlobalPos) -> a
net.minecraft.world.entity.ai.behavior.StrollToPoiList -> ans:
    net.minecraft.world.entity.ai.memory.MemoryModuleType strollToMemoryType -> a
    net.minecraft.world.entity.ai.memory.MemoryModuleType mustBeCloseToMemoryType -> b
    float speed -> c
    int closeEnoughDist -> d
    int maxDistanceFromPoi -> e
    long nextOkStartTime -> f
    net.minecraft.core.GlobalPos targetPos -> g
    28:39:void <init>(net.minecraft.world.entity.ai.memory.MemoryModuleType,float,int,int,net.minecraft.world.entity.ai.memory.MemoryModuleType) -> <init>
    43:52:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    57:61:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    17:17:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    17:17:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.Swim -> ant:
    float height -> a
    float chance -> b
    15:19:void <init>(float,float) -> <init>
    23:23:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob) -> a
    28:28:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> a
    33:36:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob,long) -> b
    10:10:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    10:10:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    10:10:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
net.minecraft.world.entity.ai.behavior.TradeWithVillager -> anu:
    java.util.Set trades -> a
    24:31:void <init>() -> <init>
    35:35:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    40:40:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    45:49:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> b
    53:70:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> c
    74:75:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> d
    80:82:java.util.Set figureOutWhatIAmWillingToTrade(net.minecraft.world.entity.npc.Villager,net.minecraft.world.entity.npc.Villager) -> a
    89:115:void throwHalfStack(net.minecraft.world.entity.npc.Villager,java.util.Set,net.minecraft.world.entity.LivingEntity) -> a
    22:22:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    22:22:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    22:22:void stop(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> f
    22:22:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    22:22:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    82:82:boolean lambda$figureOutWhatIAmWillingToTrade$0(com.google.common.collect.ImmutableSet,net.minecraft.world.item.Item) -> a
net.minecraft.world.entity.ai.behavior.UpdateActivityFromSchedule -> anv:
    9:10:void <init>() -> <init>
    14:15:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.ValidateNearbyPoi -> anw:
    net.minecraft.world.entity.ai.memory.MemoryModuleType memoryType -> a
    java.util.function.Predicate poiPredicate -> b
    30:36:void <init>(net.minecraft.world.entity.ai.village.poi.PoiType,net.minecraft.world.entity.ai.memory.MemoryModuleType) -> <init>
    40:42:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    47:58:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    61:62:boolean bedIsOccupied(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.world.entity.LivingEntity) -> a
    66:66:boolean poiDoesntExist(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.behavior.VictoryStroll -> anx:
    10:11:void <init>(float) -> <init>
    15:16:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob) -> a
    8:8:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.ai.behavior.VillageBoundRandomStroll -> any:
    float speed -> a
    int maxXyDist -> b
    int maxYDist -> c
    31:32:void <init>(float) -> <init>
    35:41:void <init>(float,int,int) -> <init>
    45:58:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.PathfinderMob,long) -> a
    61:63:void setTargetedPos(net.minecraft.world.entity.PathfinderMob,net.minecraft.core.SectionPos) -> a
    66:68:void setRandomPos(net.minecraft.world.entity.PathfinderMob) -> a
    22:22:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    67:67:net.minecraft.world.entity.ai.memory.WalkTarget lambda$setRandomPos$1(net.minecraft.world.phys.Vec3) -> a
    62:62:net.minecraft.world.entity.ai.memory.WalkTarget lambda$setTargetedPos$0(net.minecraft.world.phys.Vec3) -> b
net.minecraft.world.entity.ai.behavior.VillagerCalmDown -> anz:
    16:17:void <init>() -> <init>
    21:27:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    30:32:boolean isCloseToEntityThatHurtMe(net.minecraft.world.entity.npc.Villager) -> a
    12:12:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    31:31:boolean lambda$isCloseToEntityThatHurtMe$0(net.minecraft.world.entity.npc.Villager,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.ai.behavior.VillagerGoalPackages -> aoa:
    24:24:void <init>() -> <init>
    29:44:com.google.common.collect.ImmutableList getCorePackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> a
    49:63:com.google.common.collect.ImmutableList getWorkPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> b
    68:86:com.google.common.collect.ImmutableList getPlayPackage(float) -> a
    91:108:com.google.common.collect.ImmutableList getRestPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> c
    113:133:com.google.common.collect.ImmutableList getMeetPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> d
    138:170:com.google.common.collect.ImmutableList getIdlePackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> e
    175:182:com.google.common.collect.ImmutableList getPanicPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> f
    187:194:com.google.common.collect.ImmutableList getPreRaidPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> g
    199:207:com.google.common.collect.ImmutableList getRaidPackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> h
    212:216:com.google.common.collect.ImmutableList getHidePackage(net.minecraft.world.entity.npc.VillagerProfession,float) -> i
    221:228:com.mojang.datafixers.util.Pair getFullLookBehavior() -> a
    233:236:com.mojang.datafixers.util.Pair getMinimalLookBehavior() -> b
net.minecraft.world.entity.ai.behavior.VillagerPanicTrigger -> aob:
    16:17:void <init>() -> <init>
    21:21:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    26:39:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> b
    43:46:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> c
    49:49:boolean hasHostile(net.minecraft.world.entity.LivingEntity) -> a
    53:53:boolean isHurt(net.minecraft.world.entity.LivingEntity) -> b
    14:14:boolean canStillUse(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> g
    14:14:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> d
    14:14:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.WakeUp -> aoc:
    13:14:void <init>() -> <init>
    18:18:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    23:24:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
net.minecraft.world.entity.ai.behavior.WeightedList -> aod:
    java.util.List entries -> a
    java.util.Random random -> b
    15:20:void <init>(java.util.Random) -> <init>
    23:24:void <init>() -> <init>
    27:36:void <init>(com.mojang.datafixers.Dynamic,java.util.function.Function) -> <init>
    39:39:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps,java.util.function.Function) -> a
    49:50:net.minecraft.world.entity.ai.behavior.WeightedList add(java.lang.Object,int) -> a
    54:54:net.minecraft.world.entity.ai.behavior.WeightedList shuffle() -> a
    58:60:net.minecraft.world.entity.ai.behavior.WeightedList shuffle(java.util.Random) -> a
    64:64:java.util.stream.Stream stream() -> b
    68:68:java.util.stream.Stream streamEntries() -> c
    72:72:java.lang.Object getOne() -> d
    76:76:java.lang.Object getOne(java.util.Random) -> b
    113:113:java.lang.String toString() -> toString
    59:59:double lambda$shuffle$4(java.lang.Object) -> a
    58:58:void lambda$shuffle$3(java.util.Random,net.minecraft.world.entity.ai.behavior.WeightedList$WeightedEntry) -> a
    39:43:java.lang.Object lambda$serialize$2(com.mojang.datafixers.types.DynamicOps,java.util.function.Function,net.minecraft.world.entity.ai.behavior.WeightedList$WeightedEntry) -> a
    29:29:void lambda$new$1(java.util.function.Function,com.mojang.datafixers.Dynamic) -> a
    30:33:net.minecraft.world.entity.ai.behavior.WeightedList lambda$null$0(java.util.function.Function,com.mojang.datafixers.Dynamic,com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.entity.ai.behavior.WeightedList$1 -> aod$1:
net.minecraft.world.entity.ai.behavior.WeightedList$WeightedEntry -> aod$a:
    java.lang.Object data -> b
    int weight -> c
    double randWeight -> d
    net.minecraft.world.entity.ai.behavior.WeightedList this$0 -> a
    84:87:void <init>(net.minecraft.world.entity.ai.behavior.WeightedList,java.lang.Object,int) -> <init>
    90:90:double getRandWeight() -> c
    94:95:void setRandom(float) -> a
    98:98:java.lang.Object getData() -> a
    102:102:int getWeight() -> b
    107:107:java.lang.String toString() -> toString
    79:79:void <init>(net.minecraft.world.entity.ai.behavior.WeightedList,java.lang.Object,int,net.minecraft.world.entity.ai.behavior.WeightedList$1) -> <init>
    79:79:double access$100(net.minecraft.world.entity.ai.behavior.WeightedList$WeightedEntry) -> a
    79:79:void access$200(net.minecraft.world.entity.ai.behavior.WeightedList$WeightedEntry,float) -> a
net.minecraft.world.entity.ai.behavior.WorkAtPoi -> aoe:
    long lastCheck -> a
    24:28:void <init>() -> <init>
    32:43:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    48:59:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager,long) -> a
    19:19:boolean checkExtraStartConditions(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    19:19:void start(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity,long) -> a
    51:51:void lambda$start$0(net.minecraft.world.entity.ai.Brain,net.minecraft.core.GlobalPos) -> a
net.minecraft.world.entity.ai.behavior.package-info -> aof:
net.minecraft.world.entity.ai.control.BodyRotationControl -> aog:
    net.minecraft.world.entity.Mob mob -> a
    int headStableTime -> b
    float lastStableYHeadRot -> c
    16:18:void <init>(net.minecraft.world.entity.Mob) -> <init>
    21:46:void clientTick() -> a
    49:50:void rotateBodyIfNecessary() -> b
    53:54:void rotateHeadIfNecessary() -> c
    57:65:void rotateHeadTowardsFront() -> d
    68:68:boolean notCarryingMobPassengers() -> e
    72:75:boolean isMoving() -> f
net.minecraft.world.entity.ai.control.Control -> aoh:
net.minecraft.world.entity.ai.control.DolphinLookControl -> aoi:
    int maxYRotFromCenter -> h
    12:14:void <init>(net.minecraft.world.entity.Mob,int) -> <init>
    18:38:void tick() -> a
net.minecraft.world.entity.ai.control.FlyingMoveControl -> aoj:
    int maxTurn -> i
    boolean hoversInPlace -> j
    12:15:void <init>(net.minecraft.world.entity.Mob,int,boolean) -> <init>
    19:55:void tick() -> a
net.minecraft.world.entity.ai.control.JumpControl -> aok:
    net.minecraft.world.entity.Mob mob -> b
    boolean jump -> a
    9:11:void <init>(net.minecraft.world.entity.Mob) -> <init>
    14:15:void jump() -> a
    18:20:void tick() -> b
net.minecraft.world.entity.ai.control.LookControl -> aol:
    net.minecraft.world.entity.Mob mob -> a
    float yMaxRotSpeed -> b
    float xMaxRotAngle -> c
    boolean hasWanted -> d
    double wantedX -> e
    double wantedY -> f
    double wantedZ -> g
    18:20:void <init>(net.minecraft.world.entity.Mob) -> <init>
    23:24:void setLookAt(net.minecraft.world.phys.Vec3) -> a
    27:28:void setLookAt(net.minecraft.world.entity.Entity) -> a
    31:32:void setLookAt(net.minecraft.world.entity.Entity,float,float) -> a
    35:36:void setLookAt(double,double,double) -> a
    39:45:void setLookAt(double,double,double,float,float) -> a
    48:65:void tick() -> a
    69:69:boolean resetXRotOnTick() -> b
    73:73:boolean isHasWanted() -> c
    77:77:double getWantedX() -> d
    81:81:double getWantedY() -> e
    85:85:double getWantedZ() -> f
    89:93:float getXRotD() -> g
    97:99:float getYRotD() -> h
    103:105:float rotateTowards(float,float,float) -> a
    109:112:double getWantedY(net.minecraft.world.entity.Entity) -> b
net.minecraft.world.entity.ai.control.MoveControl -> aom:
    net.minecraft.world.entity.Mob mob -> a
    double wantedX -> b
    double wantedY -> c
    double wantedZ -> d
    double speedModifier -> e
    float strafeForwards -> f
    float strafeRight -> g
    net.minecraft.world.entity.ai.control.MoveControl$Operation operation -> h
    29:33:void <init>(net.minecraft.world.entity.Mob) -> <init>
    36:36:boolean hasWanted() -> b
    40:40:double getSpeedModifier() -> c
    44:51:void setWantedPosition(double,double,double,double) -> a
    54:58:void strafe(float,float) -> a
    61:68:void copyFrom(net.minecraft.world.entity.ai.control.MoveControl) -> a
    71:141:void tick() -> a
    144:157:float rotlerp(float,float,float) -> a
    161:161:double getWantedX() -> d
    165:165:double getWantedY() -> e
    169:169:double getWantedZ() -> f
net.minecraft.world.entity.ai.control.MoveControl$Operation -> aom$a:
    net.minecraft.world.entity.ai.control.MoveControl$Operation WAIT -> a
    net.minecraft.world.entity.ai.control.MoveControl$Operation MOVE_TO -> b
    net.minecraft.world.entity.ai.control.MoveControl$Operation STRAFE -> c
    net.minecraft.world.entity.ai.control.MoveControl$Operation JUMPING -> d
    net.minecraft.world.entity.ai.control.MoveControl$Operation[] $VALUES -> e
    172:172:net.minecraft.world.entity.ai.control.MoveControl$Operation[] values() -> values
    172:172:net.minecraft.world.entity.ai.control.MoveControl$Operation valueOf(java.lang.String) -> valueOf
    172:172:void <init>(java.lang.String,int) -> <init>
    172:176:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.control.package-info -> aon:
net.minecraft.world.entity.ai.goal.AvoidEntityGoal -> aoo:
    net.minecraft.world.entity.PathfinderMob mob -> a
    double walkSpeedModifier -> i
    double sprintSpeedModifier -> j
    net.minecraft.world.entity.LivingEntity toAvoid -> b
    float maxDist -> c
    net.minecraft.world.level.pathfinder.Path path -> d
    net.minecraft.world.entity.ai.navigation.PathNavigation pathNav -> e
    java.lang.Class avoidClass -> f
    java.util.function.Predicate avoidPredicate -> g
    java.util.function.Predicate predicateOnAvoidEntity -> h
    net.minecraft.world.entity.ai.targeting.TargetingConditions avoidEntityTargeting -> k
    29:30:void <init>(net.minecraft.world.entity.PathfinderMob,java.lang.Class,float,double,double) -> <init>
    32:44:void <init>(net.minecraft.world.entity.PathfinderMob,java.lang.Class,java.util.function.Predicate,float,double,double,java.util.function.Predicate) -> <init>
    47:48:void <init>(net.minecraft.world.entity.PathfinderMob,java.lang.Class,float,double,double,java.util.function.Predicate) -> <init>
    52:68:boolean canUse() -> a
    73:73:boolean canContinueToUse() -> b
    78:79:void start() -> c
    83:84:void stop() -> d
    88:93:void tick() -> e
    47:47:boolean lambda$new$1(net.minecraft.world.entity.LivingEntity) -> a
    29:29:boolean lambda$new$0(net.minecraft.world.entity.LivingEntity) -> b
net.minecraft.world.entity.ai.goal.BegGoal -> aop:
    net.minecraft.world.entity.animal.Wolf wolf -> a
    net.minecraft.world.entity.player.Player player -> b
    net.minecraft.world.level.Level level -> c
    float lookDistance -> d
    int lookTime -> e
    net.minecraft.world.entity.ai.targeting.TargetingConditions begTargeting -> f
    22:28:void <init>(net.minecraft.world.entity.animal.Wolf,float) -> <init>
    32:36:boolean canUse() -> a
    41:47:boolean canContinueToUse() -> b
    52:54:void start() -> c
    58:60:void stop() -> d
    64:66:void tick() -> e
    69:78:boolean playerHoldingInteresting(net.minecraft.world.entity.player.Player) -> a
net.minecraft.world.entity.ai.goal.BoatGoals -> aoq:
    net.minecraft.world.entity.ai.goal.BoatGoals GO_TO_BOAT -> a
    net.minecraft.world.entity.ai.goal.BoatGoals GO_IN_BOAT_DIRECTION -> b
    net.minecraft.world.entity.ai.goal.BoatGoals[] $VALUES -> c
    15:15:net.minecraft.world.entity.ai.goal.BoatGoals[] values() -> values
    15:15:net.minecraft.world.entity.ai.goal.BoatGoals valueOf(java.lang.String) -> valueOf
    15:15:void <init>(java.lang.String,int) -> <init>
    15:17:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.goal.BreakDoorGoal -> aor:
    java.util.function.Predicate validDifficulties -> g
    int breakTime -> a
    int lastBreakProgress -> b
    int doorBreakTime -> c
    17:23:void <init>(net.minecraft.world.entity.Mob,java.util.function.Predicate) -> <init>
    26:28:void <init>(net.minecraft.world.entity.Mob,int,java.util.function.Predicate) -> <init>
    31:31:int getDoorBreakTime() -> f
    36:42:boolean canUse() -> a
    47:49:void start() -> c
    53:53:boolean canContinueToUse() -> b
    58:60:void stop() -> d
    64:85:void tick() -> e
    88:88:boolean isValidDifficulty(net.minecraft.world.Difficulty) -> a
net.minecraft.world.entity.ai.goal.BreathAirGoal -> aos:
    net.minecraft.world.entity.PathfinderMob mob -> a
    19:22:void <init>(net.minecraft.world.entity.PathfinderMob) -> <init>
    26:26:boolean canUse() -> a
    31:31:boolean canContinueToUse() -> b
    36:36:boolean isInterruptable() -> E_
    41:42:void start() -> c
    45:67:void findAirPosition() -> g
    71:75:void tick() -> e
    78:79:boolean givesAir(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.goal.BreedGoal -> aot:
    net.minecraft.world.entity.ai.targeting.TargetingConditions PARTNER_TARGETING -> d
    net.minecraft.world.entity.animal.Animal animal -> a
    java.lang.Class partnerClass -> e
    net.minecraft.world.level.Level level -> b
    net.minecraft.world.entity.animal.Animal partner -> c
    int loveTime -> f
    double speedModifier -> g
    29:30:void <init>(net.minecraft.world.entity.animal.Animal,double) -> <init>
    32:38:void <init>(net.minecraft.world.entity.animal.Animal,double,java.lang.Class) -> <init>
    42:46:boolean canUse() -> a
    51:51:boolean canContinueToUse() -> b
    56:58:void stop() -> d
    62:68:void tick() -> e
    72:81:net.minecraft.world.entity.animal.Animal getFreePartner() -> h
    85:114:void breed() -> g
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.goal.CatLieOnBedGoal -> aou:
    net.minecraft.world.entity.animal.Cat cat -> g
    15:19:void <init>(net.minecraft.world.entity.animal.Cat,double,int) -> <init>
    23:23:boolean canUse() -> a
    28:30:void start() -> c
    34:34:int nextStartTick(net.minecraft.world.entity.PathfinderMob) -> a
    39:41:void stop() -> d
    45:53:void tick() -> e
    57:57:boolean isValidTarget(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.goal.CatSitOnBlockGoal -> aov:
    net.minecraft.world.entity.animal.Cat cat -> g
    19:21:void <init>(net.minecraft.world.entity.animal.Cat,double) -> <init>
    25:25:boolean canUse() -> a
    30:32:void start() -> c
    36:38:void stop() -> d
    42:50:void tick() -> e
    54:70:boolean isValidTarget(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.goal.DolphinJumpGoal -> aow:
    int[] STEPS_TO_CHECK -> a
    net.minecraft.world.entity.animal.Dolphin dolphin -> b
    int interval -> c
    boolean breached -> d
    22:25:void <init>(net.minecraft.world.entity.animal.Dolphin,int) -> <init>
    29:44:boolean canUse() -> a
    48:49:boolean waterIsClear(net.minecraft.core.BlockPos,int,int,int) -> a
    53:54:boolean surfaceIsClear(net.minecraft.core.BlockPos,int,int,int) -> b
    59:60:boolean canContinueToUse() -> b
    65:65:boolean isInterruptable() -> E_
    71:79:void start() -> c
    83:84:void stop() -> d
    88:106:void tick() -> e
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.goal.DoorInteractGoal -> aox:
    net.minecraft.world.entity.Mob mob -> d
    net.minecraft.core.BlockPos doorPos -> e
    boolean hasDoor -> f
    boolean passed -> a
    float doorOpenDirX -> b
    float doorOpenDirZ -> c
    15:26:void <init>(net.minecraft.world.entity.Mob) -> <init>
    29:37:boolean isOpen() -> g
    41:47:void setOpen(boolean) -> a
    51:74:boolean canUse() -> a
    79:79:boolean canContinueToUse() -> b
    84:87:void start() -> c
    91:97:void tick() -> e
    100:101:boolean isDoor(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.goal.EatBlockGoal -> aoy:
    java.util.function.Predicate IS_TALL_GRASS -> a
    net.minecraft.world.entity.Mob mob -> b
    net.minecraft.world.level.Level level -> c
    int eatAnimationTick -> d
    27:31:void <init>(net.minecraft.world.entity.Mob) -> <init>
    35:46:boolean canUse() -> a
    51:54:void start() -> c
    58:59:void stop() -> d
    63:63:boolean canContinueToUse() -> b
    67:67:int getEatAnimationTick() -> g
    72:94:void tick() -> e
    21:21:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.goal.FleeSunGoal -> aoz:
    net.minecraft.world.entity.PathfinderMob mob -> a
    double wantedX -> b
    double wantedY -> c
    double wantedZ -> d
    double speedModifier -> e
    net.minecraft.world.level.Level level -> f
    21:26:void <init>(net.minecraft.world.entity.PathfinderMob,double) -> <init>
    30:46:boolean canUse() -> a
    50:57:boolean setWantedPos() -> g
    62:62:boolean canContinueToUse() -> b
    67:68:void start() -> c
    72:82:net.minecraft.world.phys.Vec3 getHidePos() -> h
net.minecraft.world.entity.ai.goal.FloatGoal -> apa:
    net.minecraft.world.entity.Mob mob -> a
    10:14:void <init>(net.minecraft.world.entity.Mob) -> <init>
    19:21:boolean canUse() -> a
    26:29:void tick() -> e
net.minecraft.world.entity.ai.goal.FollowBoatGoal -> apb:
    int timeToRecalcPath -> a
    net.minecraft.world.entity.PathfinderMob mob -> b
    net.minecraft.world.entity.LivingEntity following -> c
    net.minecraft.world.entity.ai.goal.BoatGoals currentGoal -> d
    27:29:void <init>(net.minecraft.world.entity.PathfinderMob) -> <init>
    33:45:boolean canUse() -> a
    50:50:boolean isInterruptable() -> E_
    55:55:boolean canContinueToUse() -> b
    60:70:void start() -> c
    74:75:void stop() -> d
    79:112:void tick() -> e
net.minecraft.world.entity.ai.goal.FollowFlockLeaderGoal -> apc:
    net.minecraft.world.entity.animal.AbstractSchoolingFish mob -> a
    int timeToRecalcPath -> b
    int nextStartTick -> c
    15:18:void <init>(net.minecraft.world.entity.animal.AbstractSchoolingFish) -> <init>
    21:21:int nextStartTick(net.minecraft.world.entity.animal.AbstractSchoolingFish) -> a
    26:48:boolean canUse() -> a
    53:53:boolean canContinueToUse() -> b
    58:59:void start() -> c
    63:64:void stop() -> d
    68:74:void tick() -> e
    46:46:boolean lambda$canUse$1(net.minecraft.world.entity.animal.AbstractSchoolingFish) -> b
    41:41:boolean lambda$canUse$0(net.minecraft.world.entity.animal.AbstractSchoolingFish) -> c
net.minecraft.world.entity.ai.goal.FollowMobGoal -> apd:
    net.minecraft.world.entity.Mob mob -> a
    java.util.function.Predicate followPredicate -> b
    net.minecraft.world.entity.Mob followingMob -> c
    double speedModifier -> d
    net.minecraft.world.entity.ai.navigation.PathNavigation navigation -> e
    int timeToRecalcPath -> f
    float stopDistance -> g
    float oldWaterCost -> h
    float areaSize -> i
    25:38:void <init>(net.minecraft.world.entity.Mob,double,float,float) -> <init>
    42:53:boolean canUse() -> a
    58:58:boolean canContinueToUse() -> b
    63:66:void start() -> c
    70:73:void stop() -> d
    77:106:void tick() -> e
    27:27:boolean lambda$new$0(net.minecraft.world.entity.Mob,net.minecraft.world.entity.Mob) -> a
net.minecraft.world.entity.ai.goal.FollowOwnerGoal -> ape:
    net.minecraft.world.entity.TamableAnimal tamable -> a
    net.minecraft.world.entity.LivingEntity owner -> b
    net.minecraft.world.level.LevelReader level -> c
    double speedModifier -> d
    net.minecraft.world.entity.ai.navigation.PathNavigation navigation -> e
    int timeToRecalcPath -> f
    float stopDistance -> g
    float startDistance -> h
    float oldWaterCost -> i
    boolean canFly -> j
    36:49:void <init>(net.minecraft.world.entity.TamableAnimal,double,float,float,boolean) -> <init>
    53:67:boolean canUse() -> a
    72:81:boolean canContinueToUse() -> b
    86:89:void start() -> c
    93:96:void stop() -> d
    100:117:void tick() -> e
    120:131:void teleportToOwner() -> g
    134:143:boolean maybeTeleportTo(int,int,int) -> a
    147:165:boolean canTeleportTo(net.minecraft.core.BlockPos) -> a
    169:169:int randomIntInclusive(int,int) -> a
net.minecraft.world.entity.ai.goal.FollowParentGoal -> apf:
    net.minecraft.world.entity.animal.Animal animal -> a
    net.minecraft.world.entity.animal.Animal parent -> b
    double speedModifier -> c
    int timeToRecalcPath -> d
    13:16:void <init>(net.minecraft.world.entity.animal.Animal,double) -> <init>
    20:47:boolean canUse() -> a
    52:62:boolean canContinueToUse() -> b
    67:68:void start() -> c
    72:73:void stop() -> d
    77:82:void tick() -> e
net.minecraft.world.entity.ai.goal.Goal -> apg:
    java.util.EnumSet flags -> a
    5:6:void <init>() -> <init>
    boolean canUse() -> a
    11:11:boolean canContinueToUse() -> b
    15:15:boolean isInterruptable() -> E_
    19:19:void start() -> c
    22:22:void stop() -> d
    25:25:void tick() -> e
    28:30:void setFlags(java.util.EnumSet) -> a
    34:34:java.lang.String toString() -> toString
    38:38:java.util.EnumSet getFlags() -> i
net.minecraft.world.entity.ai.goal.Goal$Flag -> apg$a:
    net.minecraft.world.entity.ai.goal.Goal$Flag MOVE -> a
    net.minecraft.world.entity.ai.goal.Goal$Flag LOOK -> b
    net.minecraft.world.entity.ai.goal.Goal$Flag JUMP -> c
    net.minecraft.world.entity.ai.goal.Goal$Flag TARGET -> d
    net.minecraft.world.entity.ai.goal.Goal$Flag[] $VALUES -> e
    41:41:net.minecraft.world.entity.ai.goal.Goal$Flag[] values() -> values
    41:41:net.minecraft.world.entity.ai.goal.Goal$Flag valueOf(java.lang.String) -> valueOf
    41:41:void <init>(java.lang.String,int) -> <init>
    41:45:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.goal.GoalSelector -> aph:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.entity.ai.goal.WrappedGoal NO_GOAL -> b
    java.util.Map lockedFlags -> c
    java.util.Set availableGoals -> d
    net.minecraft.util.profiling.ProfilerFiller profiler -> e
    java.util.EnumSet disabledFlags -> f
    int newGoalRate -> g
    28:37:void <init>(net.minecraft.util.profiling.ProfilerFiller) -> <init>
    44:45:void addGoal(int,net.minecraft.world.entity.ai.goal.Goal) -> a
    48:50:void removeGoal(net.minecraft.world.entity.ai.goal.Goal) -> a
    54:82:void tick() -> a
    85:85:java.util.Set getAvailableGoals() -> b
    89:89:java.util.stream.Stream getRunningGoals() -> c
    93:94:void setNewGoalRate(int) -> a
    97:98:void disableControlFlag(net.minecraft.world.entity.ai.goal.Goal$Flag) -> a
    101:102:void enableControlFlag(net.minecraft.world.entity.ai.goal.Goal$Flag) -> b
    105:110:void setControlFlag(net.minecraft.world.entity.ai.goal.Goal$Flag,boolean) -> a
    70:76:void lambda$tick$9(net.minecraft.world.entity.ai.goal.WrappedGoal) -> a
    71:74:void lambda$null$8(net.minecraft.world.entity.ai.goal.WrappedGoal,net.minecraft.world.entity.ai.goal.Goal$Flag) -> a
    67:67:boolean lambda$tick$7(net.minecraft.world.entity.ai.goal.WrappedGoal) -> b
    67:67:boolean lambda$null$6(net.minecraft.world.entity.ai.goal.WrappedGoal,net.minecraft.world.entity.ai.goal.Goal$Flag) -> b
    66:66:boolean lambda$tick$5(net.minecraft.world.entity.ai.goal.WrappedGoal) -> c
    65:65:boolean lambda$tick$4(net.minecraft.world.entity.ai.goal.WrappedGoal) -> d
    57:60:void lambda$tick$3(net.minecraft.world.entity.ai.goal.Goal$Flag,net.minecraft.world.entity.ai.goal.WrappedGoal) -> a
    55:55:boolean lambda$tick$2(net.minecraft.world.entity.ai.goal.WrappedGoal) -> e
    49:49:boolean lambda$removeGoal$1(net.minecraft.world.entity.ai.goal.Goal,net.minecraft.world.entity.ai.goal.WrappedGoal) -> a
    48:48:boolean lambda$removeGoal$0(net.minecraft.world.entity.ai.goal.Goal,net.minecraft.world.entity.ai.goal.WrappedGoal) -> b
    15:16:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.goal.GoalSelector$1 -> aph$1:
    16:16:void <init>() -> <init>
    19:19:boolean canUse() -> a
net.minecraft.world.entity.ai.goal.GoalSelector$2 -> aph$2:
    21:21:void <init>(int,net.minecraft.world.entity.ai.goal.Goal) -> <init>
    24:24:boolean isRunning() -> g
net.minecraft.world.entity.ai.goal.InteractGoal -> api:
    10:12:void <init>(net.minecraft.world.entity.Mob,java.lang.Class,float) -> <init>
    15:17:void <init>(net.minecraft.world.entity.Mob,java.lang.Class,float,float) -> <init>
net.minecraft.world.entity.ai.goal.JumpGoal -> apj:
    6:8:void <init>() -> <init>
net.minecraft.world.entity.ai.goal.LandOnOwnersShoulderGoal -> apk:
    net.minecraft.world.entity.animal.ShoulderRidingEntity entity -> a
    net.minecraft.server.level.ServerPlayer owner -> b
    boolean isSittingOnShoulder -> c
    12:14:void <init>(net.minecraft.world.entity.animal.ShoulderRidingEntity) -> <init>
    18:20:boolean canUse() -> a
    25:25:boolean isInterruptable() -> E_
    30:32:void start() -> c
    36:43:void tick() -> e
net.minecraft.world.entity.ai.goal.LeapAtTargetGoal -> apl:
    net.minecraft.world.entity.Mob mob -> a
    net.minecraft.world.entity.LivingEntity target -> b
    float yd -> c
    15:19:void <init>(net.minecraft.world.entity.Mob,float) -> <init>
    23:40:boolean canUse() -> a
    45:45:boolean canContinueToUse() -> b
    51:62:void start() -> c
net.minecraft.world.entity.ai.goal.LlamaFollowCaravanGoal -> apm:
    net.minecraft.world.entity.animal.horse.Llama llama -> a
    double speedModifier -> b
    int distCheckCounter -> c
    21:25:void <init>(net.minecraft.world.entity.animal.horse.Llama,double) -> <init>
    29:92:boolean canUse() -> a
    97:116:boolean canContinueToUse() -> b
    121:123:void stop() -> d
    127:137:void tick() -> e
    140:150:boolean firstIsLeashed(net.minecraft.world.entity.animal.horse.Llama,int) -> a
    34:35:boolean lambda$canUse$0(net.minecraft.world.entity.Entity) -> a
net.minecraft.world.entity.ai.goal.LookAtPlayerGoal -> apn:
    net.minecraft.world.entity.Mob mob -> a
    net.minecraft.world.entity.Entity lookAt -> b
    float lookDistance -> c
    int lookTime -> g
    float probability -> d
    java.lang.Class lookAtType -> e
    net.minecraft.world.entity.ai.targeting.TargetingConditions lookAtContext -> f
    22:23:void <init>(net.minecraft.world.entity.Mob,java.lang.Class,float) -> <init>
    25:37:void <init>(net.minecraft.world.entity.Mob,java.lang.Class,float,float) -> <init>
    41:55:boolean canUse() -> a
    60:66:boolean canContinueToUse() -> b
    71:72:void start() -> c
    76:77:void stop() -> d
    81:83:void tick() -> e
    33:33:boolean lambda$new$0(net.minecraft.world.entity.Mob,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.ai.goal.LookAtTradingPlayerGoal -> apo:
    net.minecraft.world.entity.npc.AbstractVillager villager -> g
    10:12:void <init>(net.minecraft.world.entity.npc.AbstractVillager) -> <init>
    16:20:boolean canUse() -> a
net.minecraft.world.entity.ai.goal.MeleeAttackGoal -> app:
    net.minecraft.world.entity.PathfinderMob mob -> a
    int attackTime -> b
    double speedModifier -> d
    boolean trackTarget -> e
    net.minecraft.world.level.pathfinder.Path path -> f
    int timeToRecalcPath -> g
    double pathedTargetX -> h
    double pathedTargetY -> i
    double pathedTargetZ -> j
    int attackInterval -> c
    long lastUpdate -> k
    24:34:void <init>(net.minecraft.world.entity.PathfinderMob,double,boolean) -> <init>
    38:59:boolean canUse() -> a
    64:82:boolean canContinueToUse() -> b
    87:90:void start() -> c
    94:100:void stop() -> d
    104:132:void tick() -> e
    135:141:void checkAndPerformAttack(net.minecraft.world.entity.LivingEntity,double) -> a
    144:144:double getAttackReachSqr(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.ai.goal.MoveBackToVillage -> apq:
    18:19:void <init>(net.minecraft.world.entity.PathfinderMob,double) -> <init>
    23:30:boolean canUse() -> a
    36:46:net.minecraft.world.phys.Vec3 getPosition() -> g
net.minecraft.world.entity.ai.goal.MoveIndoorsGoal -> apr:
    net.minecraft.world.entity.PathfinderMob mob -> a
    int insideX -> b
    int insideZ -> c
    15:21:void <init>(net.minecraft.world.entity.PathfinderMob) -> <init>
    25:50:boolean canUse() -> a
    54:54:boolean isInside() -> g
    59:59:boolean canContinueToUse() -> b
    78:78:void start() -> c
    85:85:void stop() -> d
net.minecraft.world.entity.ai.goal.MoveThroughVillageGoal -> aps:
    net.minecraft.world.entity.PathfinderMob mob -> a
    double speedModifier -> b
    net.minecraft.world.level.pathfinder.Path path -> c
    net.minecraft.core.BlockPos poiPos -> d
    boolean onlyAtNight -> e
    java.util.List visited -> f
    int distanceToPoi -> g
    java.util.function.BooleanSupplier canDealWithDoors -> h
    27:42:void <init>(net.minecraft.world.entity.PathfinderMob,double,boolean,int,java.util.function.BooleanSupplier) -> <init>
    46:106:boolean canUse() -> a
    111:114:boolean canContinueToUse() -> b
    119:120:void start() -> c
    124:127:void stop() -> d
    130:135:boolean hasNotVisited(net.minecraft.core.BlockPos) -> a
    139:142:void updateVisited() -> g
    60:67:double lambda$canUse$0(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.goal.MoveToBlockGoal -> apt:
    net.minecraft.world.entity.PathfinderMob mob -> a
    double speedModifier -> b
    int nextStartTick -> c
    int tryTicks -> d
    int maxStayTicks -> g
    net.minecraft.core.BlockPos blockPos -> e
    boolean reachedTarget -> h
    int searchRange -> i
    int verticalSearchRange -> j
    int verticalSearchStart -> f
    28:29:void <init>(net.minecraft.world.entity.PathfinderMob,double,int) -> <init>
    20:38:void <init>(net.minecraft.world.entity.PathfinderMob,double,int,int) -> <init>
    42:47:boolean canUse() -> a
    51:51:int nextStartTick(net.minecraft.world.entity.PathfinderMob) -> a
    56:56:boolean canContinueToUse() -> b
    61:64:void start() -> c
    67:68:void moveMobToBlock() -> g
    71:71:double acceptedDistance() -> h
    76:86:void tick() -> e
    89:89:boolean shouldRecalculatePath() -> j
    93:93:boolean isReachedTarget() -> k
    97:118:boolean findNearestBlock() -> l
    boolean isValidTarget(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.goal.MoveTowardsRestrictionGoal -> apu:
    net.minecraft.world.entity.PathfinderMob mob -> a
    double wantedX -> b
    double wantedY -> c
    double wantedZ -> d
    double speedModifier -> e
    16:20:void <init>(net.minecraft.world.entity.PathfinderMob,double) -> <init>
    24:34:boolean canUse() -> a
    39:39:boolean canContinueToUse() -> b
    44:45:void start() -> c
net.minecraft.world.entity.ai.goal.MoveTowardsTargetGoal -> apv:
    net.minecraft.world.entity.PathfinderMob mob -> a
    net.minecraft.world.entity.LivingEntity target -> b
    double wantedX -> c
    double wantedY -> d
    double wantedZ -> e
    double speedModifier -> f
    float within -> g
    19:24:void <init>(net.minecraft.world.entity.PathfinderMob,double,float) -> <init>
    28:42:boolean canUse() -> a
    47:47:boolean canContinueToUse() -> b
    52:53:void stop() -> d
    57:58:void start() -> c
net.minecraft.world.entity.ai.goal.OcelotAttackGoal -> apw:
    net.minecraft.world.level.BlockGetter level -> a
    net.minecraft.world.entity.Mob mob -> b
    net.minecraft.world.entity.LivingEntity target -> c
    int attackTime -> d
    16:20:void <init>(net.minecraft.world.entity.Mob) -> <init>
    24:29:boolean canUse() -> a
    34:40:boolean canContinueToUse() -> b
    45:47:void stop() -> d
    51:75:void tick() -> e
net.minecraft.world.entity.ai.goal.OfferFlowerGoal -> apx:
    net.minecraft.world.entity.ai.targeting.TargetingConditions OFFER_TARGER_CONTEXT -> a
    net.minecraft.world.entity.animal.IronGolem golem -> b
    net.minecraft.world.entity.npc.Villager villager -> c
    int tick -> d
    18:21:void <init>(net.minecraft.world.entity.animal.IronGolem) -> <init>
    25:32:boolean canUse() -> a
    37:37:boolean canContinueToUse() -> b
    42:44:void start() -> c
    48:50:void stop() -> d
    54:56:void tick() -> e
    10:10:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.goal.OpenDoorGoal -> apy:
    boolean closeDoor -> a
    int forgetTime -> b
    10:13:void <init>(net.minecraft.world.entity.Mob,boolean) -> <init>
    17:17:boolean canContinueToUse() -> b
    22:24:void start() -> c
    28:29:void stop() -> d
    33:35:void tick() -> e
net.minecraft.world.entity.ai.goal.PanicGoal -> apz:
    net.minecraft.world.entity.PathfinderMob mob -> a
    double speedModifier -> b
    double posX -> c
    double posY -> d
    double posZ -> e
    21:25:void <init>(net.minecraft.world.entity.PathfinderMob,double) -> <init>
    29:43:boolean canUse() -> a
    47:55:boolean findRandomPosition() -> g
    60:61:void start() -> c
    65:65:boolean canContinueToUse() -> b
    70:93:net.minecraft.core.BlockPos lookForWater(net.minecraft.world.level.BlockGetter,net.minecraft.world.entity.Entity,int,int) -> a
net.minecraft.world.entity.ai.goal.PathfindToRaidGoal -> aqa:
    net.minecraft.world.entity.raid.Raider mob -> a
    21:24:void <init>(net.minecraft.world.entity.raid.Raider) -> <init>
    28:32:boolean canUse() -> a
    37:40:boolean canContinueToUse() -> b
    45:58:void tick() -> e
    61:71:void recruitNearby(net.minecraft.world.entity.raid.Raid) -> a
    64:64:boolean lambda$recruitNearby$0(net.minecraft.world.entity.raid.Raid,net.minecraft.world.entity.raid.Raider) -> a
net.minecraft.world.entity.ai.goal.PlayGoal -> aqb:
    net.minecraft.world.entity.npc.Villager mob -> a
    net.minecraft.world.entity.LivingEntity followFriend -> b
    double speedModifier -> c
    int playTime -> d
    17:21:void <init>(net.minecraft.world.entity.npc.Villager,double) -> <init>
    25:58:boolean canUse() -> a
    63:63:boolean canContinueToUse() -> b
    68:72:void start() -> c
    76:78:void stop() -> d
    82:96:void tick() -> e
net.minecraft.world.entity.ai.goal.RandomLookAroundGoal -> aqc:
    net.minecraft.world.entity.Mob mob -> a
    double relX -> b
    double relZ -> c
    int lookTime -> d
    13:16:void <init>(net.minecraft.world.entity.Mob) -> <init>
    20:20:boolean canUse() -> a
    25:25:boolean canContinueToUse() -> b
    30:34:void start() -> c
    38:40:void tick() -> e
net.minecraft.world.entity.ai.goal.RandomStrollGoal -> aqd:
    net.minecraft.world.entity.PathfinderMob mob -> a
    double wantedX -> b
    double wantedY -> c
    double wantedZ -> d
    double speedModifier -> e
    int interval -> f
    boolean forceTrigger -> g
    21:22:void <init>(net.minecraft.world.entity.PathfinderMob,double) -> <init>
    24:29:void <init>(net.minecraft.world.entity.PathfinderMob,double,int) -> <init>
    33:55:boolean canUse() -> a
    60:60:net.minecraft.world.phys.Vec3 getPosition() -> g
    65:65:boolean canContinueToUse() -> b
    70:71:void start() -> c
    75:77:void stop() -> d
    80:81:void trigger() -> h
    84:85:void setInterval(int) -> a
net.minecraft.world.entity.ai.goal.RandomSwimmingGoal -> aqe:
    13:14:void <init>(net.minecraft.world.entity.PathfinderMob,double,int) -> <init>
    19:24:net.minecraft.world.phys.Vec3 getPosition() -> g
net.minecraft.world.entity.ai.goal.RangedAttackGoal -> aqf:
    net.minecraft.world.entity.Mob mob -> a
    net.minecraft.world.entity.monster.RangedAttackMob rangedAttackMob -> b
    net.minecraft.world.entity.LivingEntity target -> c
    int attackTime -> d
    double speedModifier -> e
    int seeTime -> f
    int attackIntervalMin -> g
    int attackIntervalMax -> h
    float attackRadius -> i
    float attackRadiusSqr -> j
    23:24:void <init>(net.minecraft.world.entity.monster.RangedAttackMob,double,int,float) -> <init>
    14:38:void <init>(net.minecraft.world.entity.monster.RangedAttackMob,double,int,int,float) -> <init>
    42:47:boolean canUse() -> a
    52:52:boolean canContinueToUse() -> b
    57:60:void stop() -> d
    64:96:void tick() -> e
net.minecraft.world.entity.ai.goal.RangedBowAttackGoal -> aqg:
    net.minecraft.world.entity.monster.Monster mob -> a
    double speedModifier -> b
    int attackIntervalMin -> c
    float attackRadiusSqr -> d
    int attackTime -> e
    int seeTime -> f
    boolean strafingClockwise -> g
    boolean strafingBackwards -> h
    int strafingTime -> i
    18:30:void <init>(net.minecraft.world.entity.monster.Monster,double,int,float) -> <init>
    33:34:void setMinAttackInterval(int) -> a
    38:41:boolean canUse() -> a
    45:45:boolean isHoldingBow() -> g
    50:50:boolean canContinueToUse() -> b
    55:58:void start() -> c
    62:68:void stop() -> d
    72:135:void tick() -> e
net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal -> aqh:
    net.minecraft.world.entity.monster.Monster mob -> a
    net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal$CrossbowState crossbowState -> b
    double speedModifier -> c
    float attackRadiusSqr -> d
    int seeTime -> e
    int attackDelay -> f
    24:35:void <init>(net.minecraft.world.entity.monster.Monster,double,float) -> <init>
    39:39:boolean canUse() -> a
    43:43:boolean isHoldingCrossbow() -> g
    48:48:boolean canContinueToUse() -> b
    52:52:boolean isValidTarget() -> h
    57:66:void stop() -> d
    70:131:void tick() -> e
    134:134:boolean canRun() -> j
net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal$CrossbowState -> aqh$a:
    net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal$CrossbowState UNCHARGED -> a
    net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal$CrossbowState CHARGING -> b
    net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal$CrossbowState CHARGED -> c
    net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal$CrossbowState READY_TO_ATTACK -> d
    net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal$CrossbowState[] $VALUES -> e
    15:15:net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal$CrossbowState[] values() -> values
    15:15:net.minecraft.world.entity.ai.goal.RangedCrossbowAttackGoal$CrossbowState valueOf(java.lang.String) -> valueOf
    15:15:void <init>(java.lang.String,int) -> <init>
    15:19:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.goal.RemoveBlockGoal -> aqi:
    net.minecraft.world.level.block.Block blockToRemove -> g
    net.minecraft.world.entity.Mob removerMob -> h
    int ticksSinceReachedGoal -> i
    32:35:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.entity.PathfinderMob,double,int) -> <init>
    39:54:boolean canUse() -> a
    59:63:boolean tryFindBlock() -> m
    68:70:void stop() -> d
    74:76:void start() -> c
    79:79:void playDestroyProgressSound(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    82:82:void playBreakSound(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    86:137:void tick() -> e
    141:150:net.minecraft.core.BlockPos getPosWithBlock(net.minecraft.core.BlockPos,net.minecraft.world.level.BlockGetter) -> a
    155:159:boolean isValidTarget(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.goal.RestrictSunGoal -> aqj:
    net.minecraft.world.entity.PathfinderMob mob -> a
    10:12:void <init>(net.minecraft.world.entity.PathfinderMob) -> <init>
    16:16:boolean canUse() -> a
    21:22:void start() -> c
    26:27:void stop() -> d
net.minecraft.world.entity.ai.goal.RunAroundLikeCrazyGoal -> aqk:
    net.minecraft.world.entity.animal.horse.AbstractHorse horse -> a
    double speedModifier -> b
    double posX -> c
    double posY -> d
    double posZ -> e
    19:23:void <init>(net.minecraft.world.entity.animal.horse.AbstractHorse,double) -> <init>
    27:37:boolean canUse() -> a
    42:43:void start() -> c
    47:47:boolean canContinueToUse() -> b
    52:72:void tick() -> e
net.minecraft.world.entity.ai.goal.SitGoal -> aql:
    net.minecraft.world.entity.TamableAnimal mob -> a
    boolean wantToSit -> b
    12:15:void <init>(net.minecraft.world.entity.TamableAnimal) -> <init>
    19:19:boolean canContinueToUse() -> b
    24:43:boolean canUse() -> a
    48:50:void start() -> c
    54:55:void stop() -> d
    58:59:void wantToSit(boolean) -> a
net.minecraft.world.entity.ai.goal.StrollThroughVillageGoal -> aqm:
    net.minecraft.world.entity.PathfinderMob mob -> a
    int interval -> b
    net.minecraft.core.BlockPos wantedPos -> c
    24:28:void <init>(net.minecraft.world.entity.PathfinderMob,int) -> <init>
    32:53:boolean canUse() -> a
    58:58:boolean canContinueToUse() -> b
    63:87:void tick() -> e
    90:93:void moveRandomly() -> g
    51:51:double lambda$canUse$0(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.goal.SwellGoal -> aqn:
    net.minecraft.world.entity.monster.Creeper creeper -> a
    net.minecraft.world.entity.LivingEntity target -> b
    12:15:void <init>(net.minecraft.world.entity.monster.Creeper) -> <init>
    19:20:boolean canUse() -> a
    25:27:void start() -> c
    31:32:void stop() -> d
    36:52:void tick() -> e
net.minecraft.world.entity.ai.goal.TakeFlowerGoal -> aqo:
    net.minecraft.world.entity.npc.Villager villager -> a
    net.minecraft.world.entity.animal.IronGolem golem -> b
    int pickupTick -> c
    boolean takeFlower -> d
    15:18:void <init>(net.minecraft.world.entity.npc.Villager) -> <init>
    22:40:boolean canUse() -> a
    45:45:boolean canContinueToUse() -> b
    50:53:void start() -> c
    57:59:void stop() -> d
    63:75:void tick() -> e
net.minecraft.world.entity.ai.goal.TemptGoal -> aqp:
    net.minecraft.world.entity.ai.targeting.TargetingConditions TEMP_TARGETING -> c
    net.minecraft.world.entity.PathfinderMob mob -> a
    double speedModifier -> d
    double px -> e
    double py -> f
    double pz -> g
    double pRotX -> h
    double pRotY -> i
    net.minecraft.world.entity.player.Player player -> b
    int calmDown -> j
    boolean isRunning -> k
    net.minecraft.world.item.crafting.Ingredient items -> l
    boolean canScare -> m
    30:31:void <init>(net.minecraft.world.entity.PathfinderMob,double,net.minecraft.world.item.crafting.Ingredient,boolean) -> <init>
    33:42:void <init>(net.minecraft.world.entity.PathfinderMob,double,boolean,net.minecraft.world.item.crafting.Ingredient) -> <init>
    46:54:boolean canUse() -> a
    58:58:boolean shouldFollowItem(net.minecraft.world.item.ItemStack) -> a
    63:79:boolean canContinueToUse() -> b
    83:83:boolean canScare() -> g
    88:92:void start() -> c
    96:100:void stop() -> d
    104:110:void tick() -> e
    113:113:boolean isRunning() -> h
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.goal.TradeWithPlayerGoal -> aqq:
    net.minecraft.world.entity.npc.AbstractVillager mob -> a
    11:14:void <init>(net.minecraft.world.entity.npc.AbstractVillager) -> <init>
    18:42:boolean canUse() -> a
    47:48:void start() -> c
    52:53:void stop() -> d
net.minecraft.world.entity.ai.goal.TryFindWaterGoal -> aqr:
    net.minecraft.world.entity.PathfinderMob mob -> a
    11:13:void <init>(net.minecraft.world.entity.PathfinderMob) -> <init>
    17:17:boolean canUse() -> a
    22:43:void start() -> c
net.minecraft.world.entity.ai.goal.UseItemGoal -> aqs:
    net.minecraft.world.entity.Mob mob -> a
    net.minecraft.world.item.ItemStack item -> b
    java.util.function.Predicate canUseSelector -> c
    net.minecraft.sounds.SoundEvent finishUsingSound -> d
    18:23:void <init>(net.minecraft.world.entity.Mob,net.minecraft.world.item.ItemStack,net.minecraft.sounds.SoundEvent,java.util.function.Predicate) -> <init>
    27:27:boolean canUse() -> a
    32:32:boolean canContinueToUse() -> b
    37:39:void start() -> c
    43:48:void stop() -> d
net.minecraft.world.entity.ai.goal.WaterAvoidingRandomFlyingGoal -> aqt:
    17:18:void <init>(net.minecraft.world.entity.PathfinderMob,double) -> <init>
    23:30:net.minecraft.world.phys.Vec3 getPosition() -> g
    35:60:net.minecraft.world.phys.Vec3 getTreePos() -> j
net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal -> aqu:
    float probability -> h
    15:16:void <init>(net.minecraft.world.entity.PathfinderMob,double) -> <init>
    19:21:void <init>(net.minecraft.world.entity.PathfinderMob,double,float) -> <init>
    26:34:net.minecraft.world.phys.Vec3 getPosition() -> g
net.minecraft.world.entity.ai.goal.WrappedGoal -> aqv:
    net.minecraft.world.entity.ai.goal.Goal goal -> a
    int priority -> b
    boolean isRunning -> c
    11:14:void <init>(int,net.minecraft.world.entity.ai.goal.Goal) -> <init>
    17:17:boolean canBeReplacedBy(net.minecraft.world.entity.ai.goal.WrappedGoal) -> a
    22:22:boolean canUse() -> a
    27:27:boolean canContinueToUse() -> b
    32:32:boolean isInterruptable() -> E_
    37:42:void start() -> c
    46:51:void stop() -> d
    55:56:void tick() -> e
    60:61:void setFlags(java.util.EnumSet) -> a
    65:65:java.util.EnumSet getFlags() -> i
    69:69:boolean isRunning() -> g
    73:73:int getPriority() -> h
    77:77:net.minecraft.world.entity.ai.goal.Goal getGoal() -> j
    82:88:boolean equals(java.lang.Object) -> equals
    93:93:int hashCode() -> hashCode
net.minecraft.world.entity.ai.goal.ZombieAttackGoal -> aqw:
    net.minecraft.world.entity.monster.Zombie zombie -> d
    int raiseArmTicks -> e
    10:12:void <init>(net.minecraft.world.entity.monster.Zombie,double,boolean) -> <init>
    16:18:void start() -> c
    22:24:void stop() -> d
    28:36:void tick() -> e
net.minecraft.world.entity.ai.goal.package-info -> aqx:
net.minecraft.world.entity.ai.goal.target.DefendVillageTargetGoal -> aqy:
    net.minecraft.world.entity.animal.IronGolem golem -> a
    net.minecraft.world.entity.LivingEntity potentialTarget -> b
    net.minecraft.world.entity.ai.targeting.TargetingConditions attackTargeting -> c
    17:23:void <init>(net.minecraft.world.entity.animal.IronGolem) -> <init>
    27:50:boolean canUse() -> a
    55:57:void start() -> c
net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal -> aqz:
    net.minecraft.world.entity.ai.targeting.TargetingConditions HURT_BY_TARGETING -> a
    boolean alertSameType -> b
    int timestamp -> c
    java.lang.Class[] toIgnoreDamage -> d
    java.lang.Class[] toIgnoreAlert -> i
    26:29:void <init>(net.minecraft.world.entity.PathfinderMob,java.lang.Class[]) -> <init>
    33:46:boolean canUse() -> a
    50:52:net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal setAlertOthers(java.lang.Class[]) -> a
    57:67:void start() -> c
    70:101:void alertOthers() -> g
    104:105:void alertOther(net.minecraft.world.entity.Mob,net.minecraft.world.entity.LivingEntity) -> a
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.goal.target.NearestAttackableTargetGoal -> ara:
    java.lang.Class targetType -> a
    int randomInterval -> b
    net.minecraft.world.entity.LivingEntity target -> c
    net.minecraft.world.entity.ai.targeting.TargetingConditions targetConditions -> d
    22:23:void <init>(net.minecraft.world.entity.Mob,java.lang.Class,boolean) -> <init>
    26:27:void <init>(net.minecraft.world.entity.Mob,java.lang.Class,boolean,boolean) -> <init>
    30:36:void <init>(net.minecraft.world.entity.Mob,java.lang.Class,int,boolean,boolean,java.util.function.Predicate) -> <init>
    40:45:boolean canUse() -> a
    49:49:net.minecraft.world.phys.AABB getTargetSearchArea(double) -> a
    53:58:void findTarget() -> g
    62:64:void start() -> c
net.minecraft.world.entity.ai.goal.target.NearestAttackableWitchTargetGoal -> arb:
    boolean canAttack -> i
    13:15:void <init>(net.minecraft.world.entity.raid.Raider,java.lang.Class,int,boolean,boolean,java.util.function.Predicate) -> <init>
    18:19:void setCanAttack(boolean) -> a
    23:23:boolean canUse() -> a
net.minecraft.world.entity.ai.goal.target.NearestHealableRaiderTargetGoal -> arc:
    int cooldown -> i
    15:17:void <init>(net.minecraft.world.entity.raid.Raider,java.lang.Class,boolean,java.util.function.Predicate) -> <init>
    20:20:int getCooldown() -> h
    24:25:void decrementCooldown() -> j
    29:37:boolean canUse() -> a
    42:44:void start() -> c
net.minecraft.world.entity.ai.goal.target.NonTameRandomTargetGoal -> ard:
    net.minecraft.world.entity.TamableAnimal tamableMob -> i
    13:15:void <init>(net.minecraft.world.entity.TamableAnimal,java.lang.Class,boolean,java.util.function.Predicate) -> <init>
    19:19:boolean canUse() -> a
    24:27:boolean canContinueToUse() -> b
net.minecraft.world.entity.ai.goal.target.OwnerHurtByTargetGoal -> are:
    net.minecraft.world.entity.TamableAnimal tameAnimal -> a
    net.minecraft.world.entity.LivingEntity ownerLastHurtBy -> b
    int timestamp -> c
    16:19:void <init>(net.minecraft.world.entity.TamableAnimal) -> <init>
    23:32:boolean canUse() -> a
    37:45:void start() -> c
net.minecraft.world.entity.ai.goal.target.OwnerHurtTargetGoal -> arf:
    net.minecraft.world.entity.TamableAnimal tameAnimal -> a
    net.minecraft.world.entity.LivingEntity ownerLastHurt -> b
    int timestamp -> c
    16:19:void <init>(net.minecraft.world.entity.TamableAnimal) -> <init>
    23:32:boolean canUse() -> a
    37:45:void start() -> c
net.minecraft.world.entity.ai.goal.target.TargetGoal -> arg:
    net.minecraft.world.entity.Mob mob -> e
    boolean mustSee -> f
    boolean mustReach -> a
    int reachCache -> b
    int reachCacheTime -> c
    int unseenTicks -> d
    net.minecraft.world.entity.LivingEntity targetMob -> g
    int unseenMemoryTicks -> h
    35:36:void <init>(net.minecraft.world.entity.Mob,boolean) -> <init>
    32:42:void <init>(net.minecraft.world.entity.Mob,boolean,boolean) -> <init>
    46:82:boolean canContinueToUse() -> b
    86:87:double getFollowDistance() -> k
    92:95:void start() -> c
    99:101:void stop() -> d
    104:126:boolean canAttack(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.ai.targeting.TargetingConditions) -> a
    130:141:boolean canReach(net.minecraft.world.entity.LivingEntity) -> a
    145:146:net.minecraft.world.entity.ai.goal.target.TargetGoal setUnseenMemoryTicks(int) -> a
net.minecraft.world.entity.ai.goal.target.package-info -> arh:
net.minecraft.world.entity.ai.gossip.GossipContainer -> ari:
    java.util.Map gossips -> a
    29:127:void <init>() -> <init>
    131:136:java.util.Map getGossipEntries() -> a
    140:149:void decay() -> b
    152:152:java.util.stream.Stream unpack() -> c
    156:175:java.util.Collection selectGossipsForTransfer(java.util.Random,int) -> a
    179:179:net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips getOrCreate(java.util.UUID) -> a
    183:191:void transferFrom(net.minecraft.world.entity.ai.gossip.GossipContainer,java.util.Random,int) -> a
    198:199:int getReputation(java.util.UUID,java.util.function.Predicate) -> a
    203:203:long getCountForType(net.minecraft.world.entity.ai.gossip.GossipType,java.util.function.DoublePredicate) -> a
    210:216:void add(java.util.UUID,net.minecraft.world.entity.ai.gossip.GossipType,int) -> a
    223:224:void remove(java.util.UUID,net.minecraft.world.entity.ai.gossip.GossipType,int) -> b
    227:234:void remove(java.util.UUID,net.minecraft.world.entity.ai.gossip.GossipType) -> a
    237:245:void remove(net.minecraft.world.entity.ai.gossip.GossipType) -> a
    248:248:com.mojang.datafixers.Dynamic store(com.mojang.datafixers.types.DynamicOps) -> a
    252:256:void update(com.mojang.datafixers.Dynamic) -> a
    259:259:int mergeValuesForTransfer(int,int) -> a
    263:264:int mergeValuesForAddition(net.minecraft.world.entity.ai.gossip.GossipType,int,int) -> a
    255:255:void lambda$update$7(net.minecraft.world.entity.ai.gossip.GossipContainer$GossipEntry) -> a
    248:248:com.mojang.datafixers.Dynamic lambda$store$6(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.entity.ai.gossip.GossipContainer$GossipEntry) -> a
    211:211:java.lang.Integer lambda$add$5(net.minecraft.world.entity.ai.gossip.GossipType,java.lang.Integer,java.lang.Integer) -> a
    203:203:boolean lambda$getCountForType$4(java.util.function.DoublePredicate,net.minecraft.world.entity.ai.gossip.GossipType,net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips) -> a
    186:190:void lambda$transferFrom$3(net.minecraft.world.entity.ai.gossip.GossipContainer$GossipEntry) -> b
    179:179:net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips lambda$getOrCreate$2(java.util.UUID) -> b
    152:152:java.util.stream.Stream lambda$unpack$1(java.util.Map$Entry) -> a
    133:135:void lambda$getGossipEntries$0(java.util.Map,java.util.UUID) -> a
net.minecraft.world.entity.ai.gossip.GossipContainer$1 -> ari$1:
net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips -> ari$a:
    it.unimi.dsi.fastutil.objects.Object2IntMap entries -> a
    80:81:void <init>() -> <init>
    84:88:int weightedValue(java.util.function.Predicate) -> a
    92:92:java.util.stream.Stream unpack(java.util.UUID) -> a
    96:106:void decay() -> a
    109:109:boolean isEmpty() -> b
    113:120:void makeSureValueIsntTooLowOrTooHigh(net.minecraft.world.entity.ai.gossip.GossipType) -> a
    123:124:void remove(net.minecraft.world.entity.ai.gossip.GossipType) -> b
    92:92:net.minecraft.world.entity.ai.gossip.GossipContainer$GossipEntry lambda$unpack$2(java.util.UUID,it.unimi.dsi.fastutil.objects.Object2IntMap$Entry) -> a
    87:87:int lambda$weightedValue$1(it.unimi.dsi.fastutil.objects.Object2IntMap$Entry) -> a
    86:86:boolean lambda$weightedValue$0(java.util.function.Predicate,it.unimi.dsi.fastutil.objects.Object2IntMap$Entry) -> a
    80:80:it.unimi.dsi.fastutil.objects.Object2IntMap access$000(net.minecraft.world.entity.ai.gossip.GossipContainer$EntityGossips) -> a
    80:80:void <init>(net.minecraft.world.entity.ai.gossip.GossipContainer$1) -> <init>
net.minecraft.world.entity.ai.gossip.GossipContainer$GossipEntry -> ari$b:
    java.util.UUID target -> a
    net.minecraft.world.entity.ai.gossip.GossipType type -> b
    int value -> c
    41:45:void <init>(java.util.UUID,net.minecraft.world.entity.ai.gossip.GossipType,int) -> <init>
    48:48:int weightedValue() -> a
    53:53:java.lang.String toString() -> toString
    61:64:com.mojang.datafixers.Dynamic store(com.mojang.datafixers.types.DynamicOps) -> a
    70:70:java.util.Optional load(com.mojang.datafixers.Dynamic) -> a
    71:71:java.util.Optional lambda$load$2(com.mojang.datafixers.Dynamic,net.minecraft.world.entity.ai.gossip.GossipType) -> a
    72:72:java.util.Optional lambda$null$1(com.mojang.datafixers.Dynamic,net.minecraft.world.entity.ai.gossip.GossipType,java.util.UUID) -> a
    73:73:net.minecraft.world.entity.ai.gossip.GossipContainer$GossipEntry lambda$null$0(java.util.UUID,net.minecraft.world.entity.ai.gossip.GossipType,java.lang.Number) -> a
net.minecraft.world.entity.ai.gossip.GossipType -> arj:
    net.minecraft.world.entity.ai.gossip.GossipType MAJOR_NEGATIVE -> a
    net.minecraft.world.entity.ai.gossip.GossipType MINOR_NEGATIVE -> b
    net.minecraft.world.entity.ai.gossip.GossipType MINOR_POSITIVE -> c
    net.minecraft.world.entity.ai.gossip.GossipType MAJOR_POSITIVE -> d
    net.minecraft.world.entity.ai.gossip.GossipType TRADING -> e
    java.lang.String id -> f
    int weight -> g
    int max -> h
    int decayPerDay -> i
    int decayPerTransfer -> j
    java.util.Map BY_ID -> k
    net.minecraft.world.entity.ai.gossip.GossipType[] $VALUES -> l
    10:10:net.minecraft.world.entity.ai.gossip.GossipType[] values() -> values
    10:10:net.minecraft.world.entity.ai.gossip.GossipType valueOf(java.lang.String) -> valueOf
    33:39:void <init>(java.lang.String,int,java.lang.String,int,int,int,int) -> <init>
    43:43:net.minecraft.world.entity.ai.gossip.GossipType byId(java.lang.String) -> a
    31:31:java.lang.String lambda$static$0(net.minecraft.world.entity.ai.gossip.GossipType) -> a
    10:31:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.gossip.package-info -> ark:
net.minecraft.world.entity.ai.memory.MemoryModuleType -> arl:
    net.minecraft.world.entity.ai.memory.MemoryModuleType DUMMY -> a
    net.minecraft.world.entity.ai.memory.MemoryModuleType HOME -> b
    net.minecraft.world.entity.ai.memory.MemoryModuleType JOB_SITE -> c
    net.minecraft.world.entity.ai.memory.MemoryModuleType MEETING_POINT -> d
    net.minecraft.world.entity.ai.memory.MemoryModuleType SECONDARY_JOB_SITE -> e
    net.minecraft.world.entity.ai.memory.MemoryModuleType LIVING_ENTITIES -> f
    net.minecraft.world.entity.ai.memory.MemoryModuleType VISIBLE_LIVING_ENTITIES -> g
    net.minecraft.world.entity.ai.memory.MemoryModuleType VISIBLE_VILLAGER_BABIES -> h
    net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_PLAYERS -> i
    net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_VISIBLE_PLAYER -> j
    net.minecraft.world.entity.ai.memory.MemoryModuleType WALK_TARGET -> k
    net.minecraft.world.entity.ai.memory.MemoryModuleType LOOK_TARGET -> l
    net.minecraft.world.entity.ai.memory.MemoryModuleType INTERACTION_TARGET -> m
    net.minecraft.world.entity.ai.memory.MemoryModuleType BREED_TARGET -> n
    net.minecraft.world.entity.ai.memory.MemoryModuleType PATH -> o
    net.minecraft.world.entity.ai.memory.MemoryModuleType INTERACTABLE_DOORS -> p
    net.minecraft.world.entity.ai.memory.MemoryModuleType OPENED_DOORS -> q
    net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_BED -> r
    net.minecraft.world.entity.ai.memory.MemoryModuleType HURT_BY -> s
    net.minecraft.world.entity.ai.memory.MemoryModuleType HURT_BY_ENTITY -> t
    net.minecraft.world.entity.ai.memory.MemoryModuleType NEAREST_HOSTILE -> u
    net.minecraft.world.entity.ai.memory.MemoryModuleType HIDING_PLACE -> v
    net.minecraft.world.entity.ai.memory.MemoryModuleType HEARD_BELL_TIME -> w
    net.minecraft.world.entity.ai.memory.MemoryModuleType CANT_REACH_WALK_TARGET_SINCE -> x
    net.minecraft.world.entity.ai.memory.MemoryModuleType GOLEM_LAST_SEEN_TIME -> y
    net.minecraft.world.entity.ai.memory.MemoryModuleType LAST_SLEPT -> z
    net.minecraft.world.entity.ai.memory.MemoryModuleType LAST_WOKEN -> A
    net.minecraft.world.entity.ai.memory.MemoryModuleType LAST_WORKED_AT_POI -> B
    java.util.Optional deserializer -> C
    54:56:void <init>(java.util.Optional) -> <init>
    60:60:java.lang.String toString() -> toString
    64:64:java.util.Optional getDeserializer() -> a
    68:68:net.minecraft.world.entity.ai.memory.MemoryModuleType register(java.lang.String,java.util.Optional) -> a
    72:72:net.minecraft.world.entity.ai.memory.MemoryModuleType register(java.lang.String) -> a
    23:50:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.memory.MemoryStatus -> arm:
    net.minecraft.world.entity.ai.memory.MemoryStatus VALUE_PRESENT -> a
    net.minecraft.world.entity.ai.memory.MemoryStatus VALUE_ABSENT -> b
    net.minecraft.world.entity.ai.memory.MemoryStatus REGISTERED -> c
    net.minecraft.world.entity.ai.memory.MemoryStatus[] $VALUES -> d
    3:3:net.minecraft.world.entity.ai.memory.MemoryStatus[] values() -> values
    3:3:net.minecraft.world.entity.ai.memory.MemoryStatus valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.memory.WalkTarget -> arn:
    net.minecraft.world.entity.ai.behavior.PositionWrapper target -> a
    float speed -> b
    int closeEnoughDist -> c
    16:17:void <init>(net.minecraft.core.BlockPos,float,int) -> <init>
    20:21:void <init>(net.minecraft.world.phys.Vec3,float,int) -> <init>
    24:25:void <init>(net.minecraft.world.entity.LivingEntity,float,int) -> <init>
    27:31:void <init>(net.minecraft.world.entity.ai.behavior.PositionWrapper,float,int) -> <init>
    34:34:net.minecraft.world.entity.ai.behavior.PositionWrapper getTarget() -> a
    38:38:float getSpeed() -> b
    42:42:int getCloseEnoughDist() -> c
net.minecraft.world.entity.ai.memory.package-info -> aro:
net.minecraft.world.entity.ai.navigation.FlyingPathNavigation -> arp:
    16:17:void <init>(net.minecraft.world.entity.Mob,net.minecraft.world.level.Level) -> <init>
    21:23:net.minecraft.world.level.pathfinder.PathFinder createPathFinder(int) -> a
    28:28:boolean canUpdatePath() -> a
    33:33:net.minecraft.world.phys.Vec3 getTempMobPos() -> b
    38:38:net.minecraft.world.level.pathfinder.Path createPath(net.minecraft.world.entity.Entity,int) -> a
    43:70:void tick() -> c
    74:136:boolean canMoveDirectly(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,int,int,int) -> a
    140:141:void setCanOpenDoors(boolean) -> a
    144:144:boolean canPassDoors() -> d
    148:149:void setCanPassDoors(boolean) -> b
    152:152:boolean canOpenDoors() -> e
    157:157:boolean isStableDestination(net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.navigation.GroundPathNavigation -> arq:
    boolean avoidSun -> p
    22:23:void <init>(net.minecraft.world.entity.Mob,net.minecraft.world.level.Level) -> <init>
    27:29:net.minecraft.world.level.pathfinder.PathFinder createPathFinder(int) -> a
    34:34:boolean canUpdatePath() -> a
    39:39:net.minecraft.world.phys.Vec3 getTempMobPos() -> b
    44:68:net.minecraft.world.level.pathfinder.Path createPath(net.minecraft.core.BlockPos,int) -> a
    73:73:net.minecraft.world.level.pathfinder.Path createPath(net.minecraft.world.entity.Entity,int) -> a
    77:92:int getSurfaceY() -> t
    97:112:void trimPath() -> F_
    116:173:boolean canMoveDirectly(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,int,int,int) -> a
    177:219:boolean canWalkOn(int,int,int,int,int,int,net.minecraft.world.phys.Vec3,double,double) -> a
    223:233:boolean canWalkAbove(int,int,int,int,int,int,net.minecraft.world.phys.Vec3,double,double) -> b
    237:238:void setCanOpenDoors(boolean) -> a
    241:241:boolean canPassDoors() -> e
    245:246:void setCanPassDoors(boolean) -> b
    249:249:boolean canOpenDoors() -> f
    253:254:void setAvoidSun(boolean) -> c
net.minecraft.world.entity.ai.navigation.PathNavigation -> arr:
    net.minecraft.world.entity.Mob mob -> a
    net.minecraft.world.level.Level level -> b
    net.minecraft.world.level.pathfinder.Path path -> c
    double speedModifier -> d
    net.minecraft.world.entity.ai.attributes.AttributeInstance followRange -> p
    int tick -> e
    int lastStuckCheck -> f
    net.minecraft.world.phys.Vec3 lastStuckCheckPos -> g
    net.minecraft.world.phys.Vec3 timeoutCachedNode -> h
    long timeoutTimer -> i
    long lastTimeoutCheck -> j
    double timeoutLimit -> k
    float maxDistanceToWaypoint -> l
    boolean hasDelayedRecomputation -> m
    long timeLastRecompute -> n
    net.minecraft.world.level.pathfinder.NodeEvaluator nodeEvaluator -> o
    net.minecraft.core.BlockPos targetPos -> q
    int reachRange -> r
    float maxVisitedNodesMultiplier -> s
    net.minecraft.world.level.pathfinder.PathFinder pathFinder -> t
    56:82:void <init>(net.minecraft.world.entity.Mob,net.minecraft.world.level.Level) -> <init>
    85:86:void resetMaxVisitedNodesMultiplier() -> g
    92:93:void setMaxVisitedNodesMultiplier(float) -> a
    96:96:net.minecraft.core.BlockPos getTargetPos() -> h
    net.minecraft.world.level.pathfinder.PathFinder createPathFinder(int) -> a
    102:103:void setSpeedModifier(double) -> a
    106:106:boolean hasDelayedRecomputation() -> i
    110:120:void recomputePath() -> j
    124:124:net.minecraft.world.level.pathfinder.Path createPath(double,double,double,int) -> a
    136:136:net.minecraft.world.level.pathfinder.Path createPath(java.util.stream.Stream,int) -> a
    148:148:net.minecraft.world.level.pathfinder.Path createPath(net.minecraft.core.BlockPos,int) -> a
    160:160:net.minecraft.world.level.pathfinder.Path createPath(net.minecraft.world.entity.Entity,int) -> a
    165:200:net.minecraft.world.level.pathfinder.Path createPath(java.util.Set,int,boolean,int) -> a
    209:209:boolean moveTo(double,double,double,double) -> a
    218:219:boolean moveTo(net.minecraft.world.entity.Entity,double) -> a
    227:246:boolean moveTo(net.minecraft.world.level.pathfinder.Path,double) -> a
    251:251:net.minecraft.world.level.pathfinder.Path getPath() -> k
    255:286:void tick() -> c
    289:299:void updatePath() -> l
    303:330:void doStuckDetection(net.minecraft.world.phys.Vec3) -> a
    334:334:boolean isDone() -> m
    341:341:boolean isInProgress() -> n
    345:346:void stop() -> o
    net.minecraft.world.phys.Vec3 getTempMobPos() -> b
    boolean canUpdatePath() -> a
    353:353:boolean isInLiquid() -> p
    361:379:void trimPath() -> F_
    boolean canMoveDirectly(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,int,int,int) -> a
    384:385:boolean isStableDestination(net.minecraft.core.BlockPos) -> a
    389:389:net.minecraft.world.level.pathfinder.NodeEvaluator getNodeEvaluator() -> q
    393:394:void setCanFloat(boolean) -> d
    397:397:boolean canFloat() -> r
    401:416:void recomputePath(net.minecraft.core.BlockPos) -> b
    419:419:float getMaxDistanceToWaypoint() -> s
net.minecraft.world.entity.ai.navigation.WallClimberNavigation -> ars:
    net.minecraft.core.BlockPos pathToPosition -> p
    21:22:void <init>(net.minecraft.world.entity.Mob,net.minecraft.world.level.Level) -> <init>
    26:27:net.minecraft.world.level.pathfinder.Path createPath(net.minecraft.core.BlockPos,int) -> a
    32:33:net.minecraft.world.level.pathfinder.Path createPath(net.minecraft.world.entity.Entity,int) -> a
    38:44:boolean moveTo(net.minecraft.world.entity.Entity,double) -> a
    50:62:void tick() -> c
net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation -> art:
    boolean allowBreaching -> p
    20:21:void <init>(net.minecraft.world.entity.Mob,net.minecraft.world.level.Level) -> <init>
    25:27:net.minecraft.world.level.pathfinder.PathFinder createPathFinder(int) -> a
    32:32:boolean canUpdatePath() -> a
    37:37:net.minecraft.world.phys.Vec3 getTempMobPos() -> b
    42:69:void tick() -> c
    73:105:void updatePath() -> l
    110:137:void doStuckDetection(net.minecraft.world.phys.Vec3) -> a
    141:142:boolean canMoveDirectly(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,int,int,int) -> a
    147:147:boolean isStableDestination(net.minecraft.core.BlockPos) -> a
    152:152:void setCanFloat(boolean) -> d
net.minecraft.world.entity.ai.navigation.package-info -> aru:
net.minecraft.world.entity.ai.package-info -> arv:
net.minecraft.world.entity.ai.sensing.DummySensor -> arw:
    10:10:void <init>() -> <init>
    13:13:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    17:17:java.util.Set requires() -> a
net.minecraft.world.entity.ai.sensing.GolemSensor -> arx:
    22:23:void <init>() -> <init>
    26:27:void <init>(int) -> <init>
    31:32:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    36:36:java.util.Set requires() -> a
    40:51:void checkForNearbyGolem(long,net.minecraft.world.entity.LivingEntity) -> a
    46:46:boolean lambda$checkForNearbyGolem$0(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.ai.sensing.HurtBySensor -> ary:
    12:12:void <init>() -> <init>
    15:26:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    30:30:java.util.Set requires() -> a
net.minecraft.world.entity.ai.sensing.InteractableDoorsSensor -> arz:
    17:17:void <init>() -> <init>
    20:41:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    45:45:java.util.Set requires() -> a
net.minecraft.world.entity.ai.sensing.NearestBedSensor -> asa:
    it.unimi.dsi.fastutil.longs.Long2LongMap batchCache -> a
    int triedCount -> b
    long lastUpdate -> c
    29:35:void <init>() -> <init>
    39:39:java.util.Set requires() -> a
    44:80:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Mob) -> a
    24:24:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    78:78:boolean lambda$doTick$1(it.unimi.dsi.fastutil.longs.Long2LongMap$Entry) -> a
    54:64:boolean lambda$doTick$0(net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.sensing.NearestLivingEntitySensor -> asb:
    net.minecraft.world.entity.ai.targeting.TargetingConditions TARGETING -> a
    19:19:void <init>() -> <init>
    25:34:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    38:38:java.util.Set requires() -> a
    31:31:boolean lambda$doTick$1(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    25:25:boolean lambda$doTick$0(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> b
    21:21:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.sensing.PlayerSensor -> asc:
    16:16:void <init>() -> <init>
    21:30:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    34:34:java.util.Set requires() -> a
    23:23:boolean lambda$doTick$0(net.minecraft.world.entity.LivingEntity,net.minecraft.server.level.ServerPlayer) -> a
net.minecraft.world.entity.ai.sensing.SecondaryPoiSensor -> asd:
    20:21:void <init>() -> <init>
    25:47:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.npc.Villager) -> a
    51:51:java.util.Set requires() -> a
    16:16:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.ai.sensing.Sensing -> ase:
    net.minecraft.world.entity.Mob mob -> a
    java.util.List seen -> b
    java.util.List unseen -> c
    11:16:void <init>(net.minecraft.world.entity.Mob) -> <init>
    19:21:void tick() -> a
    24:39:boolean canSee(net.minecraft.world.entity.Entity) -> a
net.minecraft.world.entity.ai.sensing.Sensor -> asf:
    java.util.Random RANDOM -> a
    int scanRate -> b
    long timeToTick -> c
    23:26:void <init>(int) -> <init>
    29:30:void <init>() -> <init>
    33:37:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> b
    void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    java.util.Set requires() -> a
    17:17:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.sensing.SensorType -> asg:
    net.minecraft.world.entity.ai.sensing.SensorType DUMMY -> a
    net.minecraft.world.entity.ai.sensing.SensorType NEAREST_LIVING_ENTITIES -> b
    net.minecraft.world.entity.ai.sensing.SensorType NEAREST_PLAYERS -> c
    net.minecraft.world.entity.ai.sensing.SensorType INTERACTABLE_DOORS -> d
    net.minecraft.world.entity.ai.sensing.SensorType NEAREST_BED -> e
    net.minecraft.world.entity.ai.sensing.SensorType HURT_BY -> f
    net.minecraft.world.entity.ai.sensing.SensorType VILLAGER_HOSTILES -> g
    net.minecraft.world.entity.ai.sensing.SensorType VILLAGER_BABIES -> h
    net.minecraft.world.entity.ai.sensing.SensorType SECONDARY_POIS -> i
    net.minecraft.world.entity.ai.sensing.SensorType GOLEM_LAST_SEEN -> j
    java.util.function.Supplier factory -> k
    22:24:void <init>(java.util.function.Supplier) -> <init>
    27:27:net.minecraft.world.entity.ai.sensing.Sensor create() -> a
    31:31:net.minecraft.world.entity.ai.sensing.SensorType register(java.lang.String,java.util.function.Supplier) -> a
    9:18:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.sensing.VillagerBabiesSensor -> ash:
    18:18:void <init>() -> <init>
    21:21:java.util.Set requires() -> a
    26:27:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    30:32:java.util.List getNearestVillagerBabies(net.minecraft.world.entity.LivingEntity) -> a
    36:36:boolean isVillagerBaby(net.minecraft.world.entity.LivingEntity) -> b
    40:41:java.util.List getVisibleEntities(net.minecraft.world.entity.LivingEntity) -> c
net.minecraft.world.entity.ai.sensing.VillagerHostilesSensor -> asi:
    com.google.common.collect.ImmutableMap ACCEPTABLE_DISTANCE_FROM_HOSTILES -> a
    19:19:void <init>() -> <init>
    35:35:java.util.Set requires() -> a
    42:43:void doTick(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.LivingEntity) -> a
    46:46:java.util.Optional getNearestHostile(net.minecraft.world.entity.LivingEntity) -> a
    55:55:java.util.Optional getVisibleEntities(net.minecraft.world.entity.LivingEntity) -> b
    63:63:int compareMobDistance(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    67:68:boolean isClose(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    72:72:boolean isHostile(net.minecraft.world.entity.LivingEntity) -> c
    47:50:java.util.Optional lambda$getNearestHostile$2(net.minecraft.world.entity.LivingEntity,java.util.List) -> a
    50:50:int lambda$null$1(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> b
    49:49:boolean lambda$null$0(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> b
    20:31:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.sensing.package-info -> asj:
net.minecraft.world.entity.ai.targeting.TargetingConditions -> ask:
    net.minecraft.world.entity.ai.targeting.TargetingConditions DEFAULT -> a
    double range -> b
    boolean allowInvulnerable -> c
    boolean allowSameTeam -> d
    boolean allowUnseeable -> e
    boolean allowNonAttackable -> f
    boolean testInvisible -> g
    java.util.function.Predicate selector -> h
    9:17:void <init>() -> <init>
    21:22:net.minecraft.world.entity.ai.targeting.TargetingConditions range(double) -> a
    26:27:net.minecraft.world.entity.ai.targeting.TargetingConditions allowInvulnerable() -> a
    31:32:net.minecraft.world.entity.ai.targeting.TargetingConditions allowSameTeam() -> b
    36:37:net.minecraft.world.entity.ai.targeting.TargetingConditions allowUnseeable() -> c
    41:42:net.minecraft.world.entity.ai.targeting.TargetingConditions allowNonAttackable() -> d
    46:47:net.minecraft.world.entity.ai.targeting.TargetingConditions ignoreInvisibilityTesting() -> e
    51:52:net.minecraft.world.entity.ai.targeting.TargetingConditions selector(java.util.function.Predicate) -> a
    56:100:boolean test(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    10:10:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.targeting.package-info -> asl:
net.minecraft.world.entity.ai.util.RandomPos -> asm:
    37:37:void <init>() -> <init>
    41:41:net.minecraft.world.phys.Vec3 getPos(net.minecraft.world.entity.PathfinderMob,int,int) -> a
    49:49:net.minecraft.world.phys.Vec3 getAirPos(net.minecraft.world.entity.PathfinderMob,int,int,int,net.minecraft.world.phys.Vec3,double) -> a
    54:54:net.minecraft.world.phys.Vec3 getLandPos(net.minecraft.world.entity.PathfinderMob,int,int) -> b
    59:59:net.minecraft.world.phys.Vec3 getLandPos(net.minecraft.world.entity.PathfinderMob,int,int,java.util.function.ToDoubleFunction) -> a
    64:64:net.minecraft.world.phys.Vec3 getAboveLandPos(net.minecraft.world.entity.PathfinderMob,int,int,net.minecraft.world.phys.Vec3,float,int,int) -> a
    69:70:net.minecraft.world.phys.Vec3 getPosTowards(net.minecraft.world.entity.PathfinderMob,int,int,net.minecraft.world.phys.Vec3) -> a
    75:76:net.minecraft.world.phys.Vec3 getPosTowards(net.minecraft.world.entity.PathfinderMob,int,int,net.minecraft.world.phys.Vec3,double) -> a
    85:87:net.minecraft.world.phys.Vec3 getAirPosTowards(net.minecraft.world.entity.PathfinderMob,int,int,int,net.minecraft.world.phys.Vec3,double) -> b
    93:94:net.minecraft.world.phys.Vec3 getPosAvoid(net.minecraft.world.entity.PathfinderMob,int,int,net.minecraft.world.phys.Vec3) -> b
    99:100:net.minecraft.world.phys.Vec3 getLandPosAvoid(net.minecraft.world.entity.PathfinderMob,int,int,net.minecraft.world.phys.Vec3) -> c
    131:206:net.minecraft.world.phys.Vec3 generateRandomPos(net.minecraft.world.entity.PathfinderMob,int,int,int,net.minecraft.world.phys.Vec3,boolean,double,java.util.function.ToDoubleFunction,boolean,int,int,boolean) -> a
    228:244:net.minecraft.core.BlockPos getRandomDelta(java.util.Random,int,int,int,net.minecraft.world.phys.Vec3,double) -> a
    248:268:net.minecraft.core.BlockPos moveUpToAboveSolid(net.minecraft.core.BlockPos,int,int,java.util.function.Predicate) -> a
    184:184:boolean lambda$generateRandomPos$0(net.minecraft.world.entity.PathfinderMob,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.util.package-info -> asn:
net.minecraft.world.entity.ai.village.ReputationEventType -> aso:
    net.minecraft.world.entity.ai.village.ReputationEventType ZOMBIE_VILLAGER_CURED -> a
    net.minecraft.world.entity.ai.village.ReputationEventType GOLEM_KILLED -> b
    net.minecraft.world.entity.ai.village.ReputationEventType VILLAGER_HURT -> c
    net.minecraft.world.entity.ai.village.ReputationEventType VILLAGER_KILLED -> d
    net.minecraft.world.entity.ai.village.ReputationEventType TRADE -> e
    11:11:net.minecraft.world.entity.ai.village.ReputationEventType register(java.lang.String) -> a
    4:8:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.village.ReputationEventType$1 -> aso$1:
    java.lang.String val$name -> f
    11:11:void <init>(java.lang.String) -> <init>
    14:14:java.lang.String toString() -> toString
net.minecraft.world.entity.ai.village.VillageSiege -> asp:
    boolean hasSetupSiege -> a
    net.minecraft.world.entity.ai.village.VillageSiege$State siegeState -> b
    int zombiesToSpawn -> c
    int nextSpawnTime -> d
    int spawnX -> e
    int spawnY -> f
    int spawnZ -> g
    18:20:void <init>() -> <init>
    36:73:int tick(net.minecraft.server.level.ServerLevel,boolean,boolean) -> a
    77:100:boolean tryToSetupSiege(net.minecraft.server.level.ServerLevel) -> a
    104:119:void trySpawn(net.minecraft.server.level.ServerLevel) -> b
    123:136:net.minecraft.world.phys.Vec3 findRandomSpawnPos(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.ai.village.VillageSiege$State -> asp$a:
    net.minecraft.world.entity.ai.village.VillageSiege$State SIEGE_CAN_ACTIVATE -> a
    net.minecraft.world.entity.ai.village.VillageSiege$State SIEGE_TONIGHT -> b
    net.minecraft.world.entity.ai.village.VillageSiege$State SIEGE_DONE -> c
    net.minecraft.world.entity.ai.village.VillageSiege$State[] $VALUES -> d
    27:27:net.minecraft.world.entity.ai.village.VillageSiege$State[] values() -> values
    27:27:net.minecraft.world.entity.ai.village.VillageSiege$State valueOf(java.lang.String) -> valueOf
    27:27:void <init>(java.lang.String,int) -> <init>
    27:30:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.village.package-info -> asq:
net.minecraft.world.entity.ai.village.poi.PoiManager -> asr:
    net.minecraft.world.entity.ai.village.poi.PoiManager$DistanceTracker distanceTracker -> a
    it.unimi.dsi.fastutil.longs.LongSet loadedChunks -> b
    41:46:void <init>(java.io.File,com.mojang.datafixers.DataFixer) -> <init>
    49:50:void add(net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    53:54:void remove(net.minecraft.core.BlockPos) -> a
    57:57:long getCountInRange(java.util.function.Predicate,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy) -> a
    61:61:java.util.stream.Stream getInSquare(java.util.function.Predicate,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy) -> b
    65:66:java.util.stream.Stream getInRange(java.util.function.Predicate,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy) -> c
    71:71:java.util.stream.Stream getInChunk(java.util.function.Predicate,net.minecraft.world.level.ChunkPos,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy) -> a
    75:75:java.util.stream.Stream getInSection(java.util.function.Predicate,long,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy) -> a
    79:81:java.util.stream.Stream findAll(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy) -> a
    85:85:java.util.Optional find(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy) -> b
    90:94:java.util.Optional findClosest(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy) -> c
    98:101:java.util.Optional take(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPos,int) -> a
    109:113:java.util.Optional takeClosest(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.core.BlockPos,int) -> b
    120:122:java.util.Optional getRandom(java.util.function.Predicate,java.util.function.Predicate,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy,net.minecraft.core.BlockPos,int,java.util.Random) -> a
    126:126:boolean release(net.minecraft.core.BlockPos) -> b
    130:130:boolean exists(net.minecraft.core.BlockPos,java.util.function.Predicate) -> a
    134:135:java.util.Optional getType(net.minecraft.core.BlockPos) -> c
    139:140:int getFreeTickets(net.minecraft.core.BlockPos) -> d
    144:145:int sectionsToVillage(net.minecraft.core.SectionPos) -> a
    152:157:boolean isVillageCenter(long) -> f
    162:164:void tick(java.util.function.BooleanSupplier) -> a
    168:170:void setDirty(long) -> a
    174:175:void onSectionLoad(long) -> b
    178:194:void checkConsistencyWithBlocks(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.LevelChunkSection) -> a
    197:197:boolean mayHavePoi(net.minecraft.world.level.chunk.LevelChunkSection) -> a
    201:209:void updateFromSection(net.minecraft.world.level.chunk.LevelChunkSection,net.minecraft.core.SectionPos,java.util.function.BiConsumer) -> a
    212:218:void ensureLoadedAndValid(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,int) -> a
    217:217:void lambda$ensureLoadedAndValid$22(net.minecraft.world.level.LevelReader,net.minecraft.world.level.ChunkPos) -> a
    216:216:boolean lambda$ensureLoadedAndValid$21(net.minecraft.world.level.ChunkPos) -> b
    215:215:net.minecraft.world.level.ChunkPos lambda$ensureLoadedAndValid$20(com.mojang.datafixers.util.Pair) -> a
    214:214:boolean lambda$ensureLoadedAndValid$19(com.mojang.datafixers.util.Pair) -> b
    213:213:com.mojang.datafixers.util.Pair lambda$ensureLoadedAndValid$18(net.minecraft.core.SectionPos) -> c
    202:208:void lambda$updateFromSection$17(net.minecraft.world.level.chunk.LevelChunkSection,java.util.function.BiConsumer,net.minecraft.core.BlockPos) -> a
    207:207:void lambda$null$16(java.util.function.BiConsumer,net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    188:192:void lambda$checkConsistencyWithBlocks$15(net.minecraft.world.level.chunk.LevelChunkSection,net.minecraft.core.SectionPos) -> a
    181:186:void lambda$checkConsistencyWithBlocks$14(net.minecraft.world.level.chunk.LevelChunkSection,net.minecraft.core.SectionPos,net.minecraft.world.entity.ai.village.poi.PoiSection) -> a
    182:185:void lambda$null$13(net.minecraft.world.level.chunk.LevelChunkSection,net.minecraft.core.SectionPos,java.util.function.BiConsumer) -> b
    157:157:java.lang.Boolean lambda$isVillageCenter$12(net.minecraft.world.entity.ai.village.poi.PoiSection) -> a
    130:130:java.lang.Boolean lambda$exists$11(net.minecraft.core.BlockPos,java.util.function.Predicate,net.minecraft.world.entity.ai.village.poi.PoiSection) -> a
    122:122:boolean lambda$getRandom$10(java.util.function.Predicate,net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    114:115:net.minecraft.core.BlockPos lambda$takeClosest$9(net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    111:111:boolean lambda$takeClosest$8(java.util.function.Predicate,net.minecraft.world.entity.ai.village.poi.PoiRecord) -> b
    110:110:double lambda$takeClosest$7(net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    102:103:net.minecraft.core.BlockPos lambda$take$6(net.minecraft.world.entity.ai.village.poi.PoiRecord) -> b
    99:99:boolean lambda$take$5(java.util.function.Predicate,net.minecraft.world.entity.ai.village.poi.PoiRecord) -> c
    92:92:double lambda$findClosest$4(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    75:75:java.util.stream.Stream lambda$getInSection$3(java.util.function.Predicate,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy,net.minecraft.world.entity.ai.village.poi.PoiSection) -> a
    71:71:java.util.stream.Stream lambda$getInChunk$2(java.util.function.Predicate,net.minecraft.world.level.ChunkPos,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy,java.lang.Integer) -> a
    66:66:boolean lambda$getInRange$1(net.minecraft.core.BlockPos,int,net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    61:61:java.util.stream.Stream lambda$getInSquare$0(java.util.function.Predicate,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy,net.minecraft.world.level.ChunkPos) -> a
    37:37:boolean access$000(net.minecraft.world.entity.ai.village.poi.PoiManager,long) -> a
net.minecraft.world.entity.ai.village.poi.PoiManager$DistanceTracker -> asr$a:
    it.unimi.dsi.fastutil.longs.Long2ByteMap levels -> b
    net.minecraft.world.entity.ai.village.poi.PoiManager this$0 -> a
    239:243:void <init>(net.minecraft.world.entity.ai.village.poi.PoiManager) -> <init>
    247:247:int getLevelFromSource(long) -> b
    252:252:int getLevel(long) -> c
    257:262:void setLevel(long,int) -> a
    265:266:void runAllUpdates() -> a
net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy -> asr$b:
    net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy HAS_SPACE -> a
    net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy IS_OCCUPIED -> b
    net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy ANY -> c
    java.util.function.Predicate test -> d
    net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy[] $VALUES -> e
    220:220:net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy[] values() -> values
    220:220:net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy valueOf(java.lang.String) -> valueOf
    227:229:void <init>(java.lang.String,int,java.util.function.Predicate) -> <init>
    232:232:java.util.function.Predicate getTest() -> a
    223:223:boolean lambda$static$0(net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    220:223:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.village.poi.PoiRecord -> ass:
    net.minecraft.core.BlockPos pos -> a
    net.minecraft.world.entity.ai.village.poi.PoiType poiType -> b
    int freeTickets -> c
    java.lang.Runnable setDirty -> d
    20:25:void <init>(net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiType,int,java.lang.Runnable) -> <init>
    28:29:void <init>(net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiType,java.lang.Runnable) -> <init>
    32:33:void <init>(com.mojang.datafixers.Dynamic,java.lang.Runnable) -> <init>
    37:40:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    47:47:int getFreeTickets() -> a
    51:57:boolean acquireTicket() -> b
    61:67:boolean releaseTicket() -> c
    71:71:boolean hasSpace() -> d
    75:75:boolean isOccupied() -> e
    79:79:net.minecraft.core.BlockPos getPos() -> f
    83:83:net.minecraft.world.entity.ai.village.poi.PoiType getPoiType() -> g
    88:95:boolean equals(java.lang.Object) -> equals
    100:100:int hashCode() -> hashCode
net.minecraft.world.entity.ai.village.poi.PoiSection -> ast:
    org.apache.logging.log4j.Logger LOGGER -> a
    it.unimi.dsi.fastutil.shorts.Short2ObjectMap records -> b
    java.util.Map byType -> c
    java.lang.Runnable setDirty -> d
    boolean isValid -> e
    31:39:void <init>(java.lang.Runnable) -> <init>
    31:54:void <init>(java.lang.Runnable,com.mojang.datafixers.Dynamic) -> <init>
    57:61:java.util.stream.Stream getRecords(java.util.function.Predicate,net.minecraft.world.entity.ai.village.poi.PoiManager$Occupancy) -> a
    66:70:void add(net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    73:88:boolean add(net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    92:101:void remove(net.minecraft.core.BlockPos) -> a
    106:108:int getFreeTickets(net.minecraft.core.BlockPos) -> b
    112:118:boolean release(net.minecraft.core.BlockPos) -> c
    122:124:boolean exists(net.minecraft.core.BlockPos,java.util.function.Predicate) -> a
    128:130:java.util.Optional getType(net.minecraft.core.BlockPos) -> d
    135:138:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    143:154:void refresh(java.util.function.Consumer) -> a
    157:159:void clear() -> b
    162:162:boolean isValid() -> a
    147:150:void lambda$refresh$8(it.unimi.dsi.fastutil.shorts.Short2ObjectMap,net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    148:148:net.minecraft.world.entity.ai.village.poi.PoiRecord lambda$null$7(net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiType,int) -> a
    135:135:java.lang.Object lambda$serialize$6(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    87:87:java.util.Set lambda$add$5(net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    67:67:java.lang.Object lambda$add$4(net.minecraft.core.BlockPos) -> e
    67:67:java.lang.Object lambda$add$3(net.minecraft.world.entity.ai.village.poi.PoiType) -> b
    60:60:java.util.stream.Stream lambda$getRecords$2(java.util.Map$Entry) -> a
    59:59:boolean lambda$getRecords$1(java.util.function.Predicate,java.util.Map$Entry) -> a
    45:45:void lambda$new$0(java.lang.Runnable,com.mojang.datafixers.Dynamic) -> a
    27:27:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.village.poi.PoiType -> asu:
    java.util.function.Predicate ALL_JOBS -> v
    java.util.function.Predicate ALL -> a
    java.util.Set BEDS -> w
    java.util.Map TYPE_BY_STATE -> x
    net.minecraft.world.entity.ai.village.poi.PoiType UNEMPLOYED -> b
    net.minecraft.world.entity.ai.village.poi.PoiType ARMORER -> c
    net.minecraft.world.entity.ai.village.poi.PoiType BUTCHER -> d
    net.minecraft.world.entity.ai.village.poi.PoiType CARTOGRAPHER -> e
    net.minecraft.world.entity.ai.village.poi.PoiType CLERIC -> f
    net.minecraft.world.entity.ai.village.poi.PoiType FARMER -> g
    net.minecraft.world.entity.ai.village.poi.PoiType FISHERMAN -> h
    net.minecraft.world.entity.ai.village.poi.PoiType FLETCHER -> i
    net.minecraft.world.entity.ai.village.poi.PoiType LEATHERWORKER -> j
    net.minecraft.world.entity.ai.village.poi.PoiType LIBRARIAN -> k
    net.minecraft.world.entity.ai.village.poi.PoiType MASON -> l
    net.minecraft.world.entity.ai.village.poi.PoiType NITWIT -> m
    net.minecraft.world.entity.ai.village.poi.PoiType SHEPHERD -> n
    net.minecraft.world.entity.ai.village.poi.PoiType TOOLSMITH -> o
    net.minecraft.world.entity.ai.village.poi.PoiType WEAPONSMITH -> p
    net.minecraft.world.entity.ai.village.poi.PoiType HOME -> q
    net.minecraft.world.entity.ai.village.poi.PoiType MEETING -> r
    net.minecraft.world.entity.ai.village.poi.PoiType BEEHIVE -> s
    net.minecraft.world.entity.ai.village.poi.PoiType BEE_NEST -> t
    net.minecraft.world.entity.ai.village.poi.PoiType NETHER_PORTAL -> u
    java.lang.String name -> y
    java.util.Set matchingStates -> z
    int maxTickets -> A
    java.util.function.Predicate predicate -> B
    int validRange -> C
    66:66:java.util.Set getBlockStates(net.minecraft.world.level.block.Block) -> a
    69:75:void <init>(java.lang.String,java.util.Set,int,java.util.function.Predicate,int) -> <init>
    77:83:void <init>(java.lang.String,java.util.Set,int,int) -> <init>
    86:86:java.lang.String getName() -> a
    90:90:int getMaxTickets() -> b
    94:94:java.util.function.Predicate getPredicate() -> c
    98:98:boolean is(net.minecraft.world.level.block.state.BlockState) -> a
    102:102:int getValidRange() -> d
    107:107:java.lang.String toString() -> toString
    111:111:net.minecraft.world.entity.ai.village.poi.PoiType register(java.lang.String,java.util.Set,int,int) -> a
    115:115:net.minecraft.world.entity.ai.village.poi.PoiType register(java.lang.String,java.util.Set,int,java.util.function.Predicate,int) -> a
    119:126:net.minecraft.world.entity.ai.village.poi.PoiType registerBlockStates(net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    130:130:java.util.Optional forState(net.minecraft.world.level.block.state.BlockState) -> b
    134:134:java.util.stream.Stream allPoiStates() -> e
    120:124:void lambda$registerBlockStates$5(net.minecraft.world.entity.ai.village.poi.PoiType,net.minecraft.world.level.block.state.BlockState) -> a
    81:81:boolean lambda$new$4(net.minecraft.world.entity.ai.village.poi.PoiType) -> b
    32:32:boolean lambda$static$3(net.minecraft.world.level.block.state.BlockState) -> c
    31:31:java.util.stream.Stream lambda$static$2(net.minecraft.world.level.block.Block) -> b
    26:26:boolean lambda$static$1(net.minecraft.world.entity.ai.village.poi.PoiType) -> c
    25:25:boolean lambda$static$0(net.minecraft.world.entity.ai.village.poi.PoiType) -> d
    25:57:void <clinit>() -> <clinit>
net.minecraft.world.entity.ai.village.poi.package-info -> asv:
net.minecraft.world.entity.ambient.AmbientCreature -> asw:
    10:11:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    15:15:boolean canBeLeashed(net.minecraft.world.entity.player.Player) -> a
net.minecraft.world.entity.ambient.Bat -> asx:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_FLAGS -> b
    net.minecraft.world.entity.ai.targeting.TargetingConditions BAT_RESTING_TARGETING -> c
    net.minecraft.core.BlockPos targetPosition -> d
    38:41:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    45:48:void defineSynchedData() -> w_
    52:52:float getSoundVolume() -> dm
    57:57:float getVoicePitch() -> dn
    63:66:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    71:71:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    76:76:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    82:82:boolean isPushable() -> aL
    88:88:void doPush(net.minecraft.world.entity.Entity) -> C
    93:93:void pushEntities() -> dv
    97:100:void registerAttributes() -> cA
    103:103:boolean isResting() -> l
    107:113:void setResting(boolean) -> r
    117:125:void tick() -> h
    129:178:void customServerAiStep() -> dT
    182:182:boolean isMovementNoisy() -> at
    187:187:boolean causeFallDamage(float,float) -> b
    194:194:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    198:198:boolean isIgnoringBlockTriggers() -> bH
    203:212:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    217:220:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    224:227:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    230:247:boolean checkBatSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    251:255:boolean isHalloween() -> eo
    260:260:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    31:33:void <clinit>() -> <clinit>
net.minecraft.world.entity.ambient.package-info -> asy:
net.minecraft.world.entity.animal.AbstractFish -> asz:
    net.minecraft.network.syncher.EntityDataAccessor FROM_BUCKET -> b
    42:45:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    49:49:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    54:57:void registerAttributes() -> cA
    61:61:boolean requiresCustomPersistence() -> I
    65:65:boolean checkFishSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    70:70:boolean removeWhenFarAway(double) -> h
    75:75:int getMaxSpawnClusterSize() -> dX
    80:83:void defineSynchedData() -> w_
    86:86:boolean fromBucket() -> es
    90:91:void setFromBucket(boolean) -> r
    95:98:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    102:105:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    109:114:void registerGoals() -> n
    118:118:net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level) -> b
    123:134:void travel(net.minecraft.world.phys.Vec3) -> e
    138:150:void aiStep() -> k
    154:177:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    181:184:void saveToBucketTag(net.minecraft.world.item.ItemStack) -> i
    net.minecraft.world.item.ItemStack getBucketItemStack() -> l
    203:203:boolean canRandomSwim() -> eq
    net.minecraft.sounds.SoundEvent getFlopSound() -> er
    247:247:net.minecraft.sounds.SoundEvent getSwimSound() -> am
    39:39:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.AbstractFish$FishMoveControl -> asz$a:
    net.minecraft.world.entity.animal.AbstractFish fish -> i
    210:212:void <init>(net.minecraft.world.entity.animal.AbstractFish) -> <init>
    216:240:void tick() -> a
net.minecraft.world.entity.animal.AbstractFish$FishSwimGoal -> asz$b:
    net.minecraft.world.entity.animal.AbstractFish fish -> h
    192:194:void <init>(net.minecraft.world.entity.animal.AbstractFish) -> <init>
    198:198:boolean canUse() -> a
net.minecraft.world.entity.animal.AbstractGolem -> ata:
    13:14:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    18:18:boolean causeFallDamage(float,float) -> b
    24:24:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    30:30:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    36:36:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    41:41:int getAmbientSoundInterval() -> A
    46:46:boolean removeWhenFarAway(double) -> h
net.minecraft.world.entity.animal.AbstractSchoolingFish -> atb:
    net.minecraft.world.entity.animal.AbstractSchoolingFish leader -> b
    int schoolSize -> c
    18:22:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    26:29:void registerGoals() -> n
    33:33:int getMaxSpawnClusterSize() -> dX
    37:37:int getMaxSchoolSize() -> es
    42:42:boolean canRandomSwim() -> eq
    46:46:boolean isFollower() -> et
    50:53:net.minecraft.world.entity.animal.AbstractSchoolingFish startFollowing(net.minecraft.world.entity.animal.AbstractSchoolingFish) -> a
    57:59:void stopFollowing() -> eu
    62:63:void addFollower() -> ez
    66:67:void removeFollower() -> eA
    70:70:boolean canBeFollowed() -> ev
    75:84:void tick() -> h
    87:87:boolean hasFollowers() -> ew
    91:91:boolean inRangeOfLeader() -> ex
    95:98:void pathToLeader() -> ey
    101:102:void addFollowers(java.util.stream.Stream) -> a
    107:115:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    101:101:void lambda$addFollowers$1(net.minecraft.world.entity.animal.AbstractSchoolingFish) -> b
    101:101:boolean lambda$addFollowers$0(net.minecraft.world.entity.animal.AbstractSchoolingFish) -> c
net.minecraft.world.entity.animal.AbstractSchoolingFish$SchoolSpawnGroupData -> atb$a:
    net.minecraft.world.entity.animal.AbstractSchoolingFish leader -> a
    121:123:void <init>(net.minecraft.world.entity.animal.AbstractSchoolingFish) -> <init>
net.minecraft.world.entity.animal.Animal -> atc:
    int inLove -> bw
    java.util.UUID loveCause -> bx
    31:32:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    36:40:void customServerAiStep() -> dT
    44:59:void aiStep() -> k
    63:67:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    72:75:float getWalkTargetValue(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader) -> a
    80:85:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    89:89:double getRidingHeight() -> aR
    94:97:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    100:101:boolean checkAnimalSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    106:106:int getAmbientSoundInterval() -> A
    111:111:boolean removeWhenFarAway(double) -> h
    116:116:int getExperienceReward(net.minecraft.world.entity.player.Player) -> d
    120:120:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    125:143:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    147:150:void usePlayerItem(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    153:153:boolean canFallInLove() -> ev
    157:164:void setInLove(net.minecraft.world.entity.player.Player) -> f
    167:168:void setInLoveTime(int) -> s
    172:179:net.minecraft.server.level.ServerPlayer getLoveCause() -> ew
    184:184:boolean isInLove() -> ex
    188:189:void resetLove() -> ey
    192:198:boolean canMate(net.minecraft.world.entity.animal.Animal) -> a
    203:213:void handleEntityEvent(byte) -> a
net.minecraft.world.entity.animal.Bee -> atd:
    net.minecraft.network.syncher.EntityDataAccessor DATA_FLAGS_ID -> bw
    net.minecraft.network.syncher.EntityDataAccessor ANGER_TIME -> bx
    java.util.UUID lastHurtByUUID -> by
    float rollAmount -> bz
    float rollAmountO -> bA
    int timeSinceSting -> bB
    int ticksWithoutNectarSinceExitingHive -> bC
    int stayOutOfHiveCountdown -> bD
    int numCropsGrownSincePollination -> bE
    int remainingCooldownBeforeLocatingNewHive -> bF
    int remainingCooldownBeforeLocatingNewFlower -> bG
    net.minecraft.core.BlockPos savedFlowerPos -> bH
    net.minecraft.core.BlockPos hivePos -> bI
    net.minecraft.world.entity.animal.Bee$BeePollinateGoal beePollinateGoal -> bJ
    net.minecraft.world.entity.animal.Bee$BeeGoToHiveGoal goToHiveGoal -> bK
    net.minecraft.world.entity.animal.Bee$BeeGoToKnownFlowerGoal goToKnownFlowerGoal -> bL
    int underWaterTicks -> bM
    144:169:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    173:176:void defineSynchedData() -> w_
    181:184:float getWalkTargetValue(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader) -> a
    189:213:void registerGoals() -> n
    217:237:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    241:270:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    274:295:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    300:310:void tick() -> h
    313:314:void spawnFluidParticle(net.minecraft.world.level.Level,double,double,double,double,double,net.minecraft.core.particles.ParticleOptions) -> a
    317:341:void pathfindRandomlyTowards(net.minecraft.core.BlockPos) -> h
    345:345:net.minecraft.core.BlockPos getSavedFlowerPos() -> eq
    349:349:boolean hasSavedFlowerPos() -> er
    353:354:void setSavedFlowerPos(net.minecraft.core.BlockPos) -> g
    358:358:int getTravellingTicks() -> es
    363:363:java.util.List getBlacklistedHives() -> et
    367:367:boolean isTiredOfLookingForNectar() -> eH
    372:380:boolean wantsToEnterHive() -> eI
    384:385:void setStayOutOfHiveCountdown(int) -> t
    388:388:float getRollAmount(float) -> v
    392:398:void updateRollAmount() -> eJ
    402:406:void setLastHurtByMob(net.minecraft.world.entity.LivingEntity) -> a
    410:446:void customServerAiStep() -> dT
    449:450:void resetTicksWithoutNectarSinceExitingHive() -> eu
    453:457:boolean isHiveNearFire() -> eK
    461:461:boolean isAngry() -> ez
    465:465:int getAngerTime() -> eL
    469:470:void setAngerTime(int) -> u
    473:477:boolean doesHiveHaveSpace(net.minecraft.core.BlockPos) -> i
    482:482:boolean hasHive() -> eA
    488:488:net.minecraft.core.BlockPos getHivePos() -> eB
    493:493:net.minecraft.world.entity.ai.goal.GoalSelector getGoalSelector() -> eC
    498:501:void sendDebugPackets() -> K
    504:504:int getCropsGrownSincePollination() -> eM
    508:509:void resetNumCropsGrownSincePollination() -> eN
    512:513:void incrementNumCropsGrownSincePollination() -> eO
    517:541:void aiStep() -> k
    544:548:boolean isHiveValid() -> eP
    552:552:boolean hasNectar() -> eD
    556:560:void setHasNectar(boolean) -> r
    563:563:boolean hasStung() -> eE
    567:568:void setHasStung(boolean) -> s
    571:571:boolean isRolling() -> eQ
    575:576:void setRolling(boolean) -> t
    579:579:boolean isTooFarAway(net.minecraft.core.BlockPos) -> j
    583:588:void setFlag(int,boolean) -> d
    591:591:boolean getFlag(int) -> v
    596:605:void registerAttributes() -> cA
    609:627:net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level) -> b
    632:632:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    636:636:boolean isFlowerValid(net.minecraft.core.BlockPos) -> k
    642:642:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    646:646:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    651:651:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    656:656:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    661:661:float getSoundVolume() -> dm
    666:666:net.minecraft.world.entity.animal.Bee getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    671:674:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    679:679:boolean causeFallDamage(float,float) -> b
    685:685:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    689:689:boolean makeFlySound() -> aq
    694:694:boolean isFlying() -> eF
    698:700:void dropOffNectar() -> eG
    703:708:boolean makeAngry(net.minecraft.world.entity.Entity) -> a
    713:721:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    726:726:net.minecraft.world.entity.MobType getMobType() -> di
    731:732:void jumpInLiquid(net.minecraft.tags.Tag) -> c
    735:735:boolean closerThan(net.minecraft.core.BlockPos,int) -> b
    86:86:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    86:86:net.minecraft.world.entity.animal.Bee$BeePollinateGoal access$700(net.minecraft.world.entity.animal.Bee) -> a
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$900(net.minecraft.world.entity.animal.Bee) -> b
    86:86:java.util.Random access$1000(net.minecraft.world.entity.animal.Bee) -> c
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$1100(net.minecraft.world.entity.animal.Bee) -> d
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$1200(net.minecraft.world.entity.animal.Bee) -> e
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$1300(net.minecraft.world.entity.animal.Bee) -> f
    86:86:boolean access$1400(net.minecraft.world.entity.animal.Bee) -> g
    86:86:net.minecraft.core.BlockPos access$1500(net.minecraft.world.entity.animal.Bee) -> h
    86:86:boolean access$1600(net.minecraft.world.entity.animal.Bee,net.minecraft.core.BlockPos,int) -> a
    86:86:boolean access$1800(net.minecraft.world.entity.animal.Bee) -> i
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$1900(net.minecraft.world.entity.animal.Bee) -> j
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$2000(net.minecraft.world.entity.animal.Bee) -> k
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$2100(net.minecraft.world.entity.animal.Bee) -> l
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$2200(net.minecraft.world.entity.animal.Bee) -> m
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$2300(net.minecraft.world.entity.animal.Bee) -> n
    86:86:boolean access$2400(net.minecraft.world.entity.animal.Bee,net.minecraft.core.BlockPos) -> a
    86:86:void access$2500(net.minecraft.world.entity.animal.Bee,net.minecraft.core.BlockPos) -> b
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$2600(net.minecraft.world.entity.animal.Bee) -> o
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$2700(net.minecraft.world.entity.animal.Bee) -> p
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$2800(net.minecraft.world.entity.animal.Bee) -> q
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$2900(net.minecraft.world.entity.animal.Bee) -> r
    86:86:net.minecraft.core.BlockPos access$1502(net.minecraft.world.entity.animal.Bee,net.minecraft.core.BlockPos) -> c
    86:86:int access$3002(net.minecraft.world.entity.animal.Bee,int) -> a
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$3100(net.minecraft.world.entity.animal.Bee) -> s
    86:86:net.minecraft.core.BlockPos access$3200(net.minecraft.world.entity.animal.Bee) -> t
    86:86:boolean access$3300(net.minecraft.world.entity.animal.Bee,net.minecraft.core.BlockPos) -> d
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$3400(net.minecraft.world.entity.animal.Bee) -> u
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$3500(net.minecraft.world.entity.animal.Bee) -> v
    86:86:net.minecraft.core.BlockPos access$3202(net.minecraft.world.entity.animal.Bee,net.minecraft.core.BlockPos) -> e
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$3600(net.minecraft.world.entity.animal.Bee) -> w
    86:86:int access$3700(net.minecraft.world.entity.animal.Bee) -> x
    86:86:int access$3800(net.minecraft.world.entity.animal.Bee) -> y
    86:86:java.util.Random access$3900(net.minecraft.world.entity.animal.Bee) -> z
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$4000(net.minecraft.world.entity.animal.Bee) -> A
    86:86:java.util.Random access$4100(net.minecraft.world.entity.animal.Bee) -> B
    86:86:void access$4200(net.minecraft.world.entity.animal.Bee,boolean) -> a
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$4300(net.minecraft.world.entity.animal.Bee) -> C
    86:86:int access$3802(net.minecraft.world.entity.animal.Bee,int) -> b
    86:86:java.util.Random access$4400(net.minecraft.world.entity.animal.Bee) -> D
    86:86:net.minecraft.world.entity.ai.navigation.PathNavigation access$4500(net.minecraft.world.entity.animal.Bee) -> E
    86:86:java.util.Random access$4600(net.minecraft.world.entity.animal.Bee) -> F
    86:86:java.util.Random access$4700(net.minecraft.world.entity.animal.Bee) -> G
    86:86:int access$3000(net.minecraft.world.entity.animal.Bee) -> H
    86:86:net.minecraft.world.entity.animal.Bee$BeeGoToHiveGoal access$4800(net.minecraft.world.entity.animal.Bee) -> I
    86:86:boolean access$5100(net.minecraft.world.entity.animal.Bee,net.minecraft.core.BlockPos) -> f
    86:86:int access$5200(net.minecraft.world.entity.animal.Bee) -> J
    86:86:java.util.Random access$5300(net.minecraft.world.entity.animal.Bee) -> K
    86:86:java.util.Random access$5400(net.minecraft.world.entity.animal.Bee) -> L
    86:86:void access$5500(net.minecraft.world.entity.animal.Bee) -> M
    88:89:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Bee$1 -> atd$1:
    net.minecraft.world.entity.animal.Bee this$0 -> p
    609:609:void <init>(net.minecraft.world.entity.animal.Bee,net.minecraft.world.entity.Mob,net.minecraft.world.level.Level) -> <init>
    612:612:boolean isStableDestination(net.minecraft.core.BlockPos) -> a
    617:622:void tick() -> c
net.minecraft.world.entity.animal.Bee$BaseBeeGoal -> atd$a:
    net.minecraft.world.entity.animal.Bee this$0 -> a
    778:778:void <init>(net.minecraft.world.entity.animal.Bee) -> <init>
    boolean canBeeUse() -> g
    boolean canBeeContinueToUse() -> h
    785:785:boolean canUse() -> a
    790:790:boolean canContinueToUse() -> b
    778:778:void <init>(net.minecraft.world.entity.animal.Bee,net.minecraft.world.entity.animal.Bee$1) -> <init>
net.minecraft.world.entity.animal.Bee$BeeAttackGoal -> atd$b:
    net.minecraft.world.entity.animal.Bee this$0 -> d
    1411:1413:void <init>(net.minecraft.world.entity.animal.Bee,net.minecraft.world.entity.PathfinderMob,double,boolean) -> <init>
    1417:1417:boolean canUse() -> a
    1422:1422:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Bee$BeeBecomeAngryTargetGoal -> atd$c:
    753:754:void <init>(net.minecraft.world.entity.animal.Bee) -> <init>
    758:758:boolean canUse() -> a
    763:768:boolean canContinueToUse() -> b
    772:773:boolean beeCanTarget() -> h
net.minecraft.world.entity.animal.Bee$BeeEnterHiveGoal -> atd$d:
    net.minecraft.world.entity.animal.Bee this$0 -> b
    1429:1429:void <init>(net.minecraft.world.entity.animal.Bee) -> <init>
    1432:1443:boolean canBeeUse() -> g
    1448:1448:boolean canBeeContinueToUse() -> h
    1453:1458:void start() -> c
    1429:1429:void <init>(net.minecraft.world.entity.animal.Bee,net.minecraft.world.entity.animal.Bee$1) -> <init>
net.minecraft.world.entity.animal.Bee$BeeGoToHiveGoal -> atd$e:
    int travellingTicks -> c
    java.util.List blacklistedTargets -> d
    net.minecraft.world.level.pathfinder.Path lastPath -> e
    net.minecraft.world.entity.animal.Bee this$0 -> b
    852:862:void <init>(net.minecraft.world.entity.animal.Bee) -> <init>
    866:870:boolean canBeeUse() -> g
    875:875:boolean canBeeContinueToUse() -> h
    880:882:void start() -> c
    886:889:void stop() -> d
    893:944:void tick() -> e
    950:952:boolean pathfindDirectlyTowards(net.minecraft.core.BlockPos) -> a
    956:956:boolean isTargetBlacklisted(net.minecraft.core.BlockPos) -> b
    960:964:void blacklistTarget(net.minecraft.core.BlockPos) -> c
    967:968:void clearBlacklist() -> j
    971:975:void dropAndBlacklistHive() -> k
    978:980:void dropHive() -> l
    983:987:boolean hasReachedTarget(net.minecraft.core.BlockPos) -> d
    846:846:boolean canContinueToUse() -> b
    846:846:boolean canUse() -> a
    847:847:int access$300(net.minecraft.world.entity.animal.Bee$BeeGoToHiveGoal) -> a
    847:847:java.util.List access$500(net.minecraft.world.entity.animal.Bee$BeeGoToHiveGoal) -> b
    847:847:boolean access$4900(net.minecraft.world.entity.animal.Bee$BeeGoToHiveGoal,net.minecraft.core.BlockPos) -> a
    847:847:void access$5000(net.minecraft.world.entity.animal.Bee$BeeGoToHiveGoal) -> c
net.minecraft.world.entity.animal.Bee$BeeGoToKnownFlowerGoal -> atd$f:
    int travellingTicks -> c
    net.minecraft.world.entity.animal.Bee this$0 -> b
    1000:1004:void <init>(net.minecraft.world.entity.animal.Bee) -> <init>
    1008:1012:boolean canBeeUse() -> g
    1017:1017:boolean canBeeContinueToUse() -> h
    1022:1024:void start() -> c
    1028:1031:void stop() -> d
    1035:1061:void tick() -> e
    1064:1064:boolean wantsToGoToKnownFlower() -> j
    995:995:boolean canContinueToUse() -> b
    995:995:boolean canUse() -> a
    995:995:int access$400(net.minecraft.world.entity.animal.Bee$BeeGoToKnownFlowerGoal) -> a
net.minecraft.world.entity.animal.Bee$BeeGrowCropGoal -> atd$g:
    net.minecraft.world.entity.animal.Bee this$0 -> b
    1343:1343:void <init>(net.minecraft.world.entity.animal.Bee) -> <init>
    1349:1358:boolean canBeeUse() -> g
    1363:1363:boolean canBeeContinueToUse() -> h
    1368:1406:void tick() -> e
    1343:1343:void <init>(net.minecraft.world.entity.animal.Bee,net.minecraft.world.entity.animal.Bee$1) -> <init>
net.minecraft.world.entity.animal.Bee$BeeHurtByOtherGoal -> atd$h:
    net.minecraft.world.entity.animal.Bee this$0 -> a
    739:741:void <init>(net.minecraft.world.entity.animal.Bee,net.minecraft.world.entity.animal.Bee) -> <init>
    745:748:void alertOther(net.minecraft.world.entity.Mob,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.animal.Bee$BeeLocateHiveGoal -> atd$i:
    net.minecraft.world.entity.animal.Bee this$0 -> b
    1291:1291:void <init>(net.minecraft.world.entity.animal.Bee) -> <init>
    1294:1296:boolean canBeeUse() -> g
    1301:1301:boolean canBeeContinueToUse() -> h
    1306:1331:void start() -> c
    1334:1339:java.util.List findNearbyHivesWithSpace() -> j
    1339:1339:double lambda$findNearbyHivesWithSpace$2(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    1338:1338:boolean lambda$findNearbyHivesWithSpace$1(net.minecraft.world.entity.animal.Bee,net.minecraft.core.BlockPos) -> a
    1336:1336:boolean lambda$findNearbyHivesWithSpace$0(net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    1291:1291:void <init>(net.minecraft.world.entity.animal.Bee,net.minecraft.world.entity.animal.Bee$1) -> <init>
net.minecraft.world.entity.animal.Bee$BeeLookControl -> atd$j:
    net.minecraft.world.entity.animal.Bee this$0 -> h
    1069:1071:void <init>(net.minecraft.world.entity.animal.Bee,net.minecraft.world.entity.Mob) -> <init>
    1075:1079:void tick() -> a
    1083:1083:boolean resetXRotOnTick() -> b
net.minecraft.world.entity.animal.Bee$BeePollinateGoal -> atd$k:
    java.util.function.Predicate VALID_POLLINATION_BLOCKS -> c
    int successfulPollinatingTicks -> d
    int lastSoundPlayedTick -> e
    boolean pollinating -> f
    net.minecraft.world.phys.Vec3 hoverPos -> g
    int pollinatingTicks -> h
    net.minecraft.world.entity.animal.Bee this$0 -> b
    1092:1117:void <init>(net.minecraft.world.entity.animal.Bee) -> <init>
    1121:1141:boolean canBeeUse() -> g
    1146:1163:boolean canBeeContinueToUse() -> h
    1167:1167:boolean hasPollinatedLongEnough() -> j
    1171:1171:boolean isPollinating() -> k
    1175:1176:void stopPollinating() -> l
    1180:1185:void start() -> c
    1189:1196:void stop() -> d
    1200:1251:void tick() -> e
    1254:1255:void setWantedPos() -> m
    1258:1258:float getOffset() -> n
    1262:1262:java.util.Optional findNearbyFlower() -> o
    1266:1284:java.util.Optional findNearestBlock(java.util.function.Predicate,double) -> a
    1093:1099:boolean lambda$new$0(net.minecraft.world.level.block.state.BlockState) -> a
    1090:1090:boolean access$600(net.minecraft.world.entity.animal.Bee$BeePollinateGoal) -> a
    1090:1090:void access$800(net.minecraft.world.entity.animal.Bee$BeePollinateGoal) -> b
net.minecraft.world.entity.animal.Bee$BeeWanderGoal -> atd$l:
    net.minecraft.world.entity.animal.Bee this$0 -> a
    798:800:void <init>(net.minecraft.world.entity.animal.Bee) -> <init>
    804:804:boolean canUse() -> a
    809:809:boolean canContinueToUse() -> b
    814:818:void start() -> c
    824:839:net.minecraft.world.phys.Vec3 findPos() -> g
net.minecraft.world.entity.animal.Cat -> ate:
    net.minecraft.world.item.crafting.Ingredient TEMPT_INGREDIENT -> bA
    net.minecraft.network.syncher.EntityDataAccessor DATA_TYPE_ID -> bB
    net.minecraft.network.syncher.EntityDataAccessor IS_LYING -> bC
    net.minecraft.network.syncher.EntityDataAccessor RELAX_STATE_ONE -> bD
    net.minecraft.network.syncher.EntityDataAccessor DATA_COLLAR_COLOR -> bE
    java.util.Map TEXTURE_BY_TYPE -> bz
    net.minecraft.world.entity.animal.Cat$CatAvoidEntityGoal avoidPlayersGoal -> bF
    net.minecraft.world.entity.ai.goal.TemptGoal temptGoal -> bG
    float lieDownAmount -> bH
    float lieDownAmountO -> bI
    float lieDownAmountTail -> bJ
    float lieDownAmountOTail -> bK
    float relaxStateOneAmount -> bL
    float relaxStateOneAmountO -> bM
    126:127:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    130:130:net.minecraft.resources.ResourceLocation getResourceLocation() -> ez
    135:153:void registerGoals() -> n
    156:156:int getCatType() -> eA
    160:165:void setCatType(int) -> t
    168:169:void setLying(boolean) -> u
    172:172:boolean isLying() -> eB
    176:177:void setRelaxStateOne(boolean) -> v
    180:180:boolean isRelaxStateOne() -> eC
    184:184:net.minecraft.world.item.DyeColor getCollarColor() -> eD
    188:189:void setCollarColor(net.minecraft.world.item.DyeColor) -> a
    193:199:void defineSynchedData() -> w_
    203:206:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    210:215:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    219:235:void customServerAiStep() -> dT
    240:250:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    255:255:int getAmbientSoundInterval() -> A
    259:260:void hiss() -> eE
    264:264:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    269:269:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    274:279:void registerAttributes() -> cA
    283:283:boolean causeFallDamage(float,float) -> b
    288:292:void usePlayerItem(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    295:295:float getAttackDamage() -> eF
    300:300:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    305:311:void tick() -> h
    314:319:void handleLieDown() -> eG
    322:331:void updateLieDownAmount() -> eH
    334:340:void updateRelaxStateOneAmount() -> eI
    343:343:float getLieDownAmount(float) -> v
    347:347:float getLieDownAmountTail(float) -> w
    351:351:float getRelaxStateOneAmount(float) -> x
    356:375:net.minecraft.world.entity.animal.Cat getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    380:389:boolean canMate(net.minecraft.world.entity.animal.Animal) -> a
    395:409:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    414:475:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    480:480:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    485:485:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    490:490:boolean removeWhenFarAway(double) -> h
    495:504:void reassessTameGoals() -> er
    74:74:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    102:113:void lambda$static$0(java.util.HashMap) -> a
    79:101:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Cat$CatAvoidEntityGoal -> ate$a:
    net.minecraft.world.entity.animal.Cat cat -> i
    510:512:void <init>(net.minecraft.world.entity.animal.Cat,java.lang.Class,float,double,double) -> <init>
    516:516:boolean canUse() -> a
    521:521:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Cat$CatRelaxOnOwnerGoal -> ate$b:
    net.minecraft.world.entity.animal.Cat cat -> a
    net.minecraft.world.entity.player.Player ownerPlayer -> b
    net.minecraft.core.BlockPos goalPos -> c
    int onBedTicks -> d
    567:569:void <init>(net.minecraft.world.entity.animal.Cat) -> <init>
    573:602:boolean canUse() -> a
    606:613:boolean spaceIsOccupied() -> g
    618:618:boolean canContinueToUse() -> b
    623:627:void start() -> c
    631:641:void stop() -> d
    644:659:void giveMorningGift() -> h
    663:679:void tick() -> e
net.minecraft.world.entity.animal.Cat$CatTemptGoal -> ate$c:
    net.minecraft.world.entity.player.Player selectedPlayer -> c
    net.minecraft.world.entity.animal.Cat cat -> d
    531:533:void <init>(net.minecraft.world.entity.animal.Cat,double,net.minecraft.world.item.crafting.Ingredient,boolean) -> <init>
    537:544:void tick() -> e
    548:552:boolean canScare() -> g
    557:557:boolean canUse() -> a
net.minecraft.world.entity.animal.Chicken -> atf:
    net.minecraft.world.item.crafting.Ingredient FOOD_ITEMS -> bD
    float flap -> bw
    float flapSpeed -> bx
    float oFlapSpeed -> by
    float oFlap -> bz
    float flapping -> bA
    int eggTime -> bB
    boolean isChickenJockey -> bC
    41:51:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    55:63:void registerGoals() -> n
    67:67:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    72:76:void registerAttributes() -> cA
    80:105:void aiStep() -> k
    109:109:boolean causeFallDamage(float,float) -> b
    114:114:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    119:119:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    124:124:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    129:130:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    134:134:net.minecraft.world.entity.animal.Chicken getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    139:139:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    144:147:int getExperienceReward(net.minecraft.world.entity.player.Player) -> d
    152:157:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    161:164:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    168:168:boolean removeWhenFarAway(double) -> h
    173:183:void positionRider(net.minecraft.world.entity.Entity) -> k
    186:186:boolean isChickenJockey() -> eq
    190:191:void setChickenJockey(boolean) -> r
    34:34:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    35:35:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Cod -> atg:
    13:14:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    18:18:net.minecraft.world.item.ItemStack getBucketItemStack() -> l
    23:23:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    28:28:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    33:33:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    38:38:net.minecraft.sounds.SoundEvent getFlopSound() -> er
net.minecraft.world.entity.animal.Cow -> ath:
    30:31:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    35:43:void registerGoals() -> n
    47:51:void registerAttributes() -> cA
    55:55:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    60:60:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    65:65:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    70:71:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    75:75:float getSoundVolume() -> dm
    80:94:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    99:99:net.minecraft.world.entity.animal.Cow getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    104:107:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    28:28:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
net.minecraft.world.entity.animal.Dolphin -> ati:
    net.minecraft.network.syncher.EntityDataAccessor TREASURE_POS -> c
    net.minecraft.network.syncher.EntityDataAccessor GOT_FISH -> d
    net.minecraft.network.syncher.EntityDataAccessor MOISNTESS_LEVEL -> bw
    net.minecraft.world.entity.ai.targeting.TargetingConditions SWIM_WITH_PLAYER_TARGETING -> bx
    java.util.function.Predicate ALLOWED_ITEMS -> b
    79:85:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    90:93:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    98:98:boolean canBreatheUnderwater() -> cB
    105:105:void handleAirSupply(int) -> a
    108:109:void setTreasurePos(net.minecraft.core.BlockPos) -> g
    112:112:net.minecraft.core.BlockPos getTreasurePos() -> l
    116:116:boolean gotFish() -> eq
    120:121:void setGotFish(boolean) -> r
    124:124:int getMoistnessLevel() -> er
    128:129:void setMoisntessLevel(int) -> b
    133:137:void defineSynchedData() -> w_
    141:148:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    152:160:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    164:178:void registerGoals() -> n
    182:188:void registerAttributes() -> cA
    192:192:net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level) -> b
    198:203:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    208:208:int getMaxAirSupply() -> bw
    213:213:int increaseAirSupply(int) -> m
    218:218:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    223:223:int getMaxHeadXRot() -> dU
    228:228:int getMaxHeadYRot() -> dV
    233:233:boolean canRide(net.minecraft.world.entity.Entity) -> n
    238:242:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> e
    247:256:void pickUpItem(net.minecraft.world.entity.item.ItemEntity) -> a
    260:297:void tick() -> h
    301:306:void handleEntityEvent(byte) -> a
    309:315:void addParticlesAroundSelf(net.minecraft.core.particles.ParticleOptions) -> a
    319:335:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    339:341:boolean checkDolphinSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    346:346:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    352:352:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    358:358:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    363:363:net.minecraft.sounds.SoundEvent getSwimSplashSound() -> an
    368:368:net.minecraft.sounds.SoundEvent getSwimSound() -> am
    372:376:boolean closeToNextPos() -> es
    381:393:void travel(net.minecraft.world.phys.Vec3) -> e
    397:397:boolean canBeLeashed(net.minecraft.world.entity.player.Player) -> a
    76:76:boolean lambda$static$0(net.minecraft.world.entity.item.ItemEntity) -> b
    67:67:java.util.Random access$100(net.minecraft.world.entity.animal.Dolphin) -> a
    67:67:java.util.Random access$200(net.minecraft.world.entity.animal.Dolphin) -> b
    67:67:java.util.Random access$300(net.minecraft.world.entity.animal.Dolphin) -> c
    67:67:net.minecraft.world.entity.ai.targeting.TargetingConditions access$400() -> et
    68:76:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Dolphin$1 -> ati$1:
net.minecraft.world.entity.animal.Dolphin$DolphinMoveControl -> ati$a:
    net.minecraft.world.entity.animal.Dolphin dolphin -> i
    407:409:void <init>(net.minecraft.world.entity.animal.Dolphin) -> <init>
    413:457:void tick() -> a
net.minecraft.world.entity.animal.Dolphin$DolphinSwimToTreasureGoal -> ati$b:
    net.minecraft.world.entity.animal.Dolphin dolphin -> a
    boolean stuck -> b
    584:587:void <init>(net.minecraft.world.entity.animal.Dolphin) -> <init>
    591:591:boolean isInterruptable() -> E_
    596:596:boolean canUse() -> a
    601:602:boolean canContinueToUse() -> b
    607:632:void start() -> c
    636:640:void stop() -> d
    644:672:void tick() -> e
net.minecraft.world.entity.animal.Dolphin$DolphinSwimWithPlayerGoal -> ati$c:
    net.minecraft.world.entity.animal.Dolphin dolphin -> a
    double speedModifier -> b
    net.minecraft.world.entity.player.Player player -> c
    534:538:void <init>(net.minecraft.world.entity.animal.Dolphin,double) -> <init>
    542:546:boolean canUse() -> a
    551:551:boolean canContinueToUse() -> b
    556:557:void start() -> c
    561:563:void stop() -> d
    567:577:void tick() -> e
net.minecraft.world.entity.animal.Dolphin$PlayWithItemsGoal -> ati$d:
    int cooldown -> b
    net.minecraft.world.entity.animal.Dolphin this$0 -> a
    460:460:void <init>(net.minecraft.world.entity.animal.Dolphin) -> <init>
    465:469:boolean canUse() -> a
    474:480:void start() -> c
    484:490:void stop() -> d
    494:503:void tick() -> e
    506:526:void drop(net.minecraft.world.item.ItemStack) -> a
    460:460:void <init>(net.minecraft.world.entity.animal.Dolphin,net.minecraft.world.entity.animal.Dolphin$1) -> <init>
net.minecraft.world.entity.animal.FlyingAnimal -> atj:
    boolean isFlying() -> eF
net.minecraft.world.entity.animal.Fox -> atk:
    net.minecraft.network.syncher.EntityDataAccessor DATA_TYPE_ID -> bw
    net.minecraft.network.syncher.EntityDataAccessor DATA_FLAGS_ID -> bx
    net.minecraft.network.syncher.EntityDataAccessor DATA_TRUSTED_ID_0 -> by
    net.minecraft.network.syncher.EntityDataAccessor DATA_TRUSTED_ID_1 -> bz
    java.util.function.Predicate ALLOWED_ITEMS -> bA
    java.util.function.Predicate TRUSTED_TARGET_SELECTOR -> bB
    java.util.function.Predicate STALKABLE_PREY -> bC
    java.util.function.Predicate AVOID_PLAYERS -> bD
    net.minecraft.world.entity.ai.goal.Goal landTargetGoal -> bE
    net.minecraft.world.entity.ai.goal.Goal turtleEggTargetGoal -> bF
    net.minecraft.world.entity.ai.goal.Goal fishTargetGoal -> bG
    float interestedAngle -> bH
    float interestedAngleO -> bI
    float crouchAmount -> bJ
    float crouchAmountO -> bK
    int ticksSinceEaten -> bL
    177:186:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    190:195:void defineSynchedData() -> w_
    199:224:void registerGoals() -> n
    228:228:net.minecraft.sounds.SoundEvent getEatingSound(net.minecraft.world.item.ItemStack) -> d
    233:271:void aiStep() -> k
    275:275:boolean isImmobile() -> do
    279:279:boolean canEat(net.minecraft.world.item.ItemStack) -> j
    284:302:void populateDefaultEquipmentSlots(net.minecraft.world.DifficultyInstance) -> a
    306:320:void handleEntityEvent(byte) -> a
    324:330:void registerAttributes() -> cA
    334:336:net.minecraft.world.entity.animal.Fox getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    342:364:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    369:378:void setTargetGoals() -> eD
    382:386:void usePlayerItem(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    390:393:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    397:397:net.minecraft.world.entity.animal.Fox$Type getFoxType() -> eq
    401:402:void setFoxType(net.minecraft.world.entity.animal.Fox$Type) -> a
    405:408:java.util.List getTrustedUUIDs() -> eE
    412:417:void addTrustedUUID(java.util.UUID) -> b
    421:434:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    438:449:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    452:452:boolean isSitting() -> er
    456:457:void setSitting(boolean) -> r
    460:460:boolean isFaceplanted() -> es
    464:465:void setFaceplanted(boolean) -> v
    468:468:boolean isDefending() -> eF
    472:473:void setDefending(boolean) -> w
    477:477:boolean isSleeping() -> dQ
    481:482:void setSleeping(boolean) -> x
    485:490:void setFlag(int,boolean) -> d
    493:493:boolean getFlag(int) -> t
    498:502:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> e
    507:510:boolean canHoldItem(net.minecraft.world.item.ItemStack) -> g
    514:524:void spitOutItem(net.minecraft.world.item.ItemStack) -> k
    527:529:void dropItemStack(net.minecraft.world.item.ItemStack) -> l
    533:548:void pickUpItem(net.minecraft.world.entity.item.ItemEntity) -> a
    552:587:void tick() -> h
    591:591:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    596:597:void onOffspringSpawnedFromEgg(net.minecraft.world.entity.player.Player,net.minecraft.world.entity.AgableMob) -> a
    600:600:boolean isPouncing() -> et
    604:605:void setIsPouncing(boolean) -> s
    608:608:boolean isJumping() -> eu
    612:612:boolean isFullyCrouched() -> ez
    616:617:void setIsCrouching(boolean) -> t
    621:621:boolean isCrouching() -> bo
    625:626:void setIsInterested(boolean) -> u
    629:629:boolean isInterested() -> eA
    633:633:float getHeadRollAngle(float) -> v
    637:637:float getCrouchAmount(float) -> w
    642:646:void setTarget(net.minecraft.world.entity.LivingEntity) -> h
    650:650:int calculateFallDamage(float,float) -> e
    654:655:void wakeUp() -> eG
    658:664:void clearStates() -> eH
    667:667:boolean canMove() -> eI
    672:679:void playAmbientSound() -> B
    684:693:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    699:699:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    705:705:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    709:709:boolean trusts(java.util.UUID) -> c
    714:722:void dropAllDeathLoot(net.minecraft.world.damagesource.DamageSource) -> d
    725:740:boolean isPathClear(net.minecraft.world.entity.animal.Fox,net.minecraft.world.entity.LivingEntity) -> a
    88:88:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    223:223:boolean lambda$registerGoals$8(net.minecraft.world.entity.LivingEntity) -> i
    208:208:boolean lambda$registerGoals$7(net.minecraft.world.entity.LivingEntity) -> j
    207:207:boolean lambda$registerGoals$6(net.minecraft.world.entity.LivingEntity) -> k
    201:201:boolean lambda$registerGoals$5(net.minecraft.world.entity.LivingEntity) -> l
    199:199:boolean lambda$registerGoals$4(net.minecraft.world.entity.LivingEntity) -> m
    115:115:boolean lambda$static$3(net.minecraft.world.entity.Entity) -> a
    113:113:boolean lambda$static$2(net.minecraft.world.entity.Entity) -> b
    106:110:boolean lambda$static$1(net.minecraft.world.entity.Entity) -> c
    103:103:boolean lambda$static$0(net.minecraft.world.entity.item.ItemEntity) -> b
    88:88:boolean access$000(net.minecraft.world.entity.animal.Fox) -> a
    88:88:java.util.function.Predicate access$100() -> eB
    88:88:java.util.function.Predicate access$200() -> eC
    88:88:boolean access$300(net.minecraft.world.entity.animal.Fox) -> b
    88:88:void access$400(net.minecraft.world.entity.animal.Fox,boolean) -> a
    88:88:void access$500(net.minecraft.world.entity.animal.Fox) -> c
    88:88:void access$600(net.minecraft.world.entity.animal.Fox,java.util.UUID) -> a
    88:88:java.util.List access$700(net.minecraft.world.entity.animal.Fox) -> d
    88:88:void access$800(net.minecraft.world.entity.animal.Fox,boolean) -> b
    88:88:void access$900(net.minecraft.world.entity.animal.Fox) -> e
    88:88:boolean access$1000(net.minecraft.world.entity.animal.Fox,java.util.UUID) -> b
    88:88:java.util.Random access$1200(net.minecraft.world.entity.animal.Fox) -> f
    88:88:java.util.Random access$1300(net.minecraft.world.entity.animal.Fox) -> g
    88:88:void access$1400(net.minecraft.world.entity.animal.Fox,boolean) -> c
    88:88:java.util.Random access$1500(net.minecraft.world.entity.animal.Fox) -> h
    88:88:boolean access$1600(net.minecraft.world.entity.animal.Fox) -> i
    88:88:float access$1702(net.minecraft.world.entity.animal.Fox,float) -> a
    88:88:float access$1802(net.minecraft.world.entity.animal.Fox,float) -> b
    89:115:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Fox$1 -> atk$1:
net.minecraft.world.entity.animal.Fox$DefendTrustedTargetGoal -> atk$a:
    net.minecraft.world.entity.LivingEntity trustedLastHurtBy -> j
    net.minecraft.world.entity.LivingEntity trustedLastHurt -> k
    int timestamp -> l
    net.minecraft.world.entity.animal.Fox this$0 -> i
    939:941:void <init>(net.minecraft.world.entity.animal.Fox,java.lang.Class,boolean,boolean,java.util.function.Predicate) -> <init>
    945:964:boolean canUse() -> a
    969:984:void start() -> c
net.minecraft.world.entity.animal.Fox$FaceplantGoal -> atk$b:
    int countdown -> a
    net.minecraft.world.entity.animal.Fox this$0 -> b
    1259:1261:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    1265:1265:boolean canUse() -> a
    1270:1270:boolean canContinueToUse() -> b
    1275:1276:void start() -> c
    1280:1281:void stop() -> d
    1285:1286:void tick() -> e
net.minecraft.world.entity.animal.Fox$FoxAlertableEntitiesSelector -> atk$c:
    net.minecraft.world.entity.animal.Fox this$0 -> a
    1024:1024:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    1027:1052:boolean test(net.minecraft.world.entity.LivingEntity) -> a
    1024:1024:boolean test(java.lang.Object) -> test
net.minecraft.world.entity.animal.Fox$FoxBehaviorGoal -> atk$d:
    net.minecraft.world.entity.ai.targeting.TargetingConditions alertableTargeting -> b
    net.minecraft.world.entity.animal.Fox this$0 -> a
    1056:1057:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    1060:1061:boolean hasShelter() -> g
    1065:1065:boolean alertable() -> h
    1056:1056:void <init>(net.minecraft.world.entity.animal.Fox,net.minecraft.world.entity.animal.Fox$1) -> <init>
net.minecraft.world.entity.animal.Fox$FoxBreedGoal -> atk$e:
    net.minecraft.world.entity.animal.Fox this$0 -> d
    879:881:void <init>(net.minecraft.world.entity.animal.Fox,double) -> <init>
    885:888:void start() -> c
    892:930:void breed() -> g
net.minecraft.world.entity.animal.Fox$FoxEatBerriesGoal -> atk$f:
    int ticksWaited -> g
    net.minecraft.world.entity.animal.Fox this$0 -> h
    1173:1175:void <init>(net.minecraft.world.entity.animal.Fox,double,int,int) -> <init>
    1179:1179:double acceptedDistance() -> h
    1184:1184:boolean shouldRecalculatePath() -> j
    1189:1190:boolean isValidTarget(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    1195:1206:void tick() -> e
    1209:1232:void onReachedTarget() -> m
    1236:1236:boolean canUse() -> a
    1241:1244:void start() -> c
net.minecraft.world.entity.animal.Fox$FoxFloatGoal -> atk$g:
    net.minecraft.world.entity.animal.Fox this$0 -> a
    1327:1329:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    1333:1335:void start() -> c
    1339:1339:boolean canUse() -> a
net.minecraft.world.entity.animal.Fox$FoxFollowParentGoal -> atk$h:
    net.minecraft.world.entity.animal.Fox fox -> b
    net.minecraft.world.entity.animal.Fox this$0 -> a
    1470:1473:void <init>(net.minecraft.world.entity.animal.Fox,net.minecraft.world.entity.animal.Fox,double) -> <init>
    1477:1477:boolean canUse() -> a
    1482:1482:boolean canContinueToUse() -> b
    1487:1489:void start() -> c
net.minecraft.world.entity.animal.Fox$FoxGroupData -> atk$i:
    net.minecraft.world.entity.animal.Fox$Type type -> a
    1250:1253:void <init>(net.minecraft.world.entity.animal.Fox$Type) -> <init>
net.minecraft.world.entity.animal.Fox$FoxLookAtPlayerGoal -> atk$j:
    net.minecraft.world.entity.animal.Fox this$0 -> g
    1493:1495:void <init>(net.minecraft.world.entity.animal.Fox,net.minecraft.world.entity.Mob,java.lang.Class,float) -> <init>
    1499:1499:boolean canUse() -> a
    1504:1504:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Fox$FoxLookControl -> atk$k:
    net.minecraft.world.entity.animal.Fox this$0 -> h
    1450:1452:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    1456:1459:void tick() -> a
    1463:1463:boolean resetXRotOnTick() -> b
net.minecraft.world.entity.animal.Fox$FoxMeleeAttackGoal -> atk$l:
    net.minecraft.world.entity.animal.Fox this$0 -> d
    852:854:void <init>(net.minecraft.world.entity.animal.Fox,double,boolean) -> <init>
    858:864:void checkAndPerformAttack(net.minecraft.world.entity.LivingEntity,double) -> a
    868:870:void start() -> c
    874:874:boolean canUse() -> a
net.minecraft.world.entity.animal.Fox$FoxMoveControl -> atk$m:
    net.minecraft.world.entity.animal.Fox this$0 -> i
    789:791:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    795:798:void tick() -> a
net.minecraft.world.entity.animal.Fox$FoxPanicGoal -> atk$n:
    net.minecraft.world.entity.animal.Fox this$0 -> f
    1290:1292:void <init>(net.minecraft.world.entity.animal.Fox,double) -> <init>
    1296:1296:boolean canUse() -> a
net.minecraft.world.entity.animal.Fox$FoxPounceGoal -> atk$o:
    net.minecraft.world.entity.animal.Fox this$0 -> a
    1343:1343:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    1346:1367:boolean canUse() -> a
    1372:1379:boolean canContinueToUse() -> b
    1384:1384:boolean isInterruptable() -> E_
    1389:1404:void start() -> c
    1408:1413:void stop() -> d
    1417:1446:void tick() -> e
net.minecraft.world.entity.animal.Fox$FoxSearchForItemsGoal -> atk$p:
    net.minecraft.world.entity.animal.Fox this$0 -> a
    744:746:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    750:766:boolean canUse() -> a
    771:777:void tick() -> e
    781:785:void start() -> c
net.minecraft.world.entity.animal.Fox$FoxStrollThroughVillageGoal -> atk$q:
    net.minecraft.world.entity.animal.Fox this$0 -> a
    1301:1303:void <init>(net.minecraft.world.entity.animal.Fox,int,int) -> <init>
    1307:1309:void start() -> c
    1313:1313:boolean canUse() -> a
    1318:1318:boolean canContinueToUse() -> b
    1322:1322:boolean canFoxMove() -> g
net.minecraft.world.entity.animal.Fox$PerchAndSearchGoal -> atk$r:
    double relX -> c
    double relZ -> d
    int lookTime -> e
    int looksRemaining -> f
    net.minecraft.world.entity.animal.Fox this$0 -> b
    1123:1125:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    1129:1129:boolean canUse() -> a
    1134:1134:boolean canContinueToUse() -> b
    1139:1143:void start() -> c
    1147:1148:void stop() -> d
    1152:1158:void tick() -> e
    1161:1165:void resetLook() -> j
net.minecraft.world.entity.animal.Fox$SeekShelterGoal -> atk$s:
    int interval -> c
    net.minecraft.world.entity.animal.Fox this$0 -> b
    990:993:void <init>(net.minecraft.world.entity.animal.Fox,double) -> <init>
    997:1014:boolean canUse() -> a
    1019:1021:void start() -> c
net.minecraft.world.entity.animal.Fox$SleepGoal -> atk$t:
    int countdown -> c
    net.minecraft.world.entity.animal.Fox this$0 -> b
    1073:1076:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    1080:1083:boolean canUse() -> a
    1088:1088:boolean canContinueToUse() -> b
    1092:1096:boolean canSleep() -> j
    1101:1103:void stop() -> d
    1107:1114:void start() -> c
net.minecraft.world.entity.animal.Fox$StalkPreyGoal -> atk$u:
    net.minecraft.world.entity.animal.Fox this$0 -> a
    802:804:void <init>(net.minecraft.world.entity.animal.Fox) -> <init>
    808:813:boolean canUse() -> a
    818:820:void start() -> c
    825:835:void stop() -> d
    839:848:void tick() -> e
net.minecraft.world.entity.animal.Fox$Type -> atk$v:
    net.minecraft.world.entity.animal.Fox$Type RED -> a
    net.minecraft.world.entity.animal.Fox$Type SNOW -> b
    net.minecraft.world.entity.animal.Fox$Type[] BY_ID -> c
    java.util.Map BY_NAME -> d
    int id -> e
    java.lang.String name -> f
    java.util.List biomes -> g
    net.minecraft.world.entity.animal.Fox$Type[] $VALUES -> h
    131:131:net.minecraft.world.entity.animal.Fox$Type[] values() -> values
    131:131:net.minecraft.world.entity.animal.Fox$Type valueOf(java.lang.String) -> valueOf
    142:146:void <init>(java.lang.String,int,int,java.lang.String,net.minecraft.world.level.biome.Biome[]) -> <init>
    149:149:java.lang.String getName() -> a
    153:153:java.util.List getBiomes() -> b
    157:157:int getId() -> c
    161:161:net.minecraft.world.entity.animal.Fox$Type byName(java.lang.String) -> a
    165:168:net.minecraft.world.entity.animal.Fox$Type byId(int) -> a
    172:172:net.minecraft.world.entity.animal.Fox$Type byBiome(net.minecraft.world.level.biome.Biome) -> a
    136:136:net.minecraft.world.entity.animal.Fox$Type lambda$static$1(net.minecraft.world.entity.animal.Fox$Type) -> a
    135:135:net.minecraft.world.entity.animal.Fox$Type[] lambda$static$0(int) -> b
    131:136:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.IronGolem -> atl:
    net.minecraft.network.syncher.EntityDataAccessor DATA_FLAGS_ID -> b
    int attackAnimationTick -> c
    int offerFlowerTick -> d
    58:60:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    64:76:void registerGoals() -> n
    80:82:void defineSynchedData() -> w_
    86:93:void registerAttributes() -> cA
    98:98:int decreaseAirSupply(int) -> l
    103:109:void doPush(net.minecraft.world.entity.Entity) -> C
    113:131:void aiStep() -> k
    135:141:boolean canAttackType(net.minecraft.world.entity.EntityType) -> a
    146:148:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    152:154:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    157:157:float getAttackDamage() -> et
    162:172:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    177:182:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    189:189:net.minecraft.world.entity.animal.IronGolem$Crackiness getCrackiness() -> l
    194:204:void handleEntityEvent(byte) -> a
    207:207:int getAttackAnimationTick() -> eq
    211:218:void offerFlower(boolean) -> r
    222:222:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    227:227:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    232:250:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    255:256:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    259:259:int getOfferFlowerTick() -> er
    263:263:boolean isPlayerCreated() -> es
    267:273:void setPlayerCreated(boolean) -> s
    278:279:void die(net.minecraft.world.damagesource.DamageSource) -> a
    284:298:boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader) -> a
    75:75:boolean lambda$registerGoals$1(net.minecraft.world.entity.LivingEntity) -> i
    67:67:boolean lambda$registerGoals$0() -> eu
    51:51:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.IronGolem$Crackiness -> atl$a:
    net.minecraft.world.entity.animal.IronGolem$Crackiness NONE -> a
    net.minecraft.world.entity.animal.IronGolem$Crackiness LOW -> b
    net.minecraft.world.entity.animal.IronGolem$Crackiness MEDIUM -> c
    net.minecraft.world.entity.animal.IronGolem$Crackiness HIGH -> d
    java.util.List BY_DAMAGE -> e
    float fraction -> f
    net.minecraft.world.entity.animal.IronGolem$Crackiness[] $VALUES -> g
    301:301:net.minecraft.world.entity.animal.IronGolem$Crackiness[] values() -> values
    301:301:net.minecraft.world.entity.animal.IronGolem$Crackiness valueOf(java.lang.String) -> valueOf
    312:314:void <init>(java.lang.String,int,float) -> <init>
    317:323:net.minecraft.world.entity.animal.IronGolem$Crackiness byFraction(float) -> a
    308:308:double lambda$static$0(net.minecraft.world.entity.animal.IronGolem$Crackiness) -> a
    301:308:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.MushroomCow -> atm:
    net.minecraft.network.syncher.EntityDataAccessor DATA_TYPE -> bw
    net.minecraft.world.effect.MobEffect effect -> bx
    int effectDuration -> by
    java.util.UUID lastLightningBoltUUID -> bz
    45:46:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    50:53:float getWalkTargetValue(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader) -> a
    57:58:boolean checkMushroomSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> c
    63:69:void thunderHit(net.minecraft.world.entity.global.LightningBolt) -> a
    73:76:void defineSynchedData() -> w_
    80:162:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    167:174:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    178:188:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    191:192:org.apache.commons.lang3.tuple.Pair getEffectFromItemStack(net.minecraft.world.item.ItemStack) -> j
    196:197:void setMushroomType(net.minecraft.world.entity.animal.MushroomCow$MushroomType) -> a
    200:200:net.minecraft.world.entity.animal.MushroomCow$MushroomType getMushroomType() -> eq
    205:207:net.minecraft.world.entity.animal.MushroomCow getBreedOffspring(net.minecraft.world.entity.AgableMob) -> c
    211:220:net.minecraft.world.entity.animal.MushroomCow$MushroomType getOffspringType(net.minecraft.world.entity.animal.MushroomCow) -> a
    36:36:net.minecraft.world.entity.animal.Cow getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    36:36:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    136:136:void lambda$mobInteract$0(net.minecraft.world.InteractionHand,net.minecraft.world.entity.player.Player) -> a
    37:37:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.MushroomCow$MushroomType -> atm$a:
    net.minecraft.world.entity.animal.MushroomCow$MushroomType RED -> a
    net.minecraft.world.entity.animal.MushroomCow$MushroomType BROWN -> b
    java.lang.String type -> c
    net.minecraft.world.level.block.state.BlockState blockState -> d
    net.minecraft.world.entity.animal.MushroomCow$MushroomType[] $VALUES -> e
    223:223:net.minecraft.world.entity.animal.MushroomCow$MushroomType[] values() -> values
    223:223:net.minecraft.world.entity.animal.MushroomCow$MushroomType valueOf(java.lang.String) -> valueOf
    230:233:void <init>(java.lang.String,int,java.lang.String,net.minecraft.world.level.block.state.BlockState) -> <init>
    236:236:net.minecraft.world.level.block.state.BlockState getBlockState() -> a
    240:246:net.minecraft.world.entity.animal.MushroomCow$MushroomType byType(java.lang.String) -> b
    223:223:java.lang.String access$000(net.minecraft.world.entity.animal.MushroomCow$MushroomType) -> a
    223:223:net.minecraft.world.level.block.state.BlockState access$100(net.minecraft.world.entity.animal.MushroomCow$MushroomType) -> b
    223:223:net.minecraft.world.entity.animal.MushroomCow$MushroomType access$200(java.lang.String) -> a
    223:225:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Ocelot -> atn:
    net.minecraft.world.item.crafting.Ingredient TEMPT_INGREDIENT -> bw
    net.minecraft.network.syncher.EntityDataAccessor DATA_TRUSTING -> bx
    net.minecraft.world.entity.animal.Ocelot$OcelotAvoidEntityGoal ocelotAvoidPlayersGoal -> by
    net.minecraft.world.entity.animal.Ocelot$OcelotTemptGoal temptGoal -> bz
    63:66:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    69:69:boolean isTrusting() -> er
    73:76:void setTrusting(boolean) -> r
    80:83:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    87:90:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    94:97:void defineSynchedData() -> w_
    101:112:void registerGoals() -> n
    116:132:void customServerAiStep() -> dT
    136:136:boolean removeWhenFarAway(double) -> h
    141:146:void registerAttributes() -> cA
    150:150:boolean causeFallDamage(float,float) -> b
    156:156:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    161:161:int getAmbientSoundInterval() -> A
    166:166:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    171:171:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    175:175:float getAttackDamage() -> es
    180:180:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    185:189:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    194:211:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    216:223:void handleEntityEvent(byte) -> a
    226:236:void spawnTrustingParticles(boolean) -> s
    239:248:void reassessTrustingGoals() -> eq
    252:252:net.minecraft.world.entity.animal.Ocelot getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    257:257:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    263:263:boolean checkOcelotSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> c
    268:280:boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader) -> a
    286:292:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    50:50:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    50:50:boolean access$000(net.minecraft.world.entity.animal.Ocelot) -> a
    55:57:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Ocelot$OcelotAvoidEntityGoal -> atn$a:
    net.minecraft.world.entity.animal.Ocelot ocelot -> i
    299:301:void <init>(net.minecraft.world.entity.animal.Ocelot,java.lang.Class,float,double,double) -> <init>
    305:305:boolean canUse() -> a
    310:310:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Ocelot$OcelotTemptGoal -> atn$b:
    net.minecraft.world.entity.animal.Ocelot ocelot -> c
    318:320:void <init>(net.minecraft.world.entity.animal.Ocelot,double,net.minecraft.world.item.crafting.Ingredient,boolean) -> <init>
    324:324:boolean canScare() -> g
net.minecraft.world.entity.animal.Panda -> ato:
    net.minecraft.network.syncher.EntityDataAccessor UNHAPPY_COUNTER -> bx
    net.minecraft.network.syncher.EntityDataAccessor SNEEZE_COUNTER -> by
    net.minecraft.network.syncher.EntityDataAccessor EAT_COUNTER -> bz
    net.minecraft.network.syncher.EntityDataAccessor MAIN_GENE_ID -> bA
    net.minecraft.network.syncher.EntityDataAccessor HIDDEN_GENE_ID -> bB
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_FLAGS -> bC
    net.minecraft.world.entity.ai.targeting.TargetingConditions BREED_TARGETING -> bD
    boolean gotBamboo -> bE
    boolean didBite -> bF
    int rollCounter -> bw
    net.minecraft.world.phys.Vec3 rollDelta -> bG
    float sitAmount -> bH
    float sitAmountO -> bI
    float onBackAmount -> bJ
    float onBackAmountO -> bK
    float rollAmount -> bL
    float rollAmountO -> bM
    net.minecraft.world.entity.animal.Panda$PandaLookAtPlayerGoal lookAtPlayerGoal -> bN
    java.util.function.Predicate PANDA_ITEMS -> bO
    99:106:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    110:114:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> e
    118:118:int getUnhappyCounter() -> eq
    122:123:void setUnhappyCounter(int) -> t
    126:126:boolean isSneezing() -> er
    130:130:boolean isSitting() -> es
    134:135:void sit(boolean) -> r
    138:138:boolean isOnBack() -> et
    142:143:void setOnBack(boolean) -> s
    146:146:boolean isEating() -> eu
    150:151:void eat(boolean) -> t
    154:154:int getEatCounter() -> eO
    158:159:void setEatCounter(int) -> v
    162:167:void sneeze(boolean) -> u
    170:170:int getSneezeCounter() -> ez
    174:175:void setSneezeCounter(int) -> u
    178:178:net.minecraft.world.entity.animal.Panda$Gene getMainGene() -> eA
    182:187:void setMainGene(net.minecraft.world.entity.animal.Panda$Gene) -> a
    190:190:net.minecraft.world.entity.animal.Panda$Gene getHiddenGene() -> eB
    194:199:void setHiddenGene(net.minecraft.world.entity.animal.Panda$Gene) -> b
    202:202:boolean isRolling() -> eC
    206:207:void roll(boolean) -> v
    211:218:void defineSynchedData() -> w_
    221:221:boolean getFlag(int) -> w
    225:231:void setFlag(int,boolean) -> d
    235:239:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    243:247:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    252:259:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    264:282:void registerGoals() -> n
    286:290:void registerAttributes() -> cA
    383:383:net.minecraft.world.entity.animal.Panda$Gene getVariant() -> eD
    387:387:boolean isLazy() -> eE
    391:391:boolean isWorried() -> eF
    395:395:boolean isPlayful() -> eG
    399:399:boolean isBrown() -> eH
    403:403:boolean isWeak() -> eI
    408:408:boolean isAggressive() -> em
    413:413:boolean canBeLeashed(net.minecraft.world.entity.player.Player) -> a
    418:422:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    427:479:void tick() -> h
    482:482:boolean isScared() -> eJ
    486:510:void handleEating() -> eP
    513:529:void addEatingParticles() -> eQ
    532:538:void updateSitAmount() -> eR
    541:547:void updateOnBackAnimation() -> eS
    550:556:void updateRollAmount() -> eT
    559:559:float getSitAmount(float) -> v
    563:563:float getLieOnBackAmount(float) -> w
    567:567:float getRollAmount(float) -> x
    571:594:void handleRoll() -> eU
    597:613:void afterSneeze() -> eV
    617:624:void pickUpItem(net.minecraft.world.entity.item.ItemEntity) -> a
    628:629:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    635:645:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    649:675:void setGeneFromParents(net.minecraft.world.entity.animal.Panda,net.minecraft.world.entity.animal.Panda) -> a
    678:682:net.minecraft.world.entity.animal.Panda$Gene getOneOfGenesRandomly() -> eW
    686:693:void setAttributes() -> eK
    696:701:void tryToSit() -> eX
    705:751:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    757:762:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    768:769:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    773:773:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    777:777:boolean isFoodOrCake(net.minecraft.world.item.ItemStack) -> j
    783:783:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    789:789:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    793:793:boolean canPerformAction() -> eL
    1029:1030:boolean lambda$static$0(net.minecraft.world.entity.item.ItemEntity) -> b
    64:64:java.util.Random access$100(net.minecraft.world.entity.animal.Panda) -> a
    64:64:java.util.Random access$200(net.minecraft.world.entity.animal.Panda) -> b
    64:64:java.util.Random access$300(net.minecraft.world.entity.animal.Panda) -> c
    64:64:java.util.Random access$400(net.minecraft.world.entity.animal.Panda) -> d
    64:64:net.minecraft.world.entity.ai.targeting.TargetingConditions access$500() -> eM
    64:64:net.minecraft.world.entity.animal.Panda$PandaLookAtPlayerGoal access$600(net.minecraft.world.entity.animal.Panda) -> e
    64:64:java.util.function.Predicate access$700() -> eN
    64:64:java.util.Random access$800(net.minecraft.world.entity.animal.Panda) -> f
    64:64:java.util.Random access$900(net.minecraft.world.entity.animal.Panda) -> g
    64:64:void access$1000(net.minecraft.world.entity.animal.Panda) -> h
    64:64:java.util.Random access$1100(net.minecraft.world.entity.animal.Panda) -> i
    64:64:java.util.Random access$1200(net.minecraft.world.entity.animal.Panda) -> j
    64:64:java.util.Random access$1300(net.minecraft.world.entity.animal.Panda) -> k
    64:64:java.util.Random access$1400(net.minecraft.world.entity.animal.Panda) -> l
    64:64:java.util.Random access$1500(net.minecraft.world.entity.animal.Panda) -> m
    64:64:boolean access$1600(net.minecraft.world.entity.animal.Panda) -> n
    64:64:boolean access$1700(net.minecraft.world.entity.animal.Panda) -> o
    65:1028:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Panda$Gene -> ato$a:
    net.minecraft.world.entity.animal.Panda$Gene NORMAL -> a
    net.minecraft.world.entity.animal.Panda$Gene LAZY -> b
    net.minecraft.world.entity.animal.Panda$Gene WORRIED -> c
    net.minecraft.world.entity.animal.Panda$Gene PLAYFUL -> d
    net.minecraft.world.entity.animal.Panda$Gene BROWN -> e
    net.minecraft.world.entity.animal.Panda$Gene WEAK -> f
    net.minecraft.world.entity.animal.Panda$Gene AGGRESSIVE -> g
    net.minecraft.world.entity.animal.Panda$Gene[] BY_ID -> h
    int id -> i
    java.lang.String name -> j
    boolean isRecessive -> k
    net.minecraft.world.entity.animal.Panda$Gene[] $VALUES -> l
    294:294:net.minecraft.world.entity.animal.Panda$Gene[] values() -> values
    294:294:net.minecraft.world.entity.animal.Panda$Gene valueOf(java.lang.String) -> valueOf
    310:314:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    317:317:int getId() -> a
    321:321:java.lang.String getName() -> b
    325:325:boolean isRecessive() -> c
    329:337:net.minecraft.world.entity.animal.Panda$Gene getVariantFromGenes(net.minecraft.world.entity.animal.Panda$Gene,net.minecraft.world.entity.animal.Panda$Gene) -> b
    341:344:net.minecraft.world.entity.animal.Panda$Gene byId(int) -> a
    348:354:net.minecraft.world.entity.animal.Panda$Gene byName(java.lang.String) -> a
    358:378:net.minecraft.world.entity.animal.Panda$Gene getRandom(java.util.Random) -> a
    303:303:net.minecraft.world.entity.animal.Panda$Gene[] lambda$static$0(int) -> b
    294:294:net.minecraft.world.entity.animal.Panda$Gene access$000(net.minecraft.world.entity.animal.Panda$Gene,net.minecraft.world.entity.animal.Panda$Gene) -> a
    294:303:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Panda$PandaAttackGoal -> ato$b:
    net.minecraft.world.entity.animal.Panda panda -> d
    818:820:void <init>(net.minecraft.world.entity.animal.Panda,double,boolean) -> <init>
    824:824:boolean canUse() -> a
net.minecraft.world.entity.animal.Panda$PandaAvoidGoal -> ato$c:
    net.minecraft.world.entity.animal.Panda panda -> i
    1017:1020:void <init>(net.minecraft.world.entity.animal.Panda,java.lang.Class,float,double,double) -> <init>
    1024:1024:boolean canUse() -> a
net.minecraft.world.entity.animal.Panda$PandaBreedGoal -> ato$d:
    net.minecraft.world.entity.animal.Panda panda -> e
    int unhappyCooldown -> f
    net.minecraft.world.entity.animal.Panda this$0 -> d
    966:969:void <init>(net.minecraft.world.entity.animal.Panda,net.minecraft.world.entity.animal.Panda,double) -> <init>
    973:990:boolean canUse() -> a
    994:1009:boolean canFindBamboo() -> h
net.minecraft.world.entity.animal.Panda$PandaHurtByTargetGoal -> ato$e:
    net.minecraft.world.entity.animal.Panda panda -> a
    1139:1141:void <init>(net.minecraft.world.entity.animal.Panda,java.lang.Class[]) -> <init>
    1145:1149:boolean canContinueToUse() -> b
    1154:1157:void alertOther(net.minecraft.world.entity.Mob,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.animal.Panda$PandaLieOnBackGoal -> ato$f:
    net.minecraft.world.entity.animal.Panda panda -> a
    int cooldown -> b
    1100:1102:void <init>(net.minecraft.world.entity.animal.Panda) -> <init>
    1106:1106:boolean canUse() -> a
    1111:1119:boolean canContinueToUse() -> b
    1124:1126:void start() -> c
    1130:1132:void stop() -> d
net.minecraft.world.entity.animal.Panda$PandaLookAtPlayerGoal -> ato$g:
    net.minecraft.world.entity.animal.Panda panda -> g
    832:834:void <init>(net.minecraft.world.entity.animal.Panda,java.lang.Class,float) -> <init>
    837:838:void setTarget(net.minecraft.world.entity.LivingEntity) -> a
    842:842:boolean canContinueToUse() -> b
    847:861:boolean canUse() -> a
    866:869:void tick() -> e
net.minecraft.world.entity.animal.Panda$PandaMoveControl -> ato$h:
    net.minecraft.world.entity.animal.Panda panda -> i
    800:802:void <init>(net.minecraft.world.entity.animal.Panda) -> <init>
    806:811:void tick() -> a
net.minecraft.world.entity.animal.Panda$PandaPanicGoal -> ato$i:
    net.minecraft.world.entity.animal.Panda panda -> f
    1164:1166:void <init>(net.minecraft.world.entity.animal.Panda,double) -> <init>
    1171:1184:boolean canUse() -> a
    1189:1193:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Panda$PandaRollGoal -> ato$j:
    net.minecraft.world.entity.animal.Panda panda -> a
    875:878:void <init>(net.minecraft.world.entity.animal.Panda) -> <init>
    882:911:boolean canUse() -> a
    916:916:boolean canContinueToUse() -> b
    921:922:void start() -> c
    926:926:boolean isInterruptable() -> E_
net.minecraft.world.entity.animal.Panda$PandaSitGoal -> ato$k:
    int cooldown -> b
    net.minecraft.world.entity.animal.Panda this$0 -> a
    1036:1038:void <init>(net.minecraft.world.entity.animal.Panda) -> <init>
    1042:1047:boolean canUse() -> a
    1052:1060:boolean canContinueToUse() -> b
    1065:1068:void tick() -> e
    1072:1080:void start() -> c
    1084:1093:void stop() -> d
net.minecraft.world.entity.animal.Panda$PandaSneezeGoal -> ato$l:
    net.minecraft.world.entity.animal.Panda panda -> a
    934:936:void <init>(net.minecraft.world.entity.animal.Panda) -> <init>
    940:948:boolean canUse() -> a
    953:953:boolean canContinueToUse() -> b
    958:959:void start() -> c
net.minecraft.world.entity.animal.Parrot -> atp:
    net.minecraft.network.syncher.EntityDataAccessor DATA_VARIANT_ID -> bD
    java.util.function.Predicate NOT_PARROT_PREDICATE -> bE
    net.minecraft.world.item.Item POISONOUS_FOOD -> bF
    java.util.Set TAME_FOOD -> bG
    java.util.Map MOB_SOUND_MAP -> bH
    float flap -> bz
    float flapSpeed -> bA
    float oFlapSpeed -> bB
    float oFlap -> bC
    float flapping -> bI
    boolean partyParrot -> bJ
    net.minecraft.core.BlockPos jukebox -> bK
    114:128:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    133:140:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    145:155:void registerGoals() -> n
    159:165:void registerAttributes() -> cA
    169:173:net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level) -> b
    178:178:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    183:193:void aiStep() -> k
    197:199:void setRecordPlayingNearby(net.minecraft.core.BlockPos,boolean) -> a
    202:202:boolean isPartyParrot() -> ez
    206:223:void calculateFlapping() -> eD
    226:241:boolean imitateNearbyMobs(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity) -> b
    246:289:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    294:294:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    298:300:boolean checkParrotSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> c
    305:305:boolean causeFallDamage(float,float) -> b
    311:311:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    315:315:boolean canMate(net.minecraft.world.entity.animal.Animal) -> a
    321:321:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    325:330:void playAmbientSound(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity) -> a
    334:334:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    340:340:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    344:349:net.minecraft.sounds.SoundEvent getAmbient(java.util.Random) -> a
    353:353:net.minecraft.sounds.SoundEvent getImitatedSound(net.minecraft.world.entity.EntityType) -> b
    358:358:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    363:363:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    368:369:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    373:374:float playFlySound(float) -> e
    379:379:boolean makeFlySound() -> aq
    384:384:float getVoicePitch() -> dn
    388:388:float getPitch(java.util.Random) -> b
    393:393:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    398:398:boolean isPushable() -> aL
    403:407:void doPush(net.minecraft.world.entity.Entity) -> C
    411:419:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    423:423:int getVariant() -> eA
    427:428:void setVariant(int) -> t
    432:434:void defineSynchedData() -> w_
    438:440:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    444:446:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    450:450:boolean isFlying() -> eF
    79:108:void lambda$static$0(java.util.HashMap) -> a
    64:64:java.util.Map access$000() -> eB
    65:78:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Parrot$1 -> atp$1:
    66:66:void <init>() -> <init>
    69:69:boolean test(net.minecraft.world.entity.Mob) -> a
    66:66:boolean test(java.lang.Object) -> test
net.minecraft.world.entity.animal.Pig -> atq:
    net.minecraft.network.syncher.EntityDataAccessor DATA_SADDLE_ID -> bw
    net.minecraft.network.syncher.EntityDataAccessor DATA_BOOST_TIME -> bx
    net.minecraft.world.item.crafting.Ingredient FOOD_ITEMS -> by
    boolean boosting -> bz
    int boostTime -> bA
    int boostTimeTotal -> bB
    51:52:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    56:65:void registerGoals() -> n
    69:73:void registerAttributes() -> cA
    78:81:net.minecraft.world.entity.Entity getControllingPassenger() -> cd
    86:96:boolean canBeControlledByRider() -> dY
    101:107:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    111:114:void defineSynchedData() -> w_
    118:120:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    124:126:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    130:130:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    135:135:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    140:140:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    145:146:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    150:166:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    171:175:void dropEquipment() -> cU
    178:178:boolean hasSaddle() -> eq
    182:187:void setSaddle(boolean) -> r
    191:201:void thunderHit(net.minecraft.world.entity.global.LightningBolt) -> a
    205:257:void travel(net.minecraft.world.phys.Vec3) -> e
    260:267:boolean boost() -> er
    272:272:net.minecraft.world.entity.animal.Pig getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    277:277:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    39:39:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    40:42:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.PolarBear -> atr:
    net.minecraft.network.syncher.EntityDataAccessor DATA_STANDING_ID -> bw
    float clientSideStandAnimationO -> bx
    float clientSideStandAnimation -> by
    int warningSoundTicks -> bz
    55:56:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    60:60:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    65:65:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    70:83:void registerGoals() -> n
    87:95:void registerAttributes() -> cA
    98:103:boolean checkPolarBearSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> c
    108:111:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    116:116:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    121:121:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    126:127:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    130:135:void playWarningSound() -> eq
    139:142:void defineSynchedData() -> w_
    146:163:void tick() -> h
    167:173:net.minecraft.world.entity.EntityDimensions getDimensions(net.minecraft.world.entity.Pose) -> a
    180:184:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    188:188:boolean isStanding() -> er
    192:193:void setStanding(boolean) -> r
    196:196:float getStandingAnimationScale(float) -> v
    201:201:float getWaterSlowDown() -> ds
    206:211:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    47:47:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.PolarBear$PolarBearAttackPlayersGoal -> atr$a:
    net.minecraft.world.entity.animal.PolarBear this$0 -> i
    247:249:void <init>(net.minecraft.world.entity.animal.PolarBear) -> <init>
    253:267:boolean canUse() -> a
    272:272:double getFollowDistance() -> k
net.minecraft.world.entity.animal.PolarBear$PolarBearHurtByTargetGoal -> atr$b:
    net.minecraft.world.entity.animal.PolarBear this$0 -> a
    219:221:void <init>(net.minecraft.world.entity.animal.PolarBear) -> <init>
    225:230:void start() -> c
    234:239:void alertOther(net.minecraft.world.entity.Mob,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.animal.PolarBear$PolarBearMeleeAttackGoal -> atr$c:
    net.minecraft.world.entity.animal.PolarBear this$0 -> d
    277:279:void <init>(net.minecraft.world.entity.animal.PolarBear) -> <init>
    283:302:void checkAndPerformAttack(net.minecraft.world.entity.LivingEntity,double) -> a
    306:308:void stop() -> d
    312:312:double getAttackReachSqr(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.animal.PolarBear$PolarBearPanicGoal -> atr$d:
    net.minecraft.world.entity.animal.PolarBear this$0 -> f
    317:319:void <init>(net.minecraft.world.entity.animal.PolarBear) -> <init>
    323:326:boolean canUse() -> a
net.minecraft.world.entity.animal.Pufferfish -> ats:
    net.minecraft.network.syncher.EntityDataAccessor PUFF_STATE -> b
    int inflateCounter -> c
    int deflateTimer -> d
    java.util.function.Predicate NO_SPECTATORS_AND_NO_WATER_MOB -> bw
    52:53:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    57:60:void defineSynchedData() -> w_
    63:63:int getPuffState() -> es
    67:68:void setPuffState(int) -> b
    72:77:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    81:84:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    88:91:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    95:95:net.minecraft.world.item.ItemStack getBucketItemStack() -> l
    100:103:void registerGoals() -> n
    107:135:void tick() -> h
    139:149:void aiStep() -> k
    152:157:void touch(net.minecraft.world.entity.Mob) -> a
    161:168:void playerTouch(net.minecraft.world.entity.player.Player) -> b
    172:172:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    177:177:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    182:182:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    187:187:net.minecraft.sounds.SoundEvent getFlopSound() -> er
    192:192:net.minecraft.world.entity.EntityDimensions getDimensions(net.minecraft.world.entity.Pose) -> a
    196:202:float getScale(int) -> s
    36:44:boolean lambda$static$0(net.minecraft.world.entity.LivingEntity) -> i
    30:30:java.util.function.Predicate access$000() -> et
    30:30:int access$102(net.minecraft.world.entity.animal.Pufferfish,int) -> a
    30:30:int access$202(net.minecraft.world.entity.animal.Pufferfish,int) -> b
    31:35:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Pufferfish$PufferfishPuffGoal -> ats$a:
    net.minecraft.world.entity.animal.Pufferfish fish -> a
    209:211:void <init>(net.minecraft.world.entity.animal.Pufferfish) -> <init>
    215:217:boolean canUse() -> a
    222:224:void start() -> c
    228:229:void stop() -> d
    233:235:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.Rabbit -> att:
    net.minecraft.network.syncher.EntityDataAccessor DATA_TYPE_ID -> bw
    net.minecraft.resources.ResourceLocation KILLER_BUNNY -> bx
    int jumpTicks -> by
    int jumpDuration -> bz
    boolean wasOnGround -> bA
    int jumpDelayTicks -> bB
    int moreCarrotTicks -> bC
    95:102:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    106:116:void registerGoals() -> n
    120:133:float getJumpPower() -> dp
    138:150:void jumpFromGround() -> dq
    153:156:float getJumpCompletion(float) -> v
    160:162:void setSpeedModifier(double) -> i
    166:170:void setJumping(boolean) -> a_
    173:176:void startJumping() -> eq
    180:183:void defineSynchedData() -> w_
    187:231:void customServerAiStep() -> dT
    236:236:void updateSprintingState() -> aE
    239:240:void facePoint(double,double) -> b
    243:244:void enableJumpControl() -> et
    247:248:void disableJumpControl() -> eu
    251:256:void setLandingDelay() -> ez
    259:261:void checkLandingDelay() -> eA
    265:273:void aiStep() -> k
    277:281:void registerAttributes() -> cA
    285:288:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    292:295:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    298:298:net.minecraft.sounds.SoundEvent getJumpSound() -> er
    303:303:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    308:308:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    313:313:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    318:322:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    327:327:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    332:335:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    339:339:boolean isTemptingItem(net.minecraft.world.item.Item) -> b
    344:354:net.minecraft.world.entity.animal.Rabbit getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    359:359:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    363:363:int getRabbitType() -> es
    367:380:void setRabbitType(int) -> t
    385:395:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    399:410:int getRandomRabbitType(net.minecraft.world.level.LevelAccessor) -> a
    414:418:boolean checkRabbitSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> c
    432:432:boolean wantsMoreFood() -> eB
    437:444:void handleEntityEvent(byte) -> a
    61:61:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    61:61:boolean access$000(net.minecraft.world.entity.animal.Rabbit) -> a
    61:61:net.minecraft.world.entity.ai.control.JumpControl access$100(net.minecraft.world.entity.animal.Rabbit) -> b
    61:61:boolean access$200(net.minecraft.world.entity.animal.Rabbit) -> c
    61:61:int access$302(net.minecraft.world.entity.animal.Rabbit,int) -> a
    68:79:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Rabbit$EvilRabbitAttackGoal -> att$a:
    622:623:void <init>(net.minecraft.world.entity.animal.Rabbit) -> <init>
    627:627:double getAttackReachSqr(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.animal.Rabbit$RabbitAvoidEntityGoal -> att$b:
    net.minecraft.world.entity.animal.Rabbit rabbit -> i
    512:514:void <init>(net.minecraft.world.entity.animal.Rabbit,java.lang.Class,float,double,double) -> <init>
    518:518:boolean canUse() -> a
net.minecraft.world.entity.animal.Rabbit$RabbitGroupData -> att$c:
    int rabbitType -> a
    424:428:void <init>(int) -> <init>
net.minecraft.world.entity.animal.Rabbit$RabbitJumpControl -> att$d:
    net.minecraft.world.entity.animal.Rabbit rabbit -> c
    boolean canJump -> d
    net.minecraft.world.entity.animal.Rabbit this$0 -> b
    450:453:void <init>(net.minecraft.world.entity.animal.Rabbit,net.minecraft.world.entity.animal.Rabbit) -> <init>
    456:456:boolean wantJump() -> c
    460:460:boolean canJump() -> d
    464:465:void setCanJump(boolean) -> a
    469:473:void tick() -> b
net.minecraft.world.entity.animal.Rabbit$RabbitMoveControl -> att$e:
    net.minecraft.world.entity.animal.Rabbit rabbit -> i
    double nextJumpSpeed -> j
    481:483:void <init>(net.minecraft.world.entity.animal.Rabbit) -> <init>
    487:493:void tick() -> a
    497:505:void setWantedPosition(double,double,double,double) -> a
net.minecraft.world.entity.animal.Rabbit$RabbitPanicGoal -> att$f:
    net.minecraft.world.entity.animal.Rabbit rabbit -> f
    608:610:void <init>(net.minecraft.world.entity.animal.Rabbit,double) -> <init>
    614:617:void tick() -> e
net.minecraft.world.entity.animal.Rabbit$RaidGardenGoal -> att$g:
    net.minecraft.world.entity.animal.Rabbit rabbit -> g
    boolean wantsToRaid -> h
    boolean canRaid -> i
    529:531:void <init>(net.minecraft.world.entity.animal.Rabbit) -> <init>
    535:546:boolean canUse() -> a
    551:551:boolean canContinueToUse() -> b
    556:584:void tick() -> e
    588:600:boolean isValidTarget(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.animal.Salmon -> atu:
    13:14:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    20:20:int getMaxSchoolSize() -> es
    25:25:net.minecraft.world.item.ItemStack getBucketItemStack() -> l
    30:30:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    35:35:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    40:40:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    45:45:net.minecraft.sounds.SoundEvent getFlopSound() -> er
net.minecraft.world.entity.animal.Sheep -> atv:
    net.minecraft.network.syncher.EntityDataAccessor DATA_WOOL_ID -> bw
    java.util.Map ITEM_BY_DYE -> bx
    java.util.Map COLORARRAY_BY_COLOR -> by
    int eatAnimationTick -> bz
    net.minecraft.world.entity.ai.goal.EatBlockGoal eatBlockGoal -> bA
    85:93:float[] createSheepColor(net.minecraft.world.item.DyeColor) -> c
    97:97:float[] getColorArray(net.minecraft.world.item.DyeColor) -> a
    104:105:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    109:119:void registerGoals() -> n
    123:125:void customServerAiStep() -> dT
    129:133:void aiStep() -> k
    137:141:void registerAttributes() -> cA
    145:149:void defineSynchedData() -> w_
    153:189:net.minecraft.resources.ResourceLocation getDefaultLootTable() -> H
    195:200:void handleEntityEvent(byte) -> a
    203:212:float getHeadEatPositionScale(float) -> v
    216:223:float getHeadEatAngleScale(float) -> w
    228:237:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    241:256:void shear() -> eq
    260:263:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    267:270:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    274:274:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    279:279:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    284:284:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    289:290:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    293:293:net.minecraft.world.item.DyeColor getColor() -> er
    297:299:void setColor(net.minecraft.world.item.DyeColor) -> b
    302:302:boolean isSheared() -> es
    306:312:void setSheared(boolean) -> r
    315:331:net.minecraft.world.item.DyeColor getRandomSheepColor(java.util.Random) -> a
    336:341:net.minecraft.world.entity.animal.Sheep getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    346:351:void ate() -> z
    356:357:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    361:372:net.minecraft.world.item.DyeColor getOffspringColor(net.minecraft.world.entity.animal.Animal,net.minecraft.world.entity.animal.Animal) -> a
    376:384:net.minecraft.world.inventory.CraftingContainer makeContainer(net.minecraft.world.item.DyeColor,net.minecraft.world.item.DyeColor) -> a
    389:389:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    58:58:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    372:372:net.minecraft.world.item.DyeColor lambda$getOffspringColor$4(net.minecraft.world.item.DyeColor,net.minecraft.world.item.DyeColor) -> b
    367:367:net.minecraft.world.item.ItemStack lambda$getOffspringColor$3(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.item.crafting.CraftingRecipe) -> a
    232:232:void lambda$mobInteract$2(net.minecraft.world.InteractionHand,net.minecraft.world.entity.player.Player) -> a
    82:82:net.minecraft.world.item.DyeColor lambda$static$1(net.minecraft.world.item.DyeColor) -> d
    64:80:void lambda$static$0(java.util.EnumMap) -> a
    61:82:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Sheep$1 -> atv$1:
    376:376:void <init>(net.minecraft.world.inventory.MenuType,int) -> <init>
    379:379:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
net.minecraft.world.entity.animal.Sheep$2 -> atv$2:
    int[] $SwitchMap$net$minecraft$world$item$DyeColor -> a
    156:156:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.ShoulderRidingEntity -> atw:
    int rideCooldownCounter -> bz
    15:16:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    19:28:boolean setEntityOnShoulder(net.minecraft.server.level.ServerPlayer) -> d
    33:35:void tick() -> h
    38:38:boolean canSitOnShoulder() -> eC
net.minecraft.world.entity.animal.SnowGolem -> atx:
    net.minecraft.network.syncher.EntityDataAccessor DATA_PUMPKIN_ID -> b
    44:45:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    49:55:void registerGoals() -> n
    59:63:void registerAttributes() -> cA
    67:69:void defineSynchedData() -> w_
    73:76:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    80:85:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    89:120:void aiStep() -> k
    124:134:void performRangedAttack(net.minecraft.world.entity.LivingEntity,float) -> a
    138:138:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    143:151:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    155:155:boolean hasPumpkin() -> l
    159:165:void setPumpkin(boolean) -> r
    170:170:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    176:176:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    182:182:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    147:147:void lambda$mobInteract$1(net.minecraft.world.InteractionHand,net.minecraft.world.entity.player.Player) -> a
    54:54:boolean lambda$registerGoals$0(net.minecraft.world.entity.LivingEntity) -> i
    39:39:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Squid -> aty:
    float xBodyRot -> b
    float xBodyRotO -> c
    float zBodyRot -> d
    float zBodyRotO -> bw
    float tentacleMovement -> bx
    float oldTentacleMovement -> by
    float tentacleAngle -> bz
    float oldTentacleAngle -> bA
    float speed -> bB
    float tentacleSpeed -> bC
    float rotateSpeed -> bD
    float tx -> bE
    float ty -> bF
    float tz -> bG
    50:54:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    58:60:void registerGoals() -> n
    64:67:void registerAttributes() -> cA
    71:71:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    76:76:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    81:81:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    86:86:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    91:91:float getSoundVolume() -> dm
    96:96:boolean isMovementNoisy() -> at
    101:172:void aiStep() -> k
    176:181:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    185:187:net.minecraft.world.phys.Vec3 rotateVector(net.minecraft.world.phys.Vec3) -> f
    191:198:void spawnInk() -> eq
    202:203:void travel(net.minecraft.world.phys.Vec3) -> e
    206:206:boolean checkSquidSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    211:216:void handleEntityEvent(byte) -> a
    219:222:void setMovementVector(float,float,float) -> a
    225:225:boolean hasMovementVector() -> l
    30:30:boolean access$100(net.minecraft.world.entity.animal.Squid) -> a
net.minecraft.world.entity.animal.Squid$1 -> aty$1:
net.minecraft.world.entity.animal.Squid$SquidFleeGoal -> aty$a:
    int fleeTicks -> b
    net.minecraft.world.entity.animal.Squid this$0 -> a
    256:256:void <init>(net.minecraft.world.entity.animal.Squid) -> <init>
    265:270:boolean canUse() -> a
    275:276:void start() -> c
    280:316:void tick() -> e
    256:256:void <init>(net.minecraft.world.entity.animal.Squid,net.minecraft.world.entity.animal.Squid$1) -> <init>
net.minecraft.world.entity.animal.Squid$SquidRandomMovementGoal -> aty$b:
    net.minecraft.world.entity.animal.Squid squid -> b
    net.minecraft.world.entity.animal.Squid this$0 -> a
    231:233:void <init>(net.minecraft.world.entity.animal.Squid,net.minecraft.world.entity.animal.Squid) -> <init>
    237:237:boolean canUse() -> a
    242:253:void tick() -> e
net.minecraft.world.entity.animal.TropicalFish -> atz:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_TYPE_VARIANT -> c
    net.minecraft.resources.ResourceLocation[] BASE_TEXTURE_LOCATIONS -> d
    net.minecraft.resources.ResourceLocation[] PATTERN_A_TEXTURE_LOCATIONS -> bw
    net.minecraft.resources.ResourceLocation[] PATTERN_B_TEXTURE_LOCATIONS -> bx
    int[] COMMON_VARIANTS -> b
    boolean isSchool -> by
    125:125:int calculateVariant(net.minecraft.world.entity.animal.TropicalFish$Pattern,net.minecraft.world.item.DyeColor,net.minecraft.world.item.DyeColor) -> a
    128:132:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    135:135:java.lang.String getPredefinedName(int) -> b
    139:139:net.minecraft.world.item.DyeColor getBaseColor(int) -> s
    143:143:net.minecraft.world.item.DyeColor getPatternColor(int) -> t
    147:149:java.lang.String getFishTypeName(int) -> u
    154:157:void defineSynchedData() -> w_
    161:164:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    168:171:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    174:175:void setVariant(int) -> v
    179:179:boolean isMaxGroupSizeReached(int) -> c
    183:183:int getVariant() -> ez
    188:192:void saveToBucketTag(net.minecraft.world.item.ItemStack) -> i
    196:196:net.minecraft.world.item.ItemStack getBucketItemStack() -> l
    201:201:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    206:206:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    211:211:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    216:216:net.minecraft.sounds.SoundEvent getFlopSound() -> er
    220:220:int getBaseColorIdx(int) -> x
    224:224:float[] getBaseColor() -> eA
    228:228:int getPatternColorIdx(int) -> y
    232:232:float[] getPatternColor() -> eB
    236:236:int getBaseVariant(int) -> w
    240:240:int getBaseVariant() -> eC
    244:244:int getPatternVariant(int) -> z
    248:252:net.minecraft.resources.ResourceLocation getPatternTextureLocation() -> eD
    256:256:net.minecraft.resources.ResourceLocation getBaseTextureLocation() -> eE
    262:299:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    27:81:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.TropicalFish$1 -> atz$1:
net.minecraft.world.entity.animal.TropicalFish$Pattern -> atz$a:
    net.minecraft.world.entity.animal.TropicalFish$Pattern KOB -> a
    net.minecraft.world.entity.animal.TropicalFish$Pattern SUNSTREAK -> b
    net.minecraft.world.entity.animal.TropicalFish$Pattern SNOOPER -> c
    net.minecraft.world.entity.animal.TropicalFish$Pattern DASHER -> d
    net.minecraft.world.entity.animal.TropicalFish$Pattern BRINELY -> e
    net.minecraft.world.entity.animal.TropicalFish$Pattern SPOTTY -> f
    net.minecraft.world.entity.animal.TropicalFish$Pattern FLOPPER -> g
    net.minecraft.world.entity.animal.TropicalFish$Pattern STRIPEY -> h
    net.minecraft.world.entity.animal.TropicalFish$Pattern GLITTER -> i
    net.minecraft.world.entity.animal.TropicalFish$Pattern BLOCKFISH -> j
    net.minecraft.world.entity.animal.TropicalFish$Pattern BETTY -> k
    net.minecraft.world.entity.animal.TropicalFish$Pattern CLAYFISH -> l
    int base -> m
    int index -> n
    net.minecraft.world.entity.animal.TropicalFish$Pattern[] VALUES -> o
    net.minecraft.world.entity.animal.TropicalFish$Pattern[] $VALUES -> p
    84:84:net.minecraft.world.entity.animal.TropicalFish$Pattern[] values() -> values
    84:84:net.minecraft.world.entity.animal.TropicalFish$Pattern valueOf(java.lang.String) -> valueOf
    102:105:void <init>(java.lang.String,int,int,int) -> <init>
    108:108:int getBase() -> a
    112:112:int getIndex() -> b
    116:116:java.lang.String getPatternName(int,int) -> a
    120:120:java.lang.String getName() -> c
    84:100:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.TropicalFish$TropicalFishGroupData -> atz$b:
    int base -> b
    int pattern -> c
    int baseColor -> d
    int patternColor -> e
    309:314:void <init>(net.minecraft.world.entity.animal.TropicalFish,int,int,int,int) -> <init>
    302:302:int access$000(net.minecraft.world.entity.animal.TropicalFish$TropicalFishGroupData) -> a
    302:302:int access$100(net.minecraft.world.entity.animal.TropicalFish$TropicalFishGroupData) -> b
    302:302:int access$200(net.minecraft.world.entity.animal.TropicalFish$TropicalFishGroupData) -> c
    302:302:int access$300(net.minecraft.world.entity.animal.TropicalFish$TropicalFishGroupData) -> d
    302:302:void <init>(net.minecraft.world.entity.animal.TropicalFish,int,int,int,int,net.minecraft.world.entity.animal.TropicalFish$1) -> <init>
net.minecraft.world.entity.animal.Turtle -> aua:
    net.minecraft.network.syncher.EntityDataAccessor HOME_POS -> bx
    net.minecraft.network.syncher.EntityDataAccessor HAS_EGG -> by
    net.minecraft.network.syncher.EntityDataAccessor LAYING_EGG -> bz
    net.minecraft.network.syncher.EntityDataAccessor TRAVEL_POS -> bA
    net.minecraft.network.syncher.EntityDataAccessor GOING_HOME -> bB
    net.minecraft.network.syncher.EntityDataAccessor TRAVELLING -> bC
    int layEggCounter -> bD
    java.util.function.Predicate BABY_ON_LAND_SELECTOR -> bw
    78:83:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    86:87:void setHomePos(net.minecraft.core.BlockPos) -> g
    90:90:net.minecraft.core.BlockPos getHomePos() -> es
    94:95:void setTravelPos(net.minecraft.core.BlockPos) -> h
    98:98:net.minecraft.core.BlockPos getTravelPos() -> et
    102:102:boolean hasEgg() -> eq
    106:107:void setHasEgg(boolean) -> r
    110:110:boolean isLayingEgg() -> er
    114:116:void setLayingEgg(boolean) -> s
    119:119:boolean isGoingHome() -> eu
    123:124:void setGoingHome(boolean) -> t
    127:127:boolean isTravelling() -> ez
    131:132:void setTravelling(boolean) -> u
    136:143:void defineSynchedData() -> w_
    147:157:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    161:173:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    178:180:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    184:186:boolean checkTurtleSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> c
    191:200:void registerGoals() -> n
    204:208:void registerAttributes() -> cA
    212:212:boolean isPushedByWater() -> bM
    218:218:boolean canBreatheUnderwater() -> cB
    223:223:net.minecraft.world.entity.MobType getMobType() -> di
    228:228:int getAmbientSoundInterval() -> A
    234:238:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    243:244:void playSwimSound(float) -> d
    248:248:net.minecraft.sounds.SoundEvent getSwimSound() -> am
    254:257:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    263:266:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    271:274:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    278:278:boolean canFallInLove() -> ev
    283:283:float nextStep() -> ak
    288:288:float getScale() -> cC
    293:293:net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level) -> b
    299:299:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    304:304:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    309:317:float getWalkTargetValue(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader) -> a
    322:330:void aiStep() -> k
    334:340:void ageBoundaryReached() -> l
    344:355:void travel(net.minecraft.world.phys.Vec3) -> e
    359:359:boolean canBeLeashed(net.minecraft.world.entity.player.Player) -> a
    364:365:void thunderHit(net.minecraft.world.entity.global.LightningBolt) -> a
    75:75:boolean lambda$static$0(net.minecraft.world.entity.LivingEntity) -> i
    65:65:boolean access$200(net.minecraft.world.entity.animal.Turtle) -> a
    65:65:java.util.Random access$300(net.minecraft.world.entity.animal.Turtle) -> b
    65:65:void access$400(net.minecraft.world.entity.animal.Turtle,net.minecraft.core.BlockPos) -> a
    65:65:void access$500(net.minecraft.world.entity.animal.Turtle,boolean) -> a
    65:65:net.minecraft.core.BlockPos access$600(net.minecraft.world.entity.animal.Turtle) -> c
    65:65:net.minecraft.core.BlockPos access$700(net.minecraft.world.entity.animal.Turtle) -> d
    65:65:void access$800(net.minecraft.world.entity.animal.Turtle,boolean) -> b
    65:65:void access$900(net.minecraft.world.entity.animal.Turtle,boolean) -> c
    65:65:int access$1000(net.minecraft.world.entity.animal.Turtle) -> e
    65:65:void access$1100(net.minecraft.world.entity.animal.Turtle,boolean) -> d
    65:65:java.util.Random access$1200(net.minecraft.world.entity.animal.Turtle) -> f
    65:65:int access$1008(net.minecraft.world.entity.animal.Turtle) -> g
    65:65:boolean access$1300(net.minecraft.world.entity.animal.Turtle) -> h
    66:75:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Turtle$1 -> aua$1:
net.minecraft.world.entity.animal.Turtle$TurtleBreedGoal -> aua$a:
    net.minecraft.world.entity.animal.Turtle turtle -> d
    601:603:void <init>(net.minecraft.world.entity.animal.Turtle,double) -> <init>
    607:607:boolean canUse() -> a
    612:630:void breed() -> g
net.minecraft.world.entity.animal.Turtle$TurtleGoHomeGoal -> aua$b:
    net.minecraft.world.entity.animal.Turtle turtle -> a
    double speedModifier -> b
    boolean stuck -> c
    int closeToHomeTryTicks -> d
    471:474:void <init>(net.minecraft.world.entity.animal.Turtle,double) -> <init>
    478:490:boolean canUse() -> a
    495:498:void start() -> c
    502:503:void stop() -> d
    507:507:boolean canContinueToUse() -> b
    512:537:void tick() -> e
net.minecraft.world.entity.animal.Turtle$TurtleGoToWaterGoal -> aua$c:
    net.minecraft.world.entity.animal.Turtle turtle -> g
    711:714:void <init>(net.minecraft.world.entity.animal.Turtle,double) -> <init>
    718:718:boolean canContinueToUse() -> b
    723:731:boolean canUse() -> a
    736:736:boolean shouldRecalculatePath() -> j
    741:742:boolean isValidTarget(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    705:705:void <init>(net.minecraft.world.entity.animal.Turtle,double,net.minecraft.world.entity.animal.Turtle$1) -> <init>
net.minecraft.world.entity.animal.Turtle$TurtleLayEggGoal -> aua$d:
    net.minecraft.world.entity.animal.Turtle turtle -> g
    637:639:void <init>(net.minecraft.world.entity.animal.Turtle,double) -> <init>
    643:646:boolean canUse() -> a
    651:651:boolean canContinueToUse() -> b
    656:674:void tick() -> e
    678:683:boolean isValidTarget(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.animal.Turtle$TurtleMoveControl -> aua$e:
    net.minecraft.world.entity.animal.Turtle turtle -> i
    750:752:void <init>(net.minecraft.world.entity.animal.Turtle) -> <init>
    755:769:void updateSpeed() -> g
    773:794:void tick() -> a
net.minecraft.world.entity.animal.Turtle$TurtlePanicGoal -> aua$f:
    369:370:void <init>(net.minecraft.world.entity.animal.Turtle,double) -> <init>
    374:387:boolean canUse() -> a
net.minecraft.world.entity.animal.Turtle$TurtlePathNavigation -> aua$g:
    799:800:void <init>(net.minecraft.world.entity.animal.Turtle,net.minecraft.world.level.Level) -> <init>
    804:804:boolean canUpdatePath() -> a
    810:811:net.minecraft.world.level.pathfinder.PathFinder createPathFinder(int) -> a
    816:823:boolean isStableDestination(net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.animal.Turtle$TurtleRandomStrollGoal -> aua$h:
    net.minecraft.world.entity.animal.Turtle turtle -> h
    691:693:void <init>(net.minecraft.world.entity.animal.Turtle,double,int) -> <init>
    697:701:boolean canUse() -> a
    687:687:void <init>(net.minecraft.world.entity.animal.Turtle,double,int,net.minecraft.world.entity.animal.Turtle$1) -> <init>
net.minecraft.world.entity.animal.Turtle$TurtleTemptGoal -> aua$i:
    net.minecraft.world.entity.ai.targeting.TargetingConditions TEMPT_TARGETING -> a
    net.minecraft.world.entity.animal.Turtle turtle -> b
    double speedModifier -> c
    net.minecraft.world.entity.player.Player player -> d
    int calmDown -> e
    java.util.Set items -> f
    549:554:void <init>(net.minecraft.world.entity.animal.Turtle,double,net.minecraft.world.item.Item) -> <init>
    558:567:boolean canUse() -> a
    571:571:boolean shouldFollowItem(net.minecraft.world.item.ItemStack) -> a
    576:576:boolean canContinueToUse() -> b
    581:584:void stop() -> d
    588:594:void tick() -> e
    541:541:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Turtle$TurtleTravelGoal -> aua$j:
    net.minecraft.world.entity.animal.Turtle turtle -> a
    double speedModifier -> b
    boolean stuck -> c
    396:399:void <init>(net.minecraft.world.entity.animal.Turtle,double) -> <init>
    403:403:boolean canUse() -> a
    408:422:void start() -> c
    426:450:void tick() -> e
    454:454:boolean canContinueToUse() -> b
    459:461:void stop() -> d
net.minecraft.world.entity.animal.WaterAnimal -> aub:
    14:17:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    21:21:boolean canBreatheUnderwater() -> cB
    26:26:net.minecraft.world.entity.MobType getMobType() -> di
    31:31:boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader) -> a
    36:36:int getAmbientSoundInterval() -> A
    41:41:int getExperienceReward(net.minecraft.world.entity.player.Player) -> d
    45:54:void handleAirSupply(int) -> a
    58:61:void baseTick() -> aa
    66:66:boolean isPushedByWater() -> bM
    71:71:boolean canBeLeashed(net.minecraft.world.entity.player.Player) -> a
net.minecraft.world.entity.animal.Wolf -> auc:
    net.minecraft.network.syncher.EntityDataAccessor DATA_INTERESTED_ID -> bA
    net.minecraft.network.syncher.EntityDataAccessor DATA_COLLAR_COLOR -> bB
    java.util.function.Predicate PREY_SELECTOR -> bz
    float interestedAngle -> bC
    float interestedAngleO -> bD
    boolean isWet -> bE
    boolean isShaking -> bF
    float shakeAnim -> bG
    float shakeAnimO -> bH
    81:84:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    88:108:void registerGoals() -> n
    112:123:void registerAttributes() -> cA
    127:133:void setTarget(net.minecraft.world.entity.LivingEntity) -> h
    137:140:void defineSynchedData() -> w_
    144:145:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    149:153:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    157:163:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    167:176:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    181:181:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    186:186:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    191:191:float getSoundVolume() -> dm
    196:207:void aiStep() -> k
    211:257:void tick() -> h
    261:267:void die(net.minecraft.world.damagesource.DamageSource) -> a
    270:270:boolean isWet() -> ez
    274:274:float getWetShade(float) -> v
    278:284:float getBodyRollAngle(float,float) -> g
    288:288:float getHeadRollAngle(float) -> w
    293:293:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    298:301:int getMaxHeadXRot() -> dU
    306:319:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    324:328:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    333:343:void setTame(boolean) -> s
    347:412:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    417:424:void handleEntityEvent(byte) -> a
    427:432:float getTailAngle() -> eA
    437:438:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    443:443:int getMaxSpawnClusterSize() -> dX
    447:447:boolean isAngry() -> eB
    451:457:void setAngry(boolean) -> u
    460:460:net.minecraft.world.item.DyeColor getCollarColor() -> eC
    464:465:void setCollarColor(net.minecraft.world.item.DyeColor) -> a
    469:475:net.minecraft.world.entity.animal.Wolf getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    479:480:void setIsInterested(boolean) -> v
    484:502:boolean canMate(net.minecraft.world.entity.animal.Animal) -> a
    506:506:boolean isInterested() -> eD
    512:529:boolean wantsToAttack(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    534:534:boolean canBeLeashed(net.minecraft.world.entity.player.Player) -> a
    61:61:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    66:67:boolean lambda$static$0(net.minecraft.world.entity.LivingEntity) -> j
    61:61:java.util.Random access$000(net.minecraft.world.entity.animal.Wolf) -> a
    62:65:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.Wolf$WolfAvoidEntityGoal -> auc$a:
    net.minecraft.world.entity.animal.Wolf wolf -> j
    net.minecraft.world.entity.animal.Wolf this$0 -> i
    543:546:void <init>(net.minecraft.world.entity.animal.Wolf,net.minecraft.world.entity.animal.Wolf,java.lang.Class,float,double,double) -> <init>
    550:556:boolean canUse() -> a
    560:560:boolean avoidLlama(net.minecraft.world.entity.animal.horse.Llama) -> a
    565:567:void start() -> c
    571:573:void tick() -> e
net.minecraft.world.entity.animal.horse.AbstractChestedHorse -> aud:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_CHEST -> bF
    26:29:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    33:36:void defineSynchedData() -> w_
    40:45:void registerAttributes() -> cA
    48:48:boolean hasChest() -> eq
    52:53:void setChest(boolean) -> r
    57:60:int getInventorySize() -> er
    65:65:double getRideHeight() -> aS
    70:72:net.minecraft.sounds.SoundEvent getAngrySound() -> es
    77:84:void dropEquipment() -> cU
    88:108:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    112:131:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    135:147:boolean setSlot(int,net.minecraft.world.item.ItemStack) -> a_
    152:206:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    210:211:void playChestEquipsSound() -> et
    214:214:int getInventoryColumns() -> eu
    22:22:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.horse.AbstractHorse -> aue:
    java.util.function.Predicate PARENT_HORSE_SELECTOR -> bF
    net.minecraft.world.entity.ai.targeting.TargetingConditions MOMMY_TARGETING -> bG
    net.minecraft.world.entity.ai.attributes.Attribute JUMP_STRENGTH -> bw
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_FLAGS -> bH
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_OWNER_UUID -> bI
    int eatingCounter -> bJ
    int mouthCounter -> bK
    int standCounter -> bL
    int tailCounter -> bx
    int sprintCounter -> by
    boolean isJumping -> bz
    net.minecraft.world.SimpleContainer inventory -> bA
    int temper -> bB
    float playerJumpPendingScale -> bC
    boolean allowStandSliding -> bM
    float eatAnim -> bN
    float eatAnimO -> bO
    float standAnim -> bP
    float standAnimO -> bQ
    float mouthAnim -> bR
    float mouthAnimO -> bS
    boolean canGallop -> bD
    int gallopSoundCounter -> bE
    111:120:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    124:133:void registerGoals() -> n
    136:137:void addBehaviourGoals() -> ez
    141:144:void defineSynchedData() -> w_
    147:147:boolean getFlag(int) -> t
    151:157:void setFlag(int,boolean) -> d
    160:160:boolean isTamed() -> eA
    165:165:java.util.UUID getOwnerUUID() -> eB
    169:170:void setOwnerUUID(java.util.UUID) -> b
    173:173:boolean isJumping() -> eC
    177:178:void setTamed(boolean) -> s
    181:182:void setIsJumping(boolean) -> t
    186:186:boolean canBeLeashed(net.minecraft.world.entity.player.Player) -> a
    191:194:void onLeashDistance(float) -> u
    197:197:boolean isEating() -> eD
    201:201:boolean isStanding() -> eE
    205:205:boolean isBred() -> eF
    209:210:void setBred(boolean) -> u
    213:214:void setSaddled(boolean) -> v
    217:217:int getTemper() -> eG
    221:222:void setTemper(int) -> u
    225:228:int modifyTemper(int) -> v
    233:238:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    243:243:boolean isPushable() -> aL
    247:251:void eating() -> eq
    255:273:boolean causeFallDamage(float,float) -> b
    278:278:int calculateFallDamage(float,float) -> e
    282:282:int getInventorySize() -> er
    286:301:void createInventory() -> eH
    304:309:void updateEquipment() -> eI
    313:318:void containerChanged(net.minecraft.world.Container) -> a
    321:321:double getCustomJump() -> eJ
    327:327:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    333:336:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    342:345:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    349:349:boolean canBeSaddled() -> eK
    353:353:boolean isSaddled() -> eL
    358:359:net.minecraft.sounds.SoundEvent getAngrySound() -> es
    364:386:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    389:390:void playGallopSound(net.minecraft.world.level.block.SoundType) -> a
    394:400:void registerAttributes() -> cA
    404:404:int getMaxSpawnClusterSize() -> dX
    408:408:int getMaxTemper() -> eM
    413:413:float getSoundVolume() -> dm
    418:418:int getAmbientSoundInterval() -> A
    422:425:void openInventory(net.minecraft.world.entity.player.Player) -> e
    428:486:boolean handleEating(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> b
    490:497:void doPlayerRide(net.minecraft.world.entity.player.Player) -> g
    501:501:boolean isImmobile() -> do
    507:507:boolean isFood(net.minecraft.world.item.ItemStack) -> i
    511:512:void moveTail() -> et
    516:527:void dropEquipment() -> cU
    531:559:void aiStep() -> k
    562:568:void followMommy() -> eN
    571:571:boolean canEatGrass() -> eO
    576:643:void tick() -> h
    646:650:void openMouth() -> eu
    653:654:void setEating(boolean) -> w
    657:661:void setStanding(boolean) -> x
    664:668:void stand() -> eW
    671:676:void makeMad() -> eP
    679:685:boolean tameWithName(net.minecraft.world.entity.player.Player) -> h
    690:777:void travel(net.minecraft.world.phys.Vec3) -> e
    780:781:void playJumpSound() -> eQ
    785:799:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    803:832:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    836:836:boolean canMate(net.minecraft.world.entity.animal.Animal) -> a
    840:840:boolean canParent() -> eR
    846:846:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    851:859:void setOffspringAttributes(net.minecraft.world.entity.AgableMob,net.minecraft.world.entity.animal.horse.AbstractHorse) -> a
    863:863:boolean canBeControlledByRider() -> dY
    867:867:float getEatAnim(float) -> v
    871:871:float getStandAnim(float) -> w
    875:875:float getMouthAnim(float) -> x
    880:896:void onPlayerJump(int) -> a_
    900:900:boolean canJump() -> G_
    905:905:float getJumpRidingScale() -> H_
    910:911:void setJumpRidingScale(float) -> a_
    915:917:void handleStartJump(int) -> b
    921:921:void handleStopJump() -> c
    924:932:void spawnTamingParticles(boolean) -> y
    936:943:void handleEntityEvent(byte) -> a
    947:965:void positionRider(net.minecraft.world.entity.Entity) -> k
    969:969:float generateRandomMaxHealth() -> eS
    973:973:double generateRandomJumpStrength() -> eT
    977:977:double generateRandomSpeed() -> eU
    982:982:boolean onLadder() -> y_
    987:987:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    991:991:boolean wearsArmor() -> eV
    995:995:boolean isArmor(net.minecraft.world.item.ItemStack) -> j
    1000:1017:boolean setSlot(int,net.minecraft.world.item.ItemStack) -> a_
    1023:1026:net.minecraft.world.entity.Entity getControllingPassenger() -> cd
    1032:1037:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    74:74:boolean lambda$static$0(net.minecraft.world.entity.LivingEntity) -> i
    74:80:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.horse.Donkey -> auf:
    13:14:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    18:19:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    24:25:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    30:31:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    36:44:boolean canMate(net.minecraft.world.entity.animal.Animal) -> a
    49:54:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
net.minecraft.world.entity.animal.horse.Horse -> aug:
    java.util.UUID ARMOR_MODIFIER_UUID -> bF
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_TYPE_VARIANT -> bG
    java.lang.String[] VARIANT_TEXTURES -> bH
    java.lang.String[] VARIANT_HASHES -> bI
    java.lang.String[] MARKING_TEXTURES -> bJ
    java.lang.String[] MARKING_HASHES -> bK
    java.lang.String layerTextureHashName -> bL
    java.lang.String[] layerTextureLayers -> bM
    67:71:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    75:78:void defineSynchedData() -> w_
    82:89:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    92:92:net.minecraft.world.item.ItemStack getArmor() -> eq
    96:98:void setArmor(net.minecraft.world.item.ItemStack) -> k
    102:114:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    117:119:void setVariant(int) -> w
    122:122:int getVariant() -> et
    126:127:void clearLayeredTextureInfo() -> eX
    130:139:void rebuildLayeredTextureInfo() -> eY
    142:145:java.lang.String getLayeredTextureHashName() -> eu
    149:152:java.lang.String[] getLayeredTextureLayers() -> eW
    157:162:void updateEquipment() -> eI
    165:176:void setArmorEquipment(net.minecraft.world.item.ItemStack) -> l
    180:188:void containerChanged(net.minecraft.world.Container) -> a
    192:196:void playGallopSound(net.minecraft.world.level.block.SoundType) -> a
    200:205:void registerAttributes() -> cA
    209:216:void tick() -> h
    220:221:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    226:227:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    232:233:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    238:239:net.minecraft.sounds.SoundEvent getAngrySound() -> es
    244:291:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    296:304:boolean canMate(net.minecraft.world.entity.animal.Animal) -> a
    310:339:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    344:344:boolean wearsArmor() -> eV
    349:349:boolean isArmor(net.minecraft.world.item.ItemStack) -> j
    356:364:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    35:61:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.horse.Horse$HorseGroupData -> aug$a:
    int variant -> a
    370:372:void <init>(int) -> <init>
net.minecraft.world.entity.animal.horse.Llama -> auh:
    net.minecraft.network.syncher.EntityDataAccessor DATA_STRENGTH_ID -> bF
    net.minecraft.network.syncher.EntityDataAccessor DATA_SWAG_ID -> bG
    net.minecraft.network.syncher.EntityDataAccessor DATA_VARIANT_ID -> bH
    boolean didSpit -> bI
    net.minecraft.world.entity.animal.horse.Llama caravanHead -> bJ
    net.minecraft.world.entity.animal.horse.Llama caravanTail -> bK
    71:72:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    75:75:boolean isTraderLlama() -> eW
    79:80:void setStrength(int) -> x
    83:86:void setRandomStrength() -> ff
    89:89:int getStrength() -> eX
    94:102:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    106:116:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    120:133:void registerGoals() -> n
    137:139:void registerAttributes() -> cA
    143:148:void defineSynchedData() -> w_
    151:151:int getVariant() -> eY
    155:156:void setVariant(int) -> w
    160:163:int getInventorySize() -> er
    168:175:void positionRider(net.minecraft.world.entity.Entity) -> k
    179:179:double getRideHeight() -> aS
    184:184:boolean canBeControlledByRider() -> dY
    189:229:boolean handleEating(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> b
    234:234:boolean isImmobile() -> do
    240:251:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    264:264:net.minecraft.sounds.SoundEvent getAngrySound() -> es
    269:269:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    274:274:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    279:279:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    284:285:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    289:290:void playChestEquipsSound() -> et
    294:298:void makeMad() -> eP
    302:302:int getInventoryColumns() -> eu
    307:307:boolean wearsArmor() -> eV
    312:313:boolean isArmor(net.minecraft.world.item.ItemStack) -> j
    318:318:boolean canBeSaddled() -> eK
    323:330:void containerChanged(net.minecraft.world.Container) -> a
    334:341:void updateEquipment() -> eI
    344:345:void setSwag(net.minecraft.world.item.DyeColor) -> a
    349:353:net.minecraft.world.item.DyeColor getDyeColor(net.minecraft.world.item.ItemStack) -> k
    358:359:net.minecraft.world.item.DyeColor getSwag() -> eZ
    364:364:int getMaxTemper() -> eM
    369:369:boolean canMate(net.minecraft.world.entity.animal.Animal) -> a
    374:388:net.minecraft.world.entity.animal.horse.Llama getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    392:392:net.minecraft.world.entity.animal.horse.Llama makeBabyLlama() -> fa
    396:406:void spit(net.minecraft.world.entity.LivingEntity) -> i
    409:410:void setDidSpit(boolean) -> z
    414:431:boolean causeFallDamage(float,float) -> b
    435:439:void leaveCaravan() -> fb
    442:444:void joinCaravan(net.minecraft.world.entity.animal.horse.Llama) -> a
    447:447:boolean hasCaravanTail() -> fc
    451:451:boolean inCaravan() -> fd
    456:456:net.minecraft.world.entity.animal.horse.Llama getCaravanHead() -> fe
    461:461:double followLeashSpeed() -> ep
    466:469:void followMommy() -> eN
    473:473:boolean canEatGrass() -> eO
    478:479:void performRangedAttack(net.minecraft.world.entity.LivingEntity,float) -> a
    55:55:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    55:55:boolean access$100(net.minecraft.world.entity.animal.horse.Llama) -> b
    55:55:void access$200(net.minecraft.world.entity.animal.horse.Llama,boolean) -> a
    59:61:void <clinit>() -> <clinit>
net.minecraft.world.entity.animal.horse.Llama$1 -> auh$1:
net.minecraft.world.entity.animal.horse.Llama$LlamaAttackWolfGoal -> auh$a:
    501:502:void <init>(net.minecraft.world.entity.animal.horse.Llama) -> <init>
    506:506:double getFollowDistance() -> k
    501:501:boolean lambda$new$0(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.animal.horse.Llama$LlamaGroupData -> auh$b:
    int variant -> a
    257:259:void <init>(int) -> <init>
    254:254:void <init>(int,net.minecraft.world.entity.animal.horse.Llama$1) -> <init>
net.minecraft.world.entity.animal.horse.Llama$LlamaHurtByTargetGoal -> auh$c:
    483:484:void <init>(net.minecraft.world.entity.animal.horse.Llama) -> <init>
    488:495:boolean canContinueToUse() -> b
net.minecraft.world.entity.animal.horse.Mule -> aui:
    12:13:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    17:18:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    23:24:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    29:30:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    35:36:void playChestEquipsSound() -> et
    40:40:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
net.minecraft.world.entity.animal.horse.SkeletonHorse -> auj:
    net.minecraft.world.entity.animal.horse.SkeletonTrapGoal skeletonTrapGoal -> bF
    boolean isTrap -> bG
    int trapTime -> bH
    23:31:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    35:40:void registerAttributes() -> cA
    45:45:void addBehaviourGoals() -> ez
    49:53:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    59:60:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    65:66:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    71:83:net.minecraft.sounds.SoundEvent getSwimSound() -> am
    88:93:void playSwimSound(float) -> d
    97:102:void playJumpSound() -> eQ
    106:106:net.minecraft.world.entity.MobType getMobType() -> di
    111:111:double getRideHeight() -> aS
    116:121:void aiStep() -> k
    125:129:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    133:137:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    141:141:boolean rideableUnderWater() -> bi
    146:146:float getWaterSlowDown() -> ds
    150:150:boolean isTrap() -> eq
    154:164:void setTrap(boolean) -> r
    169:169:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    174:208:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.entity.animal.horse.SkeletonTrapGoal -> auk:
    net.minecraft.world.entity.animal.horse.SkeletonHorse horse -> a
    20:22:void <init>(net.minecraft.world.entity.animal.horse.SkeletonHorse) -> <init>
    26:26:boolean canUse() -> a
    31:45:void tick() -> e
    48:56:net.minecraft.world.entity.animal.horse.AbstractHorse createHorse(net.minecraft.world.DifficultyInstance) -> a
    60:74:net.minecraft.world.entity.monster.Skeleton createSkeleton(net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.animal.horse.AbstractHorse) -> a
net.minecraft.world.entity.animal.horse.TraderLlama -> aul:
    int despawnDelay -> bF
    27:29:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    33:33:boolean isTraderLlama() -> eW
    38:38:net.minecraft.world.entity.animal.horse.Llama makeBabyLlama() -> fa
    43:45:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    49:53:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    57:62:void registerGoals() -> n
    65:66:void setDespawnDelay(int) -> x
    70:76:void doPlayerRide(net.minecraft.world.entity.player.Player) -> g
    80:85:void aiStep() -> k
    88:98:void maybeDespawn() -> ff
    101:103:boolean canDespawn() -> fg
    107:107:boolean isLeashedToWanderingTrader() -> fh
    111:111:boolean isLeashedToSomethingOtherThanTheWanderingTrader() -> fi
    117:126:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
net.minecraft.world.entity.animal.horse.TraderLlama$TraderLlamaDefendWanderingTraderGoal -> aul$a:
    net.minecraft.world.entity.animal.horse.Llama llama -> b
    net.minecraft.world.entity.LivingEntity ownerLastHurtBy -> c
    int timestamp -> d
    net.minecraft.world.entity.animal.horse.TraderLlama this$0 -> a
    134:138:void <init>(net.minecraft.world.entity.animal.horse.TraderLlama,net.minecraft.world.entity.animal.horse.Llama) -> <init>
    142:153:boolean canUse() -> a
    158:166:void start() -> c
net.minecraft.world.entity.animal.horse.ZombieHorse -> aum:
    21:22:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    26:31:void registerAttributes() -> cA
    35:35:net.minecraft.world.entity.MobType getMobType() -> di
    40:41:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    46:47:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    52:53:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    59:59:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    64:98:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    104:104:void addBehaviourGoals() -> ez
net.minecraft.world.entity.animal.horse.package-info -> aun:
net.minecraft.world.entity.animal.package-info -> auo:
net.minecraft.world.entity.boss.BossMob -> aup:
    float getMaxHealth() -> dd
    float getHealth() -> cS
    net.minecraft.network.chat.Component getDisplayName() -> d
net.minecraft.world.entity.boss.EnderDragonPart -> auq:
    net.minecraft.world.entity.boss.enderdragon.EnderDragon parentMob -> b
    java.lang.String name -> c
    net.minecraft.world.entity.EntityDimensions size -> d
    18:23:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon,java.lang.String,float,float) -> <init>
    27:27:void defineSynchedData() -> w_
    31:31:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    35:35:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    39:39:boolean isPickable() -> aK
    44:47:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    52:52:boolean is(net.minecraft.world.entity.Entity) -> s
    58:58:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    63:63:net.minecraft.world.entity.EntityDimensions getDimensions(net.minecraft.world.entity.Pose) -> a
net.minecraft.world.entity.boss.enderdragon.EndCrystal -> aur:
    net.minecraft.network.syncher.EntityDataAccessor DATA_BEAM_TARGET -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_SHOW_BOTTOM -> d
    int time -> b
    31:35:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    38:40:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    44:44:boolean isMovementNoisy() -> at
    49:51:void defineSynchedData() -> w_
    55:63:void tick() -> h
    67:71:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    75:81:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    85:85:boolean isPickable() -> aK
    90:104:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    109:111:void kill() -> U
    114:121:void onDestroyedBy(net.minecraft.world.damagesource.DamageSource) -> a
    124:125:void setBeamTarget(net.minecraft.core.BlockPos) -> a
    129:129:net.minecraft.core.BlockPos getBeamTarget() -> f
    133:134:void setShowBottom(boolean) -> a
    137:137:boolean showsBottom() -> i
    142:142:boolean shouldRenderAtSqrDistance(double) -> a
    147:147:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    25:26:void <clinit>() -> <clinit>
net.minecraft.world.entity.boss.enderdragon.EnderDragon -> aus:
    org.apache.logging.log4j.Logger LOGGER -> bD
    net.minecraft.network.syncher.EntityDataAccessor DATA_PHASE -> b
    net.minecraft.world.entity.ai.targeting.TargetingConditions CRYSTAL_DESTROY_TARGETING -> bE
    double[][] positions -> c
    int posPointer -> d
    net.minecraft.world.entity.boss.EnderDragonPart[] subEntities -> bF
    net.minecraft.world.entity.boss.EnderDragonPart head -> bw
    net.minecraft.world.entity.boss.EnderDragonPart neck -> bG
    net.minecraft.world.entity.boss.EnderDragonPart body -> bH
    net.minecraft.world.entity.boss.EnderDragonPart tail1 -> bI
    net.minecraft.world.entity.boss.EnderDragonPart tail2 -> bJ
    net.minecraft.world.entity.boss.EnderDragonPart tail3 -> bK
    net.minecraft.world.entity.boss.EnderDragonPart wing1 -> bL
    net.minecraft.world.entity.boss.EnderDragonPart wing2 -> bM
    float oFlapTime -> bx
    float flapTime -> by
    boolean inWall -> bz
    int dragonDeathTime -> bA
    float yRotA -> bB
    net.minecraft.world.entity.boss.enderdragon.EndCrystal nearestCrystal -> bC
    net.minecraft.world.level.dimension.end.EndDragonFight dragonFight -> bN
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhaseManager phaseManager -> bO
    int growlTime -> bP
    int sittingDamageReceived -> bQ
    net.minecraft.world.level.pathfinder.Node[] nodes -> bR
    int[] nodeAdjacency -> bS
    net.minecraft.world.level.pathfinder.BinaryHeap openSet -> bT
    68:126:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    130:133:void registerAttributes() -> cA
    137:139:void defineSynchedData() -> w_
    142:160:double[] getLatencyPos(int,float) -> a
    165:367:void aiStep() -> k
    370:371:void tickPart(net.minecraft.world.entity.boss.EnderDragonPart,double,double,double) -> a
    374:379:float getHeadYOffset() -> er
    383:408:void checkCrystals() -> es
    411:426:void knockBack(java.util.List) -> a
    429:435:void hurt(java.util.List) -> b
    438:438:float rotWrap(double) -> i
    442:476:boolean checkWalls(net.minecraft.world.phys.AABB) -> b
    480:513:boolean hurt(net.minecraft.world.entity.boss.EnderDragonPart,net.minecraft.world.damagesource.DamageSource,float) -> a
    518:521:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    525:525:boolean reallyHurt(net.minecraft.world.damagesource.DamageSource,float) -> e
    530:536:void kill() -> U
    540:579:void tickDeath() -> cD
    582:587:void dropExperience(int) -> a
    591:651:int findClosestNode() -> l
    655:674:int findClosestNode(double,double,double) -> o
    679:763:net.minecraft.world.level.pathfinder.Path findPath(int,int,net.minecraft.world.level.pathfinder.Node) -> a
    767:774:net.minecraft.world.level.pathfinder.Path reconstructPath(net.minecraft.world.level.pathfinder.Node,net.minecraft.world.level.pathfinder.Node) -> a
    779:781:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    785:789:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    793:793:void checkDespawn() -> cy
    796:796:net.minecraft.world.entity.boss.EnderDragonPart[] getSubEntities() -> eo
    801:801:boolean isPickable() -> aK
    806:806:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    811:811:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    816:816:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    821:821:float getSoundVolume() -> dm
    825:843:float getHeadPartYOffset(int,double[],double[]) -> a
    847:873:net.minecraft.world.phys.Vec3 getHeadLookVector(float) -> u
    879:890:void onCrystalDestroyed(net.minecraft.world.entity.boss.enderdragon.EndCrystal,net.minecraft.core.BlockPos,net.minecraft.world.damagesource.DamageSource) -> a
    894:899:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    902:902:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhaseManager getPhaseManager() -> ep
    907:907:net.minecraft.world.level.dimension.end.EndDragonFight getDragonFight() -> eq
    912:912:boolean addEffect(net.minecraft.world.effect.MobEffectInstance) -> c
    917:917:boolean canRide(net.minecraft.world.entity.Entity) -> n
    922:922:boolean canChangeDimensions() -> bC
    58:62:void <clinit>() -> <clinit>
net.minecraft.world.entity.boss.enderdragon.package-info -> aut:
net.minecraft.world.entity.boss.enderdragon.phases.AbstractDragonPhaseInstance -> auu:
    net.minecraft.world.entity.boss.enderdragon.EnderDragon dragon -> a
    17:19:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    23:23:boolean isSitting() -> a
    28:28:void doClientTick() -> b
    32:32:void doServerTick() -> c
    36:36:void onCrystalDestroyed(net.minecraft.world.entity.boss.enderdragon.EndCrystal,net.minecraft.core.BlockPos,net.minecraft.world.damagesource.DamageSource,net.minecraft.world.entity.player.Player) -> a
    40:40:void begin() -> d
    44:44:void end() -> e
    48:48:float getFlySpeed() -> f
    54:54:net.minecraft.world.phys.Vec3 getFlyTargetLocation() -> g
    59:59:float onHurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    64:67:float getTurnSpeed() -> h
net.minecraft.world.entity.boss.enderdragon.phases.AbstractDragonSittingPhase -> auv:
    9:10:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    14:14:boolean isSitting() -> a
    19:23:float onHurt(net.minecraft.world.damagesource.DamageSource,float) -> a
net.minecraft.world.entity.boss.enderdragon.phases.DragonChargePlayerPhase -> auw:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.world.phys.Vec3 targetLocation -> c
    int timeSinceCharge -> d
    18:19:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    23:40:void doServerTick() -> c
    44:46:void begin() -> d
    49:50:void setTarget(net.minecraft.world.phys.Vec3) -> a
    54:54:float getFlySpeed() -> f
    60:60:net.minecraft.world.phys.Vec3 getFlyTargetLocation() -> g
    65:65:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
    11:11:void <clinit>() -> <clinit>
net.minecraft.world.entity.boss.enderdragon.phases.DragonDeathPhase -> auy:
    net.minecraft.world.phys.Vec3 targetLocation -> b
    int time -> c
    17:18:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    22:28:void doClientTick() -> b
    32:45:void doServerTick() -> c
    49:51:void begin() -> d
    55:55:float getFlySpeed() -> f
    61:61:net.minecraft.world.phys.Vec3 getFlyTargetLocation() -> g
    66:66:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonHoldingPatternPhase -> auz:
    net.minecraft.world.entity.ai.targeting.TargetingConditions NEW_TARGET_TARGETING -> b
    net.minecraft.world.level.pathfinder.Path currentPath -> c
    net.minecraft.world.phys.Vec3 targetLocation -> d
    boolean clockwise -> e
    25:26:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    30:30:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
    35:39:void doServerTick() -> c
    43:45:void begin() -> d
    50:50:net.minecraft.world.phys.Vec3 getFlyTargetLocation() -> g
    54:113:void findNewTarget() -> j
    116:118:void strafePlayer(net.minecraft.world.entity.player.Player) -> a
    121:135:void navigateToNextPathNode() -> k
    139:142:void onCrystalDestroyed(net.minecraft.world.entity.boss.enderdragon.EndCrystal,net.minecraft.core.BlockPos,net.minecraft.world.damagesource.DamageSource,net.minecraft.world.entity.player.Player) -> a
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.entity.boss.enderdragon.phases.DragonHoverPhase -> ava:
    net.minecraft.world.phys.Vec3 targetLocation -> b
    12:13:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    17:20:void doServerTick() -> c
    24:24:boolean isSitting() -> a
    29:30:void begin() -> d
    34:34:float getFlySpeed() -> f
    40:40:net.minecraft.world.phys.Vec3 getFlyTargetLocation() -> g
    45:45:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonLandingApproachPhase -> avb:
    net.minecraft.world.entity.ai.targeting.TargetingConditions NEAR_EGG_TARGETING -> b
    net.minecraft.world.level.pathfinder.Path currentPath -> c
    net.minecraft.world.phys.Vec3 targetLocation -> d
    22:23:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    27:27:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
    32:34:void begin() -> d
    38:42:void doServerTick() -> c
    47:47:net.minecraft.world.phys.Vec3 getFlyTargetLocation() -> g
    51:78:void findNewTarget() -> j
    81:95:void navigateToNextPathNode() -> k
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.entity.boss.enderdragon.phases.DragonLandingPhase -> avc:
    net.minecraft.world.phys.Vec3 targetLocation -> b
    18:19:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    23:38:void doClientTick() -> b
    42:50:void doServerTick() -> c
    54:54:float getFlySpeed() -> f
    59:62:float getTurnSpeed() -> h
    67:68:void begin() -> d
    73:73:net.minecraft.world.phys.Vec3 getFlyTargetLocation() -> g
    78:78:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonPhaseInstance -> avd:
    boolean isSitting() -> a
    void doClientTick() -> b
    void doServerTick() -> c
    void onCrystalDestroyed(net.minecraft.world.entity.boss.enderdragon.EndCrystal,net.minecraft.core.BlockPos,net.minecraft.world.damagesource.DamageSource,net.minecraft.world.entity.player.Player) -> a
    void begin() -> d
    void end() -> e
    float getFlySpeed() -> f
    float getTurnSpeed() -> h
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
    net.minecraft.world.phys.Vec3 getFlyTargetLocation() -> g
    float onHurt(net.minecraft.world.damagesource.DamageSource,float) -> a
net.minecraft.world.entity.boss.enderdragon.phases.DragonSittingAttackingPhase -> ave:
    int attackingTicks -> b
    13:14:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    18:19:void doClientTick() -> b
    23:26:void doServerTick() -> c
    30:31:void begin() -> d
    35:35:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.DragonSittingFlamingPhase -> avf:
    int flameTicks -> b
    int flameCount -> c
    net.minecraft.world.entity.AreaEffectCloud flame -> d
    23:24:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    28:46:void doClientTick() -> b
    50:84:void doServerTick() -> c
    88:90:void begin() -> d
    94:98:void end() -> e
    102:102:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
    106:107:void resetFlameCount() -> j
net.minecraft.world.entity.boss.enderdragon.phases.DragonSittingScanningPhase -> avg:
    net.minecraft.world.entity.ai.targeting.TargetingConditions CHARGE_TARGETING -> b
    net.minecraft.world.entity.ai.targeting.TargetingConditions scanTargeting -> c
    int scanningTime -> d
    21:24:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    28:64:void doServerTick() -> c
    68:69:void begin() -> d
    73:73:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
    23:23:boolean lambda$new$0(net.minecraft.world.entity.boss.enderdragon.EnderDragon,net.minecraft.world.entity.LivingEntity) -> a
    15:15:void <clinit>() -> <clinit>
net.minecraft.world.entity.boss.enderdragon.phases.DragonStrafePlayerPhase -> avh:
    org.apache.logging.log4j.Logger LOGGER -> b
    int fireballCharge -> c
    net.minecraft.world.level.pathfinder.Path currentPath -> d
    net.minecraft.world.phys.Vec3 targetLocation -> e
    net.minecraft.world.entity.LivingEntity attackTarget -> f
    boolean holdingPatternClockwise -> g
    28:29:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    33:101:void doServerTick() -> c
    104:140:void findNewTarget() -> j
    143:157:void navigateToNextPathNode() -> k
    161:165:void begin() -> d
    168:191:void setTarget(net.minecraft.world.entity.LivingEntity) -> a
    196:196:net.minecraft.world.phys.Vec3 getFlyTargetLocation() -> g
    201:201:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.entity.boss.enderdragon.phases.DragonTakeoffPhase -> avi:
    boolean firstTick -> b
    net.minecraft.world.level.pathfinder.Path currentPath -> c
    net.minecraft.world.phys.Vec3 targetLocation -> d
    18:19:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    23:32:void doServerTick() -> c
    36:39:void begin() -> d
    42:62:void findNewTarget() -> j
    65:79:void navigateToNextPathNode() -> k
    84:84:net.minecraft.world.phys.Vec3 getFlyTargetLocation() -> g
    89:89:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getPhase() -> i
net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase -> avj:
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase[] phases -> l
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase HOLDING_PATTERN -> a
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase STRAFE_PLAYER -> b
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase LANDING_APPROACH -> c
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase LANDING -> d
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase TAKEOFF -> e
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase SITTING_FLAMING -> f
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase SITTING_SCANNING -> g
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase SITTING_ATTACKING -> h
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase CHARGING_PLAYER -> i
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase DYING -> j
    net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase HOVERING -> k
    java.lang.Class instanceClass -> m
    int id -> n
    java.lang.String name -> o
    26:30:void <init>(int,java.lang.Class,java.lang.String) -> <init>
    34:37:net.minecraft.world.entity.boss.enderdragon.phases.DragonPhaseInstance createInstance(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> a
    42:42:java.lang.reflect.Constructor getConstructor() -> a
    46:46:int getId() -> b
    51:51:java.lang.String toString() -> toString
    55:58:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase getById(int) -> a
    62:62:int getCount() -> c
    66:69:net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase create(java.lang.Class,java.lang.String) -> a
    9:20:void <clinit>() -> <clinit>
net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhaseManager -> avk:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.entity.boss.enderdragon.EnderDragon dragon -> b
    net.minecraft.world.entity.boss.enderdragon.phases.DragonPhaseInstance[] phases -> c
    net.minecraft.world.entity.boss.enderdragon.phases.DragonPhaseInstance currentPhase -> d
    11:18:void <init>(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> <init>
    21:36:void setPhase(net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase) -> a
    39:39:net.minecraft.world.entity.boss.enderdragon.phases.DragonPhaseInstance getCurrentPhase() -> a
    44:48:net.minecraft.world.entity.boss.enderdragon.phases.DragonPhaseInstance getPhase(net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase) -> b
    8:8:void <clinit>() -> <clinit>
net.minecraft.world.entity.boss.enderdragon.phases.package-info -> avl:
net.minecraft.world.entity.boss.package-info -> avm:
net.minecraft.world.entity.boss.wither.WitherBoss -> avn:
    net.minecraft.network.syncher.EntityDataAccessor DATA_TARGET_A -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_TARGET_B -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_TARGET_C -> d
    java.util.List DATA_TARGETS -> bw
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_INV -> bx
    float[] xRotHeads -> by
    float[] yRotHeads -> bz
    float[] xRotOHeads -> bA
    float[] yRotOHeads -> bB
    int[] nextHeadUpdate -> bC
    int[] idleHeadUpdates -> bD
    int destroyBlocksTick -> bE
    net.minecraft.server.level.ServerBossEvent bossEvent -> bF
    java.util.function.Predicate LIVING_ENTITY_SELECTOR -> bG
    net.minecraft.world.entity.ai.targeting.TargetingConditions TARGETING_CONDITIONS -> bH
    66:86:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    90:99:void registerGoals() -> n
    103:109:void defineSynchedData() -> w_
    113:116:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    120:126:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    130:132:void setCustomName(net.minecraft.network.chat.Component) -> b
    136:136:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    141:141:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    146:146:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    151:227:void aiStep() -> k
    231:344:void customServerAiStep() -> dT
    347:347:boolean canDestroy(net.minecraft.world.level.block.state.BlockState) -> b
    351:353:void makeInvulnerable() -> l
    357:357:void makeStuckInBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.Vec3) -> a
    361:363:void startSeenByPlayer(net.minecraft.server.level.ServerPlayer) -> b
    367:369:void stopSeenByPlayer(net.minecraft.server.level.ServerPlayer) -> c
    372:377:double getHeadX(int) -> u
    381:384:double getHeadY(int) -> v
    389:394:double getHeadZ(int) -> w
    398:405:float rotlerp(float,float,float) -> a
    409:410:void performRangedAttack(int,net.minecraft.world.entity.LivingEntity) -> a
    413:430:void performRangedAttack(int,double,double,double,boolean) -> a
    434:435:void performRangedAttack(net.minecraft.world.entity.LivingEntity,float) -> a
    439:472:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    477:482:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    486:492:void checkDespawn() -> cy
    496:496:boolean causeFallDamage(float,float) -> b
    501:501:boolean addEffect(net.minecraft.world.effect.MobEffectInstance) -> c
    506:512:void registerAttributes() -> cA
    515:515:float getHeadYRot(int) -> a
    519:519:float getHeadXRot(int) -> b
    523:523:int getInvulnerableTicks() -> eq
    527:528:void setInvulnerableTicks(int) -> s
    531:531:int getAlternativeTarget(int) -> t
    535:536:void setAlternativeTarget(int,int) -> a
    540:540:boolean isPowered() -> J_
    545:545:net.minecraft.world.entity.MobType getMobType() -> di
    550:550:boolean canRide(net.minecraft.world.entity.Entity) -> n
    555:555:boolean canChangeDimensions() -> bC
    571:574:boolean canBeAffected(net.minecraft.world.effect.MobEffectInstance) -> d
    75:75:boolean lambda$static$0(net.minecraft.world.entity.LivingEntity) -> i
    60:76:void <clinit>() -> <clinit>
net.minecraft.world.entity.boss.wither.WitherBoss$WitherDoNothingGoal -> avn$a:
    net.minecraft.world.entity.boss.wither.WitherBoss this$0 -> a
    559:561:void <init>(net.minecraft.world.entity.boss.wither.WitherBoss) -> <init>
    565:565:boolean canUse() -> a
net.minecraft.world.entity.boss.wither.package-info -> avo:
net.minecraft.world.entity.decoration.ArmorStand -> avp:
    net.minecraft.core.Rotations DEFAULT_HEAD_POSE -> br
    net.minecraft.core.Rotations DEFAULT_BODY_POSE -> bs
    net.minecraft.core.Rotations DEFAULT_LEFT_ARM_POSE -> bt
    net.minecraft.core.Rotations DEFAULT_RIGHT_ARM_POSE -> bu
    net.minecraft.core.Rotations DEFAULT_LEFT_LEG_POSE -> bv
    net.minecraft.core.Rotations DEFAULT_RIGHT_LEG_POSE -> bw
    net.minecraft.network.syncher.EntityDataAccessor DATA_CLIENT_FLAGS -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_HEAD_POSE -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_BODY_POSE -> d
    net.minecraft.network.syncher.EntityDataAccessor DATA_LEFT_ARM_POSE -> e
    net.minecraft.network.syncher.EntityDataAccessor DATA_RIGHT_ARM_POSE -> f
    net.minecraft.network.syncher.EntityDataAccessor DATA_LEFT_LEG_POSE -> g
    net.minecraft.network.syncher.EntityDataAccessor DATA_RIGHT_LEG_POSE -> bp
    java.util.function.Predicate RIDABLE_MINECARTS -> bx
    net.minecraft.core.NonNullList handItems -> by
    net.minecraft.core.NonNullList armorItems -> bz
    boolean invisible -> bA
    long lastHit -> bq
    int disabledSlots -> bB
    net.minecraft.core.Rotations headPose -> bC
    net.minecraft.core.Rotations bodyPose -> bD
    net.minecraft.core.Rotations leftArmPose -> bE
    net.minecraft.core.Rotations rightArmPose -> bF
    net.minecraft.core.Rotations leftLegPose -> bG
    net.minecraft.core.Rotations rightLegPose -> bH
    80:96:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    99:101:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    105:110:void refreshDimensions() -> z_
    113:113:boolean hasPhysics() -> A
    118:118:boolean isEffectiveAi() -> dx
    123:131:void defineSynchedData() -> w_
    135:135:java.lang.Iterable getHandSlots() -> bc
    140:140:java.lang.Iterable getArmorSlots() -> bd
    145:151:net.minecraft.world.item.ItemStack getItemBySlot(net.minecraft.world.entity.EquipmentSlot) -> b
    156:166:void setItemSlot(net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.ItemStack) -> a
    171:192:boolean setSlot(int,net.minecraft.world.item.ItemStack) -> a_
    197:198:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> e
    203:236:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    240:269:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    272:289:void readPose(net.minecraft.nbt.CompoundTag) -> g
    292:311:net.minecraft.nbt.CompoundTag writePose() -> B
    317:317:boolean isPushable() -> aL
    323:323:void doPush(net.minecraft.world.entity.Entity) -> C
    328:336:void pushEntities() -> dv
    340:370:net.minecraft.world.InteractionResult interactAt(net.minecraft.world.entity.player.Player,net.minecraft.world.phys.Vec3,net.minecraft.world.InteractionHand) -> a
    374:390:net.minecraft.world.entity.EquipmentSlot getClickedSlot(net.minecraft.world.phys.Vec3) -> f
    394:394:boolean isDisabled(net.minecraft.world.entity.EquipmentSlot) -> d
    398:431:boolean swapItem(net.minecraft.world.entity.player.Player,net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.ItemStack,net.minecraft.world.InteractionHand) -> a
    436:491:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    496:504:void handleEntityEvent(byte) -> a
    508:513:boolean shouldRenderAtSqrDistance(double) -> a
    517:520:void showBreakingParticles() -> D
    523:531:void causeDamage(net.minecraft.world.damagesource.DamageSource,float) -> e
    534:536:void brokenByPlayer(net.minecraft.world.damagesource.DamageSource) -> f
    539:555:void brokenByAnything(net.minecraft.world.damagesource.DamageSource) -> g
    558:559:void playBrokenSound() -> F
    563:565:float tickHeadTurn(float,float) -> f
    570:570:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    575:575:double getRidingHeight() -> aR
    580:584:void travel(net.minecraft.world.phys.Vec3) -> e
    588:590:void setYBodyRot(float) -> l
    594:596:void setYHeadRot(float) -> k
    600:626:void tick() -> h
    630:631:void updateInvisibilityStatus() -> C
    635:637:void setInvisible(boolean) -> i
    641:641:boolean isBaby() -> x_
    646:647:void kill() -> U
    651:651:boolean ignoreExplosion() -> ca
    656:659:net.minecraft.world.level.material.PushReaction getPistonPushReaction() -> A_
    663:664:void setSmall(boolean) -> n
    667:667:boolean isSmall() -> l
    671:672:void setShowArms(boolean) -> o
    675:675:boolean isShowArms() -> n
    679:680:void setNoBasePlate(boolean) -> p
    683:683:boolean isNoBasePlate() -> o
    687:688:void setMarker(boolean) -> q
    691:691:boolean isMarker() -> p
    695:700:byte setBit(byte,int,boolean) -> a
    704:706:void setHeadPose(net.minecraft.core.Rotations) -> a
    709:711:void setBodyPose(net.minecraft.core.Rotations) -> b
    714:716:void setLeftArmPose(net.minecraft.core.Rotations) -> c
    719:721:void setRightArmPose(net.minecraft.core.Rotations) -> d
    724:726:void setLeftLegPose(net.minecraft.core.Rotations) -> e
    729:731:void setRightLegPose(net.minecraft.core.Rotations) -> f
    734:734:net.minecraft.core.Rotations getHeadPose() -> r
    738:738:net.minecraft.core.Rotations getBodyPose() -> s
    742:742:net.minecraft.core.Rotations getLeftArmPose() -> u
    746:746:net.minecraft.core.Rotations getRightArmPose() -> v
    750:750:net.minecraft.core.Rotations getLeftLegPose() -> w
    754:754:net.minecraft.core.Rotations getRightLegPose() -> z
    759:759:boolean isPickable() -> aK
    764:764:boolean skipAttackInteraction(net.minecraft.world.entity.Entity) -> t
    769:769:net.minecraft.world.entity.HumanoidArm getMainArm() -> dA
    774:774:net.minecraft.sounds.SoundEvent getFallDamageSound(int) -> o
    780:780:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    786:786:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    791:791:void thunderHit(net.minecraft.world.entity.global.LightningBolt) -> a
    795:795:boolean isAffectedByPotions() -> dM
    800:805:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    809:809:boolean attackable() -> dN
    814:815:net.minecraft.world.entity.EntityDimensions getDimensions(net.minecraft.world.entity.Pose) -> a
    78:78:boolean lambda$static$0(net.minecraft.world.entity.Entity) -> a
    50:78:void <clinit>() -> <clinit>
net.minecraft.world.entity.decoration.ArmorStand$1 -> avp$1:
    int[] $SwitchMap$net$minecraft$world$entity$EquipmentSlot$Type -> a
    145:145:void <clinit>() -> <clinit>
net.minecraft.world.entity.decoration.HangingEntity -> avq:
    java.util.function.Predicate HANGING_ENTITY -> b
    int checkInterval -> e
    net.minecraft.core.BlockPos pos -> c
    net.minecraft.core.Direction direction -> d
    32:36:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    39:41:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> <init>
    45:45:void defineSynchedData() -> w_
    48:56:void setDirection(net.minecraft.core.Direction) -> a
    59:95:void recalculateBoundingBox() -> f
    98:98:double offs(int) -> a
    103:110:void tick() -> h
    113:138:boolean survives() -> i
    143:143:boolean isPickable() -> aK
    148:155:boolean skipAttackInteraction(net.minecraft.world.entity.Entity) -> t
    160:160:net.minecraft.core.Direction getDirection() -> bQ
    165:173:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    178:182:void move(net.minecraft.world.entity.MoverType,net.minecraft.world.phys.Vec3) -> a
    186:190:void push(double,double,double) -> h
    194:199:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    203:205:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    int getWidth() -> k
    int getHeight() -> l
    void dropItem(net.minecraft.world.entity.Entity) -> a
    void playPlacementSound() -> m
    217:220:net.minecraft.world.entity.item.ItemEntity spawnAtLocation(net.minecraft.world.item.ItemStack,float) -> a
    225:225:boolean repositionEntityAfterLoad() -> aM
    230:233:void setPos(double,double,double) -> d
    236:236:net.minecraft.core.BlockPos getPos() -> n
    241:266:float rotate(net.minecraft.world.level.block.Rotation) -> a
    272:272:float mirror(net.minecraft.world.level.block.Mirror) -> a
    277:277:void thunderHit(net.minecraft.world.entity.global.LightningBolt) -> a
    282:282:void refreshDimensions() -> z_
    28:28:boolean lambda$static$0(net.minecraft.world.entity.Entity) -> b
    28:28:void <clinit>() -> <clinit>
net.minecraft.world.entity.decoration.HangingEntity$1 -> avq$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    242:242:void <clinit>() -> <clinit>
net.minecraft.world.entity.decoration.ItemFrame -> avr:
    org.apache.logging.log4j.Logger LOGGER -> e
    net.minecraft.network.syncher.EntityDataAccessor DATA_ITEM -> f
    net.minecraft.network.syncher.EntityDataAccessor DATA_ROTATION -> g
    float dropChance -> ao
    43:47:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    43:52:void <init>(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> <init>
    56:56:float getEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> a
    61:63:void defineSynchedData() -> w_
    67:81:void setDirection(net.minecraft.core.Direction) -> a
    85:116:void recalculateBoundingBox() -> f
    120:129:boolean survives() -> i
    134:134:float getPickRadius() -> aV
    139:141:void kill() -> U
    145:156:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    161:161:int getWidth() -> k
    166:166:int getHeight() -> l
    171:173:boolean shouldRenderAtSqrDistance(double) -> a
    178:180:void dropItem(net.minecraft.world.entity.Entity) -> a
    184:185:void playPlacementSound() -> m
    188:217:void dropItem(net.minecraft.world.entity.Entity,boolean) -> b
    220:226:void removeFramedMap(net.minecraft.world.item.ItemStack) -> c
    229:229:net.minecraft.world.item.ItemStack getItem() -> o
    233:234:void setItem(net.minecraft.world.item.ItemStack) -> b
    237:250:void setItem(net.minecraft.world.item.ItemStack,boolean) -> a
    254:259:boolean setSlot(int,net.minecraft.world.item.ItemStack) -> a_
    264:270:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    273:273:int getRotation() -> p
    277:278:void setRotation(int) -> a
    281:286:void setRotation(int,boolean) -> a
    290:299:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    303:328:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    332:353:boolean interact(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> b
    357:361:int getAnalogOutput() -> q
    366:366:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    37:40:void <clinit>() -> <clinit>
net.minecraft.world.entity.decoration.ItemFrame$1 -> avr$1:
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> a
    100:100:void <clinit>() -> <clinit>
net.minecraft.world.entity.decoration.LeashFenceKnotEntity -> avs:
    26:27:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    30:38:void <init>(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> <init>
    42:43:void setPos(double,double,double) -> d
    47:48:void recalculateBoundingBox() -> f
    53:53:void setDirection(net.minecraft.core.Direction) -> a
    57:57:int getWidth() -> k
    62:62:int getHeight() -> l
    67:67:float getEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> a
    72:72:boolean shouldRenderAtSqrDistance(double) -> a
    77:78:void dropItem(net.minecraft.world.entity.Entity) -> a
    82:82:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    86:86:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    90:115:boolean interact(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> b
    121:121:boolean survives() -> i
    125:139:net.minecraft.world.entity.decoration.LeashFenceKnotEntity getOrCreateKnot(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    144:145:void playPlacementSound() -> m
    149:149:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
net.minecraft.world.entity.decoration.Motive -> avt:
    net.minecraft.world.entity.decoration.Motive KEBAB -> a
    net.minecraft.world.entity.decoration.Motive AZTEC -> b
    net.minecraft.world.entity.decoration.Motive ALBAN -> c
    net.minecraft.world.entity.decoration.Motive AZTEC2 -> d
    net.minecraft.world.entity.decoration.Motive BOMB -> e
    net.minecraft.world.entity.decoration.Motive PLANT -> f
    net.minecraft.world.entity.decoration.Motive WASTELAND -> g
    net.minecraft.world.entity.decoration.Motive POOL -> h
    net.minecraft.world.entity.decoration.Motive COURBET -> i
    net.minecraft.world.entity.decoration.Motive SEA -> j
    net.minecraft.world.entity.decoration.Motive SUNSET -> k
    net.minecraft.world.entity.decoration.Motive CREEBET -> l
    net.minecraft.world.entity.decoration.Motive WANDERER -> m
    net.minecraft.world.entity.decoration.Motive GRAHAM -> n
    net.minecraft.world.entity.decoration.Motive MATCH -> o
    net.minecraft.world.entity.decoration.Motive BUST -> p
    net.minecraft.world.entity.decoration.Motive STAGE -> q
    net.minecraft.world.entity.decoration.Motive VOID -> r
    net.minecraft.world.entity.decoration.Motive SKULL_AND_ROSES -> s
    net.minecraft.world.entity.decoration.Motive WITHER -> t
    net.minecraft.world.entity.decoration.Motive FIGHTERS -> u
    net.minecraft.world.entity.decoration.Motive POINTER -> v
    net.minecraft.world.entity.decoration.Motive PIGSCENE -> w
    net.minecraft.world.entity.decoration.Motive BURNING_SKULL -> x
    net.minecraft.world.entity.decoration.Motive SKELETON -> y
    net.minecraft.world.entity.decoration.Motive DONKEY_KONG -> z
    int width -> A
    int height -> B
    34:34:net.minecraft.world.entity.decoration.Motive register(java.lang.String,int,int) -> a
    40:43:void <init>(int,int) -> <init>
    46:46:int getWidth() -> a
    50:50:int getHeight() -> b
    6:31:void <clinit>() -> <clinit>
net.minecraft.world.entity.decoration.Painting -> avu:
    net.minecraft.world.entity.decoration.Motive motive -> e
    27:28:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    31:59:void <init>(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> <init>
    62:66:void <init>(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction,net.minecraft.world.entity.decoration.Motive) -> <init>
    70:72:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    76:78:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    82:85:int getWidth() -> k
    90:93:int getHeight() -> l
    98:113:void dropItem(net.minecraft.world.entity.Entity) -> a
    117:118:void playPlacementSound() -> m
    122:123:void moveTo(double,double,double,float,float) -> b
    127:129:void lerpTo(double,double,double,float,float,int,boolean) -> a
    133:133:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
net.minecraft.world.entity.decoration.package-info -> avv:
net.minecraft.world.entity.fishing.FishingHook -> avw:
    net.minecraft.network.syncher.EntityDataAccessor DATA_HOOKED_ENTITY -> c
    boolean inGround -> d
    int life -> e
    net.minecraft.world.entity.player.Player owner -> f
    int flightTime -> g
    int nibble -> ao
    int timeUntilLured -> ap
    int timeUntilHooked -> aq
    float fishAngle -> ar
    net.minecraft.world.entity.Entity hookedIn -> b
    net.minecraft.world.entity.fishing.FishingHook$FishHookState currentState -> as
    int luck -> at
    int lureSpeed -> au
    64:76:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,int,int) -> <init>
    79:84:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,double,double,double) -> <init>
    87:121:void <init>(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,int,int) -> <init>
    125:126:void defineSynchedData() -> w_
    130:136:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    140:141:boolean shouldRenderAtSqrDistance(double) -> a
    147:147:void lerpTo(double,double,double,float,float,int,boolean) -> a
    151:242:void tick() -> h
    245:253:boolean shouldStopFishing() -> k
    257:278:void updateRotation() -> l
    281:291:void checkCollision() -> m
    294:295:void setHookedEntity() -> n
    298:385:void catchingFish(net.minecraft.core.BlockPos) -> a
    388:388:boolean canBeHooked(net.minecraft.world.entity.Entity) -> a
    393:393:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    397:397:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    400:445:int retrieve(net.minecraft.world.item.ItemStack) -> b
    450:457:void handleEntityEvent(byte) -> a
    460:471:void bringInHookedEntity() -> f
    475:475:boolean isMovementNoisy() -> at
    480:484:void remove() -> X
    488:488:net.minecraft.world.entity.player.Player getOwner() -> i
    493:493:boolean canChangeDimensions() -> bC
    498:499:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    281:281:boolean lambda$checkCollision$0(net.minecraft.world.entity.Entity) -> b
    51:51:void <clinit>() -> <clinit>
net.minecraft.world.entity.fishing.FishingHook$FishHookState -> avw$a:
    net.minecraft.world.entity.fishing.FishingHook$FishHookState FLYING -> a
    net.minecraft.world.entity.fishing.FishingHook$FishHookState HOOKED_IN_ENTITY -> b
    net.minecraft.world.entity.fishing.FishingHook$FishHookState BOBBING -> c
    net.minecraft.world.entity.fishing.FishingHook$FishHookState[] $VALUES -> d
    49:49:net.minecraft.world.entity.fishing.FishingHook$FishHookState[] values() -> values
    49:49:net.minecraft.world.entity.fishing.FishingHook$FishHookState valueOf(java.lang.String) -> valueOf
    49:49:void <init>(java.lang.String,int) -> <init>
    49:49:void <clinit>() -> <clinit>
net.minecraft.world.entity.fishing.package-info -> avx:
net.minecraft.world.entity.global.LightningBolt -> avy:
    int life -> c
    long seed -> b
    int flashes -> d
    boolean visualOnly -> e
    net.minecraft.server.level.ServerPlayer cause -> f
    34:46:void <init>(net.minecraft.world.level.Level,double,double,double,boolean) -> <init>
    50:50:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    55:55:net.minecraft.server.level.ServerPlayer getCause() -> f
    59:60:void setCause(net.minecraft.server.level.ServerPlayer) -> d
    64:97:void tick() -> h
    100:117:void spawnFire(int) -> a
    122:123:boolean shouldRenderAtSqrDistance(double) -> a
    128:128:void defineSynchedData() -> w_
    132:132:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    136:136:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    141:141:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
net.minecraft.world.entity.global.package-info -> avz:
net.minecraft.world.entity.item.FallingBlockEntity -> awa:
    net.minecraft.world.level.block.state.BlockState blockState -> f
    int time -> b
    boolean dropItem -> c
    boolean cancelDrop -> g
    boolean hurtEntities -> ao
    int fallDamageMax -> ap
    float fallDamageAmount -> aq
    net.minecraft.nbt.CompoundTag blockData -> d
    net.minecraft.network.syncher.EntityDataAccessor DATA_START_POS -> e
    44:57:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    60:73:void <init>(net.minecraft.world.level.Level,double,double,double,net.minecraft.world.level.block.state.BlockState) -> <init>
    77:77:boolean isAttackable() -> bA
    81:82:void setStartPos(net.minecraft.core.BlockPos) -> a
    85:85:net.minecraft.core.BlockPos getStartPos() -> f
    90:90:boolean isMovementNoisy() -> at
    95:96:void defineSynchedData() -> w_
    100:100:boolean isPickable() -> aK
    105:203:void tick() -> h
    207:228:boolean causeFallDamage(float,float) -> b
    233:242:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    246:269:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    272:272:net.minecraft.world.level.Level getLevel() -> i
    276:277:void setHurtsEntities(boolean) -> a
    281:281:boolean displayFireAnimation() -> bI
    286:288:void fillCrashReportCategory(net.minecraft.CrashReportCategory) -> a
    291:291:net.minecraft.world.level.block.state.BlockState getBlockState() -> k
    296:296:boolean onlyOpCanSetNbt() -> cb
    301:301:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    53:53:void <clinit>() -> <clinit>
net.minecraft.world.entity.item.ItemEntity -> awb:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ITEM -> c
    int age -> d
    int pickupDelay -> e
    int health -> f
    java.util.UUID thrower -> g
    java.util.UUID owner -> ao
    float bobOffs -> b
    46:53:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    56:66:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    69:71:void <init>(net.minecraft.world.level.Level,double,double,double,net.minecraft.world.item.ItemStack) -> <init>
    75:75:boolean isMovementNoisy() -> at
    80:81:void defineSynchedData() -> w_
    85:167:void tick() -> h
    170:178:void setUnderwaterMovement() -> u
    181:193:void mergeWithNeighbours() -> v
    196:197:boolean isMergable() -> w
    201:213:void tryToMerge(net.minecraft.world.entity.item.ItemEntity) -> a
    216:228:boolean areMergable(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    232:236:net.minecraft.world.item.ItemStack merge(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,int) -> a
    240:242:void merge(net.minecraft.world.entity.item.ItemEntity,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    245:252:void merge(net.minecraft.world.entity.item.ItemEntity,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.item.ItemEntity,net.minecraft.world.item.ItemStack) -> a
    256:257:void burn(int) -> h
    261:272:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    277:289:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    293:309:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    313:330:void playerTouch(net.minecraft.world.entity.player.Player) -> b
    334:339:net.minecraft.network.chat.Component getName() -> M
    344:344:boolean isAttackable() -> bA
    350:355:net.minecraft.world.entity.Entity changeDimension(net.minecraft.world.level.dimension.DimensionType) -> a
    359:359:net.minecraft.world.item.ItemStack getItem() -> f
    363:364:void setItem(net.minecraft.world.item.ItemStack) -> b
    368:368:java.util.UUID getOwner() -> i
    372:373:void setOwner(java.util.UUID) -> b
    377:377:java.util.UUID getThrower() -> k
    381:382:void setThrower(java.util.UUID) -> c
    385:385:int getAge() -> l
    390:391:void setDefaultPickUpDelay() -> m
    394:395:void setNoPickUpDelay() -> n
    398:399:void setNeverPickUp() -> o
    402:403:void setPickUpDelay(int) -> a
    406:406:boolean hasPickUpDelay() -> p
    410:411:void setUnlimitedLifetime() -> q
    414:415:void setExtendedLifetime() -> r
    418:420:void makeFakeItem() -> s
    424:424:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    184:184:boolean lambda$mergeWithNeighbours$0(net.minecraft.world.entity.item.ItemEntity) -> b
    37:37:void <clinit>() -> <clinit>
net.minecraft.world.entity.item.PrimedTnt -> awc:
    net.minecraft.network.syncher.EntityDataAccessor DATA_FUSE_ID -> b
    net.minecraft.world.entity.LivingEntity owner -> c
    int life -> d
    28:33:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    36:54:void <init>(net.minecraft.world.level.Level,double,double,double,net.minecraft.world.entity.LivingEntity) -> <init>
    58:59:void defineSynchedData() -> w_
    63:63:boolean isMovementNoisy() -> at
    68:68:boolean isPickable() -> aK
    73:96:void tick() -> h
    99:101:void explode() -> l
    105:106:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    110:111:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    115:115:net.minecraft.world.entity.LivingEntity getOwner() -> f
    120:120:float getEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> a
    124:126:void setFuse(int) -> a
    130:133:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    136:136:int getFuse() -> i
    140:140:int getLife() -> k
    145:145:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    23:23:void <clinit>() -> <clinit>
net.minecraft.world.entity.item.package-info -> awd:
net.minecraft.world.entity.monster.AbstractIllager -> awe:
    23:24:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    28:29:void registerGoals() -> n
    33:33:net.minecraft.world.entity.MobType getMobType() -> di
    37:37:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() -> l
net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose -> awe$a:
    net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose CROSSED -> a
    net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose ATTACKING -> b
    net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose SPELLCASTING -> c
    net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose BOW_AND_ARROW -> d
    net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose CROSSBOW_HOLD -> e
    net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose CROSSBOW_CHARGE -> f
    net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose CELEBRATING -> g
    net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose NEUTRAL -> h
    net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose[] $VALUES -> i
    10:10:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose[] values() -> values
    10:10:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose valueOf(java.lang.String) -> valueOf
    10:10:void <init>(java.lang.String,int) -> <init>
    10:18:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.AbstractIllager$RaiderOpenDoorGoal -> awe$b:
    net.minecraft.world.entity.monster.AbstractIllager this$0 -> a
    41:43:void <init>(net.minecraft.world.entity.monster.AbstractIllager,net.minecraft.world.entity.raid.Raider) -> <init>
    47:47:boolean canUse() -> a
net.minecraft.world.entity.monster.AbstractSkeleton -> awf:
    net.minecraft.world.entity.ai.goal.RangedBowAttackGoal bowGoal -> b
    net.minecraft.world.entity.ai.goal.MeleeAttackGoal meleeGoal -> c
    48:67:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    71:82:void registerGoals() -> n
    86:89:void registerAttributes() -> cA
    93:94:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    net.minecraft.sounds.SoundEvent getStepSound() -> l
    100:100:net.minecraft.world.entity.MobType getMobType() -> di
    105:126:void aiStep() -> k
    130:136:void rideTick() -> aQ
    140:143:void populateDefaultEquipmentSlots(net.minecraft.world.DifficultyInstance) -> a
    148:167:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    171:190:void reassessWeaponGoal() -> eq
    194:204:void performRangedAttack(net.minecraft.world.entity.LivingEntity,float) -> a
    207:207:net.minecraft.world.entity.projectile.AbstractArrow getArrow(net.minecraft.world.item.ItemStack,float) -> b
    212:215:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    219:224:void setItemSlot(net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.ItemStack) -> a
    228:228:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    233:233:double getRidingHeight() -> aR
net.minecraft.world.entity.monster.AbstractSkeleton$1 -> awf$1:
    net.minecraft.world.entity.monster.AbstractSkeleton this$0 -> d
    49:49:void <init>(net.minecraft.world.entity.monster.AbstractSkeleton,net.minecraft.world.entity.PathfinderMob,double,boolean) -> <init>
    52:54:void stop() -> d
    58:60:void start() -> c
net.minecraft.world.entity.monster.Blaze -> awg:
    float allowedHeightOffset -> b
    int nextHeightOffsetChangeTick -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_FLAGS_ID -> d
    32:45:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    49:57:void registerGoals() -> n
    61:65:void registerAttributes() -> cA
    69:72:void defineSynchedData() -> w_
    76:76:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    81:81:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    86:86:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    91:91:float getBrightness() -> aI
    97:111:void aiStep() -> k
    115:133:void customServerAiStep() -> dT
    137:137:boolean causeFallDamage(float,float) -> b
    142:142:boolean isOnFire() -> bf
    146:146:boolean isCharged() -> l
    150:157:void setCharged(boolean) -> r
    31:31:void access$000(net.minecraft.world.entity.monster.Blaze,boolean) -> a
    35:35:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Blaze$BlazeAttackGoal -> awg$a:
    net.minecraft.world.entity.monster.Blaze blaze -> a
    int attackStep -> b
    int attackTime -> c
    int lastSeen -> d
    165:169:void <init>(net.minecraft.world.entity.monster.Blaze) -> <init>
    173:174:boolean canUse() -> a
    179:180:void start() -> c
    184:186:void stop() -> d
    190:255:void tick() -> e
    258:258:double getFollowDistance() -> g
net.minecraft.world.entity.monster.CaveSpider -> awh:
    23:24:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    28:31:void registerAttributes() -> cA
    35:51:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    58:58:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    63:63:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
net.minecraft.world.entity.monster.Creeper -> awi:
    net.minecraft.network.syncher.EntityDataAccessor DATA_SWELL_DIR -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_IS_POWERED -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_IS_IGNITED -> d
    int oldSwell -> bw
    int swell -> bx
    int maxSwell -> by
    int explosionRadius -> bz
    int droppedSkulls -> bA
    47:53:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    57:68:void registerGoals() -> n
    72:75:void registerAttributes() -> cA
    79:83:int getMaxFallDistance() -> bD
    88:94:boolean causeFallDamage(float,float) -> b
    99:104:void defineSynchedData() -> w_
    108:115:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    119:130:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    134:156:void tick() -> h
    160:160:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    165:165:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    170:179:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    183:183:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    188:188:boolean isPowered() -> J_
    192:192:float getSwelling(float) -> v
    196:196:int getSwellDir() -> l
    200:201:void setSwellDir(int) -> a
    205:207:void thunderHit(net.minecraft.world.entity.global.LightningBolt) -> a
    211:221:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    225:233:void explodeCreeper() -> eu
    236:249:void spawnLingeringCloud() -> ev
    252:252:boolean isIgnited() -> eq
    256:257:void ignite() -> er
    260:260:boolean canDropMobsSkull() -> es
    264:265:void increaseDroppedSkulls() -> et
    216:216:void lambda$mobInteract$0(net.minecraft.world.InteractionHand,net.minecraft.world.entity.player.Player) -> a
    41:43:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.CrossbowAttackMob -> awj:
    void setChargingCrossbow(boolean) -> a
    void shootProjectile(net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.Projectile,float) -> a
    net.minecraft.world.entity.LivingEntity getTarget() -> w
net.minecraft.world.entity.monster.Drowned -> awk:
    boolean searchingForLand -> bw
    net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation waterNavigation -> b
    net.minecraft.world.entity.ai.navigation.GroundPathNavigation groundNavigation -> c
    62:69:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    73:85:void addBehaviourGoals() -> l
    89:98:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    102:110:boolean checkDrownedSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    115:115:boolean isDeepEnoughToSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    120:120:boolean supportsBreakDoorGoal() -> eq
    125:128:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    133:136:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    141:144:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    149:149:net.minecraft.sounds.SoundEvent getStepSound() -> er
    154:154:net.minecraft.sounds.SoundEvent getSwimSound() -> am
    159:159:net.minecraft.world.item.ItemStack getSkull() -> es
    164:172:void populateDefaultEquipmentSlots(net.minecraft.world.DifficultyInstance) -> a
    176:190:boolean canReplaceCurrentItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.EquipmentSlot) -> a
    195:195:boolean convertsInWater() -> et
    200:200:boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader) -> a
    204:211:boolean okTarget(net.minecraft.world.entity.LivingEntity) -> i
    216:216:boolean isPushedByWater() -> bM
    220:229:boolean wantsToSwim() -> ez
    234:242:void travel(net.minecraft.world.phys.Vec3) -> e
    246:255:void updateSwimming() -> aB
    258:268:boolean closeToNextPos() -> eu
    273:282:void performRangedAttack(net.minecraft.world.entity.LivingEntity,float) -> a
    285:286:void setSearchingForLand(boolean) -> r
    53:53:net.minecraft.world.entity.ai.navigation.PathNavigation access$002(net.minecraft.world.entity.monster.Drowned,net.minecraft.world.entity.ai.navigation.PathNavigation) -> a
    53:53:boolean access$100(net.minecraft.world.entity.monster.Drowned) -> a
    53:53:boolean access$200(net.minecraft.world.entity.monster.Drowned) -> b
net.minecraft.world.entity.monster.Drowned$DrownedAttackGoal -> awk$a:
    net.minecraft.world.entity.monster.Drowned drowned -> d
    471:473:void <init>(net.minecraft.world.entity.monster.Drowned,double,boolean) -> <init>
    477:477:boolean canUse() -> a
    482:482:boolean canContinueToUse() -> b
net.minecraft.world.entity.monster.Drowned$DrownedGoToBeachGoal -> awk$b:
    net.minecraft.world.entity.monster.Drowned drowned -> g
    370:372:void <init>(net.minecraft.world.entity.monster.Drowned,double) -> <init>
    376:376:boolean canUse() -> a
    381:381:boolean canContinueToUse() -> b
    386:391:boolean isValidTarget(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    396:399:void start() -> c
    403:404:void stop() -> d
net.minecraft.world.entity.monster.Drowned$DrownedGoToWaterGoal -> awk$c:
    net.minecraft.world.entity.PathfinderMob mob -> a
    double wantedX -> b
    double wantedY -> c
    double wantedZ -> d
    double speedModifier -> e
    net.minecraft.world.level.Level level -> f
    415:420:void <init>(net.minecraft.world.entity.PathfinderMob,double) -> <init>
    424:438:boolean canUse() -> a
    443:443:boolean canContinueToUse() -> b
    448:449:void start() -> c
    453:463:net.minecraft.world.phys.Vec3 getWaterPos() -> g
net.minecraft.world.entity.monster.Drowned$DrownedMoveControl -> awk$d:
    net.minecraft.world.entity.monster.Drowned drowned -> i
    490:492:void <init>(net.minecraft.world.entity.monster.Drowned) -> <init>
    496:532:void tick() -> a
net.minecraft.world.entity.monster.Drowned$DrownedSwimUpGoal -> awk$e:
    net.minecraft.world.entity.monster.Drowned drowned -> a
    double speedModifier -> b
    int seaLevel -> c
    boolean stuck -> d
    322:326:void <init>(net.minecraft.world.entity.monster.Drowned,double,int) -> <init>
    330:330:boolean canUse() -> a
    335:335:boolean canContinueToUse() -> b
    340:351:void tick() -> e
    355:357:void start() -> c
    361:362:void stop() -> d
net.minecraft.world.entity.monster.Drowned$DrownedTridentAttackGoal -> awk$f:
    net.minecraft.world.entity.monster.Drowned drowned -> a
    292:294:void <init>(net.minecraft.world.entity.monster.RangedAttackMob,double,int,float) -> <init>
    298:298:boolean canUse() -> a
    303:306:void start() -> c
    310:313:void stop() -> d
net.minecraft.world.entity.monster.ElderGuardian -> awl:
    float ELDER_SIZE_SCALE -> b
    23:31:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    35:39:void registerAttributes() -> cA
    43:43:int getAttackDuration() -> l
    47:49:void setGhost() -> eq
    53:53:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    58:58:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    63:63:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    68:68:net.minecraft.sounds.SoundEvent getFlopSound() -> er
    73:98:void customServerAiStep() -> dT
    80:80:boolean lambda$customServerAiStep$0(net.minecraft.server.level.ServerPlayer) -> d
    20:20:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.EnderMan -> awm:
    java.util.UUID SPEED_MODIFIER_ATTACKING_UUID -> b
    net.minecraft.world.entity.ai.attributes.AttributeModifier SPEED_MODIFIER_ATTACKING -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_CARRY_STATE -> d
    net.minecraft.network.syncher.EntityDataAccessor DATA_CREEPY -> bw
    net.minecraft.network.syncher.EntityDataAccessor DATA_STARED_AT -> bx
    java.util.function.Predicate ENDERMITE_SELECTOR -> by
    int lastStareSound -> bz
    int targetChangeTime -> bA
    69:78:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    82:95:void registerGoals() -> n
    99:105:void registerAttributes() -> cA
    109:127:void setTarget(net.minecraft.world.entity.LivingEntity) -> h
    131:136:void defineSynchedData() -> w_
    139:145:void playStareSound() -> l
    149:155:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    159:164:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    168:177:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    180:193:boolean isLookingAtMe(net.minecraft.world.entity.player.Player) -> f
    198:198:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    203:212:void aiStep() -> k
    216:231:void customServerAiStep() -> dT
    234:241:boolean teleport() -> eq
    245:251:boolean teleportTowards(net.minecraft.world.entity.Entity) -> a
    255:272:boolean teleport(double,double,double) -> o
    277:277:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    282:282:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    287:287:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    292:297:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    300:301:void setCarriedBlock(net.minecraft.world.level.block.state.BlockState) -> b
    305:305:net.minecraft.world.level.block.state.BlockState getCarriedBlock() -> er
    310:328:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    332:332:boolean isCreepy() -> es
    336:336:boolean hasBeenStaredAt() -> et
    340:341:void setBeingStaredAt() -> eu
    67:67:boolean lambda$static$0(net.minecraft.world.entity.LivingEntity) -> i
    57:57:boolean access$000(net.minecraft.world.entity.monster.EnderMan,net.minecraft.world.entity.player.Player) -> a
    57:57:boolean access$100(net.minecraft.world.entity.monster.EnderMan,net.minecraft.world.entity.Entity) -> a
    58:67:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.EnderMan$EndermanFreezeWhenLookedAt -> awm$a:
    net.minecraft.world.entity.monster.EnderMan enderman -> a
    net.minecraft.world.entity.LivingEntity target -> b
    427:430:void <init>(net.minecraft.world.entity.monster.EnderMan) -> <init>
    434:442:boolean canUse() -> a
    447:448:void start() -> c
    452:453:void tick() -> e
net.minecraft.world.entity.monster.EnderMan$EndermanLeaveBlockGoal -> awm$b:
    net.minecraft.world.entity.monster.EnderMan enderman -> a
    459:461:void <init>(net.minecraft.world.entity.monster.EnderMan) -> <init>
    465:474:boolean canUse() -> a
    479:495:void tick() -> e
    498:498:boolean canPlaceBlock(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
net.minecraft.world.entity.monster.EnderMan$EndermanLookForPlayerGoal -> awm$c:
    net.minecraft.world.entity.monster.EnderMan enderman -> i
    net.minecraft.world.entity.player.Player pendingTarget -> j
    int aggroTime -> k
    int teleportTime -> l
    net.minecraft.world.entity.ai.targeting.TargetingConditions startAggroTargetConditions -> m
    net.minecraft.world.entity.ai.targeting.TargetingConditions continueAggroTargetConditions -> n
    350:357:void <init>(net.minecraft.world.entity.monster.EnderMan) -> <init>
    361:362:boolean canUse() -> a
    367:371:void start() -> c
    375:378:void stop() -> d
    382:391:boolean canContinueToUse() -> b
    396:420:void tick() -> e
    356:356:boolean lambda$new$0(net.minecraft.world.entity.monster.EnderMan,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.monster.EnderMan$EndermanTakeBlockGoal -> awm$d:
    net.minecraft.world.entity.monster.EnderMan enderman -> a
    505:507:void <init>(net.minecraft.world.entity.monster.EnderMan) -> <init>
    511:520:boolean canUse() -> a
    525:544:void tick() -> e
net.minecraft.world.entity.monster.Endermite -> awn:
    int life -> b
    boolean playerSpawned -> c
    36:38:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    42:50:void registerGoals() -> n
    54:54:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    59:64:void registerAttributes() -> cA
    68:68:boolean isMovementNoisy() -> at
    73:73:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    78:78:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    83:83:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    88:89:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    93:96:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    100:103:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    108:111:void tick() -> h
    115:117:void setYBodyRot(float) -> l
    121:121:double getRidingHeight() -> aR
    125:125:boolean isPlayerSpawned() -> l
    129:130:void setPlayerSpawned(boolean) -> r
    134:149:void aiStep() -> k
    152:156:boolean checkEndermiteSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    161:161:net.minecraft.world.entity.MobType getMobType() -> di
net.minecraft.world.entity.monster.Enemy -> awo:
net.minecraft.world.entity.monster.Evoker -> awp:
    net.minecraft.world.entity.animal.Sheep wololoTarget -> bw
    44:47:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    51:67:void registerGoals() -> n
    71:76:void registerAttributes() -> cA
    80:81:void defineSynchedData() -> w_
    85:86:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    90:90:net.minecraft.sounds.SoundEvent getCelebrateSound() -> eq
    95:96:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    100:101:void customServerAiStep() -> dT
    105:121:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> r
    126:126:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    131:131:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    136:136:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    140:141:void setWololoTarget(net.minecraft.world.entity.animal.Sheep) -> a
    145:145:net.minecraft.world.entity.animal.Sheep getWololoTarget() -> eK
    150:150:net.minecraft.sounds.SoundEvent getCastingSoundEvent() -> er
    155:155:void applyRaidBuffs(int,boolean) -> a
    39:39:net.minecraft.world.entity.animal.Sheep access$300(net.minecraft.world.entity.monster.Evoker) -> a
    39:39:java.util.Random access$400(net.minecraft.world.entity.monster.Evoker) -> b
    39:39:java.util.Random access$500(net.minecraft.world.entity.monster.Evoker) -> c
    39:39:java.util.Random access$600(net.minecraft.world.entity.monster.Evoker) -> d
    39:39:java.util.Random access$700(net.minecraft.world.entity.monster.Evoker) -> e
    39:39:java.util.Random access$800(net.minecraft.world.entity.monster.Evoker) -> f
    39:39:void access$900(net.minecraft.world.entity.monster.Evoker,net.minecraft.world.entity.animal.Sheep) -> a
net.minecraft.world.entity.monster.Evoker$1 -> awp$1:
net.minecraft.world.entity.monster.Evoker$EvokerAttackSpellGoal -> awp$a:
    net.minecraft.world.entity.monster.Evoker this$0 -> a
    168:168:void <init>(net.minecraft.world.entity.monster.Evoker) -> <init>
    171:171:int getCastingTime() -> g
    176:176:int getCastingInterval() -> h
    182:205:void performSpellCasting() -> j
    209:231:void createSpellEntity(double,double,double,double,float,int) -> a
    235:235:net.minecraft.sounds.SoundEvent getSpellPrepareSound() -> k
    240:240:net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell getSpell() -> l
    168:168:void <init>(net.minecraft.world.entity.monster.Evoker,net.minecraft.world.entity.monster.Evoker$1) -> <init>
net.minecraft.world.entity.monster.Evoker$EvokerCastingSpellGoal -> awp$b:
    net.minecraft.world.entity.monster.Evoker this$0 -> a
    157:157:void <init>(net.minecraft.world.entity.monster.Evoker) -> <init>
    160:165:void tick() -> e
    157:157:void <init>(net.minecraft.world.entity.monster.Evoker,net.minecraft.world.entity.monster.Evoker$1) -> <init>
net.minecraft.world.entity.monster.Evoker$EvokerSummonSpellGoal -> awp$c:
    net.minecraft.world.entity.ai.targeting.TargetingConditions vexCountTargeting -> e
    net.minecraft.world.entity.monster.Evoker this$0 -> a
    244:245:void <init>(net.minecraft.world.entity.monster.Evoker) -> <init>
    249:255:boolean canUse() -> a
    260:260:int getCastingTime() -> g
    265:265:int getCastingInterval() -> h
    270:280:void performSpellCasting() -> j
    284:284:net.minecraft.sounds.SoundEvent getSpellPrepareSound() -> k
    289:289:net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell getSpell() -> l
    244:244:void <init>(net.minecraft.world.entity.monster.Evoker,net.minecraft.world.entity.monster.Evoker$1) -> <init>
net.minecraft.world.entity.monster.Evoker$EvokerWololoSpellGoal -> awp$d:
    net.minecraft.world.entity.ai.targeting.TargetingConditions wololoTargeting -> e
    net.minecraft.world.entity.monster.Evoker this$0 -> a
    293:294:void <init>(net.minecraft.world.entity.monster.Evoker) -> <init>
    298:319:boolean canUse() -> a
    325:325:boolean canContinueToUse() -> b
    330:332:void stop() -> d
    336:340:void performSpellCasting() -> j
    344:344:int getCastWarmupTime() -> m
    349:349:int getCastingTime() -> g
    354:354:int getCastingInterval() -> h
    359:359:net.minecraft.sounds.SoundEvent getSpellPrepareSound() -> k
    364:364:net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell getSpell() -> l
    293:293:void tick() -> e
    293:293:void start() -> c
    294:294:boolean lambda$new$0(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.monster.Ghast -> awq:
    net.minecraft.network.syncher.EntityDataAccessor DATA_IS_CHARGING -> b
    int explosionPower -> c
    38:46:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    50:57:void registerGoals() -> n
    60:60:boolean isCharging() -> l
    64:65:void setCharging(boolean) -> r
    68:68:int getExplosionPower() -> eo
    73:73:boolean shouldDespawnInPeaceful() -> J
    78:89:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    94:97:void defineSynchedData() -> w_
    101:105:void registerAttributes() -> cA
    109:109:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    114:114:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    119:119:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    124:124:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    129:129:float getSoundVolume() -> dm
    133:135:boolean checkGhastSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    140:140:int getMaxSpawnClusterSize() -> dX
    145:147:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    151:155:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    342:342:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    56:56:boolean lambda$registerGoals$0(net.minecraft.world.entity.LivingEntity) -> i
    36:36:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Ghast$GhastLookGoal -> awq$a:
    net.minecraft.world.entity.monster.Ghast ghast -> a
    252:256:void <init>(net.minecraft.world.entity.monster.Ghast) -> <init>
    260:260:boolean canUse() -> a
    265:280:void tick() -> e
net.minecraft.world.entity.monster.Ghast$GhastMoveControl -> awq$b:
    net.minecraft.world.entity.monster.Ghast ghast -> i
    int floatDuration -> j
    162:164:void <init>(net.minecraft.world.entity.monster.Ghast) -> <init>
    168:190:void tick() -> a
    193:201:boolean canReach(net.minecraft.world.phys.Vec3,int) -> a
net.minecraft.world.entity.monster.Ghast$GhastShootFireballGoal -> awq$c:
    net.minecraft.world.entity.monster.Ghast ghast -> b
    int chargeTime -> a
    287:289:void <init>(net.minecraft.world.entity.monster.Ghast) -> <init>
    293:293:boolean canUse() -> a
    298:299:void start() -> c
    303:304:void stop() -> d
    308:337:void tick() -> e
net.minecraft.world.entity.monster.Ghast$RandomFloatAroundGoal -> awq$d:
    net.minecraft.world.entity.monster.Ghast ghast -> a
    208:212:void <init>(net.minecraft.world.entity.monster.Ghast) -> <init>
    216:231:boolean canUse() -> a
    236:236:boolean canContinueToUse() -> b
    241:246:void start() -> c
net.minecraft.world.entity.monster.Giant -> awr:
    12:13:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    17:17:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    22:27:void registerAttributes() -> cA
    31:31:float getWalkTargetValue(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader) -> a
net.minecraft.world.entity.monster.Guardian -> aws:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_MOVING -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_ATTACK_TARGET -> bA
    float clientSideTailAnimation -> c
    float clientSideTailAnimationO -> d
    float clientSideTailAnimationSpeed -> bw
    float clientSideSpikesAnimation -> bx
    float clientSideSpikesAnimationO -> by
    net.minecraft.world.entity.LivingEntity clientSideCachedAttackTarget -> bB
    int clientSideAttackTime -> bC
    boolean clientSideTouchedGround -> bD
    net.minecraft.world.entity.ai.goal.RandomStrollGoal randomStrollGoal -> bz
    64:73:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    77:93:void registerGoals() -> n
    97:102:void registerAttributes() -> cA
    106:106:net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level) -> b
    111:115:void defineSynchedData() -> w_
    119:119:boolean canBreatheUnderwater() -> cB
    124:124:net.minecraft.world.entity.MobType getMobType() -> di
    128:128:boolean isMoving() -> es
    132:133:void setMoving(boolean) -> r
    136:136:int getAttackDuration() -> l
    140:141:void setActiveAttackTarget(int) -> a
    144:144:boolean hasActiveAttackTarget() -> et
    149:163:net.minecraft.world.entity.LivingEntity getActiveAttackTarget() -> eu
    168:174:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    178:178:int getAmbientSoundInterval() -> A
    183:183:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    188:188:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    193:193:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    198:198:boolean isMovementNoisy() -> at
    203:203:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    208:211:float getWalkTargetValue(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader) -> a
    216:302:void aiStep() -> k
    305:305:net.minecraft.sounds.SoundEvent getFlopSound() -> er
    309:309:float getTailAnimation(float) -> v
    313:313:float getSpikesAnimation(float) -> w
    317:317:float getAttackAnimationScale(float) -> x
    322:322:boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader) -> a
    327:329:boolean checkGuardianSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    334:347:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    352:352:int getMaxHeadXRot() -> dU
    357:369:void travel(net.minecraft.world.phys.Vec3) -> e
    47:47:void access$000(net.minecraft.world.entity.monster.Guardian,int) -> a
    47:47:void access$100(net.minecraft.world.entity.monster.Guardian,boolean) -> a
    50:51:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Guardian$GuardianAttackGoal -> aws$a:
    net.minecraft.world.entity.monster.Guardian guardian -> a
    int attackTime -> b
    boolean elder -> c
    389:396:void <init>(net.minecraft.world.entity.monster.Guardian) -> <init>
    400:401:boolean canUse() -> a
    406:406:boolean canContinueToUse() -> b
    411:417:void start() -> c
    421:425:void stop() -> d
    429:458:void tick() -> e
net.minecraft.world.entity.monster.Guardian$GuardianAttackSelector -> aws$b:
    net.minecraft.world.entity.monster.Guardian guardian -> a
    374:376:void <init>(net.minecraft.world.entity.monster.Guardian) -> <init>
    380:380:boolean test(net.minecraft.world.entity.LivingEntity) -> a
    371:371:boolean test(java.lang.Object) -> test
net.minecraft.world.entity.monster.Guardian$GuardianMoveControl -> aws$c:
    net.minecraft.world.entity.monster.Guardian guardian -> i
    465:467:void <init>(net.minecraft.world.entity.monster.Guardian) -> <init>
    471:523:void tick() -> a
net.minecraft.world.entity.monster.Husk -> awt:
    23:24:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    27:28:boolean checkHuskSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    33:33:boolean isSunSensitive() -> K_
    38:38:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    43:43:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    48:48:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    53:53:net.minecraft.sounds.SoundEvent getStepSound() -> er
    58:64:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    69:69:boolean convertsInWater() -> et
    74:76:void doUnderWaterConversion() -> ev
    80:80:net.minecraft.world.item.ItemStack getSkull() -> es
net.minecraft.world.entity.monster.Illusioner -> awu:
    int clientSideIllusionTicks -> bw
    net.minecraft.world.phys.Vec3[][] clientSideIllusionOffsets -> bx
    53:62:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    66:81:void registerGoals() -> n
    85:90:void registerAttributes() -> cA
    94:96:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    101:102:void defineSynchedData() -> w_
    106:106:net.minecraft.world.phys.AABB getBoundingBoxForCulling() -> bU
    111:142:void aiStep() -> k
    146:146:net.minecraft.sounds.SoundEvent getCelebrateSound() -> eq
    150:159:net.minecraft.world.phys.Vec3[] getIllusionOffsets(float) -> v
    164:171:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> r
    176:176:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    181:181:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    186:186:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    191:191:net.minecraft.sounds.SoundEvent getCastingSoundEvent() -> er
    197:197:void applyRaidBuffs(int,boolean) -> a
    293:303:void performRangedAttack(net.minecraft.world.entity.LivingEntity,float) -> a
    307:312:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() -> l
net.minecraft.world.entity.monster.Illusioner$1 -> awu$1:
net.minecraft.world.entity.monster.Illusioner$IllusionerBlindnessSpellGoal -> awu$a:
    int lastTargetId -> e
    net.minecraft.world.entity.monster.Illusioner this$0 -> a
    238:238:void <init>(net.minecraft.world.entity.monster.Illusioner) -> <init>
    243:255:boolean canUse() -> a
    260:263:void start() -> c
    267:267:int getCastingTime() -> g
    272:272:int getCastingInterval() -> h
    277:278:void performSpellCasting() -> j
    282:282:net.minecraft.sounds.SoundEvent getSpellPrepareSound() -> k
    287:287:net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell getSpell() -> l
    238:238:void <init>(net.minecraft.world.entity.monster.Illusioner,net.minecraft.world.entity.monster.Illusioner$1) -> <init>
net.minecraft.world.entity.monster.Illusioner$IllusionerMirrorSpellGoal -> awu$b:
    net.minecraft.world.entity.monster.Illusioner this$0 -> a
    199:199:void <init>(net.minecraft.world.entity.monster.Illusioner) -> <init>
    202:208:boolean canUse() -> a
    213:213:int getCastingTime() -> g
    218:218:int getCastingInterval() -> h
    223:224:void performSpellCasting() -> j
    229:229:net.minecraft.sounds.SoundEvent getSpellPrepareSound() -> k
    234:234:net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell getSpell() -> l
    199:199:void <init>(net.minecraft.world.entity.monster.Illusioner,net.minecraft.world.entity.monster.Illusioner$1) -> <init>
net.minecraft.world.entity.monster.MagmaCube -> awv:
    26:27:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    31:34:void registerAttributes() -> cA
    37:37:boolean checkMagmaCubeSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    42:42:boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader) -> a
    47:49:void setSize(int,boolean) -> a
    53:53:float getBrightness() -> aI
    58:58:net.minecraft.core.particles.ParticleOptions getParticleType() -> l
    63:63:net.minecraft.resources.ResourceLocation getDefaultLootTable() -> H
    68:68:boolean isOnFire() -> bf
    73:73:int getJumpDelay() -> eo
    78:79:void decreaseSquish() -> ep
    83:86:void jumpFromGround() -> dq
    90:97:void jumpInLiquid(net.minecraft.tags.Tag) -> c
    101:101:boolean causeFallDamage(float,float) -> b
    106:106:boolean isDealsDamage() -> eq
    111:111:float getAttackDamage() -> er
    116:119:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    125:128:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    134:137:net.minecraft.sounds.SoundEvent getSquishSound() -> es
    143:143:net.minecraft.sounds.SoundEvent getJumpSound() -> et
net.minecraft.world.entity.monster.Monster -> aww:
    26:28:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    32:32:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    37:40:void aiStep() -> k
    43:47:void updateNoActionTime() -> ew
    51:51:boolean shouldDespawnInPeaceful() -> J
    56:56:net.minecraft.sounds.SoundEvent getSwimSound() -> am
    61:61:net.minecraft.sounds.SoundEvent getSwimSplashSound() -> an
    66:69:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    74:74:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    79:79:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    84:87:net.minecraft.sounds.SoundEvent getFallDamageSound(int) -> o
    93:93:float getWalkTargetValue(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader) -> a
    97:102:boolean isDarkEnoughToSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,java.util.Random) -> a
    106:108:boolean checkMonsterSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> c
    112:113:boolean checkAnyLightMonsterSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> d
    118:121:void registerAttributes() -> cA
    125:125:boolean shouldDropExperience() -> cE
    129:129:boolean isPreventingPlayerRest(net.minecraft.world.entity.player.Player) -> e
    134:139:net.minecraft.world.item.ItemStack getProjectile(net.minecraft.world.item.ItemStack) -> f
net.minecraft.world.entity.monster.PatrollingMonster -> awx:
    net.minecraft.core.BlockPos patrolTarget -> b
    boolean patrolLeader -> c
    boolean patrolling -> d
    32:33:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    37:39:void registerGoals() -> n
    43:51:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    55:63:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    67:67:double getRidingHeight() -> aR
    71:71:boolean canBeLeader() -> es
    79:94:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    98:102:boolean checkPatrollingMonsterSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    107:107:boolean removeWhenFarAway(double) -> h
    111:113:void setPatrolTarget(net.minecraft.core.BlockPos) -> g
    116:116:net.minecraft.core.BlockPos getPatrolTarget() -> et
    120:120:boolean hasPatrolTarget() -> eu
    124:126:void setPatrolLeader(boolean) -> r
    129:129:boolean isPatrolLeader() -> ev
    133:133:boolean canJoinPatrol() -> ex
    137:139:void findPatrolTarget() -> ey
    142:142:boolean isPatrolling() -> ez
    146:147:void setPatrolling(boolean) -> s
net.minecraft.world.entity.monster.PatrollingMonster$LongDistancePatrolGoal -> awx$a:
    net.minecraft.world.entity.monster.PatrollingMonster mob -> a
    double speedModifier -> b
    double leaderSpeedModifier -> c
    long cooldownUntil -> d
    157:163:void <init>(net.minecraft.world.entity.monster.PatrollingMonster,double,double) -> <init>
    167:168:boolean canUse() -> a
    173:173:void start() -> c
    177:177:void stop() -> d
    181:213:void tick() -> e
    216:216:java.util.List findPatrolCompanions() -> g
    220:222:boolean moveRandomly() -> h
    216:216:boolean lambda$findPatrolCompanions$0(net.minecraft.world.entity.monster.PatrollingMonster) -> a
net.minecraft.world.entity.monster.Phantom -> awy:
    net.minecraft.network.syncher.EntityDataAccessor ID_SIZE -> b
    net.minecraft.world.phys.Vec3 moveTargetPoint -> c
    net.minecraft.core.BlockPos anchorPoint -> d
    net.minecraft.world.entity.monster.Phantom$AttackPhase attackPhase -> bw
    48:64:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    68:68:net.minecraft.world.entity.ai.control.BodyRotationControl createBodyControl() -> o
    73:78:void registerGoals() -> n
    82:85:void registerAttributes() -> cA
    89:92:void defineSynchedData() -> w_
    95:96:void setPhantomSize(int) -> a
    99:101:void updatePhantomSizeInfo() -> ep
    104:104:int getPhantomSize() -> l
    109:109:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    114:119:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    123:123:boolean shouldDespawnInPeaceful() -> J
    128:144:void tick() -> h
    148:152:void aiStep() -> k
    156:157:void customServerAiStep() -> dT
    161:163:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    168:174:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    178:184:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    188:188:boolean shouldRenderAtSqrDistance(double) -> a
    193:193:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    198:198:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    203:203:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    208:208:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    213:213:net.minecraft.world.entity.MobType getMobType() -> di
    218:218:float getSoundVolume() -> dm
    223:223:boolean canAttackType(net.minecraft.world.entity.EntityType) -> a
    227:227:net.minecraft.world.phys.Vec3 getMovementTarget() -> eo
    232:236:net.minecraft.world.entity.EntityDimensions getDimensions(net.minecraft.world.entity.Pose) -> a
    43:43:net.minecraft.world.phys.Vec3 access$400(net.minecraft.world.entity.monster.Phantom) -> a
    43:43:net.minecraft.world.entity.monster.Phantom$AttackPhase access$500(net.minecraft.world.entity.monster.Phantom) -> b
    43:43:java.util.Random access$600(net.minecraft.world.entity.monster.Phantom) -> c
    43:43:java.util.Random access$700(net.minecraft.world.entity.monster.Phantom) -> d
    43:43:java.util.Random access$800(net.minecraft.world.entity.monster.Phantom) -> e
    43:43:java.util.Random access$900(net.minecraft.world.entity.monster.Phantom) -> f
    43:43:java.util.Random access$1000(net.minecraft.world.entity.monster.Phantom) -> g
    43:43:java.util.Random access$1100(net.minecraft.world.entity.monster.Phantom) -> h
    43:43:java.util.Random access$1200(net.minecraft.world.entity.monster.Phantom) -> i
    43:43:java.util.Random access$1300(net.minecraft.world.entity.monster.Phantom) -> j
    43:43:net.minecraft.core.BlockPos access$1400(net.minecraft.world.entity.monster.Phantom) -> k
    43:43:net.minecraft.core.BlockPos access$1402(net.minecraft.world.entity.monster.Phantom,net.minecraft.core.BlockPos) -> a
    43:43:net.minecraft.world.phys.Vec3 access$402(net.minecraft.world.entity.monster.Phantom,net.minecraft.world.phys.Vec3) -> a
    43:43:net.minecraft.world.entity.monster.Phantom$AttackPhase access$502(net.minecraft.world.entity.monster.Phantom,net.minecraft.world.entity.monster.Phantom$AttackPhase) -> a
    43:43:java.util.Random access$1500(net.minecraft.world.entity.monster.Phantom) -> l
    43:43:java.util.Random access$1600(net.minecraft.world.entity.monster.Phantom) -> m
    43:43:java.util.Random access$1700(net.minecraft.world.entity.monster.Phantom) -> n
    43:43:java.util.Random access$1800(net.minecraft.world.entity.monster.Phantom) -> o
    46:46:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Phantom$1 -> awy$1:
net.minecraft.world.entity.monster.Phantom$AttackPhase -> awy$a:
    net.minecraft.world.entity.monster.Phantom$AttackPhase CIRCLE -> a
    net.minecraft.world.entity.monster.Phantom$AttackPhase SWOOP -> b
    net.minecraft.world.entity.monster.Phantom$AttackPhase[] $VALUES -> c
    51:51:net.minecraft.world.entity.monster.Phantom$AttackPhase[] values() -> values
    51:51:net.minecraft.world.entity.monster.Phantom$AttackPhase valueOf(java.lang.String) -> valueOf
    51:51:void <init>(java.lang.String,int) -> <init>
    51:53:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Phantom$PhantomAttackPlayerTargetGoal -> awy$b:
    net.minecraft.world.entity.ai.targeting.TargetingConditions attackTargeting -> b
    int nextScanTick -> c
    net.minecraft.world.entity.monster.Phantom this$0 -> a
    491:494:void <init>(net.minecraft.world.entity.monster.Phantom) -> <init>
    498:515:boolean canUse() -> a
    520:525:boolean canContinueToUse() -> b
    507:507:int lambda$canUse$0(net.minecraft.world.entity.player.Player,net.minecraft.world.entity.player.Player) -> a
    491:491:void <init>(net.minecraft.world.entity.monster.Phantom,net.minecraft.world.entity.monster.Phantom$1) -> <init>
net.minecraft.world.entity.monster.Phantom$PhantomAttackStrategyGoal -> awy$c:
    int nextSweepTick -> b
    net.minecraft.world.entity.monster.Phantom this$0 -> a
    444:444:void <init>(net.minecraft.world.entity.monster.Phantom) -> <init>
    449:453:boolean canUse() -> a
    458:461:void start() -> c
    465:466:void stop() -> d
    470:480:void tick() -> e
    483:487:void setAnchorAboveTarget() -> g
    444:444:void <init>(net.minecraft.world.entity.monster.Phantom,net.minecraft.world.entity.monster.Phantom$1) -> <init>
net.minecraft.world.entity.monster.Phantom$PhantomBodyRotationControl -> awy$d:
    net.minecraft.world.entity.monster.Phantom this$0 -> a
    293:295:void <init>(net.minecraft.world.entity.monster.Phantom,net.minecraft.world.entity.Mob) -> <init>
    299:301:void clientTick() -> a
net.minecraft.world.entity.monster.Phantom$PhantomCircleAroundAnchorGoal -> awy$e:
    float angle -> c
    float distance -> d
    float height -> e
    float clockwise -> f
    net.minecraft.world.entity.monster.Phantom this$0 -> a
    324:324:void <init>(net.minecraft.world.entity.monster.Phantom) -> <init>
    332:332:boolean canUse() -> a
    337:341:void start() -> c
    345:372:void tick() -> e
    375:380:void selectNext() -> h
    324:324:void <init>(net.minecraft.world.entity.monster.Phantom,net.minecraft.world.entity.monster.Phantom$1) -> <init>
net.minecraft.world.entity.monster.Phantom$PhantomLookControl -> awy$f:
    net.minecraft.world.entity.monster.Phantom this$0 -> h
    305:307:void <init>(net.minecraft.world.entity.monster.Phantom,net.minecraft.world.entity.Mob) -> <init>
    311:311:void tick() -> a
net.minecraft.world.entity.monster.Phantom$PhantomMoveControl -> awy$g:
    float speed -> j
    net.minecraft.world.entity.monster.Phantom this$0 -> i
    240:244:void <init>(net.minecraft.world.entity.monster.Phantom,net.minecraft.world.entity.Mob) -> <init>
    248:289:void tick() -> a
net.minecraft.world.entity.monster.Phantom$PhantomMoveTargetGoal -> awy$h:
    net.minecraft.world.entity.monster.Phantom this$0 -> b
    315:317:void <init>(net.minecraft.world.entity.monster.Phantom) -> <init>
    320:320:boolean touchingTarget() -> g
net.minecraft.world.entity.monster.Phantom$PhantomSweepAttackGoal -> awy$i:
    net.minecraft.world.entity.monster.Phantom this$0 -> a
    383:383:void <init>(net.minecraft.world.entity.monster.Phantom) -> <init>
    386:386:boolean canUse() -> a
    391:416:boolean canContinueToUse() -> b
    421:421:void start() -> c
    425:427:void stop() -> d
    431:441:void tick() -> e
    383:383:void <init>(net.minecraft.world.entity.monster.Phantom,net.minecraft.world.entity.monster.Phantom$1) -> <init>
net.minecraft.world.entity.monster.PigZombie -> awz:
    java.util.UUID SPEED_MODIFIER_ATTACKING_UUID -> b
    net.minecraft.world.entity.ai.attributes.AttributeModifier SPEED_MODIFIER_ATTACKING -> c
    int angerTime -> bw
    int playAngrySoundIn -> bx
    java.util.UUID lastHurtByUUID -> by
    52:54:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    58:62:void setLastHurtByMob(net.minecraft.world.entity.LivingEntity) -> a
    66:71:void addBehaviourGoals() -> l
    75:80:void registerAttributes() -> cA
    84:84:boolean convertsInWater() -> et
    89:124:void customServerAiStep() -> dT
    127:127:boolean checkPigZombieSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    132:132:boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader) -> a
    137:144:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    148:161:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    165:172:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    176:180:boolean makeAngry(net.minecraft.world.entity.LivingEntity) -> i
    184:184:int getAngerTime() -> ez
    188:188:boolean isAngry() -> eA
    193:193:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    198:198:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    203:203:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    208:209:void populateDefaultEquipmentSlots(net.minecraft.world.DifficultyInstance) -> a
    213:213:net.minecraft.world.item.ItemStack getSkull() -> es
    243:243:boolean isPreventingPlayerRest(net.minecraft.world.entity.player.Player) -> e
    43:43:boolean access$000(net.minecraft.world.entity.monster.PigZombie,net.minecraft.world.entity.LivingEntity) -> a
    43:43:boolean access$100(net.minecraft.world.entity.monster.PigZombie) -> a
    44:45:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.PigZombie$PigZombieAngerTargetGoal -> awz$a:
    232:233:void <init>(net.minecraft.world.entity.monster.PigZombie) -> <init>
    237:237:boolean canUse() -> a
net.minecraft.world.entity.monster.PigZombie$PigZombieHurtByOtherGoal -> awz$b:
    218:220:void <init>(net.minecraft.world.entity.monster.PigZombie) -> <init>
    224:227:void alertOther(net.minecraft.world.entity.Mob,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.monster.Pillager -> axa:
    net.minecraft.network.syncher.EntityDataAccessor IS_CHARGING_CROSSBOW -> b
    net.minecraft.world.SimpleContainer inventory -> bw
    70:74:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    78:91:void registerGoals() -> n
    95:101:void registerAttributes() -> cA
    105:108:void defineSynchedData() -> w_
    111:111:boolean isChargingCrossbow() -> er
    116:117:void setChargingCrossbow(boolean) -> a
    121:130:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    134:142:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() -> l
    147:157:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    161:165:float getWalkTargetValue(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader) -> a
    170:170:int getMaxSpawnClusterSize() -> dX
    176:179:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    184:191:void populateDefaultEquipmentSlots(net.minecraft.world.DifficultyInstance) -> a
    195:202:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> r
    207:207:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    212:212:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    217:217:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    222:229:void performRangedAttack(net.minecraft.world.entity.LivingEntity,float) -> a
    233:242:void shootProjectile(net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.projectile.Projectile,float) -> a
    245:258:com.mojang.math.Vector3f getProjectileShotVector(net.minecraft.world.phys.Vec3,float) -> a
    262:262:net.minecraft.world.SimpleContainer getInventory() -> eA
    267:281:void pickUpItem(net.minecraft.world.entity.item.ItemEntity) -> a
    284:284:boolean wantsItem(net.minecraft.world.item.Item) -> b
    289:297:boolean setSlot(int,net.minecraft.world.item.ItemStack) -> a_
    302:319:void applyRaidBuffs(int,boolean) -> a
    323:323:net.minecraft.sounds.SoundEvent getCelebrateSound() -> eq
    63:63:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.RangedAttackMob -> axb:
    void performRangedAttack(net.minecraft.world.entity.LivingEntity,float) -> a
net.minecraft.world.entity.monster.Ravager -> axc:
    java.util.function.Predicate NO_RAVAGER_AND_ALIVE -> b
    int attackTick -> bw
    int stunnedTick -> bx
    int roarTick -> by
    66:70:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    74:86:void registerGoals() -> n
    90:96:void updateControlFlags() -> F
    100:108:void registerAttributes() -> cA
    112:117:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    121:126:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    130:130:net.minecraft.sounds.SoundEvent getCelebrateSound() -> eq
    135:135:net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level) -> b
    140:140:int getMaxHeadYRot() -> dV
    145:145:double getRideHeight() -> aS
    150:150:boolean canBeControlledByRider() -> dY
    156:159:net.minecraft.world.entity.Entity getControllingPassenger() -> cd
    164:213:void aiStep() -> k
    216:223:void stunEffect() -> eB
    227:227:boolean isImmobile() -> do
    232:235:boolean canSee(net.minecraft.world.entity.Entity) -> D
    240:252:void blockedByShield(net.minecraft.world.entity.LivingEntity) -> e
    255:272:void roar() -> eC
    275:279:void strongKnockback(net.minecraft.world.entity.Entity) -> a
    283:290:void handleEntityEvent(byte) -> a
    293:293:int getAttackTick() -> l
    297:297:int getStunnedTick() -> er
    301:301:int getRoarTick() -> eA
    306:310:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    316:316:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    321:321:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    326:326:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    331:332:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    336:336:boolean checkSpawnObstruction(net.minecraft.world.level.LevelReader) -> a
    341:341:void applyRaidBuffs(int,boolean) -> a
    345:345:boolean canBeLeader() -> es
    49:49:boolean lambda$static$0(net.minecraft.world.entity.Entity) -> b
    49:49:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Ravager$1 -> axc$1:
net.minecraft.world.entity.monster.Ravager$RavagerMeleeAttackGoal -> axc$a:
    net.minecraft.world.entity.monster.Ravager this$0 -> d
    349:351:void <init>(net.minecraft.world.entity.monster.Ravager) -> <init>
    356:357:double getAttackReachSqr(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.monster.Ravager$RavagerNavigation -> axc$b:
    363:364:void <init>(net.minecraft.world.entity.Mob,net.minecraft.world.level.Level) -> <init>
    368:369:net.minecraft.world.level.pathfinder.PathFinder createPathFinder(int) -> a
net.minecraft.world.entity.monster.Ravager$RavagerNodeEvaluator -> axc$c:
    373:373:void <init>() -> <init>
    376:379:net.minecraft.world.level.pathfinder.BlockPathTypes evaluateBlockPathType(net.minecraft.world.level.BlockGetter,boolean,boolean,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.BlockPathTypes) -> a
    373:373:void <init>(net.minecraft.world.entity.monster.Ravager$1) -> <init>
net.minecraft.world.entity.monster.SharedMonsterAttributes -> axd:
    org.apache.logging.log4j.Logger LOGGER -> l
    net.minecraft.world.entity.ai.attributes.Attribute MAX_HEALTH -> a
    net.minecraft.world.entity.ai.attributes.Attribute FOLLOW_RANGE -> b
    net.minecraft.world.entity.ai.attributes.Attribute KNOCKBACK_RESISTANCE -> c
    net.minecraft.world.entity.ai.attributes.Attribute MOVEMENT_SPEED -> d
    net.minecraft.world.entity.ai.attributes.Attribute FLYING_SPEED -> e
    net.minecraft.world.entity.ai.attributes.Attribute ATTACK_DAMAGE -> f
    net.minecraft.world.entity.ai.attributes.Attribute ATTACK_KNOCKBACK -> g
    net.minecraft.world.entity.ai.attributes.Attribute ATTACK_SPEED -> h
    net.minecraft.world.entity.ai.attributes.Attribute ARMOR -> i
    net.minecraft.world.entity.ai.attributes.Attribute ARMOR_TOUGHNESS -> j
    net.minecraft.world.entity.ai.attributes.Attribute LUCK -> k
    18:18:void <init>() -> <init>
    33:39:net.minecraft.nbt.ListTag saveAttributes(net.minecraft.world.entity.ai.attributes.BaseAttributeMap) -> a
    43:63:net.minecraft.nbt.CompoundTag saveAttribute(net.minecraft.world.entity.ai.attributes.AttributeInstance) -> a
    67:74:net.minecraft.nbt.CompoundTag saveAttributeModifier(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> a
    78:88:void loadAttributes(net.minecraft.world.entity.ai.attributes.BaseAttributeMap,net.minecraft.nbt.ListTag) -> a
    91:108:void loadAttribute(net.minecraft.world.entity.ai.attributes.AttributeInstance,net.minecraft.nbt.CompoundTag) -> a
    112:118:net.minecraft.world.entity.ai.attributes.AttributeModifier loadAttributeModifier(net.minecraft.nbt.CompoundTag) -> a
    19:30:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Shulker -> axe:
    java.util.UUID COVERED_ARMOR_MODIFIER_UUID -> bx
    net.minecraft.world.entity.ai.attributes.AttributeModifier COVERED_ARMOR_MODIFIER -> by
    net.minecraft.network.syncher.EntityDataAccessor DATA_ATTACH_FACE_ID -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_ATTACH_POS_ID -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_PEEK_ID -> d
    net.minecraft.network.syncher.EntityDataAccessor DATA_COLOR_ID -> bw
    float currentPeekAmountO -> bz
    float currentPeekAmount -> bA
    net.minecraft.core.BlockPos oldAttachPosition -> bB
    int clientSideTeleportInterpolation -> bC
    72:79:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    84:91:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    96:104:void registerGoals() -> n
    108:108:boolean isMovementNoisy() -> at
    113:113:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    118:118:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    123:126:void playAmbientSound() -> B
    130:130:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    135:138:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    143:149:void defineSynchedData() -> w_
    153:156:void registerAttributes() -> cA
    160:160:net.minecraft.world.entity.ai.control.BodyRotationControl createBodyControl() -> o
    165:178:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    182:193:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    197:303:void tick() -> h
    307:312:void move(net.minecraft.world.entity.MoverType,net.minecraft.world.phys.Vec3) -> a
    316:328:void setPos(double,double,double) -> d
    331:356:boolean teleportSomewhere() -> l
    361:367:void aiStep() -> k
    371:388:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    394:395:void lerpTo(double,double,double,float,float,int,boolean) -> a
    399:413:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    417:417:boolean isClosed() -> ey
    423:423:net.minecraft.world.phys.AABB getCollideBox() -> au
    427:427:net.minecraft.core.Direction getAttachFace() -> eq
    432:432:net.minecraft.core.BlockPos getAttachPosition() -> er
    436:437:void setAttachPosition(net.minecraft.core.BlockPos) -> g
    440:440:int getRawPeekAmount() -> es
    444:455:void setRawPeekAmount(int) -> a
    458:458:float getClientPeekAmount(float) -> v
    462:462:int getClientSideTeleportInterpolation() -> et
    466:466:net.minecraft.core.BlockPos getOldAttachPosition() -> eu
    471:471:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    476:476:int getMaxHeadXRot() -> dU
    481:481:int getMaxHeadYRot() -> dV
    486:486:void push(net.minecraft.world.entity.Entity) -> i
    490:490:float getPickRadius() -> aV
    494:494:boolean hasValidInterpolationPositions() -> ev
    651:652:void setDefaultColor() -> ew
    655:656:void setColor(net.minecraft.world.item.DyeColor) -> a
    660:664:net.minecraft.world.item.DyeColor getColor() -> ex
    53:53:java.util.Random access$100(net.minecraft.world.entity.monster.Shulker) -> a
    53:53:java.util.Random access$200(net.minecraft.world.entity.monster.Shulker) -> b
    53:53:java.util.Random access$300(net.minecraft.world.entity.monster.Shulker) -> c
    53:53:java.util.Random access$400(net.minecraft.world.entity.monster.Shulker) -> d
    53:53:java.util.Random access$500(net.minecraft.world.entity.monster.Shulker) -> e
    54:60:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Shulker$1 -> axe$1:
net.minecraft.world.entity.monster.Shulker$ShulkerAttackGoal -> axe$a:
    int attackTime -> b
    net.minecraft.world.entity.monster.Shulker this$0 -> a
    543:545:void <init>(net.minecraft.world.entity.monster.Shulker) -> <init>
    549:557:boolean canUse() -> a
    562:564:void start() -> c
    568:569:void stop() -> d
    573:595:void tick() -> e
net.minecraft.world.entity.monster.Shulker$ShulkerBodyRotationControl -> axe$b:
    net.minecraft.world.entity.monster.Shulker this$0 -> a
    498:500:void <init>(net.minecraft.world.entity.monster.Shulker,net.minecraft.world.entity.Mob) -> <init>
    505:505:void clientTick() -> a
net.minecraft.world.entity.monster.Shulker$ShulkerDefenseAttackGoal -> axe$c:
    626:627:void <init>(net.minecraft.world.entity.monster.Shulker) -> <init>
    631:634:boolean canUse() -> a
    639:646:net.minecraft.world.phys.AABB getTargetSearchArea(double) -> a
    626:626:boolean lambda$new$0(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.monster.Shulker$ShulkerNearestAttackGoal -> axe$d:
    net.minecraft.world.entity.monster.Shulker this$0 -> i
    599:601:void <init>(net.minecraft.world.entity.monster.Shulker,net.minecraft.world.entity.monster.Shulker) -> <init>
    605:608:boolean canUse() -> a
    613:620:net.minecraft.world.phys.AABB getTargetSearchArea(double) -> a
net.minecraft.world.entity.monster.Shulker$ShulkerPeekGoal -> axe$e:
    int peekTime -> b
    net.minecraft.world.entity.monster.Shulker this$0 -> a
    508:508:void <init>(net.minecraft.world.entity.monster.Shulker) -> <init>
    513:513:boolean canUse() -> a
    518:518:boolean canContinueToUse() -> b
    523:525:void start() -> c
    529:532:void stop() -> d
    536:537:void tick() -> e
    508:508:void <init>(net.minecraft.world.entity.monster.Shulker,net.minecraft.world.entity.monster.Shulker$1) -> <init>
net.minecraft.world.entity.monster.Silverfish -> axf:
    net.minecraft.world.entity.monster.Silverfish$SilverfishWakeUpFriendsGoal friendsGoal -> b
    37:38:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    42:53:void registerGoals() -> n
    57:57:double getRidingHeight() -> aR
    62:62:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    67:72:void registerAttributes() -> cA
    76:76:boolean isMovementNoisy() -> at
    81:81:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    86:86:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    91:91:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    96:97:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    101:107:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    113:116:void tick() -> h
    120:122:void setYBodyRot(float) -> l
    127:130:float getWalkTargetValue(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader) -> a
    134:139:boolean checkSliverfishSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    144:144:net.minecraft.world.entity.MobType getMobType() -> di
net.minecraft.world.entity.monster.Silverfish$SilverfishMergeWithStoneGoal -> axf$a:
    net.minecraft.core.Direction selectedDirection -> h
    boolean doMerge -> i
    206:209:void <init>(net.minecraft.world.entity.monster.Silverfish) -> <init>
    213:233:boolean canUse() -> a
    238:241:boolean canContinueToUse() -> b
    246:260:void start() -> c
net.minecraft.world.entity.monster.Silverfish$SilverfishWakeUpFriendsGoal -> axf$b:
    net.minecraft.world.entity.monster.Silverfish silverfish -> a
    int lookForFriends -> b
    151:153:void <init>(net.minecraft.world.entity.monster.Silverfish) -> <init>
    156:159:void notifyHurt() -> g
    163:163:boolean canUse() -> a
    168:198:void tick() -> e
net.minecraft.world.entity.monster.Skeleton -> axg:
    13:14:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    18:18:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    23:23:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    28:28:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    33:33:net.minecraft.sounds.SoundEvent getStepSound() -> l
    38:47:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
net.minecraft.world.entity.monster.Slime -> axh:
    net.minecraft.network.syncher.EntityDataAccessor ID_SIZE -> bw
    float targetSquish -> b
    float squish -> c
    float oSquish -> d
    boolean wasOnGround -> bx
    55:58:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    62:72:void registerGoals() -> n
    76:79:void defineSynchedData() -> w_
    83:86:void registerAttributes() -> cA
    89:101:void setSize(int,boolean) -> a
    104:104:int getSize() -> eu
    109:112:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    116:123:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    126:126:boolean isTiny() -> ev
    130:130:net.minecraft.core.particles.ParticleOptions getParticleType() -> l
    135:135:boolean shouldDespawnInPeaceful() -> J
    140:161:void tick() -> h
    164:165:void decreaseSquish() -> ep
    168:168:int getJumpDelay() -> eo
    173:178:void refreshDimensions() -> z_
    182:195:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    200:200:net.minecraft.world.entity.EntityType getType() -> R
    205:226:void remove() -> X
    230:234:void push(net.minecraft.world.entity.Entity) -> i
    238:241:void playerTouch(net.minecraft.world.entity.player.Player) -> b
    244:253:void dealDamage(net.minecraft.world.entity.LivingEntity) -> i
    257:257:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    261:261:boolean isDealsDamage() -> eq
    265:265:float getAttackDamage() -> er
    270:273:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    279:282:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    287:290:net.minecraft.sounds.SoundEvent getSquishSound() -> es
    296:296:net.minecraft.resources.ResourceLocation getDefaultLootTable() -> H
    300:319:boolean checkSlimeSpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> c
    324:324:float getSoundVolume() -> dm
    329:329:int getMaxHeadXRot() -> dU
    333:333:boolean doPlayJumpSound() -> ew
    338:341:void jumpFromGround() -> dq
    346:353:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    413:413:net.minecraft.sounds.SoundEvent getJumpSound() -> et
    418:418:net.minecraft.world.entity.EntityDimensions getDimensions(net.minecraft.world.entity.Pose) -> a
    70:70:boolean lambda$registerGoals$0(net.minecraft.world.entity.LivingEntity) -> j
    47:47:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Slime$SlimeAttackGoal -> axh$a:
    net.minecraft.world.entity.monster.Slime slime -> a
    int growTiredTimer -> b
    425:428:void <init>(net.minecraft.world.entity.monster.Slime) -> <init>
    432:445:boolean canUse() -> a
    450:452:void start() -> c
    456:472:boolean canContinueToUse() -> b
    477:479:void tick() -> e
net.minecraft.world.entity.monster.Slime$SlimeFloatGoal -> axh$b:
    net.minecraft.world.entity.monster.Slime slime -> a
    511:515:void <init>(net.minecraft.world.entity.monster.Slime) -> <init>
    519:519:boolean canUse() -> a
    524:528:void tick() -> e
net.minecraft.world.entity.monster.Slime$SlimeKeepOnJumpingGoal -> axh$c:
    net.minecraft.world.entity.monster.Slime slime -> a
    534:537:void <init>(net.minecraft.world.entity.monster.Slime) -> <init>
    541:541:boolean canUse() -> a
    546:547:void tick() -> e
net.minecraft.world.entity.monster.Slime$SlimeMoveControl -> axh$d:
    float yRot -> i
    int jumpDelay -> j
    net.minecraft.world.entity.monster.Slime slime -> k
    boolean isAggressive -> l
    363:366:void <init>(net.minecraft.world.entity.monster.Slime) -> <init>
    369:371:void setDirection(float,boolean) -> a
    374:376:void setWantedMovement(double) -> a
    380:409:void tick() -> a
net.minecraft.world.entity.monster.Slime$SlimeRandomDirectionGoal -> axh$e:
    net.minecraft.world.entity.monster.Slime slime -> a
    float chosenDegrees -> b
    int nextRandomizeTime -> c
    488:491:void <init>(net.minecraft.world.entity.monster.Slime) -> <init>
    495:495:boolean canUse() -> a
    500:505:void tick() -> e
net.minecraft.world.entity.monster.SpellcasterIllager -> axi:
    net.minecraft.network.syncher.EntityDataAccessor DATA_SPELL_CASTING_ID -> bw
    int spellCastingTickCount -> b
    net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell currentSpell -> bx
    23:27:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    31:34:void defineSynchedData() -> w_
    38:41:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    45:48:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    52:57:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() -> l
    61:64:boolean isCastingSpell() -> eA
    68:70:void setIsCastingSpell(net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell) -> a
    73:76:net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell getCurrentSpell() -> eB
    81:86:void customServerAiStep() -> dT
    90:106:void tick() -> h
    109:109:int getSpellCastingTime() -> eC
    net.minecraft.sounds.SoundEvent getCastingSoundEvent() -> er
    19:19:net.minecraft.world.entity.ai.navigation.PathNavigation access$200(net.minecraft.world.entity.monster.SpellcasterIllager) -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell -> axi$a:
    net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell NONE -> a
    net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell SUMMON_VEX -> b
    net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell FANGS -> c
    net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell WOLOLO -> d
    net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell DISAPPEAR -> e
    net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell BLINDNESS -> f
    int id -> g
    double[] spellColor -> h
    net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell[] $VALUES -> i
    207:207:net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell[] values() -> values
    207:207:net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell valueOf(java.lang.String) -> valueOf
    219:222:void <init>(java.lang.String,int,int,double,double,double) -> <init>
    225:230:net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell byId(int) -> a
    207:207:int access$000(net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell) -> a
    207:207:double[] access$100(net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell) -> b
    207:213:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.SpellcasterIllager$SpellcasterCastingSpellGoal -> axi$b:
    net.minecraft.world.entity.monster.SpellcasterIllager this$0 -> b
    115:117:void <init>(net.minecraft.world.entity.monster.SpellcasterIllager) -> <init>
    121:121:boolean canUse() -> a
    126:128:void start() -> c
    132:134:void stop() -> d
    138:141:void tick() -> e
net.minecraft.world.entity.monster.SpellcasterIllager$SpellcasterUseSpellGoal -> axi$c:
    int attackWarmupDelay -> b
    int nextAttackTickCount -> c
    net.minecraft.world.entity.monster.SpellcasterIllager this$0 -> d
    144:144:void <init>(net.minecraft.world.entity.monster.SpellcasterIllager) -> <init>
    150:161:boolean canUse() -> a
    166:167:boolean canContinueToUse() -> b
    172:180:void start() -> c
    184:189:void tick() -> e
    void performSpellCasting() -> j
    194:194:int getCastWarmupTime() -> m
    int getCastingTime() -> g
    int getCastingInterval() -> h
    net.minecraft.sounds.SoundEvent getSpellPrepareSound() -> k
    net.minecraft.world.entity.monster.SpellcasterIllager$IllagerSpell getSpell() -> l
net.minecraft.world.entity.monster.Spider -> axj:
    net.minecraft.network.syncher.EntityDataAccessor DATA_FLAGS_ID -> b
    48:49:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    53:65:void registerGoals() -> n
    69:69:double getRideHeight() -> aS
    74:74:net.minecraft.world.entity.ai.navigation.PathNavigation createNavigation(net.minecraft.world.level.Level) -> b
    79:82:void defineSynchedData() -> w_
    86:93:void tick() -> h
    97:101:void registerAttributes() -> cA
    105:105:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    110:110:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    115:115:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    120:121:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    129:129:boolean onLadder() -> y_
    135:138:void makeStuckInBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.Vec3) -> a
    142:142:net.minecraft.world.entity.MobType getMobType() -> di
    147:150:boolean canBeAffected(net.minecraft.world.effect.MobEffectInstance) -> d
    154:154:boolean isClimbing() -> l
    158:165:void setClimbing(boolean) -> r
    170:194:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    199:199:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    45:45:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Spider$SpiderAttackGoal -> axj$a:
    223:224:void <init>(net.minecraft.world.entity.monster.Spider) -> <init>
    228:228:boolean canUse() -> a
    233:238:boolean canContinueToUse() -> b
    243:243:double getAttackReachSqr(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.monster.Spider$SpiderEffectsGroupData -> axj$b:
    net.minecraft.world.effect.MobEffect effect -> a
    204:204:void <init>() -> <init>
    208:218:void setRandomEffect(java.util.Random) -> a
net.minecraft.world.entity.monster.Spider$SpiderTargetGoal -> axj$c:
    249:250:void <init>(net.minecraft.world.entity.monster.Spider,java.lang.Class) -> <init>
    254:259:boolean canUse() -> a
net.minecraft.world.entity.monster.Stray -> axk:
    22:23:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    26:27:boolean checkStraySpawnRules(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.MobSpawnType,net.minecraft.core.BlockPos,java.util.Random) -> b
    32:32:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    37:37:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    42:42:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    47:47:net.minecraft.sounds.SoundEvent getStepSound() -> l
    52:56:net.minecraft.world.entity.projectile.AbstractArrow getArrow(net.minecraft.world.item.ItemStack,float) -> b
net.minecraft.world.entity.monster.Vex -> axl:
    net.minecraft.network.syncher.EntityDataAccessor DATA_FLAGS_ID -> b
    net.minecraft.world.entity.Mob owner -> c
    net.minecraft.core.BlockPos boundOrigin -> d
    boolean hasLimitedLife -> bw
    int limitedLifeTicks -> bx
    53:58:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    62:65:void move(net.minecraft.world.entity.MoverType,net.minecraft.world.phys.Vec3) -> a
    69:81:void tick() -> h
    85:96:void registerGoals() -> n
    100:104:void registerAttributes() -> cA
    108:111:void defineSynchedData() -> w_
    115:123:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    127:137:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    140:140:net.minecraft.world.entity.Mob getOwner() -> l
    145:145:net.minecraft.core.BlockPos getBoundOrigin() -> eq
    149:150:void setBoundOrigin(net.minecraft.core.BlockPos) -> g
    153:154:boolean getVexFlag(int) -> b
    158:165:void setVexFlag(int,boolean) -> a
    168:168:boolean isCharging() -> er
    172:173:void setIsCharging(boolean) -> r
    176:177:void setOwner(net.minecraft.world.entity.Mob) -> a
    180:182:void setLimitedLife(int) -> a
    186:186:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    191:191:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    196:196:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    201:201:float getBrightness() -> aI
    331:334:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    339:341:void populateDefaultEquipmentSlots(net.minecraft.world.DifficultyInstance) -> a
    41:41:java.util.Random access$000(net.minecraft.world.entity.monster.Vex) -> a
    41:41:net.minecraft.world.entity.ai.control.MoveControl access$100(net.minecraft.world.entity.monster.Vex) -> b
    41:41:net.minecraft.world.entity.ai.control.MoveControl access$200(net.minecraft.world.entity.monster.Vex) -> c
    41:41:java.util.Random access$300(net.minecraft.world.entity.monster.Vex) -> d
    41:41:java.util.Random access$400(net.minecraft.world.entity.monster.Vex) -> e
    41:41:java.util.Random access$500(net.minecraft.world.entity.monster.Vex) -> f
    41:41:java.util.Random access$600(net.minecraft.world.entity.monster.Vex) -> g
    41:41:net.minecraft.world.entity.ai.control.MoveControl access$700(net.minecraft.world.entity.monster.Vex) -> h
    41:41:net.minecraft.world.entity.Mob access$800(net.minecraft.world.entity.monster.Vex) -> i
    42:42:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Vex$VexChargeAttackGoal -> axl$a:
    net.minecraft.world.entity.monster.Vex this$0 -> a
    245:247:void <init>(net.minecraft.world.entity.monster.Vex) -> <init>
    251:254:boolean canUse() -> a
    259:259:boolean canContinueToUse() -> b
    264:269:void start() -> c
    273:274:void stop() -> d
    278:289:void tick() -> e
net.minecraft.world.entity.monster.Vex$VexCopyOwnerTargetGoal -> axl$b:
    net.minecraft.world.entity.ai.targeting.TargetingConditions copyOwnerTargeting -> b
    net.minecraft.world.entity.monster.Vex this$0 -> a
    344:348:void <init>(net.minecraft.world.entity.monster.Vex,net.minecraft.world.entity.PathfinderMob) -> <init>
    352:352:boolean canUse() -> a
    357:359:void start() -> c
net.minecraft.world.entity.monster.Vex$VexMoveControl -> axl$c:
    net.minecraft.world.entity.monster.Vex this$0 -> i
    205:207:void <init>(net.minecraft.world.entity.monster.Vex,net.minecraft.world.entity.monster.Vex) -> <init>
    211:241:void tick() -> a
net.minecraft.world.entity.monster.Vex$VexRandomMoveGoal -> axl$d:
    net.minecraft.world.entity.monster.Vex this$0 -> a
    293:295:void <init>(net.minecraft.world.entity.monster.Vex) -> <init>
    299:299:boolean canUse() -> a
    304:304:boolean canContinueToUse() -> b
    309:325:void tick() -> e
net.minecraft.world.entity.monster.Vindicator -> axm:
    java.util.function.Predicate DOOR_BREAKING_PREDICATE -> b
    boolean isJohnny -> bw
    57:58:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    62:77:void registerGoals() -> n
    97:106:void customServerAiStep() -> dT
    110:116:void registerAttributes() -> cA
    120:125:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    129:134:net.minecraft.world.entity.monster.AbstractIllager$IllagerArmPose getArmPose() -> l
    139:144:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    148:148:net.minecraft.sounds.SoundEvent getCelebrateSound() -> eq
    154:161:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    166:169:void populateDefaultEquipmentSlots(net.minecraft.world.DifficultyInstance) -> a
    173:180:boolean isAlliedTo(net.minecraft.world.entity.Entity) -> r
    185:189:void setCustomName(net.minecraft.network.chat.Component) -> b
    193:193:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    198:198:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    203:203:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    208:223:void applyRaidBuffs(int,boolean) -> a
    52:52:boolean lambda$static$0(net.minecraft.world.Difficulty) -> a
    50:50:java.util.function.Predicate access$000() -> er
    50:50:java.util.Random access$100(net.minecraft.world.entity.monster.Vindicator) -> a
    50:50:boolean access$200(net.minecraft.world.entity.monster.Vindicator) -> b
    52:52:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Vindicator$VindicatorBreakDoorGoal -> axm$a:
    227:229:void <init>(net.minecraft.world.entity.Mob) -> <init>
    233:234:boolean canContinueToUse() -> b
    239:240:boolean canUse() -> a
    245:247:void start() -> c
net.minecraft.world.entity.monster.Vindicator$VindicatorJohnnyAttackGoal -> axm$b:
    252:253:void <init>(net.minecraft.world.entity.monster.Vindicator) -> <init>
    257:257:boolean canUse() -> a
    262:264:void start() -> c
net.minecraft.world.entity.monster.Vindicator$VindicatorMeleeAttackGoal -> axm$c:
    net.minecraft.world.entity.monster.Vindicator this$0 -> d
    80:82:void <init>(net.minecraft.world.entity.monster.Vindicator,net.minecraft.world.entity.monster.Vindicator) -> <init>
    86:91:double getAttackReachSqr(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.entity.monster.Witch -> axn:
    java.util.UUID SPEED_MODIFIER_DRINKING_UUID -> b
    net.minecraft.world.entity.ai.attributes.AttributeModifier SPEED_MODIFIER_DRINKING -> bw
    net.minecraft.network.syncher.EntityDataAccessor DATA_USING_ITEM -> bx
    int usingTime -> by
    net.minecraft.world.entity.ai.goal.target.NearestHealableRaiderTargetGoal healRaidersGoal -> bz
    net.minecraft.world.entity.ai.goal.target.NearestAttackableWitchTargetGoal attackPlayersGoal -> bA
    57:58:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    62:77:void registerGoals() -> n
    81:84:void defineSynchedData() -> w_
    88:88:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    93:93:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    98:98:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    102:103:void setUsingItem(boolean) -> t
    106:106:boolean isDrinkingPotion() -> l
    111:115:void registerAttributes() -> cA
    119:175:void aiStep() -> k
    179:179:net.minecraft.sounds.SoundEvent getCelebrateSound() -> eq
    184:191:void handleEntityEvent(byte) -> a
    195:204:float getDamageAfterMagicAbsorb(net.minecraft.world.damagesource.DamageSource,float) -> c
    209:245:void performRangedAttack(net.minecraft.world.entity.LivingEntity,float) -> a
    249:249:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    254:254:void applyRaidBuffs(int,boolean) -> a
    258:258:boolean canBeLeader() -> es
    65:65:boolean lambda$registerGoals$0(net.minecraft.world.entity.LivingEntity) -> i
    46:49:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.WitherSkeleton -> axo:
    30:33:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    37:37:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    42:42:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    47:47:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    52:52:net.minecraft.sounds.SoundEvent getStepSound() -> l
    57:66:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    70:71:void populateDefaultEquipmentSlots(net.minecraft.world.DifficultyInstance) -> a
    75:75:void populateDefaultEquipmentEnchantments(net.minecraft.world.DifficultyInstance) -> b
    80:86:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    91:91:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    96:103:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    108:110:net.minecraft.world.entity.projectile.AbstractArrow getArrow(net.minecraft.world.item.ItemStack,float) -> b
    115:118:boolean canBeAffected(net.minecraft.world.effect.MobEffectInstance) -> d
net.minecraft.world.entity.monster.Zombie -> axp:
    net.minecraft.world.entity.ai.attributes.Attribute SPAWN_REINFORCEMENTS_CHANCE -> d
    java.util.UUID SPEED_MODIFIER_BABY_UUID -> b
    net.minecraft.world.entity.ai.attributes.AttributeModifier SPEED_MODIFIER_BABY -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_BABY_ID -> bw
    net.minecraft.network.syncher.EntityDataAccessor DATA_SPECIAL_TYPE_ID -> bx
    net.minecraft.network.syncher.EntityDataAccessor DATA_DROWNED_CONVERSION_ID -> by
    java.util.function.Predicate DOOR_BREAKING_PREDICATE -> bz
    net.minecraft.world.entity.ai.goal.BreakDoorGoal breakDoorGoal -> bA
    boolean canBreakDoors -> bB
    int inWaterTime -> bC
    int conversionTime -> bD
    84:92:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    95:96:void <init>(net.minecraft.world.level.Level) -> <init>
    100:105:void registerGoals() -> n
    111:120:void addBehaviourGoals() -> l
    124:132:void registerAttributes() -> cA
    136:141:void defineSynchedData() -> w_
    144:144:boolean isUnderWaterConverting() -> ex
    148:148:boolean canBreakDoors() -> ey
    152:169:void setCanBreakDoors(boolean) -> s
    172:172:boolean supportsBreakDoorGoal() -> eq
    177:177:boolean isBaby() -> x_
    182:186:int getExperienceReward(net.minecraft.world.entity.player.Player) -> d
    190:199:void setBaby(boolean) -> t
    203:208:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    211:211:boolean convertsInWater() -> et
    216:237:void tick() -> h
    241:264:void aiStep() -> k
    267:269:void startUnderWaterConversion(int) -> a
    273:275:void doUnderWaterConversion() -> ev
    278:311:void convertTo(net.minecraft.world.entity.EntityType) -> b
    315:338:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    342:342:boolean isSunSensitive() -> K_
    347:385:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    390:403:boolean doHurtTarget(net.minecraft.world.entity.Entity) -> B
    408:408:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    413:413:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    418:418:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    422:422:net.minecraft.sounds.SoundEvent getStepSound() -> er
    427:428:void playStepSound(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    432:432:net.minecraft.world.entity.MobType getMobType() -> di
    437:447:void populateDefaultEquipmentSlots(net.minecraft.world.DifficultyInstance) -> a
    451:460:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    464:476:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    480:511:void killed(net.minecraft.world.entity.LivingEntity) -> b
    515:515:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    520:523:boolean canHoldItem(net.minecraft.world.item.ItemStack) -> g
    529:583:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    587:598:void handleAttributes(float) -> v
    610:610:double getRidingHeight() -> aR
    615:627:void dropCustomDeathLoot(net.minecraft.world.damagesource.DamageSource,int,boolean) -> a
    630:630:net.minecraft.world.item.ItemStack getSkull() -> es
    83:83:boolean lambda$static$0(net.minecraft.world.Difficulty) -> a
    69:69:java.util.Random access$100(net.minecraft.world.entity.monster.Zombie) -> a
    70:83:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.Zombie$1 -> axp$1:
net.minecraft.world.entity.monster.Zombie$ZombieAttackTurtleEggGoal -> axp$a:
    net.minecraft.world.entity.monster.Zombie this$0 -> g
    634:636:void <init>(net.minecraft.world.entity.monster.Zombie,net.minecraft.world.entity.PathfinderMob,double,int) -> <init>
    640:641:void playDestroyProgressSound(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    645:646:void playBreakSound(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    650:650:double acceptedDistance() -> h
net.minecraft.world.entity.monster.Zombie$ZombieGroupData -> axp$b:
    boolean isBaby -> a
    net.minecraft.world.entity.monster.Zombie this$0 -> b
    603:605:void <init>(net.minecraft.world.entity.monster.Zombie,boolean) -> <init>
    600:600:void <init>(net.minecraft.world.entity.monster.Zombie,boolean,net.minecraft.world.entity.monster.Zombie$1) -> <init>
net.minecraft.world.entity.monster.ZombieVillager -> axq:
    net.minecraft.network.syncher.EntityDataAccessor DATA_CONVERTING_ID -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_VILLAGER_DATA -> c
    int villagerConversionTime -> bw
    java.util.UUID conversionStarter -> bx
    net.minecraft.nbt.Tag gossips -> by
    net.minecraft.nbt.CompoundTag tradeOffers -> bz
    int villagerXp -> bA
    67:70:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    74:78:void defineSynchedData() -> w_
    82:100:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    104:125:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    129:140:void tick() -> h
    144:159:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    164:164:boolean convertsInWater() -> et
    169:169:boolean removeWhenFarAway(double) -> h
    173:173:boolean isConverting() -> ez
    177:185:void startConverting(java.util.UUID,int) -> a
    189:196:void handleEntityEvent(byte) -> a
    199:252:void finishConversion(net.minecraft.server.level.ServerLevel) -> a
    255:276:int getConversionProgress() -> eC
    281:284:float getVoicePitch() -> dn
    289:289:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    294:294:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    299:299:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    304:304:net.minecraft.sounds.SoundEvent getStepSound() -> er
    309:309:net.minecraft.world.item.ItemStack getSkull() -> es
    313:314:void setTradeOffers(net.minecraft.nbt.CompoundTag) -> g
    317:318:void setGossips(net.minecraft.nbt.Tag) -> a
    323:325:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    330:336:void setVillagerData(net.minecraft.world.entity.npc.VillagerData) -> a
    340:340:net.minecraft.world.entity.npc.VillagerData getVillagerData() -> eA
    344:344:int getVillagerXp() -> eB
    348:349:void setVillagerXp(int) -> a
    51:52:void <clinit>() -> <clinit>
net.minecraft.world.entity.monster.package-info -> axr:
net.minecraft.world.entity.npc.AbstractVillager -> axs:
    net.minecraft.network.syncher.EntityDataAccessor DATA_UNHAPPY_COUNTER -> bx
    net.minecraft.world.entity.player.Player tradingPlayer -> by
    net.minecraft.world.item.trading.MerchantOffers offers -> bw
    net.minecraft.world.SimpleContainer inventory -> bz
    49:53:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    57:62:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    66:66:int getUnhappyCounter() -> eq
    70:71:void setUnhappyCounter(int) -> s
    75:75:int getVillagerXp() -> er
    80:83:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    88:90:void defineSynchedData() -> w_
    94:95:void setTradingPlayer(net.minecraft.world.entity.player.Player) -> e
    100:100:net.minecraft.world.entity.player.Player getTradingPlayer() -> es
    104:104:boolean isTrading() -> et
    109:113:net.minecraft.world.item.trading.MerchantOffers getOffers() -> eu
    118:118:void overrideOffers(net.minecraft.world.item.trading.MerchantOffers) -> a
    122:122:void overrideXp(int) -> t
    126:134:void notifyTrade(net.minecraft.world.item.trading.MerchantOffer) -> a
    void rewardTradeXp(net.minecraft.world.item.trading.MerchantOffer) -> b
    140:140:boolean showProgressBar() -> ev
    145:149:void notifyTradeUpdated(net.minecraft.world.item.ItemStack) -> i
    153:153:net.minecraft.sounds.SoundEvent getNotifyTradeSound() -> ew
    157:157:net.minecraft.sounds.SoundEvent getTradeUpdatedSound(boolean) -> r
    161:162:void playCelebrateSound() -> ex
    166:180:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    184:198:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    203:204:net.minecraft.world.entity.Entity changeDimension(net.minecraft.world.level.dimension.DimensionType) -> a
    208:209:void stopTrading() -> ey
    213:215:void die(net.minecraft.world.damagesource.DamageSource) -> a
    218:224:void addParticlesAroundSelf(net.minecraft.core.particles.ParticleOptions) -> a
    228:228:boolean canBeLeashed(net.minecraft.world.entity.player.Player) -> a
    232:232:net.minecraft.world.SimpleContainer getInventory() -> ez
    237:245:boolean setSlot(int,net.minecraft.world.item.ItemStack) -> a_
    250:250:net.minecraft.world.level.Level getLevel() -> eB
    void updateTrades() -> eC
    256:274:void addOffersFromItemListings(net.minecraft.world.item.trading.MerchantOffers,net.minecraft.world.entity.npc.VillagerTrades$ItemListing[],int) -> a
    39:39:void <clinit>() -> <clinit>
net.minecraft.world.entity.npc.CatSpawner -> axt:
    int nextTick -> a
    24:24:void <init>() -> <init>
    31:66:int tick(net.minecraft.server.level.ServerLevel,boolean,boolean) -> a
    70:77:int spawnInVillage(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    81:87:int spawnInHut(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    91:99:int spawnCat(net.minecraft.core.BlockPos,net.minecraft.world.level.Level) -> a
net.minecraft.world.entity.npc.ClientSideMerchant -> axu:
    net.minecraft.world.inventory.MerchantContainer container -> a
    net.minecraft.world.entity.player.Player source -> b
    net.minecraft.world.item.trading.MerchantOffers offers -> c
    int xp -> d
    19:25:void <init>(net.minecraft.world.entity.player.Player) -> <init>
    28:28:net.minecraft.world.Container getContainer() -> a
    34:34:net.minecraft.world.entity.player.Player getTradingPlayer() -> es
    39:39:void setTradingPlayer(net.minecraft.world.entity.player.Player) -> e
    43:43:net.minecraft.world.item.trading.MerchantOffers getOffers() -> eu
    48:49:void overrideOffers(net.minecraft.world.item.trading.MerchantOffers) -> a
    53:54:void notifyTrade(net.minecraft.world.item.trading.MerchantOffer) -> a
    58:58:void notifyTradeUpdated(net.minecraft.world.item.ItemStack) -> i
    62:62:net.minecraft.world.level.Level getLevel() -> eB
    67:67:int getVillagerXp() -> er
    72:73:void overrideXp(int) -> t
    77:77:boolean showProgressBar() -> ev
    82:82:net.minecraft.sounds.SoundEvent getNotifyTradeSound() -> ew
net.minecraft.world.entity.npc.Npc -> axv:
net.minecraft.world.entity.npc.Villager -> axw:
    net.minecraft.network.syncher.EntityDataAccessor DATA_VILLAGER_DATA -> bz
    java.util.Map FOOD_POINTS -> bx
    java.util.Set WANTED_ITEMS -> bA
    int updateMerchantTimer -> bB
    boolean increaseProfessionLevelOnUpdate -> bC
    net.minecraft.world.entity.player.Player lastTradedPlayer -> bD
    boolean chasing -> bE
    byte foodLevel -> bF
    net.minecraft.world.entity.ai.gossip.GossipContainer gossips -> bG
    long lastGossipTime -> bH
    long lastGossipDecayTime -> bI
    int villagerXp -> bJ
    long lastRestockGameTime -> bK
    int numberOfRestocksToday -> bL
    long lastRestockCheckDayTime -> bM
    com.google.common.collect.ImmutableList MEMORY_TYPES -> bN
    com.google.common.collect.ImmutableList SENSOR_TYPES -> bO
    java.util.Map POI_MEMORIES -> by
    178:179:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    119:188:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level,net.minecraft.world.entity.npc.VillagerType) -> <init>
    193:193:net.minecraft.world.entity.ai.Brain getBrain() -> cz
    198:200:net.minecraft.world.entity.ai.Brain makeBrain(com.mojang.datafixers.Dynamic) -> a
    204:208:void refreshBrain(net.minecraft.server.level.ServerLevel) -> a
    211:234:void registerBrainGoals(net.minecraft.world.entity.ai.Brain) -> a
    238:242:void ageBoundaryReached() -> l
    246:250:void registerAttributes() -> cA
    254:288:void customServerAiStep() -> dT
    292:299:void tick() -> h
    304:338:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    342:346:void setUnhappy() -> eO
    349:352:void startTrading(net.minecraft.world.entity.player.Player) -> g
    356:361:void setTradingPlayer(net.minecraft.world.entity.player.Player) -> e
    365:367:void stopTrading() -> ey
    370:373:void resetSpecialPrices() -> eP
    377:377:boolean canRestock() -> eD
    381:390:void restock() -> eE
    393:398:boolean needsToRestock() -> eQ
    403:403:boolean allowedToRestock() -> eR
    407:426:boolean shouldRestock() -> eF
    431:440:void catchUpDemand() -> eS
    443:446:void updateDemand() -> eT
    449:465:void updateSpecialPrices(net.minecraft.world.entity.player.Player) -> h
    469:471:void defineSynchedData() -> w_
    475:483:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    487:521:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    525:525:boolean removeWhenFarAway(double) -> h
    531:538:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    543:543:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    548:548:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    552:556:void playWorkSound() -> eG
    560:566:void setVillagerData(net.minecraft.world.entity.npc.VillagerData) -> a
    570:570:net.minecraft.world.entity.npc.VillagerData getVillagerData() -> eA
    575:589:void rewardTradeXp(net.minecraft.world.item.trading.MerchantOffer) -> b
    592:593:void setChasing(boolean) -> s
    596:596:boolean isChasing() -> eH
    602:609:void setLastHurtByMob(net.minecraft.world.entity.LivingEntity) -> a
    613:623:void die(net.minecraft.world.damagesource.DamageSource) -> a
    626:639:void tellWitnessesThatIWasMurdered(net.minecraft.world.entity.Entity) -> a
    642:656:void releasePoi(net.minecraft.world.entity.ai.memory.MemoryModuleType) -> a
    659:659:boolean canBreed() -> eI
    663:663:boolean hungry() -> eU
    667:689:void eatUntilFull() -> eV
    692:692:int getPlayerReputation(net.minecraft.world.entity.player.Player) -> f
    696:697:void digestFood(int) -> v
    700:702:void eatAndDigestFood() -> eJ
    705:706:void setOffers(net.minecraft.world.item.trading.MerchantOffers) -> b
    709:710:boolean shouldIncreaseLevel() -> eW
    714:717:void increaseMerchantCareer() -> eX
    721:721:net.minecraft.network.chat.Component getTypeName() -> by
    726:737:void handleEntityEvent(byte) -> a
    742:749:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    755:766:net.minecraft.world.entity.npc.Villager getBreedOffspring(net.minecraft.world.entity.AgableMob) -> b
    771:781:void thunderHit(net.minecraft.world.entity.global.LightningBolt) -> a
    785:823:void pickUpItem(net.minecraft.world.entity.item.ItemEntity) -> a
    826:826:boolean wantToPickUp(net.minecraft.world.item.Item) -> b
    830:830:boolean hasExcessFood() -> eK
    834:834:boolean wantsMoreFood() -> eL
    838:839:int countFoodPointsInInventory() -> eY
    843:856:void makeBread() -> eZ
    859:860:boolean hasFarmSeeds() -> eM
    865:880:void updateTrades() -> eC
    883:894:void gossip(net.minecraft.world.entity.npc.Villager,long) -> a
    897:910:void maybeDecayGossip() -> fa
    913:938:void spawnGolemIfNeeded(long,int) -> a
    941:942:void sawGolem(long) -> b
    945:950:boolean hasSeenGolemRecently(long) -> c
    954:965:boolean wantsToSpawnGolem(long) -> a
    970:994:net.minecraft.world.entity.animal.IronGolem trySpawnGolem() -> fb
    999:1009:void onReputationEventFrom(net.minecraft.world.entity.ai.village.ReputationEventType,net.minecraft.world.entity.Entity) -> a
    1013:1013:int getVillagerXp() -> er
    1017:1018:void setVillagerXp(int) -> u
    1021:1023:void resetNumberOfRestocks() -> fc
    1026:1026:net.minecraft.world.entity.ai.gossip.GossipContainer getGossips() -> eN
    1030:1031:void setGossips(net.minecraft.nbt.Tag) -> a
    1035:1038:void sendDebugPackets() -> K
    1042:1044:void startSleeping(net.minecraft.core.BlockPos) -> e
    1048:1050:void stopSleeping() -> dR
    1053:1058:boolean golemSpawnConditionsMet(long) -> d
    84:84:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    937:937:void lambda$spawnGolemIfNeeded$9(long,net.minecraft.world.entity.npc.Villager) -> a
    922:922:boolean lambda$spawnGolemIfNeeded$8(long,net.minecraft.world.entity.npc.Villager) -> b
    839:839:int lambda$countFoodPointsInInventory$7(net.minecraft.world.SimpleContainer,java.util.Map$Entry) -> a
    692:692:boolean lambda$getPlayerReputation$6(net.minecraft.world.entity.ai.gossip.GossipType) -> a
    647:655:void lambda$releasePoi$5(net.minecraft.server.MinecraftServer,net.minecraft.world.entity.ai.memory.MemoryModuleType,net.minecraft.core.GlobalPos) -> a
    638:638:void lambda$tellWitnessesThatIWasMurdered$4(net.minecraft.server.level.ServerLevel,net.minecraft.world.entity.Entity,net.minecraft.world.entity.LivingEntity) -> a
    637:637:boolean lambda$tellWitnessesThatIWasMurdered$3(net.minecraft.world.entity.LivingEntity) -> i
    174:174:boolean lambda$static$2(net.minecraft.world.entity.npc.Villager,net.minecraft.world.entity.ai.village.poi.PoiType) -> a
    173:173:boolean lambda$static$1(net.minecraft.world.entity.npc.Villager,net.minecraft.world.entity.ai.village.poi.PoiType) -> b
    172:172:boolean lambda$static$0(net.minecraft.world.entity.npc.Villager,net.minecraft.world.entity.ai.village.poi.PoiType) -> c
    85:171:void <clinit>() -> <clinit>
net.minecraft.world.entity.npc.VillagerData -> axx:
    int[] NEXT_LEVEL_XP_THRESHOLDS -> a
    net.minecraft.world.entity.npc.VillagerType type -> b
    net.minecraft.world.entity.npc.VillagerProfession profession -> c
    int level -> d
    18:22:void <init>(net.minecraft.world.entity.npc.VillagerType,net.minecraft.world.entity.npc.VillagerProfession,int) -> <init>
    25:30:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    33:33:net.minecraft.world.entity.npc.VillagerType getType() -> a
    37:37:net.minecraft.world.entity.npc.VillagerProfession getProfession() -> b
    41:41:int getLevel() -> c
    45:45:net.minecraft.world.entity.npc.VillagerData setType(net.minecraft.world.entity.npc.VillagerType) -> a
    49:49:net.minecraft.world.entity.npc.VillagerData setProfession(net.minecraft.world.entity.npc.VillagerProfession) -> a
    53:53:net.minecraft.world.entity.npc.VillagerData setLevel(int) -> a
    57:60:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    65:65:int getMinXpPerLevel(int) -> b
    69:69:int getMaxXpPerLevel(int) -> c
    73:73:boolean canLevelUp(int) -> d
    12:12:void <clinit>() -> <clinit>
net.minecraft.world.entity.npc.VillagerDataHolder -> axy:
    net.minecraft.world.entity.npc.VillagerData getVillagerData() -> eA
    void setVillagerData(net.minecraft.world.entity.npc.VillagerData) -> a
net.minecraft.world.entity.npc.VillagerProfession -> axz:
    net.minecraft.world.entity.npc.VillagerProfession NONE -> a
    net.minecraft.world.entity.npc.VillagerProfession ARMORER -> b
    net.minecraft.world.entity.npc.VillagerProfession BUTCHER -> c
    net.minecraft.world.entity.npc.VillagerProfession CARTOGRAPHER -> d
    net.minecraft.world.entity.npc.VillagerProfession CLERIC -> e
    net.minecraft.world.entity.npc.VillagerProfession FARMER -> f
    net.minecraft.world.entity.npc.VillagerProfession FISHERMAN -> g
    net.minecraft.world.entity.npc.VillagerProfession FLETCHER -> h
    net.minecraft.world.entity.npc.VillagerProfession LEATHERWORKER -> i
    net.minecraft.world.entity.npc.VillagerProfession LIBRARIAN -> j
    net.minecraft.world.entity.npc.VillagerProfession MASON -> k
    net.minecraft.world.entity.npc.VillagerProfession NITWIT -> l
    net.minecraft.world.entity.npc.VillagerProfession SHEPHERD -> m
    net.minecraft.world.entity.npc.VillagerProfession TOOLSMITH -> n
    net.minecraft.world.entity.npc.VillagerProfession WEAPONSMITH -> o
    java.lang.String name -> p
    net.minecraft.world.entity.ai.village.poi.PoiType jobPoiType -> q
    com.google.common.collect.ImmutableSet requestedItems -> r
    com.google.common.collect.ImmutableSet secondaryPoi -> s
    net.minecraft.sounds.SoundEvent workSound -> t
    40:46:void <init>(java.lang.String,net.minecraft.world.entity.ai.village.poi.PoiType,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet,net.minecraft.sounds.SoundEvent) -> <init>
    49:49:java.lang.String getName() -> a
    53:53:net.minecraft.world.entity.ai.village.poi.PoiType getJobPoiType() -> b
    57:57:com.google.common.collect.ImmutableSet getRequestedItems() -> c
    61:61:com.google.common.collect.ImmutableSet getSecondaryPoi() -> d
    66:66:net.minecraft.sounds.SoundEvent getWorkSound() -> e
    71:71:java.lang.String toString() -> toString
    75:75:net.minecraft.world.entity.npc.VillagerProfession register(java.lang.String,net.minecraft.world.entity.ai.village.poi.PoiType,net.minecraft.sounds.SoundEvent) -> a
    79:79:net.minecraft.world.entity.npc.VillagerProfession register(java.lang.String,net.minecraft.world.entity.ai.village.poi.PoiType,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet,net.minecraft.sounds.SoundEvent) -> a
    17:31:void <clinit>() -> <clinit>
net.minecraft.world.entity.npc.VillagerTrades -> aya:
    java.util.Map TRADES -> a
    it.unimi.dsi.fastutil.ints.Int2ObjectMap WANDERING_TRADER_TRADES -> b
    49:49:void <init>() -> <init>
    598:598:it.unimi.dsi.fastutil.ints.Int2ObjectMap toIntMap(com.google.common.collect.ImmutableMap) -> a
    67:524:void lambda$static$0(java.util.HashMap) -> a
    66:587:void <clinit>() -> <clinit>
net.minecraft.world.entity.npc.VillagerTrades$DyedArmorForEmeralds -> aya$a:
    net.minecraft.world.item.Item item -> a
    int value -> b
    int maxUses -> c
    int villagerXp -> d
    786:787:void <init>(net.minecraft.world.item.Item,int) -> <init>
    789:794:void <init>(net.minecraft.world.item.Item,int,int,int) -> <init>
    798:816:net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
    820:820:net.minecraft.world.item.DyeItem getRandomDye(java.util.Random) -> a
net.minecraft.world.entity.npc.VillagerTrades$EmeraldForItems -> aya$b:
    net.minecraft.world.item.Item item -> a
    int cost -> b
    int maxUses -> c
    int villagerXp -> d
    float priceMultiplier -> e
    613:619:void <init>(net.minecraft.world.level.ItemLike,int,int,int) -> <init>
    623:624:net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
net.minecraft.world.entity.npc.VillagerTrades$EmeraldsForVillagerTypeItem -> aya$c:
    java.util.Map trades -> a
    int cost -> b
    int maxUses -> c
    int villagerXp -> d
    634:643:void <init>(int,int,int,java.util.Map) -> <init>
    648:652:net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
    636:636:void lambda$new$1(net.minecraft.world.entity.npc.VillagerType) -> a
    635:635:boolean lambda$new$0(java.util.Map,net.minecraft.world.entity.npc.VillagerType) -> a
net.minecraft.world.entity.npc.VillagerTrades$EnchantBookForEmeralds -> aya$d:
    int villagerXp -> a
    827:829:void <init>(int) -> <init>
    833:844:net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
net.minecraft.world.entity.npc.VillagerTrades$EnchantedItemForEmeralds -> aya$e:
    net.minecraft.world.item.ItemStack itemStack -> a
    int baseEmeraldCost -> b
    int maxUses -> c
    int villagerXp -> d
    float priceMultiplier -> e
    725:726:void <init>(net.minecraft.world.item.Item,int,int,int) -> <init>
    728:734:void <init>(net.minecraft.world.item.Item,int,int,int,float) -> <init>
    738:743:net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
net.minecraft.world.entity.npc.VillagerTrades$ItemListing -> aya$f:
    net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
net.minecraft.world.entity.npc.VillagerTrades$ItemsAndEmeraldsToItems -> aya$g:
    net.minecraft.world.item.ItemStack fromItem -> a
    int fromCount -> b
    int emeraldCost -> c
    net.minecraft.world.item.ItemStack toItem -> d
    int toCount -> e
    int maxUses -> f
    int villagerXp -> g
    float priceMultiplier -> h
    895:896:void <init>(net.minecraft.world.level.ItemLike,int,net.minecraft.world.item.Item,int,int,int) -> <init>
    898:907:void <init>(net.minecraft.world.level.ItemLike,int,int,net.minecraft.world.item.Item,int,int,int) -> <init>
    912:912:net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
net.minecraft.world.entity.npc.VillagerTrades$ItemsForEmeralds -> aya$h:
    net.minecraft.world.item.ItemStack itemStack -> a
    int emeraldCost -> b
    int numberOfItems -> c
    int maxUses -> d
    int villagerXp -> e
    float priceMultiplier -> f
    665:666:void <init>(net.minecraft.world.level.block.Block,int,int,int,int) -> <init>
    669:670:void <init>(net.minecraft.world.item.Item,int,int,int) -> <init>
    673:674:void <init>(net.minecraft.world.item.Item,int,int,int,int) -> <init>
    677:678:void <init>(net.minecraft.world.item.ItemStack,int,int,int,int) -> <init>
    680:687:void <init>(net.minecraft.world.item.ItemStack,int,int,int,int,float) -> <init>
    691:691:net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
net.minecraft.world.entity.npc.VillagerTrades$SuspisciousStewForEmerald -> aya$i:
    net.minecraft.world.effect.MobEffect effect -> a
    int duration -> b
    int xp -> c
    float priceMultiplier -> d
    701:706:void <init>(net.minecraft.world.effect.MobEffect,int,int) -> <init>
    711:713:net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
net.minecraft.world.entity.npc.VillagerTrades$TippedArrowForItemsAndEmeralds -> aya$j:
    net.minecraft.world.item.ItemStack toItem -> a
    int toCount -> b
    int emeraldCost -> c
    int maxUses -> d
    int villagerXp -> e
    net.minecraft.world.item.Item fromItem -> f
    int fromCount -> g
    float priceMultiplier -> h
    757:766:void <init>(net.minecraft.world.item.Item,int,net.minecraft.world.item.Item,int,int,int,int) -> <init>
    770:775:net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
    771:771:boolean lambda$getOffer$0(net.minecraft.world.item.alchemy.Potion) -> a
net.minecraft.world.entity.npc.VillagerTrades$TreasureMapForEmeralds -> aya$k:
    int emeraldCost -> a
    java.lang.String destination -> b
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type destinationType -> c
    int maxUses -> d
    int villagerXp -> e
    855:861:void <init>(int,java.lang.String,net.minecraft.world.level.saveddata.maps.MapDecoration$Type,int,int) -> <init>
    867:880:net.minecraft.world.item.trading.MerchantOffer getOffer(net.minecraft.world.entity.Entity,java.util.Random) -> a
net.minecraft.world.entity.npc.VillagerType -> ayb:
    net.minecraft.world.entity.npc.VillagerType DESERT -> a
    net.minecraft.world.entity.npc.VillagerType JUNGLE -> b
    net.minecraft.world.entity.npc.VillagerType PLAINS -> c
    net.minecraft.world.entity.npc.VillagerType SAVANNA -> d
    net.minecraft.world.entity.npc.VillagerType SNOW -> e
    net.minecraft.world.entity.npc.VillagerType SWAMP -> f
    net.minecraft.world.entity.npc.VillagerType TAIGA -> g
    java.util.Map BY_BIOME -> h
    22:22:net.minecraft.world.entity.npc.VillagerType register(java.lang.String) -> a
    85:85:net.minecraft.world.entity.npc.VillagerType byBiome(net.minecraft.world.level.biome.Biome) -> a
    33:82:void lambda$static$0(java.util.HashMap) -> a
    13:30:void <clinit>() -> <clinit>
net.minecraft.world.entity.npc.VillagerType$1 -> ayb$1:
    java.lang.String val$name -> i
    22:22:void <init>(java.lang.String) -> <init>
    25:25:java.lang.String toString() -> toString
net.minecraft.world.entity.npc.WanderingTrader -> ayc:
    net.minecraft.core.BlockPos wanderTarget -> bx
    int despawnDelay -> by
    55:57:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    61:78:void registerGoals() -> n
    83:83:net.minecraft.world.entity.AgableMob getBreedOffspring(net.minecraft.world.entity.AgableMob) -> a
    88:88:boolean showProgressBar() -> ev
    94:119:boolean mobInteract(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    124:140:void updateTrades() -> eC
    144:150:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    154:163:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    167:167:boolean removeWhenFarAway(double) -> h
    172:176:void rewardTradeXp(net.minecraft.world.item.trading.MerchantOffer) -> b
    180:183:net.minecraft.sounds.SoundEvent getAmbientSound() -> G
    188:188:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    193:193:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    198:202:net.minecraft.sounds.SoundEvent getDrinkingSound(net.minecraft.world.item.ItemStack) -> c
    208:208:net.minecraft.sounds.SoundEvent getTradeUpdatedSound(boolean) -> r
    213:213:net.minecraft.sounds.SoundEvent getNotifyTradeSound() -> ew
    217:218:void setDespawnDelay(int) -> u
    221:221:int getDespawnDelay() -> eA
    226:231:void aiStep() -> k
    234:237:void maybeDespawn() -> eE
    240:241:void setWanderTarget(net.minecraft.core.BlockPos) -> g
    245:245:net.minecraft.core.BlockPos getWanderTarget() -> eF
    63:63:boolean lambda$registerGoals$1(net.minecraft.world.entity.npc.WanderingTrader) -> f
    62:62:boolean lambda$registerGoals$0(net.minecraft.world.entity.npc.WanderingTrader) -> g
    47:47:net.minecraft.world.entity.ai.navigation.PathNavigation access$000(net.minecraft.world.entity.npc.WanderingTrader) -> a
    47:47:net.minecraft.core.BlockPos access$100(net.minecraft.world.entity.npc.WanderingTrader) -> b
    47:47:net.minecraft.world.entity.ai.navigation.PathNavigation access$200(net.minecraft.world.entity.npc.WanderingTrader) -> c
    47:47:net.minecraft.world.entity.ai.navigation.PathNavigation access$300(net.minecraft.world.entity.npc.WanderingTrader) -> d
    47:47:net.minecraft.world.entity.ai.navigation.PathNavigation access$400(net.minecraft.world.entity.npc.WanderingTrader) -> e
net.minecraft.world.entity.npc.WanderingTrader$WanderToPositionGoal -> ayc$a:
    net.minecraft.world.entity.npc.WanderingTrader trader -> a
    double stopDistance -> b
    double speedModifier -> c
    net.minecraft.world.entity.npc.WanderingTrader this$0 -> d
    253:258:void <init>(net.minecraft.world.entity.npc.WanderingTrader,net.minecraft.world.entity.npc.WanderingTrader,double,double) -> <init>
    262:264:void stop() -> d
    268:269:boolean canUse() -> a
    274:285:void tick() -> e
    288:288:boolean isTooFarAway(net.minecraft.core.BlockPos,double) -> a
net.minecraft.world.entity.npc.WanderingTraderSpawner -> ayd:
    java.util.Random random -> a
    net.minecraft.server.level.ServerLevel level -> b
    int tickDelay -> c
    int spawnDelay -> d
    int spawnChance -> e
    35:54:void <init>(net.minecraft.server.level.ServerLevel) -> <init>
    57:90:void tick() -> a
    93:130:boolean spawn() -> b
    134:145:void tryToSpawnLlamaFor(net.minecraft.world.entity.npc.WanderingTrader,int) -> a
    149:162:net.minecraft.core.BlockPos findSpawnPositionNear(net.minecraft.core.BlockPos,int) -> a
    166:171:boolean hasEnoughSpace(net.minecraft.core.BlockPos) -> a
    106:106:boolean lambda$spawn$0(net.minecraft.core.BlockPos) -> b
net.minecraft.world.entity.npc.package-info -> aye:
net.minecraft.world.entity.package-info -> ayf:
net.minecraft.world.entity.player.Abilities -> ayg:
    boolean invulnerable -> a
    boolean flying -> b
    boolean mayfly -> c
    boolean instabuild -> d
    boolean mayBuild -> e
    float flyingSpeed -> f
    float walkingSpeed -> g
    6:13:void <init>() -> <init>
    16:26:void addSaveData(net.minecraft.nbt.CompoundTag) -> a
    29:45:void loadSaveData(net.minecraft.nbt.CompoundTag) -> b
    48:48:float getFlyingSpeed() -> a
    52:53:void setFlyingSpeed(float) -> a
    56:56:float getWalkingSpeed() -> b
    60:61:void setWalkingSpeed(float) -> b
net.minecraft.world.entity.player.ChatVisiblity -> ayh:
    net.minecraft.world.entity.player.ChatVisiblity FULL -> a
    net.minecraft.world.entity.player.ChatVisiblity SYSTEM -> b
    net.minecraft.world.entity.player.ChatVisiblity HIDDEN -> c
    net.minecraft.world.entity.player.ChatVisiblity[] BY_ID -> d
    int id -> e
    java.lang.String key -> f
    net.minecraft.world.entity.player.ChatVisiblity[] $VALUES -> g
    8:8:net.minecraft.world.entity.player.ChatVisiblity[] values() -> values
    8:8:net.minecraft.world.entity.player.ChatVisiblity valueOf(java.lang.String) -> valueOf
    17:20:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    23:23:int getId() -> a
    27:27:java.lang.String getKey() -> b
    31:31:net.minecraft.world.entity.player.ChatVisiblity byId(int) -> a
    13:13:net.minecraft.world.entity.player.ChatVisiblity[] lambda$static$0(int) -> b
    8:13:void <clinit>() -> <clinit>
net.minecraft.world.entity.player.Inventory -> ayi:
    net.minecraft.core.NonNullList items -> a
    net.minecraft.core.NonNullList armor -> b
    net.minecraft.core.NonNullList offhand -> c
    java.util.List compartments -> f
    int selected -> d
    net.minecraft.world.entity.player.Player player -> e
    net.minecraft.world.item.ItemStack carried -> g
    int timesChanged -> h
    36:49:void <init>(net.minecraft.world.entity.player.Player) -> <init>
    54:57:net.minecraft.world.item.ItemStack getSelected() -> f
    61:61:int getSelectionSize() -> g
    65:69:boolean hasRemainingSpaceForItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    74:74:boolean isSameItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    78:83:int getFreeSlot() -> h
    87:108:void setPickedItem(net.minecraft.world.item.ItemStack) -> a
    111:117:void pickSlot(int) -> c
    120:120:boolean isHotbarSlot(int) -> d
    124:129:int findSlotMatchingItem(net.minecraft.world.item.ItemStack) -> b
    133:144:int findSlotMatchingUnusedItem(net.minecraft.world.item.ItemStack) -> c
    149:166:int getSuitableHotbarSlot() -> i
    170:185:void swapPaint(double) -> a
    188:224:int clearInventory(java.util.function.Predicate,int) -> a
    228:235:int addResource(net.minecraft.world.item.ItemStack) -> i
    239:267:int addResource(int,net.minecraft.world.item.ItemStack) -> d
    271:282:int getSlotWithRemainingSpace(net.minecraft.world.item.ItemStack) -> d
    286:293:void tick() -> j
    296:296:boolean add(net.minecraft.world.item.ItemStack) -> e
    300:345:boolean add(int,net.minecraft.world.item.ItemStack) -> c
    350:371:void placeItemBackInInventory(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack) -> a
    375:389:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    398:406:void removeItem(net.minecraft.world.item.ItemStack) -> f
    410:425:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    430:444:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    447:447:float getDestroySpeed(net.minecraft.world.level.block.state.BlockState) -> a
    452:476:net.minecraft.nbt.ListTag save(net.minecraft.nbt.ListTag) -> a
    480:497:void load(net.minecraft.nbt.ListTag) -> b
    501:501:int getContainerSize() -> O_
    506:521:boolean isEmpty() -> c
    526:537:net.minecraft.world.item.ItemStack getItem(int) -> a
    542:542:net.minecraft.network.chat.Component getName() -> M
    546:546:boolean canDestroy(net.minecraft.world.level.block.state.BlockState) -> b
    550:550:net.minecraft.world.item.ItemStack getArmor(int) -> e
    554:569:void hurtArmor(float) -> a
    572:581:void dropAll() -> k
    585:586:void setChanged() -> e
    589:589:int getTimesChanged() -> l
    593:594:void setCarried(net.minecraft.world.item.ItemStack) -> g
    597:597:net.minecraft.world.item.ItemStack getCarried() -> m
    602:608:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    612:619:boolean contains(net.minecraft.world.item.ItemStack) -> h
    623:630:boolean contains(net.minecraft.tags.Tag) -> a
    634:638:void replaceWith(net.minecraft.world.entity.player.Inventory) -> a
    642:645:void clearContent() -> N_
    648:651:void fillStackedContents(net.minecraft.world.entity.player.StackedContents) -> a
    566:566:void lambda$hurtArmor$1(int,net.minecraft.world.entity.player.Player) -> a
    343:343:java.lang.String lambda$add$0(net.minecraft.world.item.ItemStack) -> j
net.minecraft.world.entity.player.Player -> ayj:
    net.minecraft.world.entity.EntityDimensions STANDING_DIMENSIONS -> bp
    java.util.Map POSES -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_PLAYER_ABSORPTION_ID -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_SCORE_ID -> d
    net.minecraft.network.syncher.EntityDataAccessor DATA_PLAYER_MODE_CUSTOMISATION -> bq
    net.minecraft.network.syncher.EntityDataAccessor DATA_PLAYER_MAIN_HAND -> br
    net.minecraft.network.syncher.EntityDataAccessor DATA_SHOULDER_LEFT -> bs
    net.minecraft.network.syncher.EntityDataAccessor DATA_SHOULDER_RIGHT -> bt
    long timeEntitySatOnShoulder -> e
    net.minecraft.world.entity.player.Inventory inventory -> bu
    net.minecraft.world.inventory.PlayerEnderChestContainer enderChestInventory -> bv
    net.minecraft.world.inventory.InventoryMenu inventoryMenu -> bw
    net.minecraft.world.inventory.AbstractContainerMenu containerMenu -> bx
    net.minecraft.world.food.FoodData foodData -> by
    int jumpTriggerTime -> bz
    float oBob -> bA
    float bob -> bB
    int takeXpDelay -> bC
    double xCloakO -> bD
    double yCloakO -> bE
    double zCloakO -> bF
    double xCloak -> bG
    double yCloak -> bH
    double zCloak -> bI
    int sleepCounter -> f
    boolean wasUnderwater -> bJ
    net.minecraft.core.BlockPos respawnPosition -> g
    boolean respawnForced -> bR
    net.minecraft.world.entity.player.Abilities abilities -> bK
    int experienceLevel -> bL
    int totalExperience -> bM
    float experienceProgress -> bN
    int enchantmentSeed -> bO
    float defaultFlySpeed -> bP
    int lastLevelUpTime -> bS
    com.mojang.authlib.GameProfile gameProfile -> bT
    boolean reducedDebugInfo -> bU
    net.minecraft.world.item.ItemStack lastItemInMainHand -> bV
    net.minecraft.world.item.ItemCooldowns cooldowns -> bW
    net.minecraft.world.entity.fishing.FishingHook fishing -> bQ
    154:212:void <init>(net.minecraft.world.level.Level,com.mojang.authlib.GameProfile) -> <init>
    215:225:boolean blockActionRestricted(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.GameType) -> a
    230:236:void registerAttributes() -> cA
    240:248:void defineSynchedData() -> w_
    252:330:void tick() -> h
    338:338:boolean isSecondaryUseActive() -> dT
    342:342:boolean wantsToStopRiding() -> dU
    350:350:boolean isStayingOnGroundSurface() -> dV
    354:355:boolean updateIsUnderwater() -> dW
    359:363:void turtleHelmetTick() -> l
    366:366:net.minecraft.world.item.ItemCooldowns createItemCooldowns() -> g
    370:407:void moveCloak() -> n
    410:444:void updatePlayerPose() -> dX
    448:448:int getPortalWaitTime() -> ab
    453:453:net.minecraft.sounds.SoundEvent getSwimSound() -> am
    458:458:net.minecraft.sounds.SoundEvent getSwimSplashSound() -> an
    463:463:net.minecraft.sounds.SoundEvent getSwimHighSpeedSplashSound() -> ao
    468:468:int getDimensionChangingDelay() -> ba
    474:475:void playSound(net.minecraft.sounds.SoundEvent,float,float) -> a
    478:478:void playNotifySound(net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,float,float) -> a
    482:482:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    487:487:int getFireImmuneTicks() -> cm
    492:503:void handleEntityEvent(byte) -> a
    506:512:void addParticlesAroundSelf(net.minecraft.core.particles.ParticleOptions) -> a
    515:516:void closeContainer() -> v_
    520:543:void rideTick() -> aQ
    547:551:void resetPos() -> W
    555:559:void serverAiStep() -> du
    563:627:void aiStep() -> k
    630:634:void playShoulderEntityAmbientSound(net.minecraft.nbt.CompoundTag) -> j
    637:638:void touch(net.minecraft.world.entity.Entity) -> c
    641:641:int getScore() -> dY
    645:646:void setScore(int) -> s
    649:651:void increaseScore(int) -> t
    655:677:void die(net.minecraft.world.damagesource.DamageSource) -> a
    681:686:void dropEquipment() -> cU
    689:695:void destroyVanishingCursedItems() -> dZ
    699:708:net.minecraft.sounds.SoundEvent getHurtSound(net.minecraft.world.damagesource.DamageSource) -> e
    713:713:net.minecraft.sounds.SoundEvent getDeathSound() -> cX
    717:717:boolean drop(boolean) -> n
    722:722:net.minecraft.world.entity.item.ItemEntity drop(net.minecraft.world.item.ItemStack,boolean) -> a
    727:763:net.minecraft.world.entity.item.ItemEntity drop(net.minecraft.world.item.ItemStack,boolean,boolean) -> a
    767:809:float getDestroySpeed(net.minecraft.world.level.block.state.BlockState) -> b
    813:813:boolean canDestroy(net.minecraft.world.level.block.state.BlockState) -> c
    818:853:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    857:885:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    889:900:boolean isInvulnerableTo(net.minecraft.world.damagesource.DamageSource) -> b
    905:935:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    940:945:void blockUsingShield(net.minecraft.world.entity.LivingEntity) -> d
    948:957:boolean canHarmPlayer(net.minecraft.world.entity.player.Player) -> a
    962:963:void hurtArmor(float) -> m
    967:982:void hurtCurrentlyUsedShield(float) -> n
    986:1012:void actuallyHurt(net.minecraft.world.damagesource.DamageSource,float) -> d
    1015:1015:void openTextEdit(net.minecraft.world.level.block.entity.SignBlockEntity) -> a
    1018:1018:void openMinecartCommandBlock(net.minecraft.world.level.BaseCommandBlock) -> a
    1021:1021:void openCommandBlock(net.minecraft.world.level.block.entity.CommandBlockEntity) -> a
    1024:1024:void openStructureBlock(net.minecraft.world.level.block.entity.StructureBlockEntity) -> a
    1027:1027:void openJigsawBlock(net.minecraft.world.level.block.entity.JigsawBlockEntity) -> a
    1030:1030:void openHorseInventory(net.minecraft.world.entity.animal.horse.AbstractHorse,net.minecraft.world.Container) -> a
    1033:1033:java.util.OptionalInt openMenu(net.minecraft.world.MenuProvider) -> a
    1037:1037:void sendMerchantOffers(int,net.minecraft.world.item.trading.MerchantOffers,int,int,boolean,boolean) -> a
    1046:1046:void openItemGui(net.minecraft.world.item.ItemStack,net.minecraft.world.InteractionHand) -> a
    1049:1079:net.minecraft.world.InteractionResult interactOn(net.minecraft.world.entity.Entity,net.minecraft.world.InteractionHand) -> a
    1084:1084:double getRidingHeight() -> aR
    1089:1093:void stopRiding() -> j
    1097:1097:boolean isImmobile() -> do
    1106:1155:net.minecraft.world.phys.Vec3 maybeBackOffFromEdge(net.minecraft.world.phys.Vec3,net.minecraft.world.entity.MoverType) -> a
    1159:1338:void attack(net.minecraft.world.entity.Entity) -> f
    1342:1343:void doAutoAttackOnTouch(net.minecraft.world.entity.LivingEntity) -> g
    1346:1357:void disableShield(boolean) -> o
    1360:1360:void crit(net.minecraft.world.entity.Entity) -> a
    1363:1363:void magicCrit(net.minecraft.world.entity.Entity) -> b
    1367:1372:void sweepAttack() -> ea
    1375:1375:void respawn() -> eb
    1379:1384:void remove() -> X
    1387:1387:boolean isLocalPlayer() -> ec
    1391:1391:com.mojang.authlib.GameProfile getGameProfile() -> ed
    1420:1464:com.mojang.datafixers.util.Either startSleepInBed(net.minecraft.core.BlockPos) -> a
    1469:1472:void startSleeping(net.minecraft.core.BlockPos) -> e
    1475:1475:boolean bedInRange(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    1479:1480:boolean isReachableBedBlock(net.minecraft.core.BlockPos) -> g
    1484:1485:boolean bedBlocked(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    1496:1503:void stopSleepInBed(boolean,boolean) -> a
    1507:1508:void stopSleeping() -> dR
    1512:1529:java.util.Optional checkBedValidRespawnPosition(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,boolean) -> a
    1533:1533:boolean isSleepingLongEnough() -> ee
    1537:1537:int getSleepTimer() -> ef
    1549:1549:void displayClientMessage(net.minecraft.network.chat.Component,boolean) -> a
    1552:1552:net.minecraft.core.BlockPos getRespawnPosition() -> eg
    1556:1556:boolean isRespawnForced() -> eh
    1560:1570:void setRespawnPosition(net.minecraft.core.BlockPos,boolean,boolean) -> a
    1573:1574:void awardStat(net.minecraft.resources.ResourceLocation) -> a
    1577:1578:void awardStat(net.minecraft.resources.ResourceLocation,int) -> a
    1581:1582:void awardStat(net.minecraft.stats.Stat) -> b
    1585:1585:void awardStat(net.minecraft.stats.Stat,int) -> a
    1588:1588:void resetStat(net.minecraft.stats.Stat) -> a
    1591:1591:int awardRecipes(java.util.Collection) -> a
    1595:1595:void awardRecipesByKey(net.minecraft.resources.ResourceLocation[]) -> a
    1598:1598:int resetRecipes(java.util.Collection) -> b
    1603:1611:void jumpFromGround() -> dq
    1615:1647:void travel(net.minecraft.world.phys.Vec3) -> e
    1651:1656:void updateSwimming() -> aB
    1659:1659:boolean freeAt(net.minecraft.core.BlockPos) -> f
    1664:1664:float getSpeed() -> dt
    1668:1717:void checkMovementStatistics(double,double,double) -> o
    1720:1734:void checkRidingStatistiscs(double,double,double) -> p
    1739:1746:boolean causeFallDamage(float,float) -> b
    1750:1757:boolean tryToStartFallFlying() -> ei
    1761:1762:void startFallFlying() -> ej
    1766:1768:void stopFallFlying() -> ek
    1772:1775:void doWaterSplashEffect() -> aD
    1779:1782:net.minecraft.sounds.SoundEvent getFallDamageSound(int) -> o
    1788:1789:void killed(net.minecraft.world.entity.LivingEntity) -> b
    1793:1796:void makeStuckInBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.Vec3) -> a
    1799:1817:void giveExperiencePoints(int) -> d
    1820:1820:int getEnchantmentSeed() -> el
    1824:1831:void onEnchantmentPerformed(net.minecraft.world.item.ItemStack,int) -> a
    1834:1846:void giveExperienceLevels(int) -> c
    1849:1855:int getXpNeededForNextLevel() -> em
    1867:1874:void causeFoodExhaustion(float) -> r
    1877:1877:net.minecraft.world.food.FoodData getFoodData() -> en
    1881:1881:boolean canEat(boolean) -> p
    1885:1885:boolean isHurt() -> eo
    1889:1889:boolean mayBuild() -> ep
    1894:1900:boolean mayUseItemAt(net.minecraft.core.BlockPos,net.minecraft.core.Direction,net.minecraft.world.item.ItemStack) -> a
    1905:1913:int getExperienceReward(net.minecraft.world.entity.player.Player) -> d
    1919:1919:boolean isAlwaysExperienceDropper() -> cF
    1924:1924:boolean shouldShowName() -> bP
    1931:1931:boolean isMovementNoisy() -> at
    1935:1935:void onUpdateAbilities() -> r
    1938:1938:void setGameMode(net.minecraft.world.level.GameType) -> a
    1942:1942:net.minecraft.network.chat.Component getName() -> M
    1946:1946:net.minecraft.world.inventory.PlayerEnderChestContainer getEnderChestInventory() -> eq
    1951:1958:net.minecraft.world.item.ItemStack getItemBySlot(net.minecraft.world.entity.EquipmentSlot) -> b
    1963:1973:void setItemSlot(net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.ItemStack) -> a
    1976:1977:boolean addItem(net.minecraft.world.item.ItemStack) -> g
    1982:1982:java.lang.Iterable getHandSlots() -> bc
    1987:1987:java.lang.Iterable getArmorSlots() -> bd
    1991:2006:boolean setEntityOnShoulder(net.minecraft.nbt.CompoundTag) -> g
    2010:2016:void removeEntitiesOnShoulder() -> er
    2019:2030:void respawnEntityOnShoulder(net.minecraft.nbt.CompoundTag) -> k
    boolean isSpectator() -> t
    2037:2037:boolean isSwimming() -> bq
    boolean isCreative() -> u
    2044:2044:boolean isPushedByWater() -> bM
    2048:2048:net.minecraft.world.scores.Scoreboard getScoreboard() -> es
    2053:2054:net.minecraft.network.chat.Component getDisplayName() -> d
    2058:2058:net.minecraft.network.chat.Component getDisplayNameWithUuid() -> et
    2062:2064:net.minecraft.network.chat.Component decorateDisplayNameComponent(net.minecraft.network.chat.Component) -> c
    2073:2073:java.lang.String getScoreboardName() -> bL
    2078:2087:float getStandingEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> b
    2093:2097:void setAbsorptionAmount(float) -> q
    2101:2101:float getAbsorptionAmount() -> dy
    2105:2109:java.util.UUID createPlayerUUID(com.mojang.authlib.GameProfile) -> a
    2113:2113:java.util.UUID createPlayerUUID(java.lang.String) -> c
    2117:2117:boolean isModelPartShown(net.minecraft.world.entity.player.PlayerModelPart) -> a
    2122:2166:boolean setSlot(int,net.minecraft.world.item.ItemStack) -> a_
    2170:2170:boolean isReducedDebugInfo() -> eu
    2174:2175:void setReducedDebugInfo(boolean) -> q
    2179:2179:net.minecraft.world.entity.HumanoidArm getMainArm() -> dA
    2183:2184:void setMainArm(net.minecraft.world.entity.HumanoidArm) -> a
    2187:2187:net.minecraft.nbt.CompoundTag getShoulderEntityLeft() -> ev
    2191:2192:void setShoulderEntityLeft(net.minecraft.nbt.CompoundTag) -> h
    2195:2195:net.minecraft.nbt.CompoundTag getShoulderEntityRight() -> ew
    2199:2200:void setShoulderEntityRight(net.minecraft.nbt.CompoundTag) -> i
    2203:2203:float getCurrentItemAttackStrengthDelay() -> ex
    2207:2207:float getAttackStrengthScale(float) -> s
    2211:2212:void resetAttackStrengthTicker() -> ey
    2215:2215:net.minecraft.world.item.ItemCooldowns getCooldowns() -> ez
    2220:2220:float getBlockSpeedFactor() -> ai
    2224:2224:float getLuck() -> eA
    2228:2228:boolean canUseGameMasterBlocks() -> eB
    2233:2234:boolean canTakeItem(net.minecraft.world.item.ItemStack) -> e
    2239:2239:net.minecraft.world.entity.EntityDimensions getDimensions(net.minecraft.world.entity.Pose) -> a
    2244:2261:net.minecraft.world.item.ItemStack getProjectile(net.minecraft.world.item.ItemStack) -> f
    2266:2273:net.minecraft.world.item.ItemStack eat(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack) -> a
    2064:2067:void lambda$decorateDisplayNameComponent$5(java.lang.String,net.minecraft.network.chat.Style) -> a
    2021:2028:void lambda$respawnEntityOnShoulder$4(net.minecraft.world.entity.Entity) -> d
    1449:1449:boolean lambda$startSleepInBed$3(net.minecraft.world.entity.monster.Monster) -> a
    970:970:void lambda$hurtCurrentlyUsedShield$2(net.minecraft.world.InteractionHand,net.minecraft.world.entity.player.Player) -> a
    632:632:void lambda$playShoulderEntityAmbientSound$1(net.minecraft.world.entity.EntityType) -> b
    632:632:boolean lambda$playShoulderEntityAmbientSound$0(net.minecraft.world.entity.EntityType) -> c
    132:151:void <clinit>() -> <clinit>
net.minecraft.world.entity.player.Player$1 -> ayj$1:
    int[] $SwitchMap$net$minecraft$world$entity$Pose -> a
    2078:2078:void <clinit>() -> <clinit>
net.minecraft.world.entity.player.Player$BedSleepingProblem -> ayj$a:
    net.minecraft.world.entity.player.Player$BedSleepingProblem NOT_POSSIBLE_HERE -> a
    net.minecraft.world.entity.player.Player$BedSleepingProblem NOT_POSSIBLE_NOW -> b
    net.minecraft.world.entity.player.Player$BedSleepingProblem TOO_FAR_AWAY -> c
    net.minecraft.world.entity.player.Player$BedSleepingProblem OBSTRUCTED -> d
    net.minecraft.world.entity.player.Player$BedSleepingProblem OTHER_PROBLEM -> e
    net.minecraft.world.entity.player.Player$BedSleepingProblem NOT_SAFE -> f
    net.minecraft.network.chat.Component message -> g
    net.minecraft.world.entity.player.Player$BedSleepingProblem[] $VALUES -> h
    1394:1394:net.minecraft.world.entity.player.Player$BedSleepingProblem[] values() -> values
    1394:1394:net.minecraft.world.entity.player.Player$BedSleepingProblem valueOf(java.lang.String) -> valueOf
    1405:1407:void <init>(java.lang.String,int) -> <init>
    1409:1411:void <init>(java.lang.String,int,net.minecraft.network.chat.Component) -> <init>
    1415:1415:net.minecraft.network.chat.Component getMessage() -> a
    1394:1400:void <clinit>() -> <clinit>
net.minecraft.world.entity.player.PlayerModelPart -> ayk:
    net.minecraft.world.entity.player.PlayerModelPart CAPE -> a
    net.minecraft.world.entity.player.PlayerModelPart JACKET -> b
    net.minecraft.world.entity.player.PlayerModelPart LEFT_SLEEVE -> c
    net.minecraft.world.entity.player.PlayerModelPart RIGHT_SLEEVE -> d
    net.minecraft.world.entity.player.PlayerModelPart LEFT_PANTS_LEG -> e
    net.minecraft.world.entity.player.PlayerModelPart RIGHT_PANTS_LEG -> f
    net.minecraft.world.entity.player.PlayerModelPart HAT -> g
    int bit -> h
    int mask -> i
    java.lang.String id -> j
    net.minecraft.network.chat.Component name -> k
    net.minecraft.world.entity.player.PlayerModelPart[] $VALUES -> l
    6:6:net.minecraft.world.entity.player.PlayerModelPart[] values() -> values
    6:6:net.minecraft.world.entity.player.PlayerModelPart valueOf(java.lang.String) -> valueOf
    21:26:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    29:29:int getMask() -> a
    33:33:int getBit() -> b
    37:37:java.lang.String getId() -> c
    41:41:net.minecraft.network.chat.Component getName() -> d
    6:13:void <clinit>() -> <clinit>
net.minecraft.world.entity.player.StackedContents -> ayl:
    it.unimi.dsi.fastutil.ints.Int2IntMap contents -> a
    21:23:void <init>() -> <init>
    26:29:void accountSimpleStack(net.minecraft.world.item.ItemStack) -> a
    32:33:void accountStack(net.minecraft.world.item.ItemStack) -> b
    36:41:void accountStack(net.minecraft.world.item.ItemStack,int) -> a
    44:44:int getStackingIndex(net.minecraft.world.item.ItemStack) -> c
    48:48:boolean has(int) -> b
    52:58:int take(int,int) -> a
    62:63:void put(int,int) -> b
    66:66:boolean canCraft(net.minecraft.world.item.crafting.Recipe,it.unimi.dsi.fastutil.ints.IntList) -> a
    70:70:boolean canCraft(net.minecraft.world.item.crafting.Recipe,it.unimi.dsi.fastutil.ints.IntList,int) -> a
    74:74:int getBiggestCraftableStack(net.minecraft.world.item.crafting.Recipe,it.unimi.dsi.fastutil.ints.IntList) -> b
    78:78:int getBiggestCraftableStack(net.minecraft.world.item.crafting.Recipe,int,it.unimi.dsi.fastutil.ints.IntList) -> a
    82:85:net.minecraft.world.item.ItemStack fromStackingIndex(int) -> a
    89:90:void clear() -> a
    21:21:int access$000(net.minecraft.world.entity.player.StackedContents,int,int) -> a
    21:21:void access$100(net.minecraft.world.entity.player.StackedContents,int,int) -> b
    21:21:boolean access$200(net.minecraft.world.entity.player.StackedContents,int) -> a
net.minecraft.world.entity.player.StackedContents$RecipePicker -> ayl$a:
    net.minecraft.world.item.crafting.Recipe recipe -> b
    java.util.List ingredients -> c
    int ingredientCount -> d
    int[] items -> e
    int itemCount -> f
    java.util.BitSet data -> g
    it.unimi.dsi.fastutil.ints.IntList path -> h
    net.minecraft.world.entity.player.StackedContents this$0 -> a
    94:120:void <init>(net.minecraft.world.entity.player.StackedContents,net.minecraft.world.item.crafting.Recipe) -> <init>
    123:173:boolean tryPick(int,it.unimi.dsi.fastutil.ints.IntList) -> a
    177:188:int[] getUniqueAvailableIngredientItems() -> a
    192:225:boolean dfs(int) -> a
    229:229:boolean isSatisfied(int) -> b
    233:234:void setSatisfied(int) -> c
    237:237:int getSatisfiedIndex(int) -> d
    241:241:boolean hasConnection(boolean,int,int) -> a
    245:245:boolean hasResidual(boolean,int,int) -> b
    249:250:void toggleResidual(boolean,int,int) -> c
    253:254:int getIndex(boolean,int,int) -> d
    258:260:void visit(boolean,int) -> a
    263:263:boolean hasVisited(boolean,int) -> b
    267:267:int getVisitedIndex(boolean,int) -> c
    271:292:int tryPickAll(int,it.unimi.dsi.fastutil.ints.IntList) -> b
    296:306:int getMinIngredientCount() -> b
net.minecraft.world.entity.player.package-info -> aym:
net.minecraft.world.entity.projectile.AbstractArrow -> ayn:
    net.minecraft.network.syncher.EntityDataAccessor ID_FLAGS -> ao
    net.minecraft.network.syncher.EntityDataAccessor DATA_OWNERUUID_ID -> b
    net.minecraft.network.syncher.EntityDataAccessor PIERCE_LEVEL -> ap
    net.minecraft.world.level.block.state.BlockState lastState -> aq
    boolean inGround -> c
    int inGroundTime -> d
    net.minecraft.world.entity.projectile.AbstractArrow$Pickup pickup -> e
    int shakeTime -> f
    java.util.UUID ownerUUID -> g
    int life -> ar
    int flightTime -> as
    double baseDamage -> at
    int knockback -> au
    net.minecraft.sounds.SoundEvent soundEvent -> av
    it.unimi.dsi.fastutil.ints.IntOpenHashSet piercingIgnoreEntityIds -> aw
    java.util.List piercedAndKilledEntities -> ax
    79:95:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    98:101:void <init>(net.minecraft.world.entity.EntityType,double,double,double,net.minecraft.world.level.Level) -> <init>
    104:111:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.entity.LivingEntity,net.minecraft.world.level.Level) -> <init>
    114:114:boolean isInGround() -> f
    118:119:void setSoundEvent(net.minecraft.sounds.SoundEvent) -> a
    123:128:boolean shouldRenderAtSqrDistance(double) -> a
    133:136:void defineSynchedData() -> w_
    140:150:void shootFromRotation(net.minecraft.world.entity.Entity,float,float,float,float,float) -> a
    154:169:void shoot(double,double,double,float,float) -> c
    173:175:void lerpTo(double,double,double,float,float,int,boolean) -> a
    179:189:void lerpMotion(double,double,double) -> j
    193:349:void tick() -> h
    352:356:void tickDespawn() -> i
    359:384:void onHit(net.minecraft.world.phys.HitResult) -> a
    387:393:void resetPiercedEntities() -> w
    396:506:void onHitEntity(net.minecraft.world.phys.EntityHitResult) -> a
    509:509:net.minecraft.sounds.SoundEvent getDefaultHitGroundSoundEvent() -> k
    513:513:net.minecraft.sounds.SoundEvent getHitGroundSoundEvent() -> l
    517:517:void doPostHurtEffects(net.minecraft.world.entity.LivingEntity) -> a
    521:521:net.minecraft.world.phys.EntityHitResult findHitEntity(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3) -> a
    526:543:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    547:574:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    577:582:void setOwner(net.minecraft.world.entity.Entity) -> a
    586:590:net.minecraft.world.entity.Entity getOwner() -> m
    595:611:void playerTouch(net.minecraft.world.entity.player.Player) -> b
    net.minecraft.world.item.ItemStack getPickupItem() -> n
    617:617:boolean isMovementNoisy() -> at
    621:622:void setBaseDamage(double) -> h
    625:625:double getBaseDamage() -> o
    629:630:void setKnockback(int) -> a
    633:633:int getKnockback() -> p
    638:638:boolean isAttackable() -> bA
    643:643:float getEyeHeight(net.minecraft.world.entity.Pose,net.minecraft.world.entity.EntityDimensions) -> a
    647:648:void setCritArrow(boolean) -> a
    651:652:void setPierceLevel(byte) -> b
    655:661:void setFlag(int,boolean) -> a
    664:665:boolean isCritArrow() -> q
    669:670:boolean shotFromCrossbow() -> r
    674:674:byte getPierceLevel() -> s
    678:691:void setEnchantmentEffectsFromEntity(net.minecraft.world.entity.LivingEntity,float) -> a
    694:694:float getWaterInertia() -> u
    698:700:void setNoPhysics(boolean) -> n
    703:706:boolean isNoPhysics() -> v
    710:711:void setShotFromCrossbow(boolean) -> o
    715:716:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    521:521:boolean lambda$findHitEntity$0(net.minecraft.world.entity.Entity) -> b
    68:70:void <clinit>() -> <clinit>
net.minecraft.world.entity.projectile.AbstractArrow$Pickup -> ayn$a:
    net.minecraft.world.entity.projectile.AbstractArrow$Pickup DISALLOWED -> a
    net.minecraft.world.entity.projectile.AbstractArrow$Pickup ALLOWED -> b
    net.minecraft.world.entity.projectile.AbstractArrow$Pickup CREATIVE_ONLY -> c
    net.minecraft.world.entity.projectile.AbstractArrow$Pickup[] $VALUES -> d
    56:56:net.minecraft.world.entity.projectile.AbstractArrow$Pickup[] values() -> values
    56:56:net.minecraft.world.entity.projectile.AbstractArrow$Pickup valueOf(java.lang.String) -> valueOf
    56:56:void <init>(java.lang.String,int) -> <init>
    60:64:net.minecraft.world.entity.projectile.AbstractArrow$Pickup byOrdinal(int) -> a
    56:57:void <clinit>() -> <clinit>
net.minecraft.world.entity.projectile.AbstractHurtingProjectile -> ayo:
    net.minecraft.world.entity.LivingEntity owner -> b
    int life -> f
    int flightTime -> g
    double xPower -> c
    double yPower -> d
    double zPower -> e
    32:33:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    36:45:void <init>(net.minecraft.world.entity.EntityType,double,double,double,double,double,double,net.minecraft.world.level.Level) -> <init>
    48:63:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.entity.LivingEntity,double,double,double,net.minecraft.world.level.Level) -> <init>
    67:67:void defineSynchedData() -> w_
    71:76:boolean shouldRenderAtSqrDistance(double) -> a
    81:119:void tick() -> h
    122:122:boolean shouldBurn() -> M_
    126:126:net.minecraft.core.particles.ParticleOptions getTrailParticle() -> i
    130:130:float getInertia() -> k
    134:140:void onHit(net.minecraft.world.phys.HitResult) -> a
    144:148:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    152:175:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    179:179:boolean isPickable() -> aK
    184:184:float getPickRadius() -> aV
    189:206:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    211:211:float getBrightness() -> aI
    216:217:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
net.minecraft.world.entity.projectile.Arrow -> ayp:
    net.minecraft.network.syncher.EntityDataAccessor ID_EFFECT_COLOR -> ao
    net.minecraft.world.item.alchemy.Potion potion -> ap
    java.util.Set effects -> aq
    boolean fixedColor -> ar
    34:40:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    34:44:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    34:48:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> <init>
    51:71:void setEffectsFromItem(net.minecraft.world.item.ItemStack) -> b
    74:78:int getCustomColor(net.minecraft.world.item.ItemStack) -> c
    82:88:void updateColor() -> z
    91:93:void addEffect(net.minecraft.world.effect.MobEffectInstance) -> a
    97:99:void defineSynchedData() -> w_
    103:123:void tick() -> h
    126:138:void makeParticle(int) -> b
    141:141:int getColor() -> w
    145:147:void setFixedColor(int) -> c
    151:166:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    170:184:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    188:198:void doPostHurtEffects(net.minecraft.world.entity.LivingEntity) -> a
    202:211:net.minecraft.world.item.ItemStack getPickupItem() -> n
    217:231:void handleEntityEvent(byte) -> a
    30:30:void <clinit>() -> <clinit>
net.minecraft.world.entity.projectile.DragonFireball -> ayq:
    24:25:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    28:29:void <init>(net.minecraft.world.level.Level,double,double,double,double,double,double) -> <init>
    32:33:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,double,double,double) -> <init>
    37:67:void onHit(net.minecraft.world.phys.HitResult) -> a
    71:71:boolean isPickable() -> aK
    76:76:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    81:81:net.minecraft.core.particles.ParticleOptions getTrailParticle() -> i
    86:86:boolean shouldBurn() -> M_
net.minecraft.world.entity.projectile.EvokerFangs -> ayr:
    int warmupDelayTicks -> b
    boolean sentSpikeEvent -> c
    int lifeTicks -> d
    boolean clientSideAttackStarted -> e
    net.minecraft.world.entity.LivingEntity owner -> f
    java.util.UUID ownerUUID -> g
    29:37:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    40:45:void <init>(net.minecraft.world.level.Level,double,double,double,float,int,net.minecraft.world.entity.LivingEntity) -> <init>
    49:49:void defineSynchedData() -> w_
    52:54:void setOwner(net.minecraft.world.entity.LivingEntity) -> a
    58:65:net.minecraft.world.entity.LivingEntity getOwner() -> f
    70:74:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    78:83:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    87:122:void tick() -> h
    125:137:void dealDamageTo(net.minecraft.world.entity.LivingEntity) -> c
    141:149:void handleEntityEvent(byte) -> a
    152:159:float getAnimationProgress(float) -> a
    164:164:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
net.minecraft.world.entity.projectile.EyeOfEnder -> ays:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ITEM_STACK -> b
    double tx -> c
    double ty -> d
    double tz -> e
    int life -> f
    boolean surviveAfterDeath -> g
    34:35:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    38:42:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    45:48:void setItem(net.minecraft.world.item.ItemStack) -> b
    51:51:net.minecraft.world.item.ItemStack getItemRaw() -> i
    56:57:net.minecraft.world.item.ItemStack getItem() -> f
    62:63:void defineSynchedData() -> w_
    67:72:boolean shouldRenderAtSqrDistance(double) -> a
    76:96:void signalTo(net.minecraft.core.BlockPos) -> a
    100:108:void lerpMotion(double,double,double) -> j
    112:181:void tick() -> h
    185:189:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    193:195:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    199:199:float getBrightness() -> aI
    204:204:boolean isAttackable() -> bA
    209:209:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    46:46:void lambda$setItem$0(net.minecraft.world.item.ItemStack) -> c
    25:25:void <clinit>() -> <clinit>
net.minecraft.world.entity.projectile.Fireball -> ayt:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ITEM_STACK -> f
    18:19:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    22:23:void <init>(net.minecraft.world.entity.EntityType,double,double,double,double,double,double,net.minecraft.world.level.Level) -> <init>
    26:27:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.entity.LivingEntity,double,double,double,net.minecraft.world.level.Level) -> <init>
    30:33:void setItem(net.minecraft.world.item.ItemStack) -> b
    36:36:net.minecraft.world.item.ItemStack getItemRaw() -> l
    41:42:net.minecraft.world.item.ItemStack getItem() -> f
    47:48:void defineSynchedData() -> w_
    52:57:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    61:64:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    31:31:void lambda$setItem$0(net.minecraft.world.item.ItemStack) -> c
    15:15:void <clinit>() -> <clinit>
net.minecraft.world.entity.projectile.FireworkRocketEntity -> ayu:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_FIREWORKS_ITEM -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_ATTACHED_TO_TARGET -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_SHOT_AT_ANGLE -> d
    int life -> e
    int lifetime -> f
    net.minecraft.world.entity.LivingEntity attachedToEntity -> g
    45:46:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    50:53:void defineSynchedData() -> w_
    57:57:boolean shouldRenderAtSqrDistance(double) -> a
    62:62:boolean shouldRender(double,double,double) -> i
    66:84:void <init>(net.minecraft.world.level.Level,double,double,double,net.minecraft.world.item.ItemStack) -> <init>
    87:90:void <init>(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.LivingEntity) -> <init>
    93:95:void <init>(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,double,double,double,boolean) -> <init>
    99:107:void lerpMotion(double,double,double) -> j
    111:187:void tick() -> h
    190:193:void explode() -> k
    196:210:void performHitChecks(net.minecraft.world.phys.HitResult) -> a
    213:216:boolean hasExplosion() -> l
    221:259:void dealExplosionDamage() -> m
    262:262:boolean isAttachedToEntity() -> n
    266:266:boolean isShotAtAngle() -> i
    271:285:void handleEntityEvent(byte) -> a
    289:296:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    300:311:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    315:316:net.minecraft.world.item.ItemStack getItem() -> f
    321:321:boolean isAttackable() -> bA
    326:326:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    331:346:void shoot(double,double,double,float,float) -> c
    350:369:void shootFromRotation(net.minecraft.world.entity.Entity,float,float,float,float,float) -> a
    148:148:boolean lambda$tick$1(net.minecraft.world.entity.Entity) -> a
    116:120:void lambda$tick$0(int) -> a
    36:38:void <clinit>() -> <clinit>
net.minecraft.world.entity.projectile.ItemSupplier -> ayv:
    net.minecraft.world.item.ItemStack getItem() -> f
net.minecraft.world.entity.projectile.LargeFireball -> ayw:
    int explosionPower -> f
    16:20:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    16:24:void <init>(net.minecraft.world.level.Level,double,double,double,double,double,double) -> <init>
    16:28:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,double,double,double) -> <init>
    32:43:void onHit(net.minecraft.world.phys.HitResult) -> a
    47:49:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    53:57:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
net.minecraft.world.entity.projectile.LlamaSpit -> ayx:
    net.minecraft.world.entity.animal.horse.Llama owner -> b
    net.minecraft.nbt.CompoundTag ownerTag -> c
    28:29:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    32:35:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.animal.horse.Llama) -> <init>
    38:47:void <init>(net.minecraft.world.level.Level,double,double,double,double,double,double) -> <init>
    51:108:void tick() -> h
    112:121:void lerpMotion(double,double,double) -> j
    125:138:void shoot(double,double,double,float,float) -> c
    143:143:void shootFromRotation(net.minecraft.world.entity.Entity,float,float,float,float,float) -> a
    146:155:void onHit(net.minecraft.world.phys.HitResult) -> a
    159:159:void defineSynchedData() -> w_
    163:166:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    170:176:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    180:194:void restoreOwnerFromSave() -> f
    198:198:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    58:58:boolean lambda$tick$0(net.minecraft.world.entity.Entity) -> a
net.minecraft.world.entity.projectile.Projectile -> ayy:
    void shoot(double,double,double,float,float) -> c
    void shootFromRotation(net.minecraft.world.entity.Entity,float,float,float,float,float) -> a
net.minecraft.world.entity.projectile.ProjectileUtil -> ayz:
    27:27:void <init>() -> <init>
    32:32:net.minecraft.world.phys.HitResult forwardsRaycast(net.minecraft.world.entity.Entity,boolean,boolean,net.minecraft.world.entity.Entity,net.minecraft.world.level.ClipContext$Block) -> a
    36:36:net.minecraft.world.phys.HitResult getHitResult(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.function.Predicate,net.minecraft.world.level.ClipContext$Block,boolean) -> a
    41:41:net.minecraft.world.phys.EntityHitResult getHitResult(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.AABB,java.util.function.Predicate) -> a
    45:68:net.minecraft.world.phys.HitResult forwardsRaycast(net.minecraft.world.entity.Entity,boolean,boolean,net.minecraft.world.entity.Entity,net.minecraft.world.level.ClipContext$Block,boolean,java.util.function.Predicate,net.minecraft.world.phys.AABB) -> a
    73:110:net.minecraft.world.phys.EntityHitResult getEntityHitResult(net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.AABB,java.util.function.Predicate,double) -> a
    115:133:net.minecraft.world.phys.EntityHitResult getHitResult(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.AABB,java.util.function.Predicate,double) -> a
    137:138:java.util.Set getIgnoredEntities(net.minecraft.world.entity.Entity) -> a
    148:170:void rotateTowardsMovement(net.minecraft.world.entity.Entity,float) -> a
    173:173:net.minecraft.world.InteractionHand getWeaponHoldingHand(net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.Item) -> a
    177:187:net.minecraft.world.entity.projectile.AbstractArrow getMobArrow(net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack,float) -> a
    32:32:boolean lambda$forwardsRaycast$0(boolean,net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> a
net.minecraft.world.entity.projectile.ShulkerBullet -> aza:
    net.minecraft.world.entity.LivingEntity owner -> b
    net.minecraft.world.entity.Entity finalTarget -> c
    net.minecraft.core.Direction currentMoveDirection -> d
    int flightSteps -> e
    double targetDeltaX -> f
    double targetDeltaY -> g
    double targetDeltaZ -> ao
    java.util.UUID ownerId -> ap
    net.minecraft.core.BlockPos lastKnownOwnerPos -> aq
    java.util.UUID targetId -> ar
    net.minecraft.core.BlockPos lastKnownTargetPos -> as
    57:60:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    63:68:void <init>(net.minecraft.world.level.Level,double,double,double,double,double,double) -> <init>
    71:85:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.Entity,net.minecraft.core.Direction$Axis) -> <init>
    89:89:net.minecraft.sounds.SoundSource getSoundSource() -> cl
    94:119:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    123:140:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    144:144:void defineSynchedData() -> w_
    148:148:net.minecraft.core.Direction getMoveDirection() -> f
    152:153:void setMoveDirection(net.minecraft.core.Direction) -> a
    157:231:void selectNextMoveDirection(net.minecraft.core.Direction$Axis) -> a
    235:238:void checkDespawn() -> cy
    242:323:void tick() -> h
    327:327:boolean isOnFire() -> bf
    332:332:boolean shouldRenderAtSqrDistance(double) -> a
    337:337:float getBrightness() -> aI
    341:355:void onHit(net.minecraft.world.phys.HitResult) -> a
    359:359:boolean isPickable() -> aK
    364:369:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    374:374:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
net.minecraft.world.entity.projectile.SmallFireball -> azb:
    18:19:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    22:23:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,double,double,double) -> <init>
    26:27:void <init>(net.minecraft.world.level.Level,double,double,double,double,double,double) -> <init>
    31:58:void onHit(net.minecraft.world.phys.HitResult) -> a
    62:62:boolean isPickable() -> aK
    67:67:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
net.minecraft.world.entity.projectile.Snowball -> azc:
    21:22:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    25:26:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> <init>
    29:30:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    34:34:net.minecraft.world.item.Item getDefaultItem() -> i
    38:39:net.minecraft.core.particles.ParticleOptions getParticle() -> n
    44:50:void handleEntityEvent(byte) -> a
    54:64:void onHit(net.minecraft.world.phys.HitResult) -> a
net.minecraft.world.entity.projectile.SpectralArrow -> azd:
    int duration -> ao
    15:19:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    15:23:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> <init>
    15:27:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    31:36:void tick() -> h
    40:40:net.minecraft.world.item.ItemStack getPickupItem() -> n
    45:49:void doPostHurtEffects(net.minecraft.world.entity.LivingEntity) -> a
    53:57:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    61:63:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
net.minecraft.world.entity.projectile.ThrowableItemProjectile -> aze:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ITEM_STACK -> e
    18:19:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    22:23:void <init>(net.minecraft.world.entity.EntityType,double,double,double,net.minecraft.world.level.Level) -> <init>
    26:27:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.entity.LivingEntity,net.minecraft.world.level.Level) -> <init>
    30:33:void setItem(net.minecraft.world.item.ItemStack) -> b
    net.minecraft.world.item.Item getDefaultItem() -> i
    38:38:net.minecraft.world.item.ItemStack getItemRaw() -> k
    43:44:net.minecraft.world.item.ItemStack getItem() -> f
    49:50:void defineSynchedData() -> w_
    54:59:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    63:66:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    31:31:void lambda$setItem$0(net.minecraft.world.item.ItemStack) -> c
    15:15:void <clinit>() -> <clinit>
net.minecraft.world.entity.projectile.ThrowableProjectile -> azf:
    int xBlock -> e
    int yBlock -> f
    int zBlock -> g
    boolean inGround -> b
    int shakeTime -> c
    net.minecraft.world.entity.LivingEntity owner -> d
    java.util.UUID ownerId -> ao
    net.minecraft.world.entity.Entity entityToIgnore -> ap
    int timeToIgnore -> aq
    26:38:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    41:44:void <init>(net.minecraft.world.entity.EntityType,double,double,double,net.minecraft.world.level.Level) -> <init>
    47:51:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.entity.LivingEntity,net.minecraft.world.level.Level) -> <init>
    55:60:boolean shouldRenderAtSqrDistance(double) -> a
    65:76:void shootFromRotation(net.minecraft.world.entity.Entity,float,float,float,float,float) -> a
    80:94:void shoot(double,double,double,float,float) -> c
    98:107:void lerpMotion(double,double,double) -> j
    111:202:void tick() -> h
    205:205:float getGravity() -> l
    void onHit(net.minecraft.world.phys.HitResult) -> a
    212:222:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    226:235:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    239:247:net.minecraft.world.entity.LivingEntity getOwner() -> m
    252:252:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    141:141:boolean lambda$tick$1(net.minecraft.world.entity.Entity) -> a
    129:129:boolean lambda$tick$0(net.minecraft.world.entity.Entity) -> b
net.minecraft.world.entity.projectile.ThrownEgg -> azg:
    18:19:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    22:23:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> <init>
    26:27:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    31:37:void handleEntityEvent(byte) -> a
    41:63:void onHit(net.minecraft.world.phys.HitResult) -> a
    67:67:net.minecraft.world.item.Item getDefaultItem() -> i
net.minecraft.world.entity.projectile.ThrownEnderpearl -> azh:
    net.minecraft.world.entity.LivingEntity originalOwner -> e
    30:31:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    34:36:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> <init>
    39:40:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    44:44:net.minecraft.world.item.Item getDefaultItem() -> i
    49:107:void onHit(net.minecraft.world.phys.HitResult) -> a
    111:117:void tick() -> h
    122:125:net.minecraft.world.entity.Entity changeDimension(net.minecraft.world.level.dimension.DimensionType) -> a
net.minecraft.world.entity.projectile.ThrownExperienceBottle -> azi:
    17:18:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    21:22:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> <init>
    25:26:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    30:30:net.minecraft.world.item.Item getDefaultItem() -> i
    35:35:float getGravity() -> l
    40:52:void onHit(net.minecraft.world.phys.HitResult) -> a
net.minecraft.world.entity.projectile.ThrownPotion -> azj:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ITEM_STACK -> f
    org.apache.logging.log4j.Logger LOGGER -> g
    java.util.function.Predicate WATER_SENSITIVE -> e
    50:51:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    54:55:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> <init>
    58:59:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    63:64:void defineSynchedData() -> w_
    68:77:net.minecraft.world.item.ItemStack getItem() -> f
    81:82:void setItem(net.minecraft.world.item.ItemStack) -> b
    86:86:float getGravity() -> l
    91:124:void onHit(net.minecraft.world.phys.HitResult) -> a
    127:137:void applyWater() -> i
    140:169:void applySplash(java.util.List,net.minecraft.world.entity.Entity) -> a
    172:189:void makeAreaOfEffectCloud(net.minecraft.world.item.ItemStack,net.minecraft.world.item.alchemy.Potion) -> a
    192:192:boolean isLingering() -> k
    196:204:void dowseFire(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    208:216:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    220:225:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    228:228:boolean isWaterSensitiveEntity(net.minecraft.world.entity.LivingEntity) -> a
    45:47:void <clinit>() -> <clinit>
net.minecraft.world.entity.projectile.ThrownTrident -> azk:
    net.minecraft.network.syncher.EntityDataAccessor ID_LOYALTY -> ap
    net.minecraft.network.syncher.EntityDataAccessor ID_FOIL -> aq
    net.minecraft.world.item.ItemStack tridentItem -> ar
    boolean dealtDamage -> as
    int clientSideReturnTridentTickCount -> ao
    33:40:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    33:47:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> <init>
    33:51:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    55:59:void defineSynchedData() -> w_
    63:94:void tick() -> h
    97:104:boolean isAcceptibleReturnOwner() -> z
    109:109:net.minecraft.world.item.ItemStack getPickupItem() -> n
    113:113:boolean isFoil() -> w
    119:122:net.minecraft.world.phys.EntityHitResult findHitEntity(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3) -> a
    127:169:void onHitEntity(net.minecraft.world.phys.EntityHitResult) -> a
    173:173:net.minecraft.sounds.SoundEvent getDefaultHitGroundSoundEvent() -> k
    178:184:void playerTouch(net.minecraft.world.entity.player.Player) -> b
    188:196:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    200:204:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    208:213:void tickDespawn() -> i
    217:217:float getWaterInertia() -> u
    222:222:boolean shouldRender(double,double,double) -> i
    30:31:void <clinit>() -> <clinit>
net.minecraft.world.entity.projectile.WitherSkull -> azl:
    net.minecraft.network.syncher.EntityDataAccessor DATA_DANGEROUS -> f
    29:30:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    33:34:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,double,double,double) -> <init>
    37:38:void <init>(net.minecraft.world.level.Level,double,double,double,double,double,double) -> <init>
    42:42:float getInertia() -> k
    47:47:boolean isOnFire() -> bf
    52:56:float getBlockExplosionResistance(net.minecraft.world.level.Explosion,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState,float) -> a
    61:92:void onHit(net.minecraft.world.phys.HitResult) -> a
    96:96:boolean isPickable() -> aK
    101:101:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    106:107:void defineSynchedData() -> w_
    110:110:boolean isDangerous() -> l
    114:115:void setDangerous(boolean) -> a
    119:119:boolean shouldBurn() -> M_
    26:26:void <clinit>() -> <clinit>
net.minecraft.world.entity.projectile.package-info -> azm:
net.minecraft.world.entity.raid.Raid -> azn:
    net.minecraft.network.chat.TranslatableComponent RAID_NAME_COMPONENT -> a
    net.minecraft.network.chat.TranslatableComponent VICTORY -> b
    net.minecraft.network.chat.TranslatableComponent DEFEAT -> c
    net.minecraft.network.chat.Component RAID_BAR_VICTORY_COMPONENT -> d
    net.minecraft.network.chat.Component RAID_BAR_DEFEAT_COMPONENT -> e
    java.util.Map groupToLeaderMap -> f
    java.util.Map groupRaiderMap -> g
    java.util.Set heroesOfTheVillage -> h
    long ticksActive -> i
    net.minecraft.core.BlockPos center -> j
    net.minecraft.server.level.ServerLevel level -> k
    boolean started -> l
    int id -> m
    float totalHealth -> n
    int badOmenLevel -> o
    boolean active -> p
    int groupsSpawned -> q
    net.minecraft.server.level.ServerBossEvent raidEvent -> r
    int postRaidTicks -> s
    int raidCooldownTicks -> t
    java.util.Random random -> u
    int numGroups -> v
    net.minecraft.world.entity.raid.Raid$RaidStatus status -> w
    int celebrationTicks -> x
    java.util.Optional waveSpawnPos -> y
    137:169:void <init>(int,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> <init>
    137:195:void <init>(net.minecraft.server.level.ServerLevel,net.minecraft.nbt.CompoundTag) -> <init>
    198:198:boolean isOver() -> a
    202:202:boolean isBetweenWaves() -> b
    206:206:boolean hasFirstWaveSpawned() -> c
    210:210:boolean isStopped() -> d
    214:214:boolean isVictory() -> e
    218:218:boolean isLoss() -> f
    222:222:float getTotalHealth() -> g
    226:230:java.util.Set getAllRaiders() -> h
    234:234:net.minecraft.world.level.Level getLevel() -> i
    238:238:boolean isStarted() -> j
    242:242:int getGroupsSpawned() -> k
    249:249:java.util.function.Predicate validPlayer() -> x
    256:270:void updatePlayers() -> y
    273:273:int getMaxBadOmenLevel() -> l
    277:277:int getBadOmenLevel() -> m
    281:282:void setBadOmenLevel(int) -> a
    285:290:void absorbBadOmen(net.minecraft.world.entity.player.Player) -> a
    293:296:void stop() -> n
    299:467:void tick() -> o
    470:477:void moveRaidCenterToNearbyVillageSection() -> z
    480:486:java.util.Optional getValidSpawnPos(int) -> d
    490:493:boolean hasMoreWaves() -> A
    497:497:boolean isFinalWave() -> B
    501:501:boolean hasBonusWave() -> C
    505:505:boolean hasSpawnedBonusWave() -> D
    509:509:boolean shouldSpawnBonusGroup() -> E
    513:549:void updateRaiders() -> F
    552:568:void playSound(net.minecraft.core.BlockPos) -> a
    571:619:void spawnGroup(net.minecraft.core.BlockPos) -> b
    622:638:void joinRaid(int,net.minecraft.world.entity.raid.Raider,net.minecraft.core.BlockPos,boolean) -> a
    641:642:void updateBossbar() -> p
    645:651:float getHealthOfLivingRaiders() -> q
    655:655:boolean shouldSpawnGroup() -> G
    659:659:int getTotalRaidersAlive() -> r
    663:677:void removeFromRaid(net.minecraft.world.entity.raid.Raider,boolean) -> a
    680:681:void setDirty() -> H
    684:702:net.minecraft.world.item.ItemStack getLeaderBannerInstance() -> s
    707:707:net.minecraft.world.entity.raid.Raider getLeader(int) -> b
    712:749:net.minecraft.core.BlockPos findRandomSpawnPos(int,int) -> a
    753:753:boolean addWaveMob(int,net.minecraft.world.entity.raid.Raider) -> b
    757:781:boolean addWaveMob(int,net.minecraft.world.entity.raid.Raider,boolean) -> a
    785:788:void setLeader(int,net.minecraft.world.entity.raid.Raider) -> a
    791:792:void removeLeader(int) -> c
    795:795:net.minecraft.core.BlockPos getCenter() -> t
    799:800:void setCenter(net.minecraft.core.BlockPos) -> c
    803:803:int getId() -> u
    807:807:int getDefaultNumSpawns(net.minecraft.world.entity.raid.Raid$RaiderType,int,boolean) -> a
    812:842:int getPotentialBonusSpawns(net.minecraft.world.entity.raid.Raid$RaiderType,java.util.Random,int,net.minecraft.world.DifficultyInstance,boolean) -> a
    846:846:boolean isActive() -> v
    850:874:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> a
    878:886:int getNumGroups(net.minecraft.world.Difficulty) -> a
    891:904:float getEnchantOdds() -> w
    908:909:void addHeroOfTheVillage(net.minecraft.world.entity.Entity) -> a
    757:757:java.util.Set lambda$addWaveMob$2(java.lang.Integer) -> a
    475:475:double lambda$moveRaidCenterToNearbyVillageSection$1(net.minecraft.core.BlockPos) -> d
    250:251:boolean lambda$validPlayer$0(net.minecraft.server.level.ServerPlayer) -> a
    125:129:void <clinit>() -> <clinit>
net.minecraft.world.entity.raid.Raid$1 -> azn$1:
    int[] $SwitchMap$net$minecraft$world$entity$raid$Raid$RaiderType -> a
    int[] $SwitchMap$net$minecraft$world$Difficulty -> b
    816:878:void <clinit>() -> <clinit>
net.minecraft.world.entity.raid.Raid$RaidStatus -> azn$a:
    net.minecraft.world.entity.raid.Raid$RaidStatus ONGOING -> a
    net.minecraft.world.entity.raid.Raid$RaidStatus VICTORY -> b
    net.minecraft.world.entity.raid.Raid$RaidStatus LOSS -> c
    net.minecraft.world.entity.raid.Raid$RaidStatus STOPPED -> d
    net.minecraft.world.entity.raid.Raid$RaidStatus[] VALUES -> e
    net.minecraft.world.entity.raid.Raid$RaidStatus[] $VALUES -> f
    63:63:net.minecraft.world.entity.raid.Raid$RaidStatus[] values() -> values
    63:63:net.minecraft.world.entity.raid.Raid$RaidStatus valueOf(java.lang.String) -> valueOf
    63:63:void <init>(java.lang.String,int) -> <init>
    72:77:net.minecraft.world.entity.raid.Raid$RaidStatus getByName(java.lang.String) -> b
    81:81:java.lang.String getName() -> a
    63:63:net.minecraft.world.entity.raid.Raid$RaidStatus access$000(java.lang.String) -> a
    63:69:void <clinit>() -> <clinit>
net.minecraft.world.entity.raid.Raid$RaiderType -> azn$b:
    net.minecraft.world.entity.raid.Raid$RaiderType VINDICATOR -> a
    net.minecraft.world.entity.raid.Raid$RaiderType EVOKER -> b
    net.minecraft.world.entity.raid.Raid$RaiderType PILLAGER -> c
    net.minecraft.world.entity.raid.Raid$RaiderType WITCH -> d
    net.minecraft.world.entity.raid.Raid$RaiderType RAVAGER -> e
    net.minecraft.world.entity.raid.Raid$RaiderType[] VALUES -> f
    net.minecraft.world.entity.EntityType entityType -> g
    int[] spawnsPerWaveBeforeBonus -> h
    net.minecraft.world.entity.raid.Raid$RaiderType[] $VALUES -> i
    85:85:net.minecraft.world.entity.raid.Raid$RaiderType[] values() -> values
    85:85:net.minecraft.world.entity.raid.Raid$RaiderType valueOf(java.lang.String) -> valueOf
    99:102:void <init>(java.lang.String,int,net.minecraft.world.entity.EntityType,int[]) -> <init>
    85:85:net.minecraft.world.entity.raid.Raid$RaiderType[] access$100() -> a
    85:85:net.minecraft.world.entity.EntityType access$200(net.minecraft.world.entity.raid.Raid$RaiderType) -> a
    85:85:int[] access$300(net.minecraft.world.entity.raid.Raid$RaiderType) -> b
    85:94:void <clinit>() -> <clinit>
net.minecraft.world.entity.raid.Raider -> azo:
    net.minecraft.network.syncher.EntityDataAccessor IS_CELEBRATING -> c
    java.util.function.Predicate ALLOWED_ITEMS -> b
    net.minecraft.world.entity.raid.Raid raid -> d
    int wave -> bw
    boolean canJoinRaid -> bx
    int ticksOutsideRaid -> by
    61:62:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    66:71:void registerGoals() -> n
    75:78:void defineSynchedData() -> w_
    void applyRaidBuffs(int,boolean) -> a
    83:83:boolean canJoinRaid() -> eD
    87:88:void setCanJoinRaid(boolean) -> u
    95:115:void aiStep() -> k
    120:121:void updateNoActionTime() -> ew
    125:179:void die(net.minecraft.world.damagesource.DamageSource) -> a
    183:183:boolean canJoinPatrol() -> ex
    187:188:void setCurrentRaid(net.minecraft.world.entity.raid.Raid) -> a
    192:192:net.minecraft.world.entity.raid.Raid getCurrentRaid() -> eE
    196:196:boolean hasActiveRaid() -> eF
    200:201:void setWave(int) -> a
    204:204:int getWave() -> eG
    208:208:boolean isCelebrating() -> eH
    212:213:void setCelebrating(boolean) -> v
    217:223:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    227:243:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    247:266:void pickUpItem(net.minecraft.world.entity.item.ItemEntity) -> a
    270:273:boolean removeWhenFarAway(double) -> h
    278:278:boolean requiresCustomPersistence() -> I
    282:282:int getTicksOutsideRaid() -> eI
    286:287:void setTicksOutsideRaid(int) -> b
    291:294:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    301:303:net.minecraft.world.entity.SpawnGroupData finalizeSpawn(net.minecraft.world.level.LevelAccessor,net.minecraft.world.DifficultyInstance,net.minecraft.world.entity.MobSpawnType,net.minecraft.world.entity.SpawnGroupData,net.minecraft.nbt.CompoundTag) -> a
    net.minecraft.sounds.SoundEvent getCelebrateSound() -> eq
    50:52:boolean lambda$static$0(net.minecraft.world.entity.item.ItemEntity) -> b
    47:47:java.util.function.Predicate access$000() -> eJ
    47:47:java.util.Random access$100(net.minecraft.world.entity.raid.Raider) -> a
    47:47:float access$200(net.minecraft.world.entity.raid.Raider) -> b
    47:47:float access$300(net.minecraft.world.entity.raid.Raider) -> c
    47:47:java.util.Random access$400(net.minecraft.world.entity.raid.Raider) -> d
    47:47:boolean access$500(net.minecraft.world.entity.raid.Raider) -> e
    47:47:java.util.Random access$600(net.minecraft.world.entity.raid.Raider) -> f
    47:47:java.util.Random access$700(net.minecraft.world.entity.raid.Raider) -> g
    48:50:void <clinit>() -> <clinit>
net.minecraft.world.entity.raid.Raider$HoldGroundAttackGoal -> azo$a:
    net.minecraft.world.entity.raid.Raider mob -> c
    float hostileRadiusSqr -> d
    net.minecraft.world.entity.ai.targeting.TargetingConditions shoutTargeting -> a
    net.minecraft.world.entity.raid.Raider this$0 -> b
    388:394:void <init>(net.minecraft.world.entity.raid.Raider,net.minecraft.world.entity.monster.AbstractIllager,float) -> <init>
    399:400:boolean canUse() -> a
    405:412:void start() -> c
    416:427:void stop() -> d
    431:447:void tick() -> e
net.minecraft.world.entity.raid.Raider$ObtainRaidLeaderBannerGoal -> azo$b:
    net.minecraft.world.entity.raid.Raider mob -> b
    net.minecraft.world.entity.raid.Raider this$0 -> a
    311:314:void <init>(net.minecraft.world.entity.raid.Raider,net.minecraft.world.entity.raid.Raider) -> <init>
    318:331:boolean canUse() -> a
    336:342:void tick() -> e
net.minecraft.world.entity.raid.Raider$RaiderCelebration -> azo$c:
    net.minecraft.world.entity.raid.Raider mob -> b
    net.minecraft.world.entity.raid.Raider this$0 -> a
    348:351:void <init>(net.minecraft.world.entity.raid.Raider,net.minecraft.world.entity.raid.Raider) -> <init>
    355:356:boolean canUse() -> a
    361:363:void start() -> c
    367:369:void stop() -> d
    373:382:void tick() -> e
net.minecraft.world.entity.raid.Raider$RaiderMoveThroughVillageGoal -> azo$d:
    net.minecraft.world.entity.raid.Raider raider -> a
    double speedModifier -> b
    net.minecraft.core.BlockPos poiPos -> c
    java.util.List visited -> d
    int distanceToPoi -> e
    boolean stuck -> f
    454:463:void <init>(net.minecraft.world.entity.raid.Raider,double,int) -> <init>
    467:468:boolean canUse() -> a
    472:472:boolean isValidRaid() -> g
    476:485:boolean hasSuitablePoi() -> h
    490:493:boolean canContinueToUse() -> b
    498:501:void stop() -> d
    505:509:void start() -> c
    513:527:void tick() -> e
    530:535:boolean hasNotVisited(net.minecraft.core.BlockPos) -> a
    539:542:void updateVisited() -> j
    478:478:boolean lambda$hasSuitablePoi$0(net.minecraft.world.entity.ai.village.poi.PoiType) -> a
net.minecraft.world.entity.raid.Raids -> azp:
    java.util.Map raidMap -> a
    net.minecraft.server.level.ServerLevel level -> b
    int nextAvailableID -> c
    int tick -> d
    36:48:void <init>(net.minecraft.server.level.ServerLevel) -> <init>
    51:51:net.minecraft.world.entity.raid.Raid get(int) -> a
    55:78:void tick() -> a
    81:84:boolean canJoinRaid(net.minecraft.world.entity.raid.Raider,net.minecraft.world.entity.raid.Raid) -> a
    93:159:net.minecraft.world.entity.raid.Raid createOrExtendRaid(net.minecraft.server.level.ServerPlayer) -> a
    163:164:net.minecraft.world.entity.raid.Raid getOrCreateRaid(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    169:178:void load(net.minecraft.nbt.CompoundTag) -> a
    182:192:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    196:196:java.lang.String getFileId(net.minecraft.world.level.dimension.Dimension) -> a
    200:200:int getUniqueId() -> e
    205:217:net.minecraft.world.entity.raid.Raid getNearbyRaid(net.minecraft.core.BlockPos,int) -> a
net.minecraft.world.entity.raid.package-info -> azq:
net.minecraft.world.entity.schedule.Activity -> azr:
    net.minecraft.world.entity.schedule.Activity CORE -> a
    net.minecraft.world.entity.schedule.Activity IDLE -> b
    net.minecraft.world.entity.schedule.Activity WORK -> c
    net.minecraft.world.entity.schedule.Activity PLAY -> d
    net.minecraft.world.entity.schedule.Activity REST -> e
    net.minecraft.world.entity.schedule.Activity MEET -> f
    net.minecraft.world.entity.schedule.Activity PANIC -> g
    net.minecraft.world.entity.schedule.Activity RAID -> h
    net.minecraft.world.entity.schedule.Activity PRE_RAID -> i
    net.minecraft.world.entity.schedule.Activity HIDE -> j
    java.lang.String name -> k
    19:21:void <init>(java.lang.String) -> <init>
    24:24:java.lang.String getName() -> a
    28:28:net.minecraft.world.entity.schedule.Activity register(java.lang.String) -> a
    33:33:java.lang.String toString() -> toString
    6:15:void <clinit>() -> <clinit>
net.minecraft.world.entity.schedule.Keyframe -> azs:
    int timeStamp -> a
    float value -> b
    7:10:void <init>(int,float) -> <init>
    13:13:int getTimeStamp() -> a
    17:17:float getValue() -> b
net.minecraft.world.entity.schedule.Schedule -> azt:
    net.minecraft.world.entity.schedule.Schedule EMPTY -> a
    net.minecraft.world.entity.schedule.Schedule SIMPLE -> b
    net.minecraft.world.entity.schedule.Schedule VILLAGER_BABY -> c
    net.minecraft.world.entity.schedule.Schedule VILLAGER_DEFAULT -> d
    java.util.Map timelines -> e
    11:36:void <init>() -> <init>
    39:40:net.minecraft.world.entity.schedule.ScheduleBuilder register(java.lang.String) -> a
    44:47:void ensureTimelineExistsFor(net.minecraft.world.entity.schedule.Activity) -> a
    50:50:net.minecraft.world.entity.schedule.Timeline getTimelineFor(net.minecraft.world.entity.schedule.Activity) -> b
    54:58:java.util.List getAllTimelinesExceptFor(net.minecraft.world.entity.schedule.Activity) -> c
    62:66:net.minecraft.world.entity.schedule.Activity getActivityAt(int) -> a
    64:64:double lambda$getActivityAt$1(int,java.util.Map$Entry) -> a
    56:56:boolean lambda$getAllTimelinesExceptFor$0(net.minecraft.world.entity.schedule.Activity,java.util.Map$Entry) -> a
    15:35:void <clinit>() -> <clinit>
net.minecraft.world.entity.schedule.ScheduleBuilder -> azu:
    net.minecraft.world.entity.schedule.Schedule schedule -> a
    java.util.List transitions -> b
    10:14:void <init>(net.minecraft.world.entity.schedule.Schedule) -> <init>
    17:18:net.minecraft.world.entity.schedule.ScheduleBuilder changeActivityAt(int,net.minecraft.world.entity.schedule.Activity) -> a
    22:39:net.minecraft.world.entity.schedule.Schedule build() -> a
    28:37:void lambda$build$1(net.minecraft.world.entity.schedule.ScheduleBuilder$ActivityTransition) -> a
    32:32:void lambda$null$0(net.minecraft.world.entity.schedule.ScheduleBuilder$ActivityTransition,net.minecraft.world.entity.schedule.Timeline) -> a
net.minecraft.world.entity.schedule.ScheduleBuilder$ActivityTransition -> azu$a:
    int time -> a
    net.minecraft.world.entity.schedule.Activity activity -> b
    46:49:void <init>(int,net.minecraft.world.entity.schedule.Activity) -> <init>
    52:52:int getTime() -> a
    56:56:net.minecraft.world.entity.schedule.Activity getActivity() -> b
net.minecraft.world.entity.schedule.Timeline -> azv:
    java.util.List keyframes -> a
    int previousIndex -> b
    11:12:void <init>() -> <init>
    16:16:com.google.common.collect.ImmutableList getKeyframes() -> a
    20:22:net.minecraft.world.entity.schedule.Timeline addKeyframe(int,float) -> a
    26:28:net.minecraft.world.entity.schedule.Timeline addKeyframes(java.util.Collection) -> a
    32:39:void sortAndDeduplicateKeyframes() -> b
    42:62:float getValueAt(int) -> a
    33:33:void lambda$sortAndDeduplicateKeyframes$0(it.unimi.dsi.fastutil.ints.Int2ObjectSortedMap,net.minecraft.world.entity.schedule.Keyframe) -> a
net.minecraft.world.entity.schedule.package-info -> azw:
net.minecraft.world.entity.vehicle.AbstractMinecart -> azx:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_HURT -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_HURTDIR -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_DAMAGE -> d
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_DISPLAY_BLOCK -> e
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_DISPLAY_OFFSET -> f
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_CUSTOM_DISPLAY -> g
    boolean flipped -> ao
    java.util.Map EXITS -> ap
    int lSteps -> aq
    double lx -> ar
    double ly -> as
    double lz -> at
    double lyr -> au
    double lxr -> av
    double lxd -> aw
    double lyd -> ax
    double lzd -> ay
    65:67:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    70:78:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level,double,double,double) -> <init>
    81:94:net.minecraft.world.entity.vehicle.AbstractMinecart createMinecart(net.minecraft.world.level.Level,double,double,double,net.minecraft.world.entity.vehicle.AbstractMinecart$Type) -> a
    100:100:boolean isMovementNoisy() -> at
    105:111:void defineSynchedData() -> w_
    116:119:net.minecraft.world.phys.AABB getCollideAgainstBox(net.minecraft.world.entity.Entity) -> j
    124:124:boolean isPushable() -> aL
    129:129:double getRideHeight() -> aS
    134:155:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    159:168:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    172:175:void animateHurt() -> bb
    179:179:boolean isPickable() -> aK
    206:206:com.mojang.datafixers.util.Pair exits(net.minecraft.world.level.block.state.properties.RailShape) -> a
    211:211:net.minecraft.core.Direction getMotionDirection() -> bR
    216:312:void tick() -> h
    315:315:double getMaxSpeed() -> f
    319:319:void activateMinecart(int,int,int,boolean) -> a
    322:337:void comeOffTrack() -> i
    340:536:void moveAlongTrack(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    539:539:boolean isRedstoneConductor(net.minecraft.core.BlockPos) -> a
    543:545:void applyNaturalSlowdown() -> k
    549:585:net.minecraft.world.phys.Vec3 getPosOffs(double,double,double,double) -> a
    590:638:net.minecraft.world.phys.Vec3 getPos(double,double,double) -> o
    643:647:net.minecraft.world.phys.AABB getBoundingBoxForCulling() -> bU
    652:657:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    661:666:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    670:741:void push(net.minecraft.world.entity.Entity) -> i
    755:764:void lerpTo(double,double,double,float,float,int,boolean) -> a
    768:772:void lerpMotion(double,double,double) -> j
    775:776:void setDamage(float) -> a
    779:779:float getDamage() -> l
    783:784:void setHurtTime(int) -> c
    787:787:int getHurtTime() -> m
    791:792:void setHurtDir(int) -> d
    795:795:int getHurtDir() -> n
    net.minecraft.world.entity.vehicle.AbstractMinecart$Type getMinecartType() -> o
    801:804:net.minecraft.world.level.block.state.BlockState getDisplayBlockState() -> p
    808:808:net.minecraft.world.level.block.state.BlockState getDefaultDisplayBlockState() -> q
    812:815:int getDisplayOffset() -> r
    819:819:int getDefaultDisplayOffset() -> s
    823:825:void setDisplayBlockState(net.minecraft.world.level.block.state.BlockState) -> b
    828:830:void setDisplayOffset(int) -> l
    833:833:boolean hasCustomDisplay() -> u
    837:838:void setCustomDisplay(boolean) -> a
    842:842:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    183:203:void lambda$static$0(java.util.EnumMap) -> a
    55:182:void <clinit>() -> <clinit>
net.minecraft.world.entity.vehicle.AbstractMinecart$1 -> azx$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$RailShape -> a
    360:360:void <clinit>() -> <clinit>
net.minecraft.world.entity.vehicle.AbstractMinecart$Type -> azx$a:
    net.minecraft.world.entity.vehicle.AbstractMinecart$Type RIDEABLE -> a
    net.minecraft.world.entity.vehicle.AbstractMinecart$Type CHEST -> b
    net.minecraft.world.entity.vehicle.AbstractMinecart$Type FURNACE -> c
    net.minecraft.world.entity.vehicle.AbstractMinecart$Type TNT -> d
    net.minecraft.world.entity.vehicle.AbstractMinecart$Type SPAWNER -> e
    net.minecraft.world.entity.vehicle.AbstractMinecart$Type HOPPER -> f
    net.minecraft.world.entity.vehicle.AbstractMinecart$Type COMMAND_BLOCK -> g
    net.minecraft.world.entity.vehicle.AbstractMinecart$Type[] $VALUES -> h
    44:44:net.minecraft.world.entity.vehicle.AbstractMinecart$Type[] values() -> values
    44:44:net.minecraft.world.entity.vehicle.AbstractMinecart$Type valueOf(java.lang.String) -> valueOf
    44:44:void <init>(java.lang.String,int) -> <init>
    44:51:void <clinit>() -> <clinit>
net.minecraft.world.entity.vehicle.AbstractMinecartContainer -> azy:
    net.minecraft.core.NonNullList itemStacks -> b
    boolean dropEquipment -> c
    net.minecraft.resources.ResourceLocation lootTable -> d
    long lootTableSeed -> e
    33:41:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    33:45:void <init>(net.minecraft.world.entity.EntityType,double,double,double,net.minecraft.world.level.Level) -> <init>
    49:54:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    58:63:boolean isEmpty() -> c
    68:69:net.minecraft.world.item.ItemStack getItem(int) -> a
    74:76:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    81:87:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    92:97:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    101:106:boolean setSlot(int,net.minecraft.world.item.ItemStack) -> a_
    111:111:void setChanged() -> e
    115:121:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    127:128:net.minecraft.world.entity.Entity changeDimension(net.minecraft.world.level.dimension.DimensionType) -> a
    133:138:void remove() -> X
    142:143:void setDropContainerContent(boolean) -> b
    147:157:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    161:170:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    174:175:boolean interact(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> b
    180:192:void applyNaturalSlowdown() -> k
    195:208:void unpackLootTable(net.minecraft.world.entity.player.Player) -> d
    212:214:void clearContent() -> N_
    217:219:void setLootTable(net.minecraft.resources.ResourceLocation,long) -> a
    224:228:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> createMenu
    net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
net.minecraft.world.entity.vehicle.Boat -> azz:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_HURT -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_HURTDIR -> c
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_DAMAGE -> d
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_TYPE -> e
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_PADDLE_LEFT -> f
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_PADDLE_RIGHT -> g
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_BUBBLE_TIME -> ao
    float[] paddlePositions -> ap
    float invFriction -> aq
    float outOfControlTicks -> ar
    float deltaRotation -> as
    int lerpSteps -> at
    double lerpX -> au
    double lerpY -> av
    double lerpZ -> aw
    double lerpYRot -> ax
    double lerpXRot -> ay
    boolean inputLeft -> az
    boolean inputRight -> aA
    boolean inputUp -> aB
    boolean inputDown -> aC
    double waterLevel -> aD
    float landFriction -> aE
    net.minecraft.world.entity.vehicle.Boat$Status status -> aF
    net.minecraft.world.entity.vehicle.Boat$Status oldStatus -> aG
    double lastYd -> aH
    boolean isAboveBubbleColumn -> aI
    boolean bubbleColumnDirectionIsDown -> aJ
    float bubbleMultiplier -> aK
    float bubbleAngle -> aL
    float bubbleAngleO -> aM
    63:93:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    96:104:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    108:108:boolean isMovementNoisy() -> at
    113:120:void defineSynchedData() -> w_
    125:128:net.minecraft.world.phys.AABB getCollideAgainstBox(net.minecraft.world.entity.Entity) -> j
    134:134:net.minecraft.world.phys.AABB getCollideBox() -> au
    139:139:boolean isPushable() -> aL
    144:144:double getRideHeight() -> aS
    149:169:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    174:186:void onAboveBubbleCol(boolean) -> j
    190:197:void push(net.minecraft.world.entity.Entity) -> i
    200:213:net.minecraft.world.item.Item getDropItem() -> f
    219:222:void animateHurt() -> bb
    226:226:boolean isPickable() -> aK
    231:237:void lerpTo(double,double,double,float,float,int,boolean) -> a
    241:241:net.minecraft.core.Direction getMotionDirection() -> bR
    246:330:void tick() -> h
    333:371:void tickBubbleColumn() -> q
    375:384:net.minecraft.sounds.SoundEvent getPaddleSound() -> i
    389:409:void tickLerp() -> r
    412:414:void setPaddleState(boolean,boolean) -> a
    417:420:float getRowingTime(int,float) -> a
    432:448:net.minecraft.world.entity.vehicle.Boat$Status getStatus() -> s
    452:481:float getWaterLevelAbove() -> k
    485:537:float getGroundFriction() -> l
    541:571:boolean checkInWater() -> u
    576:607:net.minecraft.world.entity.vehicle.Boat$Status isUnderwater() -> v
    611:659:void floatBoat() -> w
    662:692:void controlBoat() -> z
    696:730:void positionRider(net.minecraft.world.entity.Entity) -> k
    733:740:void clampRotation(net.minecraft.world.entity.Entity) -> a
    744:745:void onPassengerTurned(net.minecraft.world.entity.Entity) -> l
    749:750:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    754:757:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    761:768:boolean interact(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> b
    773:805:void checkFallDamage(double,boolean,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    808:808:boolean getPaddleState(int) -> a
    812:813:void setDamage(float) -> a
    816:816:float getDamage() -> m
    820:821:void setHurtTime(int) -> b
    824:824:int getHurtTime() -> n
    828:829:void setBubbleTime(int) -> d
    832:832:int getBubbleTime() -> A
    836:836:float getBubbleAngle(float) -> b
    840:841:void setHurtDir(int) -> c
    844:844:int getHurtDir() -> o
    848:849:void setType(net.minecraft.world.entity.vehicle.Boat$Type) -> a
    852:852:net.minecraft.world.entity.vehicle.Boat$Type getBoatType() -> p
    857:857:boolean canAddPassenger(net.minecraft.world.entity.Entity) -> q
    863:864:net.minecraft.world.entity.Entity getControllingPassenger() -> cd
    868:872:void setInput(boolean,boolean,boolean,boolean) -> a
    924:924:net.minecraft.network.protocol.Packet getAddEntityPacket() -> L
    49:55:void <clinit>() -> <clinit>
net.minecraft.world.entity.vehicle.Boat$1 -> azz$1:
    int[] $SwitchMap$net$minecraft$world$entity$vehicle$Boat$Type -> a
    int[] $SwitchMap$net$minecraft$world$entity$vehicle$Boat$Status -> b
    200:375:void <clinit>() -> <clinit>
net.minecraft.world.entity.vehicle.Boat$Status -> azz$a:
    net.minecraft.world.entity.vehicle.Boat$Status IN_WATER -> a
    net.minecraft.world.entity.vehicle.Boat$Status UNDER_WATER -> b
    net.minecraft.world.entity.vehicle.Boat$Status UNDER_FLOWING_WATER -> c
    net.minecraft.world.entity.vehicle.Boat$Status ON_LAND -> d
    net.minecraft.world.entity.vehicle.Boat$Status IN_AIR -> e
    net.minecraft.world.entity.vehicle.Boat$Status[] $VALUES -> f
    423:423:net.minecraft.world.entity.vehicle.Boat$Status[] values() -> values
    423:423:net.minecraft.world.entity.vehicle.Boat$Status valueOf(java.lang.String) -> valueOf
    423:423:void <init>(java.lang.String,int) -> <init>
    423:428:void <clinit>() -> <clinit>
net.minecraft.world.entity.vehicle.Boat$Type -> azz$b:
    net.minecraft.world.entity.vehicle.Boat$Type OAK -> a
    net.minecraft.world.entity.vehicle.Boat$Type SPRUCE -> b
    net.minecraft.world.entity.vehicle.Boat$Type BIRCH -> c
    net.minecraft.world.entity.vehicle.Boat$Type JUNGLE -> d
    net.minecraft.world.entity.vehicle.Boat$Type ACACIA -> e
    net.minecraft.world.entity.vehicle.Boat$Type DARK_OAK -> f
    java.lang.String name -> g
    net.minecraft.world.level.block.Block planks -> h
    net.minecraft.world.entity.vehicle.Boat$Type[] $VALUES -> i
    874:874:net.minecraft.world.entity.vehicle.Boat$Type[] values() -> values
    874:874:net.minecraft.world.entity.vehicle.Boat$Type valueOf(java.lang.String) -> valueOf
    885:888:void <init>(java.lang.String,int,net.minecraft.world.level.block.Block,java.lang.String) -> <init>
    891:891:java.lang.String getName() -> a
    895:895:net.minecraft.world.level.block.Block getPlanks() -> b
    900:900:java.lang.String toString() -> toString
    904:908:net.minecraft.world.entity.vehicle.Boat$Type byId(int) -> a
    912:918:net.minecraft.world.entity.vehicle.Boat$Type byName(java.lang.String) -> a
    874:880:void <clinit>() -> <clinit>
net.minecraft.world.entity.vehicle.Minecart -> baa:
    10:11:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    14:15:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    19:30:boolean interact(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> b
    35:46:void activateMinecart(int,int,int,boolean) -> a
    50:50:net.minecraft.world.entity.vehicle.AbstractMinecart$Type getMinecartType() -> o
net.minecraft.world.entity.vehicle.MinecartChest -> bab:
    17:18:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    21:22:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    26:31:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    35:35:int getContainerSize() -> O_
    40:40:net.minecraft.world.entity.vehicle.AbstractMinecart$Type getMinecartType() -> o
    45:45:net.minecraft.world.level.block.state.BlockState getDefaultDisplayBlockState() -> q
    50:50:int getDefaultDisplayOffset() -> s
    55:55:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
net.minecraft.world.entity.vehicle.MinecartCommandBlock -> bac:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_COMMAND_NAME -> b
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_LAST_OUTPUT -> c
    net.minecraft.world.level.BaseCommandBlock commandBlock -> d
    int lastActivated -> e
    27:34:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    27:38:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    42:45:void defineSynchedData() -> w_
    49:53:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    57:59:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    63:63:net.minecraft.world.entity.vehicle.AbstractMinecart$Type getMinecartType() -> o
    68:68:net.minecraft.world.level.block.state.BlockState getDefaultDisplayBlockState() -> q
    72:72:net.minecraft.world.level.BaseCommandBlock getCommandBlock() -> v
    77:83:void activateMinecart(int,int,int,boolean) -> a
    87:88:boolean interact(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> b
    93:103:void onSyncedDataUpdated(net.minecraft.network.syncher.EntityDataAccessor) -> a
    107:107:boolean onlyOpCanSetNbt() -> cb
    23:23:net.minecraft.network.syncher.EntityDataAccessor access$000() -> w
    23:23:net.minecraft.network.syncher.EntityDataAccessor access$100() -> z
    24:25:void <clinit>() -> <clinit>
net.minecraft.world.entity.vehicle.MinecartCommandBlock$MinecartCommandBase -> bac$a:
    net.minecraft.world.entity.vehicle.MinecartCommandBlock this$0 -> b
    110:110:void <init>(net.minecraft.world.entity.vehicle.MinecartCommandBlock) -> <init>
    113:113:net.minecraft.server.level.ServerLevel getLevel() -> d
    118:120:void onUpdated() -> e
    124:125:void writeCoordinates(io.netty.buffer.ByteBuf) -> a
    129:129:net.minecraft.world.phys.Vec3 getPosition() -> f
    133:133:net.minecraft.world.entity.vehicle.MinecartCommandBlock getMinecart() -> g
    138:138:net.minecraft.commands.CommandSourceStack createCommandSourceStack() -> h
net.minecraft.world.entity.vehicle.MinecartFurnace -> bad:
    net.minecraft.network.syncher.EntityDataAccessor DATA_ID_FUEL -> d
    int fuel -> e
    double xPush -> b
    double zPush -> c
    net.minecraft.world.item.crafting.Ingredient INGREDIENT -> f
    36:37:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    40:41:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    45:45:net.minecraft.world.entity.vehicle.AbstractMinecart$Type getMinecartType() -> o
    50:52:void defineSynchedData() -> w_
    56:72:void tick() -> h
    76:76:double getMaxSpeed() -> f
    81:86:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    91:108:void moveAlongTrack(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    112:128:void applyNaturalSlowdown() -> k
    132:145:boolean interact(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> b
    150:154:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    158:162:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    165:165:boolean hasFuel() -> v
    169:170:void setHasFuel(boolean) -> n
    174:174:net.minecraft.world.level.block.state.BlockState getDefaultDisplayBlockState() -> q
    28:33:void <clinit>() -> <clinit>
net.minecraft.world.entity.vehicle.MinecartHopper -> bae:
    boolean enabled -> d
    int cooldownTime -> e
    net.minecraft.core.BlockPos lastPosition -> f
    23:29:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    23:33:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    37:37:net.minecraft.world.entity.vehicle.AbstractMinecart$Type getMinecartType() -> o
    42:42:net.minecraft.world.level.block.state.BlockState getDefaultDisplayBlockState() -> q
    47:47:int getDefaultDisplayOffset() -> s
    52:52:int getContainerSize() -> O_
    57:62:void activateMinecart(int,int,int,boolean) -> a
    65:65:boolean isEnabled() -> v
    69:70:void setEnabled(boolean) -> n
    74:74:net.minecraft.world.level.Level getLevel() -> w
    79:79:double getLevelX() -> z
    84:84:double getLevelY() -> A
    89:89:double getLevelZ() -> B
    94:113:void tick() -> h
    116:126:boolean suckInItems() -> C
    131:136:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    140:143:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    147:150:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    153:154:void setCooldown(int) -> m
    157:157:boolean isOnCooldown() -> D
    162:162:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
net.minecraft.world.entity.vehicle.MinecartSpawner -> baf:
    net.minecraft.world.level.BaseSpawner spawner -> b
    12:31:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    12:35:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    39:39:net.minecraft.world.entity.vehicle.AbstractMinecart$Type getMinecartType() -> o
    44:44:net.minecraft.world.level.block.state.BlockState getDefaultDisplayBlockState() -> q
    49:51:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    55:57:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    61:62:void handleEntityEvent(byte) -> a
    66:68:void tick() -> h
    71:71:net.minecraft.world.level.BaseSpawner getSpawner() -> v
    76:76:boolean onlyOpCanSetNbt() -> cb
net.minecraft.world.entity.vehicle.MinecartSpawner$1 -> baf$1:
    net.minecraft.world.entity.vehicle.MinecartSpawner this$0 -> a
    12:12:void <init>(net.minecraft.world.entity.vehicle.MinecartSpawner) -> <init>
    15:16:void broadcastEvent(int) -> a
    20:20:net.minecraft.world.level.Level getLevel() -> a
    25:25:net.minecraft.core.BlockPos getPos() -> b
net.minecraft.world.entity.vehicle.MinecartTNT -> bag:
    int fuse -> b
    25:29:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    25:33:void <init>(net.minecraft.world.level.Level,double,double,double) -> <init>
    37:37:net.minecraft.world.entity.vehicle.AbstractMinecart$Type getMinecartType() -> o
    42:42:net.minecraft.world.level.block.state.BlockState getDefaultDisplayBlockState() -> q
    47:63:void tick() -> h
    67:74:boolean hurt(net.minecraft.world.damagesource.DamageSource,float) -> a
    79:94:void destroy(net.minecraft.world.damagesource.DamageSource) -> a
    97:105:void explode(double) -> h
    109:114:boolean causeFallDamage(float,float) -> b
    119:122:void activateMinecart(int,int,int,boolean) -> a
    126:131:void handleEntityEvent(byte) -> a
    134:142:void primeFuse() -> v
    145:145:int getFuse() -> w
    149:149:boolean isPrimed() -> z
    154:158:float getBlockExplosionResistance(net.minecraft.world.level.Explosion,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState,float) -> a
    163:167:boolean shouldBlockExplode(net.minecraft.world.level.Explosion,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,float) -> a
    172:176:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    180:182:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
net.minecraft.world.entity.vehicle.package-info -> bah:
net.minecraft.world.food.FoodConstants -> bai:
    3:3:void <init>() -> <init>
net.minecraft.world.food.FoodData -> baj:
    int foodLevel -> a
    float saturationLevel -> b
    float exhaustionLevel -> c
    int tickTimer -> d
    int lastFoodLevel -> e
    20:24:void <init>() -> <init>
    27:29:void eat(int,float) -> a
    32:36:void eat(net.minecraft.world.item.Item,net.minecraft.world.item.ItemStack) -> a
    39:80:void tick(net.minecraft.world.entity.player.Player) -> a
    83:89:void readAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    92:96:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> b
    99:99:int getFoodLevel() -> a
    103:103:int getLastFoodLevel() -> b
    107:107:boolean needsFood() -> c
    111:112:void addExhaustion(float) -> a
    115:115:float getExhaustionLevel() -> d
    119:119:float getSaturationLevel() -> e
    123:124:void setFoodLevel(int) -> a
    127:128:void setSaturation(float) -> b
    131:132:void setExhaustion(float) -> c
net.minecraft.world.food.FoodProperties -> bak:
    int nutrition -> a
    float saturationModifier -> b
    boolean isMeat -> c
    boolean canAlwaysEat -> d
    boolean fastFood -> e
    java.util.List effects -> f
    19:26:void <init>(int,float,boolean,boolean,boolean,java.util.List) -> <init>
    29:29:int getNutrition() -> a
    33:33:float getSaturationModifier() -> b
    37:37:boolean isMeat() -> c
    41:41:boolean canAlwaysEat() -> d
    45:45:boolean isFastFood() -> e
    49:49:java.util.List getEffects() -> f
    9:9:void <init>(int,float,boolean,boolean,boolean,java.util.List,net.minecraft.world.food.FoodProperties$1) -> <init>
net.minecraft.world.food.FoodProperties$1 -> bak$1:
net.minecraft.world.food.FoodProperties$Builder -> bak$a:
    int nutrition -> a
    float saturationModifier -> b
    boolean isMeat -> c
    boolean canAlwaysEat -> d
    boolean fastFood -> e
    java.util.List effects -> f
    52:59:void <init>() -> <init>
    62:63:net.minecraft.world.food.FoodProperties$Builder nutrition(int) -> a
    67:68:net.minecraft.world.food.FoodProperties$Builder saturationMod(float) -> a
    72:73:net.minecraft.world.food.FoodProperties$Builder meat() -> a
    77:78:net.minecraft.world.food.FoodProperties$Builder alwaysEat() -> b
    82:83:net.minecraft.world.food.FoodProperties$Builder fast() -> c
    87:88:net.minecraft.world.food.FoodProperties$Builder effect(net.minecraft.world.effect.MobEffectInstance,float) -> a
    92:92:net.minecraft.world.food.FoodProperties build() -> d
net.minecraft.world.food.Foods -> bal:
    net.minecraft.world.food.FoodProperties APPLE -> a
    net.minecraft.world.food.FoodProperties BAKED_POTATO -> b
    net.minecraft.world.food.FoodProperties BEEF -> c
    net.minecraft.world.food.FoodProperties BEETROOT -> d
    net.minecraft.world.food.FoodProperties BEETROOT_SOUP -> e
    net.minecraft.world.food.FoodProperties BREAD -> f
    net.minecraft.world.food.FoodProperties CARROT -> g
    net.minecraft.world.food.FoodProperties CHICKEN -> h
    net.minecraft.world.food.FoodProperties CHORUS_FRUIT -> i
    net.minecraft.world.food.FoodProperties COD -> j
    net.minecraft.world.food.FoodProperties COOKED_BEEF -> k
    net.minecraft.world.food.FoodProperties COOKED_CHICKEN -> l
    net.minecraft.world.food.FoodProperties COOKED_COD -> m
    net.minecraft.world.food.FoodProperties COOKED_MUTTON -> n
    net.minecraft.world.food.FoodProperties COOKED_PORKCHOP -> o
    net.minecraft.world.food.FoodProperties COOKED_RABBIT -> p
    net.minecraft.world.food.FoodProperties COOKED_SALMON -> q
    net.minecraft.world.food.FoodProperties COOKIE -> r
    net.minecraft.world.food.FoodProperties DRIED_KELP -> s
    net.minecraft.world.food.FoodProperties ENCHANTED_GOLDEN_APPLE -> t
    net.minecraft.world.food.FoodProperties GOLDEN_APPLE -> u
    net.minecraft.world.food.FoodProperties GOLDEN_CARROT -> v
    net.minecraft.world.food.FoodProperties HONEY_BOTTLE -> w
    net.minecraft.world.food.FoodProperties MELON_SLICE -> x
    net.minecraft.world.food.FoodProperties MUSHROOM_STEW -> y
    net.minecraft.world.food.FoodProperties MUTTON -> z
    net.minecraft.world.food.FoodProperties POISONOUS_POTATO -> A
    net.minecraft.world.food.FoodProperties PORKCHOP -> B
    net.minecraft.world.food.FoodProperties POTATO -> C
    net.minecraft.world.food.FoodProperties PUFFERFISH -> D
    net.minecraft.world.food.FoodProperties PUMPKIN_PIE -> E
    net.minecraft.world.food.FoodProperties RABBIT -> F
    net.minecraft.world.food.FoodProperties RABBIT_STEW -> G
    net.minecraft.world.food.FoodProperties ROTTEN_FLESH -> H
    net.minecraft.world.food.FoodProperties SALMON -> I
    net.minecraft.world.food.FoodProperties SPIDER_EYE -> J
    net.minecraft.world.food.FoodProperties SUSPICIOUS_STEW -> K
    net.minecraft.world.food.FoodProperties SWEET_BERRIES -> L
    net.minecraft.world.food.FoodProperties TROPICAL_FISH -> M
    8:8:void <init>() -> <init>
    70:70:net.minecraft.world.food.FoodProperties stew(int) -> a
    9:67:void <clinit>() -> <clinit>
net.minecraft.world.food.package-info -> bam:
net.minecraft.world.inventory.AbstractContainerMenu -> ban:
    net.minecraft.core.NonNullList lastSlots -> c
    java.util.List slots -> a
    java.util.List dataSlots -> d
    net.minecraft.world.inventory.MenuType menuType -> e
    int containerId -> b
    short changeUid -> f
    int quickcraftType -> g
    int quickcraftStatus -> h
    java.util.Set quickcraftSlots -> i
    java.util.List containerListeners -> j
    java.util.Set unSynchedPlayers -> k
    31:487:void <init>(net.minecraft.world.inventory.MenuType,int) -> <init>
    52:57:boolean stillValid(net.minecraft.world.inventory.ContainerLevelAccess,net.minecraft.world.entity.player.Player,net.minecraft.world.level.block.Block) -> a
    61:64:net.minecraft.world.inventory.MenuType getType() -> a
    68:72:void checkContainerSize(net.minecraft.world.Container,int) -> a
    75:79:void checkContainerDataCount(net.minecraft.world.inventory.ContainerData,int) -> a
    82:85:net.minecraft.world.inventory.Slot addSlot(net.minecraft.world.inventory.Slot) -> a
    89:90:net.minecraft.world.inventory.DataSlot addDataSlot(net.minecraft.world.inventory.DataSlot) -> a
    94:97:void addDataSlots(net.minecraft.world.inventory.ContainerData) -> a
    100:107:void addSlotListener(net.minecraft.world.inventory.ContainerListener) -> a
    110:111:void removeSlotListener(net.minecraft.world.inventory.ContainerListener) -> b
    114:118:net.minecraft.core.NonNullList getItems() -> b
    122:142:void broadcastChanges() -> c
    145:145:boolean clickMenuButton(net.minecraft.world.entity.player.Player,int) -> a
    150:156:net.minecraft.world.inventory.Slot getSlotFor(net.minecraft.world.Container,int) -> b
    160:160:net.minecraft.world.inventory.Slot getSlot(int) -> a
    164:168:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    173:423:net.minecraft.world.item.ItemStack clicked(int,int,net.minecraft.world.inventory.ClickType,net.minecraft.world.entity.player.Player) -> a
    427:427:boolean consideredTheSameItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    431:431:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    435:440:void removed(net.minecraft.world.entity.player.Player) -> b
    443:453:void clearContainer(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.world.Container) -> a
    456:457:void slotsChanged(net.minecraft.world.Container) -> a
    460:461:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    464:467:void setAll(java.util.List) -> a
    470:476:void addItem(int,net.minecraft.world.item.ItemStack) -> b
    479:480:void setData(int,int) -> a
    483:484:short backup(net.minecraft.world.entity.player.Inventory) -> a
    490:490:boolean isSynched(net.minecraft.world.entity.player.Player) -> c
    494:499:void setSynched(net.minecraft.world.entity.player.Player,boolean) -> a
    boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    504:569:boolean moveItemStackTo(net.minecraft.world.item.ItemStack,int,int,boolean) -> a
    573:573:int getQuickcraftType(int) -> b
    577:577:int getQuickcraftHeader(int) -> c
    581:581:int getQuickcraftMask(int,int) -> b
    585:594:boolean isValidQuickcraftType(int,net.minecraft.world.entity.player.Player) -> a
    598:600:void resetQuickCraft() -> d
    603:609:boolean canItemQuickReplace(net.minecraft.world.inventory.Slot,net.minecraft.world.item.ItemStack,boolean) -> a
    613:626:void getQuickCraftSlotCount(java.util.Set,int,net.minecraft.world.item.ItemStack,int) -> a
    629:629:boolean canDragTo(net.minecraft.world.inventory.Slot) -> b
    633:637:int getRedstoneSignalFromBlockEntity(net.minecraft.world.level.block.entity.BlockEntity) -> a
    641:657:int getRedstoneSignalFromContainer(net.minecraft.world.Container) -> b
    53:56:java.lang.Boolean lambda$stillValid$0(net.minecraft.world.level.block.Block,net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.inventory.AbstractFurnaceMenu -> bao:
    net.minecraft.world.Container container -> d
    net.minecraft.world.inventory.ContainerData data -> e
    net.minecraft.world.level.Level level -> c
    net.minecraft.world.item.crafting.RecipeType recipeType -> f
    39:40:void <init>(net.minecraft.world.inventory.MenuType,net.minecraft.world.item.crafting.RecipeType,int,net.minecraft.world.entity.player.Inventory) -> <init>
    43:65:void <init>(net.minecraft.world.inventory.MenuType,net.minecraft.world.item.crafting.RecipeType,int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container,net.minecraft.world.inventory.ContainerData) -> <init>
    69:72:void fillCraftSlotsStackedContents(net.minecraft.world.entity.player.StackedContents) -> a
    76:77:void clearCraftingContent() -> e
    82:83:void handlePlacement(boolean,net.minecraft.world.item.crafting.Recipe,net.minecraft.server.level.ServerPlayer) -> a
    87:87:boolean recipeMatches(net.minecraft.world.item.crafting.Recipe) -> a
    92:92:int getResultSlotIndex() -> f
    97:97:int getGridWidth() -> g
    102:102:int getGridHeight() -> h
    107:107:int getSize() -> i
    112:112:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    117:160:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    164:164:boolean canSmelt(net.minecraft.world.item.ItemStack) -> a
    168:168:boolean isFuel(net.minecraft.world.item.ItemStack) -> b
    172:177:int getBurnProgress() -> j
    182:186:int getLitProgress() -> k
    190:190:boolean isLit() -> l
net.minecraft.world.inventory.AnvilMenu -> bap:
    org.apache.logging.log4j.Logger LOGGER -> c
    net.minecraft.world.Container resultSlots -> d
    net.minecraft.world.Container repairSlots -> e
    net.minecraft.world.inventory.DataSlot cost -> f
    net.minecraft.world.inventory.ContainerLevelAccess access -> g
    int repairItemCountCost -> h
    java.lang.String itemName -> i
    net.minecraft.world.entity.player.Player player -> j
    73:74:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    37:143:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    147:152:void slotsChanged(net.minecraft.world.Container) -> a
    155:366:void createResult() -> e
    369:369:int calculateIncreasedRepairCost(int) -> d
    374:376:void removed(net.minecraft.world.entity.player.Player) -> b
    380:385:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    390:422:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    426:439:void setItemName(java.lang.String) -> a
    442:442:int getCost() -> f
    381:384:java.lang.Boolean lambda$stillValid$1(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    375:375:void lambda$removed$0(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    24:24:net.minecraft.world.inventory.DataSlot access$000(net.minecraft.world.inventory.AnvilMenu) -> a
    24:24:net.minecraft.world.Container access$100(net.minecraft.world.inventory.AnvilMenu) -> b
    24:24:int access$200(net.minecraft.world.inventory.AnvilMenu) -> c
    25:25:void <clinit>() -> <clinit>
net.minecraft.world.inventory.AnvilMenu$1 -> bap$1:
    net.minecraft.world.inventory.AnvilMenu this$0 -> a
    38:38:void <init>(net.minecraft.world.inventory.AnvilMenu,int) -> <init>
    41:43:void setChanged() -> e
net.minecraft.world.inventory.AnvilMenu$2 -> bap$2:
    net.minecraft.world.inventory.ContainerLevelAccess val$access -> a
    net.minecraft.world.inventory.AnvilMenu this$0 -> b
    85:85:void <init>(net.minecraft.world.inventory.AnvilMenu,net.minecraft.world.Container,int,int,int,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    88:88:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    93:93:boolean mayPickup(net.minecraft.world.entity.player.Player) -> a
    98:131:net.minecraft.world.item.ItemStack onTake(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    117:130:void lambda$onTake$0(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.inventory.AnvilMenu$3 -> bap$3:
    int[] $SwitchMap$net$minecraft$world$item$enchantment$Enchantment$Rarity -> a
    264:264:void <clinit>() -> <clinit>
net.minecraft.world.inventory.BeaconMenu -> baq:
    net.minecraft.world.Container beacon -> c
    net.minecraft.world.inventory.BeaconMenu$PaymentSlot paymentSlot -> d
    net.minecraft.world.inventory.ContainerLevelAccess access -> e
    net.minecraft.world.inventory.ContainerData beaconData -> f
    42:43:void <init>(int,net.minecraft.world.Container) -> <init>
    25:67:void <init>(int,net.minecraft.world.Container,net.minecraft.world.inventory.ContainerData,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    71:80:void removed(net.minecraft.world.entity.player.Player) -> b
    84:84:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    89:91:void setData(int,int) -> a
    95:134:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    138:138:int getLevels() -> e
    143:143:net.minecraft.world.effect.MobEffect getPrimaryEffect() -> f
    148:148:net.minecraft.world.effect.MobEffect getSecondaryEffect() -> g
    152:157:void updateEffects(int,int) -> c
    160:160:boolean hasPayment() -> h
net.minecraft.world.inventory.BeaconMenu$1 -> baq$1:
    net.minecraft.world.inventory.BeaconMenu this$0 -> a
    25:25:void <init>(net.minecraft.world.inventory.BeaconMenu,int) -> <init>
    28:28:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    33:33:int getMaxStackSize() -> L_
net.minecraft.world.inventory.BeaconMenu$PaymentSlot -> baq$a:
    net.minecraft.world.inventory.BeaconMenu this$0 -> a
    164:166:void <init>(net.minecraft.world.inventory.BeaconMenu,net.minecraft.world.Container,int,int,int) -> <init>
    170:171:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    176:176:int getMaxStackSize() -> a
net.minecraft.world.inventory.BlastFurnaceMenu -> bar:
    9:10:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    13:14:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container,net.minecraft.world.inventory.ContainerData) -> <init>
net.minecraft.world.inventory.BrewingStandMenu -> bas:
    net.minecraft.world.Container brewingStand -> c
    net.minecraft.world.inventory.ContainerData brewingStandData -> d
    net.minecraft.world.inventory.Slot ingredientSlot -> e
    36:37:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    40:62:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container,net.minecraft.world.inventory.ContainerData) -> <init>
    66:66:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    71:118:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    122:122:int getFuel() -> e
    126:126:int getBrewingTicks() -> f
net.minecraft.world.inventory.BrewingStandMenu$FuelSlot -> bas$a:
    178:179:void <init>(net.minecraft.world.Container,int,int,int) -> <init>
    183:183:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    187:187:boolean mayPlaceItem(net.minecraft.world.item.ItemStack) -> a_
    192:192:int getMaxStackSize() -> a
net.minecraft.world.inventory.BrewingStandMenu$IngredientsSlot -> bas$b:
    162:163:void <init>(net.minecraft.world.Container,int,int,int) -> <init>
    167:167:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    172:172:int getMaxStackSize() -> a
net.minecraft.world.inventory.BrewingStandMenu$PotionSlot -> bas$c:
    131:132:void <init>(net.minecraft.world.Container,int,int,int) -> <init>
    136:136:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    141:141:int getMaxStackSize() -> a
    146:151:net.minecraft.world.item.ItemStack onTake(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    155:156:boolean mayPlaceItem(net.minecraft.world.item.ItemStack) -> b_
net.minecraft.world.inventory.CartographyTableMenu -> bat:
    net.minecraft.world.inventory.ContainerLevelAccess access -> d
    boolean quickMoved -> e
    long lastSoundTime -> f
    net.minecraft.world.Container container -> c
    net.minecraft.world.inventory.ResultContainer resultContainer -> g
    47:48:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    30:127:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    131:131:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    136:145:void slotsChanged(net.minecraft.world.Container) -> a
    148:182:void setupResultSlot(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    186:186:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    191:253:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    258:262:void removed(net.minecraft.world.entity.player.Player) -> b
    261:261:void lambda$removed$2(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    202:207:net.minecraft.world.item.ItemStack lambda$quickMoveStack$1(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    149:181:void lambda$setupResultSlot$0(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    16:16:long access$000(net.minecraft.world.inventory.CartographyTableMenu) -> a
    16:16:long access$002(net.minecraft.world.inventory.CartographyTableMenu,long) -> a
    16:16:boolean access$100(net.minecraft.world.inventory.CartographyTableMenu) -> b
net.minecraft.world.inventory.CartographyTableMenu$1 -> bat$1:
    net.minecraft.world.inventory.CartographyTableMenu this$0 -> a
    30:30:void <init>(net.minecraft.world.inventory.CartographyTableMenu,int) -> <init>
    33:35:void setChanged() -> e
net.minecraft.world.inventory.CartographyTableMenu$2 -> bat$2:
    net.minecraft.world.inventory.CartographyTableMenu this$0 -> a
    37:37:void <init>(net.minecraft.world.inventory.CartographyTableMenu) -> <init>
    41:43:void setChanged() -> e
net.minecraft.world.inventory.CartographyTableMenu$3 -> bat$3:
    net.minecraft.world.inventory.CartographyTableMenu this$0 -> a
    55:55:void <init>(net.minecraft.world.inventory.CartographyTableMenu,net.minecraft.world.Container,int,int,int) -> <init>
    58:58:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.CartographyTableMenu$4 -> bat$4:
    net.minecraft.world.inventory.CartographyTableMenu this$0 -> a
    62:62:void <init>(net.minecraft.world.inventory.CartographyTableMenu,net.minecraft.world.Container,int,int,int) -> <init>
    65:66:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.CartographyTableMenu$5 -> bat$5:
    net.minecraft.world.inventory.ContainerLevelAccess val$access -> a
    net.minecraft.world.inventory.CartographyTableMenu this$0 -> b
    70:70:void <init>(net.minecraft.world.inventory.CartographyTableMenu,net.minecraft.world.Container,int,int,int,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    73:73:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    78:93:net.minecraft.world.item.ItemStack remove(int) -> a
    98:100:void onQuickCraft(net.minecraft.world.item.ItemStack,int) -> a
    104:115:net.minecraft.world.item.ItemStack onTake(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    108:113:void lambda$onTake$1(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    80:87:net.minecraft.world.item.ItemStack lambda$remove$0(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.inventory.ChestMenu -> bau:
    net.minecraft.world.Container container -> c
    int containerRows -> d
    15:16:void <init>(net.minecraft.world.inventory.MenuType,int,net.minecraft.world.entity.player.Inventory,int) -> <init>
    19:19:net.minecraft.world.inventory.ChestMenu oneRow(int,net.minecraft.world.entity.player.Inventory) -> a
    23:23:net.minecraft.world.inventory.ChestMenu twoRows(int,net.minecraft.world.entity.player.Inventory) -> b
    27:27:net.minecraft.world.inventory.ChestMenu threeRows(int,net.minecraft.world.entity.player.Inventory) -> c
    31:31:net.minecraft.world.inventory.ChestMenu fourRows(int,net.minecraft.world.entity.player.Inventory) -> d
    35:35:net.minecraft.world.inventory.ChestMenu fiveRows(int,net.minecraft.world.entity.player.Inventory) -> e
    39:39:net.minecraft.world.inventory.ChestMenu sixRows(int,net.minecraft.world.entity.player.Inventory) -> f
    43:43:net.minecraft.world.inventory.ChestMenu threeRows(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container) -> a
    47:47:net.minecraft.world.inventory.ChestMenu sixRows(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container) -> b
    51:73:void <init>(net.minecraft.world.inventory.MenuType,int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container,int) -> <init>
    77:77:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    82:103:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    108:110:void removed(net.minecraft.world.entity.player.Player) -> b
    113:113:net.minecraft.world.Container getContainer() -> e
    117:117:int getRowCount() -> f
net.minecraft.world.inventory.ClickType -> bav:
    net.minecraft.world.inventory.ClickType PICKUP -> a
    net.minecraft.world.inventory.ClickType QUICK_MOVE -> b
    net.minecraft.world.inventory.ClickType SWAP -> c
    net.minecraft.world.inventory.ClickType CLONE -> d
    net.minecraft.world.inventory.ClickType THROW -> e
    net.minecraft.world.inventory.ClickType QUICK_CRAFT -> f
    net.minecraft.world.inventory.ClickType PICKUP_ALL -> g
    net.minecraft.world.inventory.ClickType[] $VALUES -> h
    3:3:net.minecraft.world.inventory.ClickType[] values() -> values
    3:3:net.minecraft.world.inventory.ClickType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:4:void <clinit>() -> <clinit>
net.minecraft.world.inventory.ContainerData -> baw:
    int get(int) -> a
    void set(int,int) -> a
    int getCount() -> a
net.minecraft.world.inventory.ContainerLevelAccess -> bax:
    net.minecraft.world.inventory.ContainerLevelAccess NULL -> a
    19:19:net.minecraft.world.inventory.ContainerLevelAccess create(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    java.util.Optional evaluate(java.util.function.BiFunction) -> a
    30:30:java.lang.Object evaluate(java.util.function.BiFunction,java.lang.Object) -> a
    34:38:void execute(java.util.function.BiConsumer) -> a
    35:36:java.util.Optional lambda$execute$0(java.util.function.BiConsumer,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    11:11:void <clinit>() -> <clinit>
net.minecraft.world.inventory.ContainerLevelAccess$1 -> bax$1:
    11:11:void <init>() -> <init>
    14:14:java.util.Optional evaluate(java.util.function.BiFunction) -> a
net.minecraft.world.inventory.ContainerLevelAccess$2 -> bax$2:
    net.minecraft.world.level.Level val$level -> b
    net.minecraft.core.BlockPos val$pos -> c
    19:19:void <init>(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> <init>
    22:22:java.util.Optional evaluate(java.util.function.BiFunction) -> a
net.minecraft.world.inventory.ContainerListener -> bay:
    void refreshContainer(net.minecraft.world.inventory.AbstractContainerMenu,net.minecraft.core.NonNullList) -> a
    void slotChanged(net.minecraft.world.inventory.AbstractContainerMenu,int,net.minecraft.world.item.ItemStack) -> a
    void setContainerData(net.minecraft.world.inventory.AbstractContainerMenu,int,int) -> a
net.minecraft.world.inventory.CraftingContainer -> baz:
    net.minecraft.core.NonNullList items -> a
    int width -> b
    int height -> c
    net.minecraft.world.inventory.AbstractContainerMenu menu -> d
    16:21:void <init>(net.minecraft.world.inventory.AbstractContainerMenu,int,int) -> <init>
    25:25:int getContainerSize() -> O_
    30:35:boolean isEmpty() -> c
    40:43:net.minecraft.world.item.ItemStack getItem(int) -> a
    47:50:net.minecraft.world.item.ItemStack getItem(int,int) -> b
    55:55:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    60:64:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    69:71:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    75:75:void setChanged() -> e
    79:79:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    84:85:void clearContent() -> N_
    88:88:int getHeight() -> f
    92:92:int getWidth() -> g
    97:100:void fillStackedContents(net.minecraft.world.entity.player.StackedContents) -> a
net.minecraft.world.inventory.CraftingMenu -> bba:
    net.minecraft.world.inventory.CraftingContainer craftSlots -> c
    net.minecraft.world.inventory.ResultContainer resultSlots -> d
    net.minecraft.world.inventory.ContainerLevelAccess access -> e
    net.minecraft.world.entity.player.Player player -> f
    34:35:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    27:57:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    60:76:void slotChangedCraftingGrid(int,net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.inventory.ResultContainer) -> a
    80:81:void slotsChanged(net.minecraft.world.Container) -> a
    85:86:void fillCraftSlotsStackedContents(net.minecraft.world.entity.player.StackedContents) -> a
    90:92:void clearCraftingContent() -> e
    96:96:boolean recipeMatches(net.minecraft.world.item.crafting.Recipe) -> a
    101:103:void removed(net.minecraft.world.entity.player.Player) -> b
    107:107:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    112:156:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    161:161:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    166:166:int getResultSlotIndex() -> f
    171:171:int getGridWidth() -> g
    176:176:int getGridHeight() -> h
    181:181:int getSize() -> i
    119:119:void lambda$quickMoveStack$2(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    102:102:void lambda$removed$1(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    80:80:void lambda$slotsChanged$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.inventory.DataSlot -> bbb:
    int prevValue -> a
    3:3:void <init>() -> <init>
    5:5:net.minecraft.world.inventory.DataSlot forContainer(net.minecraft.world.inventory.ContainerData,int) -> a
    19:19:net.minecraft.world.inventory.DataSlot shared(int[],int) -> a
    33:33:net.minecraft.world.inventory.DataSlot standalone() -> a
    int get() -> b
    void set(int) -> a
    55:58:boolean checkAndClearUpdateFlag() -> c
net.minecraft.world.inventory.DataSlot$1 -> bbb$1:
    net.minecraft.world.inventory.ContainerData val$container -> a
    int val$dataId -> b
    5:5:void <init>(net.minecraft.world.inventory.ContainerData,int) -> <init>
    8:8:int get() -> b
    13:14:void set(int) -> a
net.minecraft.world.inventory.DataSlot$2 -> bbb$2:
    int[] val$storage -> a
    int val$index -> b
    19:19:void <init>(int[],int) -> <init>
    22:22:int get() -> b
    27:28:void set(int) -> a
net.minecraft.world.inventory.DataSlot$3 -> bbb$3:
    int value -> a
    33:33:void <init>() -> <init>
    38:38:int get() -> b
    43:44:void set(int) -> a
net.minecraft.world.inventory.DispenserMenu -> bbc:
    net.minecraft.world.Container dispenser -> c
    21:22:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    25:44:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container) -> <init>
    48:48:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    53:80:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    85:87:void removed(net.minecraft.world.entity.player.Player) -> b
net.minecraft.world.inventory.EnchantmentMenu -> bbd:
    net.minecraft.world.Container enchantSlots -> f
    net.minecraft.world.inventory.ContainerLevelAccess access -> g
    java.util.Random random -> h
    net.minecraft.world.inventory.DataSlot enchantmentSeed -> i
    int[] costs -> c
    int[] enchantClue -> d
    int[] levelClue -> e
    41:42:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    24:88:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    92:162:void slotsChanged(net.minecraft.world.Container) -> a
    166:218:boolean clickMenuButton(net.minecraft.world.entity.player.Player,int) -> a
    222:230:java.util.List getEnchantmentList(net.minecraft.world.item.ItemStack,int,int) -> a
    234:238:int getGoldCount() -> e
    242:242:int getEnchantmentSeed() -> f
    247:249:void removed(net.minecraft.world.entity.player.Player) -> b
    253:253:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    258:298:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    248:248:void lambda$removed$2(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    176:215:void lambda$clickMenuButton$1(net.minecraft.world.item.ItemStack,int,net.minecraft.world.entity.player.Player,int,net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    104:159:void lambda$slotsChanged$0(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.inventory.EnchantmentMenu$1 -> bbd$1:
    net.minecraft.world.inventory.EnchantmentMenu this$0 -> a
    24:24:void <init>(net.minecraft.world.inventory.EnchantmentMenu,int) -> <init>
    27:29:void setChanged() -> e
net.minecraft.world.inventory.EnchantmentMenu$2 -> bbd$2:
    net.minecraft.world.inventory.EnchantmentMenu this$0 -> a
    47:47:void <init>(net.minecraft.world.inventory.EnchantmentMenu,net.minecraft.world.Container,int,int,int) -> <init>
    50:50:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    55:55:int getMaxStackSize() -> a
net.minecraft.world.inventory.EnchantmentMenu$3 -> bbd$3:
    net.minecraft.world.inventory.EnchantmentMenu this$0 -> a
    59:59:void <init>(net.minecraft.world.inventory.EnchantmentMenu,net.minecraft.world.Container,int,int,int) -> <init>
    62:62:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.FurnaceFuelSlot -> bbe:
    net.minecraft.world.inventory.AbstractFurnaceMenu menu -> a
    11:13:void <init>(net.minecraft.world.inventory.AbstractFurnaceMenu,net.minecraft.world.Container,int,int,int) -> <init>
    17:17:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    22:22:int getMaxStackSize(net.minecraft.world.item.ItemStack) -> b
    26:26:boolean isBucket(net.minecraft.world.item.ItemStack) -> c_
net.minecraft.world.inventory.FurnaceMenu -> bbf:
    9:10:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    13:14:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container,net.minecraft.world.inventory.ContainerData) -> <init>
net.minecraft.world.inventory.FurnaceResultSlot -> bbg:
    net.minecraft.world.entity.player.Player player -> a
    int removeCount -> b
    13:15:void <init>(net.minecraft.world.entity.player.Player,net.minecraft.world.Container,int,int,int) -> <init>
    19:19:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    24:27:net.minecraft.world.item.ItemStack remove(int) -> a
    32:34:net.minecraft.world.item.ItemStack onTake(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    39:41:void onQuickCraft(net.minecraft.world.item.ItemStack,int) -> a
    45:51:void checkTakeAchievements(net.minecraft.world.item.ItemStack) -> c
net.minecraft.world.inventory.GrindstoneMenu -> bbh:
    net.minecraft.world.Container resultSlots -> c
    net.minecraft.world.Container repairSlots -> d
    net.minecraft.world.inventory.ContainerLevelAccess access -> e
    43:44:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    31:123:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    127:132:void slotsChanged(net.minecraft.world.Container) -> a
    135:188:void createResult() -> e
    191:201:net.minecraft.world.item.ItemStack mergeEnchants(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    205:238:net.minecraft.world.item.ItemStack removeNonCurses(net.minecraft.world.item.ItemStack,int,int) -> a
    243:245:void removed(net.minecraft.world.entity.player.Player) -> b
    249:249:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    254:299:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    244:244:void lambda$removed$1(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    221:221:boolean lambda$removeNonCurses$0(java.util.Map$Entry) -> a
    21:21:net.minecraft.world.Container access$000(net.minecraft.world.inventory.GrindstoneMenu) -> a
net.minecraft.world.inventory.GrindstoneMenu$1 -> bbh$1:
    net.minecraft.world.inventory.GrindstoneMenu this$0 -> a
    32:32:void <init>(net.minecraft.world.inventory.GrindstoneMenu,int) -> <init>
    35:37:void setChanged() -> e
net.minecraft.world.inventory.GrindstoneMenu$2 -> bbh$2:
    net.minecraft.world.inventory.GrindstoneMenu this$0 -> a
    50:50:void <init>(net.minecraft.world.inventory.GrindstoneMenu,net.minecraft.world.Container,int,int,int) -> <init>
    53:53:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.GrindstoneMenu$3 -> bbh$3:
    net.minecraft.world.inventory.GrindstoneMenu this$0 -> a
    56:56:void <init>(net.minecraft.world.inventory.GrindstoneMenu,net.minecraft.world.Container,int,int,int) -> <init>
    59:59:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.GrindstoneMenu$4 -> bbh$4:
    net.minecraft.world.inventory.ContainerLevelAccess val$access -> a
    net.minecraft.world.inventory.GrindstoneMenu this$0 -> b
    62:62:void <init>(net.minecraft.world.inventory.GrindstoneMenu,net.minecraft.world.Container,int,int,int,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    65:65:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    70:83:net.minecraft.world.item.ItemStack onTake(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    87:96:int getExperienceAmount(net.minecraft.world.level.Level) -> a
    100:111:int getExperienceFromItem(net.minecraft.world.item.ItemStack) -> e
    71:78:void lambda$onTake$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.inventory.HopperMenu -> bbi:
    net.minecraft.world.Container hopper -> c
    16:17:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    20:39:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container) -> <init>
    43:43:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    48:69:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    74:76:void removed(net.minecraft.world.entity.player.Player) -> b
    79:79:net.minecraft.world.Container getContainer() -> e
net.minecraft.world.inventory.HorseInventoryMenu -> bbj:
    net.minecraft.world.Container horseContainer -> c
    net.minecraft.world.entity.animal.horse.AbstractHorse horse -> d
    16:70:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container,net.minecraft.world.entity.animal.horse.AbstractHorse) -> <init>
    74:74:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    79:122:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    127:129:void removed(net.minecraft.world.entity.player.Player) -> b
    132:132:net.minecraft.world.Container getContainer() -> e
net.minecraft.world.inventory.HorseInventoryMenu$1 -> bbj$1:
    net.minecraft.world.entity.animal.horse.AbstractHorse val$horse -> a
    net.minecraft.world.inventory.HorseInventoryMenu this$0 -> b
    25:25:void <init>(net.minecraft.world.inventory.HorseInventoryMenu,net.minecraft.world.Container,int,int,int,net.minecraft.world.entity.animal.horse.AbstractHorse) -> <init>
    28:28:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    33:33:boolean isActive() -> b
net.minecraft.world.inventory.HorseInventoryMenu$2 -> bbj$2:
    net.minecraft.world.entity.animal.horse.AbstractHorse val$horse -> a
    net.minecraft.world.inventory.HorseInventoryMenu this$0 -> b
    37:37:void <init>(net.minecraft.world.inventory.HorseInventoryMenu,net.minecraft.world.Container,int,int,int,net.minecraft.world.entity.animal.horse.AbstractHorse) -> <init>
    40:40:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    45:45:boolean isActive() -> b
    50:50:int getMaxStackSize() -> a
net.minecraft.world.inventory.InventoryMenu -> bbk:
    net.minecraft.resources.ResourceLocation BLOCK_ATLAS -> c
    net.minecraft.resources.ResourceLocation EMPTY_ARMOR_SLOT_HELMET -> d
    net.minecraft.resources.ResourceLocation EMPTY_ARMOR_SLOT_CHESTPLATE -> e
    net.minecraft.resources.ResourceLocation EMPTY_ARMOR_SLOT_LEGGINGS -> f
    net.minecraft.resources.ResourceLocation EMPTY_ARMOR_SLOT_BOOTS -> g
    net.minecraft.resources.ResourceLocation EMPTY_ARMOR_SLOT_SHIELD -> h
    net.minecraft.resources.ResourceLocation[] TEXTURE_EMPTY_SLOTS -> j
    net.minecraft.world.entity.EquipmentSlot[] SLOT_IDS -> k
    net.minecraft.world.inventory.CraftingContainer craftSlots -> l
    net.minecraft.world.inventory.ResultContainer resultSlots -> m
    boolean active -> i
    net.minecraft.world.entity.player.Player owner -> n
    52:112:void <init>(net.minecraft.world.entity.player.Inventory,boolean,net.minecraft.world.entity.player.Player) -> <init>
    116:117:void fillCraftSlotsStackedContents(net.minecraft.world.entity.player.StackedContents) -> a
    121:123:void clearCraftingContent() -> e
    127:127:boolean recipeMatches(net.minecraft.world.item.crafting.Recipe) -> a
    132:133:void slotsChanged(net.minecraft.world.Container) -> a
    137:146:void removed(net.minecraft.world.entity.player.Player) -> b
    150:150:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    155:213:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    218:218:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    223:223:int getResultSlotIndex() -> f
    228:228:int getGridWidth() -> g
    233:233:int getGridHeight() -> h
    238:238:int getSize() -> i
    15:15:net.minecraft.resources.ResourceLocation[] access$000() -> j
    29:45:void <clinit>() -> <clinit>
net.minecraft.world.inventory.InventoryMenu$1 -> bbk$1:
    net.minecraft.world.entity.EquipmentSlot val$slot -> a
    net.minecraft.world.inventory.InventoryMenu this$0 -> b
    71:71:void <init>(net.minecraft.world.inventory.InventoryMenu,net.minecraft.world.Container,int,int,int,net.minecraft.world.entity.EquipmentSlot) -> <init>
    74:74:int getMaxStackSize() -> a
    79:79:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    84:88:boolean mayPickup(net.minecraft.world.entity.player.Player) -> a
    93:93:com.mojang.datafixers.util.Pair getNoItemIcon() -> c
net.minecraft.world.inventory.InventoryMenu$2 -> bbk$2:
    net.minecraft.world.inventory.InventoryMenu this$0 -> a
    106:106:void <init>(net.minecraft.world.inventory.InventoryMenu,net.minecraft.world.Container,int,int,int) -> <init>
    109:109:com.mojang.datafixers.util.Pair getNoItemIcon() -> c
net.minecraft.world.inventory.LecternMenu -> bbl:
    net.minecraft.world.Container lectern -> c
    net.minecraft.world.inventory.ContainerData lecternData -> d
    22:23:void <init>(int) -> <init>
    26:40:void <init>(int,net.minecraft.world.Container,net.minecraft.world.inventory.ContainerData) -> <init>
    44:73:boolean clickMenuButton(net.minecraft.world.entity.player.Player,int) -> a
    78:80:void setData(int,int) -> a
    84:84:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    88:88:net.minecraft.world.item.ItemStack getBook() -> e
    92:92:int getPage() -> f
net.minecraft.world.inventory.LecternMenu$1 -> bbl$1:
    net.minecraft.world.inventory.LecternMenu this$0 -> a
    31:31:void <init>(net.minecraft.world.inventory.LecternMenu,net.minecraft.world.Container,int,int,int) -> <init>
    34:36:void setChanged() -> d
net.minecraft.world.inventory.LoomMenu -> bbm:
    net.minecraft.world.inventory.ContainerLevelAccess access -> c
    net.minecraft.world.inventory.DataSlot selectedBannerPatternIndex -> d
    java.lang.Runnable slotUpdateListener -> e
    net.minecraft.world.inventory.Slot bannerSlot -> f
    net.minecraft.world.inventory.Slot dyeSlot -> g
    net.minecraft.world.inventory.Slot patternSlot -> h
    net.minecraft.world.inventory.Slot resultSlot -> i
    long lastSoundTime -> j
    net.minecraft.world.Container inputContainer -> k
    net.minecraft.world.Container outputContainer -> l
    57:58:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    29:122:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    125:125:int getSelectedBannerPatternIndex() -> e
    130:130:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    135:141:boolean clickMenuButton(net.minecraft.world.entity.player.Player,int) -> a
    146:166:void slotsChanged(net.minecraft.world.Container) -> a
    169:170:void registerUpdateListener(java.lang.Runnable) -> a
    174:222:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    227:229:void removed(net.minecraft.world.entity.player.Player) -> b
    232:261:void setupResultSlot() -> j
    264:264:net.minecraft.world.inventory.Slot getBannerSlot() -> f
    268:268:net.minecraft.world.inventory.Slot getDyeSlot() -> g
    272:272:net.minecraft.world.inventory.Slot getPatternSlot() -> h
    276:276:net.minecraft.world.inventory.Slot getResultSlot() -> i
    228:228:void lambda$removed$1(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    30:30:void lambda$new$0() -> k
    22:22:java.lang.Runnable access$000(net.minecraft.world.inventory.LoomMenu) -> a
    22:22:net.minecraft.world.inventory.Slot access$100(net.minecraft.world.inventory.LoomMenu) -> b
    22:22:net.minecraft.world.inventory.Slot access$200(net.minecraft.world.inventory.LoomMenu) -> c
    22:22:net.minecraft.world.inventory.DataSlot access$300(net.minecraft.world.inventory.LoomMenu) -> d
    22:22:long access$400(net.minecraft.world.inventory.LoomMenu) -> e
    22:22:long access$402(net.minecraft.world.inventory.LoomMenu,long) -> a
net.minecraft.world.inventory.LoomMenu$1 -> bbm$1:
    net.minecraft.world.inventory.LoomMenu this$0 -> a
    39:39:void <init>(net.minecraft.world.inventory.LoomMenu,int) -> <init>
    42:45:void setChanged() -> e
net.minecraft.world.inventory.LoomMenu$2 -> bbm$2:
    net.minecraft.world.inventory.LoomMenu this$0 -> a
    48:48:void <init>(net.minecraft.world.inventory.LoomMenu,int) -> <init>
    51:53:void setChanged() -> e
net.minecraft.world.inventory.LoomMenu$3 -> bbm$3:
    net.minecraft.world.inventory.LoomMenu this$0 -> a
    64:64:void <init>(net.minecraft.world.inventory.LoomMenu,net.minecraft.world.Container,int,int,int) -> <init>
    67:67:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.LoomMenu$4 -> bbm$4:
    net.minecraft.world.inventory.LoomMenu this$0 -> a
    71:71:void <init>(net.minecraft.world.inventory.LoomMenu,net.minecraft.world.Container,int,int,int) -> <init>
    74:74:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.LoomMenu$5 -> bbm$5:
    net.minecraft.world.inventory.LoomMenu this$0 -> a
    78:78:void <init>(net.minecraft.world.inventory.LoomMenu,net.minecraft.world.Container,int,int,int) -> <init>
    81:81:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.LoomMenu$6 -> bbm$6:
    net.minecraft.world.inventory.ContainerLevelAccess val$access -> a
    net.minecraft.world.inventory.LoomMenu this$0 -> b
    85:85:void <init>(net.minecraft.world.inventory.LoomMenu,net.minecraft.world.Container,int,int,int,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    88:88:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    93:108:net.minecraft.world.item.ItemStack onTake(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    100:105:void lambda$onTake$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.inventory.MenuConstructor -> bbn:
    net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> createMenu
net.minecraft.world.inventory.MenuType -> bbo:
    net.minecraft.world.inventory.MenuType GENERIC_9x1 -> a
    net.minecraft.world.inventory.MenuType GENERIC_9x2 -> b
    net.minecraft.world.inventory.MenuType GENERIC_9x3 -> c
    net.minecraft.world.inventory.MenuType GENERIC_9x4 -> d
    net.minecraft.world.inventory.MenuType GENERIC_9x5 -> e
    net.minecraft.world.inventory.MenuType GENERIC_9x6 -> f
    net.minecraft.world.inventory.MenuType GENERIC_3x3 -> g
    net.minecraft.world.inventory.MenuType ANVIL -> h
    net.minecraft.world.inventory.MenuType BEACON -> i
    net.minecraft.world.inventory.MenuType BLAST_FURNACE -> j
    net.minecraft.world.inventory.MenuType BREWING_STAND -> k
    net.minecraft.world.inventory.MenuType CRAFTING -> l
    net.minecraft.world.inventory.MenuType ENCHANTMENT -> m
    net.minecraft.world.inventory.MenuType FURNACE -> n
    net.minecraft.world.inventory.MenuType GRINDSTONE -> o
    net.minecraft.world.inventory.MenuType HOPPER -> p
    net.minecraft.world.inventory.MenuType LECTERN -> q
    net.minecraft.world.inventory.MenuType LOOM -> r
    net.minecraft.world.inventory.MenuType MERCHANT -> s
    net.minecraft.world.inventory.MenuType SHULKER_BOX -> t
    net.minecraft.world.inventory.MenuType SMOKER -> u
    net.minecraft.world.inventory.MenuType CARTOGRAPHY_TABLE -> v
    net.minecraft.world.inventory.MenuType STONECUTTER -> w
    net.minecraft.world.inventory.MenuType$MenuSupplier constructor -> x
    37:37:net.minecraft.world.inventory.MenuType register(java.lang.String,net.minecraft.world.inventory.MenuType$MenuSupplier) -> a
    42:44:void <init>(net.minecraft.world.inventory.MenuType$MenuSupplier) -> <init>
    47:47:net.minecraft.world.inventory.AbstractContainerMenu create(int,net.minecraft.world.entity.player.Inventory) -> a
    28:28:net.minecraft.world.inventory.LecternMenu lambda$static$0(int,net.minecraft.world.entity.player.Inventory) -> b
    11:34:void <clinit>() -> <clinit>
net.minecraft.world.inventory.MenuType$MenuSupplier -> bbo$a:
    net.minecraft.world.inventory.AbstractContainerMenu create(int,net.minecraft.world.entity.player.Inventory) -> create
net.minecraft.world.inventory.MerchantContainer -> bbp:
    net.minecraft.world.item.trading.Merchant merchant -> a
    net.minecraft.core.NonNullList itemStacks -> b
    net.minecraft.world.item.trading.MerchantOffer activeOffer -> c
    int selectionHint -> d
    int futureXp -> e
    16:24:void <init>(net.minecraft.world.item.trading.Merchant) -> <init>
    28:28:int getContainerSize() -> O_
    33:38:boolean isEmpty() -> c
    43:43:net.minecraft.world.item.ItemStack getItem(int) -> a
    48:57:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    61:61:boolean isPaymentSlot(int) -> d
    66:66:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    71:78:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    82:82:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    87:88:void setChanged() -> e
    91:128:void updateSellItem() -> f
    132:132:net.minecraft.world.item.trading.MerchantOffer getActiveOffer() -> g
    136:138:void setSelectionHint(int) -> c
    142:143:void clearContent() -> N_
    146:146:int getFutureXp() -> h
net.minecraft.world.inventory.MerchantMenu -> bbq:
    net.minecraft.world.item.trading.Merchant trader -> c
    net.minecraft.world.inventory.MerchantContainer tradeContainer -> d
    int merchantLevel -> e
    boolean showProgressBar -> f
    boolean canRestock -> g
    37:38:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    41:57:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.item.trading.Merchant) -> <init>
    60:61:void setShowProgressBar(boolean) -> a
    65:67:void slotsChanged(net.minecraft.world.Container) -> a
    70:71:void setSelectionHint(int) -> d
    75:75:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    79:79:int getTraderXp() -> e
    83:83:int getFutureTraderXp() -> f
    87:88:void setXp(int) -> e
    91:91:int getTraderLevel() -> g
    95:96:void setMerchantLevel(int) -> f
    99:100:void setCanRestock(boolean) -> b
    103:103:boolean canRestock() -> h
    108:108:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    113:150:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    154:158:void playTradeSound() -> k
    162:183:void removed(net.minecraft.world.entity.player.Player) -> b
    186:217:void tryMoveItems(int) -> g
    220:242:void moveFromInventoryToPaymentSlot(int,net.minecraft.world.item.ItemStack) -> c
    245:245:boolean isSameItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    249:250:void setOffers(net.minecraft.world.item.trading.MerchantOffers) -> a
    253:253:net.minecraft.world.item.trading.MerchantOffers getOffers() -> i
    257:257:boolean showProgressBar() -> j
net.minecraft.world.inventory.MerchantResultSlot -> bbr:
    net.minecraft.world.inventory.MerchantContainer slots -> a
    net.minecraft.world.entity.player.Player player -> b
    int removeCount -> g
    net.minecraft.world.item.trading.Merchant merchant -> h
    16:20:void <init>(net.minecraft.world.entity.player.Player,net.minecraft.world.item.trading.Merchant,net.minecraft.world.inventory.MerchantContainer,int,int,int) -> <init>
    24:24:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    29:32:net.minecraft.world.item.ItemStack remove(int) -> a
    37:39:void onQuickCraft(net.minecraft.world.item.ItemStack,int) -> a
    43:45:void checkTakeAchievements(net.minecraft.world.item.ItemStack) -> c
    49:67:net.minecraft.world.item.ItemStack onTake(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.PlayerEnderChestContainer -> bbs:
    net.minecraft.world.level.block.entity.EnderChestBlockEntity activeChest -> a
    14:15:void <init>() -> <init>
    18:19:void setActiveChest(net.minecraft.world.level.block.entity.EnderChestBlockEntity) -> a
    22:32:void fromTag(net.minecraft.nbt.ListTag) -> a
    35:45:net.minecraft.nbt.ListTag createTag() -> f
    50:53:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    58:62:void startOpen(net.minecraft.world.entity.player.Player) -> a_
    66:71:void stopOpen(net.minecraft.world.entity.player.Player) -> b_
net.minecraft.world.inventory.RecipeBookMenu -> bbt:
    11:12:void <init>(net.minecraft.world.inventory.MenuType,int) -> <init>
    16:17:void handlePlacement(boolean,net.minecraft.world.item.crafting.Recipe,net.minecraft.server.level.ServerPlayer) -> a
    void fillCraftSlotsStackedContents(net.minecraft.world.entity.player.StackedContents) -> a
    void clearCraftingContent() -> e
    boolean recipeMatches(net.minecraft.world.item.crafting.Recipe) -> a
    int getResultSlotIndex() -> f
    int getGridWidth() -> g
    int getGridHeight() -> h
    int getSize() -> i
net.minecraft.world.inventory.RecipeHolder -> bbu:
    void setRecipeUsed(net.minecraft.world.item.crafting.Recipe) -> a
    net.minecraft.world.item.crafting.Recipe getRecipeUsed() -> aa_
    19:24:void awardAndReset(net.minecraft.world.entity.player.Player) -> b
    27:32:boolean setRecipeUsed(net.minecraft.world.level.Level,net.minecraft.server.level.ServerPlayer,net.minecraft.world.item.crafting.Recipe) -> a
net.minecraft.world.inventory.ResultContainer -> bbv:
    net.minecraft.core.NonNullList itemStacks -> a
    net.minecraft.world.item.crafting.Recipe recipeUsed -> b
    12:13:void <init>() -> <init>
    18:18:int getContainerSize() -> O_
    23:28:boolean isEmpty() -> c
    33:33:net.minecraft.world.item.ItemStack getItem(int) -> a
    38:38:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    43:43:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    48:49:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    53:53:void setChanged() -> e
    57:57:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    62:63:void clearContent() -> N_
    67:68:void setRecipeUsed(net.minecraft.world.item.crafting.Recipe) -> a
    73:73:net.minecraft.world.item.crafting.Recipe getRecipeUsed() -> aa_
net.minecraft.world.inventory.ResultSlot -> bbw:
    net.minecraft.world.inventory.CraftingContainer craftSlots -> a
    net.minecraft.world.entity.player.Player player -> b
    int removeCount -> g
    15:18:void <init>(net.minecraft.world.entity.player.Player,net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.Container,int,int,int) -> <init>
    22:22:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    27:30:net.minecraft.world.item.ItemStack remove(int) -> a
    35:37:void onQuickCraft(net.minecraft.world.item.ItemStack,int) -> a
    41:42:void onSwapCraft(int) -> b
    46:53:void checkTakeAchievements(net.minecraft.world.item.ItemStack) -> c
    57:83:net.minecraft.world.item.ItemStack onTake(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.ShulkerBoxMenu -> bbx:
    net.minecraft.world.Container container -> c
    16:17:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    20:42:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container) -> <init>
    46:46:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    51:72:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    77:79:void removed(net.minecraft.world.entity.player.Player) -> b
net.minecraft.world.inventory.ShulkerBoxSlot -> bby:
    10:11:void <init>(net.minecraft.world.Container,int,int,int) -> <init>
    15:15:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.inventory.SimpleContainerData -> bbz:
    int[] ints -> a
    6:8:void <init>(int) -> <init>
    12:12:int get(int) -> a
    17:18:void set(int,int) -> a
    22:22:int getCount() -> a
net.minecraft.world.inventory.Slot -> bca:
    int slot -> a
    net.minecraft.world.Container container -> c
    int index -> d
    int x -> e
    int y -> f
    19:24:void <init>(net.minecraft.world.Container,int,int,int) -> <init>
    27:31:void onQuickCraft(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    34:34:void onQuickCraft(net.minecraft.world.item.ItemStack,int) -> a
    37:37:void onSwapCraft(int) -> b
    40:40:void checkTakeAchievements(net.minecraft.world.item.ItemStack) -> c
    43:62:void swap(net.minecraft.world.inventory.Slot) -> a
    65:66:net.minecraft.world.item.ItemStack onTake(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    70:70:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    74:74:net.minecraft.world.item.ItemStack getItem() -> e
    78:78:boolean hasItem() -> f
    82:84:void set(net.minecraft.world.item.ItemStack) -> d
    87:88:void setChanged() -> d
    91:91:int getMaxStackSize() -> a
    95:95:int getMaxStackSize(net.minecraft.world.item.ItemStack) -> b
    100:100:com.mojang.datafixers.util.Pair getNoItemIcon() -> c
    104:104:net.minecraft.world.item.ItemStack remove(int) -> a
    108:108:boolean isAt(net.minecraft.world.Container,int) -> a
    112:112:boolean mayPickup(net.minecraft.world.entity.player.Player) -> a
    116:116:boolean isActive() -> b
net.minecraft.world.inventory.SmokerMenu -> bcb:
    9:10:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    13:14:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.Container,net.minecraft.world.inventory.ContainerData) -> <init>
net.minecraft.world.inventory.StackedContentsCompatible -> bcc:
    void fillStackedContents(net.minecraft.world.entity.player.StackedContents) -> a
net.minecraft.world.inventory.StonecutterMenu -> bcd:
    net.minecraft.world.inventory.ContainerLevelAccess access -> f
    net.minecraft.world.inventory.DataSlot selectedRecipeIndex -> g
    net.minecraft.world.level.Level level -> h
    java.util.List recipes -> i
    net.minecraft.world.item.ItemStack input -> j
    long lastSoundTime -> k
    net.minecraft.world.inventory.Slot inputSlot -> c
    net.minecraft.world.inventory.Slot resultSlot -> d
    java.lang.Runnable slotUpdateListener -> l
    net.minecraft.world.Container container -> e
    net.minecraft.world.inventory.ResultContainer resultContainer -> m
    51:52:void <init>(int,net.minecraft.world.entity.player.Inventory) -> <init>
    28:100:void <init>(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    103:103:int getSelectedRecipeIndex() -> e
    107:107:java.util.List getRecipes() -> f
    111:111:int getNumRecipes() -> g
    115:115:boolean hasInputItem() -> h
    120:120:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    125:130:boolean clickMenuButton(net.minecraft.world.entity.player.Player,int) -> a
    135:140:void slotsChanged(net.minecraft.world.Container) -> a
    143:150:void setupRecipeList(net.minecraft.world.Container,net.minecraft.world.item.ItemStack) -> a
    153:161:void setupResultSlot() -> i
    165:165:net.minecraft.world.inventory.MenuType getType() -> a
    169:170:void registerUpdateListener(java.lang.Runnable) -> a
    174:174:boolean canTakeItemForPickAll(net.minecraft.world.item.ItemStack,net.minecraft.world.inventory.Slot) -> a
    179:223:net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player,int) -> b
    228:232:void removed(net.minecraft.world.entity.player.Player) -> b
    231:231:void lambda$removed$1(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    38:38:void lambda$new$0() -> j
    19:19:java.lang.Runnable access$000(net.minecraft.world.inventory.StonecutterMenu) -> a
    19:19:void access$100(net.minecraft.world.inventory.StonecutterMenu) -> b
    19:19:long access$200(net.minecraft.world.inventory.StonecutterMenu) -> c
    19:19:long access$202(net.minecraft.world.inventory.StonecutterMenu,long) -> a
net.minecraft.world.inventory.StonecutterMenu$1 -> bcd$1:
    net.minecraft.world.inventory.StonecutterMenu this$0 -> a
    40:40:void <init>(net.minecraft.world.inventory.StonecutterMenu,int) -> <init>
    43:46:void setChanged() -> e
net.minecraft.world.inventory.StonecutterMenu$2 -> bcd$2:
    net.minecraft.world.inventory.ContainerLevelAccess val$access -> a
    net.minecraft.world.inventory.StonecutterMenu this$0 -> b
    62:62:void <init>(net.minecraft.world.inventory.StonecutterMenu,net.minecraft.world.Container,int,int,int,net.minecraft.world.inventory.ContainerLevelAccess) -> <init>
    65:65:boolean mayPlace(net.minecraft.world.item.ItemStack) -> a
    70:86:net.minecraft.world.item.ItemStack onTake(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    79:84:void lambda$onTake$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.inventory.package-info -> bce:
net.minecraft.world.item.AirItem -> bcf:
    net.minecraft.world.level.block.Block block -> a
    14:16:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    20:20:java.lang.String getDescriptionId() -> a
    25:27:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
net.minecraft.world.item.ArmorItem -> bcg:
    java.util.UUID[] ARMOR_MODIFIER_UUID_PER_SLOT -> k
    net.minecraft.core.dispenser.DispenseItemBehavior DISPENSE_ITEM_BEHAVIOR -> a
    net.minecraft.world.entity.EquipmentSlot slot -> b
    int defense -> c
    float toughness -> d
    net.minecraft.world.item.ArmorMaterial material -> e
    40:57:boolean dispenseArmor(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
    66:73:void <init>(net.minecraft.world.item.ArmorMaterial,net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.Item$Properties) -> <init>
    76:76:net.minecraft.world.entity.EquipmentSlot getSlot() -> b
    81:81:int getEnchantmentValue() -> c
    85:85:net.minecraft.world.item.ArmorMaterial getMaterial() -> Q_
    90:90:boolean isValidRepairItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    95:105:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    110:118:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EquipmentSlot) -> a
    122:122:int getDefense() -> e
    25:32:void <clinit>() -> <clinit>
net.minecraft.world.item.ArmorItem$1 -> bcg$1:
    32:32:void <init>() -> <init>
    35:35:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.item.ArmorMaterial -> bch:
    int getDurabilityForSlot(net.minecraft.world.entity.EquipmentSlot) -> a
    int getDefenseForSlot(net.minecraft.world.entity.EquipmentSlot) -> b
    int getEnchantmentValue() -> a
    net.minecraft.sounds.SoundEvent getEquipSound() -> b
    net.minecraft.world.item.crafting.Ingredient getRepairIngredient() -> c
    java.lang.String getName() -> d
    float getToughness() -> e
net.minecraft.world.item.ArmorMaterials -> bci:
    net.minecraft.world.item.ArmorMaterials LEATHER -> a
    net.minecraft.world.item.ArmorMaterials CHAIN -> b
    net.minecraft.world.item.ArmorMaterials IRON -> c
    net.minecraft.world.item.ArmorMaterials GOLD -> d
    net.minecraft.world.item.ArmorMaterials DIAMOND -> e
    net.minecraft.world.item.ArmorMaterials TURTLE -> f
    int[] HEALTH_PER_SLOT -> g
    java.lang.String name -> h
    int durabilityMultiplier -> i
    int[] slotProtections -> j
    int enchantmentValue -> k
    net.minecraft.sounds.SoundEvent sound -> l
    float toughness -> m
    net.minecraft.util.LazyLoadedValue repairIngredient -> n
    net.minecraft.world.item.ArmorMaterials[] $VALUES -> o
    11:11:net.minecraft.world.item.ArmorMaterials[] values() -> values
    11:11:net.minecraft.world.item.ArmorMaterials valueOf(java.lang.String) -> valueOf
    33:41:void <init>(java.lang.String,int,java.lang.String,int,int[],int,net.minecraft.sounds.SoundEvent,float,java.util.function.Supplier) -> <init>
    45:45:int getDurabilityForSlot(net.minecraft.world.entity.EquipmentSlot) -> a
    50:50:int getDefenseForSlot(net.minecraft.world.entity.EquipmentSlot) -> b
    55:55:int getEnchantmentValue() -> a
    60:60:net.minecraft.sounds.SoundEvent getEquipSound() -> b
    65:65:net.minecraft.world.item.crafting.Ingredient getRepairIngredient() -> c
    70:70:java.lang.String getName() -> d
    75:75:float getToughness() -> e
    17:17:net.minecraft.world.item.crafting.Ingredient lambda$static$5() -> f
    16:16:net.minecraft.world.item.crafting.Ingredient lambda$static$4() -> g
    15:15:net.minecraft.world.item.crafting.Ingredient lambda$static$3() -> h
    14:14:net.minecraft.world.item.crafting.Ingredient lambda$static$2() -> i
    13:13:net.minecraft.world.item.crafting.Ingredient lambda$static$1() -> j
    12:12:net.minecraft.world.item.crafting.Ingredient lambda$static$0() -> k
    11:21:void <clinit>() -> <clinit>
net.minecraft.world.item.ArmorStandItem -> bcj:
    21:22:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    26:66:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    75:85:void randomizePose(net.minecraft.world.entity.decoration.ArmorStand,java.util.Random) -> a
net.minecraft.world.item.ArrowItem -> bck:
    10:11:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    14:16:net.minecraft.world.entity.projectile.AbstractArrow createArrow(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.item.AxeItem -> bcl:
    java.util.Set DIGGABLES -> e
    java.util.Map STRIPABLES -> a
    78:79:void <init>(net.minecraft.world.item.Tier,float,float,net.minecraft.world.item.Item$Properties) -> <init>
    83:87:float getDestroySpeed(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.BlockState) -> a
    92:111:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    105:105:void lambda$useOn$0(net.minecraft.world.item.UseOnContext,net.minecraft.world.entity.player.Player) -> a
    21:75:void <clinit>() -> <clinit>
net.minecraft.world.item.BannerItem -> bcm:
    23:27:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    30:45:void appendHoverTextFromBannerBlockEntityTag(net.minecraft.world.item.ItemStack,java.util.List) -> a
    48:48:net.minecraft.world.item.DyeColor getColor() -> b
    53:54:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
net.minecraft.world.item.BannerPatternItem -> bcn:
    net.minecraft.world.level.block.entity.BannerPattern bannerPattern -> a
    16:18:void <init>(net.minecraft.world.level.block.entity.BannerPattern,net.minecraft.world.item.Item$Properties) -> <init>
    21:21:net.minecraft.world.level.block.entity.BannerPattern getBannerPattern() -> b
    26:27:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    30:30:net.minecraft.network.chat.Component getDisplayName() -> d
net.minecraft.world.item.BedItem -> bco:
    8:9:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    13:13:boolean placeBlock(net.minecraft.world.item.BlockPlaceContext,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.item.BlockItem -> bcp:
    net.minecraft.world.level.block.Block block -> a
    35:37:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    41:48:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    52:90:net.minecraft.world.InteractionResult place(net.minecraft.world.item.BlockPlaceContext) -> a
    94:94:net.minecraft.sounds.SoundEvent getPlaceSound(net.minecraft.world.level.block.state.BlockState) -> a
    99:99:net.minecraft.world.item.BlockPlaceContext updatePlacementContext(net.minecraft.world.item.BlockPlaceContext) -> b
    103:103:boolean updateCustomBlockEntityTag(net.minecraft.core.BlockPos,net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.BlockState) -> a
    108:109:net.minecraft.world.level.block.state.BlockState getPlacementState(net.minecraft.world.item.BlockPlaceContext) -> c
    113:130:net.minecraft.world.level.block.state.BlockState updateBlockStateFromTag(net.minecraft.core.BlockPos,net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.BlockState) -> a
    134:134:net.minecraft.world.level.block.state.BlockState updateState(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.properties.Property,java.lang.String) -> a
    138:140:boolean canPlace(net.minecraft.world.item.BlockPlaceContext,net.minecraft.world.level.block.state.BlockState) -> b
    144:144:boolean mustSurvive() -> T_
    148:148:boolean placeBlock(net.minecraft.world.item.BlockPlaceContext,net.minecraft.world.level.block.state.BlockState) -> a
    153:181:boolean updateCustomBlockEntityTag(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    186:186:java.lang.String getDescriptionId() -> a
    191:194:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
    198:200:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    203:203:net.minecraft.world.level.block.Block getBlock() -> e
    207:208:void registerBlocks(java.util.Map,net.minecraft.world.item.Item) -> a
    134:134:net.minecraft.world.level.block.state.BlockState lambda$updateState$0(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> a
net.minecraft.world.item.BlockPlaceContext -> bcq:
    net.minecraft.core.BlockPos relativePos -> g
    boolean replaceClicked -> a
    20:21:void <init>(net.minecraft.world.item.UseOnContext) -> <init>
    16:28:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.item.ItemStack,net.minecraft.world.phys.BlockHitResult) -> <init>
    31:40:net.minecraft.world.item.BlockPlaceContext at(net.minecraft.world.item.BlockPlaceContext,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    51:51:net.minecraft.core.BlockPos getClickedPos() -> a
    55:55:boolean canPlace() -> b
    59:59:boolean replacingClickedOnBlock() -> c
    63:63:net.minecraft.core.Direction getNearestLookingDirection() -> d
    67:87:net.minecraft.core.Direction[] getNearestLookingDirections() -> e
net.minecraft.world.item.BoatItem -> bcr:
    java.util.function.Predicate ENTITY_PREDICATE -> a
    net.minecraft.world.entity.vehicle.Boat$Type type -> b
    25:27:void <init>(net.minecraft.world.entity.vehicle.Boat$Type,net.minecraft.world.item.Item$Properties) -> <init>
    31:69:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.world.item.BoneMealItem -> bcs:
    25:26:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    30:54:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    58:73:boolean growCrop(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    77:133:boolean growWaterPlant(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    137:152:void addGrowthParticles(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,int) -> a
net.minecraft.world.item.BookItem -> bct:
    5:6:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    10:10:boolean isEnchantable(net.minecraft.world.item.ItemStack) -> g_
    15:15:int getEnchantmentValue() -> c
net.minecraft.world.item.BottleItem -> bcu:
    24:25:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    29:58:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    62:70:net.minecraft.world.item.ItemStack turnBottleIntoItem(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    29:29:boolean lambda$use$0(net.minecraft.world.entity.AreaEffectCloud) -> a
net.minecraft.world.item.BowItem -> bcv:
    23:41:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    45:105:void releaseUsing(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,int) -> a
    108:113:float getPowerForTime(int) -> a
    118:118:int getUseDuration(net.minecraft.world.item.ItemStack) -> f_
    123:123:net.minecraft.world.item.UseAnim getUseAnimation(net.minecraft.world.item.ItemStack) -> e_
    128:134:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    139:139:java.util.function.Predicate getAllSupportedProjectiles() -> b
    87:87:void lambda$releaseUsing$2(net.minecraft.world.entity.player.Player,net.minecraft.world.entity.player.Player) -> a
    39:39:float lambda$new$1(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> b
    27:34:float lambda$new$0(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> c
net.minecraft.world.item.BowlFoodItem -> bcw:
    9:10:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    14:18:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.item.BucketItem -> bcx:
    net.minecraft.world.level.material.Fluid content -> a
    36:38:void <init>(net.minecraft.world.level.material.Fluid,net.minecraft.world.item.Item$Properties) -> <init>
    42:91:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    95:98:net.minecraft.world.item.ItemStack getEmptySuccessItem(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player) -> a
    102:102:void checkExtraContent(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPos) -> a
    105:116:net.minecraft.world.item.ItemStack createResultItem(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player,net.minecraft.world.item.Item) -> a
    120:160:boolean emptyBucket(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.phys.BlockHitResult) -> a
    165:167:void playEmptySound(net.minecraft.world.entity.player.Player,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
net.minecraft.world.item.CarrotOnAStickItem -> bcy:
    12:13:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    17:37:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    26:26:void lambda$use$0(net.minecraft.world.InteractionHand,net.minecraft.world.entity.player.Player) -> a
net.minecraft.world.item.ChorusFruitItem -> bcz:
    13:14:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    18:45:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.item.ClockItem -> bda:
    13:63:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
net.minecraft.world.item.ClockItem$1 -> bda$1:
    double rotation -> b
    double rota -> c
    long lastUpdateTick -> d
    net.minecraft.world.item.ClockItem this$0 -> a
    17:17:void <init>(net.minecraft.world.item.ClockItem) -> <init>
    24:44:float call(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> call
    48:59:double wobble(net.minecraft.world.level.Level,double) -> a
net.minecraft.world.item.CompassItem -> bdb:
    16:80:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
net.minecraft.world.item.CompassItem$1 -> bdb$1:
    double rotation -> b
    double rota -> c
    long lastUpdateTick -> d
    net.minecraft.world.item.CompassItem this$0 -> a
    20:20:void <init>(net.minecraft.world.item.CompassItem) -> <init>
    27:52:float call(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> call
    56:67:double wobble(net.minecraft.world.level.Level,double) -> a
    71:71:double getFrameRotation(net.minecraft.world.entity.decoration.ItemFrame) -> a
    75:76:double getSpawnToAngle(net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.Entity) -> a
net.minecraft.world.item.ComplexItem -> bdc:
    11:12:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    16:16:boolean isComplex() -> R_
    21:21:net.minecraft.network.protocol.Packet getUpdatePacket(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player) -> a
net.minecraft.world.item.CreativeModeTab -> bdd:
    net.minecraft.world.item.CreativeModeTab[] TABS -> a
    net.minecraft.world.item.CreativeModeTab TAB_BUILDING_BLOCKS -> b
    net.minecraft.world.item.CreativeModeTab TAB_DECORATIONS -> c
    net.minecraft.world.item.CreativeModeTab TAB_REDSTONE -> d
    net.minecraft.world.item.CreativeModeTab TAB_TRANSPORTATION -> e
    net.minecraft.world.item.CreativeModeTab TAB_MISC -> f
    net.minecraft.world.item.CreativeModeTab TAB_SEARCH -> g
    net.minecraft.world.item.CreativeModeTab TAB_FOOD -> h
    net.minecraft.world.item.CreativeModeTab TAB_TOOLS -> i
    net.minecraft.world.item.CreativeModeTab TAB_COMBAT -> j
    net.minecraft.world.item.CreativeModeTab TAB_BREWING -> k
    net.minecraft.world.item.CreativeModeTab TAB_MATERIALS -> l
    net.minecraft.world.item.CreativeModeTab TAB_HOTBAR -> m
    net.minecraft.world.item.CreativeModeTab TAB_INVENTORY -> n
    int id -> o
    java.lang.String langId -> p
    java.lang.String recipeFolderName -> q
    java.lang.String backgroundSuffix -> r
    boolean canScroll -> s
    boolean showTitle -> t
    net.minecraft.world.item.enchantment.EnchantmentCategory[] enchantmentCategories -> u
    net.minecraft.world.item.ItemStack iconItemStack -> v
    102:115:void <init>(int,java.lang.String) -> <init>
    118:118:int getId() -> a
    122:122:java.lang.String getLangId() -> b
    126:126:java.lang.String getRecipeFolderName() -> c
    130:130:java.lang.String getName() -> d
    134:137:net.minecraft.world.item.ItemStack getIconItem() -> e
    net.minecraft.world.item.ItemStack makeIcon() -> f
    143:143:java.lang.String getBackgroundSuffix() -> g
    147:148:net.minecraft.world.item.CreativeModeTab setBackgroundSuffix(java.lang.String) -> a
    152:153:net.minecraft.world.item.CreativeModeTab setRecipeFolderName(java.lang.String) -> b
    157:157:boolean showTitle() -> h
    161:162:net.minecraft.world.item.CreativeModeTab hideTitle() -> i
    166:166:boolean canScroll() -> j
    170:171:net.minecraft.world.item.CreativeModeTab hideScroll() -> k
    175:175:int getColumn() -> l
    179:179:boolean isTopRow() -> m
    183:183:boolean isAlignedRight() -> n
    187:187:net.minecraft.world.item.enchantment.EnchantmentCategory[] getEnchantmentCategories() -> o
    191:192:net.minecraft.world.item.CreativeModeTab setEnchantmentCategories(net.minecraft.world.item.enchantment.EnchantmentCategory[]) -> a
    196:204:boolean hasEnchantmentCategory(net.minecraft.world.item.enchantment.EnchantmentCategory) -> a
    208:211:void fillItemList(net.minecraft.core.NonNullList) -> a
    13:97:void <clinit>() -> <clinit>
net.minecraft.world.item.CreativeModeTab$1 -> bdd$1:
    14:14:void <init>(int,java.lang.String) -> <init>
    17:17:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CreativeModeTab$10 -> bdd$2:
    69:69:void <init>(int,java.lang.String) -> <init>
    72:72:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CreativeModeTab$11 -> bdd$3:
    76:76:void <init>(int,java.lang.String) -> <init>
    79:79:net.minecraft.world.item.ItemStack makeIcon() -> f
    84:84:void fillItemList(net.minecraft.core.NonNullList) -> a
    89:89:boolean isAlignedRight() -> n
net.minecraft.world.item.CreativeModeTab$12 -> bdd$4:
    92:92:void <init>(int,java.lang.String) -> <init>
    95:95:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CreativeModeTab$2 -> bdd$5:
    20:20:void <init>(int,java.lang.String) -> <init>
    23:23:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CreativeModeTab$3 -> bdd$6:
    26:26:void <init>(int,java.lang.String) -> <init>
    29:29:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CreativeModeTab$4 -> bdd$7:
    32:32:void <init>(int,java.lang.String) -> <init>
    35:35:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CreativeModeTab$5 -> bdd$8:
    38:38:void <init>(int,java.lang.String) -> <init>
    41:41:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CreativeModeTab$6 -> bdd$9:
    44:44:void <init>(int,java.lang.String) -> <init>
    47:47:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CreativeModeTab$7 -> bdd$10:
    51:51:void <init>(int,java.lang.String) -> <init>
    54:54:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CreativeModeTab$8 -> bdd$11:
    57:57:void <init>(int,java.lang.String) -> <init>
    60:60:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CreativeModeTab$9 -> bdd$12:
    63:63:void <init>(int,java.lang.String) -> <init>
    66:66:net.minecraft.world.item.ItemStack makeIcon() -> f
net.minecraft.world.item.CrossbowItem -> bde:
    boolean startSoundPlayed -> c
    boolean midLoadSoundPlayed -> d
    56:85:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    89:89:java.util.function.Predicate getSupportedHeldProjectiles() -> d
    94:94:java.util.function.Predicate getAllSupportedProjectiles() -> b
    99:115:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    120:130:void releaseUsing(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,int) -> a
    133:154:boolean tryLoadProjectiles(net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    158:175:boolean loadProjectile(net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,boolean,boolean) -> a
    179:180:boolean isCharged(net.minecraft.world.item.ItemStack) -> d
    184:186:void setCharged(net.minecraft.world.item.ItemStack,boolean) -> a
    189:200:void addChargedProjectile(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    203:216:java.util.List getChargedProjectiles(net.minecraft.world.item.ItemStack) -> j
    220:226:void clearChargedProjectiles(net.minecraft.world.item.ItemStack) -> k
    229:229:boolean containsChargedProjectile(net.minecraft.world.item.ItemStack,net.minecraft.world.item.Item) -> a
    233:264:void shootProjectile(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,net.minecraft.world.InteractionHand,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,float,boolean,float,float,float) -> a
    267:280:net.minecraft.world.entity.projectile.AbstractArrow getArrow(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    284:305:void performShooting(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,net.minecraft.world.InteractionHand,net.minecraft.world.item.ItemStack,float,float) -> a
    308:309:float[] getShotPitches(java.util.Random) -> a
    313:314:float getRandomShotPitch(boolean) -> a
    318:328:void onCrossbowShot(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    332:353:void onUseTick(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack,int) -> a
    357:357:int getUseDuration(net.minecraft.world.item.ItemStack) -> f_
    361:362:int getChargeDuration(net.minecraft.world.item.ItemStack) -> e
    367:367:net.minecraft.world.item.UseAnim getUseAnimation(net.minecraft.world.item.ItemStack) -> e_
    371:379:net.minecraft.sounds.SoundEvent getStartSound(int) -> a
    384:388:float getPowerForTime(int,net.minecraft.world.item.ItemStack) -> a
    393:411:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    414:417:float getShootingPower(net.minecraft.world.item.ItemStack) -> l
    261:261:void lambda$shootProjectile$5(net.minecraft.world.InteractionHand,net.minecraft.world.entity.LivingEntity) -> a
    229:229:boolean lambda$containsChargedProjectile$4(net.minecraft.world.item.Item,net.minecraft.world.item.ItemStack) -> a
    83:83:float lambda$new$3(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> b
    79:79:float lambda$new$2(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> c
    75:75:float lambda$new$1(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> d
    62:70:float lambda$new$0(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> e
net.minecraft.world.item.DebugStickItem -> bdf:
    26:27:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    31:31:boolean isFoil(net.minecraft.world.item.ItemStack) -> d_
    36:40:boolean canAttackBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    45:53:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    57:90:void handleInteraction(net.minecraft.world.entity.player.Player,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,boolean,net.minecraft.world.item.ItemStack) -> a
    93:93:net.minecraft.world.level.block.state.BlockState cycleState(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.properties.Property,boolean) -> a
    97:97:java.lang.Object getRelative(java.lang.Iterable,java.lang.Object,boolean) -> a
    101:102:void message(net.minecraft.world.entity.player.Player,net.minecraft.network.chat.Component) -> a
    105:105:java.lang.String getNameHelper(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.properties.Property) -> a
net.minecraft.world.item.DiggerItem -> bdg:
    java.util.Set blocks -> a
    float speed -> b
    float attackDamage -> c
    float attackSpeed -> d
    22:27:void <init>(float,float,net.minecraft.world.item.Tier,java.util.Set,net.minecraft.world.item.Item$Properties) -> <init>
    31:31:float getDestroySpeed(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.BlockState) -> a
    36:37:boolean hurtEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    43:46:boolean mineBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.entity.LivingEntity) -> a
    51:59:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EquipmentSlot) -> a
    44:44:void lambda$mineBlock$1(net.minecraft.world.entity.LivingEntity) -> a
    36:36:void lambda$hurtEnemy$0(net.minecraft.world.entity.LivingEntity) -> b
net.minecraft.world.item.DirectionalPlaceContext -> bdh:
    net.minecraft.core.Direction direction -> g
    14:17:void <init>(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> <init>
    21:21:net.minecraft.core.BlockPos getClickedPos() -> a
    26:26:boolean canPlace() -> b
    31:31:boolean replacingClickedOnBlock() -> c
    36:36:net.minecraft.core.Direction getNearestLookingDirection() -> d
    41:54:net.minecraft.core.Direction[] getNearestLookingDirections() -> e
    60:60:net.minecraft.core.Direction getHorizontalDirection() -> f
    65:65:boolean isSecondaryUseActive() -> g
    70:70:float getRotation() -> h
net.minecraft.world.item.DirectionalPlaceContext$1 -> bdh$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    41:41:void <clinit>() -> <clinit>
net.minecraft.world.item.DoubleHighBlockItem -> bdi:
    9:10:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    14:15:boolean placeBlock(net.minecraft.world.item.BlockPlaceContext,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.item.DyeColor -> bdj:
    net.minecraft.world.item.DyeColor WHITE -> a
    net.minecraft.world.item.DyeColor ORANGE -> b
    net.minecraft.world.item.DyeColor MAGENTA -> c
    net.minecraft.world.item.DyeColor LIGHT_BLUE -> d
    net.minecraft.world.item.DyeColor YELLOW -> e
    net.minecraft.world.item.DyeColor LIME -> f
    net.minecraft.world.item.DyeColor PINK -> g
    net.minecraft.world.item.DyeColor GRAY -> h
    net.minecraft.world.item.DyeColor LIGHT_GRAY -> i
    net.minecraft.world.item.DyeColor CYAN -> j
    net.minecraft.world.item.DyeColor PURPLE -> k
    net.minecraft.world.item.DyeColor BLUE -> l
    net.minecraft.world.item.DyeColor BROWN -> m
    net.minecraft.world.item.DyeColor GREEN -> n
    net.minecraft.world.item.DyeColor RED -> o
    net.minecraft.world.item.DyeColor BLACK -> p
    net.minecraft.world.item.DyeColor[] BY_ID -> q
    it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap BY_FIREWORK_COLOR -> r
    int id -> s
    java.lang.String name -> t
    net.minecraft.world.level.material.MaterialColor color -> u
    int textureDiffuseColor -> v
    int textureDiffuseColorBGR -> w
    float[] textureDiffuseColors -> x
    int fireworkColor -> y
    int textColor -> z
    net.minecraft.world.item.DyeColor[] $VALUES -> A
    12:12:net.minecraft.world.item.DyeColor[] values() -> values
    12:12:net.minecraft.world.item.DyeColor valueOf(java.lang.String) -> valueOf
    43:56:void <init>(java.lang.String,int,int,java.lang.String,int,net.minecraft.world.level.material.MaterialColor,int,int) -> <init>
    59:59:int getId() -> a
    63:63:java.lang.String getName() -> b
    67:67:int getTextureDiffuseColorBGR() -> c
    71:71:float[] getTextureDiffuseColors() -> d
    75:75:net.minecraft.world.level.material.MaterialColor getMaterialColor() -> e
    79:79:int getFireworkColor() -> f
    83:83:int getTextColor() -> g
    87:90:net.minecraft.world.item.DyeColor byId(int) -> a
    94:100:net.minecraft.world.item.DyeColor byName(java.lang.String,net.minecraft.world.item.DyeColor) -> a
    105:105:net.minecraft.world.item.DyeColor byFireworkColor(int) -> b
    110:110:java.lang.String toString() -> toString
    115:115:java.lang.String getSerializedName() -> o
    32:32:net.minecraft.world.item.DyeColor lambda$static$2(net.minecraft.world.item.DyeColor) -> a
    32:32:java.lang.Integer lambda$static$1(net.minecraft.world.item.DyeColor) -> b
    31:31:net.minecraft.world.item.DyeColor[] lambda$static$0(int) -> c
    12:32:void <clinit>() -> <clinit>
net.minecraft.world.item.DyeItem -> bdk:
    java.util.Map ITEM_BY_COLOR -> a
    net.minecraft.world.item.DyeColor dyeColor -> b
    17:20:void <init>(net.minecraft.world.item.DyeColor,net.minecraft.world.item.Item$Properties) -> <init>
    24:33:boolean interactEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player,net.minecraft.world.entity.LivingEntity,net.minecraft.world.InteractionHand) -> a
    37:37:net.minecraft.world.item.DyeColor getDyeColor() -> d
    41:41:net.minecraft.world.item.DyeItem byColor(net.minecraft.world.item.DyeColor) -> a
    12:12:void <clinit>() -> <clinit>
net.minecraft.world.item.DyeableArmorItem -> bdl:
    7:8:void <init>(net.minecraft.world.item.ArmorMaterial,net.minecraft.world.entity.EquipmentSlot,net.minecraft.world.item.Item$Properties) -> <init>
net.minecraft.world.item.DyeableHorseArmorItem -> bdm:
    5:6:void <init>(int,java.lang.String,net.minecraft.world.item.Item$Properties) -> <init>
net.minecraft.world.item.DyeableLeatherItem -> bdn:
    14:15:boolean hasCustomColor(net.minecraft.world.item.ItemStack) -> a
    19:23:int getColor(net.minecraft.world.item.ItemStack) -> b
    27:31:void clearColor(net.minecraft.world.item.ItemStack) -> c
    34:35:void setColor(net.minecraft.world.item.ItemStack,int) -> a
    38:102:net.minecraft.world.item.ItemStack dyeArmor(net.minecraft.world.item.ItemStack,java.util.List) -> a
net.minecraft.world.item.EggItem -> bdo:
    14:15:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    19:31:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.ElytraItem -> bdp:
    14:21:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    24:24:boolean isFlyEnabled(net.minecraft.world.item.ItemStack) -> e
    29:29:boolean isValidRepairItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    34:44:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    18:18:float lambda$new$0(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> b
net.minecraft.world.item.EmptyMapItem -> bdq:
    12:13:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    17:31:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.EnchantedBookItem -> bdr:
    21:22:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    26:26:boolean isFoil(net.minecraft.world.item.ItemStack) -> d_
    31:31:boolean isEnchantable(net.minecraft.world.item.ItemStack) -> g_
    35:40:net.minecraft.nbt.ListTag getEnchantments(net.minecraft.world.item.ItemStack) -> e
    45:47:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    50:78:void addEnchantment(net.minecraft.world.item.ItemStack,net.minecraft.world.item.enchantment.EnchantmentInstance) -> a
    81:83:net.minecraft.world.item.ItemStack createForEnchantment(net.minecraft.world.item.enchantment.EnchantmentInstance) -> a
    88:103:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
net.minecraft.world.item.EnchantedGoldenAppleItem -> bds:
    5:6:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    10:10:boolean isFoil(net.minecraft.world.item.ItemStack) -> d_
net.minecraft.world.item.EndCrystalItem -> bdt:
    18:19:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    23:56:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    61:61:boolean isFoil(net.minecraft.world.item.ItemStack) -> d_
net.minecraft.world.item.EnderEyeItem -> bdu:
    29:30:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    34:67:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    72:103:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.EnderpearlItem -> bdv:
    15:16:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    20:34:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.ExperienceBottleItem -> bdw:
    14:15:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    19:19:boolean isFoil(net.minecraft.world.item.ItemStack) -> d_
    24:36:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.FireChargeItem -> bdx:
    15:16:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    20:45:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    49:50:void playSound(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.item.FireworkRocketItem -> bdy:
    39:40:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    78:95:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    100:111:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    117:142:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
net.minecraft.world.item.FireworkRocketItem$Shape -> bdy$a:
    net.minecraft.world.item.FireworkRocketItem$Shape SMALL_BALL -> a
    net.minecraft.world.item.FireworkRocketItem$Shape LARGE_BALL -> b
    net.minecraft.world.item.FireworkRocketItem$Shape STAR -> c
    net.minecraft.world.item.FireworkRocketItem$Shape CREEPER -> d
    net.minecraft.world.item.FireworkRocketItem$Shape BURST -> e
    net.minecraft.world.item.FireworkRocketItem$Shape[] BY_ID -> f
    int id -> g
    java.lang.String name -> h
    net.minecraft.world.item.FireworkRocketItem$Shape[] $VALUES -> i
    42:42:net.minecraft.world.item.FireworkRocketItem$Shape[] values() -> values
    42:42:net.minecraft.world.item.FireworkRocketItem$Shape valueOf(java.lang.String) -> valueOf
    55:58:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    61:61:int getId() -> a
    65:65:java.lang.String getName() -> b
    69:72:net.minecraft.world.item.FireworkRocketItem$Shape byId(int) -> a
    50:50:net.minecraft.world.item.FireworkRocketItem$Shape[] lambda$static$1(int) -> b
    50:50:int lambda$static$0(net.minecraft.world.item.FireworkRocketItem$Shape) -> a
    42:50:void <clinit>() -> <clinit>
net.minecraft.world.item.FireworkStarItem -> bdz:
    15:16:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    20:24:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    27:51:void appendHoverText(net.minecraft.nbt.CompoundTag,java.util.List) -> a
    54:61:net.minecraft.network.chat.Component appendColors(net.minecraft.network.chat.Component,int[]) -> a
    65:69:net.minecraft.network.chat.Component getColorName(int) -> a
net.minecraft.world.item.FishBucketItem -> bea:
    net.minecraft.world.entity.EntityType type -> a
    28:30:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.material.Fluid,net.minecraft.world.item.Item$Properties) -> <init>
    34:37:void checkExtraContent(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPos) -> a
    41:42:void playEmptySound(net.minecraft.world.entity.player.Player,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    45:50:void spawn(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPos) -> b
    54:78:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
net.minecraft.world.item.FishingRodItem -> beb:
    16:33:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    37:53:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    58:58:int getEnchantmentValue() -> c
    41:41:void lambda$use$1(net.minecraft.world.InteractionHand,net.minecraft.world.entity.player.Player) -> a
    21:30:float lambda$new$0(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> b
net.minecraft.world.item.FlintAndSteelItem -> bec:
    22:23:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    27:56:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    60:60:boolean canLightCampFire(net.minecraft.world.level.block.state.BlockState) -> a
    64:73:boolean canUse(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    50:50:void lambda$useOn$1(net.minecraft.world.item.UseOnContext,net.minecraft.world.entity.player.Player) -> a
    36:36:void lambda$useOn$0(net.minecraft.world.item.UseOnContext,net.minecraft.world.entity.player.Player) -> b
net.minecraft.world.item.GameMasterBlockItem -> bed:
    11:12:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    17:18:net.minecraft.world.level.block.state.BlockState getPlacementState(net.minecraft.world.item.BlockPlaceContext) -> c
net.minecraft.world.item.HangingEntityItem -> bee:
    net.minecraft.world.entity.EntityType type -> a
    18:20:void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.item.Item$Properties) -> <init>
    24:59:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    63:63:boolean mayPlace(net.minecraft.world.entity.player.Player,net.minecraft.core.Direction,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPos) -> a
net.minecraft.world.item.HoeItem -> bef:
    float attackSpeed -> b
    java.util.Map TILLABLES -> a
    34:37:void <init>(net.minecraft.world.item.Tier,float,net.minecraft.world.item.Item$Properties) -> <init>
    41:61:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    66:67:boolean hurtEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    72:80:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EquipmentSlot) -> a
    66:66:void lambda$hurtEnemy$1(net.minecraft.world.entity.LivingEntity) -> a
    54:54:void lambda$useOn$0(net.minecraft.world.item.UseOnContext,net.minecraft.world.entity.player.Player) -> a
    26:30:void <clinit>() -> <clinit>
net.minecraft.world.item.HoneyBottleItem -> beg:
    20:21:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    25:47:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> a
    52:52:int getUseDuration(net.minecraft.world.item.ItemStack) -> f_
    57:57:net.minecraft.world.item.UseAnim getUseAnimation(net.minecraft.world.item.ItemStack) -> e_
    62:62:net.minecraft.sounds.SoundEvent getDrinkingSound() -> U_
    67:67:net.minecraft.sounds.SoundEvent getEatingSound() -> S_
    72:73:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.HorseArmorItem -> beh:
    int protection -> a
    java.lang.String texture -> b
    12:15:void <init>(int,java.lang.String,net.minecraft.world.item.Item$Properties) -> <init>
    18:18:net.minecraft.resources.ResourceLocation getTexture() -> f
    22:22:int getProtection() -> g
net.minecraft.world.item.Item -> bei:
    java.util.Map BY_BLOCK -> f
    net.minecraft.world.item.ItemPropertyFunction PROPERTY_DAMAGED -> a
    net.minecraft.world.item.ItemPropertyFunction PROPERTY_DAMAGE -> b
    net.minecraft.world.item.ItemPropertyFunction PROPERTY_LEFTHANDED -> c
    net.minecraft.world.item.ItemPropertyFunction PROPERTY_COOLDOWN -> d
    net.minecraft.world.item.ItemPropertyFunction PROPERTY_CUSTOM_MODEL_DATA -> e
    java.util.UUID BASE_ATTACK_DAMAGE_UUID -> g
    java.util.UUID BASE_ATTACK_SPEED_UUID -> h
    java.util.Random random -> i
    java.util.Map properties -> k
    net.minecraft.world.item.CreativeModeTab category -> j
    net.minecraft.world.item.Rarity rarity -> l
    int maxStackSize -> m
    int maxDamage -> n
    net.minecraft.world.item.Item craftingRemainingItem -> o
    java.lang.String descriptionId -> p
    net.minecraft.world.food.FoodProperties foodProperties -> q
    63:63:int getId(net.minecraft.world.item.Item) -> a
    67:67:net.minecraft.world.item.Item byId(int) -> b
    73:73:net.minecraft.world.item.Item byBlock(net.minecraft.world.level.block.Block) -> a
    76:108:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    158:158:void onUseTick(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack,int) -> a
    162:162:net.minecraft.world.item.ItemPropertyFunction getProperty(net.minecraft.resources.ResourceLocation) -> a
    166:166:boolean hasProperties() -> h
    170:170:boolean verifyTagAfterLoad(net.minecraft.nbt.CompoundTag) -> a
    174:174:boolean canAttackBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    179:179:net.minecraft.world.item.Item asItem() -> i
    183:184:void addProperty(net.minecraft.resources.ResourceLocation,net.minecraft.world.item.ItemPropertyFunction) -> a
    187:187:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    191:191:float getDestroySpeed(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.BlockState) -> a
    195:203:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    207:210:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> a
    214:214:int getMaxStackSize() -> j
    218:218:int getMaxDamage() -> k
    222:222:boolean canBeDepleted() -> l
    229:229:boolean hurtEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    236:236:boolean mineBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.entity.LivingEntity) -> a
    240:240:boolean canDestroySpecial(net.minecraft.world.level.block.state.BlockState) -> b
    244:244:boolean interactEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player,net.minecraft.world.entity.LivingEntity,net.minecraft.world.InteractionHand) -> a
    248:248:net.minecraft.network.chat.Component getDescription() -> m
    254:254:java.lang.String toString() -> toString
    258:261:java.lang.String getOrCreateDescriptionId() -> n
    268:268:java.lang.String getDescriptionId() -> a
    272:272:java.lang.String getDescriptionId(net.minecraft.world.item.ItemStack) -> f
    276:276:boolean shouldOverrideMultiplayerNbt() -> o
    282:282:net.minecraft.world.item.Item getCraftingRemainingItem() -> p
    286:286:boolean hasCraftingRemainingItem() -> q
    290:290:void inventoryTick(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,int,boolean) -> a
    293:293:void onCraftedBy(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player) -> b
    296:296:boolean isComplex() -> R_
    300:300:net.minecraft.world.item.UseAnim getUseAnimation(net.minecraft.world.item.ItemStack) -> e_
    304:307:int getUseDuration(net.minecraft.world.item.ItemStack) -> f_
    311:311:void releaseUsing(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,int) -> a
    314:314:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    317:317:net.minecraft.network.chat.Component getName(net.minecraft.world.item.ItemStack) -> g
    321:321:boolean isFoil(net.minecraft.world.item.ItemStack) -> d_
    325:339:net.minecraft.world.item.Rarity getRarity(net.minecraft.world.item.ItemStack) -> h
    344:344:boolean isEnchantable(net.minecraft.world.item.ItemStack) -> g_
    348:366:net.minecraft.world.phys.HitResult getPlayerPOVHitResult(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.level.ClipContext$Fluid) -> a
    370:370:int getEnchantmentValue() -> c
    374:377:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
    380:381:boolean allowdedIn(net.minecraft.world.item.CreativeModeTab) -> a
    386:386:net.minecraft.world.item.CreativeModeTab getItemCategory() -> r
    390:390:boolean isValidRepairItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    394:394:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EquipmentSlot) -> a
    398:398:boolean useOnRelease(net.minecraft.world.item.ItemStack) -> i
    402:402:net.minecraft.world.item.ItemStack getDefaultInstance() -> s
    406:406:boolean is(net.minecraft.tags.Tag) -> a
    410:410:boolean isEdible() -> t
    415:415:net.minecraft.world.food.FoodProperties getFoodProperties() -> u
    419:419:net.minecraft.sounds.SoundEvent getDrinkingSound() -> U_
    423:423:net.minecraft.sounds.SoundEvent getEatingSound() -> S_
    53:53:float lambda$static$4(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> b
    52:52:float lambda$static$3(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> c
    51:51:float lambda$static$2(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> d
    50:50:float lambda$static$1(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> e
    49:49:float lambda$static$0(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> f
    45:58:void <clinit>() -> <clinit>
net.minecraft.world.item.Item$1 -> bei$1:
    int[] $SwitchMap$net$minecraft$world$item$Rarity -> a
    329:329:void <clinit>() -> <clinit>
net.minecraft.world.item.Item$Properties -> bei$a:
    int maxStackSize -> a
    int maxDamage -> b
    net.minecraft.world.item.Item craftingRemainingItem -> c
    net.minecraft.world.item.CreativeModeTab category -> d
    net.minecraft.world.item.Rarity rarity -> e
    net.minecraft.world.food.FoodProperties foodProperties -> f
    110:115:void <init>() -> <init>
    119:120:net.minecraft.world.item.Item$Properties food(net.minecraft.world.food.FoodProperties) -> a
    124:128:net.minecraft.world.item.Item$Properties stacksTo(int) -> a
    132:132:net.minecraft.world.item.Item$Properties defaultDurability(int) -> b
    136:138:net.minecraft.world.item.Item$Properties durability(int) -> c
    142:143:net.minecraft.world.item.Item$Properties craftRemainder(net.minecraft.world.item.Item) -> a
    147:148:net.minecraft.world.item.Item$Properties tab(net.minecraft.world.item.CreativeModeTab) -> a
    152:153:net.minecraft.world.item.Item$Properties rarity(net.minecraft.world.item.Rarity) -> a
    110:110:net.minecraft.world.item.CreativeModeTab access$000(net.minecraft.world.item.Item$Properties) -> a
    110:110:net.minecraft.world.item.Rarity access$100(net.minecraft.world.item.Item$Properties) -> b
    110:110:net.minecraft.world.item.Item access$200(net.minecraft.world.item.Item$Properties) -> c
    110:110:int access$300(net.minecraft.world.item.Item$Properties) -> d
    110:110:int access$400(net.minecraft.world.item.Item$Properties) -> e
    110:110:net.minecraft.world.food.FoodProperties access$500(net.minecraft.world.item.Item$Properties) -> f
net.minecraft.world.item.ItemCooldowns -> bej:
    java.util.Map cooldowns -> a
    int tickCount -> b
    9:10:void <init>() -> <init>
    14:14:boolean isOnCooldown(net.minecraft.world.item.Item) -> a
    18:26:float getCooldownPercent(net.minecraft.world.item.Item,float) -> a
    30:41:void tick() -> a
    44:46:void addCooldown(net.minecraft.world.item.Item,int) -> a
    49:51:void removeCooldown(net.minecraft.world.item.Item) -> b
    54:54:void onCooldownStarted(net.minecraft.world.item.Item,int) -> b
    57:57:void onCooldownEnded(net.minecraft.world.item.Item) -> c
net.minecraft.world.item.ItemCooldowns$1 -> bej$1:
net.minecraft.world.item.ItemCooldowns$CooldownInstance -> bej$a:
    int startTime -> b
    int endTime -> c
    net.minecraft.world.item.ItemCooldowns this$0 -> a
    63:66:void <init>(net.minecraft.world.item.ItemCooldowns,int,int) -> <init>
    59:59:int access$000(net.minecraft.world.item.ItemCooldowns$CooldownInstance) -> a
    59:59:int access$100(net.minecraft.world.item.ItemCooldowns$CooldownInstance) -> b
    59:59:void <init>(net.minecraft.world.item.ItemCooldowns,int,int,net.minecraft.world.item.ItemCooldowns$1) -> <init>
net.minecraft.world.item.ItemFrameItem -> bek:
    11:12:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    16:16:boolean mayPlace(net.minecraft.world.entity.player.Player,net.minecraft.core.Direction,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPos) -> a
net.minecraft.world.item.ItemNameBlockItem -> bel:
    7:8:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    12:12:java.lang.String getDescriptionId() -> a
net.minecraft.world.item.ItemPropertyFunction -> bem:
    float call(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> call
net.minecraft.world.item.ItemStack -> ben:
    org.apache.logging.log4j.Logger LOGGER -> c
    net.minecraft.world.item.ItemStack EMPTY -> a
    java.text.DecimalFormat ATTRIBUTE_MODIFIER_FORMAT -> b
    int count -> d
    int popTime -> e
    net.minecraft.world.item.Item item -> f
    net.minecraft.nbt.CompoundTag tag -> g
    boolean emptyCacheFlag -> h
    net.minecraft.world.entity.decoration.ItemFrame frame -> i
    net.minecraft.world.level.block.state.pattern.BlockInWorld cachedBreakBlock -> j
    boolean cachedBreakBlockResult -> k
    net.minecraft.world.level.block.state.pattern.BlockInWorld cachedPlaceBlock -> l
    boolean cachedPlaceBlockResult -> m
    107:109:java.text.DecimalFormat getAttributeDecimalFormat() -> H
    113:114:void <init>(net.minecraft.world.level.ItemLike) -> <init>
    116:125:void <init>(net.minecraft.world.level.ItemLike,int) -> <init>
    128:130:void updateEmptyCacheFlag() -> I
    132:146:void <init>(net.minecraft.nbt.CompoundTag) -> <init>
    150:153:net.minecraft.world.item.ItemStack of(net.minecraft.nbt.CompoundTag) -> a
    158:168:boolean isEmpty() -> a
    172:178:net.minecraft.world.item.ItemStack split(int) -> a
    182:182:net.minecraft.world.item.Item getItem() -> b
    186:198:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    202:202:float getDestroySpeed(net.minecraft.world.level.block.state.BlockState) -> a
    206:206:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    210:210:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> a
    214:220:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    224:224:int getMaxStackSize() -> c
    228:228:boolean isStackable() -> d
    232:236:boolean isDamageableItem() -> e
    240:240:boolean isDamaged() -> f
    244:244:int getDamageValue() -> g
    248:249:void setDamageValue(int) -> b
    252:252:int getMaxDamage() -> h
    256:284:boolean hurt(int,java.util.Random,net.minecraft.server.level.ServerPlayer) -> a
    290:309:void hurtAndBreak(int,net.minecraft.world.entity.LivingEntity,java.util.function.Consumer) -> a
    312:316:void hurtEnemy(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.player.Player) -> a
    319:323:void mineBlock(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    326:326:boolean canDestroySpecial(net.minecraft.world.level.block.state.BlockState) -> b
    330:330:boolean interactEnemy(net.minecraft.world.entity.player.Player,net.minecraft.world.entity.LivingEntity,net.minecraft.world.InteractionHand) -> a
    334:342:net.minecraft.world.item.ItemStack copy() -> i
    346:359:boolean tagMatches(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    363:369:boolean matches(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    373:385:boolean matches(net.minecraft.world.item.ItemStack) -> c
    389:395:boolean isSame(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> c
    399:405:boolean isSameIgnoreDurability(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> d
    416:416:boolean sameItem(net.minecraft.world.item.ItemStack) -> a
    428:431:boolean sameItemStackIgnoreDurability(net.minecraft.world.item.ItemStack) -> b
    435:435:java.lang.String getDescriptionId() -> j
    440:440:java.lang.String toString() -> toString
    444:450:void inventoryTick(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,int,boolean) -> a
    453:455:void onCraftedBy(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,int) -> a
    458:458:int getUseDuration() -> k
    462:462:net.minecraft.world.item.UseAnim getUseAnimation() -> l
    466:467:void releaseUsing(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,int) -> a
    470:470:boolean useOnRelease() -> m
    474:474:boolean hasTag() -> n
    479:479:net.minecraft.nbt.CompoundTag getTag() -> o
    483:487:net.minecraft.nbt.CompoundTag getOrCreateTag() -> p
    491:496:net.minecraft.nbt.CompoundTag getOrCreateTagElement(java.lang.String) -> a
    501:504:net.minecraft.nbt.CompoundTag getTagElement(java.lang.String) -> b
    508:514:void removeTagKey(java.lang.String) -> c
    517:520:net.minecraft.nbt.ListTag getEnchantmentTags() -> q
    524:529:void setTag(net.minecraft.nbt.CompoundTag) -> c
    532:548:net.minecraft.network.chat.Component getHoverName() -> r
    552:558:net.minecraft.world.item.ItemStack setHoverName(net.minecraft.network.chat.Component) -> a
    562:574:void resetHoverName() -> s
    577:578:boolean hasCustomHoverName() -> t
    583:734:java.util.List getTooltipLines(net.minecraft.world.entity.player.Player,net.minecraft.world.item.TooltipFlag) -> a
    738:744:void appendEnchantmentNames(java.util.List,net.minecraft.nbt.ListTag) -> a
    748:769:java.util.Collection expandBlockState(java.lang.String) -> d
    773:773:boolean hasFoil() -> u
    777:777:net.minecraft.world.item.Rarity getRarity() -> v
    781:787:boolean isEnchantable() -> w
    791:800:void enchant(net.minecraft.world.item.enchantment.Enchantment,int) -> a
    803:806:boolean isEnchanted() -> x
    810:811:void addTagElement(java.lang.String,net.minecraft.nbt.Tag) -> a
    814:814:boolean isFramed() -> y
    818:819:void setFramed(net.minecraft.world.entity.decoration.ItemFrame) -> a
    823:823:net.minecraft.world.entity.decoration.ItemFrame getFrame() -> z
    827:830:int getBaseRepairCost() -> A
    834:835:void setRepairCost(int) -> c
    840:866:com.google.common.collect.Multimap getAttributeModifiers(net.minecraft.world.entity.EquipmentSlot) -> a
    870:881:void addAttributeModifier(java.lang.String,net.minecraft.world.entity.ai.attributes.AttributeModifier,net.minecraft.world.entity.EquipmentSlot) -> a
    884:896:net.minecraft.network.chat.Component getDisplayName() -> B
    900:909:boolean areSameBlocks(net.minecraft.world.level.block.state.pattern.BlockInWorld,net.minecraft.world.level.block.state.pattern.BlockInWorld) -> a
    917:939:boolean hasAdventureModeBreakTagForBlock(net.minecraft.tags.TagManager,net.minecraft.world.level.block.state.pattern.BlockInWorld) -> a
    947:969:boolean hasAdventureModePlaceTagForBlock(net.minecraft.tags.TagManager,net.minecraft.world.level.block.state.pattern.BlockInWorld) -> b
    973:973:int getPopTime() -> C
    977:978:void setPopTime(int) -> d
    981:981:int getCount() -> D
    985:988:void setCount(int) -> e
    991:992:void grow(int) -> f
    995:996:void shrink(int) -> g
    999:1000:void onUseTick(net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,int) -> b
    1003:1003:boolean isEdible() -> E
    1007:1007:net.minecraft.sounds.SoundEvent getDrinkingSound() -> F
    1011:1011:net.minecraft.sounds.SoundEvent getEatingSound() -> G
    893:893:void lambda$getDisplayName$3(net.minecraft.nbt.CompoundTag,net.minecraft.network.chat.Style) -> a
    865:865:void lambda$getAttributeModifiers$2(net.minecraft.world.entity.ai.attributes.AttributeModifier) -> a
    763:763:net.minecraft.network.chat.Component lambda$expandBlockState$1(net.minecraft.network.chat.Component) -> b
    742:742:void lambda$appendEnchantmentNames$0(java.util.List,net.minecraft.nbt.CompoundTag,net.minecraft.world.item.enchantment.Enchantment) -> a
    67:70:void <clinit>() -> <clinit>
net.minecraft.world.item.Items -> beo:
    net.minecraft.world.item.Item AIR -> a
    net.minecraft.world.item.Item STONE -> b
    net.minecraft.world.item.Item GRANITE -> c
    net.minecraft.world.item.Item POLISHED_GRANITE -> d
    net.minecraft.world.item.Item DIORITE -> e
    net.minecraft.world.item.Item POLISHED_DIORITE -> f
    net.minecraft.world.item.Item ANDESITE -> g
    net.minecraft.world.item.Item POLISHED_ANDESITE -> h
    net.minecraft.world.item.Item GRASS_BLOCK -> i
    net.minecraft.world.item.Item DIRT -> j
    net.minecraft.world.item.Item COARSE_DIRT -> k
    net.minecraft.world.item.Item PODZOL -> l
    net.minecraft.world.item.Item COBBLESTONE -> m
    net.minecraft.world.item.Item OAK_PLANKS -> n
    net.minecraft.world.item.Item SPRUCE_PLANKS -> o
    net.minecraft.world.item.Item BIRCH_PLANKS -> p
    net.minecraft.world.item.Item JUNGLE_PLANKS -> q
    net.minecraft.world.item.Item ACACIA_PLANKS -> r
    net.minecraft.world.item.Item DARK_OAK_PLANKS -> s
    net.minecraft.world.item.Item OAK_SAPLING -> t
    net.minecraft.world.item.Item SPRUCE_SAPLING -> u
    net.minecraft.world.item.Item BIRCH_SAPLING -> v
    net.minecraft.world.item.Item JUNGLE_SAPLING -> w
    net.minecraft.world.item.Item ACACIA_SAPLING -> x
    net.minecraft.world.item.Item DARK_OAK_SAPLING -> y
    net.minecraft.world.item.Item BEDROCK -> z
    net.minecraft.world.item.Item SAND -> A
    net.minecraft.world.item.Item RED_SAND -> B
    net.minecraft.world.item.Item GRAVEL -> C
    net.minecraft.world.item.Item GOLD_ORE -> D
    net.minecraft.world.item.Item IRON_ORE -> E
    net.minecraft.world.item.Item COAL_ORE -> F
    net.minecraft.world.item.Item OAK_LOG -> G
    net.minecraft.world.item.Item SPRUCE_LOG -> H
    net.minecraft.world.item.Item BIRCH_LOG -> I
    net.minecraft.world.item.Item JUNGLE_LOG -> J
    net.minecraft.world.item.Item ACACIA_LOG -> K
    net.minecraft.world.item.Item DARK_OAK_LOG -> L
    net.minecraft.world.item.Item STRIPPED_OAK_LOG -> M
    net.minecraft.world.item.Item STRIPPED_SPRUCE_LOG -> N
    net.minecraft.world.item.Item STRIPPED_BIRCH_LOG -> O
    net.minecraft.world.item.Item STRIPPED_JUNGLE_LOG -> P
    net.minecraft.world.item.Item STRIPPED_ACACIA_LOG -> Q
    net.minecraft.world.item.Item STRIPPED_DARK_OAK_LOG -> R
    net.minecraft.world.item.Item STRIPPED_OAK_WOOD -> S
    net.minecraft.world.item.Item STRIPPED_SPRUCE_WOOD -> T
    net.minecraft.world.item.Item STRIPPED_BIRCH_WOOD -> U
    net.minecraft.world.item.Item STRIPPED_JUNGLE_WOOD -> V
    net.minecraft.world.item.Item STRIPPED_ACACIA_WOOD -> W
    net.minecraft.world.item.Item STRIPPED_DARK_OAK_WOOD -> X
    net.minecraft.world.item.Item OAK_WOOD -> Y
    net.minecraft.world.item.Item SPRUCE_WOOD -> Z
    net.minecraft.world.item.Item BIRCH_WOOD -> aa
    net.minecraft.world.item.Item JUNGLE_WOOD -> ab
    net.minecraft.world.item.Item ACACIA_WOOD -> ac
    net.minecraft.world.item.Item DARK_OAK_WOOD -> ad
    net.minecraft.world.item.Item OAK_LEAVES -> ae
    net.minecraft.world.item.Item SPRUCE_LEAVES -> af
    net.minecraft.world.item.Item BIRCH_LEAVES -> ag
    net.minecraft.world.item.Item JUNGLE_LEAVES -> ah
    net.minecraft.world.item.Item ACACIA_LEAVES -> ai
    net.minecraft.world.item.Item DARK_OAK_LEAVES -> aj
    net.minecraft.world.item.Item SPONGE -> ak
    net.minecraft.world.item.Item WET_SPONGE -> al
    net.minecraft.world.item.Item GLASS -> am
    net.minecraft.world.item.Item LAPIS_ORE -> an
    net.minecraft.world.item.Item LAPIS_BLOCK -> ao
    net.minecraft.world.item.Item DISPENSER -> ap
    net.minecraft.world.item.Item SANDSTONE -> aq
    net.minecraft.world.item.Item CHISELED_SANDSTONE -> ar
    net.minecraft.world.item.Item CUT_SANDSTONE -> as
    net.minecraft.world.item.Item NOTE_BLOCK -> at
    net.minecraft.world.item.Item POWERED_RAIL -> au
    net.minecraft.world.item.Item DETECTOR_RAIL -> av
    net.minecraft.world.item.Item STICKY_PISTON -> aw
    net.minecraft.world.item.Item COBWEB -> ax
    net.minecraft.world.item.Item GRASS -> ay
    net.minecraft.world.item.Item FERN -> az
    net.minecraft.world.item.Item DEAD_BUSH -> aA
    net.minecraft.world.item.Item SEAGRASS -> aB
    net.minecraft.world.item.Item SEA_PICKLE -> aC
    net.minecraft.world.item.Item PISTON -> aD
    net.minecraft.world.item.Item WHITE_WOOL -> aE
    net.minecraft.world.item.Item ORANGE_WOOL -> aF
    net.minecraft.world.item.Item MAGENTA_WOOL -> aG
    net.minecraft.world.item.Item LIGHT_BLUE_WOOL -> aH
    net.minecraft.world.item.Item YELLOW_WOOL -> aI
    net.minecraft.world.item.Item LIME_WOOL -> aJ
    net.minecraft.world.item.Item PINK_WOOL -> aK
    net.minecraft.world.item.Item GRAY_WOOL -> aL
    net.minecraft.world.item.Item LIGHT_GRAY_WOOL -> aM
    net.minecraft.world.item.Item CYAN_WOOL -> aN
    net.minecraft.world.item.Item PURPLE_WOOL -> aO
    net.minecraft.world.item.Item BLUE_WOOL -> aP
    net.minecraft.world.item.Item BROWN_WOOL -> aQ
    net.minecraft.world.item.Item GREEN_WOOL -> aR
    net.minecraft.world.item.Item RED_WOOL -> aS
    net.minecraft.world.item.Item BLACK_WOOL -> aT
    net.minecraft.world.item.Item DANDELION -> aU
    net.minecraft.world.item.Item POPPY -> aV
    net.minecraft.world.item.Item BLUE_ORCHID -> aW
    net.minecraft.world.item.Item ALLIUM -> aX
    net.minecraft.world.item.Item AZURE_BLUET -> aY
    net.minecraft.world.item.Item RED_TULIP -> aZ
    net.minecraft.world.item.Item ORANGE_TULIP -> ba
    net.minecraft.world.item.Item WHITE_TULIP -> bb
    net.minecraft.world.item.Item PINK_TULIP -> bc
    net.minecraft.world.item.Item OXEYE_DAISY -> bd
    net.minecraft.world.item.Item CORNFLOWER -> be
    net.minecraft.world.item.Item LILY_OF_THE_VALLEY -> bf
    net.minecraft.world.item.Item WITHER_ROSE -> bg
    net.minecraft.world.item.Item BROWN_MUSHROOM -> bh
    net.minecraft.world.item.Item RED_MUSHROOM -> bi
    net.minecraft.world.item.Item GOLD_BLOCK -> bj
    net.minecraft.world.item.Item IRON_BLOCK -> bk
    net.minecraft.world.item.Item OAK_SLAB -> bl
    net.minecraft.world.item.Item SPRUCE_SLAB -> bm
    net.minecraft.world.item.Item BIRCH_SLAB -> bn
    net.minecraft.world.item.Item JUNGLE_SLAB -> bo
    net.minecraft.world.item.Item ACACIA_SLAB -> bp
    net.minecraft.world.item.Item DARK_OAK_SLAB -> bq
    net.minecraft.world.item.Item STONE_SLAB -> br
    net.minecraft.world.item.Item SMOOTH_STONE_SLAB -> bs
    net.minecraft.world.item.Item SANDSTONE_SLAB -> bt
    net.minecraft.world.item.Item CUT_STANDSTONE_SLAB -> bu
    net.minecraft.world.item.Item PETRIFIED_OAK_SLAB -> bv
    net.minecraft.world.item.Item COBBLESTONE_SLAB -> bw
    net.minecraft.world.item.Item BRICK_SLAB -> bx
    net.minecraft.world.item.Item STONE_BRICK_SLAB -> by
    net.minecraft.world.item.Item NETHER_BRICK_SLAB -> bz
    net.minecraft.world.item.Item QUARTZ_SLAB -> bA
    net.minecraft.world.item.Item RED_SANDSTONE_SLAB -> bB
    net.minecraft.world.item.Item CUT_RED_SANDSTONE_SLAB -> bC
    net.minecraft.world.item.Item PURPUR_SLAB -> bD
    net.minecraft.world.item.Item PRISMARINE_SLAB -> bE
    net.minecraft.world.item.Item PRISMARINE_BRICK_SLAB -> bF
    net.minecraft.world.item.Item DARK_PRISMARINE_SLAB -> bG
    net.minecraft.world.item.Item SMOOTH_QUARTZ -> bH
    net.minecraft.world.item.Item SMOOTH_RED_SANDSTONE -> bI
    net.minecraft.world.item.Item SMOOTH_SANDSTONE -> bJ
    net.minecraft.world.item.Item SMOOTH_STONE -> bK
    net.minecraft.world.item.Item BRICKS -> bL
    net.minecraft.world.item.Item TNT -> bM
    net.minecraft.world.item.Item BOOKSHELF -> bN
    net.minecraft.world.item.Item MOSSY_COBBLESTONE -> bO
    net.minecraft.world.item.Item OBSIDIAN -> bP
    net.minecraft.world.item.Item TORCH -> bQ
    net.minecraft.world.item.Item END_ROD -> bR
    net.minecraft.world.item.Item CHORUS_PLANT -> bS
    net.minecraft.world.item.Item CHORUS_FLOWER -> bT
    net.minecraft.world.item.Item PURPUR_BLOCK -> bU
    net.minecraft.world.item.Item PURPUR_PILLAR -> bV
    net.minecraft.world.item.Item PURPUR_STAIRS -> bW
    net.minecraft.world.item.Item SPAWNER -> bX
    net.minecraft.world.item.Item OAK_STAIRS -> bY
    net.minecraft.world.item.Item CHEST -> bZ
    net.minecraft.world.item.Item DIAMOND_ORE -> ca
    net.minecraft.world.item.Item DIAMOND_BLOCK -> cb
    net.minecraft.world.item.Item CRAFTING_TABLE -> cc
    net.minecraft.world.item.Item FARMLAND -> cd
    net.minecraft.world.item.Item FURNACE -> ce
    net.minecraft.world.item.Item LADDER -> cf
    net.minecraft.world.item.Item RAIL -> cg
    net.minecraft.world.item.Item COBBLESTONE_STAIRS -> ch
    net.minecraft.world.item.Item LEVER -> ci
    net.minecraft.world.item.Item STONE_PRESSURE_PLATE -> cj
    net.minecraft.world.item.Item OAK_PRESSURE_PLATE -> ck
    net.minecraft.world.item.Item SPRUCE_PRESSURE_PLATE -> cl
    net.minecraft.world.item.Item BIRCH_PRESSURE_PLATE -> cm
    net.minecraft.world.item.Item JUNGLE_PRESSURE_PLATE -> cn
    net.minecraft.world.item.Item ACACIA_PRESSURE_PLATE -> co
    net.minecraft.world.item.Item DARK_OAK_PRESSURE_PLATE -> cp
    net.minecraft.world.item.Item REDSTONE_ORE -> cq
    net.minecraft.world.item.Item REDSTONE_TORCH -> cr
    net.minecraft.world.item.Item STONE_BUTTON -> cs
    net.minecraft.world.item.Item SNOW -> ct
    net.minecraft.world.item.Item ICE -> cu
    net.minecraft.world.item.Item SNOW_BLOCK -> cv
    net.minecraft.world.item.Item CACTUS -> cw
    net.minecraft.world.item.Item CLAY -> cx
    net.minecraft.world.item.Item JUKEBOX -> cy
    net.minecraft.world.item.Item OAK_FENCE -> cz
    net.minecraft.world.item.Item SPRUCE_FENCE -> cA
    net.minecraft.world.item.Item BIRCH_FENCE -> cB
    net.minecraft.world.item.Item JUNGLE_FENCE -> cC
    net.minecraft.world.item.Item ACACIA_FENCE -> cD
    net.minecraft.world.item.Item DARK_OAK_FENCE -> cE
    net.minecraft.world.item.Item PUMPKIN -> cF
    net.minecraft.world.item.Item CARVED_PUMPKIN -> cG
    net.minecraft.world.item.Item NETHERRACK -> cH
    net.minecraft.world.item.Item SOUL_SAND -> cI
    net.minecraft.world.item.Item GLOWSTONE -> cJ
    net.minecraft.world.item.Item JACK_O_LANTERN -> cK
    net.minecraft.world.item.Item OAK_TRAPDOOR -> cL
    net.minecraft.world.item.Item SPRUCE_TRAPDOOR -> cM
    net.minecraft.world.item.Item BIRCH_TRAPDOOR -> cN
    net.minecraft.world.item.Item JUNGLE_TRAPDOOR -> cO
    net.minecraft.world.item.Item ACACIA_TRAPDOOR -> cP
    net.minecraft.world.item.Item DARK_OAK_TRAPDOOR -> cQ
    net.minecraft.world.item.Item INFESTED_STONE -> cR
    net.minecraft.world.item.Item INFESTED_COBBLESTONE -> cS
    net.minecraft.world.item.Item INFESTED_STONE_BRICKS -> cT
    net.minecraft.world.item.Item INFESTED_MOSSY_STONE_BRICKS -> cU
    net.minecraft.world.item.Item INFESTED_CRACKED_STONE_BRICKS -> cV
    net.minecraft.world.item.Item INFESTED_CHISELED_STONE_BRICKS -> cW
    net.minecraft.world.item.Item STONE_BRICKS -> cX
    net.minecraft.world.item.Item MOSSY_STONE_BRICKS -> cY
    net.minecraft.world.item.Item CRACKED_STONE_BRICKS -> cZ
    net.minecraft.world.item.Item CHISELED_STONE_BRICKS -> da
    net.minecraft.world.item.Item BROWN_MUSHROOM_BLOCK -> db
    net.minecraft.world.item.Item RED_MUSHROOM_BLOCK -> dc
    net.minecraft.world.item.Item MUSHROOM_STEM -> dd
    net.minecraft.world.item.Item IRON_BARS -> de
    net.minecraft.world.item.Item GLASS_PANE -> df
    net.minecraft.world.item.Item MELON -> dg
    net.minecraft.world.item.Item VINE -> dh
    net.minecraft.world.item.Item OAK_FENCE_GATE -> di
    net.minecraft.world.item.Item SPRUCE_FENCE_GATE -> dj
    net.minecraft.world.item.Item BIRCH_FENCE_GATE -> dk
    net.minecraft.world.item.Item JUNGLE_FENCE_GATE -> dl
    net.minecraft.world.item.Item ACACIA_FENCE_GATE -> dm
    net.minecraft.world.item.Item DARK_OAK_FENCE_GATE -> dn
    net.minecraft.world.item.Item BRICK_STAIRS -> do
    net.minecraft.world.item.Item STONE_BRICK_STAIRS -> dp
    net.minecraft.world.item.Item MYCELIUM -> dq
    net.minecraft.world.item.Item LILY_PAD -> dr
    net.minecraft.world.item.Item NETHER_BRICKS -> ds
    net.minecraft.world.item.Item NETHER_BRICK_FENCE -> dt
    net.minecraft.world.item.Item NETHER_BRICK_STAIRS -> du
    net.minecraft.world.item.Item ENCHANTING_TABLE -> dv
    net.minecraft.world.item.Item END_PORTAL_FRAME -> dw
    net.minecraft.world.item.Item END_STONE -> dx
    net.minecraft.world.item.Item END_STONE_BRICKS -> dy
    net.minecraft.world.item.Item DRAGON_EGG -> dz
    net.minecraft.world.item.Item REDSTONE_LAMP -> dA
    net.minecraft.world.item.Item SANDSTONE_STAIRS -> dB
    net.minecraft.world.item.Item EMERALD_ORE -> dC
    net.minecraft.world.item.Item ENDER_CHEST -> dD
    net.minecraft.world.item.Item TRIPWIRE_HOOK -> dE
    net.minecraft.world.item.Item EMERALD_BLOCK -> dF
    net.minecraft.world.item.Item SPRUCE_STAIRS -> dG
    net.minecraft.world.item.Item BIRCH_STAIRS -> dH
    net.minecraft.world.item.Item JUNGLE_STAIRS -> dI
    net.minecraft.world.item.Item COMMAND_BLOCK -> dJ
    net.minecraft.world.item.Item BEACON -> dK
    net.minecraft.world.item.Item COBBLESTONE_WALL -> dL
    net.minecraft.world.item.Item MOSSY_COBBLESTONE_WALL -> dM
    net.minecraft.world.item.Item BRICK_WALL -> dN
    net.minecraft.world.item.Item PRISMARINE_WALL -> dO
    net.minecraft.world.item.Item RED_SANDSTONE_WALL -> dP
    net.minecraft.world.item.Item MOSSY_STONE_BRICK_WALL -> dQ
    net.minecraft.world.item.Item GRANITE_WALL -> dR
    net.minecraft.world.item.Item STONE_BRICK_WALL -> dS
    net.minecraft.world.item.Item NETHER_BRICK_WALL -> dT
    net.minecraft.world.item.Item ANDESITE_WALL -> dU
    net.minecraft.world.item.Item RED_NETHER_BRICK_WALL -> dV
    net.minecraft.world.item.Item SANDSTONE_WALL -> dW
    net.minecraft.world.item.Item END_STONE_BRICK_WALL -> dX
    net.minecraft.world.item.Item DIORITE_WALL -> dY
    net.minecraft.world.item.Item OAK_BUTTON -> dZ
    net.minecraft.world.item.Item SPRUCE_BUTTON -> ea
    net.minecraft.world.item.Item BIRCH_BUTTON -> eb
    net.minecraft.world.item.Item JUNGLE_BUTTON -> ec
    net.minecraft.world.item.Item ACACIA_BUTTON -> ed
    net.minecraft.world.item.Item DARK_OAK_BUTTON -> ee
    net.minecraft.world.item.Item ANVIL -> ef
    net.minecraft.world.item.Item CHIPPED_ANVIL -> eg
    net.minecraft.world.item.Item DAMAGED_ANVIL -> eh
    net.minecraft.world.item.Item TRAPPED_CHEST -> ei
    net.minecraft.world.item.Item LIGHT_WEIGHTED_PRESSURE_PLATE -> ej
    net.minecraft.world.item.Item HEAVY_WEIGHTED_PRESSURE_PLATE -> ek
    net.minecraft.world.item.Item DAYLIGHT_DETECTOR -> el
    net.minecraft.world.item.Item REDSTONE_BLOCK -> em
    net.minecraft.world.item.Item NETHER_QUARTZ_ORE -> en
    net.minecraft.world.item.Item HOPPER -> eo
    net.minecraft.world.item.Item CHISELED_QUARTZ_BLOCK -> ep
    net.minecraft.world.item.Item QUARTZ_BLOCK -> eq
    net.minecraft.world.item.Item QUARTZ_PILLAR -> er
    net.minecraft.world.item.Item QUARTZ_STAIRS -> es
    net.minecraft.world.item.Item ACTIVATOR_RAIL -> et
    net.minecraft.world.item.Item DROPPER -> eu
    net.minecraft.world.item.Item WHITE_TERRACOTTA -> ev
    net.minecraft.world.item.Item ORANGE_TERRACOTTA -> ew
    net.minecraft.world.item.Item MAGENTA_TERRACOTTA -> ex
    net.minecraft.world.item.Item LIGHT_BLUE_TERRACOTTA -> ey
    net.minecraft.world.item.Item YELLOW_TERRACOTTA -> ez
    net.minecraft.world.item.Item LIME_TERRACOTTA -> eA
    net.minecraft.world.item.Item PINK_TERRACOTTA -> eB
    net.minecraft.world.item.Item GRAY_TERRACOTTA -> eC
    net.minecraft.world.item.Item LIGHT_GRAY_TERRACOTTA -> eD
    net.minecraft.world.item.Item CYAN_TERRACOTTA -> eE
    net.minecraft.world.item.Item PURPLE_TERRACOTTA -> eF
    net.minecraft.world.item.Item BLUE_TERRACOTTA -> eG
    net.minecraft.world.item.Item BROWN_TERRACOTTA -> eH
    net.minecraft.world.item.Item GREEN_TERRACOTTA -> eI
    net.minecraft.world.item.Item RED_TERRACOTTA -> eJ
    net.minecraft.world.item.Item BLACK_TERRACOTTA -> eK
    net.minecraft.world.item.Item BARRIER -> eL
    net.minecraft.world.item.Item IRON_TRAPDOOR -> eM
    net.minecraft.world.item.Item HAY_BLOCK -> eN
    net.minecraft.world.item.Item WHITE_CARPET -> eO
    net.minecraft.world.item.Item ORANGE_CARPET -> eP
    net.minecraft.world.item.Item MAGENTA_CARPET -> eQ
    net.minecraft.world.item.Item LIGHT_BLUE_CARPET -> eR
    net.minecraft.world.item.Item YELLOW_CARPET -> eS
    net.minecraft.world.item.Item LIME_CARPET -> eT
    net.minecraft.world.item.Item PINK_CARPET -> eU
    net.minecraft.world.item.Item GRAY_CARPET -> eV
    net.minecraft.world.item.Item LIGHT_GRAY_CARPET -> eW
    net.minecraft.world.item.Item CYAN_CARPET -> eX
    net.minecraft.world.item.Item PURPLE_CARPET -> eY
    net.minecraft.world.item.Item BLUE_CARPET -> eZ
    net.minecraft.world.item.Item BROWN_CARPET -> fa
    net.minecraft.world.item.Item GREEN_CARPET -> fb
    net.minecraft.world.item.Item RED_CARPET -> fc
    net.minecraft.world.item.Item BLACK_CARPET -> fd
    net.minecraft.world.item.Item TERRACOTTA -> fe
    net.minecraft.world.item.Item COAL_BLOCK -> ff
    net.minecraft.world.item.Item PACKED_ICE -> fg
    net.minecraft.world.item.Item ACACIA_STAIRS -> fh
    net.minecraft.world.item.Item DARK_OAK_STAIRS -> fi
    net.minecraft.world.item.Item SLIME_BLOCK -> fj
    net.minecraft.world.item.Item GRASS_PATH -> fk
    net.minecraft.world.item.Item SUNFLOWER -> fl
    net.minecraft.world.item.Item LILAC -> fm
    net.minecraft.world.item.Item ROSE_BUSH -> fn
    net.minecraft.world.item.Item PEONY -> fo
    net.minecraft.world.item.Item TALL_GRASS -> fp
    net.minecraft.world.item.Item LARGE_FERN -> fq
    net.minecraft.world.item.Item WHITE_STAINED_GLASS -> fr
    net.minecraft.world.item.Item ORANGE_STAINED_GLASS -> fs
    net.minecraft.world.item.Item MAGENTA_STAINED_GLASS -> ft
    net.minecraft.world.item.Item LIGHT_BLUE_STAINED_GLASS -> fu
    net.minecraft.world.item.Item YELLOW_STAINED_GLASS -> fv
    net.minecraft.world.item.Item LIME_STAINED_GLASS -> fw
    net.minecraft.world.item.Item PINK_STAINED_GLASS -> fx
    net.minecraft.world.item.Item GRAY_STAINED_GLASS -> fy
    net.minecraft.world.item.Item LIGHT_GRAY_STAINED_GLASS -> fz
    net.minecraft.world.item.Item CYAN_STAINED_GLASS -> fA
    net.minecraft.world.item.Item PURPLE_STAINED_GLASS -> fB
    net.minecraft.world.item.Item BLUE_STAINED_GLASS -> fC
    net.minecraft.world.item.Item BROWN_STAINED_GLASS -> fD
    net.minecraft.world.item.Item GREEN_STAINED_GLASS -> fE
    net.minecraft.world.item.Item RED_STAINED_GLASS -> fF
    net.minecraft.world.item.Item BLACK_STAINED_GLASS -> fG
    net.minecraft.world.item.Item WHITE_STAINED_GLASS_PANE -> fH
    net.minecraft.world.item.Item ORANGE_STAINED_GLASS_PANE -> fI
    net.minecraft.world.item.Item MAGENTA_STAINED_GLASS_PANE -> fJ
    net.minecraft.world.item.Item LIGHT_BLUE_STAINED_GLASS_PANE -> fK
    net.minecraft.world.item.Item YELLOW_STAINED_GLASS_PANE -> fL
    net.minecraft.world.item.Item LIME_STAINED_GLASS_PANE -> fM
    net.minecraft.world.item.Item PINK_STAINED_GLASS_PANE -> fN
    net.minecraft.world.item.Item GRAY_STAINED_GLASS_PANE -> fO
    net.minecraft.world.item.Item LIGHT_GRAY_STAINED_GLASS_PANE -> fP
    net.minecraft.world.item.Item CYAN_STAINED_GLASS_PANE -> fQ
    net.minecraft.world.item.Item PURPLE_STAINED_GLASS_PANE -> fR
    net.minecraft.world.item.Item BLUE_STAINED_GLASS_PANE -> fS
    net.minecraft.world.item.Item BROWN_STAINED_GLASS_PANE -> fT
    net.minecraft.world.item.Item GREEN_STAINED_GLASS_PANE -> fU
    net.minecraft.world.item.Item RED_STAINED_GLASS_PANE -> fV
    net.minecraft.world.item.Item BLACK_STAINED_GLASS_PANE -> fW
    net.minecraft.world.item.Item PRISMARINE -> fX
    net.minecraft.world.item.Item PRISMARINE_BRICKS -> fY
    net.minecraft.world.item.Item DARK_PRISMARINE -> fZ
    net.minecraft.world.item.Item PRISMARINE_STAIRS -> ga
    net.minecraft.world.item.Item PRISMARINE_BRICK_STAIRS -> gb
    net.minecraft.world.item.Item DARK_PRISMARINE_STAIRS -> gc
    net.minecraft.world.item.Item SEA_LANTERN -> gd
    net.minecraft.world.item.Item RED_SANDSTONE -> ge
    net.minecraft.world.item.Item CHISELED_RED_SANDSTONE -> gf
    net.minecraft.world.item.Item CUT_RED_SANDSTONE -> gg
    net.minecraft.world.item.Item RED_SANDSTONE_STAIRS -> gh
    net.minecraft.world.item.Item REPEATING_COMMAND_BLOCK -> gi
    net.minecraft.world.item.Item CHAIN_COMMAND_BLOCK -> gj
    net.minecraft.world.item.Item MAGMA_BLOCK -> gk
    net.minecraft.world.item.Item NETHER_WART_BLOCK -> gl
    net.minecraft.world.item.Item RED_NETHER_BRICKS -> gm
    net.minecraft.world.item.Item BONE_BLOCK -> gn
    net.minecraft.world.item.Item STRUCTURE_VOID -> go
    net.minecraft.world.item.Item OBSERVER -> gp
    net.minecraft.world.item.Item SHULKER_BOX -> gq
    net.minecraft.world.item.Item WHITE_SHULKER_BOX -> gr
    net.minecraft.world.item.Item ORANGE_SHULKER_BOX -> gs
    net.minecraft.world.item.Item MAGENTA_SHULKER_BOX -> gt
    net.minecraft.world.item.Item LIGHT_BLUE_SHULKER_BOX -> gu
    net.minecraft.world.item.Item YELLOW_SHULKER_BOX -> gv
    net.minecraft.world.item.Item LIME_SHULKER_BOX -> gw
    net.minecraft.world.item.Item PINK_SHULKER_BOX -> gx
    net.minecraft.world.item.Item GRAY_SHULKER_BOX -> gy
    net.minecraft.world.item.Item LIGHT_GRAY_SHULKER_BOX -> gz
    net.minecraft.world.item.Item CYAN_SHULKER_BOX -> gA
    net.minecraft.world.item.Item PURPLE_SHULKER_BOX -> gB
    net.minecraft.world.item.Item BLUE_SHULKER_BOX -> gC
    net.minecraft.world.item.Item BROWN_SHULKER_BOX -> gD
    net.minecraft.world.item.Item GREEN_SHULKER_BOX -> gE
    net.minecraft.world.item.Item RED_SHULKER_BOX -> gF
    net.minecraft.world.item.Item BLACK_SHULKER_BOX -> gG
    net.minecraft.world.item.Item WHITE_GLAZED_TERRACOTTA -> gH
    net.minecraft.world.item.Item ORANGE_GLAZED_TERRACOTTA -> gI
    net.minecraft.world.item.Item MAGENTA_GLAZED_TERRACOTTA -> gJ
    net.minecraft.world.item.Item LIGHT_BLUE_GLAZED_TERRACOTTA -> gK
    net.minecraft.world.item.Item YELLOW_GLAZED_TERRACOTTA -> gL
    net.minecraft.world.item.Item LIME_GLAZED_TERRACOTTA -> gM
    net.minecraft.world.item.Item PINK_GLAZED_TERRACOTTA -> gN
    net.minecraft.world.item.Item GRAY_GLAZED_TERRACOTTA -> gO
    net.minecraft.world.item.Item LIGHT_GRAY_GLAZED_TERRACOTTA -> gP
    net.minecraft.world.item.Item CYAN_GLAZED_TERRACOTTA -> gQ
    net.minecraft.world.item.Item PURPLE_GLAZED_TERRACOTTA -> gR
    net.minecraft.world.item.Item BLUE_GLAZED_TERRACOTTA -> gS
    net.minecraft.world.item.Item BROWN_GLAZED_TERRACOTTA -> gT
    net.minecraft.world.item.Item GREEN_GLAZED_TERRACOTTA -> gU
    net.minecraft.world.item.Item RED_GLAZED_TERRACOTTA -> gV
    net.minecraft.world.item.Item BLACK_GLAZED_TERRACOTTA -> gW
    net.minecraft.world.item.Item WHITE_CONCRETE -> gX
    net.minecraft.world.item.Item ORANGE_CONCRETE -> gY
    net.minecraft.world.item.Item MAGENTA_CONCRETE -> gZ
    net.minecraft.world.item.Item LIGHT_BLUE_CONCRETE -> ha
    net.minecraft.world.item.Item YELLOW_CONCRETE -> hb
    net.minecraft.world.item.Item LIME_CONCRETE -> hc
    net.minecraft.world.item.Item PINK_CONCRETE -> hd
    net.minecraft.world.item.Item GRAY_CONCRETE -> he
    net.minecraft.world.item.Item LIGHT_GRAY_CONCRETE -> hf
    net.minecraft.world.item.Item CYAN_CONCRETE -> hg
    net.minecraft.world.item.Item PURPLE_CONCRETE -> hh
    net.minecraft.world.item.Item BLUE_CONCRETE -> hi
    net.minecraft.world.item.Item BROWN_CONCRETE -> hj
    net.minecraft.world.item.Item GREEN_CONCRETE -> hk
    net.minecraft.world.item.Item RED_CONCRETE -> hl
    net.minecraft.world.item.Item BLACK_CONCRETE -> hm
    net.minecraft.world.item.Item WHITE_CONCRETE_POWDER -> hn
    net.minecraft.world.item.Item ORANGE_CONCRETE_POWDER -> ho
    net.minecraft.world.item.Item MAGENTA_CONCRETE_POWDER -> hp
    net.minecraft.world.item.Item LIGHT_BLUE_CONCRETE_POWDER -> hq
    net.minecraft.world.item.Item YELLOW_CONCRETE_POWDER -> hr
    net.minecraft.world.item.Item LIME_CONCRETE_POWDER -> hs
    net.minecraft.world.item.Item PINK_CONCRETE_POWDER -> ht
    net.minecraft.world.item.Item GRAY_CONCRETE_POWDER -> hu
    net.minecraft.world.item.Item LIGHT_GRAY_CONCRETE_POWDER -> hv
    net.minecraft.world.item.Item CYAN_CONCRETE_POWDER -> hw
    net.minecraft.world.item.Item PURPLE_CONCRETE_POWDER -> hx
    net.minecraft.world.item.Item BLUE_CONCRETE_POWDER -> hy
    net.minecraft.world.item.Item BROWN_CONCRETE_POWDER -> hz
    net.minecraft.world.item.Item GREEN_CONCRETE_POWDER -> hA
    net.minecraft.world.item.Item RED_CONCRETE_POWDER -> hB
    net.minecraft.world.item.Item BLACK_CONCRETE_POWDER -> hC
    net.minecraft.world.item.Item TURTLE_EGG -> hD
    net.minecraft.world.item.Item DEAD_TUBE_CORAL_BLOCK -> hE
    net.minecraft.world.item.Item DEAD_BRAIN_CORAL_BLOCK -> hF
    net.minecraft.world.item.Item DEAD_BUBBLE_CORAL_BLOCK -> hG
    net.minecraft.world.item.Item DEAD_FIRE_CORAL_BLOCK -> hH
    net.minecraft.world.item.Item DEAD_HORN_CORAL_BLOCK -> hI
    net.minecraft.world.item.Item TUBE_CORAL_BLOCK -> hJ
    net.minecraft.world.item.Item BRAIN_CORAL_BLOCK -> hK
    net.minecraft.world.item.Item BUBBLE_CORAL_BLOCK -> hL
    net.minecraft.world.item.Item FIRE_CORAL_BLOCK -> hM
    net.minecraft.world.item.Item HORN_CORAL_BLOCK -> hN
    net.minecraft.world.item.Item TUBE_CORAL -> hO
    net.minecraft.world.item.Item BRAIN_CORAL -> hP
    net.minecraft.world.item.Item BUBBLE_CORAL -> hQ
    net.minecraft.world.item.Item FIRE_CORAL -> hR
    net.minecraft.world.item.Item HORN_CORAL -> hS
    net.minecraft.world.item.Item DEAD_BRAIN_CORAL -> hT
    net.minecraft.world.item.Item DEAD_BUBBLE_CORAL -> hU
    net.minecraft.world.item.Item DEAD_FIRE_CORAL -> hV
    net.minecraft.world.item.Item DEAD_HORN_CORAL -> hW
    net.minecraft.world.item.Item DEAD_TUBE_CORAL -> hX
    net.minecraft.world.item.Item TUBE_CORAL_FAN -> hY
    net.minecraft.world.item.Item BRAIN_CORAL_FAN -> hZ
    net.minecraft.world.item.Item BUBBLE_CORAL_FAN -> ia
    net.minecraft.world.item.Item FIRE_CORAL_FAN -> ib
    net.minecraft.world.item.Item HORN_CORAL_FAN -> ic
    net.minecraft.world.item.Item DEAD_TUBE_CORAL_FAN -> id
    net.minecraft.world.item.Item DEAD_BRAIN_CORAL_FAN -> ie
    net.minecraft.world.item.Item DEAD_BUBBLE_CORAL_FAN -> if
    net.minecraft.world.item.Item DEAD_FIRE_CORAL_FAN -> ig
    net.minecraft.world.item.Item DEAD_HORN_CORAL_FAN -> ih
    net.minecraft.world.item.Item BLUE_ICE -> ii
    net.minecraft.world.item.Item CONDUIT -> ij
    net.minecraft.world.item.Item POLISHED_GRANITE_STAIRS -> ik
    net.minecraft.world.item.Item SMOOTH_RED_SANDSTONE_STAIRS -> il
    net.minecraft.world.item.Item MOSSY_STONE_BRICK_STAIRS -> im
    net.minecraft.world.item.Item POLISHED_DIORITE_STAIRS -> in
    net.minecraft.world.item.Item MOSSY_COBBLESTONE_STAIRS -> io
    net.minecraft.world.item.Item END_STONE_BRICK_STAIRS -> ip
    net.minecraft.world.item.Item STONE_STAIRS -> iq
    net.minecraft.world.item.Item SMOOTH_SANDSTONE_STAIRS -> ir
    net.minecraft.world.item.Item SMOOTH_QUARTZ_STAIRS -> is
    net.minecraft.world.item.Item GRANITE_STAIRS -> it
    net.minecraft.world.item.Item ANDESITE_STAIRS -> iu
    net.minecraft.world.item.Item RED_NETHER_BRICK_STAIRS -> iv
    net.minecraft.world.item.Item POLISHED_ANDESITE_STAIRS -> iw
    net.minecraft.world.item.Item DIORITE_STAIRS -> ix
    net.minecraft.world.item.Item POLISHED_GRANITE_SLAB -> iy
    net.minecraft.world.item.Item SMOOTH_RED_SANDSTONE_SLAB -> iz
    net.minecraft.world.item.Item MOSSY_STONE_BRICK_SLAB -> iA
    net.minecraft.world.item.Item POLISHED_DIORITE_SLAB -> iB
    net.minecraft.world.item.Item MOSSY_COBBLESTONE_SLAB -> iC
    net.minecraft.world.item.Item END_STONE_BRICK_SLAB -> iD
    net.minecraft.world.item.Item SMOOTH_SANDSTONE_SLAB -> iE
    net.minecraft.world.item.Item SMOOTH_QUARTZ_SLAB -> iF
    net.minecraft.world.item.Item GRANITE_SLAB -> iG
    net.minecraft.world.item.Item ANDESITE_SLAB -> iH
    net.minecraft.world.item.Item RED_NETHER_BRICK_SLAB -> iI
    net.minecraft.world.item.Item POLISHED_ANDESITE_SLAB -> iJ
    net.minecraft.world.item.Item DIORITE_SLAB -> iK
    net.minecraft.world.item.Item SCAFFOLDING -> iL
    net.minecraft.world.item.Item IRON_DOOR -> iM
    net.minecraft.world.item.Item OAK_DOOR -> iN
    net.minecraft.world.item.Item SPRUCE_DOOR -> iO
    net.minecraft.world.item.Item BIRCH_DOOR -> iP
    net.minecraft.world.item.Item JUNGLE_DOOR -> iQ
    net.minecraft.world.item.Item ACACIA_DOOR -> iR
    net.minecraft.world.item.Item DARK_OAK_DOOR -> iS
    net.minecraft.world.item.Item REPEATER -> iT
    net.minecraft.world.item.Item COMPARATOR -> iU
    net.minecraft.world.item.Item STRUCTURE_BLOCK -> iV
    net.minecraft.world.item.Item JIGSAW -> iW
    net.minecraft.world.item.Item COMPOSTER -> iX
    net.minecraft.world.item.Item TURTLE_HELMET -> iY
    net.minecraft.world.item.Item SCUTE -> iZ
    net.minecraft.world.item.Item IRON_SHOVEL -> ja
    net.minecraft.world.item.Item IRON_PICKAXE -> jb
    net.minecraft.world.item.Item IRON_AXE -> jc
    net.minecraft.world.item.Item FLINT_AND_STEEL -> jd
    net.minecraft.world.item.Item APPLE -> je
    net.minecraft.world.item.Item BOW -> jf
    net.minecraft.world.item.Item ARROW -> jg
    net.minecraft.world.item.Item COAL -> jh
    net.minecraft.world.item.Item CHARCOAL -> ji
    net.minecraft.world.item.Item DIAMOND -> jj
    net.minecraft.world.item.Item IRON_INGOT -> jk
    net.minecraft.world.item.Item GOLD_INGOT -> jl
    net.minecraft.world.item.Item IRON_SWORD -> jm
    net.minecraft.world.item.Item WOODEN_SWORD -> jn
    net.minecraft.world.item.Item WOODEN_SHOVEL -> jo
    net.minecraft.world.item.Item WOODEN_PICKAXE -> jp
    net.minecraft.world.item.Item WOODEN_AXE -> jq
    net.minecraft.world.item.Item STONE_SWORD -> jr
    net.minecraft.world.item.Item STONE_SHOVEL -> js
    net.minecraft.world.item.Item STONE_PICKAXE -> jt
    net.minecraft.world.item.Item STONE_AXE -> ju
    net.minecraft.world.item.Item DIAMOND_SWORD -> jv
    net.minecraft.world.item.Item DIAMOND_SHOVEL -> jw
    net.minecraft.world.item.Item DIAMOND_PICKAXE -> jx
    net.minecraft.world.item.Item DIAMOND_AXE -> jy
    net.minecraft.world.item.Item STICK -> jz
    net.minecraft.world.item.Item BOWL -> jA
    net.minecraft.world.item.Item MUSHROOM_STEW -> jB
    net.minecraft.world.item.Item GOLDEN_SWORD -> jC
    net.minecraft.world.item.Item GOLDEN_SHOVEL -> jD
    net.minecraft.world.item.Item GOLDEN_PICKAXE -> jE
    net.minecraft.world.item.Item GOLDEN_AXE -> jF
    net.minecraft.world.item.Item STRING -> jG
    net.minecraft.world.item.Item FEATHER -> jH
    net.minecraft.world.item.Item GUNPOWDER -> jI
    net.minecraft.world.item.Item WOODEN_HOE -> jJ
    net.minecraft.world.item.Item STONE_HOE -> jK
    net.minecraft.world.item.Item IRON_HOE -> jL
    net.minecraft.world.item.Item DIAMOND_HOE -> jM
    net.minecraft.world.item.Item GOLDEN_HOE -> jN
    net.minecraft.world.item.Item WHEAT_SEEDS -> jO
    net.minecraft.world.item.Item WHEAT -> jP
    net.minecraft.world.item.Item BREAD -> jQ
    net.minecraft.world.item.Item LEATHER_HELMET -> jR
    net.minecraft.world.item.Item LEATHER_CHESTPLATE -> jS
    net.minecraft.world.item.Item LEATHER_LEGGINGS -> jT
    net.minecraft.world.item.Item LEATHER_BOOTS -> jU
    net.minecraft.world.item.Item CHAINMAIL_HELMET -> jV
    net.minecraft.world.item.Item CHAINMAIL_CHESTPLATE -> jW
    net.minecraft.world.item.Item CHAINMAIL_LEGGINGS -> jX
    net.minecraft.world.item.Item CHAINMAIL_BOOTS -> jY
    net.minecraft.world.item.Item IRON_HELMET -> jZ
    net.minecraft.world.item.Item IRON_CHESTPLATE -> ka
    net.minecraft.world.item.Item IRON_LEGGINGS -> kb
    net.minecraft.world.item.Item IRON_BOOTS -> kc
    net.minecraft.world.item.Item DIAMOND_HELMET -> kd
    net.minecraft.world.item.Item DIAMOND_CHESTPLATE -> ke
    net.minecraft.world.item.Item DIAMOND_LEGGINGS -> kf
    net.minecraft.world.item.Item DIAMOND_BOOTS -> kg
    net.minecraft.world.item.Item GOLDEN_HELMET -> kh
    net.minecraft.world.item.Item GOLDEN_CHESTPLATE -> ki
    net.minecraft.world.item.Item GOLDEN_LEGGINGS -> kj
    net.minecraft.world.item.Item GOLDEN_BOOTS -> kk
    net.minecraft.world.item.Item FLINT -> kl
    net.minecraft.world.item.Item PORKCHOP -> km
    net.minecraft.world.item.Item COOKED_PORKCHOP -> kn
    net.minecraft.world.item.Item PAINTING -> ko
    net.minecraft.world.item.Item GOLDEN_APPLE -> kp
    net.minecraft.world.item.Item ENCHANTED_GOLDEN_APPLE -> kq
    net.minecraft.world.item.Item OAK_SIGN -> kr
    net.minecraft.world.item.Item SPRUCE_SIGN -> ks
    net.minecraft.world.item.Item BIRCH_SIGN -> kt
    net.minecraft.world.item.Item JUNGLE_SIGN -> ku
    net.minecraft.world.item.Item ACACIA_SIGN -> kv
    net.minecraft.world.item.Item DARK_OAK_SIGN -> kw
    net.minecraft.world.item.Item BUCKET -> kx
    net.minecraft.world.item.Item WATER_BUCKET -> ky
    net.minecraft.world.item.Item LAVA_BUCKET -> kz
    net.minecraft.world.item.Item MINECART -> kA
    net.minecraft.world.item.Item SADDLE -> kB
    net.minecraft.world.item.Item REDSTONE -> kC
    net.minecraft.world.item.Item SNOWBALL -> kD
    net.minecraft.world.item.Item OAK_BOAT -> kE
    net.minecraft.world.item.Item LEATHER -> kF
    net.minecraft.world.item.Item MILK_BUCKET -> kG
    net.minecraft.world.item.Item PUFFERFISH_BUCKET -> kH
    net.minecraft.world.item.Item SALMON_BUCKET -> kI
    net.minecraft.world.item.Item COD_BUCKET -> kJ
    net.minecraft.world.item.Item TROPICAL_FISH_BUCKET -> kK
    net.minecraft.world.item.Item BRICK -> kL
    net.minecraft.world.item.Item CLAY_BALL -> kM
    net.minecraft.world.item.Item SUGAR_CANE -> kN
    net.minecraft.world.item.Item KELP -> kO
    net.minecraft.world.item.Item DRIED_KELP_BLOCK -> kP
    net.minecraft.world.item.Item BAMBOO -> kQ
    net.minecraft.world.item.Item PAPER -> kR
    net.minecraft.world.item.Item BOOK -> kS
    net.minecraft.world.item.Item SLIME_BALL -> kT
    net.minecraft.world.item.Item CHEST_MINECART -> kU
    net.minecraft.world.item.Item FURNACE_MINECART -> kV
    net.minecraft.world.item.Item EGG -> kW
    net.minecraft.world.item.Item COMPASS -> kX
    net.minecraft.world.item.Item FISHING_ROD -> kY
    net.minecraft.world.item.Item CLOCK -> kZ
    net.minecraft.world.item.Item GLOWSTONE_DUST -> la
    net.minecraft.world.item.Item COD -> lb
    net.minecraft.world.item.Item SALMON -> lc
    net.minecraft.world.item.Item TROPICAL_FISH -> ld
    net.minecraft.world.item.Item PUFFERFISH -> le
    net.minecraft.world.item.Item COOKED_COD -> lf
    net.minecraft.world.item.Item COOKED_SALMON -> lg
    net.minecraft.world.item.Item INK_SAC -> lh
    net.minecraft.world.item.Item RED_DYE -> li
    net.minecraft.world.item.Item GREEN_DYE -> lj
    net.minecraft.world.item.Item COCOA_BEANS -> lk
    net.minecraft.world.item.Item LAPIS_LAZULI -> ll
    net.minecraft.world.item.Item PURPLE_DYE -> lm
    net.minecraft.world.item.Item CYAN_DYE -> ln
    net.minecraft.world.item.Item LIGHT_GRAY_DYE -> lo
    net.minecraft.world.item.Item GRAY_DYE -> lp
    net.minecraft.world.item.Item PINK_DYE -> lq
    net.minecraft.world.item.Item LIME_DYE -> lr
    net.minecraft.world.item.Item YELLOW_DYE -> ls
    net.minecraft.world.item.Item LIGHT_BLUE_DYE -> lt
    net.minecraft.world.item.Item MAGENTA_DYE -> lu
    net.minecraft.world.item.Item ORANGE_DYE -> lv
    net.minecraft.world.item.Item BONE_MEAL -> lw
    net.minecraft.world.item.Item BLUE_DYE -> lx
    net.minecraft.world.item.Item BROWN_DYE -> ly
    net.minecraft.world.item.Item BLACK_DYE -> lz
    net.minecraft.world.item.Item WHITE_DYE -> lA
    net.minecraft.world.item.Item BONE -> lB
    net.minecraft.world.item.Item SUGAR -> lC
    net.minecraft.world.item.Item CAKE -> lD
    net.minecraft.world.item.Item WHITE_BED -> lE
    net.minecraft.world.item.Item ORANGE_BED -> lF
    net.minecraft.world.item.Item MAGENTA_BED -> lG
    net.minecraft.world.item.Item LIGHT_BLUE_BED -> lH
    net.minecraft.world.item.Item YELLOW_BED -> lI
    net.minecraft.world.item.Item LIME_BED -> lJ
    net.minecraft.world.item.Item PINK_BED -> lK
    net.minecraft.world.item.Item GRAY_BED -> lL
    net.minecraft.world.item.Item LIGHT_GRAY_BED -> lM
    net.minecraft.world.item.Item CYAN_BED -> lN
    net.minecraft.world.item.Item PURPLE_BED -> lO
    net.minecraft.world.item.Item BLUE_BED -> lP
    net.minecraft.world.item.Item BROWN_BED -> lQ
    net.minecraft.world.item.Item GREEN_BED -> lR
    net.minecraft.world.item.Item RED_BED -> lS
    net.minecraft.world.item.Item BLACK_BED -> lT
    net.minecraft.world.item.Item COOKIE -> lU
    net.minecraft.world.item.Item FILLED_MAP -> lV
    net.minecraft.world.item.Item SHEARS -> lW
    net.minecraft.world.item.Item MELON_SLICE -> lX
    net.minecraft.world.item.Item DRIED_KELP -> lY
    net.minecraft.world.item.Item PUMPKIN_SEEDS -> lZ
    net.minecraft.world.item.Item MELON_SEEDS -> ma
    net.minecraft.world.item.Item BEEF -> mb
    net.minecraft.world.item.Item COOKED_BEEF -> mc
    net.minecraft.world.item.Item CHICKEN -> md
    net.minecraft.world.item.Item COOKED_CHICKEN -> me
    net.minecraft.world.item.Item ROTTEN_FLESH -> mf
    net.minecraft.world.item.Item ENDER_PEARL -> mg
    net.minecraft.world.item.Item BLAZE_ROD -> mh
    net.minecraft.world.item.Item GHAST_TEAR -> mi
    net.minecraft.world.item.Item GOLD_NUGGET -> mj
    net.minecraft.world.item.Item NETHER_WART -> mk
    net.minecraft.world.item.Item POTION -> ml
    net.minecraft.world.item.Item GLASS_BOTTLE -> mm
    net.minecraft.world.item.Item SPIDER_EYE -> mn
    net.minecraft.world.item.Item FERMENTED_SPIDER_EYE -> mo
    net.minecraft.world.item.Item BLAZE_POWDER -> mp
    net.minecraft.world.item.Item MAGMA_CREAM -> mq
    net.minecraft.world.item.Item BREWING_STAND -> mr
    net.minecraft.world.item.Item CAULDRON -> ms
    net.minecraft.world.item.Item ENDER_EYE -> mt
    net.minecraft.world.item.Item GLISTERING_MELON_SLICE -> mu
    net.minecraft.world.item.Item BAT_SPAWN_EGG -> mv
    net.minecraft.world.item.Item BEE_SPAWN_EGG -> mw
    net.minecraft.world.item.Item BLAZE_SPAWN_EGG -> mx
    net.minecraft.world.item.Item CAT_SPAWN_EGG -> my
    net.minecraft.world.item.Item CAVE_SPIDER_SPAWN_EGG -> mz
    net.minecraft.world.item.Item CHICKEN_SPAWN_EGG -> mA
    net.minecraft.world.item.Item COD_SPAWN_EGG -> mB
    net.minecraft.world.item.Item COW_SPAWN_EGG -> mC
    net.minecraft.world.item.Item CREEPER_SPAWN_EGG -> mD
    net.minecraft.world.item.Item DOLPHIN_SPAWN_EGG -> mE
    net.minecraft.world.item.Item DONKEY_SPAWN_EGG -> mF
    net.minecraft.world.item.Item DROWNED_SPAWN_EGG -> mG
    net.minecraft.world.item.Item ELDER_GUARDIAN_SPAWN_EGG -> mH
    net.minecraft.world.item.Item ENDERMAN_SPAWN_EGG -> mI
    net.minecraft.world.item.Item ENDERMITE_SPAWN_EGG -> mJ
    net.minecraft.world.item.Item EVOKER_SPAWN_EGG -> mK
    net.minecraft.world.item.Item FOX_SPAWN_EGG -> mL
    net.minecraft.world.item.Item GHAST_SPAWN_EGG -> mM
    net.minecraft.world.item.Item GUARDIAN_SPAWN_EGG -> mN
    net.minecraft.world.item.Item HORSE_SPAWN_EGG -> mO
    net.minecraft.world.item.Item HUSK_SPAWN_EGG -> mP
    net.minecraft.world.item.Item LLAMA_SPAWN_EGG -> mQ
    net.minecraft.world.item.Item MAGMA_CUBE_SPAWN_EGG -> mR
    net.minecraft.world.item.Item MOOSHROOM_SPAWN_EGG -> mS
    net.minecraft.world.item.Item MULE_SPAWN_EGG -> mT
    net.minecraft.world.item.Item OCELOT_SPAWN_EGG -> mU
    net.minecraft.world.item.Item PANDA_SPAWN_EGG -> mV
    net.minecraft.world.item.Item PARROT_SPAWN_EGG -> mW
    net.minecraft.world.item.Item PHANTOM_SPAWN_EGG -> mX
    net.minecraft.world.item.Item PIG_SPAWN_EGG -> mY
    net.minecraft.world.item.Item PILLAGER_SPAWN_EGG -> mZ
    net.minecraft.world.item.Item POLAR_BEAR_SPAWN_EGG -> na
    net.minecraft.world.item.Item PUFFERFISH_SPAWN_EGG -> nb
    net.minecraft.world.item.Item RABBIT_SPAWN_EGG -> nc
    net.minecraft.world.item.Item RAVAGER_SPAWN_EGG -> nd
    net.minecraft.world.item.Item SALMON_SPAWN_EGG -> ne
    net.minecraft.world.item.Item SHEEP_SPAWN_EGG -> nf
    net.minecraft.world.item.Item SHULKER_SPAWN_EGG -> ng
    net.minecraft.world.item.Item SILVERFISH_SPAWN_EGG -> nh
    net.minecraft.world.item.Item SKELETON_SPAWN_EGG -> ni
    net.minecraft.world.item.Item SKELETON_HORSE_SPAWN_EGG -> nj
    net.minecraft.world.item.Item SLIME_SPAWN_EGG -> nk
    net.minecraft.world.item.Item SPIDER_SPAWN_EGG -> nl
    net.minecraft.world.item.Item SQUID_SPAWN_EGG -> nm
    net.minecraft.world.item.Item STRAY_SPAWN_EGG -> nn
    net.minecraft.world.item.Item TRADER_LLAMA_SPAWN_EGG -> no
    net.minecraft.world.item.Item TROPICAL_FISH_SPAWN_EGG -> np
    net.minecraft.world.item.Item TURTLE_SPAWN_EGG -> nq
    net.minecraft.world.item.Item VEX_SPAWN_EGG -> nr
    net.minecraft.world.item.Item VILLAGER_SPAWN_EGG -> ns
    net.minecraft.world.item.Item VINDICATOR_SPAWN_EGG -> nt
    net.minecraft.world.item.Item WANDERING_TRADER_SPAWN_EGG -> nu
    net.minecraft.world.item.Item WITCH_SPAWN_EGG -> nv
    net.minecraft.world.item.Item WITHER_SKELETON_SPAWN_EGG -> nw
    net.minecraft.world.item.Item WOLF_SPAWN_EGG -> nx
    net.minecraft.world.item.Item ZOMBIE_SPAWN_EGG -> ny
    net.minecraft.world.item.Item ZOMBIE_HORSE_SPAWN_EGG -> nz
    net.minecraft.world.item.Item ZOMBIE_PIGMAN_SPAWN_EGG -> nA
    net.minecraft.world.item.Item ZOMBIE_VILLAGER_SPAWN_EGG -> nB
    net.minecraft.world.item.Item EXPERIENCE_BOTTLE -> nC
    net.minecraft.world.item.Item FIRE_CHARGE -> nD
    net.minecraft.world.item.Item WRITABLE_BOOK -> nE
    net.minecraft.world.item.Item WRITTEN_BOOK -> nF
    net.minecraft.world.item.Item EMERALD -> nG
    net.minecraft.world.item.Item ITEM_FRAME -> nH
    net.minecraft.world.item.Item FLOWER_POT -> nI
    net.minecraft.world.item.Item CARROT -> nJ
    net.minecraft.world.item.Item POTATO -> nK
    net.minecraft.world.item.Item BAKED_POTATO -> nL
    net.minecraft.world.item.Item POISONOUS_POTATO -> nM
    net.minecraft.world.item.Item MAP -> nN
    net.minecraft.world.item.Item GOLDEN_CARROT -> nO
    net.minecraft.world.item.Item SKELETON_SKULL -> nP
    net.minecraft.world.item.Item WITHER_SKELETON_SKULL -> nQ
    net.minecraft.world.item.Item PLAYER_HEAD -> nR
    net.minecraft.world.item.Item ZOMBIE_HEAD -> nS
    net.minecraft.world.item.Item CREEPER_HEAD -> nT
    net.minecraft.world.item.Item DRAGON_HEAD -> nU
    net.minecraft.world.item.Item CARROT_ON_A_STICK -> nV
    net.minecraft.world.item.Item NETHER_STAR -> nW
    net.minecraft.world.item.Item PUMPKIN_PIE -> nX
    net.minecraft.world.item.Item FIREWORK_ROCKET -> nY
    net.minecraft.world.item.Item FIREWORK_STAR -> nZ
    net.minecraft.world.item.Item ENCHANTED_BOOK -> oa
    net.minecraft.world.item.Item NETHER_BRICK -> ob
    net.minecraft.world.item.Item QUARTZ -> oc
    net.minecraft.world.item.Item TNT_MINECART -> od
    net.minecraft.world.item.Item HOPPER_MINECART -> oe
    net.minecraft.world.item.Item PRISMARINE_SHARD -> of
    net.minecraft.world.item.Item PRISMARINE_CRYSTALS -> og
    net.minecraft.world.item.Item RABBIT -> oh
    net.minecraft.world.item.Item COOKED_RABBIT -> oi
    net.minecraft.world.item.Item RABBIT_STEW -> oj
    net.minecraft.world.item.Item RABBIT_FOOT -> ok
    net.minecraft.world.item.Item RABBIT_HIDE -> ol
    net.minecraft.world.item.Item ARMOR_STAND -> om
    net.minecraft.world.item.Item IRON_HORSE_ARMOR -> on
    net.minecraft.world.item.Item GOLDEN_HORSE_ARMOR -> oo
    net.minecraft.world.item.Item DIAMOND_HORSE_ARMOR -> op
    net.minecraft.world.item.Item LEATHER_HORSE_ARMOR -> oq
    net.minecraft.world.item.Item LEAD -> or
    net.minecraft.world.item.Item NAME_TAG -> os
    net.minecraft.world.item.Item COMMAND_BLOCK_MINECART -> ot
    net.minecraft.world.item.Item MUTTON -> ou
    net.minecraft.world.item.Item COOKED_MUTTON -> ov
    net.minecraft.world.item.Item WHITE_BANNER -> ow
    net.minecraft.world.item.Item ORANGE_BANNER -> ox
    net.minecraft.world.item.Item MAGENTA_BANNER -> oy
    net.minecraft.world.item.Item LIGHT_BLUE_BANNER -> oz
    net.minecraft.world.item.Item YELLOW_BANNER -> oA
    net.minecraft.world.item.Item LIME_BANNER -> oB
    net.minecraft.world.item.Item PINK_BANNER -> oC
    net.minecraft.world.item.Item GRAY_BANNER -> oD
    net.minecraft.world.item.Item LIGHT_GRAY_BANNER -> oE
    net.minecraft.world.item.Item CYAN_BANNER -> oF
    net.minecraft.world.item.Item PURPLE_BANNER -> oG
    net.minecraft.world.item.Item BLUE_BANNER -> oH
    net.minecraft.world.item.Item BROWN_BANNER -> oI
    net.minecraft.world.item.Item GREEN_BANNER -> oJ
    net.minecraft.world.item.Item RED_BANNER -> oK
    net.minecraft.world.item.Item BLACK_BANNER -> oL
    net.minecraft.world.item.Item END_CRYSTAL -> oM
    net.minecraft.world.item.Item CHORUS_FRUIT -> oN
    net.minecraft.world.item.Item POPPED_CHORUS_FRUIT -> oO
    net.minecraft.world.item.Item BEETROOT -> oP
    net.minecraft.world.item.Item BEETROOT_SEEDS -> oQ
    net.minecraft.world.item.Item BEETROOT_SOUP -> oR
    net.minecraft.world.item.Item DRAGON_BREATH -> oS
    net.minecraft.world.item.Item SPLASH_POTION -> oT
    net.minecraft.world.item.Item SPECTRAL_ARROW -> oU
    net.minecraft.world.item.Item TIPPED_ARROW -> oV
    net.minecraft.world.item.Item LINGERING_POTION -> oW
    net.minecraft.world.item.Item SHIELD -> oX
    net.minecraft.world.item.Item ELYTRA -> oY
    net.minecraft.world.item.Item SPRUCE_BOAT -> oZ
    net.minecraft.world.item.Item BIRCH_BOAT -> pa
    net.minecraft.world.item.Item JUNGLE_BOAT -> pb
    net.minecraft.world.item.Item ACACIA_BOAT -> pc
    net.minecraft.world.item.Item DARK_OAK_BOAT -> pd
    net.minecraft.world.item.Item TOTEM_OF_UNDYING -> pe
    net.minecraft.world.item.Item SHULKER_SHELL -> pf
    net.minecraft.world.item.Item IRON_NUGGET -> pg
    net.minecraft.world.item.Item KNOWLEDGE_BOOK -> ph
    net.minecraft.world.item.Item DEBUG_STICK -> pi
    net.minecraft.world.item.Item MUSIC_DISC_13 -> pj
    net.minecraft.world.item.Item MUSIC_DISC_CAT -> pk
    net.minecraft.world.item.Item MUSIC_DISC_BLOCKS -> pl
    net.minecraft.world.item.Item MUSIC_DISC_CHIRP -> pm
    net.minecraft.world.item.Item MUSIC_DISC_FAR -> pn
    net.minecraft.world.item.Item MUSIC_DISC_MALL -> po
    net.minecraft.world.item.Item MUSIC_DISC_MELLOHI -> pp
    net.minecraft.world.item.Item MUSIC_DISC_STAL -> pq
    net.minecraft.world.item.Item MUSIC_DISC_STRAD -> pr
    net.minecraft.world.item.Item MUSIC_DISC_WARD -> ps
    net.minecraft.world.item.Item MUSIC_DISC_11 -> pt
    net.minecraft.world.item.Item MUSIC_DISC_WAIT -> pu
    net.minecraft.world.item.Item TRIDENT -> pv
    net.minecraft.world.item.Item PHANTOM_MEMBRANE -> pw
    net.minecraft.world.item.Item NAUTILUS_SHELL -> px
    net.minecraft.world.item.Item HEART_OF_THE_SEA -> py
    net.minecraft.world.item.Item CROSSBOW -> pz
    net.minecraft.world.item.Item SUSPICIOUS_STEW -> pA
    net.minecraft.world.item.Item LOOM -> pB
    net.minecraft.world.item.Item FLOWER_BANNER_PATTERN -> pC
    net.minecraft.world.item.Item CREEPER_BANNER_PATTERN -> pD
    net.minecraft.world.item.Item SKULL_BANNER_PATTERN -> pE
    net.minecraft.world.item.Item MOJANG_BANNER_PATTERN -> pF
    net.minecraft.world.item.Item GLOBE_BANNER_PATTER -> pG
    net.minecraft.world.item.Item BARREL -> pH
    net.minecraft.world.item.Item SMOKER -> pI
    net.minecraft.world.item.Item BLAST_FURNACE -> pJ
    net.minecraft.world.item.Item CARTOGRAPHY_TABLE -> pK
    net.minecraft.world.item.Item FLETCHING_TABLE -> pL
    net.minecraft.world.item.Item GRINDSTONE -> pM
    net.minecraft.world.item.Item LECTERN -> pN
    net.minecraft.world.item.Item SMITHING_TABLE -> pO
    net.minecraft.world.item.Item STONECUTTER -> pP
    net.minecraft.world.item.Item BELL -> pQ
    net.minecraft.world.item.Item LANTERN -> pR
    net.minecraft.world.item.Item SWEET_BERRIES -> pS
    net.minecraft.world.item.Item CAMPFIRE -> pT
    net.minecraft.world.item.Item HONEYCOMB -> pU
    net.minecraft.world.item.Item BEE_NEST -> pV
    net.minecraft.world.item.Item BEEHIVE -> pW
    net.minecraft.world.item.Item HONEY_BOTTLE -> pX
    net.minecraft.world.item.Item HONEY_BLOCK -> pY
    net.minecraft.world.item.Item HONEYCOMB_BLOCK -> pZ
    16:16:void <init>() -> <init>
    912:912:net.minecraft.world.item.Item registerBlock(net.minecraft.world.level.block.Block) -> a
    916:916:net.minecraft.world.item.Item registerBlock(net.minecraft.world.level.block.Block,net.minecraft.world.item.CreativeModeTab) -> a
    920:920:net.minecraft.world.item.Item registerBlock(net.minecraft.world.item.BlockItem) -> a
    924:924:net.minecraft.world.item.Item registerBlock(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item) -> a
    928:928:net.minecraft.world.item.Item registerItem(java.lang.String,net.minecraft.world.item.Item) -> a
    932:935:net.minecraft.world.item.Item registerItem(net.minecraft.resources.ResourceLocation,net.minecraft.world.item.Item) -> a
    17:909:void <clinit>() -> <clinit>
net.minecraft.world.item.KnowledgeBookItem -> bep:
    org.apache.logging.log4j.Logger LOGGER -> a
    26:27:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    31:63:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    23:23:void <clinit>() -> <clinit>
net.minecraft.world.item.LeadItem -> beq:
    17:18:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    22:34:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    38:57:net.minecraft.world.InteractionResult bindPlayerMobs(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
net.minecraft.world.item.LingeringPotionItem -> ber:
    17:18:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    22:23:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    27:28:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.MapItem -> bes:
    45:46:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    49:53:net.minecraft.world.item.ItemStack create(net.minecraft.world.level.Level,int,int,byte,boolean,boolean) -> a
    58:58:net.minecraft.world.level.saveddata.maps.MapItemSavedData getSavedData(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level) -> a
    63:69:net.minecraft.world.level.saveddata.maps.MapItemSavedData getOrCreateSavedData(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level) -> b
    73:74:int getMapId(net.minecraft.world.item.ItemStack) -> e
    78:87:net.minecraft.world.level.saveddata.maps.MapItemSavedData createAndStoreSavedData(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,int,int,int,boolean,boolean,net.minecraft.world.level.dimension.DimensionType) -> a
    91:91:java.lang.String makeKey(int) -> a
    95:241:void update(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,net.minecraft.world.level.saveddata.maps.MapItemSavedData) -> a
    244:249:net.minecraft.world.level.block.state.BlockState getCorrectStateForFluidBlock(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    253:253:boolean isLand(net.minecraft.world.level.biome.Biome[],int,int,int) -> a
    257:345:void renderBiomePreviewMap(net.minecraft.server.level.ServerLevel,net.minecraft.world.item.ItemStack) -> a
    349:366:void inventoryTick(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,int,boolean) -> a
    371:371:net.minecraft.network.protocol.Packet getUpdatePacket(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player) -> a
    376:381:void onCraftedBy(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player) -> b
    384:389:void scaleMap(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,int) -> a
    393:402:net.minecraft.world.item.ItemStack lockMap(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack) -> a
    407:422:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    425:430:int getColor(net.minecraft.world.item.ItemStack) -> j
    435:443:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
net.minecraft.world.item.MilkBucketItem -> bet:
    16:17:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    21:38:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> a
    43:43:int getUseDuration(net.minecraft.world.item.ItemStack) -> f_
    48:48:net.minecraft.world.item.UseAnim getUseAnimation(net.minecraft.world.item.ItemStack) -> e_
    53:54:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.MinecartItem -> beu:
    net.minecraft.core.dispenser.DispenseItemBehavior DISPENSE_ITEM_BEHAVIOR -> a
    net.minecraft.world.entity.vehicle.AbstractMinecart$Type type -> b
    75:78:void <init>(net.minecraft.world.entity.vehicle.AbstractMinecart$Type,net.minecraft.world.item.Item$Properties) -> <init>
    82:104:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    18:18:net.minecraft.world.entity.vehicle.AbstractMinecart$Type access$000(net.minecraft.world.item.MinecartItem) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.item.MinecartItem$1 -> beu$1:
    net.minecraft.core.dispenser.DefaultDispenseItemBehavior defaultDispenseItemBehavior -> b
    19:20:void <init>() -> <init>
    24:63:net.minecraft.world.item.ItemStack execute(net.minecraft.core.BlockSource,net.minecraft.world.item.ItemStack) -> a
    68:69:void playSound(net.minecraft.core.BlockSource) -> a
net.minecraft.world.item.NameTagItem -> bev:
    10:11:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    15:27:boolean interactEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player,net.minecraft.world.entity.LivingEntity,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.PickaxeItem -> bew:
    java.util.Set DIGGABLES -> a
    96:97:void <init>(net.minecraft.world.item.Tier,int,float,net.minecraft.world.item.Item$Properties) -> <init>
    101:125:boolean canDestroySpecial(net.minecraft.world.level.block.state.BlockState) -> b
    132:136:float getDestroySpeed(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.BlockState) -> a
    12:12:void <clinit>() -> <clinit>
net.minecraft.world.item.PlayerHeadItem -> bex:
    17:18:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    22:37:net.minecraft.network.chat.Component getName(net.minecraft.world.item.ItemStack) -> g
    42:49:boolean verifyTagAfterLoad(net.minecraft.nbt.CompoundTag) -> a
net.minecraft.world.item.PotionItem -> bey:
    26:27:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    31:31:net.minecraft.world.item.ItemStack getDefaultInstance() -> s
    36:66:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> a
    71:71:int getUseDuration(net.minecraft.world.item.ItemStack) -> f_
    76:76:net.minecraft.world.item.UseAnim getUseAnimation(net.minecraft.world.item.ItemStack) -> e_
    81:82:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    87:87:java.lang.String getDescriptionId(net.minecraft.world.item.ItemStack) -> f
    92:93:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    97:97:boolean isFoil(net.minecraft.world.item.ItemStack) -> d_
    102:109:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
net.minecraft.world.item.ProjectileWeaponItem -> bez:
    java.util.function.Predicate ARROW_ONLY -> a
    java.util.function.Predicate ARROW_OR_FIREWORK -> b
    19:20:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    24:24:java.util.function.Predicate getSupportedHeldProjectiles() -> d
    java.util.function.Predicate getAllSupportedProjectiles() -> b
    31:37:net.minecraft.world.item.ItemStack getHeldProjectile(net.minecraft.world.entity.LivingEntity,java.util.function.Predicate) -> a
    42:42:int getEnchantmentValue() -> c
    11:11:boolean lambda$static$1(net.minecraft.world.item.ItemStack) -> e
    10:10:boolean lambda$static$0(net.minecraft.world.item.ItemStack) -> j
    10:11:void <clinit>() -> <clinit>
net.minecraft.world.item.ProjectileWeaponItem$Type -> bez$a:
    net.minecraft.world.item.ProjectileWeaponItem$Type BOW -> a
    net.minecraft.world.item.ProjectileWeaponItem$Type CROSSBOW -> b
    net.minecraft.world.item.ProjectileWeaponItem$Type[] $VALUES -> c
    13:13:net.minecraft.world.item.ProjectileWeaponItem$Type[] values() -> values
    13:13:net.minecraft.world.item.ProjectileWeaponItem$Type valueOf(java.lang.String) -> valueOf
    13:13:void <init>(java.lang.String,int) -> <init>
    13:15:void <clinit>() -> <clinit>
net.minecraft.world.item.Rarity -> bfa:
    net.minecraft.world.item.Rarity COMMON -> a
    net.minecraft.world.item.Rarity UNCOMMON -> b
    net.minecraft.world.item.Rarity RARE -> c
    net.minecraft.world.item.Rarity EPIC -> d
    net.minecraft.ChatFormatting color -> e
    net.minecraft.world.item.Rarity[] $VALUES -> f
    5:5:net.minecraft.world.item.Rarity[] values() -> values
    5:5:net.minecraft.world.item.Rarity valueOf(java.lang.String) -> valueOf
    13:15:void <init>(java.lang.String,int,net.minecraft.ChatFormatting) -> <init>
    5:9:void <clinit>() -> <clinit>
net.minecraft.world.item.RecordItem -> bfb:
    java.util.Map BY_NAME -> a
    int analogOutput -> b
    net.minecraft.sounds.SoundEvent sound -> c
    29:35:void <init>(int,net.minecraft.sounds.SoundEvent,net.minecraft.world.item.Item$Properties) -> <init>
    39:58:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    62:62:int getAnalogOutput() -> f
    67:68:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    71:71:net.minecraft.network.chat.Component getDisplayName() -> g
    76:76:net.minecraft.world.item.RecordItem getBySound(net.minecraft.sounds.SoundEvent) -> a
    80:80:net.minecraft.sounds.SoundEvent getSound() -> v
    23:23:void <clinit>() -> <clinit>
net.minecraft.world.item.SaddleItem -> bfc:
    12:13:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    17:26:boolean interactEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player,net.minecraft.world.entity.LivingEntity,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.ScaffoldingBlockItem -> bfd:
    20:21:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    26:75:net.minecraft.world.item.BlockPlaceContext updatePlacementContext(net.minecraft.world.item.BlockPlaceContext) -> b
    80:80:boolean mustSurvive() -> T_
net.minecraft.world.item.ServerItemCooldowns -> bfe:
    net.minecraft.server.level.ServerPlayer player -> a
    9:11:void <init>(net.minecraft.server.level.ServerPlayer) -> <init>
    15:17:void onCooldownStarted(net.minecraft.world.item.Item,int) -> b
    21:23:void onCooldownEnded(net.minecraft.world.item.Item) -> c
net.minecraft.world.item.ShearsItem -> bff:
    14:15:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    19:35:boolean mineBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.entity.LivingEntity) -> a
    40:41:boolean canDestroySpecial(net.minecraft.world.level.block.state.BlockState) -> b
    46:53:float getDestroySpeed(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.BlockState) -> a
    20:20:void lambda$mineBlock$0(net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.item.ShieldItem -> bfg:
    23:27:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    31:34:java.lang.String getDescriptionId(net.minecraft.world.item.ItemStack) -> f
    39:40:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    44:44:net.minecraft.world.item.UseAnim getUseAnimation(net.minecraft.world.item.ItemStack) -> e_
    49:49:int getUseDuration(net.minecraft.world.item.ItemStack) -> f_
    54:56:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    61:61:boolean isValidRepairItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    65:65:net.minecraft.world.item.DyeColor getColor(net.minecraft.world.item.ItemStack) -> e
    25:25:float lambda$new$0(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> b
net.minecraft.world.item.ShovelItem -> bfh:
    java.util.Set DIGGABLES -> e
    java.util.Map FLATTENABLES -> a
    61:62:void <init>(net.minecraft.world.item.Tier,float,float,net.minecraft.world.item.Item$Properties) -> <init>
    66:67:boolean canDestroySpecial(net.minecraft.world.level.block.state.BlockState) -> b
    72:101:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    93:93:void lambda$useOn$0(net.minecraft.world.item.UseOnContext,net.minecraft.world.entity.player.Player) -> a
    23:57:void <clinit>() -> <clinit>
net.minecraft.world.item.SignItem -> bfi:
    14:15:void <init>(net.minecraft.world.item.Item$Properties,net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> <init>
    19:25:boolean updateCustomBlockEntityTag(net.minecraft.core.BlockPos,net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.item.SimpleFoiledItem -> bfj:
    5:6:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    10:10:boolean isFoil(net.minecraft.world.item.ItemStack) -> d_
net.minecraft.world.item.SnowballItem -> bfk:
    14:15:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    19:31:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.SpawnEggItem -> bfl:
    java.util.Map BY_ID -> a
    int color1 -> b
    int color2 -> c
    net.minecraft.world.entity.EntityType defaultType -> d
    40:46:void <init>(net.minecraft.world.entity.EntityType,int,int,net.minecraft.world.item.Item$Properties) -> <init>
    50:86:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    91:118:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    122:122:boolean spawnsEntity(net.minecraft.nbt.CompoundTag,net.minecraft.world.entity.EntityType) -> a
    126:126:int getColor(int) -> a
    131:131:net.minecraft.world.item.SpawnEggItem byId(net.minecraft.world.entity.EntityType) -> a
    135:135:java.lang.Iterable eggs() -> f
    139:147:net.minecraft.world.entity.EntityType getType(net.minecraft.nbt.CompoundTag) -> b
    33:33:void <clinit>() -> <clinit>
net.minecraft.world.item.SpectralArrowItem -> bfm:
    10:11:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    15:15:net.minecraft.world.entity.projectile.AbstractArrow createArrow(net.minecraft.world.level.Level,net.minecraft.world.item.ItemStack,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.item.SplashPotionItem -> bfn:
    12:13:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    17:18:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.StandingAndWallBlockItem -> bfo:
    net.minecraft.world.level.block.Block wallBlock -> a
    17:19:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    24:42:net.minecraft.world.level.block.state.BlockState getPlacementState(net.minecraft.world.item.BlockPlaceContext) -> c
    47:50:void registerBlocks(java.util.Map,net.minecraft.world.item.Item) -> a
net.minecraft.world.item.SuspiciousStewItem -> bfp:
    19:20:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    23:31:void saveMobEffect(net.minecraft.world.item.ItemStack,net.minecraft.world.effect.MobEffect,int) -> a
    35:57:net.minecraft.world.item.ItemStack finishUsingItem(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.item.SwordItem -> bfq:
    float attackDamage -> a
    float attackSpeed -> b
    22:26:void <init>(net.minecraft.world.item.Tier,int,float,net.minecraft.world.item.Item$Properties) -> <init>
    29:29:float getDamage() -> f
    34:34:boolean canAttackBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    39:48:float getDestroySpeed(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.BlockState) -> a
    53:54:boolean hurtEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    60:63:boolean mineBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.entity.LivingEntity) -> a
    68:68:boolean canDestroySpecial(net.minecraft.world.level.block.state.BlockState) -> b
    73:81:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EquipmentSlot) -> a
    61:61:void lambda$mineBlock$1(net.minecraft.world.entity.LivingEntity) -> a
    53:53:void lambda$hurtEnemy$0(net.minecraft.world.entity.LivingEntity) -> b
net.minecraft.world.item.ThrowablePotionItem -> bfr:
    12:13:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    17:28:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.Tier -> bfs:
    int getUses() -> a
    float getSpeed() -> b
    float getAttackDamageBonus() -> c
    int getLevel() -> d
    int getEnchantmentValue() -> e
    net.minecraft.world.item.crafting.Ingredient getRepairIngredient() -> f
net.minecraft.world.item.TieredItem -> bft:
    net.minecraft.world.item.Tier tier -> a
    7:9:void <init>(net.minecraft.world.item.Tier,net.minecraft.world.item.Item$Properties) -> <init>
    12:12:net.minecraft.world.item.Tier getTier() -> g
    17:17:int getEnchantmentValue() -> c
    22:22:boolean isValidRepairItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.item.Tiers -> bfu:
    net.minecraft.world.item.Tiers WOOD -> a
    net.minecraft.world.item.Tiers STONE -> b
    net.minecraft.world.item.Tiers IRON -> c
    net.minecraft.world.item.Tiers DIAMOND -> d
    net.minecraft.world.item.Tiers GOLD -> e
    int level -> f
    int uses -> g
    float speed -> h
    float damage -> i
    int enchantmentValue -> j
    net.minecraft.util.LazyLoadedValue repairIngredient -> k
    net.minecraft.world.item.Tiers[] $VALUES -> l
    10:10:net.minecraft.world.item.Tiers[] values() -> values
    10:10:net.minecraft.world.item.Tiers valueOf(java.lang.String) -> valueOf
    25:32:void <init>(java.lang.String,int,int,int,float,float,int,java.util.function.Supplier) -> <init>
    36:36:int getUses() -> a
    41:41:float getSpeed() -> b
    46:46:float getAttackDamageBonus() -> c
    51:51:int getLevel() -> d
    56:56:int getEnchantmentValue() -> e
    61:61:net.minecraft.world.item.crafting.Ingredient getRepairIngredient() -> f
    15:15:net.minecraft.world.item.crafting.Ingredient lambda$static$4() -> g
    14:14:net.minecraft.world.item.crafting.Ingredient lambda$static$3() -> h
    13:13:net.minecraft.world.item.crafting.Ingredient lambda$static$2() -> i
    12:12:net.minecraft.world.item.crafting.Ingredient lambda$static$1() -> j
    11:11:net.minecraft.world.item.crafting.Ingredient lambda$static$0() -> k
    10:15:void <clinit>() -> <clinit>
net.minecraft.world.item.TippedArrowItem -> bfv:
    16:17:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    21:21:net.minecraft.world.item.ItemStack getDefaultInstance() -> s
    26:33:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
    37:38:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    42:42:java.lang.String getDescriptionId(net.minecraft.world.item.ItemStack) -> f
net.minecraft.world.item.TooltipFlag -> bfw:
    boolean isAdvanced() -> a
net.minecraft.world.item.TooltipFlag$Default -> bfw$a:
    net.minecraft.world.item.TooltipFlag$Default NORMAL -> a
    net.minecraft.world.item.TooltipFlag$Default ADVANCED -> b
    boolean advanced -> c
    net.minecraft.world.item.TooltipFlag$Default[] $VALUES -> d
    4:4:net.minecraft.world.item.TooltipFlag$Default[] values() -> values
    4:4:net.minecraft.world.item.TooltipFlag$Default valueOf(java.lang.String) -> valueOf
    9:11:void <init>(java.lang.String,int,boolean) -> <init>
    15:15:boolean isAdvanced() -> a
    4:5:void <clinit>() -> <clinit>
net.minecraft.world.item.TridentItem -> bfx:
    33:39:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    43:43:boolean canAttackBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    48:48:net.minecraft.world.item.UseAnim getUseAnimation(net.minecraft.world.item.ItemStack) -> e_
    53:53:int getUseDuration(net.minecraft.world.item.ItemStack) -> f_
    58:128:void releaseUsing(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity,int) -> a
    132:142:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    147:148:boolean hurtEnemy(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.LivingEntity) -> a
    154:157:boolean mineBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.entity.LivingEntity) -> a
    162:170:com.google.common.collect.Multimap getDefaultAttributeModifiers(net.minecraft.world.entity.EquipmentSlot) -> a
    175:175:int getEnchantmentValue() -> c
    155:155:void lambda$mineBlock$3(net.minecraft.world.entity.LivingEntity) -> a
    147:147:void lambda$hurtEnemy$2(net.minecraft.world.entity.LivingEntity) -> b
    75:75:void lambda$releaseUsing$1(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.player.Player) -> a
    37:37:float lambda$new$0(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> b
net.minecraft.world.item.UseAnim -> bfy:
    net.minecraft.world.item.UseAnim NONE -> a
    net.minecraft.world.item.UseAnim EAT -> b
    net.minecraft.world.item.UseAnim DRINK -> c
    net.minecraft.world.item.UseAnim BLOCK -> d
    net.minecraft.world.item.UseAnim BOW -> e
    net.minecraft.world.item.UseAnim SPEAR -> f
    net.minecraft.world.item.UseAnim CROSSBOW -> g
    net.minecraft.world.item.UseAnim[] $VALUES -> h
    3:3:net.minecraft.world.item.UseAnim[] values() -> values
    3:3:net.minecraft.world.item.UseAnim valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:10:void <clinit>() -> <clinit>
net.minecraft.world.item.UseOnContext -> bfz:
    net.minecraft.world.entity.player.Player player -> b
    net.minecraft.world.InteractionHand hand -> c
    net.minecraft.world.phys.BlockHitResult hitResult -> d
    net.minecraft.world.level.Level level -> e
    net.minecraft.world.item.ItemStack itemStack -> f
    22:23:void <init>(net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> <init>
    25:32:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.item.ItemStack,net.minecraft.world.phys.BlockHitResult) -> <init>
    35:35:net.minecraft.core.BlockPos getClickedPos() -> a
    39:39:net.minecraft.core.Direction getClickedFace() -> i
    43:43:net.minecraft.world.phys.Vec3 getClickLocation() -> j
    47:47:boolean isInside() -> k
    51:51:net.minecraft.world.item.ItemStack getItemInHand() -> l
    56:56:net.minecraft.world.entity.player.Player getPlayer() -> m
    60:60:net.minecraft.world.InteractionHand getHand() -> n
    64:64:net.minecraft.world.level.Level getLevel() -> o
    68:68:net.minecraft.core.Direction getHorizontalDirection() -> f
    72:72:boolean isSecondaryUseActive() -> g
    76:76:float getRotation() -> h
net.minecraft.world.item.WaterLilyBlockItem -> bga:
    27:28:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.item.Item$Properties) -> <init>
    32:32:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    38:70:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
net.minecraft.world.item.WritableBookItem -> bgb:
    21:22:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    26:34:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    39:42:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    46:62:boolean makeSureTagIsValid(net.minecraft.nbt.CompoundTag) -> b
net.minecraft.world.item.WrittenBookItem -> bgc:
    42:43:void <init>(net.minecraft.world.item.Item$Properties) -> <init>
    46:58:boolean makeSureTagIsValid(net.minecraft.nbt.CompoundTag) -> b
    62:62:int getGeneration(net.minecraft.world.item.ItemStack) -> e
    66:67:int getPageCount(net.minecraft.world.item.ItemStack) -> j
    72:80:net.minecraft.network.chat.Component getName(net.minecraft.world.item.ItemStack) -> g
    85:95:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.Level,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    99:107:net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.UseOnContext) -> a
    112:115:net.minecraft.world.InteractionResultHolder use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand) -> a
    119:140:boolean resolveBookComponents(net.minecraft.world.item.ItemStack,net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.player.Player) -> a
    145:145:boolean isFoil(net.minecraft.world.item.ItemStack) -> d_
net.minecraft.world.item.alchemy.Potion -> bgd:
    java.lang.String name -> a
    com.google.common.collect.ImmutableList effects -> b
    15:15:net.minecraft.world.item.alchemy.Potion byName(java.lang.String) -> a
    21:22:void <init>(net.minecraft.world.effect.MobEffectInstance[]) -> <init>
    24:27:void <init>(java.lang.String,net.minecraft.world.effect.MobEffectInstance[]) -> <init>
    30:30:java.lang.String getName(java.lang.String) -> b
    34:34:java.util.List getEffects() -> a
    38:46:boolean hasInstantEffects() -> b
net.minecraft.world.item.alchemy.PotionBrewing -> bge:
    java.util.List POTION_MIXES -> a
    java.util.List CONTAINER_MIXES -> b
    java.util.List ALLOWED_CONTAINERS -> c
    java.util.function.Predicate ALLOWED_CONTAINER -> d
    14:14:void <init>() -> <init>
    31:31:boolean isIngredient(net.minecraft.world.item.ItemStack) -> a
    35:40:boolean isContainerIngredient(net.minecraft.world.item.ItemStack) -> b
    44:49:boolean isPotionIngredient(net.minecraft.world.item.ItemStack) -> c
    53:58:boolean isBrewablePotion(net.minecraft.world.item.alchemy.Potion) -> a
    63:67:boolean hasMix(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    71:78:boolean hasContainerMix(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
    82:89:boolean hasPotionMix(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> c
    93:111:net.minecraft.world.item.ItemStack mix(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> d
    115:200:void bootStrap() -> a
    203:210:void addContainerRecipe(net.minecraft.world.item.Item,net.minecraft.world.item.Item,net.minecraft.world.item.Item) -> a
    213:217:void addContainer(net.minecraft.world.item.Item) -> a
    220:221:void addMix(net.minecraft.world.item.alchemy.Potion,net.minecraft.world.item.Item,net.minecraft.world.item.alchemy.Potion) -> a
    22:27:boolean lambda$static$0(net.minecraft.world.item.ItemStack) -> d
    17:21:void <clinit>() -> <clinit>
net.minecraft.world.item.alchemy.PotionBrewing$Mix -> bge$a:
    java.lang.Object from -> a
    net.minecraft.world.item.crafting.Ingredient ingredient -> b
    java.lang.Object to -> c
    228:232:void <init>(java.lang.Object,net.minecraft.world.item.crafting.Ingredient,java.lang.Object) -> <init>
    223:223:net.minecraft.world.item.crafting.Ingredient access$000(net.minecraft.world.item.alchemy.PotionBrewing$Mix) -> a
    223:223:java.lang.Object access$100(net.minecraft.world.item.alchemy.PotionBrewing$Mix) -> b
    223:223:java.lang.Object access$200(net.minecraft.world.item.alchemy.PotionBrewing$Mix) -> c
net.minecraft.world.item.alchemy.PotionUtils -> bgf:
    27:27:void <init>() -> <init>
    34:34:java.util.List getMobEffects(net.minecraft.world.item.ItemStack) -> a
    38:43:java.util.List getAllEffects(net.minecraft.world.item.alchemy.Potion,java.util.Collection) -> a
    47:52:java.util.List getAllEffects(net.minecraft.nbt.CompoundTag) -> a
    56:56:java.util.List getCustomEffects(net.minecraft.world.item.ItemStack) -> b
    60:62:java.util.List getCustomEffects(net.minecraft.nbt.CompoundTag) -> b
    66:77:void getCustomEffects(net.minecraft.nbt.CompoundTag,java.util.List) -> a
    80:86:int getColor(net.minecraft.world.item.ItemStack) -> c
    90:90:int getColor(net.minecraft.world.item.alchemy.Potion) -> a
    94:125:int getColor(java.util.Collection) -> a
    129:129:net.minecraft.world.item.alchemy.Potion getPotion(net.minecraft.world.item.ItemStack) -> d
    133:137:net.minecraft.world.item.alchemy.Potion getPotion(net.minecraft.nbt.CompoundTag) -> c
    141:149:net.minecraft.world.item.ItemStack setPotion(net.minecraft.world.item.ItemStack,net.minecraft.world.item.alchemy.Potion) -> a
    153:165:net.minecraft.world.item.ItemStack setCustomEffects(net.minecraft.world.item.ItemStack,java.util.Collection) -> a
    169:233:void addPotionTooltip(net.minecraft.world.item.ItemStack,java.util.List,float) -> a
net.minecraft.world.item.alchemy.Potions -> bgg:
    net.minecraft.world.item.alchemy.Potion EMPTY -> a
    net.minecraft.world.item.alchemy.Potion WATER -> b
    net.minecraft.world.item.alchemy.Potion MUNDANE -> c
    net.minecraft.world.item.alchemy.Potion THICK -> d
    net.minecraft.world.item.alchemy.Potion AWKWARD -> e
    net.minecraft.world.item.alchemy.Potion NIGHT_VISION -> f
    net.minecraft.world.item.alchemy.Potion LONG_NIGHT_VISION -> g
    net.minecraft.world.item.alchemy.Potion INVISIBILITY -> h
    net.minecraft.world.item.alchemy.Potion LONG_INVISIBILITY -> i
    net.minecraft.world.item.alchemy.Potion LEAPING -> j
    net.minecraft.world.item.alchemy.Potion LONG_LEAPING -> k
    net.minecraft.world.item.alchemy.Potion STRONG_LEAPING -> l
    net.minecraft.world.item.alchemy.Potion FIRE_RESISTANCE -> m
    net.minecraft.world.item.alchemy.Potion LONG_FIRE_RESISTANCE -> n
    net.minecraft.world.item.alchemy.Potion SWIFTNESS -> o
    net.minecraft.world.item.alchemy.Potion LONG_SWIFTNESS -> p
    net.minecraft.world.item.alchemy.Potion STRONG_SWIFTNESS -> q
    net.minecraft.world.item.alchemy.Potion SLOWNESS -> r
    net.minecraft.world.item.alchemy.Potion LONG_SLOWNESS -> s
    net.minecraft.world.item.alchemy.Potion STRONG_SLOWNESS -> t
    net.minecraft.world.item.alchemy.Potion TURTLE_MASTER -> u
    net.minecraft.world.item.alchemy.Potion LONG_TURTLE_MASTER -> v
    net.minecraft.world.item.alchemy.Potion STRONG_TURTLE_MASTER -> w
    net.minecraft.world.item.alchemy.Potion WATER_BREATHING -> x
    net.minecraft.world.item.alchemy.Potion LONG_WATER_BREATHING -> y
    net.minecraft.world.item.alchemy.Potion HEALING -> z
    net.minecraft.world.item.alchemy.Potion STRONG_HEALING -> A
    net.minecraft.world.item.alchemy.Potion HARMING -> B
    net.minecraft.world.item.alchemy.Potion STRONG_HARMING -> C
    net.minecraft.world.item.alchemy.Potion POISON -> D
    net.minecraft.world.item.alchemy.Potion LONG_POISON -> E
    net.minecraft.world.item.alchemy.Potion STRONG_POISON -> F
    net.minecraft.world.item.alchemy.Potion REGENERATION -> G
    net.minecraft.world.item.alchemy.Potion LONG_REGENERATION -> H
    net.minecraft.world.item.alchemy.Potion STRONG_REGENERATION -> I
    net.minecraft.world.item.alchemy.Potion STRENGTH -> J
    net.minecraft.world.item.alchemy.Potion LONG_STRENGTH -> K
    net.minecraft.world.item.alchemy.Potion STRONG_STRENGTH -> L
    net.minecraft.world.item.alchemy.Potion WEAKNESS -> M
    net.minecraft.world.item.alchemy.Potion LONG_WEAKNESS -> N
    net.minecraft.world.item.alchemy.Potion LUCK -> O
    net.minecraft.world.item.alchemy.Potion SLOW_FALLING -> P
    net.minecraft.world.item.alchemy.Potion LONG_SLOW_FALLING -> Q
    7:7:void <init>() -> <init>
    69:69:net.minecraft.world.item.alchemy.Potion register(java.lang.String,net.minecraft.world.item.alchemy.Potion) -> a
    8:66:void <clinit>() -> <clinit>
net.minecraft.world.item.alchemy.package-info -> bgh:
net.minecraft.world.item.crafting.AbstractCookingRecipe -> bgi:
    net.minecraft.world.item.crafting.RecipeType type -> a
    net.minecraft.resources.ResourceLocation id -> b
    java.lang.String group -> c
    net.minecraft.world.item.crafting.Ingredient ingredient -> d
    net.minecraft.world.item.ItemStack result -> e
    float experience -> f
    int cookingTime -> g
    19:27:void <init>(net.minecraft.world.item.crafting.RecipeType,net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.ItemStack,float,int) -> <init>
    31:31:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
    36:36:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    41:41:boolean canCraftInDimensions(int,int) -> a
    46:48:net.minecraft.core.NonNullList getIngredients() -> a
    52:52:float getExperience() -> b
    57:57:net.minecraft.world.item.ItemStack getResultItem() -> c
    62:62:java.lang.String getGroup() -> d
    66:66:int getCookingTime() -> e
    71:71:net.minecraft.resources.ResourceLocation getId() -> f
    76:76:net.minecraft.world.item.crafting.RecipeType getType() -> g
net.minecraft.world.item.crafting.ArmorDyeRecipe -> bgj:
    16:17:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    21:42:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    47:74:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    79:79:boolean canCraftInDimensions(int,int) -> a
    84:84:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    14:14:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    14:14:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
net.minecraft.world.item.crafting.BannerDuplicateRecipe -> bgk:
    15:16:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    21:60:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    66:79:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    84:101:net.minecraft.core.NonNullList getRemainingItems(net.minecraft.world.inventory.CraftingContainer) -> b
    106:106:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    111:111:boolean canCraftInDimensions(int,int) -> a
    13:13:net.minecraft.core.NonNullList getRemainingItems(net.minecraft.world.Container) -> b
    13:13:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    13:13:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
net.minecraft.world.item.crafting.BlastingRecipe -> bgl:
    9:10:void <init>(net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.ItemStack,float,int) -> <init>
    14:14:net.minecraft.world.item.ItemStack getToastSymbol() -> h
    19:19:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
net.minecraft.world.item.crafting.BookCloningRecipe -> bgm:
    14:15:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    19:40:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    45:77:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    82:96:net.minecraft.core.NonNullList getRemainingItems(net.minecraft.world.inventory.CraftingContainer) -> b
    101:101:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    106:106:boolean canCraftInDimensions(int,int) -> a
    12:12:net.minecraft.core.NonNullList getRemainingItems(net.minecraft.world.Container) -> b
    12:12:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    12:12:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
net.minecraft.world.item.crafting.CampfireCookingRecipe -> bgn:
    9:10:void <init>(net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.ItemStack,float,int) -> <init>
    14:14:net.minecraft.world.item.ItemStack getToastSymbol() -> h
    19:19:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
net.minecraft.world.item.crafting.CraftingRecipe -> bgo:
    8:8:net.minecraft.world.item.crafting.RecipeType getType() -> g
net.minecraft.world.item.crafting.CustomRecipe -> bgp:
    net.minecraft.resources.ResourceLocation id -> a
    9:11:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    15:15:net.minecraft.resources.ResourceLocation getId() -> f
    20:20:boolean isSpecial() -> V_
    25:25:net.minecraft.world.item.ItemStack getResultItem() -> c
net.minecraft.world.item.crafting.FireworkRocketRecipe -> bgq:
    net.minecraft.world.item.crafting.Ingredient PAPER_INGREDIENT -> a
    net.minecraft.world.item.crafting.Ingredient GUNPOWDER_INGREDIENT -> b
    net.minecraft.world.item.crafting.Ingredient STAR_INGREDIENT -> c
    18:19:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    23:47:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    52:79:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    84:84:boolean canCraftInDimensions(int,int) -> a
    89:89:net.minecraft.world.item.ItemStack getResultItem() -> c
    94:94:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    12:12:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    12:12:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
    13:15:void <clinit>() -> <clinit>
net.minecraft.world.item.crafting.FireworkStarFadeRecipe -> bgr:
    net.minecraft.world.item.crafting.Ingredient STAR_INGREDIENT -> a
    19:20:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    24:45:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    50:72:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    77:77:boolean canCraftInDimensions(int,int) -> a
    82:82:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    15:15:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    15:15:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.item.crafting.FireworkStarRecipe -> bgs:
    net.minecraft.world.item.crafting.Ingredient SHAPE_INGREDIENT -> a
    net.minecraft.world.item.crafting.Ingredient TRAIL_INGREDIENT -> b
    net.minecraft.world.item.crafting.Ingredient FLICKER_INGREDIENT -> c
    java.util.Map SHAPE_BY_ITEM -> d
    net.minecraft.world.item.crafting.Ingredient GUNPOWDER_INGREDIENT -> e
    49:50:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    54:93:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    98:124:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    129:129:boolean canCraftInDimensions(int,int) -> a
    134:134:net.minecraft.world.item.ItemStack getResultItem() -> c
    139:139:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    19:19:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    19:19:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
    35:44:void lambda$static$0(java.util.HashMap) -> a
    20:46:void <clinit>() -> <clinit>
net.minecraft.world.item.crafting.Ingredient -> bgt:
    java.util.function.Predicate NON_ALL_EMPTY -> b
    net.minecraft.world.item.crafting.Ingredient EMPTY -> a
    net.minecraft.world.item.crafting.Ingredient$Value[] values -> c
    net.minecraft.world.item.ItemStack[] itemStacks -> d
    it.unimi.dsi.fastutil.ints.IntList stackingIds -> e
    41:43:void <init>(java.util.stream.Stream) -> <init>
    46:47:net.minecraft.world.item.ItemStack[] getItems() -> a
    51:54:void dissolve() -> f
    58:72:boolean test(net.minecraft.world.item.ItemStack) -> a
    76:85:it.unimi.dsi.fastutil.ints.IntList getStackingIds() -> b
    89:94:void toNetwork(net.minecraft.network.FriendlyByteBuf) -> a
    97:104:com.google.gson.JsonElement toJson() -> c
    109:109:boolean isEmpty() -> d
    113:115:net.minecraft.world.item.crafting.Ingredient fromValues(java.util.stream.Stream) -> a
    119:119:net.minecraft.world.item.crafting.Ingredient of() -> e
    123:123:net.minecraft.world.item.crafting.Ingredient of(net.minecraft.world.level.ItemLike[]) -> a
    127:127:net.minecraft.world.item.crafting.Ingredient of(net.minecraft.world.item.ItemStack[]) -> a
    131:131:net.minecraft.world.item.crafting.Ingredient of(net.minecraft.tags.Tag) -> a
    135:136:net.minecraft.world.item.crafting.Ingredient fromNetwork(net.minecraft.network.FriendlyByteBuf) -> b
    140:152:net.minecraft.world.item.crafting.Ingredient fromJson(com.google.gson.JsonElement) -> a
    157:172:net.minecraft.world.item.crafting.Ingredient$Value valueFromJson(com.google.gson.JsonObject) -> a
    32:32:boolean test(java.lang.Object) -> test
    162:162:com.google.gson.JsonSyntaxException lambda$valueFromJson$8(net.minecraft.resources.ResourceLocation) -> a
    150:150:net.minecraft.world.item.crafting.Ingredient$Value lambda$fromJson$7(com.google.gson.JsonElement) -> b
    136:136:net.minecraft.world.item.crafting.Ingredient$ItemValue lambda$fromNetwork$6(net.minecraft.network.FriendlyByteBuf) -> c
    127:127:net.minecraft.world.item.crafting.Ingredient$ItemValue lambda$of$5(net.minecraft.world.item.ItemStack) -> b
    123:123:net.minecraft.world.item.crafting.Ingredient$ItemValue lambda$of$4(net.minecraft.world.level.ItemLike) -> a
    52:52:net.minecraft.world.item.ItemStack[] lambda$dissolve$3(int) -> a
    52:52:java.util.stream.Stream lambda$dissolve$2(net.minecraft.world.item.crafting.Ingredient$Value) -> a
    42:42:net.minecraft.world.item.crafting.Ingredient$Value[] lambda$new$1(int) -> b
    33:33:boolean lambda$static$0(net.minecraft.world.item.crafting.Ingredient$Value) -> b
    33:35:void <clinit>() -> <clinit>
net.minecraft.world.item.crafting.Ingredient$1 -> bgt$1:
net.minecraft.world.item.crafting.Ingredient$ItemValue -> bgt$a:
    net.minecraft.world.item.ItemStack item -> a
    185:187:void <init>(net.minecraft.world.item.ItemStack) -> <init>
    191:191:java.util.Collection getItems() -> a
    196:198:com.google.gson.JsonObject serialize() -> b
    182:182:void <init>(net.minecraft.world.item.ItemStack,net.minecraft.world.item.crafting.Ingredient$1) -> <init>
net.minecraft.world.item.crafting.Ingredient$TagValue -> bgt$b:
    net.minecraft.tags.Tag tag -> a
    205:207:void <init>(net.minecraft.tags.Tag) -> <init>
    211:215:java.util.Collection getItems() -> a
    220:222:com.google.gson.JsonObject serialize() -> b
    202:202:void <init>(net.minecraft.tags.Tag,net.minecraft.world.item.crafting.Ingredient$1) -> <init>
net.minecraft.world.item.crafting.Ingredient$Value -> bgt$c:
    java.util.Collection getItems() -> a
    com.google.gson.JsonObject serialize() -> b
net.minecraft.world.item.crafting.MapCloningRecipe -> bgu:
    11:12:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    16:37:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    42:70:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    75:75:boolean canCraftInDimensions(int,int) -> a
    80:80:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    9:9:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    9:9:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
net.minecraft.world.item.crafting.MapExtendingRecipe -> bgv:
    15:23:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    27:51:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    55:62:boolean isExplorationMap(net.minecraft.world.level.saveddata.maps.MapItemSavedData) -> a
    67:80:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    85:85:boolean isSpecial() -> V_
    90:90:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    13:13:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    13:13:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
net.minecraft.world.item.crafting.Recipe -> bgw:
    boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
    net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    boolean canCraftInDimensions(int,int) -> a
    net.minecraft.world.item.ItemStack getResultItem() -> c
    22:31:net.minecraft.core.NonNullList getRemainingItems(net.minecraft.world.Container) -> b
    35:35:net.minecraft.core.NonNullList getIngredients() -> a
    39:39:boolean isSpecial() -> V_
    43:43:java.lang.String getGroup() -> d
    47:47:net.minecraft.world.item.ItemStack getToastSymbol() -> h
    net.minecraft.resources.ResourceLocation getId() -> f
    net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    net.minecraft.world.item.crafting.RecipeType getType() -> g
net.minecraft.world.item.crafting.RecipeManager -> bgx:
    com.google.gson.Gson GSON -> a
    org.apache.logging.log4j.Logger LOGGER -> b
    java.util.Map recipes -> c
    boolean hasErrors -> d
    38:43:void <init>() -> <init>
    47:62:void apply(java.util.Map,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
    65:65:boolean hadErrorsLoading() -> a
    69:69:java.util.Optional getRecipeFor(net.minecraft.world.item.crafting.RecipeType,net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
    73:77:java.util.List getRecipesFor(net.minecraft.world.item.crafting.RecipeType,net.minecraft.world.Container,net.minecraft.world.level.Level) -> b
    83:83:java.util.Map byType(net.minecraft.world.item.crafting.RecipeType) -> a
    87:96:net.minecraft.core.NonNullList getRemainingItemsFor(net.minecraft.world.item.crafting.RecipeType,net.minecraft.world.Container,net.minecraft.world.level.Level) -> c
    100:100:java.util.Optional byKey(net.minecraft.resources.ResourceLocation) -> a
    104:104:java.util.Collection getRecipes() -> b
    108:108:java.util.stream.Stream getRecipeIds() -> c
    112:115:net.minecraft.world.item.crafting.Recipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> a
    119:131:void replaceRecipes(java.lang.Iterable) -> a
    34:34:void apply(java.lang.Object,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
    123:128:void lambda$replaceRecipes$10(java.util.Map,net.minecraft.world.item.crafting.Recipe) -> a
    123:123:java.util.Map lambda$null$9(net.minecraft.world.item.crafting.RecipeType) -> b
    114:114:com.google.gson.JsonSyntaxException lambda$fromJson$8(java.lang.String) -> a
    108:108:java.util.stream.Stream lambda$getRecipeIds$7(java.util.Map) -> a
    104:104:java.util.stream.Stream lambda$getRecipes$6(java.util.Map) -> b
    100:100:net.minecraft.world.item.crafting.Recipe lambda$byKey$5(net.minecraft.resources.ResourceLocation,java.util.Map) -> a
    76:76:java.lang.String lambda$getRecipesFor$4(net.minecraft.world.item.crafting.Recipe) -> a
    75:75:java.util.stream.Stream lambda$getRecipesFor$3(net.minecraft.world.item.crafting.RecipeType,net.minecraft.world.level.Level,net.minecraft.world.Container,net.minecraft.world.item.crafting.Recipe) -> a
    69:69:java.util.stream.Stream lambda$getRecipeFor$2(net.minecraft.world.item.crafting.RecipeType,net.minecraft.world.level.Level,net.minecraft.world.Container,net.minecraft.world.item.crafting.Recipe) -> b
    60:60:java.util.Map lambda$apply$1(java.util.Map$Entry) -> a
    54:54:com.google.common.collect.ImmutableMap$Builder lambda$apply$0(net.minecraft.world.item.crafting.RecipeType) -> c
    35:36:void <clinit>() -> <clinit>
net.minecraft.world.item.crafting.RecipeSerializer -> bgy:
    net.minecraft.world.item.crafting.RecipeSerializer SHAPED_RECIPE -> a
    net.minecraft.world.item.crafting.RecipeSerializer SHAPELESS_RECIPE -> b
    net.minecraft.world.item.crafting.SimpleRecipeSerializer ARMOR_DYE -> c
    net.minecraft.world.item.crafting.SimpleRecipeSerializer BOOK_CLONING -> d
    net.minecraft.world.item.crafting.SimpleRecipeSerializer MAP_CLONING -> e
    net.minecraft.world.item.crafting.SimpleRecipeSerializer MAP_EXTENDING -> f
    net.minecraft.world.item.crafting.SimpleRecipeSerializer FIREWORK_ROCKET -> g
    net.minecraft.world.item.crafting.SimpleRecipeSerializer FIREWORK_STAR -> h
    net.minecraft.world.item.crafting.SimpleRecipeSerializer FIREWORK_STAR_FADE -> i
    net.minecraft.world.item.crafting.SimpleRecipeSerializer TIPPED_ARROW -> j
    net.minecraft.world.item.crafting.SimpleRecipeSerializer BANNER_DUPLICATE -> k
    net.minecraft.world.item.crafting.SimpleRecipeSerializer SHIELD_DECORATION -> l
    net.minecraft.world.item.crafting.SimpleRecipeSerializer SHULKER_BOX_COLORING -> m
    net.minecraft.world.item.crafting.SimpleRecipeSerializer SUSPICIOUS_STEW -> n
    net.minecraft.world.item.crafting.SimpleRecipeSerializer REPAIR_ITEM -> o
    net.minecraft.world.item.crafting.SimpleCookingSerializer SMELTING_RECIPE -> p
    net.minecraft.world.item.crafting.SimpleCookingSerializer BLASTING_RECIPE -> q
    net.minecraft.world.item.crafting.SimpleCookingSerializer SMOKING_RECIPE -> r
    net.minecraft.world.item.crafting.SimpleCookingSerializer CAMPFIRE_COOKING_RECIPE -> s
    net.minecraft.world.item.crafting.RecipeSerializer STONECUTTER -> t
    net.minecraft.world.item.crafting.Recipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> a
    net.minecraft.world.item.crafting.Recipe fromNetwork(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> a
    void toNetwork(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.crafting.Recipe) -> a
    37:37:net.minecraft.world.item.crafting.RecipeSerializer register(java.lang.String,net.minecraft.world.item.crafting.RecipeSerializer) -> a
    9:28:void <clinit>() -> <clinit>
net.minecraft.world.item.crafting.RecipeType -> bgz:
    net.minecraft.world.item.crafting.RecipeType CRAFTING -> a
    net.minecraft.world.item.crafting.RecipeType SMELTING -> b
    net.minecraft.world.item.crafting.RecipeType BLASTING -> c
    net.minecraft.world.item.crafting.RecipeType SMOKING -> d
    net.minecraft.world.item.crafting.RecipeType CAMPFIRE_COOKING -> e
    net.minecraft.world.item.crafting.RecipeType STONECUTTING -> f
    19:19:net.minecraft.world.item.crafting.RecipeType register(java.lang.String) -> a
    29:29:java.util.Optional tryMatch(net.minecraft.world.item.crafting.Recipe,net.minecraft.world.level.Level,net.minecraft.world.Container) -> a
    11:16:void <clinit>() -> <clinit>
net.minecraft.world.item.crafting.RecipeType$1 -> bgz$1:
    java.lang.String val$name -> g
    19:19:void <init>(java.lang.String) -> <init>
    22:22:java.lang.String toString() -> toString
net.minecraft.world.item.crafting.RepairItemRecipe -> bha:
    14:15:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    19:36:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    41:78:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    83:83:boolean canCraftInDimensions(int,int) -> a
    88:88:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    12:12:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    12:12:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
net.minecraft.world.item.crafting.ShapedRecipe -> bhb:
    int width -> a
    int height -> b
    net.minecraft.core.NonNullList recipeItems -> c
    net.minecraft.world.item.ItemStack result -> d
    net.minecraft.resources.ResourceLocation id -> e
    java.lang.String group -> f
    32:39:void <init>(net.minecraft.resources.ResourceLocation,java.lang.String,int,int,net.minecraft.core.NonNullList,net.minecraft.world.item.ItemStack) -> <init>
    43:43:net.minecraft.resources.ResourceLocation getId() -> f
    48:48:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    53:53:java.lang.String getGroup() -> d
    58:58:net.minecraft.world.item.ItemStack getResultItem() -> c
    63:63:net.minecraft.core.NonNullList getIngredients() -> a
    68:68:boolean canCraftInDimensions(int,int) -> a
    73:83:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    87:104:boolean matches(net.minecraft.world.inventory.CraftingContainer,int,int,boolean) -> a
    109:109:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    113:113:int getWidth() -> i
    117:117:int getHeight() -> j
    121:141:net.minecraft.core.NonNullList dissolvePattern(java.lang.String[],java.util.Map,int,int) -> b
    146:177:java.lang.String[] shrink(java.lang.String[]) -> a
    181:186:int firstNonSpace(java.lang.String) -> a
    190:195:int lastNonSpace(java.lang.String) -> b
    199:214:java.lang.String[] patternFromJson(com.google.gson.JsonArray) -> b
    218:228:java.util.Map keyFromJson(com.google.gson.JsonObject) -> c
    232:238:net.minecraft.world.item.ItemStack itemFromJson(com.google.gson.JsonObject) -> a
    24:24:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    24:24:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
    233:233:com.google.gson.JsonSyntaxException lambda$itemFromJson$0(java.lang.String) -> c
    24:24:java.util.Map access$000(com.google.gson.JsonObject) -> b
    24:24:java.lang.String[] access$100(com.google.gson.JsonArray) -> a
    24:24:net.minecraft.core.NonNullList access$200(java.lang.String[],java.util.Map,int,int) -> a
    24:24:int access$300(net.minecraft.world.item.crafting.ShapedRecipe) -> a
    24:24:int access$400(net.minecraft.world.item.crafting.ShapedRecipe) -> b
    24:24:java.lang.String access$500(net.minecraft.world.item.crafting.ShapedRecipe) -> c
    24:24:net.minecraft.core.NonNullList access$600(net.minecraft.world.item.crafting.ShapedRecipe) -> d
    24:24:net.minecraft.world.item.ItemStack access$700(net.minecraft.world.item.crafting.ShapedRecipe) -> e
net.minecraft.world.item.crafting.ShapedRecipe$Serializer -> bhb$a:
    241:241:void <init>() -> <init>
    244:256:net.minecraft.world.item.crafting.ShapedRecipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> b
    261:269:net.minecraft.world.item.crafting.ShapedRecipe fromNetwork(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> b
    274:281:void toNetwork(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.crafting.ShapedRecipe) -> a
    241:241:void toNetwork(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.crafting.Recipe) -> a
    241:241:net.minecraft.world.item.crafting.Recipe fromNetwork(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> a
    241:241:net.minecraft.world.item.crafting.Recipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> a
net.minecraft.world.item.crafting.ShapelessRecipe -> bhc:
    net.minecraft.resources.ResourceLocation id -> a
    java.lang.String group -> b
    net.minecraft.world.item.ItemStack result -> c
    net.minecraft.core.NonNullList ingredients -> d
    21:26:void <init>(net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.ItemStack,net.minecraft.core.NonNullList) -> <init>
    30:30:net.minecraft.resources.ResourceLocation getId() -> f
    35:35:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    40:40:java.lang.String getGroup() -> d
    45:45:net.minecraft.world.item.ItemStack getResultItem() -> c
    50:50:net.minecraft.core.NonNullList getIngredients() -> a
    55:66:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    71:71:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    76:76:boolean canCraftInDimensions(int,int) -> a
    15:15:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    15:15:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
    15:15:java.lang.String access$000(net.minecraft.world.item.crafting.ShapelessRecipe) -> a
    15:15:net.minecraft.core.NonNullList access$100(net.minecraft.world.item.crafting.ShapelessRecipe) -> b
    15:15:net.minecraft.world.item.ItemStack access$200(net.minecraft.world.item.crafting.ShapelessRecipe) -> c
net.minecraft.world.item.crafting.ShapelessRecipe$Serializer -> bhc$a:
    79:79:void <init>() -> <init>
    82:91:net.minecraft.world.item.crafting.ShapelessRecipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> b
    95:104:net.minecraft.core.NonNullList itemsFromJson(com.google.gson.JsonArray) -> a
    109:116:net.minecraft.world.item.crafting.ShapelessRecipe fromNetwork(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> b
    121:127:void toNetwork(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.crafting.ShapelessRecipe) -> a
    79:79:void toNetwork(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.crafting.Recipe) -> a
    79:79:net.minecraft.world.item.crafting.Recipe fromNetwork(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> a
    79:79:net.minecraft.world.item.crafting.Recipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> a
net.minecraft.world.item.crafting.ShieldDecorationRecipe -> bhd:
    15:16:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    20:56:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    61:88:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    93:93:boolean canCraftInDimensions(int,int) -> a
    98:98:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    13:13:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    13:13:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
net.minecraft.world.item.crafting.ShulkerBoxColoring -> bhe:
    15:16:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    20:43:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    48:71:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    76:76:boolean canCraftInDimensions(int,int) -> a
    81:81:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    13:13:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    13:13:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
net.minecraft.world.item.crafting.SimpleCookingSerializer -> bhf:
    int defaultCookingTime -> u
    net.minecraft.world.item.crafting.SimpleCookingSerializer$CookieBaker factory -> v
    19:22:void <init>(net.minecraft.world.item.crafting.SimpleCookingSerializer$CookieBaker,int) -> <init>
    26:37:net.minecraft.world.item.crafting.AbstractCookingRecipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> b
    42:47:net.minecraft.world.item.crafting.AbstractCookingRecipe fromNetwork(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> b
    52:57:void toNetwork(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.crafting.AbstractCookingRecipe) -> a
    11:11:void toNetwork(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.crafting.Recipe) -> a
    11:11:net.minecraft.world.item.crafting.Recipe fromNetwork(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> a
    11:11:net.minecraft.world.item.crafting.Recipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> a
    33:33:java.lang.IllegalStateException lambda$fromJson$0(java.lang.String) -> a
net.minecraft.world.item.crafting.SimpleCookingSerializer$CookieBaker -> bhf$a:
    net.minecraft.world.item.crafting.AbstractCookingRecipe create(net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.ItemStack,float,int) -> create
net.minecraft.world.item.crafting.SimpleRecipeSerializer -> bhg:
    java.util.function.Function constructor -> u
    12:14:void <init>(java.util.function.Function) -> <init>
    18:18:net.minecraft.world.item.crafting.Recipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> a
    23:23:net.minecraft.world.item.crafting.Recipe fromNetwork(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> a
    28:28:void toNetwork(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.crafting.Recipe) -> a
net.minecraft.world.item.crafting.SingleItemRecipe -> bhh:
    net.minecraft.world.item.crafting.Ingredient ingredient -> a
    net.minecraft.world.item.ItemStack result -> b
    net.minecraft.world.item.crafting.RecipeType type -> e
    net.minecraft.world.item.crafting.RecipeSerializer serializer -> f
    net.minecraft.resources.ResourceLocation id -> c
    java.lang.String group -> d
    20:27:void <init>(net.minecraft.world.item.crafting.RecipeType,net.minecraft.world.item.crafting.RecipeSerializer,net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.ItemStack) -> <init>
    31:31:net.minecraft.world.item.crafting.RecipeType getType() -> g
    36:36:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    41:41:net.minecraft.resources.ResourceLocation getId() -> f
    46:46:java.lang.String getGroup() -> d
    51:51:net.minecraft.world.item.ItemStack getResultItem() -> c
    56:58:net.minecraft.core.NonNullList getIngredients() -> a
    63:63:boolean canCraftInDimensions(int,int) -> a
    68:68:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
net.minecraft.world.item.crafting.SingleItemRecipe$Serializer -> bhh$a:
    net.minecraft.world.item.crafting.SingleItemRecipe$Serializer$SingleItemMaker factory -> u
    74:76:void <init>(net.minecraft.world.item.crafting.SingleItemRecipe$Serializer$SingleItemMaker) -> <init>
    84:97:net.minecraft.world.item.crafting.SingleItemRecipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> b
    102:105:net.minecraft.world.item.crafting.SingleItemRecipe fromNetwork(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> b
    110:113:void toNetwork(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.crafting.SingleItemRecipe) -> a
    71:71:void toNetwork(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.item.crafting.Recipe) -> a
    71:71:net.minecraft.world.item.crafting.Recipe fromNetwork(net.minecraft.resources.ResourceLocation,net.minecraft.network.FriendlyByteBuf) -> a
    71:71:net.minecraft.world.item.crafting.Recipe fromJson(net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> a
net.minecraft.world.item.crafting.SingleItemRecipe$Serializer$SingleItemMaker -> bhh$a$a:
    net.minecraft.world.item.crafting.SingleItemRecipe create(net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.ItemStack) -> create
net.minecraft.world.item.crafting.SmeltingRecipe -> bhi:
    9:10:void <init>(net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.ItemStack,float,int) -> <init>
    14:14:net.minecraft.world.item.ItemStack getToastSymbol() -> h
    19:19:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
net.minecraft.world.item.crafting.SmokingRecipe -> bhj:
    9:10:void <init>(net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.ItemStack,float,int) -> <init>
    14:14:net.minecraft.world.item.ItemStack getToastSymbol() -> h
    19:19:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
net.minecraft.world.item.crafting.StonecutterRecipe -> bhk:
    11:12:void <init>(net.minecraft.resources.ResourceLocation,java.lang.String,net.minecraft.world.item.crafting.Ingredient,net.minecraft.world.item.ItemStack) -> <init>
    16:16:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
    21:21:net.minecraft.world.item.ItemStack getToastSymbol() -> h
net.minecraft.world.item.crafting.SuspiciousStewRecipe -> bhl:
    17:18:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    22:46:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    51:71:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    76:76:boolean canCraftInDimensions(int,int) -> a
    81:81:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    15:15:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    15:15:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
net.minecraft.world.item.crafting.TippedArrowRecipe -> bhm:
    13:14:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    18:41:boolean matches(net.minecraft.world.inventory.CraftingContainer,net.minecraft.world.level.Level) -> a
    46:55:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.inventory.CraftingContainer) -> a
    60:60:boolean canCraftInDimensions(int,int) -> a
    65:65:net.minecraft.world.item.crafting.RecipeSerializer getSerializer() -> W_
    11:11:net.minecraft.world.item.ItemStack assemble(net.minecraft.world.Container) -> a
    11:11:boolean matches(net.minecraft.world.Container,net.minecraft.world.level.Level) -> a
net.minecraft.world.item.crafting.package-info -> bhn:
net.minecraft.world.item.enchantment.ArrowDamageEnchantment -> bho:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.ArrowFireEnchantment -> bhp:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.ArrowInfiniteEnchantment -> bhq:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:30:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.ArrowKnockbackEnchantment -> bhr:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.ArrowPiercingEnchantment -> bhs:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:27:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.BindingCurseEnchantment -> bht:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:27:boolean isTreasureOnly() -> b
    32:32:boolean isCurse() -> c
net.minecraft.world.item.enchantment.DamageEnchantment -> bhu:
    java.lang.String[] NAMES -> d
    int[] MIN_COST -> e
    int[] LEVEL_COST -> f
    int[] LEVEL_COST_SPAN -> g
    int type -> a
    37:39:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,int,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    43:43:int getMinCost(int) -> a
    48:48:int getMaxCost(int) -> b
    53:53:int getMaxLevel() -> a
    58:67:float getDamageBonus(int,net.minecraft.world.entity.MobType) -> a
    72:72:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
    77:80:boolean canEnchant(net.minecraft.world.item.ItemStack) -> a
    85:93:void doPostAttack(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.Entity,int) -> a
    18:30:void <clinit>() -> <clinit>
net.minecraft.world.item.enchantment.DigDurabilityEnchantment -> bhv:
    11:12:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    16:16:int getMinCost(int) -> a
    21:21:int getMaxCost(int) -> b
    26:26:int getMaxLevel() -> a
    31:34:boolean canEnchant(net.minecraft.world.item.ItemStack) -> a
    38:41:boolean shouldIgnoreDurabilityDrop(net.minecraft.world.item.ItemStack,int,java.util.Random) -> a
net.minecraft.world.item.enchantment.DiggingEnchantment -> bhw:
    9:10:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    14:14:int getMinCost(int) -> a
    19:19:int getMaxCost(int) -> b
    24:24:int getMaxLevel() -> a
    29:32:boolean canEnchant(net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.item.enchantment.Enchantment -> bhx:
    net.minecraft.world.entity.EquipmentSlot[] slots -> a
    net.minecraft.world.item.enchantment.Enchantment$Rarity rarity -> d
    net.minecraft.world.item.enchantment.EnchantmentCategory category -> b
    java.lang.String descriptionId -> c
    24:24:net.minecraft.world.item.enchantment.Enchantment byId(int) -> c
    51:55:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.item.enchantment.EnchantmentCategory,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    58:65:java.util.Map getSlotItems(net.minecraft.world.entity.LivingEntity) -> a
    69:69:net.minecraft.world.item.enchantment.Enchantment$Rarity getRarity() -> d
    73:73:int getMinLevel() -> e
    77:77:int getMaxLevel() -> a
    81:81:int getMinCost(int) -> a
    85:85:int getMaxCost(int) -> b
    89:89:int getDamageProtection(int,net.minecraft.world.damagesource.DamageSource) -> a
    93:93:float getDamageBonus(int,net.minecraft.world.entity.MobType) -> a
    97:97:boolean isCompatibleWith(net.minecraft.world.item.enchantment.Enchantment) -> b
    101:101:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
    105:108:java.lang.String getOrCreateDescriptionId() -> f
    112:112:java.lang.String getDescriptionId() -> g
    116:125:net.minecraft.network.chat.Component getFullname(int) -> d
    129:129:boolean canEnchant(net.minecraft.world.item.ItemStack) -> a
    133:133:void doPostAttack(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.Entity,int) -> a
    136:136:void doPostHurt(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.Entity,int) -> b
    139:139:boolean isTreasureOnly() -> b
    143:143:boolean isCurse() -> c
net.minecraft.world.item.enchantment.Enchantment$Rarity -> bhx$a:
    net.minecraft.world.item.enchantment.Enchantment$Rarity COMMON -> a
    net.minecraft.world.item.enchantment.Enchantment$Rarity UNCOMMON -> b
    net.minecraft.world.item.enchantment.Enchantment$Rarity RARE -> c
    net.minecraft.world.item.enchantment.Enchantment$Rarity VERY_RARE -> d
    int weight -> e
    net.minecraft.world.item.enchantment.Enchantment$Rarity[] $VALUES -> f
    27:27:net.minecraft.world.item.enchantment.Enchantment$Rarity[] values() -> values
    27:27:net.minecraft.world.item.enchantment.Enchantment$Rarity valueOf(java.lang.String) -> valueOf
    35:37:void <init>(java.lang.String,int,int) -> <init>
    40:40:int getWeight() -> a
    27:31:void <clinit>() -> <clinit>
net.minecraft.world.item.enchantment.EnchantmentCategory -> bhy:
    net.minecraft.world.item.enchantment.EnchantmentCategory ALL -> a
    net.minecraft.world.item.enchantment.EnchantmentCategory ARMOR -> b
    net.minecraft.world.item.enchantment.EnchantmentCategory ARMOR_FEET -> c
    net.minecraft.world.item.enchantment.EnchantmentCategory ARMOR_LEGS -> d
    net.minecraft.world.item.enchantment.EnchantmentCategory ARMOR_CHEST -> e
    net.minecraft.world.item.enchantment.EnchantmentCategory ARMOR_HEAD -> f
    net.minecraft.world.item.enchantment.EnchantmentCategory WEAPON -> g
    net.minecraft.world.item.enchantment.EnchantmentCategory DIGGER -> h
    net.minecraft.world.item.enchantment.EnchantmentCategory FISHING_ROD -> i
    net.minecraft.world.item.enchantment.EnchantmentCategory TRIDENT -> j
    net.minecraft.world.item.enchantment.EnchantmentCategory BREAKABLE -> k
    net.minecraft.world.item.enchantment.EnchantmentCategory BOW -> l
    net.minecraft.world.item.enchantment.EnchantmentCategory WEARABLE -> m
    net.minecraft.world.item.enchantment.EnchantmentCategory CROSSBOW -> n
    net.minecraft.world.item.enchantment.EnchantmentCategory[] $VALUES -> o
    17:17:net.minecraft.world.item.enchantment.EnchantmentCategory[] values() -> values
    17:17:net.minecraft.world.item.enchantment.EnchantmentCategory valueOf(java.lang.String) -> valueOf
    17:17:void <init>(java.lang.String,int) -> <init>
    boolean canEnchant(net.minecraft.world.item.Item) -> a
    17:17:void <init>(java.lang.String,int,net.minecraft.world.item.enchantment.EnchantmentCategory$1) -> <init>
    17:109:void <clinit>() -> <clinit>
net.minecraft.world.item.enchantment.EnchantmentCategory$1 -> bhy$1:
    18:18:void <init>(java.lang.String,int) -> <init>
    21:31:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$10 -> bhy$2:
    84:84:void <init>(java.lang.String,int) -> <init>
    87:87:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$11 -> bhy$3:
    90:90:void <init>(java.lang.String,int) -> <init>
    93:93:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$12 -> bhy$4:
    96:96:void <init>(java.lang.String,int) -> <init>
    99:99:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$13 -> bhy$5:
    102:102:void <init>(java.lang.String,int) -> <init>
    105:106:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$14 -> bhy$6:
    109:109:void <init>(java.lang.String,int) -> <init>
    112:112:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$2 -> bhy$7:
    35:35:void <init>(java.lang.String,int) -> <init>
    38:38:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$3 -> bhy$8:
    41:41:void <init>(java.lang.String,int) -> <init>
    44:44:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$4 -> bhy$9:
    47:47:void <init>(java.lang.String,int) -> <init>
    50:50:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$5 -> bhy$10:
    53:53:void <init>(java.lang.String,int) -> <init>
    56:56:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$6 -> bhy$11:
    59:59:void <init>(java.lang.String,int) -> <init>
    62:62:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$7 -> bhy$12:
    66:66:void <init>(java.lang.String,int) -> <init>
    69:69:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$8 -> bhy$13:
    72:72:void <init>(java.lang.String,int) -> <init>
    75:75:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentCategory$9 -> bhy$14:
    78:78:void <init>(java.lang.String,int) -> <init>
    81:81:boolean canEnchant(net.minecraft.world.item.Item) -> a
net.minecraft.world.item.enchantment.EnchantmentHelper -> bhz:
    32:32:void <init>() -> <init>
    34:49:int getItemEnchantmentLevel(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.item.ItemStack) -> a
    53:54:java.util.Map getEnchantments(net.minecraft.world.item.ItemStack) -> a
    58:66:java.util.Map deserializeEnchantments(net.minecraft.nbt.ListTag) -> a
    70:95:void setEnchantments(java.util.Map,net.minecraft.world.item.ItemStack) -> a
    103:115:void runIterationOnItem(net.minecraft.world.item.enchantment.EnchantmentHelper$EnchantmentVisitor,net.minecraft.world.item.ItemStack) -> a
    118:121:void runIterationOnInventory(net.minecraft.world.item.enchantment.EnchantmentHelper$EnchantmentVisitor,java.lang.Iterable) -> a
    124:126:int getDamageProtection(java.lang.Iterable,net.minecraft.world.damagesource.DamageSource) -> a
    130:132:float getDamageBonus(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.MobType) -> a
    136:140:float getSweepingDamageRatio(net.minecraft.world.entity.LivingEntity) -> a
    144:151:void doPostHurtEffects(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.Entity) -> a
    154:161:void doPostDamageEffects(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.Entity) -> b
    164:175:int getEnchantmentLevel(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.entity.LivingEntity) -> a
    179:179:int getKnockbackBonus(net.minecraft.world.entity.LivingEntity) -> b
    183:183:int getFireAspect(net.minecraft.world.entity.LivingEntity) -> c
    187:187:int getRespiration(net.minecraft.world.entity.LivingEntity) -> d
    191:191:int getDepthStrider(net.minecraft.world.entity.LivingEntity) -> e
    195:195:int getBlockEfficiency(net.minecraft.world.entity.LivingEntity) -> f
    199:199:int getFishingLuckBonus(net.minecraft.world.item.ItemStack) -> b
    203:203:int getFishingSpeedBonus(net.minecraft.world.item.ItemStack) -> c
    207:207:int getMobLooting(net.minecraft.world.entity.LivingEntity) -> g
    211:211:boolean hasAquaAffinity(net.minecraft.world.entity.LivingEntity) -> h
    215:215:boolean hasFrostWalker(net.minecraft.world.entity.LivingEntity) -> i
    219:219:boolean hasBindingCurse(net.minecraft.world.item.ItemStack) -> d
    223:223:boolean hasVanishingCurse(net.minecraft.world.item.ItemStack) -> e
    227:227:int getLoyalty(net.minecraft.world.item.ItemStack) -> f
    231:231:int getRiptide(net.minecraft.world.item.ItemStack) -> g
    235:235:boolean hasChanneling(net.minecraft.world.item.ItemStack) -> h
    240:252:java.util.Map$Entry getRandomItemWith(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.entity.LivingEntity) -> b
    263:281:int getEnchantmentCost(java.util.Random,int,int,net.minecraft.world.item.ItemStack) -> a
    285:300:net.minecraft.world.item.ItemStack enchantItem(java.util.Random,net.minecraft.world.item.ItemStack,int,boolean) -> a
    311:342:java.util.List selectEnchantment(java.util.Random,net.minecraft.world.item.ItemStack,int,boolean) -> b
    346:352:void filterCompatibleEnchantments(java.util.List,net.minecraft.world.item.enchantment.EnchantmentInstance) -> a
    355:360:boolean isEnchantmentCompatible(java.util.Collection,net.minecraft.world.item.enchantment.Enchantment) -> a
    364:385:java.util.List getAvailableEnchantmentResults(int,net.minecraft.world.item.ItemStack,boolean) -> a
    154:154:void lambda$doPostDamageEffects$5(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.Entity,net.minecraft.world.item.enchantment.Enchantment,int) -> a
    144:144:void lambda$doPostHurtEffects$4(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.Entity,net.minecraft.world.item.enchantment.Enchantment,int) -> b
    131:131:void lambda$getDamageBonus$3(org.apache.commons.lang3.mutable.MutableFloat,net.minecraft.world.entity.MobType,net.minecraft.world.item.enchantment.Enchantment,int) -> a
    125:125:void lambda$getDamageProtection$2(org.apache.commons.lang3.mutable.MutableInt,net.minecraft.world.damagesource.DamageSource,net.minecraft.world.item.enchantment.Enchantment,int) -> a
    113:113:void lambda$runIterationOnItem$1(net.minecraft.world.item.enchantment.EnchantmentHelper$EnchantmentVisitor,int,net.minecraft.world.item.enchantment.Enchantment) -> a
    63:63:void lambda$deserializeEnchantments$0(java.util.Map,net.minecraft.nbt.CompoundTag,net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.EnchantmentHelper$EnchantmentVisitor -> bhz$a:
    void accept(net.minecraft.world.item.enchantment.Enchantment,int) -> accept
net.minecraft.world.item.enchantment.EnchantmentInstance -> bia:
    net.minecraft.world.item.enchantment.Enchantment enchantment -> b
    int level -> c
    10:13:void <init>(net.minecraft.world.item.enchantment.Enchantment,int) -> <init>
net.minecraft.world.item.enchantment.Enchantments -> bib:
    net.minecraft.world.entity.EquipmentSlot[] ARMOR_SLOTS -> L
    net.minecraft.world.item.enchantment.Enchantment ALL_DAMAGE_PROTECTION -> a
    net.minecraft.world.item.enchantment.Enchantment FIRE_PROTECTION -> b
    net.minecraft.world.item.enchantment.Enchantment FALL_PROTECTION -> c
    net.minecraft.world.item.enchantment.Enchantment BLAST_PROTECTION -> d
    net.minecraft.world.item.enchantment.Enchantment PROJECTILE_PROTECTION -> e
    net.minecraft.world.item.enchantment.Enchantment RESPIRATION -> f
    net.minecraft.world.item.enchantment.Enchantment AQUA_AFFINITY -> g
    net.minecraft.world.item.enchantment.Enchantment THORNS -> h
    net.minecraft.world.item.enchantment.Enchantment DEPTH_STRIDER -> i
    net.minecraft.world.item.enchantment.Enchantment FROST_WALKER -> j
    net.minecraft.world.item.enchantment.Enchantment BINDING_CURSE -> k
    net.minecraft.world.item.enchantment.Enchantment SHARPNESS -> l
    net.minecraft.world.item.enchantment.Enchantment SMITE -> m
    net.minecraft.world.item.enchantment.Enchantment BANE_OF_ARTHROPODS -> n
    net.minecraft.world.item.enchantment.Enchantment KNOCKBACK -> o
    net.minecraft.world.item.enchantment.Enchantment FIRE_ASPECT -> p
    net.minecraft.world.item.enchantment.Enchantment MOB_LOOTING -> q
    net.minecraft.world.item.enchantment.Enchantment SWEEPING_EDGE -> r
    net.minecraft.world.item.enchantment.Enchantment BLOCK_EFFICIENCY -> s
    net.minecraft.world.item.enchantment.Enchantment SILK_TOUCH -> t
    net.minecraft.world.item.enchantment.Enchantment UNBREAKING -> u
    net.minecraft.world.item.enchantment.Enchantment BLOCK_FORTUNE -> v
    net.minecraft.world.item.enchantment.Enchantment POWER_ARROWS -> w
    net.minecraft.world.item.enchantment.Enchantment PUNCH_ARROWS -> x
    net.minecraft.world.item.enchantment.Enchantment FLAMING_ARROWS -> y
    net.minecraft.world.item.enchantment.Enchantment INFINITY_ARROWS -> z
    net.minecraft.world.item.enchantment.Enchantment FISHING_LUCK -> A
    net.minecraft.world.item.enchantment.Enchantment FISHING_SPEED -> B
    net.minecraft.world.item.enchantment.Enchantment LOYALTY -> C
    net.minecraft.world.item.enchantment.Enchantment IMPALING -> D
    net.minecraft.world.item.enchantment.Enchantment RIPTIDE -> E
    net.minecraft.world.item.enchantment.Enchantment CHANNELING -> F
    net.minecraft.world.item.enchantment.Enchantment MULTISHOT -> G
    net.minecraft.world.item.enchantment.Enchantment QUICK_CHARGE -> H
    net.minecraft.world.item.enchantment.Enchantment PIERCING -> I
    net.minecraft.world.item.enchantment.Enchantment MENDING -> J
    net.minecraft.world.item.enchantment.Enchantment VANISHING_CURSE -> K
    6:6:void <init>() -> <init>
    68:68:net.minecraft.world.item.enchantment.Enchantment register(java.lang.String,net.minecraft.world.item.enchantment.Enchantment) -> a
    7:65:void <clinit>() -> <clinit>
net.minecraft.world.item.enchantment.FireAspectEnchantment -> bic:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.FishingSpeedEnchantment -> bid:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.item.enchantment.EnchantmentCategory,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.FrostWalkerEnchantment -> bie:
    17:18:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    22:22:int getMinCost(int) -> a
    27:27:int getMaxCost(int) -> b
    32:32:boolean isTreasureOnly() -> b
    37:37:int getMaxLevel() -> a
    41:65:void onEntityMoved(net.minecraft.world.entity.LivingEntity,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int) -> a
    69:69:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.KnockbackEnchantment -> bif:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.LootBonusEnchantment -> big:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.item.enchantment.EnchantmentCategory,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:27:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.MendingEnchantment -> bih:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:boolean isTreasureOnly() -> b
    27:27:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.MultiShotEnchantment -> bii:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:27:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.OxygenEnchantment -> bij:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.ProtectionEnchantment -> bik:
    net.minecraft.world.item.enchantment.ProtectionEnchantment$Type type -> a
    42:48:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.item.enchantment.ProtectionEnchantment$Type,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    52:52:int getMinCost(int) -> a
    57:57:int getMaxCost(int) -> b
    62:62:int getMaxLevel() -> a
    67:86:int getDamageProtection(int,net.minecraft.world.damagesource.DamageSource) -> a
    91:100:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
    104:110:int getFireAfterDampener(net.minecraft.world.entity.LivingEntity,int) -> a
    114:120:double getExplosionKnockbackAfterDampener(net.minecraft.world.entity.LivingEntity,double) -> a
net.minecraft.world.item.enchantment.ProtectionEnchantment$Type -> bik$a:
    net.minecraft.world.item.enchantment.ProtectionEnchantment$Type ALL -> a
    net.minecraft.world.item.enchantment.ProtectionEnchantment$Type FIRE -> b
    net.minecraft.world.item.enchantment.ProtectionEnchantment$Type FALL -> c
    net.minecraft.world.item.enchantment.ProtectionEnchantment$Type EXPLOSION -> d
    net.minecraft.world.item.enchantment.ProtectionEnchantment$Type PROJECTILE -> e
    java.lang.String name -> f
    int minCost -> g
    int levelCost -> h
    net.minecraft.world.item.enchantment.ProtectionEnchantment$Type[] $VALUES -> i
    9:9:net.minecraft.world.item.enchantment.ProtectionEnchantment$Type[] values() -> values
    9:9:net.minecraft.world.item.enchantment.ProtectionEnchantment$Type valueOf(java.lang.String) -> valueOf
    20:24:void <init>(java.lang.String,int,java.lang.String,int,int) -> <init>
    27:27:java.lang.String getName() -> a
    31:31:int getMinCost() -> b
    35:35:int getLevelCost() -> c
    9:14:void <clinit>() -> <clinit>
net.minecraft.world.item.enchantment.QuickChargeEnchantment -> bil:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.SweepingEdgeEnchantment -> bim:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    26:26:float getSweepingDamageRatio(int) -> e
net.minecraft.world.item.enchantment.ThornsEnchantment -> bin:
    17:18:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    22:22:int getMinCost(int) -> a
    27:27:int getMaxCost(int) -> b
    32:32:int getMaxLevel() -> a
    37:40:boolean canEnchant(net.minecraft.world.item.ItemStack) -> a
    45:61:void doPostHurt(net.minecraft.world.entity.LivingEntity,net.minecraft.world.entity.Entity,int) -> b
    64:67:boolean shouldHit(int,java.util.Random) -> a
    71:74:int getDamage(int,java.util.Random) -> b
    58:58:void lambda$doPostHurt$1(java.util.Map$Entry,net.minecraft.world.entity.LivingEntity) -> a
    54:54:void lambda$doPostHurt$0(java.util.Map$Entry,net.minecraft.world.entity.LivingEntity) -> b
net.minecraft.world.item.enchantment.TridentChannelingEnchantment -> bio:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:27:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.TridentImpalerEnchantment -> bip:
    8:9:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    13:13:int getMinCost(int) -> a
    18:18:int getMaxCost(int) -> b
    23:23:int getMaxLevel() -> a
    28:31:float getDamageBonus(int,net.minecraft.world.entity.MobType) -> a
net.minecraft.world.item.enchantment.TridentLoyaltyEnchantment -> biq:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:27:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.TridentRiptideEnchantment -> bir:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:27:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.UntouchingEnchantment -> bis:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:27:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.VanishingCurseEnchantment -> bit:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:27:boolean isTreasureOnly() -> b
    32:32:boolean isCurse() -> c
net.minecraft.world.item.enchantment.WaterWalkerEnchantment -> biu:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
    27:27:boolean checkCompatibility(net.minecraft.world.item.enchantment.Enchantment) -> a
net.minecraft.world.item.enchantment.WaterWorkerEnchantment -> biv:
    7:8:void <init>(net.minecraft.world.item.enchantment.Enchantment$Rarity,net.minecraft.world.entity.EquipmentSlot[]) -> <init>
    12:12:int getMinCost(int) -> a
    17:17:int getMaxCost(int) -> b
    22:22:int getMaxLevel() -> a
net.minecraft.world.item.enchantment.package-info -> biw:
net.minecraft.world.item.package-info -> bix:
net.minecraft.world.item.trading.Merchant -> biy:
    void setTradingPlayer(net.minecraft.world.entity.player.Player) -> e
    net.minecraft.world.entity.player.Player getTradingPlayer() -> es
    net.minecraft.world.item.trading.MerchantOffers getOffers() -> eu
    void overrideOffers(net.minecraft.world.item.trading.MerchantOffers) -> a
    void notifyTrade(net.minecraft.world.item.trading.MerchantOffer) -> a
    void notifyTradeUpdated(net.minecraft.world.item.ItemStack) -> i
    net.minecraft.world.level.Level getLevel() -> eB
    int getVillagerXp() -> er
    void overrideXp(int) -> t
    boolean showProgressBar() -> ev
    net.minecraft.sounds.SoundEvent getNotifyTradeSound() -> ew
    39:39:boolean canRestock() -> eD
    43:51:void openTradingScreen(net.minecraft.world.entity.player.Player,net.minecraft.network.chat.Component,int) -> a
    43:43:net.minecraft.world.inventory.AbstractContainerMenu lambda$openTradingScreen$0(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> a
net.minecraft.world.item.trading.MerchantOffer -> biz:
    net.minecraft.world.item.ItemStack baseCostA -> a
    net.minecraft.world.item.ItemStack costB -> b
    net.minecraft.world.item.ItemStack result -> c
    int uses -> d
    int maxUses -> e
    boolean rewardExp -> f
    int specialPriceDiff -> g
    int demand -> h
    float priceMultiplier -> i
    int xp -> j
    16:49:void <init>(net.minecraft.nbt.CompoundTag) -> <init>
    52:53:void <init>(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,int,int,float) -> <init>
    56:57:void <init>(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,int,int,float) -> <init>
    60:61:void <init>(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,int,int,int,float) -> <init>
    16:72:void <init>(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,int,int,int,float,int) -> <init>
    75:75:net.minecraft.world.item.ItemStack getBaseCostA() -> a
    80:87:net.minecraft.world.item.ItemStack getCostA() -> b
    91:91:net.minecraft.world.item.ItemStack getCostB() -> c
    95:95:net.minecraft.world.item.ItemStack getResult() -> d
    99:100:void updateDemand() -> e
    103:103:net.minecraft.world.item.ItemStack assemble() -> f
    107:109:boolean isSame(net.minecraft.world.item.trading.MerchantOffer) -> a
    114:114:int getUses() -> g
    118:119:void resetUses() -> h
    122:122:int getMaxUses() -> i
    126:127:void increaseUses() -> j
    130:130:int getDemand() -> k
    134:135:void addToSpecialPriceDiff(int) -> a
    138:139:void resetSpecialPriceDiff() -> l
    142:142:int getSpecialPriceDiff() -> m
    146:147:void setSpecialPriceDiff(int) -> b
    150:150:float getPriceMultiplier() -> n
    154:154:int getXp() -> o
    158:158:boolean isOutOfStock() -> p
    162:163:void setToOutOfStock() -> q
    166:166:boolean needsRestock() -> r
    170:170:boolean shouldRewardExp() -> s
    174:185:net.minecraft.nbt.CompoundTag createTag() -> t
    189:190:boolean satisfiedBy(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    194:202:boolean isRequiredItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> c
    206:214:boolean take(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> b
net.minecraft.world.item.trading.MerchantOffers -> bja:
    13:14:void <init>() -> <init>
    16:22:void <init>(net.minecraft.nbt.CompoundTag) -> <init>
    26:41:net.minecraft.world.item.trading.MerchantOffer getRecipeFor(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack,int) -> a
    45:64:void writeToStream(net.minecraft.network.FriendlyByteBuf) -> a
    67:94:net.minecraft.world.item.trading.MerchantOffers createFromStream(net.minecraft.network.FriendlyByteBuf) -> b
    98:106:net.minecraft.nbt.CompoundTag createTag() -> a
net.minecraft.world.item.trading.package-info -> bjb:
net.minecraft.world.level.BaseCommandBlock -> bjc:
    java.text.SimpleDateFormat TIME_FORMAT -> b
    net.minecraft.network.chat.Component DEFAULT_NAME -> c
    long lastExecution -> d
    boolean updateLastExecution -> e
    int successCount -> f
    boolean trackOutput -> g
    net.minecraft.network.chat.Component lastOutput -> h
    java.lang.String command -> i
    net.minecraft.network.chat.Component name -> j
    23:33:void <init>() -> <init>
    36:36:int getSuccessCount() -> i
    40:41:void setSuccessCount(int) -> a
    44:44:net.minecraft.network.chat.Component getLastOutput() -> j
    48:60:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> a
    64:89:void load(net.minecraft.nbt.CompoundTag) -> b
    92:94:void setCommand(java.lang.String) -> a
    97:97:java.lang.String getCommand() -> k
    101:142:boolean performCommand(net.minecraft.world.level.Level) -> a
    146:146:net.minecraft.network.chat.Component getName() -> l
    150:155:void setName(net.minecraft.network.chat.Component) -> b
    159:163:void sendMessage(net.minecraft.network.chat.Component) -> a
    net.minecraft.server.level.ServerLevel getLevel() -> d
    void onUpdated() -> e
    void writeCoordinates(io.netty.buffer.ByteBuf) -> a
    172:173:void setLastOutput(net.minecraft.network.chat.Component) -> c
    176:177:void setTrackOutput(boolean) -> a
    180:180:boolean isTrackOutput() -> m
    184:190:boolean usedBy(net.minecraft.world.entity.player.Player) -> a
    net.minecraft.world.phys.Vec3 getPosition() -> f
    net.minecraft.commands.CommandSourceStack createCommandSourceStack() -> h
    199:199:boolean acceptsSuccess() -> a
    204:204:boolean acceptsFailure() -> b
    209:209:boolean shouldInformAdmins() -> I_
    130:130:java.lang.String lambda$performCommand$1() -> g
    119:122:void lambda$performCommand$0(com.mojang.brigadier.context.CommandContext,boolean,int) -> a
    24:25:void <clinit>() -> <clinit>
net.minecraft.world.level.BaseSpawner -> bjd:
    org.apache.logging.log4j.Logger LOGGER -> a
    int spawnDelay -> b
    java.util.List spawnPotentials -> c
    net.minecraft.world.level.SpawnData nextSpawnData -> d
    double spin -> e
    double oSpin -> f
    int minSpawnDelay -> g
    int maxSpawnDelay -> h
    int spawnCount -> i
    net.minecraft.world.entity.Entity displayEntity -> j
    int maxNearbyEntities -> k
    int requiredPlayerRange -> l
    int spawnRange -> m
    30:47:void <init>() -> <init>
    51:57:net.minecraft.resources.ResourceLocation getEntityId() -> g
    62:63:void setEntityId(net.minecraft.world.entity.EntityType) -> a
    66:67:boolean isNearPlayer() -> h
    71:161:void tick() -> c
    164:170:void addWithPassengers(net.minecraft.world.entity.Entity) -> a
    173:184:void delay() -> i
    187:222:void load(net.minecraft.nbt.CompoundTag) -> a
    225:250:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    255:262:net.minecraft.world.entity.Entity getOrCreateDisplayEntity() -> d
    266:270:boolean onEventTriggered(int) -> b
    274:275:void setNextSpawnData(net.minecraft.world.level.SpawnData) -> a
    void broadcastEvent(int) -> a
    net.minecraft.world.level.Level getLevel() -> a
    net.minecraft.core.BlockPos getPos() -> b
    284:284:double getSpin() -> e
    288:288:double getoSpin() -> f
    125:126:net.minecraft.world.entity.Entity lambda$tick$0(double,double,double,net.minecraft.world.entity.Entity) -> a
    31:31:void <clinit>() -> <clinit>
net.minecraft.world.level.BlockAndTintGetter -> bje:
    net.minecraft.world.level.lighting.LevelLightEngine getLightEngine() -> e
    int getBlockTint(net.minecraft.core.BlockPos,net.minecraft.world.level.ColorResolver) -> a
    12:12:int getBrightness(net.minecraft.world.level.LightLayer,net.minecraft.core.BlockPos) -> a
    16:16:int getRawBrightness(net.minecraft.core.BlockPos,int) -> b
    20:20:boolean canSeeSky(net.minecraft.core.BlockPos) -> f
net.minecraft.world.level.BlockEventData -> bjf:
    net.minecraft.core.BlockPos pos -> a
    net.minecraft.world.level.block.Block block -> b
    int paramA -> c
    int paramB -> d
    12:17:void <init>(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,int,int) -> <init>
    20:20:net.minecraft.core.BlockPos getPos() -> a
    24:24:net.minecraft.world.level.block.Block getBlock() -> b
    28:28:int getParamA() -> c
    32:32:int getParamB() -> d
    37:41:boolean equals(java.lang.Object) -> equals
    46:50:int hashCode() -> hashCode
    55:55:java.lang.String toString() -> toString
net.minecraft.world.level.BlockGetter -> bjg:
    net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos) -> c
    net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos) -> d_
    net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos) -> b
    35:35:int getLightBlock(net.minecraft.core.BlockPos) -> g
    39:39:int getLightEmission(net.minecraft.core.BlockPos) -> h
    43:43:int getMaxLightLevel() -> H
    47:47:int getMaxBuildHeight() -> I
    51:51:net.minecraft.world.phys.BlockHitResult clip(net.minecraft.world.level.ClipContext) -> a
    77:85:net.minecraft.world.phys.BlockHitResult clipWithInteractionOverride(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.level.block.state.BlockState) -> a
    89:159:java.lang.Object traverseBlocks(net.minecraft.world.level.ClipContext,java.util.function.BiFunction,java.util.function.Function) -> a
    69:70:net.minecraft.world.phys.BlockHitResult lambda$clip$1(net.minecraft.world.level.ClipContext) -> b
    52:67:net.minecraft.world.phys.BlockHitResult lambda$clip$0(net.minecraft.world.level.ClipContext,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.ChunkPos -> bjh:
    long INVALID_CHUNK_POS -> a
    int x -> b
    int z -> c
    22:25:void <init>(int,int) -> <init>
    27:30:void <init>(net.minecraft.core.BlockPos) -> <init>
    32:35:void <init>(long) -> <init>
    38:38:long toLong() -> a
    42:42:long asLong(int,int) -> a
    46:46:int getX(long) -> a
    50:50:int getZ(long) -> b
    59:61:int hashCode() -> hashCode
    66:76:boolean equals(java.lang.Object) -> equals
    80:80:int getMiddleBlockX() -> b
    84:84:int getMiddleBlockZ() -> c
    88:88:int getMinBlockX() -> d
    92:92:int getMinBlockZ() -> e
    96:96:int getMaxBlockX() -> f
    100:100:int getMaxBlockZ() -> g
    104:104:int getRegionX() -> h
    108:108:int getRegionZ() -> i
    112:112:int getRegionLocalX() -> j
    116:116:int getRegionLocalZ() -> k
    120:120:net.minecraft.core.BlockPos getBlockAt(int,int,int) -> a
    124:124:net.minecraft.core.BlockPos getMiddleBlockPosition(int) -> a
    129:129:java.lang.String toString() -> toString
    133:133:net.minecraft.core.BlockPos getWorldPosition() -> l
    137:137:int getChessboardDistance(net.minecraft.world.level.ChunkPos) -> a
    141:141:java.util.stream.Stream rangeClosed(net.minecraft.world.level.ChunkPos,int) -> a
    145:149:java.util.stream.Stream rangeClosed(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.ChunkPos) -> a
    13:13:void <clinit>() -> <clinit>
net.minecraft.world.level.ChunkPos$1 -> bjh$1:
    net.minecraft.world.level.ChunkPos pos -> e
    net.minecraft.world.level.ChunkPos val$from -> a
    net.minecraft.world.level.ChunkPos val$to -> b
    int val$zDiff -> c
    int val$xDiff -> d
    149:149:void <init>(long,int,net.minecraft.world.level.ChunkPos,net.minecraft.world.level.ChunkPos,int,int) -> <init>
    154:169:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
net.minecraft.world.level.ChunkTickList -> bji:
    java.util.Set ticks -> a
    java.util.function.Function toId -> b
    19:20:void <init>(java.util.function.Function,java.util.List) -> <init>
    22:25:void <init>(java.util.function.Function,java.util.Set) -> <init>
    29:29:boolean hasScheduledTick(net.minecraft.core.BlockPos,java.lang.Object) -> a
    34:35:void scheduleTick(net.minecraft.core.BlockPos,java.lang.Object,int,net.minecraft.world.level.TickPriority) -> a
    39:39:boolean willTickThisTick(net.minecraft.core.BlockPos,java.lang.Object) -> b
    44:45:void addAll(java.util.stream.Stream) -> a
    48:48:java.util.stream.Stream ticks() -> b
    52:52:net.minecraft.nbt.ListTag save(long) -> a
    56:65:net.minecraft.world.level.ChunkTickList create(net.minecraft.nbt.ListTag,java.util.function.Function,java.util.function.Function) -> a
    70:70:int size() -> a
net.minecraft.world.level.ClipContext -> bjj:
    net.minecraft.world.phys.Vec3 from -> a
    net.minecraft.world.phys.Vec3 to -> b
    net.minecraft.world.level.ClipContext$Block block -> c
    net.minecraft.world.level.ClipContext$Fluid fluid -> d
    net.minecraft.world.phys.shapes.CollisionContext collisionContext -> e
    21:27:void <init>(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,net.minecraft.world.level.ClipContext$Block,net.minecraft.world.level.ClipContext$Fluid,net.minecraft.world.entity.Entity) -> <init>
    30:30:net.minecraft.world.phys.Vec3 getTo() -> a
    34:34:net.minecraft.world.phys.Vec3 getFrom() -> b
    38:38:net.minecraft.world.phys.shapes.VoxelShape getBlockShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    42:42:net.minecraft.world.phys.shapes.VoxelShape getFluidShape(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.ClipContext$Block -> bjj$a:
    net.minecraft.world.level.ClipContext$Block COLLIDER -> a
    net.minecraft.world.level.ClipContext$Block OUTLINE -> b
    net.minecraft.world.level.ClipContext$ShapeGetter shapeGetter -> c
    net.minecraft.world.level.ClipContext$Block[] $VALUES -> d
    45:45:net.minecraft.world.level.ClipContext$Block[] values() -> values
    45:45:net.minecraft.world.level.ClipContext$Block valueOf(java.lang.String) -> valueOf
    52:54:void <init>(java.lang.String,int,net.minecraft.world.level.ClipContext$ShapeGetter) -> <init>
    58:58:net.minecraft.world.phys.shapes.VoxelShape get(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> get
    45:47:void <clinit>() -> <clinit>
net.minecraft.world.level.ClipContext$Fluid -> bjj$b:
    net.minecraft.world.level.ClipContext$Fluid NONE -> a
    net.minecraft.world.level.ClipContext$Fluid SOURCE_ONLY -> b
    net.minecraft.world.level.ClipContext$Fluid ANY -> c
    java.util.function.Predicate canPick -> d
    net.minecraft.world.level.ClipContext$Fluid[] $VALUES -> e
    66:66:net.minecraft.world.level.ClipContext$Fluid[] values() -> values
    66:66:net.minecraft.world.level.ClipContext$Fluid valueOf(java.lang.String) -> valueOf
    74:76:void <init>(java.lang.String,int,java.util.function.Predicate) -> <init>
    79:79:boolean canPick(net.minecraft.world.level.material.FluidState) -> a
    69:69:boolean lambda$static$1(net.minecraft.world.level.material.FluidState) -> b
    67:67:boolean lambda$static$0(net.minecraft.world.level.material.FluidState) -> c
    66:69:void <clinit>() -> <clinit>
net.minecraft.world.level.ClipContext$ShapeGetter -> bjj$c:
    net.minecraft.world.phys.shapes.VoxelShape get(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> get
net.minecraft.world.level.CollisionGetter -> bjk:
    net.minecraft.world.level.border.WorldBorder getWorldBorder() -> f
    net.minecraft.world.level.BlockGetter getChunkForCollisions(int,int) -> c
    32:32:java.util.stream.Stream getEntityCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.shapes.VoxelShape,java.util.Set) -> a
    36:36:boolean isUnobstructed(net.minecraft.world.entity.Entity,net.minecraft.world.phys.shapes.VoxelShape) -> a
    40:41:boolean isUnobstructed(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    45:45:boolean isUnobstructed(net.minecraft.world.entity.Entity) -> i
    49:49:boolean noCollision(net.minecraft.world.phys.AABB) -> a
    53:53:boolean noCollision(net.minecraft.world.entity.Entity) -> j
    57:57:boolean noCollision(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB) -> a_
    61:61:boolean noCollision(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.Set) -> a
    65:65:java.util.stream.Stream getEntityCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.Set) -> b
    69:71:java.util.stream.Stream getCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.Set) -> c
    77:91:java.util.stream.Stream getBlockCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB) -> b
net.minecraft.world.level.CollisionGetter$1 -> bjk$1:
    boolean checkedBorder -> a
    net.minecraft.world.entity.Entity val$source -> b
    net.minecraft.core.Cursor3D val$cursor -> c
    net.minecraft.core.BlockPos$MutableBlockPos val$pos -> d
    net.minecraft.world.phys.shapes.CollisionContext val$context -> e
    net.minecraft.world.phys.shapes.VoxelShape val$testArea -> f
    net.minecraft.world.level.CollisionGetter this$0 -> g
    91:92:void <init>(net.minecraft.world.level.CollisionGetter,long,int,net.minecraft.world.entity.Entity,net.minecraft.core.Cursor3D,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.world.phys.shapes.CollisionContext,net.minecraft.world.phys.shapes.VoxelShape) -> <init>
    96:145:boolean tryAdvance(java.util.function.Consumer) -> tryAdvance
net.minecraft.world.level.ColorResolver -> net.minecraft.world.level.ColorResolver:
    int getColor(net.minecraft.world.level.biome.Biome,double,double) -> getColor
net.minecraft.world.level.CustomSpawner -> bjl:
    int tick(net.minecraft.server.level.ServerLevel,boolean,boolean) -> a
net.minecraft.world.level.EmptyBlockGetter -> bjm:
    net.minecraft.world.level.EmptyBlockGetter INSTANCE -> a
    net.minecraft.world.level.EmptyBlockGetter[] $VALUES -> b
    12:12:net.minecraft.world.level.EmptyBlockGetter[] values() -> values
    12:12:net.minecraft.world.level.EmptyBlockGetter valueOf(java.lang.String) -> valueOf
    12:12:void <init>(java.lang.String,int) -> <init>
    18:18:net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos) -> c
    23:23:net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos) -> d_
    28:28:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos) -> b
    12:13:void <clinit>() -> <clinit>
net.minecraft.world.level.EmptyTickList -> bjn:
    net.minecraft.world.level.EmptyTickList INSTANCE -> a
    7:7:void <init>() -> <init>
    12:12:net.minecraft.world.level.EmptyTickList empty() -> b
    17:17:boolean hasScheduledTick(net.minecraft.core.BlockPos,java.lang.Object) -> a
    22:22:void scheduleTick(net.minecraft.core.BlockPos,java.lang.Object,int) -> a
    26:26:void scheduleTick(net.minecraft.core.BlockPos,java.lang.Object,int,net.minecraft.world.level.TickPriority) -> a
    30:30:boolean willTickThisTick(net.minecraft.core.BlockPos,java.lang.Object) -> b
    35:35:void addAll(java.util.stream.Stream) -> a
    39:39:int size() -> a
    8:8:void <clinit>() -> <clinit>
net.minecraft.world.level.EntityGetter -> bjo:
    java.util.List getEntities(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.function.Predicate) -> a
    java.util.List getEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AABB,java.util.function.Predicate) -> a
    28:28:java.util.List getLoadedEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AABB,java.util.function.Predicate) -> b
    java.util.List players() -> A
    34:34:java.util.List getEntities(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB) -> a
    38:45:boolean isUnobstructed(net.minecraft.world.entity.Entity,net.minecraft.world.phys.shapes.VoxelShape) -> a
    49:49:java.util.List getEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AABB) -> a
    53:53:java.util.List getLoadedEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AABB) -> b
    58:71:java.util.stream.Stream getEntityCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.Set) -> b
    77:91:net.minecraft.world.entity.player.Player getNearestPlayer(double,double,double,double,java.util.function.Predicate) -> a
    96:96:net.minecraft.world.entity.player.Player getNearestPlayer(net.minecraft.world.entity.Entity,double) -> a
    101:102:net.minecraft.world.entity.player.Player getNearestPlayer(double,double,double,double,boolean) -> a
    107:119:net.minecraft.world.entity.player.Player getNearestPlayerIgnoreY(double,double,double) -> a
    123:132:boolean hasNearbyAlivePlayer(double,double,double,double) -> a
    137:137:net.minecraft.world.entity.player.Player getNearestPlayer(net.minecraft.world.entity.ai.targeting.TargetingConditions,net.minecraft.world.entity.LivingEntity) -> a
    142:142:net.minecraft.world.entity.player.Player getNearestPlayer(net.minecraft.world.entity.ai.targeting.TargetingConditions,net.minecraft.world.entity.LivingEntity,double,double,double) -> a
    147:147:net.minecraft.world.entity.player.Player getNearestPlayer(net.minecraft.world.entity.ai.targeting.TargetingConditions,double,double,double) -> a
    152:152:net.minecraft.world.entity.LivingEntity getNearestEntity(java.lang.Class,net.minecraft.world.entity.ai.targeting.TargetingConditions,net.minecraft.world.entity.LivingEntity,double,double,double,net.minecraft.world.phys.AABB) -> a
    157:157:net.minecraft.world.entity.LivingEntity getNearestLoadedEntity(java.lang.Class,net.minecraft.world.entity.ai.targeting.TargetingConditions,net.minecraft.world.entity.LivingEntity,double,double,double,net.minecraft.world.phys.AABB) -> b
    162:176:net.minecraft.world.entity.LivingEntity getNearestEntity(java.util.List,net.minecraft.world.entity.ai.targeting.TargetingConditions,net.minecraft.world.entity.LivingEntity,double,double,double) -> a
    180:187:java.util.List getNearbyPlayers(net.minecraft.world.entity.ai.targeting.TargetingConditions,net.minecraft.world.entity.LivingEntity,net.minecraft.world.phys.AABB) -> a
    191:200:java.util.List getNearbyEntities(java.lang.Class,net.minecraft.world.entity.ai.targeting.TargetingConditions,net.minecraft.world.entity.LivingEntity,net.minecraft.world.phys.AABB) -> a
    205:211:net.minecraft.world.entity.player.Player getPlayerByName(java.lang.String) -> b
    216:222:net.minecraft.world.entity.player.Player getPlayerByUUID(java.util.UUID) -> b
    68:68:java.util.stream.Stream lambda$getEntityCollisions$4(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> a
    67:67:boolean lambda$getEntityCollisions$3(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> b
    66:66:boolean lambda$getEntityCollisions$2(java.util.Set,net.minecraft.world.entity.Entity) -> a
    45:45:boolean lambda$isUnobstructed$1(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.entity.Entity) -> a
    44:44:boolean lambda$isUnobstructed$0(net.minecraft.world.entity.Entity,net.minecraft.world.entity.Entity) -> c
net.minecraft.world.level.Explosion -> bjp:
    boolean fire -> a
    net.minecraft.world.level.Explosion$BlockInteraction blockInteraction -> b
    java.util.Random random -> c
    net.minecraft.world.level.Level level -> d
    double x -> e
    double y -> f
    double z -> g
    net.minecraft.world.entity.Entity source -> h
    float radius -> i
    net.minecraft.world.damagesource.DamageSource damageSource -> j
    java.util.List toBlow -> k
    java.util.Map hitPlayers -> l
    66:67:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,double,double,double,float) -> <init>
    70:71:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,double,double,double,float,java.util.List) -> <init>
    74:76:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,double,double,double,float,boolean,net.minecraft.world.level.Explosion$BlockInteraction,java.util.List) -> <init>
    52:88:void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity,double,double,double,float,boolean,net.minecraft.world.level.Explosion$BlockInteraction) -> <init>
    91:119:float getSeenPercent(net.minecraft.world.phys.Vec3,net.minecraft.world.entity.Entity) -> a
    123:230:void explode() -> a
    233:289:void finalizeExplosion(boolean) -> a
    292:305:void addBlockDrops(it.unimi.dsi.fastutil.objects.ObjectArrayList,net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPos) -> a
    308:308:net.minecraft.world.damagesource.DamageSource getDamageSource() -> b
    312:313:void setDamageSource(net.minecraft.world.damagesource.DamageSource) -> a
    316:316:java.util.Map getHitPlayers() -> c
    321:334:net.minecraft.world.entity.LivingEntity getSourceMob() -> d
    338:339:void clearToBlow() -> e
    342:342:java.util.List getToBlow() -> f
    270:270:void lambda$finalizeExplosion$0(it.unimi.dsi.fastutil.objects.ObjectArrayList,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.level.Explosion$BlockInteraction -> bjp$a:
    net.minecraft.world.level.Explosion$BlockInteraction NONE -> a
    net.minecraft.world.level.Explosion$BlockInteraction BREAK -> b
    net.minecraft.world.level.Explosion$BlockInteraction DESTROY -> c
    net.minecraft.world.level.Explosion$BlockInteraction[] $VALUES -> d
    42:42:net.minecraft.world.level.Explosion$BlockInteraction[] values() -> values
    42:42:net.minecraft.world.level.Explosion$BlockInteraction valueOf(java.lang.String) -> valueOf
    42:42:void <init>(java.lang.String,int) -> <init>
    42:45:void <clinit>() -> <clinit>
net.minecraft.world.level.FoliageColor -> bjq:
    int[] pixels -> a
    3:3:void <init>() -> <init>
    7:8:void init(int[]) -> a
    11:14:int get(double,double) -> a
    18:18:int getEvergreenColor() -> a
    22:22:int getBirchColor() -> b
    26:26:int getDefaultColor() -> c
    4:4:void <clinit>() -> <clinit>
net.minecraft.world.level.ForcedChunksSavedData -> bjr:
    it.unimi.dsi.fastutil.longs.LongSet chunks -> a
    11:15:void <init>() -> <init>
    19:20:void load(net.minecraft.nbt.CompoundTag) -> a
    24:25:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    29:29:it.unimi.dsi.fastutil.longs.LongSet getChunks() -> a
net.minecraft.world.level.GameRules -> bjs:
    org.apache.logging.log4j.Logger LOGGER -> F
    java.util.Map GAME_RULE_TYPES -> G
    net.minecraft.world.level.GameRules$Key RULE_DOFIRETICK -> a
    net.minecraft.world.level.GameRules$Key RULE_MOBGRIEFING -> b
    net.minecraft.world.level.GameRules$Key RULE_KEEPINVENTORY -> c
    net.minecraft.world.level.GameRules$Key RULE_DOMOBSPAWNING -> d
    net.minecraft.world.level.GameRules$Key RULE_DOMOBLOOT -> e
    net.minecraft.world.level.GameRules$Key RULE_DOBLOCKDROPS -> f
    net.minecraft.world.level.GameRules$Key RULE_DOENTITYDROPS -> g
    net.minecraft.world.level.GameRules$Key RULE_COMMANDBLOCKOUTPUT -> h
    net.minecraft.world.level.GameRules$Key RULE_NATURAL_REGENERATION -> i
    net.minecraft.world.level.GameRules$Key RULE_DAYLIGHT -> j
    net.minecraft.world.level.GameRules$Key RULE_LOGADMINCOMMANDS -> k
    net.minecraft.world.level.GameRules$Key RULE_SHOWDEATHMESSAGES -> l
    net.minecraft.world.level.GameRules$Key RULE_RANDOMTICKING -> m
    net.minecraft.world.level.GameRules$Key RULE_SENDCOMMANDFEEDBACK -> n
    net.minecraft.world.level.GameRules$Key RULE_REDUCEDDEBUGINFO -> o
    net.minecraft.world.level.GameRules$Key RULE_SPECTATORSGENERATECHUNKS -> p
    net.minecraft.world.level.GameRules$Key RULE_SPAWN_RADIUS -> q
    net.minecraft.world.level.GameRules$Key RULE_DISABLE_ELYTRA_MOVEMENT_CHECK -> r
    net.minecraft.world.level.GameRules$Key RULE_MAX_ENTITY_CRAMMING -> s
    net.minecraft.world.level.GameRules$Key RULE_WEATHER_CYCLE -> t
    net.minecraft.world.level.GameRules$Key RULE_LIMITED_CRAFTING -> u
    net.minecraft.world.level.GameRules$Key RULE_MAX_COMMAND_CHAIN_LENGTH -> v
    net.minecraft.world.level.GameRules$Key RULE_ANNOUNCE_ADVANCEMENTS -> w
    net.minecraft.world.level.GameRules$Key RULE_DISABLE_RAIDS -> x
    net.minecraft.world.level.GameRules$Key RULE_DOINSOMNIA -> y
    net.minecraft.world.level.GameRules$Key RULE_DO_IMMEDIATE_RESPAWN -> z
    net.minecraft.world.level.GameRules$Key RULE_DROWNING_DAMAGE -> A
    net.minecraft.world.level.GameRules$Key RULE_FALL_DAMAGE -> B
    net.minecraft.world.level.GameRules$Key RULE_FIRE_DAMAGE -> C
    net.minecraft.world.level.GameRules$Key RULE_DO_PATROL_SPAWNING -> D
    net.minecraft.world.level.GameRules$Key RULE_DO_TRADER_SPAWNING -> E
    java.util.Map rules -> H
    34:39:net.minecraft.world.level.GameRules$Key register(java.lang.String,net.minecraft.world.level.GameRules$Type) -> a
    85:87:void <init>() -> <init>
    91:91:net.minecraft.world.level.GameRules$Value getRule(net.minecraft.world.level.GameRules$Key) -> a
    95:97:net.minecraft.nbt.CompoundTag createTag() -> a
    101:106:void loadFromTag(net.minecraft.nbt.CompoundTag) -> a
    114:115:void visitGameRuleTypes(net.minecraft.world.level.GameRules$GameRuleTypeVisitor) -> a
    119:122:void cap(net.minecraft.world.level.GameRules$GameRuleTypeVisitor,net.minecraft.world.level.GameRules$Key,net.minecraft.world.level.GameRules$Type) -> a
    125:125:boolean getBoolean(net.minecraft.world.level.GameRules$Key) -> b
    129:129:int getInt(net.minecraft.world.level.GameRules$Key) -> c
    114:114:void lambda$visitGameRuleTypes$6(net.minecraft.world.level.GameRules$GameRuleTypeVisitor,net.minecraft.world.level.GameRules$Key,net.minecraft.world.level.GameRules$Type) -> b
    102:105:void lambda$loadFromTag$5(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.GameRules$Key,net.minecraft.world.level.GameRules$Value) -> a
    96:96:void lambda$createTag$4(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.GameRules$Key,net.minecraft.world.level.GameRules$Value) -> b
    86:86:net.minecraft.world.level.GameRules$Value lambda$new$3(java.util.Map$Entry) -> a
    73:76:void lambda$static$2(net.minecraft.server.MinecraftServer,net.minecraft.world.level.GameRules$BooleanValue) -> a
    57:61:void lambda$static$1(net.minecraft.server.MinecraftServer,net.minecraft.world.level.GameRules$BooleanValue) -> b
    31:31:java.lang.String lambda$static$0(net.minecraft.world.level.GameRules$Key) -> d
    28:28:org.apache.logging.log4j.Logger access$500() -> b
    29:81:void <clinit>() -> <clinit>
net.minecraft.world.level.GameRules$1 -> bjs$1:
net.minecraft.world.level.GameRules$BooleanValue -> bjs$a:
    boolean value -> a
    282:282:net.minecraft.world.level.GameRules$Type create(boolean,java.util.function.BiConsumer) -> b
    290:290:net.minecraft.world.level.GameRules$Type create(boolean) -> b
    296:298:void <init>(net.minecraft.world.level.GameRules$Type,boolean) -> <init>
    302:303:void updateFromArgument(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    306:306:boolean get() -> a
    310:312:void set(boolean,net.minecraft.server.MinecraftServer) -> a
    316:316:java.lang.String serialize() -> b
    321:322:void deserialize(java.lang.String) -> a
    326:326:int getCommandResult() -> c
    331:331:net.minecraft.world.level.GameRules$BooleanValue getSelf() -> d
    280:280:net.minecraft.world.level.GameRules$Value getSelf() -> e
    290:290:void lambda$create$1(net.minecraft.server.MinecraftServer,net.minecraft.world.level.GameRules$BooleanValue) -> a
    284:284:net.minecraft.world.level.GameRules$BooleanValue lambda$create$0(boolean,net.minecraft.world.level.GameRules$Type) -> a
    280:280:net.minecraft.world.level.GameRules$Type access$000(boolean) -> a
    280:280:net.minecraft.world.level.GameRules$Type access$200(boolean,java.util.function.BiConsumer) -> a
net.minecraft.world.level.GameRules$GameRuleTypeVisitor -> bjs$b:
    void visit(net.minecraft.world.level.GameRules$Key,net.minecraft.world.level.GameRules$Type) -> a
net.minecraft.world.level.GameRules$IntegerValue -> bjs$c:
    int value -> a
    216:216:net.minecraft.world.level.GameRules$Type create(int,java.util.function.BiConsumer) -> a
    224:224:net.minecraft.world.level.GameRules$Type create(int) -> b
    230:232:void <init>(net.minecraft.world.level.GameRules$Type,int) -> <init>
    236:237:void updateFromArgument(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    240:240:int get() -> a
    244:246:void set(int,net.minecraft.server.MinecraftServer) -> a
    250:250:java.lang.String serialize() -> b
    255:256:void deserialize(java.lang.String) -> a
    259:266:int safeParse(java.lang.String) -> b
    271:271:int getCommandResult() -> c
    276:276:net.minecraft.world.level.GameRules$IntegerValue getSelf() -> d
    214:214:net.minecraft.world.level.GameRules$Value getSelf() -> e
    224:224:void lambda$create$1(net.minecraft.server.MinecraftServer,net.minecraft.world.level.GameRules$IntegerValue) -> a
    218:218:net.minecraft.world.level.GameRules$IntegerValue lambda$create$0(int,net.minecraft.world.level.GameRules$Type) -> a
    214:214:net.minecraft.world.level.GameRules$Type access$100(int) -> a
net.minecraft.world.level.GameRules$Key -> bjs$d:
    java.lang.String id -> a
    135:137:void <init>(java.lang.String) -> <init>
    141:141:java.lang.String toString() -> toString
    146:147:boolean equals(java.lang.Object) -> equals
    152:152:int hashCode() -> hashCode
    156:156:java.lang.String getId() -> a
    132:132:java.lang.String access$600(net.minecraft.world.level.GameRules$Key) -> a
net.minecraft.world.level.GameRules$Type -> bjs$e:
    java.util.function.Supplier argument -> a
    java.util.function.Function constructor -> b
    java.util.function.BiConsumer callback -> c
    165:169:void <init>(java.util.function.Supplier,java.util.function.Function,java.util.function.BiConsumer) -> <init>
    172:172:com.mojang.brigadier.builder.RequiredArgumentBuilder createArgument(java.lang.String) -> a
    176:176:net.minecraft.world.level.GameRules$Value createRule() -> a
    160:160:java.util.function.BiConsumer access$300(net.minecraft.world.level.GameRules$Type) -> a
    160:160:void <init>(java.util.function.Supplier,java.util.function.Function,java.util.function.BiConsumer,net.minecraft.world.level.GameRules$1) -> <init>
net.minecraft.world.level.GameRules$Value -> bjs$f:
    net.minecraft.world.level.GameRules$Type type -> a
    183:185:void <init>(net.minecraft.world.level.GameRules$Type) -> <init>
    void updateFromArgument(com.mojang.brigadier.context.CommandContext,java.lang.String) -> a
    190:192:void setFromArgument(com.mojang.brigadier.context.CommandContext,java.lang.String) -> b
    195:198:void onChanged(net.minecraft.server.MinecraftServer) -> a
    void deserialize(java.lang.String) -> a
    java.lang.String serialize() -> b
    206:206:java.lang.String toString() -> toString
    int getCommandResult() -> c
    net.minecraft.world.level.GameRules$Value getSelf() -> e
net.minecraft.world.level.GameType -> bjt:
    net.minecraft.world.level.GameType NOT_SET -> a
    net.minecraft.world.level.GameType SURVIVAL -> b
    net.minecraft.world.level.GameType CREATIVE -> c
    net.minecraft.world.level.GameType ADVENTURE -> d
    net.minecraft.world.level.GameType SPECTATOR -> e
    int id -> f
    java.lang.String name -> g
    net.minecraft.world.level.GameType[] $VALUES -> h
    7:7:net.minecraft.world.level.GameType[] values() -> values
    7:7:net.minecraft.world.level.GameType valueOf(java.lang.String) -> valueOf
    18:21:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    24:24:int getId() -> a
    28:28:java.lang.String getName() -> b
    32:32:net.minecraft.network.chat.Component getDisplayName() -> c
    36:52:void updatePlayerAbilities(net.minecraft.world.entity.player.Abilities) -> a
    55:55:boolean isBlockPlacingRestricted() -> d
    59:59:boolean isCreative() -> e
    63:63:boolean isSurvival() -> f
    67:67:net.minecraft.world.level.GameType byId(int) -> a
    71:76:net.minecraft.world.level.GameType byId(int,net.minecraft.world.level.GameType) -> a
    80:80:net.minecraft.world.level.GameType byName(java.lang.String) -> a
    84:89:net.minecraft.world.level.GameType byName(java.lang.String,net.minecraft.world.level.GameType) -> a
    7:12:void <clinit>() -> <clinit>
net.minecraft.world.level.GrassColor -> bju:
    int[] pixels -> a
    3:3:void <init>() -> <init>
    7:8:void init(int[]) -> a
    11:18:int get(double,double) -> a
    4:4:void <clinit>() -> <clinit>
net.minecraft.world.level.ItemLike -> bjv:
    net.minecraft.world.item.Item asItem() -> i
net.minecraft.world.level.Level -> bjw:
    org.apache.logging.log4j.Logger LOGGER -> d
    net.minecraft.core.Direction[] DIRECTIONS -> a
    java.util.List blockEntityList -> e
    java.util.List tickableBlockEntities -> f
    java.util.List pendingBlockEntities -> g
    java.util.List blockEntitiesToUnload -> h
    java.lang.Thread thread -> b
    int skyDarken -> c
    int randValue -> i
    int addend -> j
    float oRainLevel -> k
    float rainLevel -> l
    float oThunderLevel -> m
    float thunderLevel -> n
    java.util.Random random -> o
    net.minecraft.world.level.dimension.Dimension dimension -> p
    net.minecraft.world.level.chunk.ChunkSource chunkSource -> q
    net.minecraft.world.level.storage.LevelData levelData -> r
    net.minecraft.util.profiling.ProfilerFiller profiler -> u
    boolean isClientSide -> s
    boolean updatingBlockEntities -> t
    net.minecraft.world.level.border.WorldBorder worldBorder -> v
    net.minecraft.world.level.biome.BiomeManager biomeManager -> w
    93:132:void <init>(net.minecraft.world.level.storage.LevelData,net.minecraft.world.level.dimension.DimensionType,java.util.function.BiFunction,net.minecraft.util.profiling.ProfilerFiller,boolean) -> <init>
    136:136:boolean isClientSide() -> p_
    142:142:net.minecraft.server.MinecraftServer getServer() -> p
    146:147:void validateSpawn() -> k_
    150:154:net.minecraft.world.level.block.state.BlockState getTopBlockState(net.minecraft.core.BlockPos) -> i
    158:158:boolean isInWorldBounds(net.minecraft.core.BlockPos) -> j
    162:162:boolean isOutsideBuildHeight(net.minecraft.core.BlockPos) -> k
    166:166:boolean isOutsideBuildHeight(int) -> b
    170:170:net.minecraft.world.level.chunk.LevelChunk getChunkAt(net.minecraft.core.BlockPos) -> l
    175:175:net.minecraft.world.level.chunk.LevelChunk getChunk(int,int) -> d
    180:184:net.minecraft.world.level.chunk.ChunkAccess getChunk(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> a
    189:243:boolean setBlock(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,int) -> a
    247:247:void onBlockStateChange(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState) -> a
    258:259:boolean removeBlock(net.minecraft.core.BlockPos,boolean) -> a
    272:283:boolean destroyBlock(net.minecraft.core.BlockPos,boolean,net.minecraft.world.entity.Entity) -> a
    287:287:boolean setBlockAndUpdate(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    void sendBlockUpdated(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int) -> a
    294:297:void blockUpdated(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block) -> a
    300:300:void setBlocksDirty(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState) -> b
    303:309:void updateNeighborsAt(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block) -> b
    312:330:void updateNeighborsAtExceptFromFacing(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.Direction) -> a
    333:356:void neighborChanged(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos) -> a
    361:368:int getHeight(net.minecraft.world.level.levelgen.Heightmap$Types,int,int) -> a
    373:373:net.minecraft.world.level.lighting.LevelLightEngine getLightEngine() -> e
    378:382:net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos) -> d_
    387:391:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos) -> b
    395:395:boolean isDay() -> J
    399:399:boolean isNight() -> K
    405:406:void playSound(net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,float,float) -> a
    void playSound(net.minecraft.world.entity.player.Player,double,double,double,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,float,float) -> a
    void playSound(net.minecraft.world.entity.player.Player,net.minecraft.world.entity.Entity,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,float,float) -> a
    415:415:void playLocalSound(double,double,double,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,float,float,boolean) -> a
    419:419:void addParticle(net.minecraft.core.particles.ParticleOptions,double,double,double,double,double,double) -> a
    422:422:void addParticle(net.minecraft.core.particles.ParticleOptions,boolean,double,double,double,double,double,double) -> a
    427:427:void addAlwaysVisibleParticle(net.minecraft.core.particles.ParticleOptions,double,double,double,double,double,double) -> b
    430:430:void addAlwaysVisibleParticle(net.minecraft.core.particles.ParticleOptions,boolean,double,double,double,double,double,double) -> b
    433:434:float getSunAngle(float) -> a
    438:452:boolean addBlockEntity(net.minecraft.world.level.block.entity.BlockEntity) -> a
    456:463:void addAllPendingBlockEntities(java.util.Collection) -> a
    466:530:void tickBlockEntities() -> L
    534:543:void guardEntityTick(java.util.function.Consumer,net.minecraft.world.entity.Entity) -> a
    546:565:boolean containsAnyBlocks(net.minecraft.world.phys.AABB) -> b
    569:590:boolean containsFireBlock(net.minecraft.world.phys.AABB) -> c
    595:616:net.minecraft.world.level.block.state.BlockState containsBlock(net.minecraft.world.phys.AABB,net.minecraft.world.level.block.Block) -> a
    620:628:boolean containsMaterial(net.minecraft.world.phys.AABB,net.minecraft.world.level.material.Material) -> a
    632:632:net.minecraft.world.level.Explosion explode(net.minecraft.world.entity.Entity,double,double,double,float,net.minecraft.world.level.Explosion$BlockInteraction) -> a
    636:636:net.minecraft.world.level.Explosion explode(net.minecraft.world.entity.Entity,double,double,double,float,boolean,net.minecraft.world.level.Explosion$BlockInteraction) -> a
    640:646:net.minecraft.world.level.Explosion explode(net.minecraft.world.entity.Entity,net.minecraft.world.damagesource.DamageSource,double,double,double,float,boolean,net.minecraft.world.level.Explosion$BlockInteraction) -> a
    650:657:boolean extinguishFire(net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    661:661:java.lang.String gatherChunkSourceStats() -> M
    667:689:net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos) -> c
    694:700:net.minecraft.world.level.block.entity.BlockEntity getPendingBlockEntityAt(net.minecraft.core.BlockPos) -> e
    704:728:void setBlockEntity(net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity) -> a
    731:744:void removeBlockEntity(net.minecraft.core.BlockPos) -> m
    747:750:boolean isLoaded(net.minecraft.core.BlockPos) -> n
    759:768:boolean loadedAndEntityCanStandOn(net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    772:778:void updateSkyBrightness() -> N
    781:782:void setSpawnSettings(boolean,boolean) -> a
    785:791:void prepareWeather() -> O
    795:796:void close() -> close
    801:801:net.minecraft.world.level.BlockGetter getChunkForCollisions(int,int) -> c
    806:820:java.util.List getEntities(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.function.Predicate) -> a
    824:840:java.util.List getEntities(net.minecraft.world.entity.EntityType,net.minecraft.world.phys.AABB,java.util.function.Predicate) -> a
    845:862:java.util.List getEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AABB,java.util.function.Predicate) -> a
    867:884:java.util.List getLoadedEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AABB,java.util.function.Predicate) -> b
    net.minecraft.world.entity.Entity getEntity(int) -> a
    891:894:void blockEntityChanged(net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity) -> b
    898:898:int getSeaLevel() -> q_
    903:903:net.minecraft.world.level.Level getLevel() -> q
    907:907:net.minecraft.world.level.LevelType getGeneratorType() -> P
    911:936:int getDirectSignalTo(net.minecraft.core.BlockPos) -> o
    940:940:boolean hasSignal(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    944:949:int getSignal(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    953:971:boolean hasNeighborSignal(net.minecraft.core.BlockPos) -> p
    975:988:int getBestNeighborSignal(net.minecraft.core.BlockPos) -> q
    992:992:void disconnect() -> Q
    void checkSession() -> v
    997:998:void setGameTime(long) -> a
    1002:1002:long getSeed() -> r_
    1009:1009:long getGameTime() -> R
    1017:1017:long getDayTime() -> S
    1021:1022:void setDayTime(long) -> b
    1025:1029:void tickTime() -> a
    1033:1037:net.minecraft.core.BlockPos getSharedSpawnPos() -> s_
    1041:1042:void setSpawnPos(net.minecraft.core.BlockPos) -> a_
    1045:1045:boolean mayInteract(net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos) -> a
    1049:1049:void broadcastEntityEvent(net.minecraft.world.entity.Entity,byte) -> a
    1053:1053:net.minecraft.world.level.chunk.ChunkSource getChunkSource() -> E
    1057:1058:void blockEvent(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,int,int) -> a
    1062:1062:net.minecraft.world.level.storage.LevelData getLevelData() -> i
    1066:1066:net.minecraft.world.level.GameRules getGameRules() -> T
    1070:1070:float getThunderLevel(float) -> b
    1074:1076:void setThunderLevel(float) -> c
    1079:1079:float getRainLevel(float) -> d
    1083:1085:void setRainLevel(float) -> e
    1088:1091:boolean isThundering() -> U
    1095:1095:boolean isRaining() -> V
    1099:1109:boolean isRainingAt(net.minecraft.core.BlockPos) -> r
    1113:1114:boolean isHumidAt(net.minecraft.core.BlockPos) -> s
    net.minecraft.world.level.saveddata.maps.MapItemSavedData getMapData(java.lang.String) -> a
    void setMapData(net.minecraft.world.level.saveddata.maps.MapItemSavedData) -> a
    int getFreeMapId() -> y
    1125:1125:void globalLevelEvent(int,net.minecraft.core.BlockPos,int) -> b
    1128:1128:int getHeight() -> W
    1132:1144:net.minecraft.CrashReportCategory fillReportDetails(net.minecraft.CrashReport) -> a
    void destroyBlockProgress(int,net.minecraft.core.BlockPos,int) -> a
    1150:1150:void createFireworks(double,double,double,double,double,double,net.minecraft.nbt.CompoundTag) -> a
    net.minecraft.world.scores.Scoreboard getScoreboard() -> D
    1155:1172:void updateNeighbourForOutputSignal(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block) -> c
    1176:1183:net.minecraft.world.DifficultyInstance getCurrentDifficultyAt(net.minecraft.core.BlockPos) -> d
    1188:1188:int getSkyDarken() -> c
    1192:1192:void setSkyFlashTime(int) -> c
    1196:1196:net.minecraft.world.level.border.WorldBorder getWorldBorder() -> f
    1200:1200:void sendPacketToServer(net.minecraft.network.protocol.Packet) -> a
    1205:1205:net.minecraft.world.level.dimension.Dimension getDimension() -> o
    1210:1210:java.util.Random getRandom() -> t_
    1215:1215:boolean isStateAtPosition(net.minecraft.core.BlockPos,java.util.function.Predicate) -> a
    1220:1220:boolean isFluidAtPosition(net.minecraft.core.BlockPos,java.util.function.Predicate) -> b
    net.minecraft.world.item.crafting.RecipeManager getRecipeManager() -> s
    net.minecraft.tags.TagManager getTagManager() -> t
    1228:1231:net.minecraft.core.BlockPos getBlockRandomPos(int,int,int,int) -> a
    1235:1235:boolean noSave() -> u
    1239:1239:net.minecraft.util.profiling.ProfilerFiller getProfiler() -> X
    1244:1244:net.minecraft.world.level.biome.BiomeManager getBiomeManager() -> d
    69:69:net.minecraft.world.level.chunk.ChunkAccess getChunk(int,int) -> a
    1136:1136:java.lang.String lambda$fillReportDetails$5() -> b
    1134:1134:java.lang.String lambda$fillReportDetails$4() -> h
    628:628:boolean lambda$containsMaterial$3(net.minecraft.world.level.block.state.predicate.BlockMaterialPredicate,net.minecraft.core.BlockPos) -> a
    481:481:java.lang.String lambda$tickBlockEntities$2(net.minecraft.world.level.block.entity.BlockEntity) -> b
    439:439:java.lang.Object lambda$addBlockEntity$1(net.minecraft.world.level.block.entity.BlockEntity) -> c
    346:348:java.lang.String lambda$neighborChanged$0(net.minecraft.world.level.block.Block) -> a
    70:86:void <clinit>() -> <clinit>
net.minecraft.world.level.LevelAccessor -> bjx:
    long getSeed() -> r_
    30:30:float getMoonBrightness() -> Y
    34:34:float getTimeOfDay(float) -> f
    38:38:int getMoonPhase() -> Z
    net.minecraft.world.level.TickList getBlockTicks() -> G
    net.minecraft.world.level.TickList getLiquidTicks() -> F
    net.minecraft.world.level.Level getLevel() -> q
    net.minecraft.world.level.storage.LevelData getLevelData() -> i
    net.minecraft.world.DifficultyInstance getCurrentDifficultyAt(net.minecraft.core.BlockPos) -> d
    net.minecraft.server.MinecraftServer getServer() -> p
    55:55:net.minecraft.world.Difficulty getDifficulty() -> aa
    net.minecraft.world.level.chunk.ChunkSource getChunkSource() -> E
    62:62:boolean hasChunk(int,int) -> b
    java.util.Random getRandom() -> t_
    void blockUpdated(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block) -> a
    net.minecraft.core.BlockPos getSharedSpawnPos() -> s_
    void playSound(net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundSource,float,float) -> a
    void addParticle(net.minecraft.core.particles.ParticleOptions,double,double,double,double,double,double) -> a
    void levelEvent(net.minecraft.world.entity.player.Player,int,net.minecraft.core.BlockPos,int) -> a
    78:79:void levelEvent(int,net.minecraft.core.BlockPos,int) -> c
    83:83:java.util.stream.Stream getEntityCollisions(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.Set) -> b
    88:88:boolean isUnobstructed(net.minecraft.world.entity.Entity,net.minecraft.world.phys.shapes.VoxelShape) -> a
    93:93:net.minecraft.core.BlockPos getHeightmapPos(net.minecraft.world.level.levelgen.Heightmap$Types,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.LevelConflictException -> bjy:
    5:6:void <init>(java.lang.String) -> <init>
net.minecraft.world.level.LevelReader -> bjz:
    net.minecraft.world.level.chunk.ChunkAccess getChunk(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> a
    boolean hasChunk(int,int) -> b
    int getHeight(net.minecraft.world.level.levelgen.Heightmap$Types,int,int) -> a
    int getSkyDarken() -> c
    net.minecraft.world.level.biome.BiomeManager getBiomeManager() -> d
    35:35:net.minecraft.world.level.biome.Biome getBiome(net.minecraft.core.BlockPos) -> t
    40:40:int getBlockTint(net.minecraft.core.BlockPos,net.minecraft.world.level.ColorResolver) -> a
    45:49:net.minecraft.world.level.biome.Biome getNoiseBiome(int,int,int) -> b
    net.minecraft.world.level.biome.Biome getUncachedNoiseBiome(int,int,int) -> a
    boolean isClientSide() -> p_
    int getSeaLevel() -> q_
    net.minecraft.world.level.dimension.Dimension getDimension() -> o
    61:61:net.minecraft.core.BlockPos getHeightmapPos(net.minecraft.world.level.levelgen.Heightmap$Types,net.minecraft.core.BlockPos) -> a
    65:65:boolean isEmptyBlock(net.minecraft.core.BlockPos) -> u
    69:84:boolean canSeeSkyFromBelowWater(net.minecraft.core.BlockPos) -> v
    92:92:float getBrightness(net.minecraft.core.BlockPos) -> w
    96:96:int getDirectSignal(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> c
    100:100:net.minecraft.world.level.chunk.ChunkAccess getChunk(net.minecraft.core.BlockPos) -> x
    104:104:net.minecraft.world.level.chunk.ChunkAccess getChunk(int,int) -> a
    108:108:net.minecraft.world.level.chunk.ChunkAccess getChunk(int,int,net.minecraft.world.level.chunk.ChunkStatus) -> a
    114:114:net.minecraft.world.level.BlockGetter getChunkForCollisions(int,int) -> c
    118:118:boolean isWaterAt(net.minecraft.core.BlockPos) -> y
    122:141:boolean containsAnyLiquid(net.minecraft.world.phys.AABB) -> d
    145:145:int getMaxLocalRawBrightness(net.minecraft.core.BlockPos) -> z
    149:153:int getMaxLocalRawBrightness(net.minecraft.core.BlockPos,int) -> c
    161:161:boolean hasChunkAt(net.minecraft.core.BlockPos) -> A
    169:169:boolean hasChunksAt(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    177:194:boolean hasChunksAt(int,int,int,int,int,int) -> a
net.minecraft.world.level.LevelSettings -> bka:
    long seed -> a
    net.minecraft.world.level.GameType gameType -> b
    boolean generateMapFeatures -> c
    boolean hardcore -> d
    net.minecraft.world.level.LevelType levelType -> e
    boolean allowCommands -> f
    boolean startingBonusItems -> g
    com.google.gson.JsonElement levelTypeOptions -> h
    15:23:void <init>(long,net.minecraft.world.level.GameType,boolean,boolean,net.minecraft.world.level.LevelType) -> <init>
    26:27:void <init>(net.minecraft.world.level.storage.LevelData) -> <init>
    30:31:net.minecraft.world.level.LevelSettings enableStartingBonusItems() -> a
    35:36:net.minecraft.world.level.LevelSettings enableSinglePlayerCommands() -> b
    40:41:net.minecraft.world.level.LevelSettings setLevelTypeOptions(com.google.gson.JsonElement) -> a
    45:45:boolean hasStartingBonusItems() -> c
    49:49:long getSeed() -> d
    53:53:net.minecraft.world.level.GameType getGameType() -> e
    57:57:boolean isHardcore() -> f
    61:61:boolean isGenerateMapFeatures() -> g
    65:65:net.minecraft.world.level.LevelType getLevelType() -> h
    69:69:boolean getAllowCommands() -> i
    73:73:com.google.gson.JsonElement getLevelTypeOptions() -> j
net.minecraft.world.level.LevelSimulatedRW -> bkb:
net.minecraft.world.level.LevelSimulatedReader -> bkc:
    boolean isStateAtPosition(net.minecraft.core.BlockPos,java.util.function.Predicate) -> a
    boolean isFluidAtPosition(net.minecraft.core.BlockPos,java.util.function.Predicate) -> b
    net.minecraft.core.BlockPos getHeightmapPos(net.minecraft.world.level.levelgen.Heightmap$Types,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.LevelType -> bkd:
    net.minecraft.world.level.LevelType[] LEVEL_TYPES -> a
    net.minecraft.world.level.LevelType NORMAL -> b
    net.minecraft.world.level.LevelType FLAT -> c
    net.minecraft.world.level.LevelType LARGE_BIOMES -> d
    net.minecraft.world.level.LevelType AMPLIFIED -> e
    net.minecraft.world.level.LevelType CUSTOMIZED -> f
    net.minecraft.world.level.LevelType BUFFET -> g
    net.minecraft.world.level.LevelType DEBUG_ALL_BLOCK_STATES -> h
    net.minecraft.world.level.LevelType NORMAL_1_1 -> i
    int id -> j
    java.lang.String generatorName -> k
    java.lang.String generatorSerialization -> l
    int version -> m
    boolean selectable -> n
    boolean replacement -> o
    boolean hasHelpText -> p
    boolean hasCustomOptions -> q
    28:29:void <init>(int,java.lang.String) -> <init>
    32:33:void <init>(int,java.lang.String,int) -> <init>
    35:42:void <init>(int,java.lang.String,java.lang.String,int) -> <init>
    45:45:java.lang.String getName() -> a
    49:49:java.lang.String getSerialization() -> b
    53:53:java.lang.String getDescriptionId() -> c
    57:57:java.lang.String getHelpTextId() -> d
    61:61:int getVersion() -> e
    65:68:net.minecraft.world.level.LevelType getReplacementForVersion(int) -> a
    72:72:boolean hasCustomOptions() -> f
    76:77:net.minecraft.world.level.LevelType setCustomOptions(boolean) -> a
    81:82:net.minecraft.world.level.LevelType setSelectableByUser(boolean) -> b
    86:86:boolean isSelectable() -> g
    90:91:net.minecraft.world.level.LevelType setHasReplacement() -> k
    95:95:boolean hasReplacement() -> h
    100:105:net.minecraft.world.level.LevelType getLevelType(java.lang.String) -> a
    109:109:int getId() -> i
    113:113:boolean hasHelpText() -> j
    117:118:net.minecraft.world.level.LevelType setHasHelpText() -> l
    6:16:void <clinit>() -> <clinit>
net.minecraft.world.level.LevelWriter -> bke:
    boolean setBlock(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,int) -> a
    boolean removeBlock(net.minecraft.core.BlockPos,boolean) -> a
    15:15:boolean destroyBlock(net.minecraft.core.BlockPos,boolean) -> b
    boolean destroyBlock(net.minecraft.core.BlockPos,boolean,net.minecraft.world.entity.Entity) -> a
    24:24:boolean addFreshEntity(net.minecraft.world.entity.Entity) -> c
net.minecraft.world.level.LightLayer -> bkf:
    net.minecraft.world.level.LightLayer SKY -> a
    net.minecraft.world.level.LightLayer BLOCK -> b
    int surrounding -> c
    net.minecraft.world.level.LightLayer[] $VALUES -> d
    3:3:net.minecraft.world.level.LightLayer[] values() -> values
    3:3:net.minecraft.world.level.LightLayer valueOf(java.lang.String) -> valueOf
    9:11:void <init>(java.lang.String,int,int) -> <init>
    3:5:void <clinit>() -> <clinit>
net.minecraft.world.level.NaturalSpawner -> bkg:
    org.apache.logging.log4j.Logger LOGGER -> a
    42:43:void <init>() -> <init>
    46:173:void spawnCategoryForChunk(net.minecraft.world.entity.MobCategory,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.LevelChunk,net.minecraft.core.BlockPos) -> a
    177:182:net.minecraft.world.level.biome.Biome$SpawnerData getRandomSpawnMobAt(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.entity.MobCategory,java.util.Random,net.minecraft.core.BlockPos) -> a
    186:190:boolean canSpawnMobAt(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.entity.MobCategory,net.minecraft.world.level.biome.Biome$SpawnerData,net.minecraft.core.BlockPos) -> a
    194:201:net.minecraft.core.BlockPos getRandomPosWithin(net.minecraft.world.level.Level,net.minecraft.world.level.chunk.LevelChunk) -> a
    206:222:boolean isValidEmptySpawnBlock(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState) -> a
    226:249:boolean isSpawnPositionOk(net.minecraft.world.entity.SpawnPlacements$Type,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
    254:321:void spawnMobsForChunkGeneration(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.biome.Biome,int,int,java.util.Random) -> a
    324:331:net.minecraft.core.BlockPos getTopNonCollidingPos(net.minecraft.world.level.LevelReader,net.minecraft.world.entity.EntityType,int,int) -> a
    38:38:void <clinit>() -> <clinit>
net.minecraft.world.level.NaturalSpawner$1 -> bkg$1:
    int[] $SwitchMap$net$minecraft$world$entity$SpawnPlacements$Type -> a
    237:237:void <clinit>() -> <clinit>
net.minecraft.world.level.PathNavigationRegion -> bkh:
    int centerX -> a
    int centerZ -> b
    net.minecraft.world.level.chunk.ChunkAccess[][] chunks -> c
    boolean allEmpty -> d
    net.minecraft.world.level.Level level -> e
    25:54:void <init>(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> <init>
    57:57:net.minecraft.world.level.chunk.ChunkAccess getChunk(net.minecraft.core.BlockPos) -> d
    61:68:net.minecraft.world.level.chunk.ChunkAccess getChunk(int,int) -> a
    73:73:net.minecraft.world.level.border.WorldBorder getWorldBorder() -> f
    78:78:net.minecraft.world.level.BlockGetter getChunkForCollisions(int,int) -> c
    84:85:net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos) -> c
    90:95:net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos) -> d_
    100:105:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos) -> b
net.minecraft.world.level.PortalForcer -> bki:
    net.minecraft.server.level.ServerLevel level -> a
    java.util.Random random -> b
    34:37:void <init>(net.minecraft.server.level.ServerLevel) -> <init>
    40:55:boolean findAndMoveToPortal(net.minecraft.world.entity.Entity,float) -> a
    61:72:net.minecraft.world.level.block.state.pattern.BlockPattern$PortalInfo findPortal(net.minecraft.core.BlockPos,net.minecraft.world.phys.Vec3,net.minecraft.core.Direction,double,double,boolean) -> a
    76:242:boolean createPortal(net.minecraft.world.entity.Entity) -> a
    68:71:net.minecraft.world.level.block.state.pattern.BlockPattern$PortalInfo lambda$findPortal$3(net.minecraft.core.Direction,double,net.minecraft.world.phys.Vec3,double,net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    65:65:int lambda$findPortal$2(net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    65:65:double lambda$findPortal$1(net.minecraft.core.BlockPos,net.minecraft.world.entity.ai.village.poi.PoiRecord) -> a
    63:63:boolean lambda$findPortal$0(net.minecraft.world.entity.ai.village.poi.PoiType) -> a
net.minecraft.world.level.ServerTickList -> bkj:
    java.util.function.Predicate ignore -> a
    java.util.function.Function toId -> b
    java.util.function.Function fromId -> c
    java.util.Set tickNextTickSet -> d
    java.util.TreeSet tickNextTickList -> e
    net.minecraft.server.level.ServerLevel level -> f
    java.util.Queue currentlyTicking -> g
    java.util.List alreadyTicked -> h
    java.util.function.Consumer ticker -> i
    38:52:void <init>(net.minecraft.server.level.ServerLevel,java.util.function.Predicate,java.util.function.Function,java.util.function.Function,java.util.function.Consumer) -> <init>
    55:102:void tick() -> b
    107:107:boolean willTickThisTick(net.minecraft.core.BlockPos,java.lang.Object) -> b
    112:113:void addAll(java.util.stream.Stream) -> a
    116:121:java.util.List fetchTicksInChunk(net.minecraft.world.level.ChunkPos,boolean,boolean) -> a
    125:133:java.util.List fetchTicksInArea(net.minecraft.world.level.levelgen.structure.BoundingBox,boolean,boolean) -> a
    138:152:java.util.List fetchTicksInArea(java.util.List,java.util.Collection,net.minecraft.world.level.levelgen.structure.BoundingBox,boolean) -> a
    157:165:void copy(net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.BlockPos) -> a
    169:170:net.minecraft.nbt.ListTag save(net.minecraft.world.level.ChunkPos) -> a
    174:187:net.minecraft.nbt.ListTag saveTickList(java.util.function.Function,java.lang.Iterable,long) -> a
    191:200:void load(net.minecraft.nbt.ListTag) -> a
    208:208:boolean hasScheduledTick(net.minecraft.core.BlockPos,java.lang.Object) -> a
    213:216:void scheduleTick(net.minecraft.core.BlockPos,java.lang.Object,int,net.minecraft.world.level.TickPriority) -> a
    219:223:void addTickData(net.minecraft.world.level.TickNextTickData) -> a
    227:227:int size() -> a
net.minecraft.world.level.SpawnData -> bkk:
    net.minecraft.nbt.CompoundTag tag -> b
    15:19:void <init>() -> <init>
    22:23:void <init>(net.minecraft.nbt.CompoundTag) -> <init>
    26:29:void <init>(int,net.minecraft.nbt.CompoundTag) -> <init>
    32:42:net.minecraft.nbt.CompoundTag save() -> a
    46:46:net.minecraft.nbt.CompoundTag getTag() -> b
net.minecraft.world.level.TickList -> bkl:
    boolean hasScheduledTick(net.minecraft.core.BlockPos,java.lang.Object) -> a
    11:12:void scheduleTick(net.minecraft.core.BlockPos,java.lang.Object,int) -> a
    void scheduleTick(net.minecraft.core.BlockPos,java.lang.Object,int,net.minecraft.world.level.TickPriority) -> a
    boolean willTickThisTick(net.minecraft.core.BlockPos,java.lang.Object) -> b
    void addAll(java.util.stream.Stream) -> a
    int size() -> a
net.minecraft.world.level.TickNextTickData -> bkm:
    long counter -> d
    java.lang.Object type -> e
    net.minecraft.core.BlockPos pos -> a
    long delay -> b
    net.minecraft.world.level.TickPriority priority -> c
    long c -> f
    16:17:void <init>(net.minecraft.core.BlockPos,java.lang.Object) -> <init>
    13:24:void <init>(net.minecraft.core.BlockPos,java.lang.Object,long,net.minecraft.world.level.TickPriority) -> <init>
    40:44:boolean equals(java.lang.Object) -> equals
    49:49:int hashCode() -> hashCode
    53:53:java.util.Comparator createTimeComparator() -> a
    58:58:java.lang.String toString() -> toString
    62:62:java.lang.Object getType() -> b
    53:53:long lambda$createTimeComparator$2(net.minecraft.world.level.TickNextTickData) -> a
    53:53:net.minecraft.world.level.TickPriority lambda$createTimeComparator$1(net.minecraft.world.level.TickNextTickData) -> b
    53:53:long lambda$createTimeComparator$0(net.minecraft.world.level.TickNextTickData) -> c
net.minecraft.world.level.TickPriority -> bkn:
    net.minecraft.world.level.TickPriority EXTREMELY_HIGH -> a
    net.minecraft.world.level.TickPriority VERY_HIGH -> b
    net.minecraft.world.level.TickPriority HIGH -> c
    net.minecraft.world.level.TickPriority NORMAL -> d
    net.minecraft.world.level.TickPriority LOW -> e
    net.minecraft.world.level.TickPriority VERY_LOW -> f
    net.minecraft.world.level.TickPriority EXTREMELY_LOW -> g
    int value -> h
    net.minecraft.world.level.TickPriority[] $VALUES -> i
    3:3:net.minecraft.world.level.TickPriority[] values() -> values
    3:3:net.minecraft.world.level.TickPriority valueOf(java.lang.String) -> valueOf
    15:17:void <init>(java.lang.String,int,int) -> <init>
    20:28:net.minecraft.world.level.TickPriority byValue(int) -> a
    32:32:int getValue() -> a
    3:10:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.BadlandsBiome -> bko:
    13:54:void <init>() -> <init>
    58:58:int getFoliageColor() -> a
    63:63:int getGrassColor(double,double) -> a
net.minecraft.world.level.biome.BadlandsPlateauBiome -> bkp:
    13:54:void <init>() -> <init>
    58:58:int getFoliageColor() -> a
    63:63:int getGrassColor(double,double) -> a
net.minecraft.world.level.biome.BambooJungleBiome -> bkq:
    13:65:void <init>() -> <init>
net.minecraft.world.level.biome.BambooJungleHillsBiome -> bkr:
    13:65:void <init>() -> <init>
net.minecraft.world.level.biome.BeachBiome -> bks:
    14:57:void <init>() -> <init>
net.minecraft.world.level.biome.Biome -> bkt:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.Set EXPLORABLE_BIOMES -> b
    net.minecraft.core.IdMapper MUTATED_BIOMES -> c
    net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise TEMPERATURE_NOISE -> d
    net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise BIOME_INFO_NOISE -> e
    java.lang.String descriptionId -> f
    float depth -> g
    float scale -> h
    float temperature -> i
    float downfall -> j
    int waterColor -> k
    int waterFogColor -> l
    int skyColor -> u
    java.lang.String parent -> m
    net.minecraft.world.level.levelgen.surfacebuilders.ConfiguredSurfaceBuilder surfaceBuilder -> n
    net.minecraft.world.level.biome.Biome$BiomeCategory biomeCategory -> o
    net.minecraft.world.level.biome.Biome$Precipitation precipitation -> p
    java.util.Map carvers -> q
    java.util.Map features -> r
    java.util.List flowerFeatures -> s
    java.util.Map validFeatureStarts -> t
    java.util.Map spawners -> v
    java.lang.ThreadLocal temperatureCache -> w
    80:80:net.minecraft.world.level.biome.Biome getMutatedVariant(net.minecraft.world.level.biome.Biome) -> a
    84:84:net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver makeCarver(net.minecraft.world.level.levelgen.carver.WorldCarver,net.minecraft.world.level.levelgen.carver.CarverConfiguration) -> a
    184:233:void <init>(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> <init>
    236:236:boolean isMutated() -> b
    240:243:int calculateSkyColor() -> u
    247:247:int getSkyColor() -> c
    251:252:void addSpawn(net.minecraft.world.entity.MobCategory,net.minecraft.world.level.biome.Biome$SpawnerData) -> a
    255:255:java.util.List getMobs(net.minecraft.world.entity.MobCategory) -> a
    297:297:net.minecraft.world.level.biome.Biome$Precipitation getPrecipitation() -> d
    301:301:boolean isHumid() -> e
    305:305:float getCreatureProbability() -> f
    309:313:float getTemperatureNoCache(net.minecraft.core.BlockPos) -> a
    317:328:float getTemperature(net.minecraft.core.BlockPos) -> b
    332:332:boolean shouldFreeze(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    336:354:boolean shouldFreeze(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,boolean) -> a
    358:371:boolean shouldSnow(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> b
    375:380:void addFeature(net.minecraft.world.level.levelgen.GenerationStep$Decoration,net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> a
    383:384:void addCarver(net.minecraft.world.level.levelgen.GenerationStep$Carving,net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver) -> a
    387:387:java.util.List getCarvers(net.minecraft.world.level.levelgen.GenerationStep$Carving) -> a
    391:392:void addStructureStart(net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> a
    395:395:boolean isValidStart(net.minecraft.world.level.levelgen.feature.StructureFeature) -> a
    401:401:net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration getStructureConfiguration(net.minecraft.world.level.levelgen.feature.StructureFeature) -> b
    405:405:java.util.List getFlowerFeatures() -> g
    409:409:java.util.List getFeaturesForStep(net.minecraft.world.level.levelgen.GenerationStep$Decoration) -> a
    413:427:void generate(net.minecraft.world.level.levelgen.GenerationStep$Decoration,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.LevelAccessor,long,net.minecraft.world.level.levelgen.WorldgenRandom,net.minecraft.core.BlockPos) -> a
    430:433:int getGrassColor(double,double) -> a
    437:440:int getFoliageColor() -> a
    445:447:void buildSurfaceAt(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long) -> a
    450:460:net.minecraft.world.level.biome.Biome$BiomeTempCategory getTemperatureCategory() -> h
    464:465:net.minecraft.world.level.biome.Biome getBiome(int,net.minecraft.world.level.biome.Biome) -> a
    469:469:float getDepth() -> i
    473:473:float getDownfall() -> j
    477:477:net.minecraft.network.chat.Component getName() -> k
    481:484:java.lang.String getDescriptionId() -> l
    488:488:float getScale() -> m
    492:492:float getTemperature() -> n
    496:496:int getWaterColor() -> o
    500:500:int getWaterFogColor() -> p
    504:504:net.minecraft.world.level.biome.Biome$BiomeCategory getBiomeCategory() -> q
    508:508:net.minecraft.world.level.levelgen.surfacebuilders.ConfiguredSurfaceBuilder getSurfaceBuilder() -> r
    512:512:net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration getSurfaceBuilderConfig() -> s
    517:517:java.lang.String getParent() -> t
    524:569:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    549:551:com.mojang.datafixers.util.Pair lambda$serialize$11(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> a
    551:551:java.lang.Object lambda$null$10(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.biome.Biome$SpawnerData) -> a
    541:543:com.mojang.datafixers.util.Pair lambda$serialize$9(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> b
    533:535:com.mojang.datafixers.util.Pair lambda$serialize$8(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> c
    535:535:java.lang.Object lambda$null$7(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> a
    525:527:com.mojang.datafixers.util.Pair lambda$serialize$6(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> d
    527:527:java.lang.Object lambda$null$5(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver) -> a
    422:422:java.lang.String lambda$generate$4(net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> b
    387:387:java.util.List lambda$getCarvers$3(net.minecraft.world.level.levelgen.GenerationStep$Carving) -> b
    383:383:java.util.List lambda$addCarver$2(net.minecraft.world.level.levelgen.GenerationStep$Carving) -> c
    190:190:it.unimi.dsi.fastutil.longs.Long2FloatLinkedOpenHashMap lambda$new$1() -> v
    191:197:it.unimi.dsi.fastutil.longs.Long2FloatLinkedOpenHashMap lambda$null$0() -> w
    65:75:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.Biome$1 -> bkt$1:
    net.minecraft.world.level.biome.Biome this$0 -> a
    191:191:void <init>(net.minecraft.world.level.biome.Biome,int,float) -> <init>
    194:194:void rehash(int) -> rehash
net.minecraft.world.level.biome.Biome$BiomeBuilder -> bkt$a:
    net.minecraft.world.level.levelgen.surfacebuilders.ConfiguredSurfaceBuilder surfaceBuilder -> a
    net.minecraft.world.level.biome.Biome$Precipitation precipitation -> b
    net.minecraft.world.level.biome.Biome$BiomeCategory biomeCategory -> c
    java.lang.Float depth -> d
    java.lang.Float scale -> e
    java.lang.Float temperature -> f
    java.lang.Float downfall -> g
    java.lang.Integer waterColor -> h
    java.lang.Integer waterFogColor -> i
    java.lang.String parent -> j
    573:573:void <init>() -> <init>
    596:597:net.minecraft.world.level.biome.Biome$BiomeBuilder surfaceBuilder(net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
    601:602:net.minecraft.world.level.biome.Biome$BiomeBuilder surfaceBuilder(net.minecraft.world.level.levelgen.surfacebuilders.ConfiguredSurfaceBuilder) -> a
    606:607:net.minecraft.world.level.biome.Biome$BiomeBuilder precipitation(net.minecraft.world.level.biome.Biome$Precipitation) -> a
    611:612:net.minecraft.world.level.biome.Biome$BiomeBuilder biomeCategory(net.minecraft.world.level.biome.Biome$BiomeCategory) -> a
    616:617:net.minecraft.world.level.biome.Biome$BiomeBuilder depth(float) -> a
    621:622:net.minecraft.world.level.biome.Biome$BiomeBuilder scale(float) -> b
    626:627:net.minecraft.world.level.biome.Biome$BiomeBuilder temperature(float) -> c
    631:632:net.minecraft.world.level.biome.Biome$BiomeBuilder downfall(float) -> d
    636:637:net.minecraft.world.level.biome.Biome$BiomeBuilder waterColor(int) -> a
    641:642:net.minecraft.world.level.biome.Biome$BiomeBuilder waterFogColor(int) -> b
    646:647:net.minecraft.world.level.biome.Biome$BiomeBuilder parent(java.lang.String) -> a
    652:652:java.lang.String toString() -> toString
    573:573:net.minecraft.world.level.levelgen.surfacebuilders.ConfiguredSurfaceBuilder access$000(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> a
    573:573:net.minecraft.world.level.biome.Biome$Precipitation access$100(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> b
    573:573:net.minecraft.world.level.biome.Biome$BiomeCategory access$200(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> c
    573:573:java.lang.Float access$300(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> d
    573:573:java.lang.Float access$400(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> e
    573:573:java.lang.Float access$500(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> f
    573:573:java.lang.Float access$600(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> g
    573:573:java.lang.Integer access$700(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> h
    573:573:java.lang.Integer access$800(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> i
    573:573:java.lang.String access$900(net.minecraft.world.level.biome.Biome$BiomeBuilder) -> j
net.minecraft.world.level.biome.Biome$BiomeCategory -> bkt$b:
    net.minecraft.world.level.biome.Biome$BiomeCategory NONE -> a
    net.minecraft.world.level.biome.Biome$BiomeCategory TAIGA -> b
    net.minecraft.world.level.biome.Biome$BiomeCategory EXTREME_HILLS -> c
    net.minecraft.world.level.biome.Biome$BiomeCategory JUNGLE -> d
    net.minecraft.world.level.biome.Biome$BiomeCategory MESA -> e
    net.minecraft.world.level.biome.Biome$BiomeCategory PLAINS -> f
    net.minecraft.world.level.biome.Biome$BiomeCategory SAVANNA -> g
    net.minecraft.world.level.biome.Biome$BiomeCategory ICY -> h
    net.minecraft.world.level.biome.Biome$BiomeCategory THEEND -> i
    net.minecraft.world.level.biome.Biome$BiomeCategory BEACH -> j
    net.minecraft.world.level.biome.Biome$BiomeCategory FOREST -> k
    net.minecraft.world.level.biome.Biome$BiomeCategory OCEAN -> l
    net.minecraft.world.level.biome.Biome$BiomeCategory DESERT -> m
    net.minecraft.world.level.biome.Biome$BiomeCategory RIVER -> n
    net.minecraft.world.level.biome.Biome$BiomeCategory SWAMP -> o
    net.minecraft.world.level.biome.Biome$BiomeCategory MUSHROOM -> p
    net.minecraft.world.level.biome.Biome$BiomeCategory NETHER -> q
    java.util.Map BY_NAME -> r
    java.lang.String name -> s
    net.minecraft.world.level.biome.Biome$BiomeCategory[] $VALUES -> t
    110:110:net.minecraft.world.level.biome.Biome$BiomeCategory[] values() -> values
    110:110:net.minecraft.world.level.biome.Biome$BiomeCategory valueOf(java.lang.String) -> valueOf
    133:135:void <init>(java.lang.String,int,java.lang.String) -> <init>
    138:138:java.lang.String getName() -> a
    142:142:net.minecraft.world.level.biome.Biome$BiomeCategory byName(java.lang.String) -> a
    130:130:net.minecraft.world.level.biome.Biome$BiomeCategory lambda$static$0(net.minecraft.world.level.biome.Biome$BiomeCategory) -> a
    110:130:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.Biome$BiomeTempCategory -> bkt$c:
    net.minecraft.world.level.biome.Biome$BiomeTempCategory OCEAN -> a
    net.minecraft.world.level.biome.Biome$BiomeTempCategory COLD -> b
    net.minecraft.world.level.biome.Biome$BiomeTempCategory MEDIUM -> c
    net.minecraft.world.level.biome.Biome$BiomeTempCategory WARM -> d
    java.util.Map BY_NAME -> e
    java.lang.String name -> f
    net.minecraft.world.level.biome.Biome$BiomeTempCategory[] $VALUES -> g
    87:87:net.minecraft.world.level.biome.Biome$BiomeTempCategory[] values() -> values
    87:87:net.minecraft.world.level.biome.Biome$BiomeTempCategory valueOf(java.lang.String) -> valueOf
    97:99:void <init>(java.lang.String,int,java.lang.String) -> <init>
    102:102:java.lang.String getName() -> a
    106:106:net.minecraft.world.level.biome.Biome$BiomeTempCategory byName(java.lang.String) -> a
    94:94:net.minecraft.world.level.biome.Biome$BiomeTempCategory lambda$static$0(net.minecraft.world.level.biome.Biome$BiomeTempCategory) -> a
    87:94:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.Biome$Precipitation -> bkt$d:
    net.minecraft.world.level.biome.Biome$Precipitation NONE -> a
    net.minecraft.world.level.biome.Biome$Precipitation RAIN -> b
    net.minecraft.world.level.biome.Biome$Precipitation SNOW -> c
    java.util.Map BY_NAME -> d
    java.lang.String name -> e
    net.minecraft.world.level.biome.Biome$Precipitation[] $VALUES -> f
    146:146:net.minecraft.world.level.biome.Biome$Precipitation[] values() -> values
    146:146:net.minecraft.world.level.biome.Biome$Precipitation valueOf(java.lang.String) -> valueOf
    155:157:void <init>(java.lang.String,int,java.lang.String) -> <init>
    160:160:java.lang.String getName() -> a
    164:164:net.minecraft.world.level.biome.Biome$Precipitation byName(java.lang.String) -> a
    152:152:net.minecraft.world.level.biome.Biome$Precipitation lambda$static$0(net.minecraft.world.level.biome.Biome$Precipitation) -> a
    146:152:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.Biome$SpawnerData -> bkt$e:
    net.minecraft.world.entity.EntityType type -> b
    int minCount -> c
    int maxCount -> d
    264:268:void <init>(net.minecraft.world.entity.EntityType,int,int,int) -> <init>
    272:272:java.lang.String toString() -> toString
    276:280:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    286:292:net.minecraft.world.level.biome.Biome$SpawnerData deserialize(com.mojang.datafixers.Dynamic) -> a
    290:290:boolean lambda$deserialize$0(net.minecraft.world.entity.EntityType) -> a
net.minecraft.world.level.biome.BiomeDefaultFeatures -> bku:
    net.minecraft.world.level.block.state.BlockState GRASS -> ah
    net.minecraft.world.level.block.state.BlockState FERN -> ai
    net.minecraft.world.level.block.state.BlockState PODZOL -> aj
    net.minecraft.world.level.block.state.BlockState OAK_LOG -> ak
    net.minecraft.world.level.block.state.BlockState OAK_LEAVES -> al
    net.minecraft.world.level.block.state.BlockState JUNGLE_LOG -> am
    net.minecraft.world.level.block.state.BlockState JUNGLE_LEAVES -> an
    net.minecraft.world.level.block.state.BlockState SPRUCE_LOG -> ao
    net.minecraft.world.level.block.state.BlockState SPRUCE_LEAVES -> ap
    net.minecraft.world.level.block.state.BlockState ACACIA_LOG -> aq
    net.minecraft.world.level.block.state.BlockState ACACIA_LEAVES -> ar
    net.minecraft.world.level.block.state.BlockState BIRCH_LOG -> as
    net.minecraft.world.level.block.state.BlockState BIRCH_LEAVES -> at
    net.minecraft.world.level.block.state.BlockState DARK_OAK_LOG -> au
    net.minecraft.world.level.block.state.BlockState DARK_OAK_LEAVES -> av
    net.minecraft.world.level.block.state.BlockState WATER -> aw
    net.minecraft.world.level.block.state.BlockState LAVA -> ax
    net.minecraft.world.level.block.state.BlockState DIRT -> ay
    net.minecraft.world.level.block.state.BlockState GRAVEL -> az
    net.minecraft.world.level.block.state.BlockState GRANITE -> aA
    net.minecraft.world.level.block.state.BlockState DIORITE -> aB
    net.minecraft.world.level.block.state.BlockState ANDESITE -> aC
    net.minecraft.world.level.block.state.BlockState COAL_ORE -> aD
    net.minecraft.world.level.block.state.BlockState IRON_ORE -> aE
    net.minecraft.world.level.block.state.BlockState GOLD_ORE -> aF
    net.minecraft.world.level.block.state.BlockState REDSTONE_ORE -> aG
    net.minecraft.world.level.block.state.BlockState DIAMOND_ORE -> aH
    net.minecraft.world.level.block.state.BlockState LAPIS_ORE -> aI
    net.minecraft.world.level.block.state.BlockState STONE -> aJ
    net.minecraft.world.level.block.state.BlockState EMERALD_ORE -> aK
    net.minecraft.world.level.block.state.BlockState INFESTED_STONE -> aL
    net.minecraft.world.level.block.state.BlockState SAND -> aM
    net.minecraft.world.level.block.state.BlockState CLAY -> aN
    net.minecraft.world.level.block.state.BlockState GRASS_BLOCK -> aO
    net.minecraft.world.level.block.state.BlockState MOSSY_COBBLESTONE -> aP
    net.minecraft.world.level.block.state.BlockState LARGE_FERN -> aQ
    net.minecraft.world.level.block.state.BlockState TALL_GRASS -> aR
    net.minecraft.world.level.block.state.BlockState LILAC -> aS
    net.minecraft.world.level.block.state.BlockState ROSE_BUSH -> aT
    net.minecraft.world.level.block.state.BlockState PEONY -> aU
    net.minecraft.world.level.block.state.BlockState BROWN_MUSHROOM -> aV
    net.minecraft.world.level.block.state.BlockState RED_MUSHROOM -> aW
    net.minecraft.world.level.block.state.BlockState SEAGRASS -> aX
    net.minecraft.world.level.block.state.BlockState PACKED_ICE -> aY
    net.minecraft.world.level.block.state.BlockState BLUE_ICE -> aZ
    net.minecraft.world.level.block.state.BlockState LILY_OF_THE_VALLEY -> ba
    net.minecraft.world.level.block.state.BlockState BLUE_ORCHID -> bb
    net.minecraft.world.level.block.state.BlockState POPPY -> bc
    net.minecraft.world.level.block.state.BlockState DANDELION -> bd
    net.minecraft.world.level.block.state.BlockState DEAD_BUSH -> be
    net.minecraft.world.level.block.state.BlockState MELON -> bf
    net.minecraft.world.level.block.state.BlockState PUMPKIN -> bg
    net.minecraft.world.level.block.state.BlockState SWEET_BERRY_BUSH -> bh
    net.minecraft.world.level.block.state.BlockState FIRE -> bi
    net.minecraft.world.level.block.state.BlockState NETHERRACK -> bj
    net.minecraft.world.level.block.state.BlockState LILY_PAD -> bk
    net.minecraft.world.level.block.state.BlockState SNOW -> bl
    net.minecraft.world.level.block.state.BlockState JACK_O_LANTERN -> bm
    net.minecraft.world.level.block.state.BlockState SUNFLOWER -> bn
    net.minecraft.world.level.block.state.BlockState CACTUS -> bo
    net.minecraft.world.level.block.state.BlockState SUGAR_CANE -> bp
    net.minecraft.world.level.block.state.BlockState HUGE_RED_MUSHROOM -> bq
    net.minecraft.world.level.block.state.BlockState HUGE_BROWN_MUSHROOM -> br
    net.minecraft.world.level.block.state.BlockState HUGE_MUSHROOM_STEM -> bs
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration NORMAL_TREE_CONFIG -> a
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration JUNGLE_TREE_CONFIG -> b
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration JUNGLE_TREE_NOVINE_CONFIG -> c
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration PINE_TREE_CONFIG -> d
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration SPRUCE_TREE_CONFIG -> e
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration ACACIA_TREE_CONFIG -> f
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration BIRCH_TREE_CONFIG -> g
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration BIRCH_TREE_WITH_BEES_0002_CONFIG -> h
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration SUPER_BIRCH_TREE_WITH_BEES_0002_CONFIG -> i
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration SWAMP_TREE_CONFIG -> j
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration FANCY_TREE_CONFIG -> k
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration NORMAL_TREE_WITH_BEES_005_CONFIG -> l
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration FANCY_TREE_WITH_BEES_0002_CONFIG -> m
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration FANCY_TREE_WITH_BEES_005_CONFIG -> n
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration NORMAL_TREE_WITH_BEES_0002_CONFIG -> o
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration NORMAL_TREE_WITH_BEES_002_CONFIG -> p
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration FANCY_TREE_WITH_BEES_002_CONFIG -> q
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration BIRCH_TREE_WITH_BEES_002_CONFIG -> r
    net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration BIRCH_TREE_WITH_BEES_005_CONFIG -> s
    net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration JUNGLE_BUSH_CONFIG -> t
    net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration DARK_OAK_TREE_CONFIG -> u
    net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration MEGA_SPRUCE_TREE_CONFIG -> v
    net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration MEGA_PINE_TREE_CONFIG -> w
    net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration MEGA_JUNGLE_TREE_CONFIG -> x
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration DEFAULT_GRASS_CONFIG -> y
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration TAIGA_GRASS_CONFIG -> z
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration JUNGLE_GRASS_CONFIG -> A
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration GENERAL_FOREST_FLOWER_CONFIG -> B
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration SwAMP_FLOWER_CONFIG -> C
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration DEFAULT_FLOWER_CONFIG -> D
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration PLAIN_FLOWER_CONFIG -> E
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration FOREST_FLOWER_CONFIG -> F
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration DEAD_BUSH_CONFIG -> G
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration MELON_CONFIG -> H
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration PUMPKIN_CONFIG -> I
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration SWEET_BERRY_BUSH_CONFIG -> J
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration HELL_FIRE_CONFIG -> K
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration WATERLILLY_CONFIG -> L
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration RED_MUSHROOM_CONFIG -> M
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration BROWN_MUSHROOM_CONFIG -> N
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration DOUBLE_LILAC_CONFIG -> O
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration DOUBLE_ROSE_BUSH_CONFIG -> P
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration DOUBLE_PEONY_CONFIG -> Q
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration SUNFLOWER_CONFIG -> R
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration TALL_GRASS_CONFIG -> S
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration LARGE_FERN_CONFIG -> T
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration CACTUS_CONFIG -> U
    net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration SUGAR_CANE_CONFIG -> V
    net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration HAY_PILE_CONFIG -> W
    net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration SNOW_PILE_CONFIG -> X
    net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration MELON_PILE_CONFIG -> Y
    net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration PUMPKIN_PILE_CONFIG -> Z
    net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration ICE_PILE_CONFIG -> aa
    net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration WATER_SPRING_CONFIG -> ab
    net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration LAVA_SPRING_CONFIG -> ac
    net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration OPEN_NETHER_SPRING_CONFIG -> ad
    net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration CLOSED_NETHER_SPRING_CONFIG -> ae
    net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration HUGE_RED_MUSHROOM_CONFIG -> af
    net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration HUGE_BROWN_MUSHROOM_CONFIG -> ag
    71:71:void <init>() -> <init>
    553:555:void addDefaultCarvers(net.minecraft.world.level.biome.Biome) -> a
    558:562:void addOceanCarvers(net.minecraft.world.level.biome.Biome) -> b
    565:578:void addStructureFeaturePlacement(net.minecraft.world.level.biome.Biome) -> c
    581:583:void addDefaultLakes(net.minecraft.world.level.biome.Biome) -> d
    586:587:void addDesertLakes(net.minecraft.world.level.biome.Biome) -> e
    590:591:void addDefaultMonsterRoom(net.minecraft.world.level.biome.Biome) -> f
    594:599:void addDefaultUndergroundVariety(net.minecraft.world.level.biome.Biome) -> g
    602:608:void addDefaultOres(net.minecraft.world.level.biome.Biome) -> h
    611:612:void addExtraGold(net.minecraft.world.level.biome.Biome) -> i
    615:616:void addExtraEmeralds(net.minecraft.world.level.biome.Biome) -> j
    619:620:void addInfestedStone(net.minecraft.world.level.biome.Biome) -> k
    623:626:void addDefaultSoftDisks(net.minecraft.world.level.biome.Biome) -> l
    629:630:void addSwampClayDisk(net.minecraft.world.level.biome.Biome) -> m
    633:634:void addMossyStoneBlock(net.minecraft.world.level.biome.Biome) -> n
    637:638:void addFerns(net.minecraft.world.level.biome.Biome) -> o
    641:642:void addBerryBushes(net.minecraft.world.level.biome.Biome) -> p
    645:646:void addSparseBerryBushes(net.minecraft.world.level.biome.Biome) -> q
    649:650:void addLightBambooVegetation(net.minecraft.world.level.biome.Biome) -> r
    653:662:void addBambooVegetation(net.minecraft.world.level.biome.Biome) -> s
    665:669:void addTaigaTrees(net.minecraft.world.level.biome.Biome) -> t
    672:676:void addWaterTrees(net.minecraft.world.level.biome.Biome) -> u
    679:680:void addBirchTrees(net.minecraft.world.level.biome.Biome) -> v
    683:690:void addOtherBirchTrees(net.minecraft.world.level.biome.Biome) -> w
    693:697:void addTallBirchTrees(net.minecraft.world.level.biome.Biome) -> x
    700:704:void addSavannaTrees(net.minecraft.world.level.biome.Biome) -> y
    707:711:void addShatteredSavannaTrees(net.minecraft.world.level.biome.Biome) -> z
    714:721:void addMountainTrees(net.minecraft.world.level.biome.Biome) -> A
    724:731:void addMountainEdgeTrees(net.minecraft.world.level.biome.Biome) -> B
    734:742:void addJungleTrees(net.minecraft.world.level.biome.Biome) -> C
    745:752:void addJungleEdgeTrees(net.minecraft.world.level.biome.Biome) -> D
    755:756:void addBadlandsTrees(net.minecraft.world.level.biome.Biome) -> E
    759:760:void addSnowyTrees(net.minecraft.world.level.biome.Biome) -> F
    763:770:void addGiantSpruceTrees(net.minecraft.world.level.biome.Biome) -> G
    773:781:void addGiantTrees(net.minecraft.world.level.biome.Biome) -> H
    784:785:void addJungleGrass(net.minecraft.world.level.biome.Biome) -> I
    788:789:void addSavannaGrass(net.minecraft.world.level.biome.Biome) -> J
    792:793:void addShatteredSavannaGrass(net.minecraft.world.level.biome.Biome) -> K
    796:797:void addSavannaExtraGrass(net.minecraft.world.level.biome.Biome) -> L
    800:802:void addBadlandGrass(net.minecraft.world.level.biome.Biome) -> M
    805:814:void addForestFlowers(net.minecraft.world.level.biome.Biome) -> N
    817:818:void addForestGrass(net.minecraft.world.level.biome.Biome) -> O
    821:828:void addSwampVegetation(net.minecraft.world.level.biome.Biome) -> P
    831:837:void addMushroomFieldVegetation(net.minecraft.world.level.biome.Biome) -> Q
    840:846:void addPlainVegetation(net.minecraft.world.level.biome.Biome) -> R
    849:850:void addDesertVegetation(net.minecraft.world.level.biome.Biome) -> S
    853:857:void addGiantTaigaVegetation(net.minecraft.world.level.biome.Biome) -> T
    860:861:void addDefaultFlowers(net.minecraft.world.level.biome.Biome) -> U
    864:865:void addWarmFlowers(net.minecraft.world.level.biome.Biome) -> V
    868:869:void addDefaultGrass(net.minecraft.world.level.biome.Biome) -> W
    872:875:void addTaigaGrass(net.minecraft.world.level.biome.Biome) -> X
    878:879:void addPlainGrass(net.minecraft.world.level.biome.Biome) -> Y
    882:884:void addDefaultMushrooms(net.minecraft.world.level.biome.Biome) -> Z
    887:889:void addDefaultExtraVegetation(net.minecraft.world.level.biome.Biome) -> aa
    892:895:void addBadlandExtraVegetation(net.minecraft.world.level.biome.Biome) -> ab
    898:900:void addJungleExtraVegetation(net.minecraft.world.level.biome.Biome) -> ac
    903:906:void addDesertExtraVegetation(net.minecraft.world.level.biome.Biome) -> ad
    909:911:void addSwampExtraVegetation(net.minecraft.world.level.biome.Biome) -> ae
    914:916:void addDesertExtraDecoration(net.minecraft.world.level.biome.Biome) -> af
    919:920:void addSwampExtraDecoration(net.minecraft.world.level.biome.Biome) -> ag
    923:924:void addColdOceanExtraVegetation(net.minecraft.world.level.biome.Biome) -> ah
    927:928:void addDefaultSeagrass(net.minecraft.world.level.biome.Biome) -> ai
    931:932:void addWarmSeagrass(net.minecraft.world.level.biome.Biome) -> aj
    935:936:void addDeepWarmSeagrass(net.minecraft.world.level.biome.Biome) -> ak
    939:940:void addLukeWarmKelp(net.minecraft.world.level.biome.Biome) -> al
    943:945:void addDefaultSprings(net.minecraft.world.level.biome.Biome) -> am
    948:950:void addIcebergs(net.minecraft.world.level.biome.Biome) -> an
    953:954:void addBlueIce(net.minecraft.world.level.biome.Biome) -> ao
    957:958:void addSurfaceFreezing(net.minecraft.world.level.biome.Biome) -> ap
    961:962:void addEndCity(net.minecraft.world.level.biome.Biome) -> aq
    74:550:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.BiomeManager -> bkv:
    net.minecraft.world.level.biome.BiomeManager$NoiseBiomeSource noiseBiomeSource -> a
    long biomeZoomSeed -> b
    net.minecraft.world.level.biome.BiomeZoomer zoomer -> c
    10:14:void <init>(net.minecraft.world.level.biome.BiomeManager$NoiseBiomeSource,long,net.minecraft.world.level.biome.BiomeZoomer) -> <init>
    17:17:net.minecraft.world.level.biome.BiomeManager withDifferentSource(net.minecraft.world.level.biome.BiomeSource) -> a
    21:21:net.minecraft.world.level.biome.Biome getBiome(net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.biome.BiomeManager$NoiseBiomeSource -> bkv$a:
    net.minecraft.world.level.biome.Biome getNoiseBiome(int,int,int) -> b
net.minecraft.world.level.biome.BiomeSource -> bkw:
    java.util.List PLAYER_SPAWN_BIOMES -> d
    java.util.Map supportedStructures -> a
    java.util.Set surfaceBlocks -> b
    java.util.Set possibleBiomes -> c
    19:25:void <init>(java.util.Set) -> <init>
    28:28:java.util.List getPlayerSpawnBiomes() -> a
    32:56:java.util.Set getBiomesWithin(int,int,int,int) -> a
    67:93:net.minecraft.core.BlockPos findBiomeHorizontal(int,int,int,int,java.util.List,java.util.Random) -> a
    98:98:float getHeightValue(int,int) -> a
    102:102:boolean canGenerateStructure(net.minecraft.world.level.levelgen.feature.StructureFeature) -> a
    106:111:java.util.Set getSurfaceBlocks() -> b
    102:102:java.lang.Boolean lambda$canGenerateStructure$1(net.minecraft.world.level.levelgen.feature.StructureFeature) -> b
    102:102:boolean lambda$null$0(net.minecraft.world.level.levelgen.feature.StructureFeature,net.minecraft.world.level.biome.Biome) -> a
    17:17:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.BiomeSourceSettings -> bkx:
net.minecraft.world.level.biome.BiomeSourceType -> bky:
    net.minecraft.world.level.biome.BiomeSourceType CHECKERBOARD -> a
    net.minecraft.world.level.biome.BiomeSourceType FIXED -> b
    net.minecraft.world.level.biome.BiomeSourceType VANILLA_LAYERED -> c
    net.minecraft.world.level.biome.BiomeSourceType THE_END -> d
    java.util.function.Function factory -> e
    java.util.function.Function settingsFactory -> f
    15:15:net.minecraft.world.level.biome.BiomeSourceType register(java.lang.String,java.util.function.Function,java.util.function.Function) -> a
    21:24:void <init>(java.util.function.Function,java.util.function.Function) -> <init>
    27:27:net.minecraft.world.level.biome.BiomeSource create(net.minecraft.world.level.biome.BiomeSourceSettings) -> a
    31:31:net.minecraft.world.level.biome.BiomeSourceSettings createSettings(net.minecraft.world.level.storage.LevelData) -> a
    9:12:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.BiomeZoomer -> bkz:
    net.minecraft.world.level.biome.Biome getBiome(long,int,int,int,net.minecraft.world.level.biome.BiomeManager$NoiseBiomeSource) -> a
net.minecraft.world.level.biome.Biomes -> bla:
    net.minecraft.world.level.biome.Biome OCEAN -> a
    net.minecraft.world.level.biome.Biome DEFAULT -> b
    net.minecraft.world.level.biome.Biome PLAINS -> c
    net.minecraft.world.level.biome.Biome DESERT -> d
    net.minecraft.world.level.biome.Biome MOUNTAINS -> e
    net.minecraft.world.level.biome.Biome FOREST -> f
    net.minecraft.world.level.biome.Biome TAIGA -> g
    net.minecraft.world.level.biome.Biome SWAMP -> h
    net.minecraft.world.level.biome.Biome RIVER -> i
    net.minecraft.world.level.biome.Biome NETHER -> j
    net.minecraft.world.level.biome.Biome THE_END -> k
    net.minecraft.world.level.biome.Biome FROZEN_OCEAN -> l
    net.minecraft.world.level.biome.Biome FROZEN_RIVER -> m
    net.minecraft.world.level.biome.Biome SNOWY_TUNDRA -> n
    net.minecraft.world.level.biome.Biome SNOWY_MOUNTAINS -> o
    net.minecraft.world.level.biome.Biome MUSHROOM_FIELDS -> p
    net.minecraft.world.level.biome.Biome MUSHROOM_FIELD_SHORE -> q
    net.minecraft.world.level.biome.Biome BEACH -> r
    net.minecraft.world.level.biome.Biome DESERT_HILLS -> s
    net.minecraft.world.level.biome.Biome WOODED_HILLS -> t
    net.minecraft.world.level.biome.Biome TAIGA_HILLS -> u
    net.minecraft.world.level.biome.Biome MOUNTAIN_EDGE -> v
    net.minecraft.world.level.biome.Biome JUNGLE -> w
    net.minecraft.world.level.biome.Biome JUNGLE_HILLS -> x
    net.minecraft.world.level.biome.Biome JUNGLE_EDGE -> y
    net.minecraft.world.level.biome.Biome DEEP_OCEAN -> z
    net.minecraft.world.level.biome.Biome STONE_SHORE -> A
    net.minecraft.world.level.biome.Biome SNOWY_BEACH -> B
    net.minecraft.world.level.biome.Biome BIRCH_FOREST -> C
    net.minecraft.world.level.biome.Biome BIRCH_FOREST_HILLS -> D
    net.minecraft.world.level.biome.Biome DARK_FOREST -> E
    net.minecraft.world.level.biome.Biome SNOWY_TAIGA -> F
    net.minecraft.world.level.biome.Biome SNOWY_TAIGA_HILLS -> G
    net.minecraft.world.level.biome.Biome GIANT_TREE_TAIGA -> H
    net.minecraft.world.level.biome.Biome GIANT_TREE_TAIGA_HILLS -> I
    net.minecraft.world.level.biome.Biome WOODED_MOUNTAINS -> J
    net.minecraft.world.level.biome.Biome SAVANNA -> K
    net.minecraft.world.level.biome.Biome SAVANNA_PLATEAU -> L
    net.minecraft.world.level.biome.Biome BADLANDS -> M
    net.minecraft.world.level.biome.Biome WOODED_BADLANDS_PLATEAU -> N
    net.minecraft.world.level.biome.Biome BADLANDS_PLATEAU -> O
    net.minecraft.world.level.biome.Biome SMALL_END_ISLANDS -> P
    net.minecraft.world.level.biome.Biome END_MIDLANDS -> Q
    net.minecraft.world.level.biome.Biome END_HIGHLANDS -> R
    net.minecraft.world.level.biome.Biome END_BARRENS -> S
    net.minecraft.world.level.biome.Biome WARM_OCEAN -> T
    net.minecraft.world.level.biome.Biome LUKEWARM_OCEAN -> U
    net.minecraft.world.level.biome.Biome COLD_OCEAN -> V
    net.minecraft.world.level.biome.Biome DEEP_WARM_OCEAN -> W
    net.minecraft.world.level.biome.Biome DEEP_LUKEWARM_OCEAN -> X
    net.minecraft.world.level.biome.Biome DEEP_COLD_OCEAN -> Y
    net.minecraft.world.level.biome.Biome DEEP_FROZEN_OCEAN -> Z
    net.minecraft.world.level.biome.Biome THE_VOID -> aa
    net.minecraft.world.level.biome.Biome SUNFLOWER_PLAINS -> ab
    net.minecraft.world.level.biome.Biome DESERT_LAKES -> ac
    net.minecraft.world.level.biome.Biome GRAVELLY_MOUNTAINS -> ad
    net.minecraft.world.level.biome.Biome FLOWER_FOREST -> ae
    net.minecraft.world.level.biome.Biome TAIGA_MOUNTAINS -> af
    net.minecraft.world.level.biome.Biome SWAMP_HILLS -> ag
    net.minecraft.world.level.biome.Biome ICE_SPIKES -> ah
    net.minecraft.world.level.biome.Biome MODIFIED_JUNGLE -> ai
    net.minecraft.world.level.biome.Biome MODIFIED_JUNGLE_EDGE -> aj
    net.minecraft.world.level.biome.Biome TALL_BIRCH_FOREST -> ak
    net.minecraft.world.level.biome.Biome TALL_BIRCH_HILLS -> al
    net.minecraft.world.level.biome.Biome DARK_FOREST_HILLS -> am
    net.minecraft.world.level.biome.Biome SNOWY_TAIGA_MOUNTAINS -> an
    net.minecraft.world.level.biome.Biome GIANT_SPRUCE_TAIGA -> ao
    net.minecraft.world.level.biome.Biome GIANT_SPRUCE_TAIGA_HILLS -> ap
    net.minecraft.world.level.biome.Biome MODIFIED_GRAVELLY_MOUNTAINS -> aq
    net.minecraft.world.level.biome.Biome SHATTERED_SAVANNA -> ar
    net.minecraft.world.level.biome.Biome SHATTERED_SAVANNA_PLATEAU -> as
    net.minecraft.world.level.biome.Biome ERODED_BADLANDS -> at
    net.minecraft.world.level.biome.Biome MODIFIED_WOODED_BADLANDS_PLATEAU -> au
    net.minecraft.world.level.biome.Biome MODIFIED_BADLANDS_PLATEAU -> av
    net.minecraft.world.level.biome.Biome BAMBOO_JUNGLE -> aw
    net.minecraft.world.level.biome.Biome BAMBOO_JUNGLE_HILLS -> ax
    8:8:void <init>() -> <init>
    131:136:net.minecraft.world.level.biome.Biome register(int,java.lang.String,net.minecraft.world.level.biome.Biome) -> a
    9:128:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.BirchForestBiome -> blb:
    13:60:void <init>() -> <init>
net.minecraft.world.level.biome.BirchForestHillsBiome -> blc:
    13:60:void <init>() -> <init>
net.minecraft.world.level.biome.CheckerboardBiomeSourceSettings -> bld:
    net.minecraft.world.level.biome.Biome[] allowedBiomes -> a
    int size -> b
    6:10:void <init>(net.minecraft.world.level.storage.LevelData) -> <init>
    13:14:net.minecraft.world.level.biome.CheckerboardBiomeSourceSettings setAllowedBiomes(net.minecraft.world.level.biome.Biome[]) -> a
    18:19:net.minecraft.world.level.biome.CheckerboardBiomeSourceSettings setSize(int) -> a
    23:23:net.minecraft.world.level.biome.Biome[] getAllowedBiomes() -> a
    27:27:int getSize() -> b
net.minecraft.world.level.biome.CheckerboardColumnBiomeSource -> ble:
    net.minecraft.world.level.biome.Biome[] allowedBiomes -> d
    int bitShift -> e
    10:13:void <init>(net.minecraft.world.level.biome.CheckerboardBiomeSourceSettings) -> <init>
    17:17:net.minecraft.world.level.biome.Biome getNoiseBiome(int,int,int) -> b
net.minecraft.world.level.biome.ColdOceanBiome -> blf:
    19:69:void <init>() -> <init>
net.minecraft.world.level.biome.DarkForestBiome -> blg:
    18:75:void <init>() -> <init>
    79:80:int getGrassColor(double,double) -> a
net.minecraft.world.level.biome.DarkForestHillsBiome -> blh:
    18:75:void <init>() -> <init>
    79:80:int getGrassColor(double,double) -> a
net.minecraft.world.level.biome.DeepColdOceanBiome -> bli:
    20:71:void <init>() -> <init>
net.minecraft.world.level.biome.DeepFrozenOceanBiome -> blj:
    net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE -> u
    21:71:void <init>() -> <init>
    75:92:float getTemperatureNoCache(net.minecraft.core.BlockPos) -> a
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.DeepLukeWarmOceanBiome -> blk:
    16:69:void <init>() -> <init>
net.minecraft.world.level.biome.DeepOceanBiome -> bll:
    20:71:void <init>() -> <init>
net.minecraft.world.level.biome.DeepWarmOceanBiome -> blm:
    16:66:void <init>() -> <init>
net.minecraft.world.level.biome.DesertBiome -> bln:
    14:62:void <init>() -> <init>
net.minecraft.world.level.biome.DesertHillsBiome -> blo:
    13:59:void <init>() -> <init>
net.minecraft.world.level.biome.DesertLakesBiome -> blp:
    13:58:void <init>() -> <init>
net.minecraft.world.level.biome.EndBarrensBiome -> blq:
    9:26:void <init>() -> <init>
    30:30:int getSkyColor() -> c
net.minecraft.world.level.biome.EndHighlandsBiome -> blr:
    16:37:void <init>() -> <init>
    41:41:int getSkyColor() -> c
net.minecraft.world.level.biome.EndMidlandsBiome -> bls:
    11:30:void <init>() -> <init>
    34:34:int getSkyColor() -> c
net.minecraft.world.level.biome.ErodedBadlandsBiome -> blt:
    13:54:void <init>() -> <init>
    58:58:int getFoliageColor() -> a
    63:63:int getGrassColor(double,double) -> a
net.minecraft.world.level.biome.FixedBiomeSource -> blu:
    net.minecraft.world.level.biome.Biome biome -> d
    16:18:void <init>(net.minecraft.world.level.biome.FixedBiomeSourceSettings) -> <init>
    22:22:net.minecraft.world.level.biome.Biome getNoiseBiome(int,int,int) -> b
    28:32:net.minecraft.core.BlockPos findBiomeHorizontal(int,int,int,int,java.util.List,java.util.Random) -> a
    37:37:java.util.Set getBiomesWithin(int,int,int,int) -> a
net.minecraft.world.level.biome.FixedBiomeSourceSettings -> blv:
    net.minecraft.world.level.biome.Biome biome -> a
    6:9:void <init>(net.minecraft.world.level.storage.LevelData) -> <init>
    12:13:net.minecraft.world.level.biome.FixedBiomeSourceSettings setBiome(net.minecraft.world.level.biome.Biome) -> a
    17:17:net.minecraft.world.level.biome.Biome getBiome() -> a
net.minecraft.world.level.biome.ForestBiome -> blw:
    13:62:void <init>() -> <init>
net.minecraft.world.level.biome.ForestFlowerBiome -> blx:
    21:82:void <init>() -> <init>
net.minecraft.world.level.biome.FrozenOceanBiome -> bly:
    net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise FROZEN_TEMPERATURE_NOISE -> u
    20:69:void <init>() -> <init>
    73:90:float getTemperatureNoCache(net.minecraft.core.BlockPos) -> a
    17:17:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.FrozenRiverBiome -> blz:
    12:56:void <init>() -> <init>
net.minecraft.world.level.biome.FuzzyOffsetBiomeZoomer -> bma:
    net.minecraft.world.level.biome.FuzzyOffsetBiomeZoomer INSTANCE -> a
    net.minecraft.world.level.biome.FuzzyOffsetBiomeZoomer[] $VALUES -> b
    5:5:net.minecraft.world.level.biome.FuzzyOffsetBiomeZoomer[] values() -> values
    5:5:net.minecraft.world.level.biome.FuzzyOffsetBiomeZoomer valueOf(java.lang.String) -> valueOf
    5:5:void <init>(java.lang.String,int) -> <init>
    15:66:net.minecraft.world.level.biome.Biome getBiome(long,int,int,int,net.minecraft.world.level.biome.BiomeManager$NoiseBiomeSource) -> a
    69:88:double getFiddledDistance(long,int,int,int,double,double,double) -> a
    92:93:double getFiddle(long) -> a
    97:97:double sqr(double) -> a
    5:6:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.FuzzyOffsetConstantColumnBiomeZoomer -> bmb:
    net.minecraft.world.level.biome.FuzzyOffsetConstantColumnBiomeZoomer INSTANCE -> a
    net.minecraft.world.level.biome.FuzzyOffsetConstantColumnBiomeZoomer[] $VALUES -> b
    3:3:net.minecraft.world.level.biome.FuzzyOffsetConstantColumnBiomeZoomer[] values() -> values
    3:3:net.minecraft.world.level.biome.FuzzyOffsetConstantColumnBiomeZoomer valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    8:8:net.minecraft.world.level.biome.Biome getBiome(long,int,int,int,net.minecraft.world.level.biome.BiomeManager$NoiseBiomeSource) -> a
    3:4:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.GiantSpruceTaigaBiome -> bmc:
    13:65:void <init>() -> <init>
net.minecraft.world.level.biome.GiantSpruceTaigaHillsMutatedBiome -> bmd:
    13:65:void <init>() -> <init>
net.minecraft.world.level.biome.GiantTreeTaigaBiome -> bme:
    13:65:void <init>() -> <init>
net.minecraft.world.level.biome.GiantTreeTaigaHillsBiome -> bmf:
    13:65:void <init>() -> <init>
net.minecraft.world.level.biome.GravellyMountainsBiome -> bmg:
    13:62:void <init>() -> <init>
net.minecraft.world.level.biome.IceSpikesBiome -> bmh:
    19:66:void <init>() -> <init>
    70:70:float getCreatureProbability() -> f
net.minecraft.world.level.biome.JungleBiome -> bmi:
    13:66:void <init>() -> <init>
net.minecraft.world.level.biome.JungleEdgeBiome -> bmj:
    13:61:void <init>() -> <init>
net.minecraft.world.level.biome.JungleHillsBiome -> bmk:
    13:66:void <init>() -> <init>
net.minecraft.world.level.biome.LukeWarmOceanBiome -> bml:
    15:66:void <init>() -> <init>
net.minecraft.world.level.biome.ModifiedBadlandsPlateauBiome -> bmm:
    13:54:void <init>() -> <init>
    58:58:int getFoliageColor() -> a
    63:63:int getGrassColor(double,double) -> a
net.minecraft.world.level.biome.ModifiedGravellyMountainsBiome -> bmn:
    13:62:void <init>() -> <init>
net.minecraft.world.level.biome.ModifiedJungleBiome -> bmo:
    13:63:void <init>() -> <init>
net.minecraft.world.level.biome.ModifiedJungleEdgeBiome -> bmp:
    13:61:void <init>() -> <init>
net.minecraft.world.level.biome.ModifiedWoodedBadlandsPlateauBiome -> bmq:
    13:55:void <init>() -> <init>
    59:59:int getFoliageColor() -> a
    64:64:int getGrassColor(double,double) -> a
net.minecraft.world.level.biome.MountainBiome -> bmr:
    13:62:void <init>() -> <init>
net.minecraft.world.level.biome.MountainEdgeBiome -> bms:
    13:62:void <init>() -> <init>
net.minecraft.world.level.biome.MushroomFieldsBiome -> bmt:
    13:46:void <init>() -> <init>
net.minecraft.world.level.biome.MushroomFieldsShoreBiome -> bmu:
    13:46:void <init>() -> <init>
net.minecraft.world.level.biome.NearestNeighborBiomeZoomer -> bmv:
    net.minecraft.world.level.biome.NearestNeighborBiomeZoomer INSTANCE -> a
    net.minecraft.world.level.biome.NearestNeighborBiomeZoomer[] $VALUES -> b
    3:3:net.minecraft.world.level.biome.NearestNeighborBiomeZoomer[] values() -> values
    3:3:net.minecraft.world.level.biome.NearestNeighborBiomeZoomer valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    8:8:net.minecraft.world.level.biome.Biome getBiome(long,int,int,int,net.minecraft.world.level.biome.BiomeManager$NoiseBiomeSource) -> a
    3:4:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.NetherBiome -> bmw:
    22:57:void <init>() -> <init>
net.minecraft.world.level.biome.OceanBiome -> bmx:
    19:69:void <init>() -> <init>
net.minecraft.world.level.biome.OverworldBiomeSource -> bmy:
    net.minecraft.world.level.newbiome.layer.Layer noiseBiomeLayer -> d
    java.util.Set POSSIBLE_BIOMES -> e
    82:84:void <init>(net.minecraft.world.level.biome.OverworldBiomeSourceSettings) -> <init>
    88:88:net.minecraft.world.level.biome.Biome getNoiseBiome(int,int,int) -> b
    12:12:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.OverworldBiomeSourceSettings -> bmz:
    long seed -> a
    net.minecraft.world.level.LevelType generatorType -> b
    net.minecraft.world.level.levelgen.OverworldGeneratorSettings generatorSettings -> c
    10:15:void <init>(net.minecraft.world.level.storage.LevelData) -> <init>
    18:19:net.minecraft.world.level.biome.OverworldBiomeSourceSettings setGeneratorSettings(net.minecraft.world.level.levelgen.OverworldGeneratorSettings) -> a
    23:23:long getSeed() -> a
    27:27:net.minecraft.world.level.LevelType getGeneratorType() -> b
    31:31:net.minecraft.world.level.levelgen.OverworldGeneratorSettings getGeneratorSettings() -> c
net.minecraft.world.level.biome.PlainsBiome -> bna:
    14:63:void <init>() -> <init>
net.minecraft.world.level.biome.RiverBiome -> bnb:
    16:61:void <init>() -> <init>
net.minecraft.world.level.biome.SavannaBiome -> bnc:
    14:65:void <init>() -> <init>
net.minecraft.world.level.biome.SavannaPlateauBiome -> bnd:
    13:63:void <init>() -> <init>
net.minecraft.world.level.biome.ShatteredSavannaBiome -> bne:
    13:61:void <init>() -> <init>
net.minecraft.world.level.biome.ShatteredSavannaPlateauBiome -> bnf:
    13:61:void <init>() -> <init>
net.minecraft.world.level.biome.SmallEndIslandsBiome -> bng:
    14:32:void <init>() -> <init>
    36:36:int getSkyColor() -> c
net.minecraft.world.level.biome.SnowyBeachBiome -> bnh:
    14:56:void <init>() -> <init>
net.minecraft.world.level.biome.SnowyMountainsBiome -> bni:
    13:58:void <init>() -> <init>
    62:62:float getCreatureProbability() -> f
net.minecraft.world.level.biome.SnowyTaigaBiome -> bnj:
    13:65:void <init>() -> <init>
net.minecraft.world.level.biome.SnowyTaigaHillsBiome -> bnk:
    13:64:void <init>() -> <init>
net.minecraft.world.level.biome.SnowyTaigaMountainsBiome -> bnl:
    13:64:void <init>() -> <init>
net.minecraft.world.level.biome.SnowyTundraBiome -> bnm:
    14:62:void <init>() -> <init>
    66:66:float getCreatureProbability() -> f
net.minecraft.world.level.biome.StoneShoreBiome -> bnn:
    13:54:void <init>() -> <init>
net.minecraft.world.level.biome.SunflowerPlainsBiome -> bno:
    17:66:void <init>() -> <init>
net.minecraft.world.level.biome.SwampBiome -> bnp:
    17:64:void <init>() -> <init>
    68:72:int getGrassColor(double,double) -> a
    77:77:int getFoliageColor() -> a
net.minecraft.world.level.biome.SwampHillsBiome -> bnq:
    12:57:void <init>() -> <init>
    61:65:int getGrassColor(double,double) -> a
    70:70:int getFoliageColor() -> a
net.minecraft.world.level.biome.TaigaBiome -> bnr:
    14:67:void <init>() -> <init>
net.minecraft.world.level.biome.TaigaHillsBiome -> bns:
    13:64:void <init>() -> <init>
net.minecraft.world.level.biome.TaigaMountainsBiome -> bnt:
    13:64:void <init>() -> <init>
net.minecraft.world.level.biome.TallBirchForestBiome -> bnu:
    13:60:void <init>() -> <init>
net.minecraft.world.level.biome.TallBirchHillsBiome -> bnv:
    13:60:void <init>() -> <init>
net.minecraft.world.level.biome.TheEndBiome -> bnw:
    15:33:void <init>() -> <init>
    37:37:int getSkyColor() -> c
net.minecraft.world.level.biome.TheEndBiomeSource -> bnx:
    net.minecraft.world.level.levelgen.synth.SimplexNoise islandNoise -> d
    net.minecraft.world.level.levelgen.WorldgenRandom random -> e
    java.util.Set POSSIBLE_BIOMES -> f
    27:32:void <init>(net.minecraft.world.level.biome.TheEndBiomeSourceSettings) -> <init>
    36:56:net.minecraft.world.level.biome.Biome getNoiseBiome(int,int,int) -> b
    61:86:float getHeightValue(int,int) -> a
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.level.biome.TheEndBiomeSourceSettings -> bny:
    long seed -> a
    8:10:void <init>(net.minecraft.world.level.storage.LevelData) -> <init>
    13:13:long getSeed() -> a
net.minecraft.world.level.biome.TheVoidBiome -> bnz:
    12:27:void <init>() -> <init>
net.minecraft.world.level.biome.WarmOceanBiome -> boa:
    24:78:void <init>() -> <init>
net.minecraft.world.level.biome.WoodedBadlandsBiome -> bob:
    13:55:void <init>() -> <init>
    59:59:int getFoliageColor() -> a
    64:64:int getGrassColor(double,double) -> a
net.minecraft.world.level.biome.WoodedHillsBiome -> boc:
    13:62:void <init>() -> <init>
net.minecraft.world.level.biome.WoodedMountainBiome -> bod:
    13:62:void <init>() -> <init>
net.minecraft.world.level.biome.package-info -> boe:
net.minecraft.world.level.block.AbstractBannerBlock -> bof:
    net.minecraft.world.item.DyeColor color -> a
    19:21:void <init>(net.minecraft.world.item.DyeColor,net.minecraft.world.level.block.Block$Properties) -> <init>
    25:25:boolean isPossibleToRespawnInThis() -> Y_
    30:30:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    35:41:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    45:50:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    54:54:net.minecraft.world.item.DyeColor getColor() -> b
net.minecraft.world.level.block.AbstractChestBlock -> bog:
    java.util.function.Supplier blockEntityType -> a
    16:18:void <init>(net.minecraft.world.level.block.Block$Properties,java.util.function.Supplier) -> <init>
    net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult combine(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean) -> a
net.minecraft.world.level.block.AbstractFurnaceBlock -> boh:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty LIT -> b
    29:31:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    35:35:int getLightEmission(net.minecraft.world.level.block.state.BlockState) -> a
    40:46:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    void openContainer(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    53:53:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    58:64:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    68:79:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    83:83:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    88:88:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    96:96:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    101:101:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    106:106:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    111:112:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    25:26:void <clinit>() -> <clinit>
net.minecraft.world.level.block.AbstractGlassBlock -> boi:
    10:11:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    15:15:float getShadeBrightness(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    20:20:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    25:25:boolean isSuffocating(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> c
    30:30:boolean isRedstoneConductor(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> d
    35:35:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
net.minecraft.world.level.block.AbstractSkullBlock -> boj:
    net.minecraft.world.level.block.SkullBlock$Type type -> a
    11:13:void <init>(net.minecraft.world.level.block.SkullBlock$Type,net.minecraft.world.level.block.Block$Properties) -> <init>
    17:17:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    21:21:net.minecraft.world.level.block.SkullBlock$Type getType() -> b
net.minecraft.world.level.block.AirBlock -> bok:
    12:13:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    17:17:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    22:22:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    27:27:boolean isAir(net.minecraft.world.level.block.state.BlockState) -> d
net.minecraft.world.level.block.AnvilBlock -> bol:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.phys.shapes.VoxelShape BASE -> b
    net.minecraft.world.phys.shapes.VoxelShape X_LEG1 -> c
    net.minecraft.world.phys.shapes.VoxelShape X_LEG2 -> d
    net.minecraft.world.phys.shapes.VoxelShape X_TOP -> e
    net.minecraft.world.phys.shapes.VoxelShape Z_LEG1 -> f
    net.minecraft.world.phys.shapes.VoxelShape Z_LEG2 -> g
    net.minecraft.world.phys.shapes.VoxelShape Z_TOP -> h
    net.minecraft.world.phys.shapes.VoxelShape X_AXIS_AABB -> i
    net.minecraft.world.phys.shapes.VoxelShape Z_AXIS_AABB -> j
    net.minecraft.network.chat.TranslatableComponent CONTAINER_TITLE -> k
    48:50:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    54:54:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    59:65:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    71:71:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    76:80:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    86:87:void falling(net.minecraft.world.entity.item.FallingBlockEntity) -> a
    91:92:void onLand(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState) -> a
    96:97:void onBroken(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    101:108:net.minecraft.world.level.block.state.BlockState damage(net.minecraft.world.level.block.state.BlockState) -> e
    113:113:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    118:119:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    123:123:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    71:71:net.minecraft.world.inventory.AbstractContainerMenu lambda$getMenuProvider$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> a
    30:45:void <clinit>() -> <clinit>
net.minecraft.world.level.block.AttachedStemBlock -> bom:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.StemGrownBlock fruit -> b
    java.util.Map AABBS -> c
    34:37:void <init>(net.minecraft.world.level.block.StemGrownBlock,net.minecraft.world.level.block.Block$Properties) -> <init>
    41:41:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    46:49:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    54:54:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    58:66:net.minecraft.world.item.Item getSeedItem() -> b
    71:71:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    76:76:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    81:81:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    86:87:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    21:30:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BambooBlock -> bon:
    net.minecraft.world.phys.shapes.VoxelShape SMALL_SHAPE -> a
    net.minecraft.world.phys.shapes.VoxelShape LARGE_SHAPE -> b
    net.minecraft.world.phys.shapes.VoxelShape COLLISION_SHAPE -> c
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> d
    net.minecraft.world.level.block.state.properties.EnumProperty LEAVES -> e
    net.minecraft.world.level.block.state.properties.IntegerProperty STAGE -> f
    49:51:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    55:56:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    60:60:net.minecraft.world.level.block.Block$OffsetType getOffsetType() -> X_
    65:65:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    70:72:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    77:77:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    82:83:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    89:107:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    112:127:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    131:131:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    136:146:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    151:153:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    158:158:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    163:180:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    184:188:float getDestroyProgress(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    192:213:void growBamboo(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random,int) -> a
    216:220:int getHeightAboveUpToMax(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    224:228:int getHeightBelowUpToMax(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    34:40:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BambooSaplingBlock -> boo:
    net.minecraft.world.phys.shapes.VoxelShape SAPLING_SHAPE -> a
    28:29:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    33:33:net.minecraft.world.level.block.Block$OffsetType getOffsetType() -> X_
    38:39:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    44:47:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    51:51:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    56:64:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    69:69:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    74:74:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    79:79:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    84:85:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    89:93:float getDestroyProgress(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    97:98:void growBamboo(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    25:25:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BannerBlock -> bop:
    net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION -> a
    java.util.Map BY_COLOR -> b
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> c
    28:32:void <init>(net.minecraft.world.item.DyeColor,net.minecraft.world.level.block.Block$Properties) -> <init>
    36:36:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    41:41:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    46:46:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    51:55:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    60:60:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    65:65:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    70:71:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    74:74:net.minecraft.world.level.block.Block byColor(net.minecraft.world.item.DyeColor) -> a
    22:25:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BarrelBlock -> boq:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty OPEN -> b
    35:37:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    41:51:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    56:66:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    70:75:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    80:80:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    85:85:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    90:96:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    100:100:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    105:105:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    110:110:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    115:115:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    120:121:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    125:125:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    31:32:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BarrierBlock -> bor:
    10:11:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    15:15:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    20:20:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    25:25:float getShadeBrightness(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    30:30:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
net.minecraft.world.level.block.BaseCoralFanBlock -> bos:
    net.minecraft.world.phys.shapes.VoxelShape AABB -> a
    13:14:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    18:18:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    10:10:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BaseCoralPlantBlock -> bot:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    14:15:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    19:19:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    11:11:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BaseCoralPlantTypeBlock -> bou:
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> b
    net.minecraft.world.phys.shapes.VoxelShape AABB -> a
    26:28:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    31:34:void tryScheduleDieTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    37:46:boolean scanForWater(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b_
    52:54:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    59:59:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    64:71:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    76:77:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    82:83:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    87:91:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    22:23:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BaseCoralWallFanBlock -> bov:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    java.util.Map SHAPES -> c
    32:34:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    38:38:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    43:43:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    48:48:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    53:54:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    58:66:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    71:75:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    81:98:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    22:28:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BaseEntityBlock -> bow:
    13:14:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    18:18:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    23:29:boolean triggerEvent(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,int) -> a
    35:36:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
net.minecraft.world.level.block.BasePressurePlateBlock -> box:
    net.minecraft.world.phys.shapes.VoxelShape PRESSED_AABB -> a
    net.minecraft.world.phys.shapes.VoxelShape AABB -> b
    net.minecraft.world.phys.AABB TOUCH_AABB -> c
    27:28:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    32:32:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    37:37:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    42:42:boolean isPossibleToRespawnInThis() -> Y_
    47:50:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    55:56:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    61:65:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    69:77:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    80:100:void checkPressed(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,int) -> a
    void playOnSound(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    void playOffSound(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> b
    108:116:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    119:121:void updateNeighbours(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    125:125:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    130:134:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    139:139:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    144:144:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    int getSignalStrength(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    int getSignalForState(net.minecraft.world.level.block.state.BlockState) -> h
    net.minecraft.world.level.block.state.BlockState setSignalForState(net.minecraft.world.level.block.state.BlockState,int) -> a
    22:24:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BaseRailBlock -> boy:
    net.minecraft.world.phys.shapes.VoxelShape FLAT_AABB -> a
    net.minecraft.world.phys.shapes.VoxelShape HALF_BLOCK_AABB -> b
    boolean isStraight -> c
    24:24:boolean isRail(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    28:28:boolean isRail(net.minecraft.world.level.block.state.BlockState) -> h
    32:34:void <init>(boolean,net.minecraft.world.level.block.Block$Properties) -> <init>
    37:37:boolean isStraight() -> c
    42:46:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    52:52:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    57:65:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    69:108:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    111:111:void updateState(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block) -> a
    114:118:net.minecraft.world.level.block.state.BlockState updateDir(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    123:123:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    128:142:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    146:149:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    net.minecraft.world.level.block.state.properties.Property getShapeProperty() -> d
    18:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BeaconBeamBlock -> boz:
    net.minecraft.world.item.DyeColor getColor() -> a
net.minecraft.world.level.block.BeaconBlock -> bpa:
    20:21:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    25:25:net.minecraft.world.item.DyeColor getColor() -> a
    30:30:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    35:45:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    50:50:boolean isRedstoneConductor(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> d
    55:55:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    60:66:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.level.block.BedBlock -> bpb:
    net.minecraft.world.level.block.state.properties.EnumProperty PART -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty OCCUPIED -> b
    net.minecraft.world.phys.shapes.VoxelShape BASE -> c
    net.minecraft.world.phys.shapes.VoxelShape LEG_NORTH_WEST -> d
    net.minecraft.world.phys.shapes.VoxelShape LEG_SOUTH_WEST -> e
    net.minecraft.world.phys.shapes.VoxelShape LEG_NORTH_EAST -> f
    net.minecraft.world.phys.shapes.VoxelShape LEG_SOUTH_EAST -> g
    net.minecraft.world.phys.shapes.VoxelShape NORTH_SHAPE -> h
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_SHAPE -> i
    net.minecraft.world.phys.shapes.VoxelShape WEST_SHAPE -> j
    net.minecraft.world.phys.shapes.VoxelShape EAST_SHAPE -> k
    net.minecraft.world.item.DyeColor color -> w
    69:72:void <init>(net.minecraft.world.item.DyeColor,net.minecraft.world.level.block.Block$Properties) -> <init>
    76:79:net.minecraft.world.level.material.MaterialColor getMapColor(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> e
    84:85:net.minecraft.core.Direction getBedOrientation(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    90:130:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    137:142:boolean kickVillagerOutOfBed(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    147:148:void fallOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity,float) -> a
    152:157:void updateEntityAfterFallOn(net.minecraft.world.level.BlockGetter,net.minecraft.world.entity.Entity) -> a
    160:170:void bounceUp(net.minecraft.world.entity.Entity) -> a
    174:182:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    186:186:net.minecraft.core.Direction getNeighbourDirection(net.minecraft.world.level.block.state.properties.BedPart,net.minecraft.core.Direction) -> a
    192:193:void playerDestroy(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.entity.BlockEntity,net.minecraft.world.item.ItemStack) -> a
    197:219:void playerWillDestroy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player) -> a
    224:232:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    237:246:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    251:252:net.minecraft.core.Direction getConnectedDirection(net.minecraft.world.level.block.state.BlockState) -> h
    256:260:net.minecraft.world.level.block.DoubleBlockCombiner$BlockType getBlockType(net.minecraft.world.level.block.state.BlockState) -> i
    264:293:java.util.Optional findStandUpPosition(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,int) -> a
    297:330:java.util.Optional getStandingLocationAtOrBelow(net.minecraft.world.entity.EntityType,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    335:335:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    340:340:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    345:346:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    350:350:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    355:365:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    368:368:net.minecraft.world.item.DyeColor getColor() -> c
    373:374:long getSeed(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    379:379:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    126:129:void lambda$use$0(net.minecraft.world.entity.player.Player,net.minecraft.world.entity.player.Player$BedSleepingProblem) -> a
    48:64:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BedBlock$1 -> bpb$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    238:238:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BedrockBlock -> bpc:
    10:11:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    15:15:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
net.minecraft.world.level.block.BeehiveBlock -> bpd:
    net.minecraft.core.Direction[] SPAWN_DIRECTIONS -> a
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> b
    net.minecraft.world.level.block.state.properties.IntegerProperty HONEY_LEVEL -> c
    64:66:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    70:70:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    75:75:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    80:97:void playerDestroy(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.entity.BlockEntity,net.minecraft.world.item.ItemStack) -> a
    100:110:void angerNearbyBees(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    113:114:void dropHoneycomb(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    118:157:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    161:167:boolean hiveContainsBees(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> d
    171:178:void releaseBeesAndResetHoneyLevel(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus) -> a
    181:182:void resetHoneyLevel(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    186:191:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    194:214:void trySpawnDripParticles(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    217:222:void spawnParticle(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.VoxelShape,double) -> a
    225:226:void spawnFluidParticle(net.minecraft.world.level.Level,double,double,double,double,double) -> a
    230:230:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    235:236:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    240:240:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    246:246:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    251:282:void playerWillDestroy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player) -> a
    286:300:java.util.List getDrops(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.storage.loot.LootContext$Builder) -> a
    305:313:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    127:127:void lambda$use$0(net.minecraft.world.InteractionHand,net.minecraft.world.entity.player.Player) -> a
    54:57:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BeetrootBlock -> bpe:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    net.minecraft.world.phys.shapes.VoxelShape[] SHAPE_BY_AGE -> c
    30:31:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    35:35:net.minecraft.world.level.block.state.properties.IntegerProperty getAgeProperty() -> c
    40:40:int getMaxAge() -> d
    45:45:net.minecraft.world.level.ItemLike getBaseSeedId() -> e
    51:54:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    58:58:int getBonemealAgeIncrease(net.minecraft.world.level.Level) -> a
    63:64:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    68:68:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    20:26:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BellBlock -> bpf:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.EnumProperty ATTACHMENT -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> b
    net.minecraft.world.phys.shapes.VoxelShape NORTH_SOUTH_FLOOR_SHAPE -> d
    net.minecraft.world.phys.shapes.VoxelShape EAST_WEST_FLOOR_SHAPE -> e
    net.minecraft.world.phys.shapes.VoxelShape BELL_TOP_SHAPE -> f
    net.minecraft.world.phys.shapes.VoxelShape BELL_BOTTOM_SHAPE -> g
    net.minecraft.world.phys.shapes.VoxelShape BELL_SHAPE -> h
    net.minecraft.world.phys.shapes.VoxelShape NORTH_SOUTH_BETWEEN -> i
    net.minecraft.world.phys.shapes.VoxelShape EAST_WEST_BETWEEN -> j
    net.minecraft.world.phys.shapes.VoxelShape TO_WEST -> k
    net.minecraft.world.phys.shapes.VoxelShape TO_EAST -> w
    net.minecraft.world.phys.shapes.VoxelShape TO_NORTH -> x
    net.minecraft.world.phys.shapes.VoxelShape TO_SOUTH -> y
    net.minecraft.world.phys.shapes.VoxelShape CEILING_SHAPE -> z
    59:61:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    65:73:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    77:82:void onProjectileHit(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.BlockHitResult,net.minecraft.world.entity.Entity) -> a
    86:86:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    90:100:boolean onHit(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.BlockHitResult,net.minecraft.world.entity.player.Player,boolean) -> a
    104:120:boolean isProperHit(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,double) -> a
    125:134:boolean attemptToRing(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    138:161:net.minecraft.world.phys.shapes.VoxelShape getVoxelShape(net.minecraft.world.level.block.state.BlockState) -> h
    167:167:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    172:172:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    177:177:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    184:215:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    220:235:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    240:240:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    244:250:net.minecraft.core.Direction getConnectedDirection(net.minecraft.world.level.block.state.BlockState) -> i
    256:256:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    261:262:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    267:267:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    272:272:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    37:54:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BellBlock$1 -> bpf$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$BellAttachType -> a
    111:111:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BlastFurnaceBlock -> bpg:
    21:22:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    26:26:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    31:36:void openContainer(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    40:63:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
net.minecraft.world.level.block.Block -> bph:
    org.apache.logging.log4j.Logger LOGGER -> l
    net.minecraft.core.IdMapper BLOCK_STATE_REGISTRY -> m
    net.minecraft.core.Direction[] UPDATE_SHAPE_ORDER -> a
    com.google.common.cache.LoadingCache SHAPE_FULL_BLOCK_CACHE -> b
    net.minecraft.world.phys.shapes.VoxelShape RIGID_SUPPORT_SHAPE -> c
    net.minecraft.world.phys.shapes.VoxelShape CENTER_SUPPORT_SHAPE -> d
    int lightEmission -> n
    float destroySpeed -> o
    float explosionResistance -> p
    boolean isTicking -> q
    net.minecraft.world.level.block.SoundType soundType -> r
    net.minecraft.world.level.material.Material material -> s
    net.minecraft.world.level.material.MaterialColor materialColor -> t
    float friction -> e
    float speedFactor -> f
    float jumpFactor -> g
    net.minecraft.world.level.block.state.StateDefinition stateDefinition -> u
    net.minecraft.world.level.block.state.BlockState defaultBlockState -> h
    boolean hasCollision -> v
    boolean dynamicShape -> i
    boolean canOcclude -> j
    net.minecraft.resources.ResourceLocation drops -> k
    java.lang.String descriptionId -> w
    net.minecraft.world.item.Item item -> x
    java.lang.ThreadLocal OCCLUSION_CACHE -> y
    123:127:int getId(net.minecraft.world.level.block.state.BlockState) -> j
    131:132:net.minecraft.world.level.block.state.BlockState stateById(int) -> a
    136:140:net.minecraft.world.level.block.Block byItem(net.minecraft.world.item.Item) -> a
    144:151:net.minecraft.world.level.block.state.BlockState pushEntitiesUp(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    155:155:net.minecraft.world.phys.shapes.VoxelShape box(double,double,double,double,double,double) -> a
    161:161:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
    167:167:boolean isAir(net.minecraft.world.level.block.state.BlockState) -> d
    173:173:int getLightEmission(net.minecraft.world.level.block.state.BlockState) -> a
    179:179:net.minecraft.world.level.material.Material getMaterial(net.minecraft.world.level.block.state.BlockState) -> k
    185:185:net.minecraft.world.level.material.MaterialColor getMapColor(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> e
    191:199:void updateNeighbourShapes(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,int) -> a
    202:202:boolean is(net.minecraft.tags.Tag) -> a
    206:214:net.minecraft.world.level.block.state.BlockState updateFromNeighbourShapes(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> b
    218:227:void updateOrDestroy(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,int) -> a
    232:232:void updateIndirectNeighbourShapes(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,int) -> b
    242:242:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    248:248:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    254:254:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    285:305:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    308:314:boolean isExceptionForConnection(net.minecraft.world.level.block.Block) -> a
    321:321:boolean isRedstoneConductor(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> d
    327:327:boolean isSuffocating(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> c
    333:333:boolean isViewBlocking(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> f
    340:348:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    355:355:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    361:361:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.BlockPlaceContext) -> a
    367:367:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
    373:373:float getDestroySpeed(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> g
    377:377:boolean isRandomlyTicking(net.minecraft.world.level.block.state.BlockState) -> l
    381:381:boolean isEntityBlock() -> f
    387:387:boolean hasPostProcess(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> h
    393:393:boolean emissiveRendering(net.minecraft.world.level.block.state.BlockState) -> m
    443:467:boolean shouldRenderFace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> c
    473:473:boolean canOcclude(net.minecraft.world.level.block.state.BlockState) -> n
    479:479:boolean skipRendering(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction) -> a
    485:485:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    491:491:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    497:497:net.minecraft.world.phys.shapes.VoxelShape getOcclusionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> i
    503:503:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> j
    507:508:boolean canSupportRigidBlock(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> c
    512:513:boolean canSupportCenter(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    517:517:boolean isFaceSturdy(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> d
    521:522:boolean isFaceFull(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.Direction) -> a
    526:526:boolean isShapeFullBlock(net.minecraft.world.phys.shapes.VoxelShape) -> a
    532:535:boolean isSolidRender(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> k
    539:539:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    545:548:int getLightBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> l
    554:554:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    560:561:void randomTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> b
    566:566:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    569:569:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    573:573:void destroy(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    581:582:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    585:585:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    592:592:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    598:598:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    603:606:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    611:616:float getDestroyProgress(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    622:622:void spawnAfterBreak(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    625:630:net.minecraft.resources.ResourceLocation getLootTable() -> g
    636:643:java.util.List getDrops(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.storage.loot.LootContext$Builder) -> a
    648:653:java.util.List getDrops(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity) -> a
    657:663:java.util.List getDrops(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity,net.minecraft.world.entity.Entity,net.minecraft.world.item.ItemStack) -> a
    667:671:void dropResources(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.storage.loot.LootContext$Builder) -> b
    674:678:void dropResources(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> c
    681:685:void dropResources(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity) -> a
    688:692:void dropResources(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity,net.minecraft.world.entity.Entity,net.minecraft.world.item.ItemStack) -> a
    695:706:void popResource(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    709:716:void popExperience(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int) -> a
    719:719:float getExplosionResistance() -> h
    723:723:void wasExploded(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.Explosion) -> a
    728:728:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    734:734:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    738:738:void stepOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    742:742:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    746:746:void prepareRender(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> d
    751:751:void attack(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    756:756:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    762:762:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    768:768:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    773:773:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    778:781:void playerDestroy(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.entity.BlockEntity,net.minecraft.world.item.ItemStack) -> a
    784:784:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    787:787:boolean isPossibleToRespawnInThis() -> Y_
    791:791:net.minecraft.network.chat.Component getName() -> j
    795:798:java.lang.String getDescriptionId() -> k
    804:804:boolean triggerEvent(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,int) -> a
    810:810:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    816:816:float getShadeBrightness(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    820:821:void fallOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity,float) -> a
    824:825:void updateEntityAfterFallOn(net.minecraft.world.level.BlockGetter,net.minecraft.world.entity.Entity) -> a
    828:828:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    832:833:void fillItemCategory(net.minecraft.world.item.CreativeModeTab,net.minecraft.core.NonNullList) -> a
    838:838:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    842:842:float getFriction() -> l
    846:846:float getSpeedFactor() -> m
    850:850:float getJumpFactor() -> n
    856:856:long getSeed(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    860:860:void onProjectileHit(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.BlockHitResult,net.minecraft.world.entity.Entity) -> a
    989:990:void playerWillDestroy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player) -> a
    993:993:void handleRain(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> c
    996:996:boolean dropFromExplosion(net.minecraft.world.level.Explosion) -> a
    1002:1002:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    1008:1008:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    1012:1012:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    1015:1015:net.minecraft.world.level.block.state.StateDefinition getStateDefinition() -> o
    1019:1020:void registerDefaultState(net.minecraft.world.level.block.state.BlockState) -> p
    1023:1023:net.minecraft.world.level.block.state.BlockState defaultBlockState() -> p
    1027:1027:net.minecraft.world.level.block.Block$OffsetType getOffsetType() -> X_
    1033:1039:net.minecraft.world.phys.Vec3 getOffset(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> m
    1047:1047:net.minecraft.world.level.block.SoundType getSoundType(net.minecraft.world.level.block.state.BlockState) -> q
    1052:1055:net.minecraft.world.item.Item asItem() -> i
    1065:1065:boolean hasDynamicShape() -> q
    1070:1070:java.lang.String toString() -> toString
    1074:1074:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.BlockGetter,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    689:689:void lambda$dropResources$4(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> b
    682:682:void lambda$dropResources$3(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> c
    675:675:void lambda$dropResources$2(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> d
    669:669:void lambda$dropResources$1(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    430:436:it.unimi.dsi.fastutil.objects.Object2ByteLinkedOpenHashMap lambda$static$0() -> c
    79:79:boolean access$1400(net.minecraft.world.level.block.Block) -> b
    79:79:boolean access$1500(net.minecraft.world.level.block.Block) -> c
    80:429:void <clinit>() -> <clinit>
net.minecraft.world.level.block.Block$1 -> bph$1:
    89:89:void <init>() -> <init>
    92:92:java.lang.Boolean load(net.minecraft.world.phys.shapes.VoxelShape) -> a
    89:89:java.lang.Object load(java.lang.Object) -> load
net.minecraft.world.level.block.Block$2 -> bph$2:
    430:430:void <init>(int,float) -> <init>
    433:433:void rehash(int) -> rehash
net.minecraft.world.level.block.Block$3 -> bph$3:
    int[] $SwitchMap$net$minecraft$world$level$pathfinder$PathComputationType -> a
    340:340:void <clinit>() -> <clinit>
net.minecraft.world.level.block.Block$BlockStatePairKey -> bph$a:
    net.minecraft.world.level.block.state.BlockState first -> a
    net.minecraft.world.level.block.state.BlockState second -> b
    net.minecraft.core.Direction direction -> c
    401:405:void <init>(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction) -> <init>
    409:416:boolean equals(java.lang.Object) -> equals
    421:424:int hashCode() -> hashCode
net.minecraft.world.level.block.Block$OffsetType -> bph$b:
    net.minecraft.world.level.block.Block$OffsetType NONE -> a
    net.minecraft.world.level.block.Block$OffsetType XZ -> b
    net.minecraft.world.level.block.Block$OffsetType XYZ -> c
    net.minecraft.world.level.block.Block$OffsetType[] $VALUES -> d
    1058:1058:net.minecraft.world.level.block.Block$OffsetType[] values() -> values
    1058:1058:net.minecraft.world.level.block.Block$OffsetType valueOf(java.lang.String) -> valueOf
    1058:1058:void <init>(java.lang.String,int) -> <init>
    1058:1061:void <clinit>() -> <clinit>
net.minecraft.world.level.block.Block$Properties -> bph$c:
    net.minecraft.world.level.material.Material material -> a
    net.minecraft.world.level.material.MaterialColor materialColor -> b
    boolean hasCollision -> c
    net.minecraft.world.level.block.SoundType soundType -> d
    int lightEmission -> e
    float explosionResistance -> f
    float destroyTime -> g
    boolean isTicking -> h
    float friction -> i
    float speedFactor -> j
    float jumpFactor -> k
    net.minecraft.resources.ResourceLocation drops -> l
    boolean canOcclude -> m
    boolean dynamicShape -> n
    865:883:void <init>(net.minecraft.world.level.material.Material,net.minecraft.world.level.material.MaterialColor) -> <init>
    886:886:net.minecraft.world.level.block.Block$Properties of(net.minecraft.world.level.material.Material) -> a
    890:890:net.minecraft.world.level.block.Block$Properties of(net.minecraft.world.level.material.Material,net.minecraft.world.item.DyeColor) -> a
    894:894:net.minecraft.world.level.block.Block$Properties of(net.minecraft.world.level.material.Material,net.minecraft.world.level.material.MaterialColor) -> a
    898:912:net.minecraft.world.level.block.Block$Properties copy(net.minecraft.world.level.block.Block) -> a
    916:918:net.minecraft.world.level.block.Block$Properties noCollission() -> a
    922:923:net.minecraft.world.level.block.Block$Properties noOcclusion() -> b
    927:928:net.minecraft.world.level.block.Block$Properties friction(float) -> a
    932:933:net.minecraft.world.level.block.Block$Properties speedFactor(float) -> b
    937:938:net.minecraft.world.level.block.Block$Properties jumpFactor(float) -> c
    942:943:net.minecraft.world.level.block.Block$Properties sound(net.minecraft.world.level.block.SoundType) -> a
    947:948:net.minecraft.world.level.block.Block$Properties lightLevel(int) -> a
    952:954:net.minecraft.world.level.block.Block$Properties strength(float,float) -> a
    958:958:net.minecraft.world.level.block.Block$Properties instabreak() -> c
    962:963:net.minecraft.world.level.block.Block$Properties strength(float) -> d
    967:968:net.minecraft.world.level.block.Block$Properties randomTicks() -> d
    972:973:net.minecraft.world.level.block.Block$Properties dynamicShape() -> e
    977:978:net.minecraft.world.level.block.Block$Properties noDrops() -> f
    982:983:net.minecraft.world.level.block.Block$Properties dropsLike(net.minecraft.world.level.block.Block) -> b
    862:862:net.minecraft.world.level.material.Material access$000(net.minecraft.world.level.block.Block$Properties) -> a
    862:862:net.minecraft.world.level.material.MaterialColor access$100(net.minecraft.world.level.block.Block$Properties) -> b
    862:862:boolean access$200(net.minecraft.world.level.block.Block$Properties) -> c
    862:862:net.minecraft.world.level.block.SoundType access$300(net.minecraft.world.level.block.Block$Properties) -> d
    862:862:int access$400(net.minecraft.world.level.block.Block$Properties) -> e
    862:862:float access$500(net.minecraft.world.level.block.Block$Properties) -> f
    862:862:float access$600(net.minecraft.world.level.block.Block$Properties) -> g
    862:862:boolean access$700(net.minecraft.world.level.block.Block$Properties) -> h
    862:862:float access$800(net.minecraft.world.level.block.Block$Properties) -> i
    862:862:float access$900(net.minecraft.world.level.block.Block$Properties) -> j
    862:862:float access$1000(net.minecraft.world.level.block.Block$Properties) -> k
    862:862:boolean access$1100(net.minecraft.world.level.block.Block$Properties) -> l
    862:862:net.minecraft.resources.ResourceLocation access$1200(net.minecraft.world.level.block.Block$Properties) -> m
    862:862:boolean access$1300(net.minecraft.world.level.block.Block$Properties) -> n
net.minecraft.world.level.block.Blocks -> bpi:
    net.minecraft.world.level.block.Block AIR -> a
    net.minecraft.world.level.block.Block STONE -> b
    net.minecraft.world.level.block.Block GRANITE -> c
    net.minecraft.world.level.block.Block POLISHED_GRANITE -> d
    net.minecraft.world.level.block.Block DIORITE -> e
    net.minecraft.world.level.block.Block POLISHED_DIORITE -> f
    net.minecraft.world.level.block.Block ANDESITE -> g
    net.minecraft.world.level.block.Block POLISHED_ANDESITE -> h
    net.minecraft.world.level.block.Block GRASS_BLOCK -> i
    net.minecraft.world.level.block.Block DIRT -> j
    net.minecraft.world.level.block.Block COARSE_DIRT -> k
    net.minecraft.world.level.block.Block PODZOL -> l
    net.minecraft.world.level.block.Block COBBLESTONE -> m
    net.minecraft.world.level.block.Block OAK_PLANKS -> n
    net.minecraft.world.level.block.Block SPRUCE_PLANKS -> o
    net.minecraft.world.level.block.Block BIRCH_PLANKS -> p
    net.minecraft.world.level.block.Block JUNGLE_PLANKS -> q
    net.minecraft.world.level.block.Block ACACIA_PLANKS -> r
    net.minecraft.world.level.block.Block DARK_OAK_PLANKS -> s
    net.minecraft.world.level.block.Block OAK_SAPLING -> t
    net.minecraft.world.level.block.Block SPRUCE_SAPLING -> u
    net.minecraft.world.level.block.Block BIRCH_SAPLING -> v
    net.minecraft.world.level.block.Block JUNGLE_SAPLING -> w
    net.minecraft.world.level.block.Block ACACIA_SAPLING -> x
    net.minecraft.world.level.block.Block DARK_OAK_SAPLING -> y
    net.minecraft.world.level.block.Block BEDROCK -> z
    net.minecraft.world.level.block.Block WATER -> A
    net.minecraft.world.level.block.Block LAVA -> B
    net.minecraft.world.level.block.Block SAND -> C
    net.minecraft.world.level.block.Block RED_SAND -> D
    net.minecraft.world.level.block.Block GRAVEL -> E
    net.minecraft.world.level.block.Block GOLD_ORE -> F
    net.minecraft.world.level.block.Block IRON_ORE -> G
    net.minecraft.world.level.block.Block COAL_ORE -> H
    net.minecraft.world.level.block.Block OAK_LOG -> I
    net.minecraft.world.level.block.Block SPRUCE_LOG -> J
    net.minecraft.world.level.block.Block BIRCH_LOG -> K
    net.minecraft.world.level.block.Block JUNGLE_LOG -> L
    net.minecraft.world.level.block.Block ACACIA_LOG -> M
    net.minecraft.world.level.block.Block DARK_OAK_LOG -> N
    net.minecraft.world.level.block.Block STRIPPED_SPRUCE_LOG -> O
    net.minecraft.world.level.block.Block STRIPPED_BIRCH_LOG -> P
    net.minecraft.world.level.block.Block STRIPPED_JUNGLE_LOG -> Q
    net.minecraft.world.level.block.Block STRIPPED_ACACIA_LOG -> R
    net.minecraft.world.level.block.Block STRIPPED_DARK_OAK_LOG -> S
    net.minecraft.world.level.block.Block STRIPPED_OAK_LOG -> T
    net.minecraft.world.level.block.Block OAK_WOOD -> U
    net.minecraft.world.level.block.Block SPRUCE_WOOD -> V
    net.minecraft.world.level.block.Block BIRCH_WOOD -> W
    net.minecraft.world.level.block.Block JUNGLE_WOOD -> X
    net.minecraft.world.level.block.Block ACACIA_WOOD -> Y
    net.minecraft.world.level.block.Block DARK_OAK_WOOD -> Z
    net.minecraft.world.level.block.Block STRIPPED_OAK_WOOD -> aa
    net.minecraft.world.level.block.Block STRIPPED_SPRUCE_WOOD -> ab
    net.minecraft.world.level.block.Block STRIPPED_BIRCH_WOOD -> ac
    net.minecraft.world.level.block.Block STRIPPED_JUNGLE_WOOD -> ad
    net.minecraft.world.level.block.Block STRIPPED_ACACIA_WOOD -> ae
    net.minecraft.world.level.block.Block STRIPPED_DARK_OAK_WOOD -> af
    net.minecraft.world.level.block.Block OAK_LEAVES -> ag
    net.minecraft.world.level.block.Block SPRUCE_LEAVES -> ah
    net.minecraft.world.level.block.Block BIRCH_LEAVES -> ai
    net.minecraft.world.level.block.Block JUNGLE_LEAVES -> aj
    net.minecraft.world.level.block.Block ACACIA_LEAVES -> ak
    net.minecraft.world.level.block.Block DARK_OAK_LEAVES -> al
    net.minecraft.world.level.block.Block SPONGE -> am
    net.minecraft.world.level.block.Block WET_SPONGE -> an
    net.minecraft.world.level.block.Block GLASS -> ao
    net.minecraft.world.level.block.Block LAPIS_ORE -> ap
    net.minecraft.world.level.block.Block LAPIS_BLOCK -> aq
    net.minecraft.world.level.block.Block DISPENSER -> ar
    net.minecraft.world.level.block.Block SANDSTONE -> as
    net.minecraft.world.level.block.Block CHISELED_SANDSTONE -> at
    net.minecraft.world.level.block.Block CUT_SANDSTONE -> au
    net.minecraft.world.level.block.Block NOTE_BLOCK -> av
    net.minecraft.world.level.block.Block WHITE_BED -> aw
    net.minecraft.world.level.block.Block ORANGE_BED -> ax
    net.minecraft.world.level.block.Block MAGENTA_BED -> ay
    net.minecraft.world.level.block.Block LIGHT_BLUE_BED -> az
    net.minecraft.world.level.block.Block YELLOW_BED -> aA
    net.minecraft.world.level.block.Block LIME_BED -> aB
    net.minecraft.world.level.block.Block PINK_BED -> aC
    net.minecraft.world.level.block.Block GRAY_BED -> aD
    net.minecraft.world.level.block.Block LIGHT_GRAY_BED -> aE
    net.minecraft.world.level.block.Block CYAN_BED -> aF
    net.minecraft.world.level.block.Block PURPLE_BED -> aG
    net.minecraft.world.level.block.Block BLUE_BED -> aH
    net.minecraft.world.level.block.Block BROWN_BED -> aI
    net.minecraft.world.level.block.Block GREEN_BED -> aJ
    net.minecraft.world.level.block.Block RED_BED -> aK
    net.minecraft.world.level.block.Block BLACK_BED -> aL
    net.minecraft.world.level.block.Block POWERED_RAIL -> aM
    net.minecraft.world.level.block.Block DETECTOR_RAIL -> aN
    net.minecraft.world.level.block.Block STICKY_PISTON -> aO
    net.minecraft.world.level.block.Block COBWEB -> aP
    net.minecraft.world.level.block.Block GRASS -> aQ
    net.minecraft.world.level.block.Block FERN -> aR
    net.minecraft.world.level.block.Block DEAD_BUSH -> aS
    net.minecraft.world.level.block.Block SEAGRASS -> aT
    net.minecraft.world.level.block.Block TALL_SEAGRASS -> aU
    net.minecraft.world.level.block.Block PISTON -> aV
    net.minecraft.world.level.block.Block PISTON_HEAD -> aW
    net.minecraft.world.level.block.Block WHITE_WOOL -> aX
    net.minecraft.world.level.block.Block ORANGE_WOOL -> aY
    net.minecraft.world.level.block.Block MAGENTA_WOOL -> aZ
    net.minecraft.world.level.block.Block LIGHT_BLUE_WOOL -> ba
    net.minecraft.world.level.block.Block YELLOW_WOOL -> bb
    net.minecraft.world.level.block.Block LIME_WOOL -> bc
    net.minecraft.world.level.block.Block PINK_WOOL -> bd
    net.minecraft.world.level.block.Block GRAY_WOOL -> be
    net.minecraft.world.level.block.Block LIGHT_GRAY_WOOL -> bf
    net.minecraft.world.level.block.Block CYAN_WOOL -> bg
    net.minecraft.world.level.block.Block PURPLE_WOOL -> bh
    net.minecraft.world.level.block.Block BLUE_WOOL -> bi
    net.minecraft.world.level.block.Block BROWN_WOOL -> bj
    net.minecraft.world.level.block.Block GREEN_WOOL -> bk
    net.minecraft.world.level.block.Block RED_WOOL -> bl
    net.minecraft.world.level.block.Block BLACK_WOOL -> bm
    net.minecraft.world.level.block.Block MOVING_PISTON -> bn
    net.minecraft.world.level.block.Block DANDELION -> bo
    net.minecraft.world.level.block.Block POPPY -> bp
    net.minecraft.world.level.block.Block BLUE_ORCHID -> bq
    net.minecraft.world.level.block.Block ALLIUM -> br
    net.minecraft.world.level.block.Block AZURE_BLUET -> bs
    net.minecraft.world.level.block.Block RED_TULIP -> bt
    net.minecraft.world.level.block.Block ORANGE_TULIP -> bu
    net.minecraft.world.level.block.Block WHITE_TULIP -> bv
    net.minecraft.world.level.block.Block PINK_TULIP -> bw
    net.minecraft.world.level.block.Block OXEYE_DAISY -> bx
    net.minecraft.world.level.block.Block CORNFLOWER -> by
    net.minecraft.world.level.block.Block WITHER_ROSE -> bz
    net.minecraft.world.level.block.Block LILY_OF_THE_VALLEY -> bA
    net.minecraft.world.level.block.Block BROWN_MUSHROOM -> bB
    net.minecraft.world.level.block.Block RED_MUSHROOM -> bC
    net.minecraft.world.level.block.Block GOLD_BLOCK -> bD
    net.minecraft.world.level.block.Block IRON_BLOCK -> bE
    net.minecraft.world.level.block.Block BRICKS -> bF
    net.minecraft.world.level.block.Block TNT -> bG
    net.minecraft.world.level.block.Block BOOKSHELF -> bH
    net.minecraft.world.level.block.Block MOSSY_COBBLESTONE -> bI
    net.minecraft.world.level.block.Block OBSIDIAN -> bJ
    net.minecraft.world.level.block.Block TORCH -> bK
    net.minecraft.world.level.block.Block WALL_TORCH -> bL
    net.minecraft.world.level.block.Block FIRE -> bM
    net.minecraft.world.level.block.Block SPAWNER -> bN
    net.minecraft.world.level.block.Block OAK_STAIRS -> bO
    net.minecraft.world.level.block.Block CHEST -> bP
    net.minecraft.world.level.block.Block REDSTONE_WIRE -> bQ
    net.minecraft.world.level.block.Block DIAMOND_ORE -> bR
    net.minecraft.world.level.block.Block DIAMOND_BLOCK -> bS
    net.minecraft.world.level.block.Block CRAFTING_TABLE -> bT
    net.minecraft.world.level.block.Block WHEAT -> bU
    net.minecraft.world.level.block.Block FARMLAND -> bV
    net.minecraft.world.level.block.Block FURNACE -> bW
    net.minecraft.world.level.block.Block OAK_SIGN -> bX
    net.minecraft.world.level.block.Block SPRUCE_SIGN -> bY
    net.minecraft.world.level.block.Block BIRCH_SIGN -> bZ
    net.minecraft.world.level.block.Block ACACIA_SIGN -> ca
    net.minecraft.world.level.block.Block JUNGLE_SIGN -> cb
    net.minecraft.world.level.block.Block DARK_OAK_SIGN -> cc
    net.minecraft.world.level.block.Block OAK_DOOR -> cd
    net.minecraft.world.level.block.Block LADDER -> ce
    net.minecraft.world.level.block.Block RAIL -> cf
    net.minecraft.world.level.block.Block COBBLESTONE_STAIRS -> cg
    net.minecraft.world.level.block.Block OAK_WALL_SIGN -> ch
    net.minecraft.world.level.block.Block SPRUCE_WALL_SIGN -> ci
    net.minecraft.world.level.block.Block BIRCH_WALL_SIGN -> cj
    net.minecraft.world.level.block.Block ACACIA_WALL_SIGN -> ck
    net.minecraft.world.level.block.Block JUNGLE_WALL_SIGN -> cl
    net.minecraft.world.level.block.Block DARK_OAK_WALL_SIGN -> cm
    net.minecraft.world.level.block.Block LEVER -> cn
    net.minecraft.world.level.block.Block STONE_PRESSURE_PLATE -> co
    net.minecraft.world.level.block.Block IRON_DOOR -> cp
    net.minecraft.world.level.block.Block OAK_PRESSURE_PLATE -> cq
    net.minecraft.world.level.block.Block SPRUCE_PRESSURE_PLATE -> cr
    net.minecraft.world.level.block.Block BIRCH_PRESSURE_PLATE -> cs
    net.minecraft.world.level.block.Block JUNGLE_PRESSURE_PLATE -> ct
    net.minecraft.world.level.block.Block ACACIA_PRESSURE_PLATE -> cu
    net.minecraft.world.level.block.Block DARK_OAK_PRESSURE_PLATE -> cv
    net.minecraft.world.level.block.Block REDSTONE_ORE -> cw
    net.minecraft.world.level.block.Block REDSTONE_TORCH -> cx
    net.minecraft.world.level.block.Block REDSTONE_WALL_TORCH -> cy
    net.minecraft.world.level.block.Block STONE_BUTTON -> cz
    net.minecraft.world.level.block.Block SNOW -> cA
    net.minecraft.world.level.block.Block ICE -> cB
    net.minecraft.world.level.block.Block SNOW_BLOCK -> cC
    net.minecraft.world.level.block.Block CACTUS -> cD
    net.minecraft.world.level.block.Block CLAY -> cE
    net.minecraft.world.level.block.Block SUGAR_CANE -> cF
    net.minecraft.world.level.block.Block JUKEBOX -> cG
    net.minecraft.world.level.block.Block OAK_FENCE -> cH
    net.minecraft.world.level.block.Block PUMPKIN -> cI
    net.minecraft.world.level.block.Block NETHERRACK -> cJ
    net.minecraft.world.level.block.Block SOUL_SAND -> cK
    net.minecraft.world.level.block.Block GLOWSTONE -> cL
    net.minecraft.world.level.block.Block NETHER_PORTAL -> cM
    net.minecraft.world.level.block.Block CARVED_PUMPKIN -> cN
    net.minecraft.world.level.block.Block JACK_O_LANTERN -> cO
    net.minecraft.world.level.block.Block CAKE -> cP
    net.minecraft.world.level.block.Block REPEATER -> cQ
    net.minecraft.world.level.block.Block WHITE_STAINED_GLASS -> cR
    net.minecraft.world.level.block.Block ORANGE_STAINED_GLASS -> cS
    net.minecraft.world.level.block.Block MAGENTA_STAINED_GLASS -> cT
    net.minecraft.world.level.block.Block LIGHT_BLUE_STAINED_GLASS -> cU
    net.minecraft.world.level.block.Block YELLOW_STAINED_GLASS -> cV
    net.minecraft.world.level.block.Block LIME_STAINED_GLASS -> cW
    net.minecraft.world.level.block.Block PINK_STAINED_GLASS -> cX
    net.minecraft.world.level.block.Block GRAY_STAINED_GLASS -> cY
    net.minecraft.world.level.block.Block LIGHT_GRAY_STAINED_GLASS -> cZ
    net.minecraft.world.level.block.Block CYAN_STAINED_GLASS -> da
    net.minecraft.world.level.block.Block PURPLE_STAINED_GLASS -> db
    net.minecraft.world.level.block.Block BLUE_STAINED_GLASS -> dc
    net.minecraft.world.level.block.Block BROWN_STAINED_GLASS -> dd
    net.minecraft.world.level.block.Block GREEN_STAINED_GLASS -> de
    net.minecraft.world.level.block.Block RED_STAINED_GLASS -> df
    net.minecraft.world.level.block.Block BLACK_STAINED_GLASS -> dg
    net.minecraft.world.level.block.Block OAK_TRAPDOOR -> dh
    net.minecraft.world.level.block.Block SPRUCE_TRAPDOOR -> di
    net.minecraft.world.level.block.Block BIRCH_TRAPDOOR -> dj
    net.minecraft.world.level.block.Block JUNGLE_TRAPDOOR -> dk
    net.minecraft.world.level.block.Block ACACIA_TRAPDOOR -> dl
    net.minecraft.world.level.block.Block DARK_OAK_TRAPDOOR -> dm
    net.minecraft.world.level.block.Block STONE_BRICKS -> dn
    net.minecraft.world.level.block.Block MOSSY_STONE_BRICKS -> do
    net.minecraft.world.level.block.Block CRACKED_STONE_BRICKS -> dp
    net.minecraft.world.level.block.Block CHISELED_STONE_BRICKS -> dq
    net.minecraft.world.level.block.Block INFESTED_STONE -> dr
    net.minecraft.world.level.block.Block INFESTED_COBBLESTONE -> ds
    net.minecraft.world.level.block.Block INFESTED_STONE_BRICKS -> dt
    net.minecraft.world.level.block.Block INFESTED_MOSSY_STONE_BRICKS -> du
    net.minecraft.world.level.block.Block INFESTED_CRACKED_STONE_BRICKS -> dv
    net.minecraft.world.level.block.Block INFESTED_CHISELED_STONE_BRICKS -> dw
    net.minecraft.world.level.block.Block BROWN_MUSHROOM_BLOCK -> dx
    net.minecraft.world.level.block.Block RED_MUSHROOM_BLOCK -> dy
    net.minecraft.world.level.block.Block MUSHROOM_STEM -> dz
    net.minecraft.world.level.block.Block IRON_BARS -> dA
    net.minecraft.world.level.block.Block GLASS_PANE -> dB
    net.minecraft.world.level.block.Block MELON -> dC
    net.minecraft.world.level.block.Block ATTACHED_PUMPKIN_STEM -> dD
    net.minecraft.world.level.block.Block ATTACHED_MELON_STEM -> dE
    net.minecraft.world.level.block.Block PUMPKIN_STEM -> dF
    net.minecraft.world.level.block.Block MELON_STEM -> dG
    net.minecraft.world.level.block.Block VINE -> dH
    net.minecraft.world.level.block.Block OAK_FENCE_GATE -> dI
    net.minecraft.world.level.block.Block BRICK_STAIRS -> dJ
    net.minecraft.world.level.block.Block STONE_BRICK_STAIRS -> dK
    net.minecraft.world.level.block.Block MYCELIUM -> dL
    net.minecraft.world.level.block.Block LILY_PAD -> dM
    net.minecraft.world.level.block.Block NETHER_BRICKS -> dN
    net.minecraft.world.level.block.Block NETHER_BRICK_FENCE -> dO
    net.minecraft.world.level.block.Block NETHER_BRICK_STAIRS -> dP
    net.minecraft.world.level.block.Block NETHER_WART -> dQ
    net.minecraft.world.level.block.Block ENCHANTING_TABLE -> dR
    net.minecraft.world.level.block.Block BREWING_STAND -> dS
    net.minecraft.world.level.block.Block CAULDRON -> dT
    net.minecraft.world.level.block.Block END_PORTAL -> dU
    net.minecraft.world.level.block.Block END_PORTAL_FRAME -> dV
    net.minecraft.world.level.block.Block END_STONE -> dW
    net.minecraft.world.level.block.Block DRAGON_EGG -> dX
    net.minecraft.world.level.block.Block REDSTONE_LAMP -> dY
    net.minecraft.world.level.block.Block COCOA -> dZ
    net.minecraft.world.level.block.Block SANDSTONE_STAIRS -> ea
    net.minecraft.world.level.block.Block EMERALD_ORE -> eb
    net.minecraft.world.level.block.Block ENDER_CHEST -> ec
    net.minecraft.world.level.block.Block TRIPWIRE_HOOK -> ed
    net.minecraft.world.level.block.Block TRIPWIRE -> ee
    net.minecraft.world.level.block.Block EMERALD_BLOCK -> ef
    net.minecraft.world.level.block.Block SPRUCE_STAIRS -> eg
    net.minecraft.world.level.block.Block BIRCH_STAIRS -> eh
    net.minecraft.world.level.block.Block JUNGLE_STAIRS -> ei
    net.minecraft.world.level.block.Block COMMAND_BLOCK -> ej
    net.minecraft.world.level.block.Block BEACON -> ek
    net.minecraft.world.level.block.Block COBBLESTONE_WALL -> el
    net.minecraft.world.level.block.Block MOSSY_COBBLESTONE_WALL -> em
    net.minecraft.world.level.block.Block FLOWER_POT -> en
    net.minecraft.world.level.block.Block POTTED_OAK_SAPLING -> eo
    net.minecraft.world.level.block.Block POTTED_SPRUCE_SAPLING -> ep
    net.minecraft.world.level.block.Block POTTED_BIRCH_SAPLING -> eq
    net.minecraft.world.level.block.Block POTTED_JUNGLE_SAPLING -> er
    net.minecraft.world.level.block.Block POTTED_ACACIA_SAPLING -> es
    net.minecraft.world.level.block.Block POTTED_DARK_OAK_SAPLING -> et
    net.minecraft.world.level.block.Block POTTED_FERN -> eu
    net.minecraft.world.level.block.Block POTTED_DANDELION -> ev
    net.minecraft.world.level.block.Block POTTED_POPPY -> ew
    net.minecraft.world.level.block.Block POTTED_BLUE_ORCHID -> ex
    net.minecraft.world.level.block.Block POTTED_ALLIUM -> ey
    net.minecraft.world.level.block.Block POTTED_AZURE_BLUET -> ez
    net.minecraft.world.level.block.Block POTTED_RED_TULIP -> eA
    net.minecraft.world.level.block.Block POTTED_ORANGE_TULIP -> eB
    net.minecraft.world.level.block.Block POTTED_WHITE_TULIP -> eC
    net.minecraft.world.level.block.Block POTTED_PINK_TULIP -> eD
    net.minecraft.world.level.block.Block POTTED_OXEYE_DAISY -> eE
    net.minecraft.world.level.block.Block POTTED_CORNFLOWER -> eF
    net.minecraft.world.level.block.Block POTTED_LILY_OF_THE_VALLEY -> eG
    net.minecraft.world.level.block.Block POTTED_WITHER_ROSE -> eH
    net.minecraft.world.level.block.Block POTTED_RED_MUSHROOM -> eI
    net.minecraft.world.level.block.Block POTTED_BROWN_MUSHROOM -> eJ
    net.minecraft.world.level.block.Block POTTED_DEAD_BUSH -> eK
    net.minecraft.world.level.block.Block POTTED_CACTUS -> eL
    net.minecraft.world.level.block.Block CARROTS -> eM
    net.minecraft.world.level.block.Block POTATOES -> eN
    net.minecraft.world.level.block.Block OAK_BUTTON -> eO
    net.minecraft.world.level.block.Block SPRUCE_BUTTON -> eP
    net.minecraft.world.level.block.Block BIRCH_BUTTON -> eQ
    net.minecraft.world.level.block.Block JUNGLE_BUTTON -> eR
    net.minecraft.world.level.block.Block ACACIA_BUTTON -> eS
    net.minecraft.world.level.block.Block DARK_OAK_BUTTON -> eT
    net.minecraft.world.level.block.Block SKELETON_SKULL -> eU
    net.minecraft.world.level.block.Block SKELETON_WALL_SKULL -> eV
    net.minecraft.world.level.block.Block WITHER_SKELETON_SKULL -> eW
    net.minecraft.world.level.block.Block WITHER_SKELETON_WALL_SKULL -> eX
    net.minecraft.world.level.block.Block ZOMBIE_HEAD -> eY
    net.minecraft.world.level.block.Block ZOMBIE_WALL_HEAD -> eZ
    net.minecraft.world.level.block.Block PLAYER_HEAD -> fa
    net.minecraft.world.level.block.Block PLAYER_WALL_HEAD -> fb
    net.minecraft.world.level.block.Block CREEPER_HEAD -> fc
    net.minecraft.world.level.block.Block CREEPER_WALL_HEAD -> fd
    net.minecraft.world.level.block.Block DRAGON_HEAD -> fe
    net.minecraft.world.level.block.Block DRAGON_WALL_HEAD -> ff
    net.minecraft.world.level.block.Block ANVIL -> fg
    net.minecraft.world.level.block.Block CHIPPED_ANVIL -> fh
    net.minecraft.world.level.block.Block DAMAGED_ANVIL -> fi
    net.minecraft.world.level.block.Block TRAPPED_CHEST -> fj
    net.minecraft.world.level.block.Block LIGHT_WEIGHTED_PRESSURE_PLATE -> fk
    net.minecraft.world.level.block.Block HEAVY_WEIGHTED_PRESSURE_PLATE -> fl
    net.minecraft.world.level.block.Block COMPARATOR -> fm
    net.minecraft.world.level.block.Block DAYLIGHT_DETECTOR -> fn
    net.minecraft.world.level.block.Block REDSTONE_BLOCK -> fo
    net.minecraft.world.level.block.Block NETHER_QUARTZ_ORE -> fp
    net.minecraft.world.level.block.Block HOPPER -> fq
    net.minecraft.world.level.block.Block QUARTZ_BLOCK -> fr
    net.minecraft.world.level.block.Block CHISELED_QUARTZ_BLOCK -> fs
    net.minecraft.world.level.block.Block QUARTZ_PILLAR -> ft
    net.minecraft.world.level.block.Block QUARTZ_STAIRS -> fu
    net.minecraft.world.level.block.Block ACTIVATOR_RAIL -> fv
    net.minecraft.world.level.block.Block DROPPER -> fw
    net.minecraft.world.level.block.Block WHITE_TERRACOTTA -> fx
    net.minecraft.world.level.block.Block ORANGE_TERRACOTTA -> fy
    net.minecraft.world.level.block.Block MAGENTA_TERRACOTTA -> fz
    net.minecraft.world.level.block.Block LIGHT_BLUE_TERRACOTTA -> fA
    net.minecraft.world.level.block.Block YELLOW_TERRACOTTA -> fB
    net.minecraft.world.level.block.Block LIME_TERRACOTTA -> fC
    net.minecraft.world.level.block.Block PINK_TERRACOTTA -> fD
    net.minecraft.world.level.block.Block GRAY_TERRACOTTA -> fE
    net.minecraft.world.level.block.Block LIGHT_GRAY_TERRACOTTA -> fF
    net.minecraft.world.level.block.Block CYAN_TERRACOTTA -> fG
    net.minecraft.world.level.block.Block PURPLE_TERRACOTTA -> fH
    net.minecraft.world.level.block.Block BLUE_TERRACOTTA -> fI
    net.minecraft.world.level.block.Block BROWN_TERRACOTTA -> fJ
    net.minecraft.world.level.block.Block GREEN_TERRACOTTA -> fK
    net.minecraft.world.level.block.Block RED_TERRACOTTA -> fL
    net.minecraft.world.level.block.Block BLACK_TERRACOTTA -> fM
    net.minecraft.world.level.block.Block WHITE_STAINED_GLASS_PANE -> fN
    net.minecraft.world.level.block.Block ORANGE_STAINED_GLASS_PANE -> fO
    net.minecraft.world.level.block.Block MAGENTA_STAINED_GLASS_PANE -> fP
    net.minecraft.world.level.block.Block LIGHT_BLUE_STAINED_GLASS_PANE -> fQ
    net.minecraft.world.level.block.Block YELLOW_STAINED_GLASS_PANE -> fR
    net.minecraft.world.level.block.Block LIME_STAINED_GLASS_PANE -> fS
    net.minecraft.world.level.block.Block PINK_STAINED_GLASS_PANE -> fT
    net.minecraft.world.level.block.Block GRAY_STAINED_GLASS_PANE -> fU
    net.minecraft.world.level.block.Block LIGHT_GRAY_STAINED_GLASS_PANE -> fV
    net.minecraft.world.level.block.Block CYAN_STAINED_GLASS_PANE -> fW
    net.minecraft.world.level.block.Block PURPLE_STAINED_GLASS_PANE -> fX
    net.minecraft.world.level.block.Block BLUE_STAINED_GLASS_PANE -> fY
    net.minecraft.world.level.block.Block BROWN_STAINED_GLASS_PANE -> fZ
    net.minecraft.world.level.block.Block GREEN_STAINED_GLASS_PANE -> ga
    net.minecraft.world.level.block.Block RED_STAINED_GLASS_PANE -> gb
    net.minecraft.world.level.block.Block BLACK_STAINED_GLASS_PANE -> gc
    net.minecraft.world.level.block.Block ACACIA_STAIRS -> gd
    net.minecraft.world.level.block.Block DARK_OAK_STAIRS -> ge
    net.minecraft.world.level.block.Block SLIME_BLOCK -> gf
    net.minecraft.world.level.block.Block BARRIER -> gg
    net.minecraft.world.level.block.Block IRON_TRAPDOOR -> gh
    net.minecraft.world.level.block.Block PRISMARINE -> gi
    net.minecraft.world.level.block.Block PRISMARINE_BRICKS -> gj
    net.minecraft.world.level.block.Block DARK_PRISMARINE -> gk
    net.minecraft.world.level.block.Block PRISMARINE_STAIRS -> gl
    net.minecraft.world.level.block.Block PRISMARINE_BRICK_STAIRS -> gm
    net.minecraft.world.level.block.Block DARK_PRISMARINE_STAIRS -> gn
    net.minecraft.world.level.block.Block PRISMARINE_SLAB -> go
    net.minecraft.world.level.block.Block PRISMARINE_BRICK_SLAB -> gp
    net.minecraft.world.level.block.Block DARK_PRISMARINE_SLAB -> gq
    net.minecraft.world.level.block.Block SEA_LANTERN -> gr
    net.minecraft.world.level.block.Block HAY_BLOCK -> gs
    net.minecraft.world.level.block.Block WHITE_CARPET -> gt
    net.minecraft.world.level.block.Block ORANGE_CARPET -> gu
    net.minecraft.world.level.block.Block MAGENTA_CARPET -> gv
    net.minecraft.world.level.block.Block LIGHT_BLUE_CARPET -> gw
    net.minecraft.world.level.block.Block YELLOW_CARPET -> gx
    net.minecraft.world.level.block.Block LIME_CARPET -> gy
    net.minecraft.world.level.block.Block PINK_CARPET -> gz
    net.minecraft.world.level.block.Block GRAY_CARPET -> gA
    net.minecraft.world.level.block.Block LIGHT_GRAY_CARPET -> gB
    net.minecraft.world.level.block.Block CYAN_CARPET -> gC
    net.minecraft.world.level.block.Block PURPLE_CARPET -> gD
    net.minecraft.world.level.block.Block BLUE_CARPET -> gE
    net.minecraft.world.level.block.Block BROWN_CARPET -> gF
    net.minecraft.world.level.block.Block GREEN_CARPET -> gG
    net.minecraft.world.level.block.Block RED_CARPET -> gH
    net.minecraft.world.level.block.Block BLACK_CARPET -> gI
    net.minecraft.world.level.block.Block TERRACOTTA -> gJ
    net.minecraft.world.level.block.Block COAL_BLOCK -> gK
    net.minecraft.world.level.block.Block PACKED_ICE -> gL
    net.minecraft.world.level.block.Block SUNFLOWER -> gM
    net.minecraft.world.level.block.Block LILAC -> gN
    net.minecraft.world.level.block.Block ROSE_BUSH -> gO
    net.minecraft.world.level.block.Block PEONY -> gP
    net.minecraft.world.level.block.Block TALL_GRASS -> gQ
    net.minecraft.world.level.block.Block LARGE_FERN -> gR
    net.minecraft.world.level.block.Block WHITE_BANNER -> gS
    net.minecraft.world.level.block.Block ORANGE_BANNER -> gT
    net.minecraft.world.level.block.Block MAGENTA_BANNER -> gU
    net.minecraft.world.level.block.Block LIGHT_BLUE_BANNER -> gV
    net.minecraft.world.level.block.Block YELLOW_BANNER -> gW
    net.minecraft.world.level.block.Block LIME_BANNER -> gX
    net.minecraft.world.level.block.Block PINK_BANNER -> gY
    net.minecraft.world.level.block.Block GRAY_BANNER -> gZ
    net.minecraft.world.level.block.Block LIGHT_GRAY_BANNER -> ha
    net.minecraft.world.level.block.Block CYAN_BANNER -> hb
    net.minecraft.world.level.block.Block PURPLE_BANNER -> hc
    net.minecraft.world.level.block.Block BLUE_BANNER -> hd
    net.minecraft.world.level.block.Block BROWN_BANNER -> he
    net.minecraft.world.level.block.Block GREEN_BANNER -> hf
    net.minecraft.world.level.block.Block RED_BANNER -> hg
    net.minecraft.world.level.block.Block BLACK_BANNER -> hh
    net.minecraft.world.level.block.Block WHITE_WALL_BANNER -> hi
    net.minecraft.world.level.block.Block ORANGE_WALL_BANNER -> hj
    net.minecraft.world.level.block.Block MAGENTA_WALL_BANNER -> hk
    net.minecraft.world.level.block.Block LIGHT_BLUE_WALL_BANNER -> hl
    net.minecraft.world.level.block.Block YELLOW_WALL_BANNER -> hm
    net.minecraft.world.level.block.Block LIME_WALL_BANNER -> hn
    net.minecraft.world.level.block.Block PINK_WALL_BANNER -> ho
    net.minecraft.world.level.block.Block GRAY_WALL_BANNER -> hp
    net.minecraft.world.level.block.Block LIGHT_GRAY_WALL_BANNER -> hq
    net.minecraft.world.level.block.Block CYAN_WALL_BANNER -> hr
    net.minecraft.world.level.block.Block PURPLE_WALL_BANNER -> hs
    net.minecraft.world.level.block.Block BLUE_WALL_BANNER -> ht
    net.minecraft.world.level.block.Block BROWN_WALL_BANNER -> hu
    net.minecraft.world.level.block.Block GREEN_WALL_BANNER -> hv
    net.minecraft.world.level.block.Block RED_WALL_BANNER -> hw
    net.minecraft.world.level.block.Block BLACK_WALL_BANNER -> hx
    net.minecraft.world.level.block.Block RED_SANDSTONE -> hy
    net.minecraft.world.level.block.Block CHISELED_RED_SANDSTONE -> hz
    net.minecraft.world.level.block.Block CUT_RED_SANDSTONE -> hA
    net.minecraft.world.level.block.Block RED_SANDSTONE_STAIRS -> hB
    net.minecraft.world.level.block.Block OAK_SLAB -> hC
    net.minecraft.world.level.block.Block SPRUCE_SLAB -> hD
    net.minecraft.world.level.block.Block BIRCH_SLAB -> hE
    net.minecraft.world.level.block.Block JUNGLE_SLAB -> hF
    net.minecraft.world.level.block.Block ACACIA_SLAB -> hG
    net.minecraft.world.level.block.Block DARK_OAK_SLAB -> hH
    net.minecraft.world.level.block.Block STONE_SLAB -> hI
    net.minecraft.world.level.block.Block SMOOTH_STONE_SLAB -> hJ
    net.minecraft.world.level.block.Block SANDSTONE_SLAB -> hK
    net.minecraft.world.level.block.Block CUT_SANDSTONE_SLAB -> hL
    net.minecraft.world.level.block.Block PETRIFIED_OAK_SLAB -> hM
    net.minecraft.world.level.block.Block COBBLESTONE_SLAB -> hN
    net.minecraft.world.level.block.Block BRICK_SLAB -> hO
    net.minecraft.world.level.block.Block STONE_BRICK_SLAB -> hP
    net.minecraft.world.level.block.Block NETHER_BRICK_SLAB -> hQ
    net.minecraft.world.level.block.Block QUARTZ_SLAB -> hR
    net.minecraft.world.level.block.Block RED_SANDSTONE_SLAB -> hS
    net.minecraft.world.level.block.Block CUT_RED_SANDSTONE_SLAB -> hT
    net.minecraft.world.level.block.Block PURPUR_SLAB -> hU
    net.minecraft.world.level.block.Block SMOOTH_STONE -> hV
    net.minecraft.world.level.block.Block SMOOTH_SANDSTONE -> hW
    net.minecraft.world.level.block.Block SMOOTH_QUARTZ -> hX
    net.minecraft.world.level.block.Block SMOOTH_RED_SANDSTONE -> hY
    net.minecraft.world.level.block.Block SPRUCE_FENCE_GATE -> hZ
    net.minecraft.world.level.block.Block BIRCH_FENCE_GATE -> ia
    net.minecraft.world.level.block.Block JUNGLE_FENCE_GATE -> ib
    net.minecraft.world.level.block.Block ACACIA_FENCE_GATE -> ic
    net.minecraft.world.level.block.Block DARK_OAK_FENCE_GATE -> id
    net.minecraft.world.level.block.Block SPRUCE_FENCE -> ie
    net.minecraft.world.level.block.Block BIRCH_FENCE -> if
    net.minecraft.world.level.block.Block JUNGLE_FENCE -> ig
    net.minecraft.world.level.block.Block ACACIA_FENCE -> ih
    net.minecraft.world.level.block.Block DARK_OAK_FENCE -> ii
    net.minecraft.world.level.block.Block SPRUCE_DOOR -> ij
    net.minecraft.world.level.block.Block BIRCH_DOOR -> ik
    net.minecraft.world.level.block.Block JUNGLE_DOOR -> il
    net.minecraft.world.level.block.Block ACACIA_DOOR -> im
    net.minecraft.world.level.block.Block DARK_OAK_DOOR -> in
    net.minecraft.world.level.block.Block END_ROD -> io
    net.minecraft.world.level.block.Block CHORUS_PLANT -> ip
    net.minecraft.world.level.block.Block CHORUS_FLOWER -> iq
    net.minecraft.world.level.block.Block PURPUR_BLOCK -> ir
    net.minecraft.world.level.block.Block PURPUR_PILLAR -> is
    net.minecraft.world.level.block.Block PURPUR_STAIRS -> it
    net.minecraft.world.level.block.Block END_STONE_BRICKS -> iu
    net.minecraft.world.level.block.Block BEETROOTS -> iv
    net.minecraft.world.level.block.Block GRASS_PATH -> iw
    net.minecraft.world.level.block.Block END_GATEWAY -> ix
    net.minecraft.world.level.block.Block REPEATING_COMMAND_BLOCK -> iy
    net.minecraft.world.level.block.Block CHAIN_COMMAND_BLOCK -> iz
    net.minecraft.world.level.block.Block FROSTED_ICE -> iA
    net.minecraft.world.level.block.Block MAGMA_BLOCK -> iB
    net.minecraft.world.level.block.Block NETHER_WART_BLOCK -> iC
    net.minecraft.world.level.block.Block RED_NETHER_BRICKS -> iD
    net.minecraft.world.level.block.Block BONE_BLOCK -> iE
    net.minecraft.world.level.block.Block STRUCTURE_VOID -> iF
    net.minecraft.world.level.block.Block OBSERVER -> iG
    net.minecraft.world.level.block.Block SHULKER_BOX -> iH
    net.minecraft.world.level.block.Block WHITE_SHULKER_BOX -> iI
    net.minecraft.world.level.block.Block ORANGE_SHULKER_BOX -> iJ
    net.minecraft.world.level.block.Block MAGENTA_SHULKER_BOX -> iK
    net.minecraft.world.level.block.Block LIGHT_BLUE_SHULKER_BOX -> iL
    net.minecraft.world.level.block.Block YELLOW_SHULKER_BOX -> iM
    net.minecraft.world.level.block.Block LIME_SHULKER_BOX -> iN
    net.minecraft.world.level.block.Block PINK_SHULKER_BOX -> iO
    net.minecraft.world.level.block.Block GRAY_SHULKER_BOX -> iP
    net.minecraft.world.level.block.Block LIGHT_GRAY_SHULKER_BOX -> iQ
    net.minecraft.world.level.block.Block CYAN_SHULKER_BOX -> iR
    net.minecraft.world.level.block.Block PURPLE_SHULKER_BOX -> iS
    net.minecraft.world.level.block.Block BLUE_SHULKER_BOX -> iT
    net.minecraft.world.level.block.Block BROWN_SHULKER_BOX -> iU
    net.minecraft.world.level.block.Block GREEN_SHULKER_BOX -> iV
    net.minecraft.world.level.block.Block RED_SHULKER_BOX -> iW
    net.minecraft.world.level.block.Block BLACK_SHULKER_BOX -> iX
    net.minecraft.world.level.block.Block WHITE_GLAZED_TERRACOTTA -> iY
    net.minecraft.world.level.block.Block ORANGE_GLAZED_TERRACOTTA -> iZ
    net.minecraft.world.level.block.Block MAGENTA_GLAZED_TERRACOTTA -> ja
    net.minecraft.world.level.block.Block LIGHT_BLUE_GLAZED_TERRACOTTA -> jb
    net.minecraft.world.level.block.Block YELLOW_GLAZED_TERRACOTTA -> jc
    net.minecraft.world.level.block.Block LIME_GLAZED_TERRACOTTA -> jd
    net.minecraft.world.level.block.Block PINK_GLAZED_TERRACOTTA -> je
    net.minecraft.world.level.block.Block GRAY_GLAZED_TERRACOTTA -> jf
    net.minecraft.world.level.block.Block LIGHT_GRAY_GLAZED_TERRACOTTA -> jg
    net.minecraft.world.level.block.Block CYAN_GLAZED_TERRACOTTA -> jh
    net.minecraft.world.level.block.Block PURPLE_GLAZED_TERRACOTTA -> ji
    net.minecraft.world.level.block.Block BLUE_GLAZED_TERRACOTTA -> jj
    net.minecraft.world.level.block.Block BROWN_GLAZED_TERRACOTTA -> jk
    net.minecraft.world.level.block.Block GREEN_GLAZED_TERRACOTTA -> jl
    net.minecraft.world.level.block.Block RED_GLAZED_TERRACOTTA -> jm
    net.minecraft.world.level.block.Block BLACK_GLAZED_TERRACOTTA -> jn
    net.minecraft.world.level.block.Block WHITE_CONCRETE -> jo
    net.minecraft.world.level.block.Block ORANGE_CONCRETE -> jp
    net.minecraft.world.level.block.Block MAGENTA_CONCRETE -> jq
    net.minecraft.world.level.block.Block LIGHT_BLUE_CONCRETE -> jr
    net.minecraft.world.level.block.Block YELLOW_CONCRETE -> js
    net.minecraft.world.level.block.Block LIME_CONCRETE -> jt
    net.minecraft.world.level.block.Block PINK_CONCRETE -> ju
    net.minecraft.world.level.block.Block GRAY_CONCRETE -> jv
    net.minecraft.world.level.block.Block LIGHT_GRAY_CONCRETE -> jw
    net.minecraft.world.level.block.Block CYAN_CONCRETE -> jx
    net.minecraft.world.level.block.Block PURPLE_CONCRETE -> jy
    net.minecraft.world.level.block.Block BLUE_CONCRETE -> jz
    net.minecraft.world.level.block.Block BROWN_CONCRETE -> jA
    net.minecraft.world.level.block.Block GREEN_CONCRETE -> jB
    net.minecraft.world.level.block.Block RED_CONCRETE -> jC
    net.minecraft.world.level.block.Block BLACK_CONCRETE -> jD
    net.minecraft.world.level.block.Block WHITE_CONCRETE_POWDER -> jE
    net.minecraft.world.level.block.Block ORANGE_CONCRETE_POWDER -> jF
    net.minecraft.world.level.block.Block MAGENTA_CONCRETE_POWDER -> jG
    net.minecraft.world.level.block.Block LIGHT_BLUE_CONCRETE_POWDER -> jH
    net.minecraft.world.level.block.Block YELLOW_CONCRETE_POWDER -> jI
    net.minecraft.world.level.block.Block LIME_CONCRETE_POWDER -> jJ
    net.minecraft.world.level.block.Block PINK_CONCRETE_POWDER -> jK
    net.minecraft.world.level.block.Block GRAY_CONCRETE_POWDER -> jL
    net.minecraft.world.level.block.Block LIGHT_GRAY_CONCRETE_POWDER -> jM
    net.minecraft.world.level.block.Block CYAN_CONCRETE_POWDER -> jN
    net.minecraft.world.level.block.Block PURPLE_CONCRETE_POWDER -> jO
    net.minecraft.world.level.block.Block BLUE_CONCRETE_POWDER -> jP
    net.minecraft.world.level.block.Block BROWN_CONCRETE_POWDER -> jQ
    net.minecraft.world.level.block.Block GREEN_CONCRETE_POWDER -> jR
    net.minecraft.world.level.block.Block RED_CONCRETE_POWDER -> jS
    net.minecraft.world.level.block.Block BLACK_CONCRETE_POWDER -> jT
    net.minecraft.world.level.block.Block KELP -> jU
    net.minecraft.world.level.block.Block KELP_PLANT -> jV
    net.minecraft.world.level.block.Block DRIED_KELP_BLOCK -> jW
    net.minecraft.world.level.block.Block TURTLE_EGG -> jX
    net.minecraft.world.level.block.Block DEAD_TUBE_CORAL_BLOCK -> jY
    net.minecraft.world.level.block.Block DEAD_BRAIN_CORAL_BLOCK -> jZ
    net.minecraft.world.level.block.Block DEAD_BUBBLE_CORAL_BLOCK -> ka
    net.minecraft.world.level.block.Block DEAD_FIRE_CORAL_BLOCK -> kb
    net.minecraft.world.level.block.Block DEAD_HORN_CORAL_BLOCK -> kc
    net.minecraft.world.level.block.Block TUBE_CORAL_BLOCK -> kd
    net.minecraft.world.level.block.Block BRAIN_CORAL_BLOCK -> ke
    net.minecraft.world.level.block.Block BUBBLE_CORAL_BLOCK -> kf
    net.minecraft.world.level.block.Block FIRE_CORAL_BLOCK -> kg
    net.minecraft.world.level.block.Block HORN_CORAL_BLOCK -> kh
    net.minecraft.world.level.block.Block DEAD_TUBE_CORAL -> ki
    net.minecraft.world.level.block.Block DEAD_BRAIN_CORAL -> kj
    net.minecraft.world.level.block.Block DEAD_BUBBLE_CORAL -> kk
    net.minecraft.world.level.block.Block DEAD_FIRE_CORAL -> kl
    net.minecraft.world.level.block.Block DEAD_HORN_CORAL -> km
    net.minecraft.world.level.block.Block TUBE_CORAL -> kn
    net.minecraft.world.level.block.Block BRAIN_CORAL -> ko
    net.minecraft.world.level.block.Block BUBBLE_CORAL -> kp
    net.minecraft.world.level.block.Block FIRE_CORAL -> kq
    net.minecraft.world.level.block.Block HORN_CORAL -> kr
    net.minecraft.world.level.block.Block DEAD_TUBE_CORAL_FAN -> ks
    net.minecraft.world.level.block.Block DEAD_BRAIN_CORAL_FAN -> kt
    net.minecraft.world.level.block.Block DEAD_BUBBLE_CORAL_FAN -> ku
    net.minecraft.world.level.block.Block DEAD_FIRE_CORAL_FAN -> kv
    net.minecraft.world.level.block.Block DEAD_HORN_CORAL_FAN -> kw
    net.minecraft.world.level.block.Block TUBE_CORAL_FAN -> kx
    net.minecraft.world.level.block.Block BRAIN_CORAL_FAN -> ky
    net.minecraft.world.level.block.Block BUBBLE_CORAL_FAN -> kz
    net.minecraft.world.level.block.Block FIRE_CORAL_FAN -> kA
    net.minecraft.world.level.block.Block HORN_CORAL_FAN -> kB
    net.minecraft.world.level.block.Block DEAD_TUBE_CORAL_WALL_FAN -> kC
    net.minecraft.world.level.block.Block DEAD_BRAIN_CORAL_WALL_FAN -> kD
    net.minecraft.world.level.block.Block DEAD_BUBBLE_CORAL_WALL_FAN -> kE
    net.minecraft.world.level.block.Block DEAD_FIRE_CORAL_WALL_FAN -> kF
    net.minecraft.world.level.block.Block DEAD_HORN_CORAL_WALL_FAN -> kG
    net.minecraft.world.level.block.Block TUBE_CORAL_WALL_FAN -> kH
    net.minecraft.world.level.block.Block BRAIN_CORAL_WALL_FAN -> kI
    net.minecraft.world.level.block.Block BUBBLE_CORAL_WALL_FAN -> kJ
    net.minecraft.world.level.block.Block FIRE_CORAL_WALL_FAN -> kK
    net.minecraft.world.level.block.Block HORN_CORAL_WALL_FAN -> kL
    net.minecraft.world.level.block.Block SEA_PICKLE -> kM
    net.minecraft.world.level.block.Block BLUE_ICE -> kN
    net.minecraft.world.level.block.Block CONDUIT -> kO
    net.minecraft.world.level.block.Block BAMBOO_SAPLING -> kP
    net.minecraft.world.level.block.Block BAMBOO -> kQ
    net.minecraft.world.level.block.Block POTTED_BAMBOO -> kR
    net.minecraft.world.level.block.Block VOID_AIR -> kS
    net.minecraft.world.level.block.Block CAVE_AIR -> kT
    net.minecraft.world.level.block.Block BUBBLE_COLUMN -> kU
    net.minecraft.world.level.block.Block POLISHED_GRANITE_STAIRS -> kV
    net.minecraft.world.level.block.Block SMOOTH_RED_SANDSTONE_STAIRS -> kW
    net.minecraft.world.level.block.Block MOSSY_STONE_BRICK_STAIRS -> kX
    net.minecraft.world.level.block.Block POLISHED_DIORITE_STAIRS -> kY
    net.minecraft.world.level.block.Block MOSSY_COBBLESTONE_STAIRS -> kZ
    net.minecraft.world.level.block.Block END_STONE_BRICK_STAIRS -> la
    net.minecraft.world.level.block.Block STONE_STAIRS -> lb
    net.minecraft.world.level.block.Block SMOOTH_SANDSTONE_STAIRS -> lc
    net.minecraft.world.level.block.Block SMOOTH_QUARTZ_STAIRS -> ld
    net.minecraft.world.level.block.Block GRANITE_STAIRS -> le
    net.minecraft.world.level.block.Block ANDESITE_STAIRS -> lf
    net.minecraft.world.level.block.Block RED_NETHER_BRICK_STAIRS -> lg
    net.minecraft.world.level.block.Block POLISHED_ANDESITE_STAIRS -> lh
    net.minecraft.world.level.block.Block DIORITE_STAIRS -> li
    net.minecraft.world.level.block.Block POLISHED_GRANITE_SLAB -> lj
    net.minecraft.world.level.block.Block SMOOTH_RED_SANDSTONE_SLAB -> lk
    net.minecraft.world.level.block.Block MOSSY_STONE_BRICK_SLAB -> ll
    net.minecraft.world.level.block.Block POLISHED_DIORITE_SLAB -> lm
    net.minecraft.world.level.block.Block MOSSY_COBBLESTONE_SLAB -> ln
    net.minecraft.world.level.block.Block END_STONE_BRICK_SLAB -> lo
    net.minecraft.world.level.block.Block SMOOTH_SANDSTONE_SLAB -> lp
    net.minecraft.world.level.block.Block SMOOTH_QUARTZ_SLAB -> lq
    net.minecraft.world.level.block.Block GRANITE_SLAB -> lr
    net.minecraft.world.level.block.Block ANDESITE_SLAB -> ls
    net.minecraft.world.level.block.Block RED_NETHER_BRICK_SLAB -> lt
    net.minecraft.world.level.block.Block POLISHED_ANDESITE_SLAB -> lu
    net.minecraft.world.level.block.Block DIORITE_SLAB -> lv
    net.minecraft.world.level.block.Block BRICK_WALL -> lw
    net.minecraft.world.level.block.Block PRISMARINE_WALL -> lx
    net.minecraft.world.level.block.Block RED_SANDSTONE_WALL -> ly
    net.minecraft.world.level.block.Block MOSSY_STONE_BRICK_WALL -> lz
    net.minecraft.world.level.block.Block GRANITE_WALL -> lA
    net.minecraft.world.level.block.Block STONE_BRICK_WALL -> lB
    net.minecraft.world.level.block.Block NETHER_BRICK_WALL -> lC
    net.minecraft.world.level.block.Block ANDESITE_WALL -> lD
    net.minecraft.world.level.block.Block RED_NETHER_BRICK_WALL -> lE
    net.minecraft.world.level.block.Block SANDSTONE_WALL -> lF
    net.minecraft.world.level.block.Block END_STONE_BRICK_WALL -> lG
    net.minecraft.world.level.block.Block DIORITE_WALL -> lH
    net.minecraft.world.level.block.Block SCAFFOLDING -> lI
    net.minecraft.world.level.block.Block LOOM -> lJ
    net.minecraft.world.level.block.Block BARREL -> lK
    net.minecraft.world.level.block.Block SMOKER -> lL
    net.minecraft.world.level.block.Block BLAST_FURNACE -> lM
    net.minecraft.world.level.block.Block CARTOGRAPHY_TABLE -> lN
    net.minecraft.world.level.block.Block FLETCHING_TABLE -> lO
    net.minecraft.world.level.block.Block GRINDSTONE -> lP
    net.minecraft.world.level.block.Block LECTERN -> lQ
    net.minecraft.world.level.block.Block SMITHING_TABLE -> lR
    net.minecraft.world.level.block.Block STONECUTTER -> lS
    net.minecraft.world.level.block.Block BELL -> lT
    net.minecraft.world.level.block.Block LANTERN -> lU
    net.minecraft.world.level.block.Block CAMPFIRE -> lV
    net.minecraft.world.level.block.Block SWEET_BERRY_BUSH -> lW
    net.minecraft.world.level.block.Block STRUCTURE_BLOCK -> lX
    net.minecraft.world.level.block.Block JIGSAW -> lY
    net.minecraft.world.level.block.Block COMPOSTER -> lZ
    net.minecraft.world.level.block.Block BEE_NEST -> ma
    net.minecraft.world.level.block.Block BEEHIVE -> mb
    net.minecraft.world.level.block.Block HONEY_BLOCK -> mc
    net.minecraft.world.level.block.Block HONEYCOMB_BLOCK -> md
    23:23:void <init>() -> <init>
    714:714:net.minecraft.world.level.block.Block register(java.lang.String,net.minecraft.world.level.block.Block) -> a
    169:169:net.minecraft.world.level.block.entity.BlockEntityType lambda$static$0() -> a
    24:725:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BonemealableBlock -> bpj:
    boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.level.block.BrewingStandBlock -> bpk:
    net.minecraft.world.level.block.state.properties.BooleanProperty[] HAS_BOTTLE -> a
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    42:44:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    48:48:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    53:53:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    58:58:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    63:73:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    78:84:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    88:93:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    97:105:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    109:109:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    114:114:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    119:120:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    124:124:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    30:38:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BubbleColumnBlock -> bpl:
    net.minecraft.world.level.block.state.properties.BooleanProperty DRAG_DOWN -> a
    31:33:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    37:51:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    55:56:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    60:61:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    65:65:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    69:72:void growColumn(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,boolean) -> a
    75:76:boolean canExistIn(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    80:87:boolean getDrag(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    92:92:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    97:113:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    117:128:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    133:135:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    140:140:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    145:145:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    150:151:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    155:156:net.minecraft.world.level.material.Fluid takeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    28:28:void <clinit>() -> <clinit>
net.minecraft.world.level.block.BucketPickup -> bpm:
    net.minecraft.world.level.material.Fluid takeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
net.minecraft.world.level.block.BushBlock -> bpn:
    13:14:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    17:18:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    23:26:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    31:32:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    37:37:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    42:45:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
net.minecraft.world.level.block.ButtonBlock -> bpo:
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> a
    net.minecraft.world.phys.shapes.VoxelShape CEILING_AABB_X -> b
    net.minecraft.world.phys.shapes.VoxelShape CEILING_AABB_Z -> c
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_AABB_X -> d
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_AABB_Z -> e
    net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> f
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> g
    net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> h
    net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> i
    net.minecraft.world.phys.shapes.VoxelShape PRESSED_CEILING_AABB_X -> j
    net.minecraft.world.phys.shapes.VoxelShape PRESSED_CEILING_AABB_Z -> k
    net.minecraft.world.phys.shapes.VoxelShape PRESSED_FLOOR_AABB_X -> w
    net.minecraft.world.phys.shapes.VoxelShape PRESSED_FLOOR_AABB_Z -> x
    net.minecraft.world.phys.shapes.VoxelShape PRESSED_NORTH_AABB -> y
    net.minecraft.world.phys.shapes.VoxelShape PRESSED_SOUTH_AABB -> z
    net.minecraft.world.phys.shapes.VoxelShape PRESSED_WEST_AABB -> A
    net.minecraft.world.phys.shapes.VoxelShape PRESSED_EAST_AABB -> B
    boolean sensitive -> D
    62:65:void <init>(boolean,net.minecraft.world.level.block.Block$Properties) -> <init>
    69:69:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    74:101:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    108:113:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    117:120:void press(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> d
    123:124:void playSound(net.minecraft.world.entity.player.Player,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,boolean) -> a
    net.minecraft.sounds.SoundEvent getSound(boolean) -> a
    130:137:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    141:141:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    146:149:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    154:154:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    159:172:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    176:181:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    184:197:void checkPressed(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> e
    201:203:void updateNeighbours(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> f
    207:208:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    32:56:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ButtonBlock$1 -> bpo$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$AttachFace -> b
    77:85:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CactusBlock -> bpp:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    net.minecraft.world.phys.shapes.VoxelShape COLLISION_SHAPE -> b
    net.minecraft.world.phys.shapes.VoxelShape OUTLINE_SHAPE -> c
    32:34:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    38:67:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    71:71:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    76:76:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    81:85:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    90:100:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    105:106:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    110:111:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    115:115:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    25:29:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CakeBlock -> bpq:
    net.minecraft.world.level.block.state.properties.IntegerProperty BITES -> a
    net.minecraft.world.phys.shapes.VoxelShape[] SHAPE_BY_BITE -> b
    41:43:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    47:47:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    52:61:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    65:78:net.minecraft.world.InteractionResult eat(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player) -> a
    83:87:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    92:92:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    97:98:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    102:102:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    107:107:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    112:112:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    26:37:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CampfireBlock -> bpr:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty LIT -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty SIGNAL_FIRE -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> d
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> e
    net.minecraft.world.phys.shapes.VoxelShape VIRTUAL_FENCE_POST -> f
    58:60:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    64:79:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    84:89:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    93:103:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    108:115:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    120:127:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    131:131:boolean isSmokeSource(net.minecraft.world.level.block.state.BlockState) -> h
    136:136:int getLightEmission(net.minecraft.world.level.block.state.BlockState) -> a
    141:141:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    146:146:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    151:164:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    168:189:boolean placeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState) -> a
    194:200:net.minecraft.world.entity.Entity getShooter(net.minecraft.world.entity.Entity) -> a
    205:216:void onProjectileHit(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.BlockHitResult,net.minecraft.world.entity.Entity) -> a
    219:236:void makeParticles(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean,boolean) -> a
    245:260:boolean isSmokeyPos(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int) -> b
    264:264:boolean isLitCampfire(net.minecraft.world.level.block.state.BlockState) -> i
    269:272:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    277:277:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    282:282:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    287:288:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    292:292:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    297:297:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    48:55:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CarrotBlock -> bps:
    net.minecraft.world.phys.shapes.VoxelShape[] SHAPE_BY_AGE -> a
    24:25:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    29:29:net.minecraft.world.level.ItemLike getBaseSeedId() -> e
    34:34:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    12:20:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CartographyTableBlock -> bpt:
    net.minecraft.network.chat.TranslatableComponent CONTAINER_TITLE -> a
    23:24:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    28:34:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    40:40:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    40:40:net.minecraft.world.inventory.AbstractContainerMenu lambda$getMenuProvider$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CarvedPumpkinBlock -> bpu:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.pattern.BlockPattern snowGolemBase -> b
    net.minecraft.world.level.block.state.pattern.BlockPattern snowGolemFull -> c
    net.minecraft.world.level.block.state.pattern.BlockPattern ironGolemBase -> d
    net.minecraft.world.level.block.state.pattern.BlockPattern ironGolemFull -> e
    java.util.function.Predicate PUMPKINS_PREDICATE -> f
    43:45:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    49:53:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    56:56:boolean canSpawnGolem(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    60:111:void trySpawnGolem(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    115:115:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    120:121:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    126:137:net.minecraft.world.level.block.state.pattern.BlockPattern getOrCreateSnowGolemBase() -> c
    141:153:net.minecraft.world.level.block.state.pattern.BlockPattern getOrCreateSnowGolemFull() -> d
    157:169:net.minecraft.world.level.block.state.pattern.BlockPattern getOrCreateIronGolemBase() -> e
    173:186:net.minecraft.world.level.block.state.pattern.BlockPattern getOrCreateIronGolemFull() -> r
    191:191:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
    123:123:boolean lambda$static$0(net.minecraft.world.level.block.state.BlockState) -> h
    28:123:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CauldronBlock -> bpv:
    net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL -> a
    net.minecraft.world.phys.shapes.VoxelShape INSIDE -> c
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    61:63:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    67:67:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    72:72:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> j
    77:85:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    89:218:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    222:224:void setWaterLevel(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,int) -> a
    228:241:void handleRain(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> c
    245:245:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    250:250:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    255:256:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    260:260:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    39:55:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ChestBlock -> bpw:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> b
    net.minecraft.world.level.block.state.properties.EnumProperty TYPE -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> d
    net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> e
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> f
    net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> g
    net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> h
    net.minecraft.world.phys.shapes.VoxelShape AABB -> i
    net.minecraft.world.level.block.DoubleBlockCombiner$Combiner CHEST_COMBINER -> j
    net.minecraft.world.level.block.DoubleBlockCombiner$Combiner MENU_PROVIDER_COMBINER -> k
    68:70:void <init>(net.minecraft.world.level.block.Block$Properties,java.util.function.Supplier) -> <init>
    73:80:net.minecraft.world.level.block.DoubleBlockCombiner$BlockType getBlockType(net.minecraft.world.level.block.state.BlockState) -> h
    85:85:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    90:103:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    108:121:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    126:127:net.minecraft.core.Direction getConnectedDirection(net.minecraft.world.level.block.state.BlockState) -> i
    132:154:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    159:162:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    167:169:net.minecraft.core.Direction candidatePartnerFacing(net.minecraft.world.item.BlockPlaceContext,net.minecraft.core.Direction) -> a
    174:180:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    184:194:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    198:208:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    212:212:net.minecraft.stats.Stat getOpenChestStat() -> c
    216:216:net.minecraft.world.level.block.entity.BlockEntityType blockEntityType() -> d
    238:238:net.minecraft.world.Container getContainer(net.minecraft.world.level.block.ChestBlock,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean) -> a
    244:249:net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult combine(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean) -> a
    296:296:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    300:300:net.minecraft.world.level.block.DoubleBlockCombiner$Combiner opennessCombiner(net.minecraft.world.level.block.entity.LidBlockEntity) -> a
    320:320:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    324:324:boolean isChestBlockedAt(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    328:329:boolean isBlockedChestByBlock(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    334:342:boolean isCatSittingOnChest(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> b
    347:347:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    352:352:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    357:357:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    362:362:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    367:368:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    372:372:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    245:245:boolean lambda$combine$0(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> c
    54:252:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ChestBlock$1 -> bpw$1:
    219:219:void <init>() -> <init>
    222:222:java.util.Optional acceptDouble(net.minecraft.world.level.block.entity.ChestBlockEntity,net.minecraft.world.level.block.entity.ChestBlockEntity) -> a
    227:227:java.util.Optional acceptSingle(net.minecraft.world.level.block.entity.ChestBlockEntity) -> a
    232:232:java.util.Optional acceptNone() -> a
    219:219:java.lang.Object acceptNone() -> b
    219:219:java.lang.Object acceptSingle(java.lang.Object) -> a
    219:219:java.lang.Object acceptDouble(java.lang.Object,java.lang.Object) -> a
net.minecraft.world.level.block.ChestBlock$2 -> bpw$2:
    252:252:void <init>() -> <init>
    255:256:java.util.Optional acceptDouble(net.minecraft.world.level.block.entity.ChestBlockEntity,net.minecraft.world.level.block.entity.ChestBlockEntity) -> a
    284:284:java.util.Optional acceptSingle(net.minecraft.world.level.block.entity.ChestBlockEntity) -> a
    289:289:java.util.Optional acceptNone() -> a
    252:252:java.lang.Object acceptNone() -> b
    252:252:java.lang.Object acceptSingle(java.lang.Object) -> a
    252:252:java.lang.Object acceptDouble(java.lang.Object,java.lang.Object) -> a
net.minecraft.world.level.block.ChestBlock$2$1 -> bpw$2$1:
    net.minecraft.world.level.block.entity.ChestBlockEntity val$first -> a
    net.minecraft.world.level.block.entity.ChestBlockEntity val$second -> b
    net.minecraft.world.Container val$container -> c
    net.minecraft.world.level.block.ChestBlock$2 this$0 -> d
    256:256:void <init>(net.minecraft.world.level.block.ChestBlock$2,net.minecraft.world.level.block.entity.ChestBlockEntity,net.minecraft.world.level.block.entity.ChestBlockEntity,net.minecraft.world.Container) -> <init>
    260:266:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> createMenu
    271:277:net.minecraft.network.chat.Component getDisplayName() -> d
net.minecraft.world.level.block.ChestBlock$3 -> bpw$3:
    net.minecraft.world.level.block.entity.LidBlockEntity val$entity -> a
    300:300:void <init>(net.minecraft.world.level.block.entity.LidBlockEntity) -> <init>
    303:303:it.unimi.dsi.fastutil.floats.Float2FloatFunction acceptDouble(net.minecraft.world.level.block.entity.ChestBlockEntity,net.minecraft.world.level.block.entity.ChestBlockEntity) -> a
    308:308:it.unimi.dsi.fastutil.floats.Float2FloatFunction acceptSingle(net.minecraft.world.level.block.entity.ChestBlockEntity) -> a
    313:313:it.unimi.dsi.fastutil.floats.Float2FloatFunction acceptNone() -> a
    300:300:java.lang.Object acceptNone() -> b
    300:300:java.lang.Object acceptSingle(java.lang.Object) -> a
    300:300:java.lang.Object acceptDouble(java.lang.Object,java.lang.Object) -> a
    303:303:float lambda$acceptDouble$0(net.minecraft.world.level.block.entity.ChestBlockEntity,net.minecraft.world.level.block.entity.ChestBlockEntity,float) -> a
net.minecraft.world.level.block.ChestBlock$4 -> bpw$4:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    112:112:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ChorusFlowerBlock -> bpx:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    net.minecraft.world.level.block.ChorusPlantBlock plant -> b
    26:29:void <init>(net.minecraft.world.level.block.ChorusPlantBlock,net.minecraft.world.level.block.Block$Properties) -> <init>
    33:103:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    106:108:void placeGrownFlower(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int) -> b
    111:113:void placeDeadFlower(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    116:121:boolean allNeighborsEmpty(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    126:130:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    135:156:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    161:162:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    165:167:void generatePlant(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,java.util.Random,int) -> a
    170:211:void growTreeRecursive(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,java.util.Random,net.minecraft.core.BlockPos,int,int) -> a
    215:217:void onProjectileHit(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.BlockHitResult,net.minecraft.world.entity.Entity) -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ChorusPlantBlock -> bpy:
    18:21:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    25:25:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    29:42:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    48:56:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    61:64:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    71:88:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    93:94:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    98:98:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
net.minecraft.world.level.block.CocoaBlock -> bpz:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    net.minecraft.world.phys.shapes.VoxelShape[] EAST_AABB -> b
    net.minecraft.world.phys.shapes.VoxelShape[] WEST_AABB -> c
    net.minecraft.world.phys.shapes.VoxelShape[] NORTH_AABB -> d
    net.minecraft.world.phys.shapes.VoxelShape[] SOUTH_AABB -> e
    61:63:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    67:73:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    77:78:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    83:93:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    100:114:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    119:123:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    128:128:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    133:133:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    138:139:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    143:144:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    24:57:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CocoaBlock$1 -> bpz$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    84:84:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CommandBlock -> bqa:
    org.apache.logging.log4j.Logger LOGGER -> c
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty CONDITIONAL -> b
    39:41:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    45:47:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    52:76:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    80:110:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    113:120:void execute(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.BaseCommandBlock,boolean) -> a
    124:124:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    129:135:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    140:140:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    145:149:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    154:177:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    181:181:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    186:186:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    191:191:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    196:197:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    201:201:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    205:247:void executeChain(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    34:36:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ComparatorBlock -> bqb:
    net.minecraft.world.level.block.state.properties.EnumProperty MODE -> a
    34:36:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    40:40:int getDelay(net.minecraft.world.level.block.state.BlockState) -> h
    45:50:int getOutputSignal(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    54:58:int calculateOutputSignal(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> e
    63:73:boolean shouldTurnOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    78:100:int getInputSignal(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    105:111:net.minecraft.world.entity.decoration.ItemFrame getItemFrame(net.minecraft.world.level.Level,net.minecraft.core.Direction,net.minecraft.core.BlockPos) -> a
    116:126:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    131:144:void checkTickOnNeighbor(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> c
    147:170:void refreshOutputState(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> f
    174:175:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    179:182:boolean triggerEvent(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,int) -> a
    187:187:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    192:193:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    105:105:boolean lambda$getItemFrame$0(net.minecraft.core.Direction,net.minecraft.world.entity.decoration.ItemFrame) -> a
    31:31:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ComposterBlock -> bqc:
    net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL -> a
    it.unimi.dsi.fastutil.objects.Object2FloatMap COMPOSTABLES -> b
    net.minecraft.world.phys.shapes.VoxelShape OUTER_SHAPE -> c
    net.minecraft.world.phys.shapes.VoxelShape[] SHAPES -> d
    48:134:void bootStrap() -> c
    137:138:void add(float,net.minecraft.world.level.ItemLike) -> a
    152:154:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    157:178:void handleFill(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean) -> a
    182:182:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    187:187:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> j
    193:193:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    198:201:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    205:239:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    243:244:void empty(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> d
    247:259:boolean addItem(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> b
    264:269:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    273:273:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    278:278:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    283:284:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    288:288:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    293:302:net.minecraft.world.WorldlyContainer getContainer(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    145:149:void lambda$static$0(net.minecraft.world.phys.shapes.VoxelShape[]) -> a
    39:39:void access$000(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> c
    39:39:boolean access$100(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    43:144:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ComposterBlock$EmptyContainer -> bqc$a:
    307:308:void <init>() -> <init>
    312:312:int[] getSlotsForFace(net.minecraft.core.Direction) -> a
    317:317:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> a
    322:322:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> b
net.minecraft.world.level.block.ComposterBlock$InputContainer -> bqc$b:
    net.minecraft.world.level.block.state.BlockState state -> a
    net.minecraft.world.level.LevelAccessor level -> b
    net.minecraft.core.BlockPos pos -> c
    boolean changed -> d
    373:377:void <init>(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> <init>
    381:381:int getMaxStackSize() -> L_
    386:386:int[] getSlotsForFace(net.minecraft.core.Direction) -> a
    391:391:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> a
    396:396:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> b
    401:407:void setChanged() -> e
net.minecraft.world.level.block.ComposterBlock$OutputContainer -> bqc$c:
    net.minecraft.world.level.block.state.BlockState state -> a
    net.minecraft.world.level.LevelAccessor level -> b
    net.minecraft.core.BlockPos pos -> c
    boolean changed -> d
    333:337:void <init>(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> <init>
    341:341:int getMaxStackSize() -> L_
    346:346:int[] getSlotsForFace(net.minecraft.core.Direction) -> a
    351:351:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> a
    356:356:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> b
    361:363:void setChanged() -> e
net.minecraft.world.level.block.ConcretePowderBlock -> bqd:
    net.minecraft.world.level.block.state.BlockState concrete -> a
    16:18:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block$Properties) -> <init>
    22:25:void onLand(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState) -> a
    29:36:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    40:40:boolean shouldSolidify(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    44:58:boolean touchesLiquid(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    62:62:boolean canSolidify(net.minecraft.world.level.block.state.BlockState) -> r
    67:71:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.block.ConduitBlock -> bqe:
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> a
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    33:35:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    39:40:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    44:44:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    49:49:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    54:58:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    63:67:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    72:72:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    77:83:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    88:89:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    94:94:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    28:30:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CoralBlock -> bqf:
    net.minecraft.world.level.block.Block deadBlock -> a
    20:22:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block$Properties) -> <init>
    26:29:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    33:36:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    40:46:boolean scanForWater(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    52:55:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
net.minecraft.world.level.block.CoralFanBlock -> bqg:
    net.minecraft.world.level.block.Block deadBlock -> a
    17:19:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block$Properties) -> <init>
    23:24:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    28:31:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    35:45:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.block.CoralPlantBlock -> bqh:
    net.minecraft.world.level.block.Block deadBlock -> c
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    22:24:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block$Properties) -> <init>
    28:29:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    33:36:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    40:50:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    55:55:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CoralWallFanBlock -> bqi:
    net.minecraft.world.level.block.Block deadBlock -> c
    17:19:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block$Properties) -> <init>
    23:24:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    28:31:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    35:44:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.block.CraftingTableBlock -> bqj:
    net.minecraft.network.chat.Component CONTAINER_TITLE -> a
    22:23:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    27:33:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    38:38:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    38:38:net.minecraft.world.inventory.AbstractContainerMenu lambda$getMenuProvider$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CropBlock -> bqk:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> b
    net.minecraft.world.phys.shapes.VoxelShape[] SHAPE_BY_AGE -> a
    40:42:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    46:46:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    51:51:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    55:55:net.minecraft.world.level.block.state.properties.IntegerProperty getAgeProperty() -> c
    59:59:int getMaxAge() -> d
    63:63:int getAge(net.minecraft.world.level.block.state.BlockState) -> h
    67:67:net.minecraft.world.level.block.state.BlockState getStateForAge(int) -> b
    71:71:boolean isMaxAge(net.minecraft.world.level.block.state.BlockState) -> i
    76:87:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    90:96:void growCrops(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    99:99:int getBonemealAgeIncrease(net.minecraft.world.level.Level) -> a
    103:148:float getGrowthSpeed(net.minecraft.world.level.block.Block,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    153:153:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    158:162:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    166:166:net.minecraft.world.level.ItemLike getBaseSeedId() -> e
    171:171:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    176:176:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    181:181:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    186:187:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    191:192:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    26:36:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CrossCollisionBlock -> bql:
    net.minecraft.world.level.block.state.properties.BooleanProperty NORTH -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty EAST -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty SOUTH -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty WEST -> d
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> e
    java.util.Map PROPERTY_BY_DIRECTION -> f
    net.minecraft.world.phys.shapes.VoxelShape[] collisionShapeByIndex -> g
    net.minecraft.world.phys.shapes.VoxelShape[] shapeByIndex -> h
    it.unimi.dsi.fastutil.objects.Object2IntMap stateToIndex -> i
    31:38:void <init>(float,float,float,float,float,net.minecraft.world.level.block.Block$Properties) -> <init>
    41:77:net.minecraft.world.phys.shapes.VoxelShape[] makeShapes(float,float,float,float,float) -> a
    82:82:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    87:87:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    92:92:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    96:96:int indexFor(net.minecraft.core.Direction) -> a
    100:100:int getAABBIndex(net.minecraft.world.level.block.state.BlockState) -> h
    120:123:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    128:128:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    133:141:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    147:155:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    101:114:int lambda$getAABBIndex$1(net.minecraft.world.level.block.state.BlockState) -> i
    27:27:boolean lambda$static$0(java.util.Map$Entry) -> a
    22:27:void <clinit>() -> <clinit>
net.minecraft.world.level.block.CrossCollisionBlock$1 -> bql$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> b
    133:147:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DaylightDetectorBlock -> bqm:
    net.minecraft.world.level.block.state.properties.IntegerProperty POWER -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty INVERTED -> b
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> c
    31:34:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    38:38:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    43:43:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    48:48:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    52:74:void updateSignalStrength(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> d
    78:89:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    94:94:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    99:99:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    104:104:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    109:110:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    25:28:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DeadBushBlock -> bqn:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    14:15:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    19:19:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    24:25:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    11:11:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DetectorRailBlock -> bqo:
    net.minecraft.world.level.block.state.properties.EnumProperty SHAPE -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> d
    35:37:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    41:41:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    46:46:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    51:60:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    64:69:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    73:73:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    78:81:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    85:116:void checkPressed(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    119:126:void updatePowerToConnected(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    130:135:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    139:139:net.minecraft.world.level.block.state.properties.Property getShapeProperty() -> d
    144:144:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    149:161:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    165:165:java.util.List getInteractingMinecartOfType(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.lang.Class,java.util.function.Predicate) -> a
    169:171:net.minecraft.world.phys.AABB getSearchBB(net.minecraft.core.BlockPos) -> a
    176:243:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    249:290:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    295:296:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    31:32:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DetectorRailBlock$1 -> bqo$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$RailShape -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> b
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> c
    176:250:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DiodeBlock -> bqp:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> c
    29:30:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    34:34:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    39:39:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    44:60:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    64:64:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    69:77:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    82:93:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    96:114:void checkTickOnNeighbor(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> c
    117:117:boolean isLocked(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    121:121:boolean shouldTurnOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    125:134:int getInputSignal(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    138:141:int getAlternateSignal(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    145:157:int getAlternateSignalAt(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    162:162:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    167:167:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    172:175:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    179:180:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    184:190:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    193:198:void updateNeighborsInFront(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> d
    201:201:boolean isAlternateInput(net.minecraft.world.level.block.state.BlockState) -> i
    205:205:int getOutputSignal(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    209:209:boolean isDiode(net.minecraft.world.level.block.state.BlockState) -> r
    213:216:boolean shouldPrioritize(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> c
    int getDelay(net.minecraft.world.level.block.state.BlockState) -> h
    24:26:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DirectionalBlock -> bqq:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    10:11:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    7:7:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DispenserBlock -> bqr:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty TRIGGERED -> b
    java.util.Map DISPENSER_REGISTRY -> c
    48:49:void registerBehavior(net.minecraft.world.level.ItemLike,net.minecraft.core.dispenser.DispenseItemBehavior) -> a
    52:54:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    58:58:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    63:77:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    81:96:void dispenseFrom(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    99:99:net.minecraft.core.dispenser.DispenseItemBehavior getDispenseMethod(net.minecraft.world.item.ItemStack) -> a
    104:113:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    117:118:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    122:122:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    127:127:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    132:138:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    142:152:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    155:161:net.minecraft.core.Position getDispensePosition(net.minecraft.core.BlockSource) -> a
    166:166:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    171:171:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    176:176:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    181:181:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    186:186:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    191:192:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    45:45:void lambda$static$0(it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap) -> a
    42:45:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DoorBlock -> bqs:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty OPEN -> b
    net.minecraft.world.level.block.state.properties.EnumProperty HINGE -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> d
    net.minecraft.world.level.block.state.properties.EnumProperty HALF -> e
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> f
    net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> g
    net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> h
    net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> i
    50:52:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    56:69:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    75:92:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    98:99:void playerDestroy(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.entity.BlockEntity,net.minecraft.world.item.ItemStack) -> a
    103:122:void playerWillDestroy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player) -> a
    126:134:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    139:139:int getCloseSound() -> c
    143:143:int getOpenSound() -> d
    149:157:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    162:163:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    166:205:net.minecraft.world.level.block.state.properties.DoorHingeSide getHinge(net.minecraft.world.item.BlockPlaceContext) -> b
    210:217:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    221:228:void setOpen(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean) -> a
    232:239:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    244:249:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    254:255:void playSound(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean) -> b
    259:259:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    264:264:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    269:272:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    277:277:long getSeed(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    282:283:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    36:47:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DoorBlock$1 -> bqs$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    int[] $SwitchMap$net$minecraft$world$level$pathfinder$PathComputationType -> b
    60:126:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DoubleBlockCombiner -> bqt:
    14:14:void <init>() -> <init>
    23:58:net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult combineWithNeigbour(net.minecraft.world.level.block.entity.BlockEntityType,java.util.function.Function,java.util.function.Function,net.minecraft.world.level.block.state.properties.DirectionProperty,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,java.util.function.BiPredicate) -> a
net.minecraft.world.level.block.DoubleBlockCombiner$BlockType -> bqt$a:
    net.minecraft.world.level.block.DoubleBlockCombiner$BlockType SINGLE -> a
    net.minecraft.world.level.block.DoubleBlockCombiner$BlockType FIRST -> b
    net.minecraft.world.level.block.DoubleBlockCombiner$BlockType SECOND -> c
    net.minecraft.world.level.block.DoubleBlockCombiner$BlockType[] $VALUES -> d
    15:15:net.minecraft.world.level.block.DoubleBlockCombiner$BlockType[] values() -> values
    15:15:net.minecraft.world.level.block.DoubleBlockCombiner$BlockType valueOf(java.lang.String) -> valueOf
    15:15:void <init>(java.lang.String,int) -> <init>
    15:18:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DoubleBlockCombiner$Combiner -> bqt$b:
    java.lang.Object acceptDouble(java.lang.Object,java.lang.Object) -> a
    java.lang.Object acceptSingle(java.lang.Object) -> a
    java.lang.Object acceptNone() -> b
net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult -> bqt$c:
    java.lang.Object apply(net.minecraft.world.level.block.DoubleBlockCombiner$Combiner) -> apply
net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult$Double -> bqt$c$a:
    java.lang.Object first -> a
    java.lang.Object second -> b
    76:79:void <init>(java.lang.Object,java.lang.Object) -> <init>
    83:83:java.lang.Object apply(net.minecraft.world.level.block.DoubleBlockCombiner$Combiner) -> apply
net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult$Single -> bqt$c$b:
    java.lang.Object single -> a
    90:92:void <init>(java.lang.Object) -> <init>
    96:96:java.lang.Object apply(net.minecraft.world.level.block.DoubleBlockCombiner$Combiner) -> apply
net.minecraft.world.level.block.DoublePlantBlock -> bqu:
    net.minecraft.world.level.block.state.properties.EnumProperty HALF -> a
    26:29:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    33:44:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    50:55:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    60:61:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    66:71:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    75:77:void placeAt(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,int) -> a
    82:83:void playerDestroy(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.entity.BlockEntity,net.minecraft.world.item.ItemStack) -> a
    87:104:void playerWillDestroy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player) -> a
    108:109:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    113:113:net.minecraft.world.level.block.Block$OffsetType getOffsetType() -> X_
    118:118:long getSeed(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos) -> a
    23:23:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DragonEggBlock -> bqv:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    22:23:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    27:27:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    32:33:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    38:39:void attack(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    42:64:void teleport(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> d
    68:68:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    73:73:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.DropperBlock -> bqw:
    net.minecraft.core.dispenser.DispenseItemBehavior DISPENSE_BEHAVIOUR -> c
    21:22:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    26:26:net.minecraft.core.dispenser.DispenseItemBehavior getDispenseMethod(net.minecraft.world.item.ItemStack) -> a
    31:31:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    36:69:void dispenseFrom(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.level.block.EnchantmentTableBlock -> bqx:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    33:34:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    38:38:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    43:43:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    48:70:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    74:74:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    79:79:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    84:89:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    95:101:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    106:112:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    116:116:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    99:99:net.minecraft.world.inventory.AbstractContainerMenu lambda$getMenuProvider$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> a
    30:30:void <clinit>() -> <clinit>
net.minecraft.world.level.block.EndGatewayBlock -> bqy:
    17:18:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    22:22:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    27:51:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    55:55:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    60:60:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
net.minecraft.world.level.block.EndPortalBlock -> bqz:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    25:26:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    30:30:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    35:35:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    40:45:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    49:57:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    61:61:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    66:66:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
    22:22:void <clinit>() -> <clinit>
net.minecraft.world.level.block.EndPortalFrameBlock -> bra:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty HAS_EYE -> b
    net.minecraft.world.phys.shapes.VoxelShape BASE_SHAPE -> c
    net.minecraft.world.phys.shapes.VoxelShape EYE_SHAPE -> d
    net.minecraft.world.phys.shapes.VoxelShape FULL_SHAPE -> e
    net.minecraft.world.level.block.state.pattern.BlockPattern portalShape -> f
    33:35:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    39:39:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    44:44:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    49:49:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    54:54:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    59:63:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    68:68:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    73:73:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    78:79:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    82:98:net.minecraft.world.level.block.state.pattern.BlockPattern getOrCreatePortalShape() -> c
    103:103:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    25:29:void <clinit>() -> <clinit>
net.minecraft.world.level.block.EndRodBlock -> brb:
    net.minecraft.world.phys.shapes.VoxelShape Y_AXIS_AABB -> b
    net.minecraft.world.phys.shapes.VoxelShape Z_AXIS_AABB -> c
    net.minecraft.world.phys.shapes.VoxelShape X_AXIS_AABB -> d
    26:28:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    32:32:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    37:37:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    42:49:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    56:63:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    68:77:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    81:82:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    86:86:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    21:23:void <clinit>() -> <clinit>
net.minecraft.world.level.block.EndRodBlock$1 -> brb$1:
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> a
    42:42:void <clinit>() -> <clinit>
net.minecraft.world.level.block.EnderChestBlock -> brc:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> c
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> d
    net.minecraft.network.chat.TranslatableComponent CONTAINER_TITLE -> e
    48:50:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    54:54:net.minecraft.world.level.block.DoubleBlockCombiner$NeighborCombineResult combine(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean) -> a
    59:59:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    64:64:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    69:70:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    75:96:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    101:101:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    106:119:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    123:123:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    128:128:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    133:134:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    138:141:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    146:149:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    154:154:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    93:93:net.minecraft.world.inventory.AbstractContainerMenu lambda$use$1(net.minecraft.world.inventory.PlayerEnderChestContainer,int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> a
    48:48:net.minecraft.world.level.block.entity.BlockEntityType lambda$new$0() -> c
    42:45:void <clinit>() -> <clinit>
net.minecraft.world.level.block.EntityBlock -> brd:
    net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
net.minecraft.world.level.block.FaceAttachedHorizontalDirectionalBlock -> bre:
    net.minecraft.world.level.block.state.properties.EnumProperty FACE -> C
    19:20:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    24:24:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    28:29:boolean canAttach(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    35:48:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    53:56:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    60:66:net.minecraft.core.Direction getConnectedDirection(net.minecraft.world.level.block.state.BlockState) -> h
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.level.block.FaceAttachedHorizontalDirectionalBlock$1 -> bre$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$AttachFace -> a
    60:60:void <clinit>() -> <clinit>
net.minecraft.world.level.block.FallingBlock -> brf:
    19:20:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    24:25:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    29:31:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    36:44:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    47:47:void falling(net.minecraft.world.entity.item.FallingBlockEntity) -> a
    51:51:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    56:58:boolean isFree(net.minecraft.world.level.block.state.BlockState) -> h
    62:62:void onLand(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState) -> a
    65:65:void onBroken(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    69:80:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    83:83:int getDustColor(net.minecraft.world.level.block.state.BlockState) -> i
net.minecraft.world.level.block.FarmBlock -> brg:
    net.minecraft.world.level.block.state.properties.IntegerProperty MOISTURE -> a
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    34:36:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    40:43:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    48:49:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    54:57:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    62:62:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    67:67:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    72:87:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    91:100:void fallOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity,float) -> a
    103:104:void turnToDirt(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> d
    107:108:boolean isUnderCrops(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    112:117:boolean isNearWater(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    122:123:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    127:127:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    132:132:boolean isViewBlocking(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> f
    28:29:void <clinit>() -> <clinit>
net.minecraft.world.level.block.FenceBlock -> brh:
    net.minecraft.world.phys.shapes.VoxelShape[] occlusionByIndex -> i
    28:32:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    36:36:net.minecraft.world.phys.shapes.VoxelShape getOcclusionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> i
    41:41:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    45:49:boolean connectsTo(net.minecraft.world.level.block.state.BlockState,boolean,net.minecraft.core.Direction) -> a
    54:63:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    68:88:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    93:99:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    104:105:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.FenceGateBlock -> bri:
    net.minecraft.world.level.block.state.properties.BooleanProperty OPEN -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty IN_WALL -> c
    net.minecraft.world.phys.shapes.VoxelShape Z_SHAPE -> d
    net.minecraft.world.phys.shapes.VoxelShape X_SHAPE -> e
    net.minecraft.world.phys.shapes.VoxelShape Z_SHAPE_LOW -> f
    net.minecraft.world.phys.shapes.VoxelShape X_SHAPE_LOW -> g
    net.minecraft.world.phys.shapes.VoxelShape Z_COLLISION_SHAPE -> h
    net.minecraft.world.phys.shapes.VoxelShape X_COLLISION_SHAPE -> i
    net.minecraft.world.phys.shapes.VoxelShape Z_OCCLUSION_SHAPE -> j
    net.minecraft.world.phys.shapes.VoxelShape X_OCCLUSION_SHAPE -> k
    net.minecraft.world.phys.shapes.VoxelShape Z_OCCLUSION_SHAPE_LOW -> w
    net.minecraft.world.phys.shapes.VoxelShape X_OCCLUSION_SHAPE_LOW -> x
    56:59:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    63:66:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    71:77:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    82:85:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    90:93:net.minecraft.world.phys.shapes.VoxelShape getOcclusionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> i
    98:106:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    112:121:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    125:125:boolean isWall(net.minecraft.world.level.block.state.BlockState) -> h
    130:144:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    149:160:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    164:165:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    168:168:boolean connectsToDirection(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction) -> a
    24:52:void <clinit>() -> <clinit>
net.minecraft.world.level.block.FenceGateBlock$1 -> bri$1:
    int[] $SwitchMap$net$minecraft$world$level$pathfinder$PathComputationType -> a
    98:98:void <clinit>() -> <clinit>
net.minecraft.world.level.block.FireBlock -> brj:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty NORTH -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty EAST -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty SOUTH -> d
    net.minecraft.world.level.block.state.properties.BooleanProperty WEST -> e
    net.minecraft.world.level.block.state.properties.BooleanProperty UP -> f
    java.util.Map PROPERTY_BY_DIRECTION -> g
    it.unimi.dsi.fastutil.objects.Object2IntMap flameOdds -> h
    it.unimi.dsi.fastutil.objects.Object2IntMap burnOdds -> i
    54:60:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    65:65:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    70:74:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    80:80:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    86:100:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    105:106:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    111:111:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    116:204:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    207:207:boolean isNearRain(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    211:214:int getBurnOdd(net.minecraft.world.level.block.state.BlockState) -> i
    218:221:int getFlameOdds(net.minecraft.world.level.block.state.BlockState) -> r
    225:241:void checkBurnOut(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,java.util.Random,int) -> a
    244:250:boolean isValidFireLocation(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    254:264:int getFireOdds(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    268:268:boolean canBurn(net.minecraft.world.level.block.state.BlockState) -> h
    273:288:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    292:347:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    351:352:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    355:357:void setFlammable(net.minecraft.world.level.block.Block,int,int) -> a
    360:488:void bootStrap() -> c
    42:42:boolean lambda$static$0(java.util.Map$Entry) -> a
    35:42:void <clinit>() -> <clinit>
net.minecraft.world.level.block.FletchingTableBlock -> brk:
    13:14:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    18:18:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
net.minecraft.world.level.block.FlowerBlock -> brl:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    net.minecraft.world.effect.MobEffect suspiciousStewEffect -> b
    int effectDuration -> c
    19:26:void <init>(net.minecraft.world.effect.MobEffect,int,net.minecraft.world.level.block.Block$Properties) -> <init>
    30:31:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    36:36:net.minecraft.world.level.block.Block$OffsetType getOffsetType() -> X_
    40:40:net.minecraft.world.effect.MobEffect getSuspiciousStewEffect() -> c
    44:44:int getEffectDuration() -> d
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.level.block.FlowerPotBlock -> brm:
    java.util.Map POTTED_BY_CONTENT -> b
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    net.minecraft.world.level.block.Block content -> c
    32:36:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block$Properties) -> <init>
    40:40:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    45:45:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    50:77:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    82:85:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    90:94:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    98:98:net.minecraft.world.level.block.Block getContent() -> c
    24:27:void <clinit>() -> <clinit>
net.minecraft.world.level.block.FrostedIceBlock -> brn:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    25:27:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    31:46:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    49:55:boolean slightlyMelt(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> e
    61:68:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    71:83:boolean fewerNeigboursThan(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,int) -> a
    88:89:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    93:93:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.FurnaceBlock -> bro:
    21:22:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    26:26:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    31:36:void openContainer(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    40:64:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
net.minecraft.world.level.block.GlassBlock -> brp:
    5:6:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
net.minecraft.world.level.block.GlazedTerracottaBlock -> brq:
    10:11:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    15:16:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    20:20:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    25:25:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
net.minecraft.world.level.block.GrassBlock -> brr:
    17:18:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    22:22:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    27:27:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    32:73:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.level.block.GrassPathBlock -> brs:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    21:22:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    26:26:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    31:34:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    39:44:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    49:50:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    54:55:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    60:60:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    65:65:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    70:70:boolean isViewBlocking(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> f
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.level.block.GravelBlock -> brt:
    7:8:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    12:12:int getDustColor(net.minecraft.world.level.block.state.BlockState) -> i
net.minecraft.world.level.block.GrindstoneBlock -> bru:
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_LEFT_POST -> a
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_RIGHT_POST -> b
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_LEFT_PIVOT -> c
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_RIGHT_PIVOT -> d
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_LEFT_LEG -> e
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_RIGHT_LEG -> f
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_ALL_LEGS -> g
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_NORTH_SOUTH_GRINDSTONE -> h
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_LEFT_POST -> i
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_RIGHT_POST -> j
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_LEFT_PIVOT -> k
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_RIGHT_PIVOT -> w
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_LEFT_LEG -> x
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_RIGHT_LEG -> y
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_ALL_LEGS -> z
    net.minecraft.world.phys.shapes.VoxelShape FLOOR_EAST_WEST_GRINDSTONE -> A
    net.minecraft.world.phys.shapes.VoxelShape WALL_SOUTH_LEFT_POST -> B
    net.minecraft.world.phys.shapes.VoxelShape WALL_SOUTH_RIGHT_POST -> D
    net.minecraft.world.phys.shapes.VoxelShape WALL_SOUTH_LEFT_PIVOT -> E
    net.minecraft.world.phys.shapes.VoxelShape WALL_SOUTH_RIGHT_PIVOT -> F
    net.minecraft.world.phys.shapes.VoxelShape WALL_SOUTH_LEFT_LEG -> G
    net.minecraft.world.phys.shapes.VoxelShape WALL_SOUTH_RIGHT_LEG -> H
    net.minecraft.world.phys.shapes.VoxelShape WALL_SOUTH_ALL_LEGS -> I
    net.minecraft.world.phys.shapes.VoxelShape WALL_SOUTH_GRINDSTONE -> J
    net.minecraft.world.phys.shapes.VoxelShape WALL_NORTH_LEFT_POST -> K
    net.minecraft.world.phys.shapes.VoxelShape WALL_NORTH_RIGHT_POST -> L
    net.minecraft.world.phys.shapes.VoxelShape WALL_NORTH_LEFT_PIVOT -> M
    net.minecraft.world.phys.shapes.VoxelShape WALL_NORTH_RIGHT_PIVOT -> N
    net.minecraft.world.phys.shapes.VoxelShape WALL_NORTH_LEFT_LEG -> O
    net.minecraft.world.phys.shapes.VoxelShape WALL_NORTH_RIGHT_LEG -> P
    net.minecraft.world.phys.shapes.VoxelShape WALL_NORTH_ALL_LEGS -> Q
    net.minecraft.world.phys.shapes.VoxelShape WALL_NORTH_GRINDSTONE -> R
    net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_LEFT_POST -> S
    net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_RIGHT_POST -> T
    net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_LEFT_PIVOT -> U
    net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_RIGHT_PIVOT -> V
    net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_LEFT_LEG -> W
    net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_RIGHT_LEG -> X
    net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_ALL_LEGS -> Y
    net.minecraft.world.phys.shapes.VoxelShape WALL_WEST_GRINDSTONE -> Z
    net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_LEFT_POST -> aa
    net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_RIGHT_POST -> ab
    net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_LEFT_PIVOT -> ac
    net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_RIGHT_PIVOT -> ad
    net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_LEFT_LEG -> ae
    net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_RIGHT_LEG -> af
    net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_ALL_LEGS -> ag
    net.minecraft.world.phys.shapes.VoxelShape WALL_EAST_GRINDSTONE -> ah
    net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_LEFT_POST -> ai
    net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_RIGHT_POST -> aj
    net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_LEFT_PIVOT -> ak
    net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_RIGHT_PIVOT -> al
    net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_LEFT_LEG -> am
    net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_RIGHT_LEG -> an
    net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_ALL_LEGS -> ao
    net.minecraft.world.phys.shapes.VoxelShape CEILING_NORTH_SOUTH_GRINDSTONE -> ap
    net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_LEFT_POST -> aq
    net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_RIGHT_POST -> ar
    net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_LEFT_PIVOT -> as
    net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_RIGHT_PIVOT -> at
    net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_LEFT_LEG -> au
    net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_RIGHT_LEG -> av
    net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_ALL_LEGS -> aw
    net.minecraft.world.phys.shapes.VoxelShape CEILING_EAST_WEST_GRINDSTONE -> ax
    net.minecraft.network.chat.TranslatableComponent CONTAINER_TITLE -> az
    103:105:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    109:109:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    113:142:net.minecraft.world.phys.shapes.VoxelShape getVoxelShape(net.minecraft.world.level.block.state.BlockState) -> i
    147:147:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    152:152:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    157:157:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    162:168:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    173:173:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    178:178:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    183:183:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    188:189:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    193:193:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    173:173:net.minecraft.world.inventory.AbstractContainerMenu lambda$getMenuProvider$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> a
    28:100:void <clinit>() -> <clinit>
net.minecraft.world.level.block.GrindstoneBlock$1 -> bru$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$AttachFace -> a
    114:114:void <clinit>() -> <clinit>
net.minecraft.world.level.block.HalfTransparentBlock -> brv:
    8:9:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    13:16:boolean skipRendering(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction) -> a
net.minecraft.world.level.block.HayBlock -> brw:
    10:12:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    16:17:void fallOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity,float) -> a
net.minecraft.world.level.block.HoneyBlock -> brx:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    64:65:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    69:69:boolean doesEntityDoHoneyBlockSlideEffects(net.minecraft.world.entity.Entity) -> c
    77:77:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    82:93:void fallOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity,float) -> a
    97:103:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    106:122:boolean isSlidingDown(net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    126:130:void maybeDoSlideAchievement(net.minecraft.world.entity.Entity,net.minecraft.core.BlockPos) -> a
    133:148:void doSlideMovement(net.minecraft.world.entity.Entity) -> d
    151:162:void maybeDoSlideEffects(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity) -> a
    165:166:void showSlideParticles(net.minecraft.world.entity.Entity) -> a
    169:170:void showJumpParticles(net.minecraft.world.entity.Entity) -> b
    173:185:void showParticles(net.minecraft.world.entity.Entity,int) -> a
    61:61:void <clinit>() -> <clinit>
net.minecraft.world.level.block.HopperBlock -> bry:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty ENABLED -> b
    net.minecraft.world.phys.shapes.VoxelShape TOP -> c
    net.minecraft.world.phys.shapes.VoxelShape FUNNEL -> d
    net.minecraft.world.phys.shapes.VoxelShape CONVEX_BASE -> e
    net.minecraft.world.phys.shapes.VoxelShape BASE -> f
    net.minecraft.world.phys.shapes.VoxelShape DOWN_SHAPE -> g
    net.minecraft.world.phys.shapes.VoxelShape EAST_SHAPE -> h
    net.minecraft.world.phys.shapes.VoxelShape NORTH_SHAPE -> i
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_SHAPE -> j
    net.minecraft.world.phys.shapes.VoxelShape WEST_SHAPE -> k
    net.minecraft.world.phys.shapes.VoxelShape DOWN_INTERACTION_SHAPE -> w
    net.minecraft.world.phys.shapes.VoxelShape EAST_INTERACTION_SHAPE -> x
    net.minecraft.world.phys.shapes.VoxelShape NORTH_INTERACTION_SHAPE -> y
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_INTERACTION_SHAPE -> z
    net.minecraft.world.phys.shapes.VoxelShape WEST_INTERACTION_SHAPE -> A
    55:57:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    61:73:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    78:90:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> j
    95:96:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    101:101:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    106:112:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    116:120:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    124:134:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    139:140:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    143:147:void checkPoweredState(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    151:162:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    166:166:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    171:171:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    176:176:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    181:181:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    186:186:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    191:192:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    196:200:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    204:204:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    33:52:void <clinit>() -> <clinit>
net.minecraft.world.level.block.HopperBlock$1 -> bry$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    61:61:void <clinit>() -> <clinit>
net.minecraft.world.level.block.HorizontalDirectionalBlock -> brz:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> ay
    11:12:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    16:16:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    21:21:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    8:8:void <clinit>() -> <clinit>
net.minecraft.world.level.block.HugeMushroomBlock -> bsa:
    net.minecraft.world.level.block.state.properties.BooleanProperty NORTH -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty EAST -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty SOUTH -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty WEST -> d
    net.minecraft.world.level.block.state.properties.BooleanProperty UP -> e
    net.minecraft.world.level.block.state.properties.BooleanProperty DOWN -> f
    java.util.Map PROPERTY_BY_DIRECTION -> g
    25:27:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    31:40:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    46:49:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    54:60:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    66:72:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    78:79:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    15:22:void <clinit>() -> <clinit>
net.minecraft.world.level.block.IceBlock -> bsb:
    23:24:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    28:41:void playerDestroy(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.entity.BlockEntity,net.minecraft.world.item.ItemStack) -> a
    45:48:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    51:58:void melt(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> d
    62:62:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    67:67:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
net.minecraft.world.level.block.InfestedBlock -> bsc:
    net.minecraft.world.level.block.Block hostBlock -> a
    java.util.Map BLOCK_BY_HOST_BLOCK -> b
    22:25:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block$Properties) -> <init>
    28:28:net.minecraft.world.level.block.Block getHostBlock() -> c
    32:32:boolean isCompatibleHostBlock(net.minecraft.world.level.block.state.BlockState) -> h
    37:47:void spawnAfterBreak(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    50:50:net.minecraft.world.level.block.state.BlockState stateByHostBlock(net.minecraft.world.level.block.Block) -> d
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.IronBarsBlock -> bsd:
    15:17:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    21:40:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    46:52:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    57:65:boolean skipRendering(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction) -> a
    69:70:boolean attachsTo(net.minecraft.world.level.block.state.BlockState,boolean) -> a
    75:76:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
net.minecraft.world.level.block.JigsawBlock -> bse:
    22:24:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    28:29:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    33:33:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    38:38:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    44:44:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    49:56:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    60:60:boolean canAttach(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo) -> a
net.minecraft.world.level.block.JukeboxBlock -> bsf:
    net.minecraft.world.level.block.state.properties.BooleanProperty HAS_RECORD -> a
    27:29:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    33:42:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    46:53:void setRecord(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.ItemStack) -> a
    56:84:void dropRecording(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    88:93:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    97:97:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    102:102:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    107:115:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    120:120:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    125:126:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    24:24:void <clinit>() -> <clinit>
net.minecraft.world.level.block.KelpBlock -> bsg:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    31:33:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    37:37:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    43:47:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    51:51:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.level.LevelAccessor) -> a
    56:56:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    61:71:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    75:82:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    87:99:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    104:105:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    109:109:boolean canPlaceLiquid(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
    114:114:boolean placeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState) -> a
    25:28:void <clinit>() -> <clinit>
net.minecraft.world.level.block.KelpPlantBlock -> bsh:
    net.minecraft.world.level.block.KelpBlock top -> a
    21:23:void <init>(net.minecraft.world.level.block.KelpBlock,net.minecraft.world.level.block.Block$Properties) -> <init>
    27:27:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    32:37:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    41:54:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    59:62:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    67:67:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    72:72:boolean canPlaceLiquid(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
    77:77:boolean placeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState) -> a
net.minecraft.world.level.block.LadderBlock -> bsi:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> b
    net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> c
    net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> d
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> e
    net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> f
    31:33:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    37:46:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    51:52:boolean canAttachTo(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    57:58:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    63:70:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    77:99:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    104:104:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    109:109:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    114:115:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    119:122:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    22:28:void <clinit>() -> <clinit>
net.minecraft.world.level.block.LadderBlock$1 -> bsi$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    37:37:void <clinit>() -> <clinit>
net.minecraft.world.level.block.Lantern -> bsj:
    net.minecraft.world.level.block.state.properties.BooleanProperty HANGING -> a
    net.minecraft.world.phys.shapes.VoxelShape AABB -> b
    net.minecraft.world.phys.shapes.VoxelShape HANGING_AABB -> c
    28:30:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    35:46:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    51:51:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    56:57:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    61:62:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    66:66:net.minecraft.core.Direction getConnectedDirection(net.minecraft.world.level.block.state.BlockState) -> h
    71:71:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    76:79:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    84:84:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    22:25:void <clinit>() -> <clinit>
net.minecraft.world.level.block.LeavesBlock -> bsk:
    net.minecraft.world.level.block.state.properties.IntegerProperty DISTANCE -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty PERSISTENT -> b
    30:32:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    36:36:boolean isRandomlyTicking(net.minecraft.world.level.block.state.BlockState) -> l
    41:45:void randomTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> b
    49:50:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    54:54:int getLightBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> l
    59:63:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    67:77:net.minecraft.world.level.block.state.BlockState updateDistance(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    81:87:int getDistanceAt(net.minecraft.world.level.block.state.BlockState) -> h
    92:111:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    115:115:boolean isSuffocating(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> c
    120:120:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
    125:126:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    130:130:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    24:25:void <clinit>() -> <clinit>
net.minecraft.world.level.block.LecternBlock -> bsl:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty HAS_BOOK -> c
    net.minecraft.world.phys.shapes.VoxelShape SHAPE_BASE -> d
    net.minecraft.world.phys.shapes.VoxelShape SHAPE_POST -> e
    net.minecraft.world.phys.shapes.VoxelShape SHAPE_COMMON -> f
    net.minecraft.world.phys.shapes.VoxelShape SHAPE_TOP_PLATE -> g
    net.minecraft.world.phys.shapes.VoxelShape SHAPE_COLLISION -> h
    net.minecraft.world.phys.shapes.VoxelShape SHAPE_WEST -> i
    net.minecraft.world.phys.shapes.VoxelShape SHAPE_NORTH -> j
    net.minecraft.world.phys.shapes.VoxelShape SHAPE_EAST -> k
    net.minecraft.world.phys.shapes.VoxelShape SHAPE_SOUTH -> w
    77:79:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    83:83:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    88:88:net.minecraft.world.phys.shapes.VoxelShape getOcclusionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> i
    93:93:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    98:98:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    103:103:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    108:118:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    124:124:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    129:129:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    134:135:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    140:140:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    144:151:boolean tryPlaceBook(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.ItemStack) -> a
    155:162:void placeBook(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.ItemStack) -> b
    165:167:void resetBookState(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    170:173:void signalPageChange(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    176:178:void changePowered(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    181:182:void updateBelow(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    186:187:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    191:204:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    207:221:void popBook(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> d
    225:225:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    230:230:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    235:235:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    240:240:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    245:252:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    257:271:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    277:281:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    285:290:void openScreen(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    294:294:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    37:70:void <clinit>() -> <clinit>
net.minecraft.world.level.block.LecternBlock$1 -> bsl$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    108:108:void <clinit>() -> <clinit>
net.minecraft.world.level.block.LevelEvent -> bsm:
    3:3:void <init>() -> <init>
net.minecraft.world.level.block.LeverBlock -> bsn:
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> a
    net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> b
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> c
    net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> d
    net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> e
    net.minecraft.world.phys.shapes.VoxelShape UP_AABB_Z -> f
    net.minecraft.world.phys.shapes.VoxelShape UP_AABB_X -> g
    net.minecraft.world.phys.shapes.VoxelShape DOWN_AABB_Z -> h
    net.minecraft.world.phys.shapes.VoxelShape DOWN_AABB_X -> i
    45:47:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    51:79:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    87:100:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    107:110:net.minecraft.world.level.block.state.BlockState pull(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> d
    114:121:void makeParticle(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,float) -> a
    125:128:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    132:139:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    143:143:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    148:151:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    156:156:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    161:163:void updateNeighbours(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> e
    167:168:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    27:42:void <clinit>() -> <clinit>
net.minecraft.world.level.block.LeverBlock$1 -> bsn$1:
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> a
    int[] $SwitchMap$net$minecraft$core$Direction -> b
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$AttachFace -> c
    51:61:void <clinit>() -> <clinit>
net.minecraft.world.level.block.LiquidBlock -> bso:
    net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL -> a
    net.minecraft.world.level.material.FlowingFluid fluid -> b
    java.util.List stateCache -> c
    40:49:void <init>(net.minecraft.world.level.material.FlowingFluid,net.minecraft.world.level.block.Block$Properties) -> <init>
    53:54:void randomTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> b
    58:58:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    63:63:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    68:69:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    74:74:boolean skipRendering(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction) -> a
    79:79:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    84:84:java.util.List getDrops(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.storage.loot.LootContext$Builder) -> a
    89:89:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    94:94:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    99:102:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    106:110:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    115:118:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    121:143:boolean shouldSpreadLiquid(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    147:148:void fizz(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    152:153:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    157:161:net.minecraft.world.level.material.Fluid takeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    166:169:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    34:34:void <clinit>() -> <clinit>
net.minecraft.world.level.block.LiquidBlockContainer -> bsp:
    boolean canPlaceLiquid(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
    boolean placeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState) -> a
net.minecraft.world.level.block.LogBlock -> bsq:
    net.minecraft.world.level.material.MaterialColor woodMaterialColor -> b
    13:15:void <init>(net.minecraft.world.level.material.MaterialColor,net.minecraft.world.level.block.Block$Properties) -> <init>
    19:19:net.minecraft.world.level.material.MaterialColor getMapColor(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> e
net.minecraft.world.level.block.LoomBlock -> bsr:
    net.minecraft.network.chat.TranslatableComponent CONTAINER_TITLE -> a
    23:24:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    28:34:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    39:39:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    44:44:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    49:50:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    39:39:net.minecraft.world.inventory.AbstractContainerMenu lambda$getMenuProvider$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.world.level.block.MagmaBlock -> bss:
    25:26:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    30:35:void stepOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    39:39:boolean emissiveRendering(net.minecraft.world.level.block.state.BlockState) -> m
    44:45:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    49:53:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    58:63:void randomTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> b
    67:67:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    72:73:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    77:77:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
    82:82:boolean hasPostProcess(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> h
net.minecraft.world.level.block.MelonBlock -> bst:
    5:6:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    10:10:net.minecraft.world.level.block.StemBlock getStem() -> c
    15:15:net.minecraft.world.level.block.AttachedStemBlock getAttachedStem() -> d
net.minecraft.world.level.block.Mirror -> bsu:
    net.minecraft.world.level.block.Mirror NONE -> a
    net.minecraft.world.level.block.Mirror LEFT_RIGHT -> b
    net.minecraft.world.level.block.Mirror FRONT_BACK -> c
    net.minecraft.world.level.block.Mirror[] $VALUES -> d
    5:5:net.minecraft.world.level.block.Mirror[] values() -> values
    5:5:net.minecraft.world.level.block.Mirror valueOf(java.lang.String) -> valueOf
    5:5:void <init>(java.lang.String,int) -> <init>
    12:20:int mirror(int,int) -> a
    25:26:net.minecraft.world.level.block.Rotation getRotation(net.minecraft.core.Direction) -> a
    30:36:net.minecraft.core.Direction mirror(net.minecraft.core.Direction) -> b
    5:8:void <clinit>() -> <clinit>
net.minecraft.world.level.block.Mirror$1 -> bsu$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> a
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.level.block.MushroomBlock -> bsv:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    23:24:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    28:28:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    33:55:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    59:59:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    64:71:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    75:92:boolean growMushroom(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    97:97:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    102:102:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    107:108:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    112:112:boolean hasPostProcess(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> h
    20:20:void <clinit>() -> <clinit>
net.minecraft.world.level.block.MyceliumBlock -> bsw:
    12:13:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    17:21:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
net.minecraft.world.level.block.NetherPortalBlock -> bsx:
    net.minecraft.world.level.block.state.properties.EnumProperty AXIS -> a
    net.minecraft.world.phys.shapes.VoxelShape X_AXIS_AABB -> b
    net.minecraft.world.phys.shapes.VoxelShape Z_AXIS_AABB -> c
    44:46:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    50:55:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    61:73:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    76:82:boolean trySpawnPortal(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    87:97:net.minecraft.world.level.block.NetherPortalBlock$PortalShape isPortal(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> b
    102:110:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    115:118:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    122:145:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    149:149:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    154:166:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    172:173:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    176:212:net.minecraft.world.level.block.state.pattern.BlockPattern$BlockPatternMatch getPortalShape(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> c
    31:35:void <clinit>() -> <clinit>
net.minecraft.world.level.block.NetherPortalBlock$1 -> bsx$1:
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> b
    50:154:void <clinit>() -> <clinit>
net.minecraft.world.level.block.NetherPortalBlock$PortalShape -> bsx$a:
    net.minecraft.world.level.LevelAccessor level -> a
    net.minecraft.core.Direction$Axis axis -> b
    net.minecraft.core.Direction rightDir -> c
    net.minecraft.core.Direction leftDir -> d
    int numPortalBlocks -> e
    net.minecraft.core.BlockPos bottomLeft -> f
    int height -> g
    int width -> h
    226:258:void <init>(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.Direction$Axis) -> <init>
    262:278:int getDistanceUntilEdge(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    282:282:int getHeight() -> a
    286:286:int getWidth() -> b
    291:332:int calculatePortalHeight() -> c
    337:338:boolean isEmpty(net.minecraft.world.level.block.state.BlockState) -> a
    342:342:boolean isValid() -> d
    346:352:void createPortalBlocks() -> e
    355:355:boolean hasAllPortalBlocks() -> g
    359:359:boolean isComplete() -> f
    215:215:int access$000(net.minecraft.world.level.block.NetherPortalBlock$PortalShape) -> a
    215:215:net.minecraft.core.Direction access$100(net.minecraft.world.level.block.NetherPortalBlock$PortalShape) -> b
    215:215:net.minecraft.core.BlockPos access$200(net.minecraft.world.level.block.NetherPortalBlock$PortalShape) -> c
net.minecraft.world.level.block.NetherWartBlock -> bsy:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    net.minecraft.world.phys.shapes.VoxelShape[] SHAPE_BY_AGE -> b
    29:31:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    35:35:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    40:40:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    45:52:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    56:56:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    61:62:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    19:25:void <clinit>() -> <clinit>
net.minecraft.world.level.block.NoteBlock -> bsz:
    net.minecraft.world.level.block.state.properties.EnumProperty INSTRUMENT -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> b
    net.minecraft.world.level.block.state.properties.IntegerProperty NOTE -> c
    29:31:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    35:35:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    40:43:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    48:56:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    59:62:void playNote(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    66:75:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    80:86:void attack(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    90:95:boolean triggerEvent(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,int) -> a
    100:101:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    24:26:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ObserverBlock -> bta:
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> b
    22:25:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    29:30:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    34:34:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    39:39:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    44:51:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    55:59:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    63:66:void startSignal(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    69:74:void updateNeighborsInFront(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    78:78:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    83:83:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    88:91:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    96:106:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    110:117:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    121:121:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.OreBlock -> btb:
    15:16:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    19:30:int xpOnDrop(java.util.Random) -> a
    35:43:void spawnAfterBreak(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.level.block.PipeBlock -> btc:
    net.minecraft.core.Direction[] DIRECTIONS -> i
    net.minecraft.world.level.block.state.properties.BooleanProperty NORTH -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty EAST -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty SOUTH -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty WEST -> d
    net.minecraft.world.level.block.state.properties.BooleanProperty UP -> e
    net.minecraft.world.level.block.state.properties.BooleanProperty DOWN -> f
    java.util.Map PROPERTY_BY_DIRECTION -> g
    net.minecraft.world.phys.shapes.VoxelShape[] shapeByIndex -> h
    39:42:void <init>(float,net.minecraft.world.level.block.Block$Properties) -> <init>
    45:74:net.minecraft.world.phys.shapes.VoxelShape[] makeShapes(float) -> a
    79:79:boolean propagatesSkylightDown(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    84:84:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    88:94:int getAABBIndex(net.minecraft.world.level.block.state.BlockState) -> h
    28:34:void lambda$static$0(java.util.EnumMap) -> a
    18:27:void <clinit>() -> <clinit>
net.minecraft.world.level.block.PlayerHeadBlock -> btd:
    22:23:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    27:47:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.level.block.PlayerWallHeadBlock -> bte:
    15:16:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    20:21:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    25:25:java.util.List getDrops(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.storage.loot.LootContext$Builder) -> a
net.minecraft.world.level.block.PotatoBlock -> btf:
    net.minecraft.world.phys.shapes.VoxelShape[] SHAPE_BY_AGE -> a
    24:25:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    29:29:net.minecraft.world.level.ItemLike getBaseSeedId() -> e
    34:34:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    12:20:void <clinit>() -> <clinit>
net.minecraft.world.level.block.PoweredBlock -> btg:
    11:12:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    16:16:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    21:21:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
net.minecraft.world.level.block.PoweredRailBlock -> bth:
    net.minecraft.world.level.block.state.properties.EnumProperty SHAPE -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> d
    18:20:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    23:96:boolean findPoweredRailSignal(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean,int) -> a
    100:121:boolean isSameRailWithPower(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean,int,net.minecraft.world.level.block.state.properties.RailShape) -> a
    126:140:void updateState(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block) -> a
    144:144:net.minecraft.world.level.block.state.properties.Property getShapeProperty() -> d
    149:216:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    222:263:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    268:269:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    14:15:void <clinit>() -> <clinit>
net.minecraft.world.level.block.PoweredRailBlock$1 -> bth$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$RailShape -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> b
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> c
    33:223:void <clinit>() -> <clinit>
net.minecraft.world.level.block.PressurePlateBlock -> bti:
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> d
    net.minecraft.world.level.block.PressurePlateBlock$Sensitivity sensitivity -> e
    30:33:void <init>(net.minecraft.world.level.block.PressurePlateBlock$Sensitivity,net.minecraft.world.level.block.Block$Properties) -> <init>
    37:37:int getSignalForState(net.minecraft.world.level.block.state.BlockState) -> h
    42:42:net.minecraft.world.level.block.state.BlockState setSignalForState(net.minecraft.world.level.block.state.BlockState,int) -> a
    47:52:void playOnSound(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    56:61:void playOffSound(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> b
    65:87:int getSignalStrength(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    92:93:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.world.level.block.PressurePlateBlock$1 -> bti$1:
    int[] $SwitchMap$net$minecraft$world$level$block$PressurePlateBlock$Sensitivity -> a
    68:68:void <clinit>() -> <clinit>
net.minecraft.world.level.block.PressurePlateBlock$Sensitivity -> bti$a:
    net.minecraft.world.level.block.PressurePlateBlock$Sensitivity EVERYTHING -> a
    net.minecraft.world.level.block.PressurePlateBlock$Sensitivity MOBS -> b
    net.minecraft.world.level.block.PressurePlateBlock$Sensitivity[] $VALUES -> c
    23:23:net.minecraft.world.level.block.PressurePlateBlock$Sensitivity[] values() -> values
    23:23:net.minecraft.world.level.block.PressurePlateBlock$Sensitivity valueOf(java.lang.String) -> valueOf
    23:23:void <init>(java.lang.String,int) -> <init>
    23:24:void <clinit>() -> <clinit>
net.minecraft.world.level.block.PumpkinBlock -> btj:
    19:20:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    24:54:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    59:59:net.minecraft.world.level.block.StemBlock getStem() -> c
    64:64:net.minecraft.world.level.block.AttachedStemBlock getAttachedStem() -> d
    48:48:void lambda$use$0(net.minecraft.world.InteractionHand,net.minecraft.world.entity.player.Player) -> a
net.minecraft.world.level.block.RailBlock -> btk:
    net.minecraft.world.level.block.state.properties.EnumProperty SHAPE -> c
    16:18:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    22:27:void updateState(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block) -> a
    31:31:net.minecraft.world.level.block.state.properties.Property getShapeProperty() -> d
    36:103:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    109:150:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    155:156:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    13:13:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RailBlock$1 -> btk$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$RailShape -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> b
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> c
    36:110:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RailState -> btl:
    net.minecraft.world.level.Level level -> a
    net.minecraft.core.BlockPos pos -> b
    net.minecraft.world.level.block.BaseRailBlock block -> c
    net.minecraft.world.level.block.state.BlockState state -> d
    boolean isStraight -> e
    java.util.List connections -> f
    19:29:void <init>(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> <init>
    32:32:java.util.List getConnections() -> a
    36:79:void updateConnections(net.minecraft.world.level.block.state.properties.RailShape) -> a
    82:90:void removeSoftConnections() -> d
    93:93:boolean hasRail(net.minecraft.core.BlockPos) -> a
    98:116:net.minecraft.world.level.block.RailState getRail(net.minecraft.core.BlockPos) -> b
    120:120:boolean connectsTo(net.minecraft.world.level.block.RailState) -> a
    124:130:boolean hasConnection(net.minecraft.core.BlockPos) -> c
    134:142:int countPotentialConnections() -> b
    146:146:boolean canConnectTo(net.minecraft.world.level.block.RailState) -> b
    150:207:void connectTo(net.minecraft.world.level.block.RailState) -> c
    210:216:boolean hasNeighborRail(net.minecraft.core.BlockPos) -> d
    220:340:net.minecraft.world.level.block.RailState place(boolean,boolean,net.minecraft.world.level.block.state.properties.RailShape) -> a
    344:344:net.minecraft.world.level.block.state.BlockState getState() -> c
net.minecraft.world.level.block.RailState$1 -> btl$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$RailShape -> a
    37:37:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RedStoneOreBlock -> btm:
    net.minecraft.world.level.block.state.properties.BooleanProperty LIT -> a
    26:28:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    32:32:int getLightEmission(net.minecraft.world.level.block.state.BlockState) -> a
    37:39:void attack(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    43:45:void stepOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    49:54:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    58:62:void interact(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> d
    66:69:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    73:80:void spawnAfterBreak(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    84:87:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    90:105:void spawnParticles(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    109:110:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    23:23:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RedStoneWireBlock -> btn:
    net.minecraft.world.level.block.state.properties.EnumProperty NORTH -> a
    net.minecraft.world.level.block.state.properties.EnumProperty EAST -> b
    net.minecraft.world.level.block.state.properties.EnumProperty SOUTH -> c
    net.minecraft.world.level.block.state.properties.EnumProperty WEST -> d
    net.minecraft.world.level.block.state.properties.IntegerProperty POWER -> e
    java.util.Map PROPERTY_BY_DIRECTION -> f
    net.minecraft.world.phys.shapes.VoxelShape[] SHAPE_BY_INDEX -> g
    boolean shouldSignal -> h
    java.util.Set toUpdate -> i
    73:79:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    83:83:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    87:105:int getAABBIndex(net.minecraft.world.level.block.state.BlockState) -> i
    110:117:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    122:133:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    138:160:void updateIndirectNeighbourShapes(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,int) -> b
    163:185:net.minecraft.world.level.block.state.properties.RedstoneSide getConnectingSide(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    190:192:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    196:204:net.minecraft.world.level.block.state.BlockState updatePowerStrength(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    208:250:net.minecraft.world.level.block.state.BlockState updatePowerStrengthImpl(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    254:262:void checkCornerChangeAt(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    266:289:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    293:319:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    322:329:int checkTarget(int,net.minecraft.world.level.block.state.BlockState) -> a
    334:344:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    348:351:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    356:384:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    388:407:boolean isPowerSourceAt(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    411:411:boolean shouldConnectTo(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    415:415:boolean shouldConnectTo(net.minecraft.world.level.block.state.BlockState) -> h
    419:433:boolean shouldConnectTo(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction) -> a
    438:438:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    442:460:int getColorForData(int) -> b
    465:481:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    485:493:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    499:507:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    512:513:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    34:70:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RedStoneWireBlock$1 -> btn$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> b
    485:499:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RedstoneLampBlock -> bto:
    net.minecraft.world.level.block.state.properties.BooleanProperty LIT -> a
    20:22:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    26:26:int getLightEmission(net.minecraft.world.level.block.state.BlockState) -> a
    31:32:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    37:37:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    42:54:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    58:61:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    65:66:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    70:70:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
    17:17:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RedstoneTorchBlock -> btp:
    net.minecraft.world.level.block.state.properties.BooleanProperty LIT -> a
    java.util.Map RECENT_TOGGLES -> b
    33:35:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    39:39:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    44:47:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    51:58:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    62:66:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    70:70:boolean hasNeighborSignal(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    75:76:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    80:99:void handleTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random,boolean) -> a
    103:106:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    110:113:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    118:118:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    123:132:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    136:136:int getLightEmission(net.minecraft.world.level.block.state.BlockState) -> a
    141:142:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    155:171:boolean isToggledTooFrequently(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean) -> a
    155:155:java.util.List lambda$isToggledTooFrequently$0(net.minecraft.world.level.BlockGetter) -> a
    23:26:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RedstoneTorchBlock$Toggle -> btp$a:
    net.minecraft.core.BlockPos pos -> a
    long when -> b
    148:151:void <init>(net.minecraft.core.BlockPos,long) -> <init>
    144:144:long access$000(net.minecraft.world.level.block.RedstoneTorchBlock$Toggle) -> a
    144:144:net.minecraft.core.BlockPos access$100(net.minecraft.world.level.block.RedstoneTorchBlock$Toggle) -> b
net.minecraft.world.level.block.RedstoneWallTorchBlock -> btq:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty LIT -> c
    27:29:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    33:33:java.lang.String getDescriptionId() -> k
    38:38:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    43:43:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    48:48:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    54:55:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    60:71:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    75:77:boolean hasNeighborSignal(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    82:86:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    91:91:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    96:96:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    101:102:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    23:24:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RenderShape -> btr:
    net.minecraft.world.level.block.RenderShape INVISIBLE -> a
    net.minecraft.world.level.block.RenderShape ENTITYBLOCK_ANIMATED -> b
    net.minecraft.world.level.block.RenderShape MODEL -> c
    net.minecraft.world.level.block.RenderShape[] $VALUES -> d
    3:3:net.minecraft.world.level.block.RenderShape[] values() -> values
    3:3:net.minecraft.world.level.block.RenderShape valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:4:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RepeaterBlock -> bts:
    net.minecraft.world.level.block.state.properties.BooleanProperty LOCKED -> a
    net.minecraft.world.level.block.state.properties.IntegerProperty DELAY -> d
    28:30:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    34:39:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    44:44:int getDelay(net.minecraft.world.level.block.state.BlockState) -> h
    49:50:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    56:59:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    64:64:boolean isLocked(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    69:69:boolean isAlternateInput(net.minecraft.world.level.block.state.BlockState) -> i
    74:93:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    97:98:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    24:25:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RotatedPillarBlock -> btt:
    net.minecraft.world.level.block.state.properties.EnumProperty AXIS -> a
    14:16:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    20:32:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    38:39:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    43:43:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    11:11:void <clinit>() -> <clinit>
net.minecraft.world.level.block.RotatedPillarBlock$1 -> btt$1:
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> b
    20:23:void <clinit>() -> <clinit>
net.minecraft.world.level.block.Rotation -> btu:
    net.minecraft.world.level.block.Rotation NONE -> a
    net.minecraft.world.level.block.Rotation CLOCKWISE_90 -> b
    net.minecraft.world.level.block.Rotation CLOCKWISE_180 -> c
    net.minecraft.world.level.block.Rotation COUNTERCLOCKWISE_90 -> d
    net.minecraft.world.level.block.Rotation[] $VALUES -> e
    10:10:net.minecraft.world.level.block.Rotation[] values() -> values
    10:10:net.minecraft.world.level.block.Rotation valueOf(java.lang.String) -> valueOf
    10:10:void <init>(java.lang.String,int) -> <init>
    18:53:net.minecraft.world.level.block.Rotation getRotated(net.minecraft.world.level.block.Rotation) -> a
    58:69:net.minecraft.core.Direction rotate(net.minecraft.core.Direction) -> a
    74:82:int rotate(int,int) -> a
    87:88:net.minecraft.world.level.block.Rotation getRandom(java.util.Random) -> a
    92:94:java.util.List getShuffled(java.util.Random) -> b
    10:14:void <clinit>() -> <clinit>
net.minecraft.world.level.block.Rotation$1 -> btu$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SandBlock -> btv:
    int dustColor -> a
    9:11:void <init>(int,net.minecraft.world.level.block.Block$Properties) -> <init>
    15:15:int getDustColor(net.minecraft.world.level.block.state.BlockState) -> i
net.minecraft.world.level.block.SaplingBlock -> btw:
    net.minecraft.world.level.block.state.properties.IntegerProperty STAGE -> a
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    net.minecraft.world.level.block.grower.AbstractTreeGrower treeGrower -> c
    26:29:void <init>(net.minecraft.world.level.block.grower.AbstractTreeGrower,net.minecraft.world.level.block.Block$Properties) -> <init>
    33:33:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    38:45:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    48:53:void advanceTree(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    57:57:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    62:62:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    67:68:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    72:73:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    18:21:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ScaffoldingBlock -> btx:
    net.minecraft.world.phys.shapes.VoxelShape STABLE_SHAPE -> d
    net.minecraft.world.phys.shapes.VoxelShape UNSTABLE_SHAPE -> e
    net.minecraft.world.phys.shapes.VoxelShape UNSTABLE_SHAPE_BOTTOM -> f
    net.minecraft.world.phys.shapes.VoxelShape BELOW_BLOCK -> g
    net.minecraft.world.level.block.state.properties.IntegerProperty DISTANCE -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty BOTTOM -> c
    54:56:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    60:61:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    65:68:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    73:73:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> j
    78:78:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.BlockPlaceContext) -> a
    83:90:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    95:98:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    102:110:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    115:131:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    135:135:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    140:146:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    151:154:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    158:158:boolean isBottom(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,int) -> a
    162:185:int getDistance(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    30:51:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SeaPickleBlock -> bty:
    net.minecraft.world.level.block.state.properties.IntegerProperty PICKLES -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> b
    net.minecraft.world.phys.shapes.VoxelShape ONE_AABB -> c
    net.minecraft.world.phys.shapes.VoxelShape TWO_AABB -> d
    net.minecraft.world.phys.shapes.VoxelShape THREE_AABB -> e
    net.minecraft.world.phys.shapes.VoxelShape FOUR_AABB -> f
    37:39:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    43:43:int getLightEmission(net.minecraft.world.level.block.state.BlockState) -> a
    49:56:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    60:60:boolean isDead(net.minecraft.world.level.block.state.BlockState) -> h
    65:65:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    70:71:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    76:84:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    89:92:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.BlockPlaceContext) -> a
    97:106:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    112:116:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    121:122:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    126:126:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    131:131:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    136:175:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    28:34:void <clinit>() -> <clinit>
net.minecraft.world.level.block.Seagrass -> btz:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    27:28:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    32:32:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    37:37:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    43:48:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    53:57:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    62:62:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    67:67:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    72:72:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    77:84:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    88:88:boolean canPlaceLiquid(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
    93:93:boolean placeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState) -> a
    24:24:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ShearableDoublePlantBlock -> bua:
    net.minecraft.world.level.block.state.properties.EnumProperty HALF -> b
    12:13:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    17:21:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.BlockPlaceContext) -> a
    9:9:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ShulkerBoxBlock -> bub:
    net.minecraft.world.level.block.state.properties.EnumProperty FACING -> a
    net.minecraft.resources.ResourceLocation CONTENTS -> b
    net.minecraft.world.item.DyeColor color -> c
    56:59:void <init>(net.minecraft.world.item.DyeColor,net.minecraft.world.level.block.Block$Properties) -> <init>
    63:63:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    68:68:boolean isSuffocating(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> c
    73:73:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    78:115:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    120:120:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    125:126:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    130:154:void playerWillDestroy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player) -> a
    158:168:java.util.List getDrops(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.storage.loot.LootContext$Builder) -> a
    173:179:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    183:193:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    197:229:void appendHoverText(net.minecraft.world.item.ItemStack,net.minecraft.world.level.BlockGetter,java.util.List,net.minecraft.world.item.TooltipFlag) -> a
    233:233:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    238:242:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    247:247:boolean hasAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState) -> b
    252:252:int getAnalogOutputSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    259:265:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    270:270:net.minecraft.world.item.DyeColor getColorFromItem(net.minecraft.world.item.Item) -> b
    275:278:net.minecraft.world.item.DyeColor getColorFromBlock(net.minecraft.world.level.block.Block) -> d
    283:319:net.minecraft.world.level.block.Block getBlockByColor(net.minecraft.world.item.DyeColor) -> a
    325:325:net.minecraft.world.item.DyeColor getColor() -> c
    329:329:net.minecraft.world.item.ItemStack getColoredItemStack(net.minecraft.world.item.DyeColor) -> b
    334:334:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    339:339:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    163:165:void lambda$getDrops$0(net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity,net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> a
    48:50:void <clinit>() -> <clinit>
net.minecraft.world.level.block.ShulkerBoxBlock$1 -> bub$1:
    int[] $SwitchMap$net$minecraft$world$item$DyeColor -> a
    286:286:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SignBlock -> buc:
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> a
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    net.minecraft.world.level.block.state.properties.WoodType type -> c
    32:34:void <init>(net.minecraft.world.level.block.Block$Properties,net.minecraft.world.level.block.state.properties.WoodType) -> <init>
    38:42:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    47:47:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    52:52:boolean isPossibleToRespawnInThis() -> Y_
    57:57:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    62:82:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    87:90:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    94:94:net.minecraft.world.level.block.state.properties.WoodType type() -> c
    26:28:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SimpleWaterloggedBlock -> bud:
    15:15:boolean canPlaceLiquid(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
    20:27:boolean placeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState) -> a
    32:36:net.minecraft.world.level.material.Fluid takeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
net.minecraft.world.level.block.SkullBlock -> bue:
    net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION -> a
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    30:32:void <init>(net.minecraft.world.level.block.SkullBlock$Type,net.minecraft.world.level.block.Block$Properties) -> <init>
    36:36:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    41:41:net.minecraft.world.phys.shapes.VoxelShape getOcclusionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> i
    46:46:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    51:51:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    56:56:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    61:62:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    25:27:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SkullBlock$Type -> bue$a:
net.minecraft.world.level.block.SkullBlock$Types -> bue$b:
    net.minecraft.world.level.block.SkullBlock$Types SKELETON -> a
    net.minecraft.world.level.block.SkullBlock$Types WITHER_SKELETON -> b
    net.minecraft.world.level.block.SkullBlock$Types PLAYER -> c
    net.minecraft.world.level.block.SkullBlock$Types ZOMBIE -> d
    net.minecraft.world.level.block.SkullBlock$Types CREEPER -> e
    net.minecraft.world.level.block.SkullBlock$Types DRAGON -> f
    net.minecraft.world.level.block.SkullBlock$Types[] $VALUES -> g
    18:18:net.minecraft.world.level.block.SkullBlock$Types[] values() -> values
    18:18:net.minecraft.world.level.block.SkullBlock$Types valueOf(java.lang.String) -> valueOf
    18:18:void <init>(java.lang.String,int) -> <init>
    18:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SlabBlock -> buf:
    net.minecraft.world.level.block.state.properties.EnumProperty TYPE -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> b
    net.minecraft.world.phys.shapes.VoxelShape BOTTOM_AABB -> c
    net.minecraft.world.phys.shapes.VoxelShape TOP_AABB -> d
    34:37:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    41:41:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    46:47:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    51:58:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    65:78:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    83:99:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.BlockPlaceContext) -> a
    104:107:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    112:115:boolean placeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState) -> a
    120:123:boolean canPlaceLiquid(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
    128:131:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    136:144:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    27:31:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SlabBlock$1 -> buf$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$SlabType -> a
    int[] $SwitchMap$net$minecraft$world$level$pathfinder$PathComputationType -> b
    52:136:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SlimeBlock -> bug:
    12:13:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    17:23:void fallOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity,float) -> a
    27:32:void updateEntityAfterFallOn(net.minecraft.world.level.BlockGetter,net.minecraft.world.entity.Entity) -> a
    35:45:void bounceUp(net.minecraft.world.entity.Entity) -> a
    49:55:void stepOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
net.minecraft.world.level.block.SmithingTableBlock -> buh:
    13:14:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    18:18:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
net.minecraft.world.level.block.SmokerBlock -> bui:
    20:21:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    25:25:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    30:35:void openContainer(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    39:52:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
net.minecraft.world.level.block.SnowLayerBlock -> buj:
    net.minecraft.world.level.block.state.properties.IntegerProperty LAYERS -> a
    net.minecraft.world.phys.shapes.VoxelShape[] SHAPE_BY_LAYER -> b
    42:44:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    48:56:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    62:62:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    67:67:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    72:72:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    77:87:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    92:95:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    100:104:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    108:117:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.BlockPlaceContext) -> a
    123:129:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    134:135:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    25:36:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SnowLayerBlock$1 -> buj$1:
    int[] $SwitchMap$net$minecraft$world$level$pathfinder$PathComputationType -> a
    48:48:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SnowyDirtBlock -> buk:
    net.minecraft.world.level.block.state.properties.BooleanProperty SNOWY -> a
    16:18:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    22:26:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    31:32:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    37:38:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    13:13:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SoulsandBlock -> bul:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    20:21:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    25:25:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    30:31:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    35:36:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    40:40:boolean isRedstoneConductor(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> d
    45:45:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    50:51:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    55:55:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    60:60:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
    65:65:boolean isViewBlocking(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> f
    17:17:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SoundType -> bum:
    net.minecraft.world.level.block.SoundType WOOD -> a
    net.minecraft.world.level.block.SoundType GRAVEL -> b
    net.minecraft.world.level.block.SoundType GRASS -> c
    net.minecraft.world.level.block.SoundType STONE -> d
    net.minecraft.world.level.block.SoundType METAL -> e
    net.minecraft.world.level.block.SoundType GLASS -> f
    net.minecraft.world.level.block.SoundType WOOL -> g
    net.minecraft.world.level.block.SoundType SAND -> h
    net.minecraft.world.level.block.SoundType SNOW -> i
    net.minecraft.world.level.block.SoundType LADDER -> j
    net.minecraft.world.level.block.SoundType ANVIL -> k
    net.minecraft.world.level.block.SoundType SLIME_BLOCK -> l
    net.minecraft.world.level.block.SoundType HONEY_BLOCK -> m
    net.minecraft.world.level.block.SoundType WET_GRASS -> n
    net.minecraft.world.level.block.SoundType CORAL_BLOCK -> o
    net.minecraft.world.level.block.SoundType BAMBOO -> p
    net.minecraft.world.level.block.SoundType BAMBOO_SAPLING -> q
    net.minecraft.world.level.block.SoundType SCAFFOLDING -> r
    net.minecraft.world.level.block.SoundType SWEET_BERRY_BUSH -> s
    net.minecraft.world.level.block.SoundType CROP -> t
    net.minecraft.world.level.block.SoundType HARD_CROP -> u
    net.minecraft.world.level.block.SoundType NETHER_WART -> v
    net.minecraft.world.level.block.SoundType LANTERN -> w
    float volume -> x
    float pitch -> y
    net.minecraft.sounds.SoundEvent breakSound -> z
    net.minecraft.sounds.SoundEvent stepSound -> A
    net.minecraft.sounds.SoundEvent placeSound -> B
    net.minecraft.sounds.SoundEvent hitSound -> C
    net.minecraft.sounds.SoundEvent fallSound -> D
    40:49:void <init>(float,float,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundEvent,net.minecraft.sounds.SoundEvent) -> <init>
    52:52:float getVolume() -> a
    56:56:float getPitch() -> b
    60:60:net.minecraft.sounds.SoundEvent getBreakSound() -> c
    64:64:net.minecraft.sounds.SoundEvent getStepSound() -> d
    68:68:net.minecraft.sounds.SoundEvent getPlaceSound() -> e
    72:72:net.minecraft.sounds.SoundEvent getHitSound() -> f
    76:76:net.minecraft.sounds.SoundEvent getFallSound() -> g
    7:29:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SpawnerBlock -> bun:
    13:14:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    18:18:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    23:27:void spawnAfterBreak(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    31:31:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    36:36:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.level.block.SpongeBlock -> buo:
    22:23:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    27:31:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    35:37:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    40:45:void tryAbsorbWater(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    48:89:boolean removeWaterBreadthFirstSearch(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
net.minecraft.world.level.block.SpreadingSnowyDirtBlock -> bup:
    18:19:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    22:30:boolean canBeGrass(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> b
    34:35:boolean canPropagate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> c
    40:55:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
net.minecraft.world.level.block.StainedGlassBlock -> buq:
    net.minecraft.world.item.DyeColor color -> a
    9:11:void <init>(net.minecraft.world.item.DyeColor,net.minecraft.world.level.block.Block$Properties) -> <init>
    15:15:net.minecraft.world.item.DyeColor getColor() -> a
net.minecraft.world.level.block.StainedGlassPaneBlock -> bur:
    net.minecraft.world.item.DyeColor color -> i
    9:12:void <init>(net.minecraft.world.item.DyeColor,net.minecraft.world.level.block.Block$Properties) -> <init>
    16:16:net.minecraft.world.item.DyeColor getColor() -> a
net.minecraft.world.level.block.StairBlock -> bus:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.EnumProperty HALF -> b
    net.minecraft.world.level.block.state.properties.EnumProperty SHAPE -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> d
    net.minecraft.world.phys.shapes.VoxelShape TOP_AABB -> e
    net.minecraft.world.phys.shapes.VoxelShape BOTTOM_AABB -> f
    net.minecraft.world.phys.shapes.VoxelShape OCTET_NNN -> g
    net.minecraft.world.phys.shapes.VoxelShape OCTET_NNP -> h
    net.minecraft.world.phys.shapes.VoxelShape OCTET_NPN -> i
    net.minecraft.world.phys.shapes.VoxelShape OCTET_NPP -> j
    net.minecraft.world.phys.shapes.VoxelShape OCTET_PNN -> k
    net.minecraft.world.phys.shapes.VoxelShape OCTET_PNP -> w
    net.minecraft.world.phys.shapes.VoxelShape OCTET_PPN -> x
    net.minecraft.world.phys.shapes.VoxelShape OCTET_PPP -> y
    net.minecraft.world.phys.shapes.VoxelShape[] TOP_SHAPES -> z
    net.minecraft.world.phys.shapes.VoxelShape[] BOTTOM_SHAPES -> A
    int[] SHAPE_BY_STATE -> B
    net.minecraft.world.level.block.Block base -> C
    net.minecraft.world.level.block.state.BlockState baseState -> D
    57:57:net.minecraft.world.phys.shapes.VoxelShape[] makeShapes(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape) -> a
    61:74:net.minecraft.world.phys.shapes.VoxelShape makeStairShape(int,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape) -> a
    89:93:void <init>(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Block$Properties) -> <init>
    97:97:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    102:102:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    106:106:int getShapeIndex(net.minecraft.world.level.block.state.BlockState) -> i
    111:112:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    116:117:void attack(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    121:122:void destroy(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    126:126:float getExplosionResistance() -> h
    131:131:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    136:141:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    145:149:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    153:154:void prepareRender(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> d
    158:159:void stepOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    163:164:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    168:168:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    173:174:void wasExploded(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.Explosion) -> a
    178:187:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    192:198:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    202:225:net.minecraft.world.level.block.state.properties.StairsShape getStairsShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> n
    229:230:boolean canTakeShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> e
    234:234:boolean isStairs(net.minecraft.world.level.block.state.BlockState) -> h
    239:239:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    244:282:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    287:288:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    292:295:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    300:300:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    57:57:net.minecraft.world.phys.shapes.VoxelShape[] lambda$makeShapes$1(int) -> b
    57:57:net.minecraft.world.phys.shapes.VoxelShape lambda$makeShapes$0(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,int) -> a
    36:77:void <clinit>() -> <clinit>
net.minecraft.world.level.block.StairBlock$1 -> bus$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$StairsShape -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> b
    246:249:void <clinit>() -> <clinit>
net.minecraft.world.level.block.StandingSignBlock -> but:
    net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION -> c
    21:23:void <init>(net.minecraft.world.level.block.Block$Properties,net.minecraft.world.level.block.state.properties.WoodType) -> <init>
    27:27:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    32:33:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    38:41:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    46:46:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    51:51:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    56:57:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.level.block.StemBlock -> buu:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    net.minecraft.world.phys.shapes.VoxelShape[] SHAPE_BY_AGE -> b
    net.minecraft.world.level.block.StemGrownBlock fruit -> c
    41:44:void <init>(net.minecraft.world.level.block.StemGrownBlock,net.minecraft.world.level.block.Block$Properties) -> <init>
    48:48:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    53:53:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    58:80:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    84:92:net.minecraft.world.item.Item getSeedItem() -> c
    97:99:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    104:104:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    109:109:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    114:120:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    124:125:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    128:128:net.minecraft.world.level.block.StemGrownBlock getFruit() -> d
    24:35:void <clinit>() -> <clinit>
net.minecraft.world.level.block.StemGrownBlock -> buv:
    5:6:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    net.minecraft.world.level.block.StemBlock getStem() -> c
    net.minecraft.world.level.block.AttachedStemBlock getAttachedStem() -> d
net.minecraft.world.level.block.StoneButtonBlock -> buw:
    8:9:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    13:13:net.minecraft.sounds.SoundEvent getSound(boolean) -> a
net.minecraft.world.level.block.StonecutterBlock -> bux:
    net.minecraft.network.chat.TranslatableComponent CONTAINER_TITLE -> c
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    34:36:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    40:40:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    45:52:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    58:58:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    63:63:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    68:68:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    73:73:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    78:78:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    83:83:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    88:89:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    93:93:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    58:58:net.minecraft.world.inventory.AbstractContainerMenu lambda$getMenuProvider$0(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> a
    28:31:void <clinit>() -> <clinit>
net.minecraft.world.level.block.StructureBlock -> buy:
    net.minecraft.world.level.block.state.properties.EnumProperty MODE -> a
    27:28:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    32:32:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    37:42:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    47:56:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    60:60:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    65:65:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    70:71:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    75:95:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    98:114:void trigger(net.minecraft.world.level.block.entity.StructureBlockEntity) -> a
    24:24:void <clinit>() -> <clinit>
net.minecraft.world.level.block.StructureBlock$1 -> buy$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$StructureMode -> a
    98:98:void <clinit>() -> <clinit>
net.minecraft.world.level.block.StructureVoidBlock -> buz:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    15:16:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    20:20:net.minecraft.world.level.block.RenderShape getRenderShape(net.minecraft.world.level.block.state.BlockState) -> c
    25:25:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    30:30:float getShadeBrightness(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    35:35:net.minecraft.world.level.material.PushReaction getPistonPushReaction(net.minecraft.world.level.block.state.BlockState) -> g
    12:12:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SugarCaneBlock -> bva:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> b
    27:29:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    33:33:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    38:55:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    59:63:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    68:84:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    89:90:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    21:24:void <clinit>() -> <clinit>
net.minecraft.world.level.block.SweetBerryBushBlock -> bvb:
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE -> a
    net.minecraft.world.phys.shapes.VoxelShape SAPLING_SHAPE -> b
    net.minecraft.world.phys.shapes.VoxelShape MID_GROWTH_SHAPE -> c
    38:40:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    44:44:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    49:55:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    60:65:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    69:83:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    87:102:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    107:108:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    112:112:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    117:117:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    122:124:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    32:35:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TallFlowerBlock -> bvc:
    15:16:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    21:21:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.BlockPlaceContext) -> a
    26:26:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    31:31:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    36:37:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.level.block.TallGrassBlock -> bvd:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    18:19:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    23:23:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    28:28:boolean isValidBonemealTarget(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    33:33:boolean isBonemealSuccess(net.minecraft.world.level.Level,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    38:43:void performBonemeal(net.minecraft.server.level.ServerLevel,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    47:47:net.minecraft.world.level.block.Block$OffsetType getOffsetType() -> X_
    15:15:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TallSeagrass -> bve:
    net.minecraft.world.level.block.state.properties.EnumProperty HALF -> c
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> d
    29:30:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    34:34:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    39:39:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    44:44:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    50:59:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    64:70:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    75:75:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    80:80:boolean canPlaceLiquid(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
    85:85:boolean placeLiquid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState) -> a
    23:26:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TntBlock -> bvf:
    net.minecraft.world.level.block.state.properties.BooleanProperty UNSTABLE -> a
    30:32:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    36:43:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    47:51:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    55:60:void playerWillDestroy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player) -> a
    64:71:void wasExploded(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.Explosion) -> a
    74:75:void explode(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    78:84:void explode(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.LivingEntity) -> a
    88:103:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    108:117:void onProjectileHit(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.BlockHitResult,net.minecraft.world.entity.Entity) -> a
    121:121:boolean dropFromExplosion(net.minecraft.world.level.Explosion) -> a
    126:127:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    96:96:void lambda$use$0(net.minecraft.world.InteractionHand,net.minecraft.world.entity.player.Player) -> a
    27:27:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TorchBlock -> bvg:
    net.minecraft.world.phys.shapes.VoxelShape AABB -> d
    21:22:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    26:26:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    31:34:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    39:39:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    44:49:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TrapDoorBlock -> bvh:
    net.minecraft.world.level.block.state.properties.BooleanProperty OPEN -> a
    net.minecraft.world.level.block.state.properties.EnumProperty HALF -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> d
    net.minecraft.world.phys.shapes.VoxelShape EAST_OPEN_AABB -> e
    net.minecraft.world.phys.shapes.VoxelShape WEST_OPEN_AABB -> f
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_OPEN_AABB -> g
    net.minecraft.world.phys.shapes.VoxelShape NORTH_OPEN_AABB -> h
    net.minecraft.world.phys.shapes.VoxelShape BOTTOM_AABB -> i
    net.minecraft.world.phys.shapes.VoxelShape TOP_AABB -> j
    44:46:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    50:63:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    69:77:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    83:95:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    99:106:void playSound(net.minecraft.world.entity.player.Player,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean) -> a
    110:126:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    130:142:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    147:148:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    152:155:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.world.level.block.state.BlockState) -> a_
    160:164:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    169:169:boolean isValidSpawn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
    30:41:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TrapDoorBlock$1 -> bvh$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    int[] $SwitchMap$net$minecraft$world$level$pathfinder$PathComputationType -> b
    54:69:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TrappedChestBlock -> bvi:
    19:20:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    24:24:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    29:29:net.minecraft.stats.Stat getOpenChestStat() -> c
    34:34:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    39:39:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    44:48:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    19:19:net.minecraft.world.level.block.entity.BlockEntityType lambda$new$0() -> e
net.minecraft.world.level.block.TripWireBlock -> bvj:
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty ATTACHED -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty DISARMED -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty NORTH -> d
    net.minecraft.world.level.block.state.properties.BooleanProperty EAST -> e
    net.minecraft.world.level.block.state.properties.BooleanProperty SOUTH -> f
    net.minecraft.world.level.block.state.properties.BooleanProperty WEST -> g
    java.util.Map PROPERTY_BY_DIRECTION -> j
    net.minecraft.world.phys.shapes.VoxelShape AABB -> h
    net.minecraft.world.phys.shapes.VoxelShape NOT_ATTACHED_AABB -> i
    net.minecraft.world.level.block.TripWireHookBlock hook -> k
    41:44:void <init>(net.minecraft.world.level.block.TripWireHookBlock,net.minecraft.world.level.block.Block$Properties) -> <init>
    48:48:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    53:60:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    65:68:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    73:77:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    81:85:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    89:93:void playerWillDestroy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player) -> a
    96:112:void updateSource(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    116:125:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    129:134:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    137:160:void checkPressed(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    163:169:boolean shouldConnectTo(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction) -> a
    174:182:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    188:196:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    201:202:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    25:36:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TripWireBlock$1 -> bvj$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> b
    174:188:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TripWireHookBlock -> bvk:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty ATTACHED -> c
    net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> d
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> e
    net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> f
    net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> g
    43:45:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    49:58:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    64:67:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    72:75:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    81:100:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    105:106:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    109:183:void calculateState(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean,boolean,int,net.minecraft.world.level.block.state.BlockState) -> a
    187:188:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    191:200:void playSound(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,boolean,boolean,boolean,boolean) -> a
    203:205:void notifyNeighbors(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    209:225:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    229:229:int getSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    234:242:int getDirectSignal(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    247:247:boolean isSignalSource(net.minecraft.world.level.block.state.BlockState) -> f
    252:252:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    257:257:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    262:263:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    29:40:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TripWireHookBlock$1 -> bvk$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    49:49:void <clinit>() -> <clinit>
net.minecraft.world.level.block.TurtleEggBlock -> bvl:
    net.minecraft.world.phys.shapes.VoxelShape ONE_EGG_AABB -> c
    net.minecraft.world.phys.shapes.VoxelShape MULTIPLE_EGGS_AABB -> d
    net.minecraft.world.level.block.state.properties.IntegerProperty HATCH -> a
    net.minecraft.world.level.block.state.properties.IntegerProperty EGGS -> b
    41:43:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    47:49:void stepOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    53:58:void fallOn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity,float) -> a
    61:69:void destroyEgg(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity,int) -> a
    72:82:void decreaseEggs(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    86:108:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    111:111:boolean onSand(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    116:119:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    122:127:boolean shouldUpdateHatchLevel(net.minecraft.world.level.Level) -> a
    132:135:void playerDestroy(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.entity.BlockEntity,net.minecraft.world.item.ItemStack) -> a
    139:142:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.BlockPlaceContext) -> a
    148:153:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    158:162:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    167:168:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    171:179:boolean canDestroyEgg(net.minecraft.world.level.Level,net.minecraft.world.entity.Entity) -> a
    34:38:void <clinit>() -> <clinit>
net.minecraft.world.level.block.VineBlock -> bvm:
    net.minecraft.world.level.block.state.properties.BooleanProperty UP -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty NORTH -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty EAST -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty SOUTH -> d
    net.minecraft.world.level.block.state.properties.BooleanProperty WEST -> e
    java.util.Map PROPERTY_BY_DIRECTION -> f
    net.minecraft.world.phys.shapes.VoxelShape UP_AABB -> g
    net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> h
    net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> i
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> j
    net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> k
    40:42:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    46:63:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    68:68:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    72:72:boolean hasFaces(net.minecraft.world.level.block.state.BlockState) -> h
    76:83:int countFaces(net.minecraft.world.level.block.state.BlockState) -> i
    87:102:boolean canSupportAtFace(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    106:108:boolean isAcceptableNeighbour(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    112:133:net.minecraft.world.level.block.state.BlockState getUpdatedState(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> n
    138:148:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    153:252:void tick(net.minecraft.world.level.block.state.BlockState,net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    255:263:net.minecraft.world.level.block.state.BlockState copyRandomFaces(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    267:267:boolean hasHorizontalConnection(net.minecraft.world.level.block.state.BlockState) -> r
    271:286:boolean canSpread(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    291:296:boolean canBeReplaced(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.BlockPlaceContext) -> a
    302:316:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    321:322:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    326:334:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    340:348:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    352:352:net.minecraft.world.level.block.state.properties.BooleanProperty getPropertyForFace(net.minecraft.core.Direction) -> a
    30:30:boolean lambda$static$0(java.util.Map$Entry) -> a
    24:37:void <clinit>() -> <clinit>
net.minecraft.world.level.block.VineBlock$1 -> bvm$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> b
    326:340:void <clinit>() -> <clinit>
net.minecraft.world.level.block.WallBannerBlock -> bvn:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    java.util.Map SHAPES -> b
    31:33:void <init>(net.minecraft.world.item.DyeColor,net.minecraft.world.level.block.Block$Properties) -> <init>
    37:37:java.lang.String getDescriptionId() -> k
    43:43:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    48:52:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    57:57:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    62:81:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    86:86:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    91:91:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    96:97:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    21:27:void <clinit>() -> <clinit>
net.minecraft.world.level.block.WallBlock -> bvo:
    net.minecraft.world.level.block.state.properties.BooleanProperty UP -> i
    net.minecraft.world.phys.shapes.VoxelShape[] shapeWithPostByIndex -> j
    net.minecraft.world.phys.shapes.VoxelShape[] collisionShapeWithPostByIndex -> k
    27:32:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    36:39:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    44:47:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    52:52:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    56:59:boolean connectsTo(net.minecraft.world.level.block.state.BlockState,boolean,net.minecraft.core.Direction) -> a
    64:91:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    96:111:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    116:117:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    21:21:void <clinit>() -> <clinit>
net.minecraft.world.level.block.WallSignBlock -> bvp:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> c
    java.util.Map AABBS -> d
    38:40:void <init>(net.minecraft.world.level.block.Block$Properties,net.minecraft.world.level.block.state.properties.WoodType) -> <init>
    44:44:java.lang.String getDescriptionId() -> k
    49:49:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    54:54:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    60:80:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    85:88:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    93:93:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    98:98:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    103:104:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    24:34:void <clinit>() -> <clinit>
net.minecraft.world.level.block.WallSkullBlock -> bvq:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    java.util.Map AABBS -> b
    28:30:void <init>(net.minecraft.world.level.block.SkullBlock$Type,net.minecraft.world.level.block.Block$Properties) -> <init>
    34:34:java.lang.String getDescriptionId() -> k
    39:39:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    44:63:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    68:68:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    73:73:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    78:79:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    18:24:void <clinit>() -> <clinit>
net.minecraft.world.level.block.WallTorchBlock -> bvr:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    java.util.Map AABBS -> b
    35:37:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    41:41:java.lang.String getDescriptionId() -> k
    46:46:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    50:50:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState) -> h
    55:59:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    65:84:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    89:92:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    97:107:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    111:111:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    116:116:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    121:122:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    24:31:void <clinit>() -> <clinit>
net.minecraft.world.level.block.WaterlilyBlock -> bvs:
    net.minecraft.world.phys.shapes.VoxelShape AABB -> a
    20:21:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    25:30:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    34:34:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    39:40:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    17:17:void <clinit>() -> <clinit>
net.minecraft.world.level.block.WebBlock -> bvt:
    11:12:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    16:17:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
net.minecraft.world.level.block.WeightedPressurePlateBlock -> bvu:
    net.minecraft.world.level.block.state.properties.IntegerProperty POWER -> d
    int maxWeight -> e
    24:27:void <init>(int,net.minecraft.world.level.block.Block$Properties) -> <init>
    31:37:int getSignalStrength(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    42:43:void playOnSound(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    47:48:void playOffSound(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> b
    52:52:int getSignalForState(net.minecraft.world.level.block.state.BlockState) -> h
    57:57:net.minecraft.world.level.block.state.BlockState setSignalForState(net.minecraft.world.level.block.state.BlockState,int) -> a
    62:62:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    67:68:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.WetSpongeBlock -> bvv:
    16:17:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    21:26:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    30:70:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
net.minecraft.world.level.block.WitherRoseBlock -> bvw:
    24:25:void <init>(net.minecraft.world.effect.MobEffect,net.minecraft.world.level.block.Block$Properties) -> <init>
    29:30:boolean mayPlaceOn(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a_
    35:44:void animateTick(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    48:58:void entityInside(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
net.minecraft.world.level.block.WitherSkullBlock -> bvx:
    net.minecraft.world.level.block.state.pattern.BlockPattern witherPatternFull -> c
    net.minecraft.world.level.block.state.pattern.BlockPattern witherPatternBase -> d
    34:35:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    39:45:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    48:88:void checkSpawn(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.SkullBlockEntity) -> a
    91:95:boolean canSpawnMob(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> b
    99:114:net.minecraft.world.level.block.state.pattern.BlockPattern getOrCreateWitherFull() -> c
    118:130:net.minecraft.world.level.block.state.pattern.BlockPattern getOrCreateWitherBase() -> d
net.minecraft.world.level.block.WitherWallSkullBlock -> bvy:
    13:14:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    18:19:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.level.block.WoodButtonBlock -> bvz:
    8:9:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    13:13:net.minecraft.sounds.SoundEvent getSound(boolean) -> a
net.minecraft.world.level.block.WoolCarpetBlock -> bwa:
    net.minecraft.world.phys.shapes.VoxelShape SHAPE -> a
    net.minecraft.world.item.DyeColor color -> b
    19:21:void <init>(net.minecraft.world.item.DyeColor,net.minecraft.world.level.block.Block$Properties) -> <init>
    24:24:net.minecraft.world.item.DyeColor getColor() -> c
    29:29:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    34:38:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    43:43:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity -> bwb:
    int[] SLOTS_FOR_UP -> g
    int[] SLOTS_FOR_DOWN -> h
    int[] SLOTS_FOR_SIDES -> i
    net.minecraft.core.NonNullList items -> a
    int litTime -> j
    int litDuration -> k
    int cookingProgress -> l
    int cookingTotalTime -> m
    net.minecraft.world.inventory.ContainerData dataAccess -> b
    java.util.Map recipesUsed -> n
    net.minecraft.world.item.crafting.RecipeType recipeType -> c
    59:115:void <init>(net.minecraft.world.level.block.entity.BlockEntityType,net.minecraft.world.item.crafting.RecipeType) -> <init>
    118:181:java.util.Map getFuel() -> f
    185:188:void add(java.util.Map,net.minecraft.tags.Tag,int) -> a
    191:192:void add(java.util.Map,net.minecraft.world.level.ItemLike,int) -> a
    195:195:boolean isLit() -> j
    200:217:void load(net.minecraft.nbt.CompoundTag) -> a
    221:237:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    242:300:void tick() -> Z_
    303:321:boolean canBurn(net.minecraft.world.item.crafting.Recipe) -> b
    325:347:void burn(net.minecraft.world.item.crafting.Recipe) -> c
    350:355:int getBurnDuration(net.minecraft.world.item.ItemStack) -> a
    359:359:int getTotalCookTime() -> h
    363:363:boolean isFuel(net.minecraft.world.item.ItemStack) -> b
    368:373:int[] getSlotsForFace(net.minecraft.core.Direction) -> a
    379:379:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> a
    384:391:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> b
    396:396:int getContainerSize() -> O_
    401:406:boolean isEmpty() -> c
    411:411:net.minecraft.world.item.ItemStack getItem(int) -> a
    416:416:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    421:421:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    426:438:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    442:445:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    450:457:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    462:463:void clearContent() -> N_
    467:470:void setRecipeUsed(net.minecraft.world.item.crafting.Recipe) -> a
    475:475:net.minecraft.world.item.crafting.Recipe getRecipeUsed() -> aa_
    481:481:void awardAndReset(net.minecraft.world.entity.player.Player) -> b
    484:495:void awardResetAndExperience(net.minecraft.world.entity.player.Player) -> d
    498:513:void createExperience(net.minecraft.world.entity.player.Player,int,float) -> a
    517:520:void fillStackedContents(net.minecraft.world.entity.player.StackedContents) -> a
    487:489:void lambda$awardResetAndExperience$1(java.util.List,net.minecraft.world.entity.player.Player,java.util.Map$Entry,net.minecraft.world.item.crafting.Recipe) -> a
    468:468:java.lang.Integer lambda$setRecipeUsed$0(net.minecraft.resources.ResourceLocation,java.lang.Integer) -> a
    35:35:int access$000(net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity) -> a
    35:35:int access$100(net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity) -> b
    35:35:int access$200(net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity) -> c
    35:35:int access$300(net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity) -> d
    35:35:int access$002(net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity,int) -> a
    35:35:int access$102(net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity,int) -> b
    35:35:int access$202(net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity,int) -> c
    35:35:int access$302(net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity,int) -> d
    41:47:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity$1 -> bwb$1:
    net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity this$0 -> a
    65:65:void <init>(net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity) -> <init>
    68:80:int get(int) -> a
    85:101:void set(int,int) -> a
    105:105:int getCount() -> a
net.minecraft.world.level.block.entity.BannerBlockEntity -> bwc:
    net.minecraft.network.chat.Component name -> a
    net.minecraft.world.item.DyeColor baseColor -> b
    net.minecraft.nbt.ListTag itemPatterns -> c
    boolean receivedData -> g
    java.util.List patterns -> h
    32:44:void <init>() -> <init>
    47:49:void <init>(net.minecraft.world.item.DyeColor) -> <init>
    53:58:net.minecraft.nbt.ListTag getItemPatterns(net.minecraft.world.item.ItemStack) -> a
    62:67:void fromItem(net.minecraft.world.item.ItemStack,net.minecraft.world.item.DyeColor) -> a
    71:74:net.minecraft.network.chat.Component getName() -> M
    80:80:net.minecraft.network.chat.Component getCustomName() -> O
    84:85:void setCustomName(net.minecraft.network.chat.Component) -> a
    89:99:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    104:119:void load(net.minecraft.nbt.CompoundTag) -> a
    124:124:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    129:129:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    133:137:int getPatternCount(net.minecraft.world.item.ItemStack) -> b
    141:145:java.util.List getPatterns() -> c
    149:163:java.util.List createPatterns(net.minecraft.world.item.DyeColor,net.minecraft.nbt.ListTag) -> a
    167:181:void removeLastPattern(net.minecraft.world.item.ItemStack) -> c
    184:192:net.minecraft.world.item.ItemStack getItem(net.minecraft.world.level.block.state.BlockState) -> a
    196:199:net.minecraft.world.item.DyeColor getBaseColor(java.util.function.Supplier) -> a
    184:184:net.minecraft.world.level.block.state.BlockState lambda$getItem$0(net.minecraft.world.level.block.state.BlockState) -> b
net.minecraft.world.level.block.entity.BannerPattern -> bwd:
    net.minecraft.world.level.block.entity.BannerPattern BASE -> a
    net.minecraft.world.level.block.entity.BannerPattern SQUARE_BOTTOM_LEFT -> b
    net.minecraft.world.level.block.entity.BannerPattern SQUARE_BOTTOM_RIGHT -> c
    net.minecraft.world.level.block.entity.BannerPattern SQUARE_TOP_LEFT -> d
    net.minecraft.world.level.block.entity.BannerPattern SQUARE_TOP_RIGHT -> e
    net.minecraft.world.level.block.entity.BannerPattern STRIPE_BOTTOM -> f
    net.minecraft.world.level.block.entity.BannerPattern STRIPE_TOP -> g
    net.minecraft.world.level.block.entity.BannerPattern STRIPE_LEFT -> h
    net.minecraft.world.level.block.entity.BannerPattern STRIPE_RIGHT -> i
    net.minecraft.world.level.block.entity.BannerPattern STRIPE_CENTER -> j
    net.minecraft.world.level.block.entity.BannerPattern STRIPE_MIDDLE -> k
    net.minecraft.world.level.block.entity.BannerPattern STRIPE_DOWNRIGHT -> l
    net.minecraft.world.level.block.entity.BannerPattern STRIPE_DOWNLEFT -> m
    net.minecraft.world.level.block.entity.BannerPattern STRIPE_SMALL -> n
    net.minecraft.world.level.block.entity.BannerPattern CROSS -> o
    net.minecraft.world.level.block.entity.BannerPattern STRAIGHT_CROSS -> p
    net.minecraft.world.level.block.entity.BannerPattern TRIANGLE_BOTTOM -> q
    net.minecraft.world.level.block.entity.BannerPattern TRIANGLE_TOP -> r
    net.minecraft.world.level.block.entity.BannerPattern TRIANGLES_BOTTOM -> s
    net.minecraft.world.level.block.entity.BannerPattern TRIANGLES_TOP -> t
    net.minecraft.world.level.block.entity.BannerPattern DIAGONAL_LEFT -> u
    net.minecraft.world.level.block.entity.BannerPattern DIAGONAL_RIGHT -> v
    net.minecraft.world.level.block.entity.BannerPattern DIAGONAL_LEFT_MIRROR -> w
    net.minecraft.world.level.block.entity.BannerPattern DIAGONAL_RIGHT_MIRROR -> x
    net.minecraft.world.level.block.entity.BannerPattern CIRCLE_MIDDLE -> y
    net.minecraft.world.level.block.entity.BannerPattern RHOMBUS_MIDDLE -> z
    net.minecraft.world.level.block.entity.BannerPattern HALF_VERTICAL -> A
    net.minecraft.world.level.block.entity.BannerPattern HALF_HORIZONTAL -> B
    net.minecraft.world.level.block.entity.BannerPattern HALF_VERTICAL_MIRROR -> C
    net.minecraft.world.level.block.entity.BannerPattern HALF_HORIZONTAL_MIRROR -> D
    net.minecraft.world.level.block.entity.BannerPattern BORDER -> E
    net.minecraft.world.level.block.entity.BannerPattern CURLY_BORDER -> F
    net.minecraft.world.level.block.entity.BannerPattern GRADIENT -> G
    net.minecraft.world.level.block.entity.BannerPattern GRADIENT_UP -> H
    net.minecraft.world.level.block.entity.BannerPattern BRICKS -> I
    net.minecraft.world.level.block.entity.BannerPattern GLOBE -> J
    net.minecraft.world.level.block.entity.BannerPattern CREEPER -> K
    net.minecraft.world.level.block.entity.BannerPattern SKULL -> L
    net.minecraft.world.level.block.entity.BannerPattern FLOWER -> M
    net.minecraft.world.level.block.entity.BannerPattern MOJANG -> N
    int COUNT -> O
    int AVAILABLE_PATTERNS -> P
    java.lang.String filename -> Q
    java.lang.String hashname -> R
    java.lang.String[] patterns -> S
    net.minecraft.world.item.ItemStack patternItem -> T
    net.minecraft.world.level.block.entity.BannerPattern[] $VALUES -> U
    16:16:net.minecraft.world.level.block.entity.BannerPattern[] values() -> values
    16:16:net.minecraft.world.level.block.entity.BannerPattern valueOf(java.lang.String) -> valueOf
    193:199:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    202:204:void <init>(java.lang.String,int,java.lang.String,java.lang.String,net.minecraft.world.item.ItemStack) -> <init>
    207:211:void <init>(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    214:215:net.minecraft.resources.ResourceLocation location(boolean) -> a
    219:219:java.lang.String getFilename() -> a
    223:223:java.lang.String getHashname() -> b
    227:227:java.lang.String[] getPatterns() -> c
    231:231:boolean hasPattern() -> d
    235:235:boolean hasPatternItem() -> e
    239:239:net.minecraft.world.item.ItemStack getPatternItem() -> f
    244:249:net.minecraft.world.level.block.entity.BannerPattern byHash(java.lang.String) -> a
    16:16:java.lang.String access$000(net.minecraft.world.level.block.entity.BannerPattern) -> a
    16:189:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.BannerPattern$Builder -> bwd$a:
    java.util.List patterns -> a
    252:253:void <init>() -> <init>
    256:257:net.minecraft.world.level.block.entity.BannerPattern$Builder addPattern(net.minecraft.world.level.block.entity.BannerPattern,net.minecraft.world.item.DyeColor) -> a
    261:270:net.minecraft.nbt.ListTag toListTag() -> a
net.minecraft.world.level.block.entity.BarrelBlockEntity -> bwe:
    net.minecraft.core.NonNullList items -> a
    int openCount -> b
    24:29:void <init>(net.minecraft.world.level.block.entity.BlockEntityType) -> <init>
    32:33:void <init>() -> <init>
    37:41:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    46:52:void load(net.minecraft.nbt.CompoundTag) -> a
    56:56:int getContainerSize() -> O_
    61:61:net.minecraft.core.NonNullList getItems() -> f
    66:67:void setItems(net.minecraft.core.NonNullList) -> a
    71:71:net.minecraft.network.chat.Component getDefaultName() -> g
    76:76:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
    81:95:void startOpen(net.minecraft.world.entity.player.Player) -> a_
    98:99:void scheduleRecheck() -> j
    102:123:void recheckOpen() -> h
    127:130:void stopOpen(net.minecraft.world.entity.player.Player) -> b_
    133:134:void updateBlockState(net.minecraft.world.level.block.state.BlockState,boolean) -> a
    138:144:void playSound(net.minecraft.world.level.block.state.BlockState,net.minecraft.sounds.SoundEvent) -> a
net.minecraft.world.level.block.entity.BaseContainerBlockEntity -> bwf:
    net.minecraft.world.LockCode lockKey -> a
    net.minecraft.network.chat.Component name -> b
    20:25:void <init>(net.minecraft.world.level.block.entity.BlockEntityType) -> <init>
    29:36:void load(net.minecraft.nbt.CompoundTag) -> a
    40:47:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    51:52:void setCustomName(net.minecraft.network.chat.Component) -> a
    56:59:net.minecraft.network.chat.Component getName() -> M
    64:64:net.minecraft.network.chat.Component getDisplayName() -> d
    70:70:net.minecraft.network.chat.Component getCustomName() -> O
    net.minecraft.network.chat.Component getDefaultName() -> g
    76:76:boolean canOpen(net.minecraft.world.entity.player.Player) -> e
    80:86:boolean canUnlock(net.minecraft.world.entity.player.Player,net.minecraft.world.LockCode,net.minecraft.network.chat.Component) -> a
    92:96:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> createMenu
    net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
net.minecraft.world.level.block.entity.BeaconBlockEntity -> bwg:
    net.minecraft.world.effect.MobEffect[][] BEACON_EFFECTS -> a
    java.util.Set VALID_EFFECTS -> b
    java.util.List beamSections -> c
    java.util.List checkingBeamSections -> g
    int levels -> h
    int lastCheckY -> i
    net.minecraft.world.effect.MobEffect primaryPower -> j
    net.minecraft.world.effect.MobEffect secondaryPower -> k
    net.minecraft.network.chat.Component name -> l
    net.minecraft.world.LockCode lockKey -> m
    net.minecraft.world.inventory.ContainerData dataAccess -> n
    59:115:void <init>() -> <init>
    119:207:void tick() -> Z_
    210:234:void updateBase(int,int,int) -> a
    238:240:void setRemoved() -> ab_
    243:265:void applyEffects() -> j
    268:269:void playSound(net.minecraft.sounds.SoundEvent) -> a
    272:272:java.util.List getBeamSections() -> f
    276:276:int getLevels() -> h
    282:282:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    287:287:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    292:292:double getViewDistance() -> i
    297:299:net.minecraft.world.effect.MobEffect getValidEffectById(int) -> b
    304:314:void load(net.minecraft.nbt.CompoundTag) -> a
    318:330:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    334:335:void setCustomName(net.minecraft.network.chat.Component) -> a
    340:343:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> createMenu
    348:348:net.minecraft.network.chat.Component getDisplayName() -> d
    42:42:int access$000(net.minecraft.world.level.block.entity.BeaconBlockEntity) -> a
    42:42:net.minecraft.world.effect.MobEffect access$100(net.minecraft.world.level.block.entity.BeaconBlockEntity) -> b
    42:42:net.minecraft.world.effect.MobEffect access$200(net.minecraft.world.level.block.entity.BeaconBlockEntity) -> c
    42:42:int access$002(net.minecraft.world.level.block.entity.BeaconBlockEntity,int) -> a
    42:42:java.util.List access$300(net.minecraft.world.level.block.entity.BeaconBlockEntity) -> d
    42:42:net.minecraft.world.effect.MobEffect access$102(net.minecraft.world.level.block.entity.BeaconBlockEntity,net.minecraft.world.effect.MobEffect) -> a
    42:42:net.minecraft.world.effect.MobEffect access$400(int) -> a
    42:42:net.minecraft.world.effect.MobEffect access$202(net.minecraft.world.level.block.entity.BeaconBlockEntity,net.minecraft.world.effect.MobEffect) -> b
    45:50:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.BeaconBlockEntity$1 -> bwg$1:
    net.minecraft.world.level.block.entity.BeaconBlockEntity this$0 -> a
    75:75:void <init>(net.minecraft.world.level.block.entity.BeaconBlockEntity) -> <init>
    78:86:int get(int) -> a
    91:105:void set(int,int) -> a
    109:109:int getCount() -> a
net.minecraft.world.level.block.entity.BeaconBlockEntity$BeaconBeamSection -> bwg$a:
    float[] color -> a
    int height -> b
    355:358:void <init>(float[]) -> <init>
    361:362:void increaseHeight() -> a
    365:365:float[] getColor() -> b
    369:369:int getHeight() -> c
    351:351:float[] access$500(net.minecraft.world.level.block.entity.BeaconBlockEntity$BeaconBeamSection) -> a
net.minecraft.world.level.block.entity.BedBlockEntity -> bwh:
    net.minecraft.world.item.DyeColor color -> a
    11:12:void <init>() -> <init>
    15:17:void <init>(net.minecraft.world.item.DyeColor) -> <init>
    21:21:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    25:28:net.minecraft.world.item.DyeColor getColor() -> d
    32:33:void setColor(net.minecraft.world.item.DyeColor) -> a
net.minecraft.world.level.block.entity.BeehiveBlockEntity -> bwi:
    java.util.List stored -> a
    net.minecraft.core.BlockPos savedFlowerPos -> b
    50:63:void <init>() -> <init>
    67:72:void setChanged() -> e
    75:85:boolean isFireNearby() -> d
    89:89:boolean isEmpty() -> f
    93:93:boolean isFull() -> h
    97:113:void emptyAllLivingFromHive(net.minecraft.world.entity.player.Player,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus) -> a
    116:118:java.util.List releaseAllOccupants(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus) -> a
    122:123:void addOccupant(net.minecraft.world.entity.Entity,boolean) -> a
    127:127:int getOccupantCount() -> j
    131:131:int getHoneyLevel(net.minecraft.world.level.block.state.BlockState) -> a
    136:136:boolean isSedated() -> k
    140:141:void sendDebugPackets() -> l
    144:170:void addOccupantWithPresetTicks(net.minecraft.world.entity.Entity,boolean,int) -> a
    176:247:boolean releaseOccupant(net.minecraft.world.level.block.state.BlockState,net.minecraft.nbt.CompoundTag,java.util.List,net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus) -> a
    251:251:boolean hasSavedFlowerPos() -> x
    255:270:void tickOccupants() -> y
    274:290:void tick() -> Z_
    294:309:void load(net.minecraft.nbt.CompoundTag) -> a
    313:320:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    324:333:net.minecraft.nbt.ListTag writeBees() -> m
    197:197:net.minecraft.world.entity.Entity lambda$releaseOccupant$1(net.minecraft.world.entity.Entity) -> a
    117:117:boolean lambda$releaseAllOccupants$0(net.minecraft.world.level.block.state.BlockState,java.util.List,net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus,net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeData) -> a
net.minecraft.world.level.block.entity.BeehiveBlockEntity$1 -> bwi$1:
net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeData -> bwi$a:
    net.minecraft.nbt.CompoundTag entityData -> a
    int ticksInHive -> b
    int minOccupationTicks -> c
    341:346:void <init>(net.minecraft.nbt.CompoundTag,int,int) -> <init>
    336:336:void <init>(net.minecraft.nbt.CompoundTag,int,int,net.minecraft.world.level.block.entity.BeehiveBlockEntity$1) -> <init>
    336:336:int access$100(net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeData) -> a
    336:336:int access$200(net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeData) -> b
    336:336:net.minecraft.nbt.CompoundTag access$300(net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeData) -> c
    336:336:int access$108(net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeData) -> d
net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus -> bwi$b:
    net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus HONEY_DELIVERED -> a
    net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus BEE_RELEASED -> b
    net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus EMERGENCY -> c
    net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus[] $VALUES -> d
    55:55:net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus[] values() -> values
    55:55:net.minecraft.world.level.block.entity.BeehiveBlockEntity$BeeReleaseStatus valueOf(java.lang.String) -> valueOf
    55:55:void <init>(java.lang.String,int) -> <init>
    55:58:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.BellBlockEntity -> bwj:
    long lastRingTimestamp -> g
    int ticks -> a
    boolean shaking -> b
    net.minecraft.core.Direction clickDirection -> c
    java.util.List nearbyEntities -> h
    boolean resonating -> i
    int resonationTicks -> j
    43:44:void <init>() -> <init>
    48:56:boolean triggerEvent(int,int) -> a_
    61:84:void tick() -> Z_
    87:88:void playResonateSound() -> d
    91:101:void onHit(net.minecraft.core.Direction) -> a
    104:122:void updateEntities() -> f
    125:136:boolean areRaidersNearby() -> h
    140:147:void makeRaidersGlow(net.minecraft.world.level.Level) -> a
    150:176:void showBellParticles(net.minecraft.world.level.Level) -> b
    179:182:boolean isRaiderWithinRange(net.minecraft.world.entity.LivingEntity) -> a
    186:187:void glow(net.minecraft.world.entity.LivingEntity) -> b
    162:175:void lambda$showBellParticles$1(net.minecraft.core.BlockPos,int,java.util.concurrent.atomic.AtomicInteger,net.minecraft.world.level.Level,net.minecraft.world.entity.LivingEntity) -> a
    157:157:boolean lambda$showBellParticles$0(net.minecraft.core.BlockPos,net.minecraft.world.entity.LivingEntity) -> a
net.minecraft.world.level.block.entity.BlastFurnaceBlockEntity -> bwk:
    13:14:void <init>() -> <init>
    18:18:net.minecraft.network.chat.Component getDefaultName() -> g
    23:23:int getBurnDuration(net.minecraft.world.item.ItemStack) -> a
    28:28:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
net.minecraft.world.level.block.entity.BlockEntity -> bwl:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.level.block.entity.BlockEntityType type -> b
    net.minecraft.world.level.Level level -> d
    net.minecraft.core.BlockPos worldPosition -> e
    boolean remove -> f
    net.minecraft.world.level.block.state.BlockState blockState -> c
    boolean hasLoggedInvalidStateBefore -> g
    24:34:void <init>(net.minecraft.world.level.block.entity.BlockEntityType) -> <init>
    38:38:net.minecraft.world.level.Level getLevel() -> w
    42:44:void setLevelAndPosition(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    47:47:boolean hasLevel() -> n
    51:52:void load(net.minecraft.nbt.CompoundTag) -> a
    55:55:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    59:68:net.minecraft.nbt.CompoundTag saveMetadata(net.minecraft.nbt.CompoundTag) -> d
    73:93:net.minecraft.world.level.block.entity.BlockEntity loadStatic(net.minecraft.nbt.CompoundTag) -> c
    100:108:void setChanged() -> e
    111:114:double distanceToSqr(double,double,double) -> a
    118:118:double getViewDistance() -> i
    122:122:net.minecraft.core.BlockPos getBlockPos() -> o
    129:132:net.minecraft.world.level.block.state.BlockState getBlockState() -> p
    137:137:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    141:141:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    145:145:boolean isRemoved() -> q
    149:150:void setRemoved() -> ab_
    153:154:void clearRemoved() -> r
    157:157:boolean triggerEvent(int,int) -> a_
    161:162:void clearCache() -> s
    165:174:void fillCrashReportCategory(net.minecraft.CrashReportCategory) -> a
    177:178:void setPosition(net.minecraft.core.BlockPos) -> a
    181:181:boolean onlyOpCanSetNbt() -> t
    185:185:void rotate(net.minecraft.world.level.block.Rotation) -> a
    188:188:void mirror(net.minecraft.world.level.block.Mirror) -> a
    191:191:net.minecraft.world.level.block.entity.BlockEntityType getType() -> u
    195:201:void logInvalidState() -> v
    200:200:java.lang.Object lambda$logInvalidState$4() -> f
    165:165:java.lang.String lambda$fillCrashReportCategory$3() -> h
    94:95:net.minecraft.world.level.block.entity.BlockEntity lambda$loadStatic$2(java.lang.String) -> a
    86:90:net.minecraft.world.level.block.entity.BlockEntity lambda$loadStatic$1(net.minecraft.nbt.CompoundTag,java.lang.String,net.minecraft.world.level.block.entity.BlockEntity) -> a
    78:81:net.minecraft.world.level.block.entity.BlockEntity lambda$loadStatic$0(java.lang.String,net.minecraft.world.level.block.entity.BlockEntityType) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.BlockEntityType -> bwm:
    org.apache.logging.log4j.Logger LOGGER -> H
    net.minecraft.world.level.block.entity.BlockEntityType FURNACE -> a
    net.minecraft.world.level.block.entity.BlockEntityType CHEST -> b
    net.minecraft.world.level.block.entity.BlockEntityType TRAPPED_CHEST -> c
    net.minecraft.world.level.block.entity.BlockEntityType ENDER_CHEST -> d
    net.minecraft.world.level.block.entity.BlockEntityType JUKEBOX -> e
    net.minecraft.world.level.block.entity.BlockEntityType DISPENSER -> f
    net.minecraft.world.level.block.entity.BlockEntityType DROPPER -> g
    net.minecraft.world.level.block.entity.BlockEntityType SIGN -> h
    net.minecraft.world.level.block.entity.BlockEntityType MOB_SPAWNER -> i
    net.minecraft.world.level.block.entity.BlockEntityType PISTON -> j
    net.minecraft.world.level.block.entity.BlockEntityType BREWING_STAND -> k
    net.minecraft.world.level.block.entity.BlockEntityType ENCHANTING_TABLE -> l
    net.minecraft.world.level.block.entity.BlockEntityType END_PORTAL -> m
    net.minecraft.world.level.block.entity.BlockEntityType BEACON -> n
    net.minecraft.world.level.block.entity.BlockEntityType SKULL -> o
    net.minecraft.world.level.block.entity.BlockEntityType DAYLIGHT_DETECTOR -> p
    net.minecraft.world.level.block.entity.BlockEntityType HOPPER -> q
    net.minecraft.world.level.block.entity.BlockEntityType COMPARATOR -> r
    net.minecraft.world.level.block.entity.BlockEntityType BANNER -> s
    net.minecraft.world.level.block.entity.BlockEntityType STRUCTURE_BLOCK -> t
    net.minecraft.world.level.block.entity.BlockEntityType END_GATEWAY -> u
    net.minecraft.world.level.block.entity.BlockEntityType COMMAND_BLOCK -> v
    net.minecraft.world.level.block.entity.BlockEntityType SHULKER_BOX -> w
    net.minecraft.world.level.block.entity.BlockEntityType BED -> x
    net.minecraft.world.level.block.entity.BlockEntityType CONDUIT -> y
    net.minecraft.world.level.block.entity.BlockEntityType BARREL -> z
    net.minecraft.world.level.block.entity.BlockEntityType SMOKER -> A
    net.minecraft.world.level.block.entity.BlockEntityType BLAST_FURNACE -> B
    net.minecraft.world.level.block.entity.BlockEntityType LECTERN -> C
    net.minecraft.world.level.block.entity.BlockEntityType BELL -> D
    net.minecraft.world.level.block.entity.BlockEntityType JIGSAW -> E
    net.minecraft.world.level.block.entity.BlockEntityType CAMPFIRE -> F
    net.minecraft.world.level.block.entity.BlockEntityType BEEHIVE -> G
    java.util.function.Supplier factory -> I
    java.util.Set validBlocks -> J
    com.mojang.datafixers.types.Type dataType -> K
    28:28:net.minecraft.resources.ResourceLocation getKey(net.minecraft.world.level.block.entity.BlockEntityType) -> a
    66:78:net.minecraft.world.level.block.entity.BlockEntityType register(java.lang.String,net.minecraft.world.level.block.entity.BlockEntityType$Builder) -> a
    85:89:void <init>(java.util.function.Supplier,java.util.Set,com.mojang.datafixers.types.Type) -> <init>
    93:93:net.minecraft.world.level.block.entity.BlockEntity create() -> a
    100:100:boolean isValid(net.minecraft.world.level.block.Block) -> a
    124:128:net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    24:63:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.BlockEntityType$Builder -> bwm$a:
    java.util.function.Supplier factory -> a
    java.util.Set validBlocks -> b
    107:110:void <init>(java.util.function.Supplier,java.util.Set) -> <init>
    113:113:net.minecraft.world.level.block.entity.BlockEntityType$Builder of(java.util.function.Supplier,net.minecraft.world.level.block.Block[]) -> a
    117:117:net.minecraft.world.level.block.entity.BlockEntityType build(com.mojang.datafixers.types.Type) -> a
    103:103:java.util.Set access$000(net.minecraft.world.level.block.entity.BlockEntityType$Builder) -> a
net.minecraft.world.level.block.entity.BrewingStandBlockEntity -> bwn:
    int[] SLOTS_FOR_UP -> b
    int[] SLOTS_FOR_DOWN -> c
    int[] SLOTS_FOR_SIDES -> g
    net.minecraft.core.NonNullList items -> h
    int brewTime -> i
    boolean[] lastPotionCount -> j
    net.minecraft.world.item.Item ingredient -> k
    int fuel -> l
    net.minecraft.world.inventory.ContainerData dataAccess -> a
    49:88:void <init>() -> <init>
    92:92:net.minecraft.network.chat.Component getDefaultName() -> g
    97:97:int getContainerSize() -> O_
    102:107:boolean isEmpty() -> c
    112:158:void tick() -> Z_
    162:168:boolean[] getPotionBits() -> f
    172:191:boolean isBrewable() -> h
    195:217:void doBrew() -> j
    221:228:void load(net.minecraft.nbt.CompoundTag) -> a
    232:239:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    244:247:net.minecraft.world.item.ItemStack getItem(int) -> a
    252:252:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    257:257:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    262:265:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    269:275:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    280:289:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    294:300:int[] getSlotsForFace(net.minecraft.core.Direction) -> a
    305:305:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> a
    310:313:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> b
    318:319:void clearContent() -> N_
    323:323:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
    30:30:int access$000(net.minecraft.world.level.block.entity.BrewingStandBlockEntity) -> a
    30:30:int access$100(net.minecraft.world.level.block.entity.BrewingStandBlockEntity) -> b
    30:30:int access$002(net.minecraft.world.level.block.entity.BrewingStandBlockEntity,int) -> a
    30:30:int access$102(net.minecraft.world.level.block.entity.BrewingStandBlockEntity,int) -> b
    33:39:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.BrewingStandBlockEntity$1 -> bwn$1:
    net.minecraft.world.level.block.entity.BrewingStandBlockEntity this$0 -> a
    56:56:void <init>(net.minecraft.world.level.block.entity.BrewingStandBlockEntity) -> <init>
    59:65:int get(int) -> a
    70:78:void set(int,int) -> a
    82:82:int getCount() -> a
net.minecraft.world.level.block.entity.CampfireBlockEntity -> bwo:
    net.minecraft.core.NonNullList items -> a
    int[] cookingProgress -> b
    int[] cookingTime -> c
    31:37:void <init>() -> <init>
    41:60:void tick() -> Z_
    63:79:void cook() -> h
    82:112:void makeParticles() -> j
    115:115:net.minecraft.core.NonNullList getItems() -> d
    120:134:void load(net.minecraft.nbt.CompoundTag) -> a
    138:143:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    147:151:net.minecraft.nbt.CompoundTag saveMetadataAndItems(net.minecraft.nbt.CompoundTag) -> d
    157:157:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    162:162:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    166:170:java.util.Optional getCookableRecipe(net.minecraft.world.item.ItemStack) -> a
    174:187:boolean placeFood(net.minecraft.world.item.ItemStack,int) -> a
    191:193:void markUpdated() -> k
    197:198:void clearContent() -> N_
    201:206:void dowse() -> f
    72:72:net.minecraft.world.item.ItemStack lambda$cook$0(net.minecraft.world.Container,net.minecraft.world.item.crafting.CampfireCookingRecipe) -> a
net.minecraft.world.level.block.entity.ChestBlockEntity -> bwp:
    net.minecraft.core.NonNullList items -> i
    float openness -> a
    float oOpenness -> b
    int openCount -> c
    int tickInterval -> j
    33:42:void <init>(net.minecraft.world.level.block.entity.BlockEntityType) -> <init>
    45:46:void <init>() -> <init>
    50:50:int getContainerSize() -> O_
    55:55:net.minecraft.network.chat.Component getDefaultName() -> g
    60:66:void load(net.minecraft.nbt.CompoundTag) -> a
    70:75:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    80:112:void tick() -> Z_
    115:119:int getOpenCount(net.minecraft.world.level.Level,net.minecraft.world.level.block.entity.BaseContainerBlockEntity,int,int,int,int,int) -> a
    123:135:int getOpenCount(net.minecraft.world.level.Level,net.minecraft.world.level.block.entity.BaseContainerBlockEntity,int,int,int) -> a
    139:156:void playSound(net.minecraft.sounds.SoundEvent) -> a
    160:164:boolean triggerEvent(int,int) -> a_
    169:176:void startOpen(net.minecraft.world.entity.player.Player) -> a_
    180:184:void stopOpen(net.minecraft.world.entity.player.Player) -> b_
    187:192:void signalOpenCount() -> h
    196:196:net.minecraft.core.NonNullList getItems() -> f
    201:202:void setItems(net.minecraft.core.NonNullList) -> a
    206:206:float getOpenNess(float) -> a
    210:217:int getOpenCount(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    221:224:void swapContents(net.minecraft.world.level.block.entity.ChestBlockEntity,net.minecraft.world.level.block.entity.ChestBlockEntity) -> a
    228:228:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
net.minecraft.world.level.block.entity.CommandBlockEntity -> bwq:
    boolean powered -> a
    boolean auto -> b
    boolean conditionMet -> c
    boolean sendToClient -> g
    net.minecraft.world.level.BaseCommandBlock commandBlock -> h
    27:164:void <init>() -> <init>
    32:38:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    43:48:void load(net.minecraft.nbt.CompoundTag) -> a
    53:58:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    63:63:boolean onlyOpCanSetNbt() -> t
    67:67:net.minecraft.world.level.BaseCommandBlock getCommandBlock() -> d
    71:72:void setPowered(boolean) -> a
    75:75:boolean isPowered() -> f
    79:79:boolean isAutomatic() -> g
    83:88:void setAutomatic(boolean) -> b
    91:95:void onModeSwitch() -> h
    98:104:void scheduleTick() -> y
    107:107:boolean wasConditionMet() -> j
    111:121:boolean markConditionMet() -> k
    125:125:boolean isSendToClient() -> l
    129:130:void setSendToClient(boolean) -> c
    133:141:net.minecraft.world.level.block.entity.CommandBlockEntity$Mode getMode() -> m
    145:149:boolean isConditional() -> x
    154:156:void clearRemoved() -> r
net.minecraft.world.level.block.entity.CommandBlockEntity$1 -> bwq$1:
    net.minecraft.world.level.block.entity.CommandBlockEntity this$0 -> b
    164:164:void <init>(net.minecraft.world.level.block.entity.CommandBlockEntity) -> <init>
    167:169:void setCommand(java.lang.String) -> a
    173:173:net.minecraft.server.level.ServerLevel getLevel() -> d
    178:180:void onUpdated() -> e
    184:187:void writeCoordinates(io.netty.buffer.ByteBuf) -> a
    191:191:net.minecraft.world.phys.Vec3 getPosition() -> f
    196:196:net.minecraft.commands.CommandSourceStack createCommandSourceStack() -> h
net.minecraft.world.level.block.entity.CommandBlockEntity$Mode -> bwq$a:
    net.minecraft.world.level.block.entity.CommandBlockEntity$Mode SEQUENCE -> a
    net.minecraft.world.level.block.entity.CommandBlockEntity$Mode AUTO -> b
    net.minecraft.world.level.block.entity.CommandBlockEntity$Mode REDSTONE -> c
    net.minecraft.world.level.block.entity.CommandBlockEntity$Mode[] $VALUES -> d
    158:158:net.minecraft.world.level.block.entity.CommandBlockEntity$Mode[] values() -> values
    158:158:net.minecraft.world.level.block.entity.CommandBlockEntity$Mode valueOf(java.lang.String) -> valueOf
    158:158:void <init>(java.lang.String,int) -> <init>
    158:161:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.ComparatorBlockEntity -> bwr:
    int output -> a
    9:10:void <init>() -> <init>
    14:17:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    22:24:void load(net.minecraft.nbt.CompoundTag) -> a
    27:27:int getOutputSignal() -> d
    31:32:void setOutputSignal(int) -> a
net.minecraft.world.level.block.entity.ConduitBlockEntity -> bws:
    net.minecraft.world.level.block.Block[] VALID_BLOCKS -> b
    int tickCount -> a
    float activeRotation -> c
    boolean isActive -> g
    boolean isHunting -> h
    java.util.List effectBlocks -> i
    net.minecraft.world.entity.LivingEntity destroyTarget -> j
    java.util.UUID destroyTargetUUID -> k
    long nextAmbientSoundActivation -> l
    56:57:void <init>() -> <init>
    47:61:void <init>(net.minecraft.world.level.block.entity.BlockEntityType) -> <init>
    65:72:void load(net.minecraft.nbt.CompoundTag) -> a
    76:82:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    88:88:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    93:93:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    98:125:void tick() -> Z_
    128:167:boolean updateShape() -> h
    171:190:void applyEffects() -> j
    193:219:void updateDestroyTarget() -> k
    222:230:void updateClientTarget() -> l
    233:236:net.minecraft.world.phys.AABB getDestroyRangeAABB() -> m
    241:245:net.minecraft.world.entity.LivingEntity findDestroyTarget() -> x
    249:276:void animationTick() -> y
    279:279:boolean isActive() -> d
    283:283:boolean isHunting() -> f
    287:292:void setActive(boolean) -> a
    295:296:void setHunting(boolean) -> b
    299:299:float getActiveRotation(float) -> a
    303:304:void playSound(net.minecraft.sounds.SoundEvent) -> a
    241:241:boolean lambda$findDestroyTarget$1(net.minecraft.world.entity.LivingEntity) -> a
    202:202:boolean lambda$updateDestroyTarget$0(net.minecraft.world.entity.LivingEntity) -> b
    40:40:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.DaylightDetectorBlockEntity -> bwt:
    10:11:void <init>() -> <init>
    15:22:void tick() -> Z_
net.minecraft.world.level.block.entity.DispenserBlockEntity -> bwu:
    java.util.Random RANDOM -> a
    net.minecraft.core.NonNullList items -> b
    19:23:void <init>(net.minecraft.world.level.block.entity.BlockEntityType) -> <init>
    26:27:void <init>() -> <init>
    31:31:int getContainerSize() -> O_
    35:45:int getRandomSlot() -> h
    49:56:int addItem(net.minecraft.world.item.ItemStack) -> a
    61:61:net.minecraft.network.chat.Component getDefaultName() -> g
    66:72:void load(net.minecraft.nbt.CompoundTag) -> a
    76:81:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    86:86:net.minecraft.core.NonNullList getItems() -> f
    91:92:void setItems(net.minecraft.core.NonNullList) -> a
    96:96:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.DropperBlockEntity -> bwv:
    8:9:void <init>() -> <init>
    13:13:net.minecraft.network.chat.Component getDefaultName() -> g
net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity -> bww:
    int time -> a
    float flip -> b
    float oFlip -> c
    float flipT -> g
    float flipA -> h
    float open -> i
    float oOpen -> j
    float rot -> k
    float oRot -> l
    float tRot -> m
    java.util.Random RANDOM -> n
    net.minecraft.network.chat.Component name -> o
    29:30:void <init>() -> <init>
    34:39:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    44:48:void load(net.minecraft.nbt.CompoundTag) -> a
    52:108:void tick() -> Z_
    112:115:net.minecraft.network.chat.Component getName() -> M
    119:120:void setCustomName(net.minecraft.network.chat.Component) -> a
    125:125:net.minecraft.network.chat.Component getCustomName() -> O
    25:25:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.EnderChestBlockEntity -> bwx:
    float openness -> a
    float oOpenness -> b
    int openCount -> c
    int tickInterval -> g
    17:18:void <init>() -> <init>
    22:60:void tick() -> Z_
    64:68:boolean triggerEvent(int,int) -> a_
    73:75:void setRemoved() -> ab_
    78:80:void startOpen() -> d
    83:85:void stopOpen() -> f
    88:95:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    100:100:float getOpenNess(float) -> a
net.minecraft.world.level.block.entity.FurnaceBlockEntity -> bwy:
    12:13:void <init>() -> <init>
    17:17:net.minecraft.network.chat.Component getDefaultName() -> g
    22:22:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
net.minecraft.world.level.block.entity.Hopper -> bwz:
    net.minecraft.world.phys.shapes.VoxelShape INSIDE -> a
    net.minecraft.world.phys.shapes.VoxelShape ABOVE -> b
    net.minecraft.world.phys.shapes.VoxelShape SUCK -> c
    17:17:net.minecraft.world.phys.shapes.VoxelShape getSuckShape() -> P_
    net.minecraft.world.level.Level getLevel() -> w
    double getLevelX() -> z
    double getLevelY() -> A
    double getLevelZ() -> B
    12:14:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.HopperBlockEntity -> bxa:
    net.minecraft.core.NonNullList items -> i
    int cooldownTime -> j
    long tickedGameTime -> k
    39:45:void <init>() -> <init>
    49:56:void load(net.minecraft.nbt.CompoundTag) -> a
    60:67:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    72:72:int getContainerSize() -> O_
    77:80:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    85:91:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    95:95:net.minecraft.network.chat.Component getDefaultName() -> g
    100:111:void tick() -> Z_
    114:135:boolean tryMoveItems(java.util.function.Supplier) -> a
    139:145:boolean inventoryFull() -> h
    149:175:boolean ejectItems() -> j
    179:183:java.util.stream.IntStream getSlots(net.minecraft.world.Container,net.minecraft.core.Direction) -> a
    187:187:boolean isFullContainer(net.minecraft.world.Container,net.minecraft.core.Direction) -> b
    194:194:boolean isEmptyContainer(net.minecraft.world.Container,net.minecraft.core.Direction) -> c
    198:215:boolean suckInItems(net.minecraft.world.level.block.entity.Hopper) -> a
    219:233:boolean tryTakeInItemFromSlot(net.minecraft.world.level.block.entity.Hopper,net.minecraft.world.Container,int,net.minecraft.core.Direction) -> a
    237:250:boolean addItem(net.minecraft.world.Container,net.minecraft.world.entity.item.ItemEntity) -> a
    254:268:net.minecraft.world.item.ItemStack addItem(net.minecraft.world.Container,net.minecraft.world.Container,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> a
    272:278:boolean canPlaceItemInContainer(net.minecraft.world.Container,net.minecraft.world.item.ItemStack,int,net.minecraft.core.Direction) -> a
    282:285:boolean canTakeItemFromContainer(net.minecraft.world.Container,net.minecraft.world.item.ItemStack,int,net.minecraft.core.Direction) -> b
    289:324:net.minecraft.world.item.ItemStack tryMoveInItem(net.minecraft.world.Container,net.minecraft.world.Container,net.minecraft.world.item.ItemStack,int,net.minecraft.core.Direction) -> a
    329:330:net.minecraft.world.Container getAttachedContainer() -> k
    335:335:net.minecraft.world.Container getSourceContainer(net.minecraft.world.level.block.entity.Hopper) -> b
    339:339:java.util.List getItemsAtAndAbove(net.minecraft.world.level.block.entity.Hopper) -> c
    344:344:net.minecraft.world.Container getContainerAt(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    349:381:net.minecraft.world.Container getContainerAt(net.minecraft.world.level.Level,double,double,double) -> a
    385:397:boolean canMergeItems(net.minecraft.world.item.ItemStack,net.minecraft.world.item.ItemStack) -> a
    402:402:double getLevelX() -> z
    407:407:double getLevelY() -> A
    412:412:double getLevelZ() -> B
    416:417:void setCooldown(int) -> c
    420:420:boolean isOnCooldown() -> l
    424:424:boolean isOnCustomCooldown() -> m
    429:429:net.minecraft.core.NonNullList getItems() -> f
    434:435:void setItems(net.minecraft.core.NonNullList) -> a
    438:444:void entityInside(net.minecraft.world.entity.Entity) -> a
    448:448:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
    441:441:java.lang.Boolean lambda$entityInside$5(net.minecraft.world.entity.Entity) -> b
    339:339:java.util.stream.Stream lambda$getItemsAtAndAbove$4(net.minecraft.world.level.block.entity.Hopper,net.minecraft.world.phys.AABB) -> a
    206:206:boolean lambda$suckInItems$3(net.minecraft.world.level.block.entity.Hopper,net.minecraft.world.Container,net.minecraft.core.Direction,int) -> a
    194:194:boolean lambda$isEmptyContainer$2(net.minecraft.world.Container,int) -> a
    188:189:boolean lambda$isFullContainer$1(net.minecraft.world.Container,int) -> b
    109:109:java.lang.Boolean lambda$tick$0() -> x
net.minecraft.world.level.block.entity.JigsawBlockEntity -> bxb:
    net.minecraft.resources.ResourceLocation attachementType -> a
    net.minecraft.resources.ResourceLocation targetPool -> b
    java.lang.String finalState -> c
    10:16:void <init>(net.minecraft.world.level.block.entity.BlockEntityType) -> <init>
    19:20:void <init>() -> <init>
    23:23:net.minecraft.resources.ResourceLocation getAttachementType() -> d
    27:27:net.minecraft.resources.ResourceLocation getTargetPool() -> f
    31:31:java.lang.String getFinalState() -> g
    35:36:void setAttachementType(net.minecraft.resources.ResourceLocation) -> a
    39:40:void setTargetPool(net.minecraft.resources.ResourceLocation) -> b
    43:44:void setFinalState(java.lang.String) -> a
    48:52:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    57:61:void load(net.minecraft.nbt.CompoundTag) -> a
    66:66:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    71:71:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
net.minecraft.world.level.block.entity.JukeboxBlockEntity -> bxc:
    net.minecraft.world.item.ItemStack record -> a
    9:13:void <init>() -> <init>
    17:22:void load(net.minecraft.nbt.CompoundTag) -> a
    26:32:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    36:36:net.minecraft.world.item.ItemStack getRecord() -> d
    40:42:void setRecord(net.minecraft.world.item.ItemStack) -> a
    46:47:void clearContent() -> N_
net.minecraft.world.level.block.entity.LecternBlockEntity -> bxd:
    net.minecraft.world.Container bookAccess -> a
    net.minecraft.world.inventory.ContainerData dataAccess -> b
    net.minecraft.world.item.ItemStack book -> c
    int page -> g
    int pageCount -> h
    39:139:void <init>() -> <init>
    142:142:net.minecraft.world.item.ItemStack getBook() -> f
    146:147:boolean hasBook() -> g
    151:152:void setBook(net.minecraft.world.item.ItemStack) -> a
    155:158:void onBookItemRemove() -> k
    161:165:void setBook(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player) -> a
    168:174:void setPage(int) -> a
    177:177:int getPage() -> h
    181:182:int getRedstoneSignal() -> j
    186:189:net.minecraft.world.item.ItemStack resolveBook(net.minecraft.world.item.ItemStack,net.minecraft.world.entity.player.Player) -> b
    195:203:net.minecraft.commands.CommandSourceStack createCommandSourceStack(net.minecraft.world.entity.player.Player) -> a
    208:208:boolean onlyOpCanSetNbt() -> t
    213:223:void load(net.minecraft.nbt.CompoundTag) -> a
    227:234:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    239:240:void clearContent() -> N_
    244:244:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> createMenu
    249:249:net.minecraft.network.chat.Component getDisplayName() -> d
    32:32:net.minecraft.world.item.ItemStack access$000(net.minecraft.world.level.block.entity.LecternBlockEntity) -> a
    32:32:void access$100(net.minecraft.world.level.block.entity.LecternBlockEntity) -> b
    32:32:net.minecraft.world.item.ItemStack access$002(net.minecraft.world.level.block.entity.LecternBlockEntity,net.minecraft.world.item.ItemStack) -> a
    32:32:int access$200(net.minecraft.world.level.block.entity.LecternBlockEntity) -> c
    32:32:void access$300(net.minecraft.world.level.block.entity.LecternBlockEntity,int) -> a
net.minecraft.world.level.block.entity.LecternBlockEntity$1 -> bxd$1:
    net.minecraft.world.level.block.entity.LecternBlockEntity this$0 -> a
    39:39:void <init>(net.minecraft.world.level.block.entity.LecternBlockEntity) -> <init>
    42:42:int getContainerSize() -> O_
    47:47:boolean isEmpty() -> c
    52:52:net.minecraft.world.item.ItemStack getItem(int) -> a
    57:64:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    69:75:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    81:81:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    85:85:int getMaxStackSize() -> L_
    90:91:void setChanged() -> e
    95:101:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    106:106:boolean canPlaceItem(int,net.minecraft.world.item.ItemStack) -> b
    111:111:void clearContent() -> N_
net.minecraft.world.level.block.entity.LecternBlockEntity$2 -> bxd$2:
    net.minecraft.world.level.block.entity.LecternBlockEntity this$0 -> a
    114:114:void <init>(net.minecraft.world.level.block.entity.LecternBlockEntity) -> <init>
    117:117:int get(int) -> a
    122:125:void set(int,int) -> a
    129:129:int getCount() -> a
net.minecraft.world.level.block.entity.LidBlockEntity -> bxe:
    float getOpenNess(float) -> a
net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity -> bxf:
    net.minecraft.resources.ResourceLocation lootTable -> g
    long lootTableSeed -> h
    32:33:void <init>(net.minecraft.world.level.block.entity.BlockEntityType) -> <init>
    36:40:void setLootTable(net.minecraft.world.level.BlockGetter,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.resources.ResourceLocation) -> a
    43:48:boolean tryLoadLootTable(net.minecraft.nbt.CompoundTag) -> d
    52:60:boolean trySaveLootTable(net.minecraft.nbt.CompoundTag) -> e
    64:77:void unpackLootTable(net.minecraft.world.entity.player.Player) -> d
    80:82:void setLootTable(net.minecraft.resources.ResourceLocation,long) -> a
    86:87:boolean isEmpty() -> c
    92:93:net.minecraft.world.item.ItemStack getItem(int) -> a
    98:104:net.minecraft.world.item.ItemStack removeItem(int,int) -> a
    109:111:net.minecraft.world.item.ItemStack removeItemNoUpdate(int) -> b
    116:122:void setItem(int,net.minecraft.world.item.ItemStack) -> a
    126:132:boolean stillValid(net.minecraft.world.entity.player.Player) -> a
    137:138:void clearContent() -> N_
    net.minecraft.core.NonNullList getItems() -> f
    void setItems(net.minecraft.core.NonNullList) -> a
    146:146:boolean canOpen(net.minecraft.world.entity.player.Player) -> e
    152:156:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory,net.minecraft.world.entity.player.Player) -> createMenu
net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity -> bxg:
    int[] SLOTS -> a
    net.minecraft.core.NonNullList itemStacks -> b
    int openCount -> c
    net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus animationStatus -> i
    float progress -> j
    float progressOld -> k
    net.minecraft.world.item.DyeColor color -> l
    boolean loadColorFromBlock -> m
    46:58:void <init>(net.minecraft.world.item.DyeColor) -> <init>
    61:63:void <init>() -> <init>
    74:78:void tick() -> Z_
    81:107:void updateAnimation() -> h
    110:110:net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus getAnimationStatus() -> j
    114:114:net.minecraft.world.phys.AABB getBoundingBox(net.minecraft.world.level.block.state.BlockState) -> a
    118:122:net.minecraft.world.phys.AABB getBoundingBox(net.minecraft.core.Direction) -> b
    127:131:net.minecraft.world.phys.AABB getTopBoundingBox(net.minecraft.core.Direction) -> c
    136:189:void moveCollidedEntities() -> l
    193:193:int getContainerSize() -> O_
    198:211:boolean triggerEvent(int,int) -> a_
    215:216:void doNeighborUpdates() -> m
    220:230:void startOpen(net.minecraft.world.entity.player.Player) -> a_
    234:241:void stopOpen(net.minecraft.world.entity.player.Player) -> b_
    245:245:net.minecraft.network.chat.Component getDefaultName() -> g
    250:252:void load(net.minecraft.nbt.CompoundTag) -> a
    256:257:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    261:267:void loadFromTag(net.minecraft.nbt.CompoundTag) -> f
    270:273:net.minecraft.nbt.CompoundTag saveToTag(net.minecraft.nbt.CompoundTag) -> g
    278:278:net.minecraft.core.NonNullList getItems() -> f
    283:284:void setItems(net.minecraft.core.NonNullList) -> a
    288:288:int[] getSlotsForFace(net.minecraft.core.Direction) -> a
    293:293:boolean canPlaceItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> a
    298:298:boolean canTakeItemThroughFace(int,net.minecraft.world.item.ItemStack,net.minecraft.core.Direction) -> b
    302:302:float getProgress(float) -> a
    307:311:net.minecraft.world.item.DyeColor getColor() -> k
    316:316:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
    44:44:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$1 -> bxg$1:
    int[] $SwitchMap$net$minecraft$world$level$block$entity$ShulkerBoxBlockEntity$AnimationStatus -> a
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> b
    82:160:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus -> bxg$a:
    net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus CLOSED -> a
    net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus OPENING -> b
    net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus OPENED -> c
    net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus CLOSING -> d
    net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus[] $VALUES -> e
    65:65:net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus[] values() -> values
    65:65:net.minecraft.world.level.block.entity.ShulkerBoxBlockEntity$AnimationStatus valueOf(java.lang.String) -> valueOf
    65:65:void <init>(java.lang.String,int) -> <init>
    65:69:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.SignBlockEntity -> bxh:
    net.minecraft.network.chat.Component[] messages -> a
    boolean isEditable -> b
    net.minecraft.world.entity.player.Player playerWhoMayEdit -> c
    java.lang.String[] renderMessages -> g
    net.minecraft.world.item.DyeColor color -> h
    28:39:void <init>() -> <init>
    43:50:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    55:74:void load(net.minecraft.nbt.CompoundTag) -> a
    77:77:net.minecraft.network.chat.Component getMessage(int) -> a
    81:83:void setMessage(int,net.minecraft.network.chat.Component) -> a
    87:90:java.lang.String getRenderMessage(int,java.util.function.Function) -> a
    96:96:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    101:101:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    106:106:boolean onlyOpCanSetNbt() -> t
    110:110:boolean isEditable() -> d
    114:118:void setEditable(boolean) -> a
    121:122:void setAllowedPlayerEditor(net.minecraft.world.entity.player.Player) -> a
    125:125:net.minecraft.world.entity.player.Player getPlayerWhoMayEdit() -> f
    129:140:boolean executeClickCommands(net.minecraft.world.entity.player.Player) -> b
    144:146:net.minecraft.commands.CommandSourceStack createCommandSourceStack(net.minecraft.server.level.ServerPlayer) -> a
    150:150:net.minecraft.world.item.DyeColor getColor() -> g
    154:160:boolean setColor(net.minecraft.world.item.DyeColor) -> a
net.minecraft.world.level.block.entity.SkullBlockEntity -> bxi:
    com.mojang.authlib.GameProfile owner -> a
    int mouthTickCount -> b
    boolean isMovingMouth -> c
    net.minecraft.server.players.GameProfileCache profileCache -> g
    com.mojang.authlib.minecraft.MinecraftSessionService sessionService -> h
    28:29:void <init>() -> <init>
    32:33:void setProfileCache(net.minecraft.server.players.GameProfileCache) -> a
    36:37:void setSessionService(com.mojang.authlib.minecraft.MinecraftSessionService) -> a
    41:49:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    54:64:void load(net.minecraft.nbt.CompoundTag) -> a
    68:77:void tick() -> Z_
    80:83:float getMouthAnimation(float) -> a
    88:88:com.mojang.authlib.GameProfile getOwnerProfile() -> d
    94:94:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    99:99:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    103:105:void setOwner(com.mojang.authlib.GameProfile) -> a
    108:110:void updateOwnerProfile() -> f
    113:134:com.mojang.authlib.GameProfile updateGameprofile(com.mojang.authlib.GameProfile) -> b
net.minecraft.world.level.block.entity.SmokerBlockEntity -> bxj:
    13:14:void <init>() -> <init>
    18:18:net.minecraft.network.chat.Component getDefaultName() -> g
    23:23:int getBurnDuration(net.minecraft.world.item.ItemStack) -> a
    28:28:net.minecraft.world.inventory.AbstractContainerMenu createMenu(int,net.minecraft.world.entity.player.Inventory) -> a
net.minecraft.world.level.block.entity.SpawnerBlockEntity -> bxk:
    net.minecraft.world.level.BaseSpawner spawner -> a
    16:44:void <init>() -> <init>
    48:50:void load(net.minecraft.nbt.CompoundTag) -> a
    54:57:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    62:63:void tick() -> Z_
    68:68:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    73:75:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    80:83:boolean triggerEvent(int,int) -> a_
    88:88:boolean onlyOpCanSetNbt() -> t
    92:92:net.minecraft.world.level.BaseSpawner getSpawner() -> d
net.minecraft.world.level.block.entity.SpawnerBlockEntity$1 -> bxk$1:
    net.minecraft.world.level.block.entity.SpawnerBlockEntity this$0 -> a
    16:16:void <init>(net.minecraft.world.level.block.entity.SpawnerBlockEntity) -> <init>
    19:20:void broadcastEvent(int) -> a
    24:24:net.minecraft.world.level.Level getLevel() -> a
    29:29:net.minecraft.core.BlockPos getPos() -> b
    34:39:void setNextSpawnData(net.minecraft.world.level.SpawnData) -> a
net.minecraft.world.level.block.entity.StructureBlockEntity -> bxl:
    net.minecraft.resources.ResourceLocation structureName -> a
    java.lang.String author -> b
    java.lang.String metaData -> c
    net.minecraft.core.BlockPos structurePos -> g
    net.minecraft.core.BlockPos structureSize -> h
    net.minecraft.world.level.block.Mirror mirror -> i
    net.minecraft.world.level.block.Rotation rotation -> j
    net.minecraft.world.level.block.state.properties.StructureMode mode -> k
    boolean ignoreEntities -> l
    boolean powered -> m
    boolean showAir -> n
    boolean showBoundingBox -> o
    float integrity -> p
    long seed -> q
    45:61:void <init>() -> <init>
    65:84:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    89:127:void load(net.minecraft.nbt.CompoundTag) -> a
    130:138:void updateBlockState() -> L
    143:143:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    148:148:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    152:158:boolean usedBy(net.minecraft.world.entity.player.Player) -> a
    162:162:java.lang.String getStructureName() -> d
    166:166:java.lang.String getStructurePath() -> f
    170:170:boolean hasStructureName() -> g
    174:175:void setStructureName(java.lang.String) -> a
    178:179:void setStructureName(net.minecraft.resources.ResourceLocation) -> a
    182:183:void createdBy(net.minecraft.world.entity.LivingEntity) -> a
    186:186:net.minecraft.core.BlockPos getStructurePos() -> h
    190:191:void setStructurePos(net.minecraft.core.BlockPos) -> b
    194:194:net.minecraft.core.BlockPos getStructureSize() -> j
    198:199:void setStructureSize(net.minecraft.core.BlockPos) -> c
    202:202:net.minecraft.world.level.block.Mirror getMirror() -> k
    206:207:void setMirror(net.minecraft.world.level.block.Mirror) -> b
    210:210:net.minecraft.world.level.block.Rotation getRotation() -> l
    214:215:void setRotation(net.minecraft.world.level.block.Rotation) -> b
    218:218:java.lang.String getMetaData() -> m
    222:223:void setMetaData(java.lang.String) -> b
    226:226:net.minecraft.world.level.block.state.properties.StructureMode getMode() -> x
    230:235:void setMode(net.minecraft.world.level.block.state.properties.StructureMode) -> a
    238:252:void nextMode() -> y
    255:255:boolean isIgnoreEntities() -> z
    259:260:void setIgnoreEntities(boolean) -> a
    263:263:float getIntegrity() -> A
    267:268:void setIntegrity(float) -> a
    271:271:long getSeed() -> B
    275:276:void setSeed(long) -> a
    279:302:boolean detectSize() -> C
    306:307:java.util.List filterRelatedCornerBlocks(java.util.List) -> a
    311:322:java.util.List getNearbyCornerBlocks(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    327:352:net.minecraft.world.level.levelgen.structure.BoundingBox calculateEnclosingBoundingBox(net.minecraft.core.BlockPos,java.util.List) -> a
    356:356:boolean saveStructure() -> D
    360:383:boolean saveStructure(boolean) -> b
    387:387:boolean loadStructure() -> E
    391:394:java.util.Random createRandom(long) -> b
    398:414:boolean loadStructure(boolean) -> c
    418:443:boolean loadStructure(boolean,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate) -> a
    448:454:void unloadStructure() -> F
    457:465:boolean isStructureLoadable() -> G
    470:470:boolean isPowered() -> H
    474:475:void setPowered(boolean) -> d
    478:478:boolean getShowAir() -> I
    482:483:void setShowAir(boolean) -> e
    486:486:boolean getShowBoundingBox() -> J
    490:491:void setShowBoundingBox(boolean) -> f
    494:494:net.minecraft.network.chat.Component getDisplayName() -> K
    306:306:boolean lambda$filterRelatedCornerBlocks$0(net.minecraft.world.level.block.entity.StructureBlockEntity) -> a
net.minecraft.world.level.block.entity.StructureBlockEntity$1 -> bxl$1:
    int[] $SwitchMap$net$minecraft$world$level$block$state$properties$StructureMode -> a
    238:238:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType -> bxl$a:
    net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType UPDATE_DATA -> a
    net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType SAVE_AREA -> b
    net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType LOAD_AREA -> c
    net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType SCAN_AREA -> d
    net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType[] $VALUES -> e
    497:497:net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType[] values() -> values
    497:497:net.minecraft.world.level.block.entity.StructureBlockEntity$UpdateType valueOf(java.lang.String) -> valueOf
    497:497:void <init>(java.lang.String,int) -> <init>
    497:501:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity -> bxm:
    org.apache.logging.log4j.Logger LOGGER -> a
    long age -> b
    int teleportCooldown -> c
    net.minecraft.core.BlockPos exitPortal -> g
    boolean exactTeleport -> h
    50:51:void <init>() -> <init>
    55:64:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    69:75:void load(net.minecraft.nbt.CompoundTag) -> a
    79:79:double getViewDistance() -> i
    84:103:void tick() -> Z_
    106:106:boolean isSpawning() -> d
    110:110:boolean isCoolingDown() -> f
    114:114:float getSpawnPercent(float) -> a
    118:118:float getCooldownPercent(float) -> b
    124:124:net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket getUpdatePacket() -> a
    129:129:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    133:138:void triggerCooldown() -> h
    142:147:boolean triggerEvent(int,int) -> a_
    151:166:void teleportEntity(net.minecraft.world.entity.Entity) -> a
    169:171:net.minecraft.core.BlockPos findExitPosition() -> k
    175:209:void findExitPortal(net.minecraft.server.level.ServerLevel) -> a
    212:231:net.minecraft.core.BlockPos findTallestBlock(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,int,boolean) -> a
    235:235:net.minecraft.world.level.chunk.LevelChunk getChunk(net.minecraft.world.level.Level,net.minecraft.world.phys.Vec3) -> a
    240:262:net.minecraft.core.BlockPos findValidSpawnInChunk(net.minecraft.world.level.chunk.LevelChunk) -> a
    267:268:void createExitPortal(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos) -> a
    272:272:boolean shouldRenderFace(net.minecraft.core.Direction) -> a
    276:280:int getParticleAmount() -> j
    284:286:void setExitPosition(net.minecraft.core.BlockPos,boolean) -> a
    36:36:void <clinit>() -> <clinit>
net.minecraft.world.level.block.entity.TheEndPortalBlockEntity -> bxn:
    7:8:void <init>(net.minecraft.world.level.block.entity.BlockEntityType) -> <init>
    11:12:void <init>() -> <init>
    15:15:boolean shouldRenderFace(net.minecraft.core.Direction) -> a
net.minecraft.world.level.block.entity.TickableBlockEntity -> bxo:
    void tick() -> Z_
net.minecraft.world.level.block.entity.TrappedChestBlockEntity -> bxp:
    5:6:void <init>() -> <init>
    10:12:void signalOpenCount() -> h
net.minecraft.world.level.block.entity.package-info -> bxq:
net.minecraft.world.level.block.grower.AbstractMegaTreeGrower -> bxr:
    16:16:void <init>() -> <init>
    19:27:boolean growTree(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredMegaFeature(java.util.Random) -> a
    34:53:boolean placeMega(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,java.util.Random,int,int) -> a
    57:61:boolean isTwoByTwoSapling(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,int,int) -> a
net.minecraft.world.level.block.grower.AbstractTreeGrower -> bxs:
    16:16:void <init>() -> <init>
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredFeature(java.util.Random,boolean) -> a
    23:35:boolean growTree(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    39:44:boolean hasFlowers(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.block.grower.AcaciaTreeGrower -> bxt:
    11:11:void <init>() -> <init>
    15:15:net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredFeature(java.util.Random,boolean) -> a
net.minecraft.world.level.block.grower.BirchTreeGrower -> bxu:
    11:11:void <init>() -> <init>
    15:15:net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredFeature(java.util.Random,boolean) -> a
net.minecraft.world.level.block.grower.DarkOakTreeGrower -> bxv:
    12:12:void <init>() -> <init>
    16:16:net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredFeature(java.util.Random,boolean) -> a
    22:22:net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredMegaFeature(java.util.Random) -> a
net.minecraft.world.level.block.grower.JungleTreeGrower -> bxw:
    13:13:void <init>() -> <init>
    17:17:net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredFeature(java.util.Random,boolean) -> a
    23:23:net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredMegaFeature(java.util.Random) -> a
net.minecraft.world.level.block.grower.OakTreeGrower -> bxx:
    11:11:void <init>() -> <init>
    15:17:net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredFeature(java.util.Random,boolean) -> a
net.minecraft.world.level.block.grower.SpruceTreeGrower -> bxy:
    12:12:void <init>() -> <init>
    16:16:net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredFeature(java.util.Random,boolean) -> a
    22:23:net.minecraft.world.level.levelgen.feature.ConfiguredFeature getConfiguredMegaFeature(java.util.Random) -> a
net.minecraft.world.level.block.grower.package-info -> bxz:
net.minecraft.world.level.block.package-info -> bya:
net.minecraft.world.level.block.piston.MovingPistonBlock -> byb:
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> a
    net.minecraft.world.level.block.state.properties.EnumProperty TYPE -> b
    39:41:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    46:46:net.minecraft.world.level.block.entity.BlockEntity newBlockEntity(net.minecraft.world.level.BlockGetter) -> a
    51:51:net.minecraft.world.level.block.entity.BlockEntity newMovingBlockEntity(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,boolean,boolean) -> a
    56:63:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    68:73:void destroy(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    77:77:boolean isRedstoneConductor(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> d
    82:82:boolean isSuffocating(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> c
    88:93:net.minecraft.world.InteractionResult use(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    99:104:java.util.List getDrops(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.storage.loot.LootContext$Builder) -> a
    110:110:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    115:119:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    124:128:net.minecraft.world.level.block.piston.PistonMovingBlockEntity getBlockEntity(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    133:133:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    138:138:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    143:143:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    148:149:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    153:153:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    35:36:void <clinit>() -> <clinit>
net.minecraft.world.level.block.piston.PistonBaseBlock -> byc:
    net.minecraft.world.level.block.state.properties.BooleanProperty EXTENDED -> b
    net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> c
    net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> d
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> e
    net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> f
    net.minecraft.world.phys.shapes.VoxelShape UP_AABB -> g
    net.minecraft.world.phys.shapes.VoxelShape DOWN_AABB -> h
    boolean isSticky -> i
    53:56:void <init>(boolean,net.minecraft.world.level.block.Block$Properties) -> <init>
    60:60:boolean isSuffocating(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> c
    65:82:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    88:88:boolean isRedstoneConductor(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> d
    93:96:void setPlacedBy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.LivingEntity,net.minecraft.world.item.ItemStack) -> a
    100:103:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    107:113:void onPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    117:117:net.minecraft.world.level.block.state.BlockState getStateForPlacement(net.minecraft.world.item.BlockPlaceContext) -> a
    121:147:void checkIfExtend(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    161:179:boolean getNeighborSignal(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    184:248:boolean triggerEvent(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,int) -> a
    253:293:boolean isPushable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction,boolean,net.minecraft.core.Direction) -> a
    297:398:boolean moveBlocks(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction,boolean) -> a
    403:403:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    408:408:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    413:414:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    418:418:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    423:423:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    36:48:void <clinit>() -> <clinit>
net.minecraft.world.level.block.piston.PistonBaseBlock$1 -> byc$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    int[] $SwitchMap$net$minecraft$world$level$material$PushReaction -> b
    66:278:void <clinit>() -> <clinit>
net.minecraft.world.level.block.piston.PistonHeadBlock -> byd:
    net.minecraft.world.level.block.state.properties.EnumProperty TYPE -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty SHORT -> c
    net.minecraft.world.phys.shapes.VoxelShape EAST_AABB -> d
    net.minecraft.world.phys.shapes.VoxelShape WEST_AABB -> e
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_AABB -> f
    net.minecraft.world.phys.shapes.VoxelShape NORTH_AABB -> g
    net.minecraft.world.phys.shapes.VoxelShape UP_AABB -> h
    net.minecraft.world.phys.shapes.VoxelShape DOWN_AABB -> i
    net.minecraft.world.phys.shapes.VoxelShape UP_ARM_AABB -> j
    net.minecraft.world.phys.shapes.VoxelShape DOWN_ARM_AABB -> k
    net.minecraft.world.phys.shapes.VoxelShape SOUTH_ARM_AABB -> w
    net.minecraft.world.phys.shapes.VoxelShape NORTH_ARM_AABB -> x
    net.minecraft.world.phys.shapes.VoxelShape EAST_ARM_AABB -> y
    net.minecraft.world.phys.shapes.VoxelShape WEST_ARM_AABB -> z
    net.minecraft.world.phys.shapes.VoxelShape SHORT_UP_ARM_AABB -> A
    net.minecraft.world.phys.shapes.VoxelShape SHORT_DOWN_ARM_AABB -> B
    net.minecraft.world.phys.shapes.VoxelShape SHORT_SOUTH_ARM_AABB -> C
    net.minecraft.world.phys.shapes.VoxelShape SHORT_NORTH_ARM_AABB -> D
    net.minecraft.world.phys.shapes.VoxelShape SHORT_EAST_ARM_AABB -> E
    net.minecraft.world.phys.shapes.VoxelShape SHORT_WEST_ARM_AABB -> F
    59:61:void <init>(net.minecraft.world.level.block.Block$Properties) -> <init>
    64:77:net.minecraft.world.phys.shapes.VoxelShape getBaseShape(net.minecraft.world.level.block.state.BlockState) -> h
    83:83:boolean useShapeForLightOcclusion(net.minecraft.world.level.block.state.BlockState) -> o
    88:88:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    92:106:net.minecraft.world.phys.shapes.VoxelShape getArmShape(net.minecraft.world.level.block.state.BlockState) -> i
    112:120:void playerWillDestroy(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.entity.player.Player) -> a
    124:138:void onRemove(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    142:147:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    152:153:boolean canSurvive(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    158:162:void neighborChanged(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    166:166:net.minecraft.world.item.ItemStack getCloneItemStack(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    171:171:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Rotation) -> a
    176:176:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Mirror) -> a
    181:182:void createBlockStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    186:186:boolean isPathfindable(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    28:56:void <clinit>() -> <clinit>
net.minecraft.world.level.block.piston.PistonHeadBlock$1 -> byd$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    64:64:void <clinit>() -> <clinit>
net.minecraft.world.level.block.piston.PistonMath -> bye:
    10:10:void <init>() -> <init>
    15:31:net.minecraft.world.phys.AABB getMovementArea(net.minecraft.world.phys.AABB,net.minecraft.core.Direction,double) -> a
net.minecraft.world.level.block.piston.PistonMath$1 -> bye$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.level.block.piston.PistonMovingBlockEntity -> byf:
    net.minecraft.world.level.block.state.BlockState movedState -> a
    net.minecraft.core.Direction direction -> b
    boolean extending -> c
    boolean isSourcePiston -> g
    java.lang.ThreadLocal NOCLIP -> h
    float progress -> i
    float progressO -> j
    long lastTicked -> k
    45:46:void <init>() -> <init>
    49:54:void <init>(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,boolean,boolean) -> <init>
    58:58:net.minecraft.nbt.CompoundTag getUpdateTag() -> b
    62:62:boolean isExtending() -> d
    66:66:net.minecraft.core.Direction getDirection() -> f
    70:70:boolean isSourcePiston() -> h
    74:77:float getProgress(float) -> a
    81:81:float getXOff(float) -> b
    85:85:float getYOff(float) -> c
    89:89:float getZOff(float) -> d
    93:93:float getExtendedProgress(float) -> e
    97:102:net.minecraft.world.level.block.state.BlockState getCollisionRelatedBlockState() -> x
    106:178:void moveCollidedEntities(float) -> f
    182:185:void moveEntityByPiston(net.minecraft.core.Direction,net.minecraft.world.entity.Entity,double,net.minecraft.core.Direction) -> a
    188:206:void moveStuckEntities(float) -> g
    209:214:boolean matchesStickyCritera(net.minecraft.world.phys.AABB,net.minecraft.world.entity.Entity) -> a
    219:219:boolean isStickyForEntities() -> y
    223:223:net.minecraft.core.Direction getMovementDirection() -> j
    228:244:net.minecraft.world.phys.AABB getMinMaxPiecesAABB(java.util.List) -> a
    248:261:double getMovement(net.minecraft.world.phys.AABB,net.minecraft.core.Direction,net.minecraft.world.phys.AABB) -> a
    266:270:net.minecraft.world.phys.AABB moveByPositionAndProgress(net.minecraft.world.phys.AABB) -> a
    275:289:void fixEntityWithinPistonBase(net.minecraft.world.entity.Entity,net.minecraft.core.Direction,double) -> a
    292:292:net.minecraft.world.level.block.state.BlockState getMovedState() -> k
    296:312:void finalTick() -> l
    316:345:void tick() -> Z_
    349:357:void load(net.minecraft.nbt.CompoundTag) -> a
    361:369:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    376:397:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    401:401:long getLastTicked() -> m
    202:202:boolean lambda$moveStuckEntities$1(net.minecraft.world.phys.AABB,net.minecraft.world.entity.Entity) -> b
    37:37:net.minecraft.core.Direction lambda$static$0() -> z
    37:37:void <clinit>() -> <clinit>
net.minecraft.world.level.block.piston.PistonMovingBlockEntity$1 -> byf$1:
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> a
    int[] $SwitchMap$net$minecraft$core$Direction -> b
    133:248:void <clinit>() -> <clinit>
net.minecraft.world.level.block.piston.PistonStructureResolver -> byg:
    net.minecraft.world.level.Level level -> a
    net.minecraft.core.BlockPos pistonPos -> b
    boolean extending -> c
    net.minecraft.core.BlockPos startPos -> d
    net.minecraft.core.Direction pushDirection -> e
    java.util.List toPush -> f
    java.util.List toDestroy -> g
    net.minecraft.core.Direction pistonDirection -> h
    22:39:void <init>(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.Direction,boolean) -> <init>
    42:74:boolean resolve() -> a
    78:78:boolean isSticky(net.minecraft.world.level.block.Block) -> a
    83:89:boolean canStickToEachOther(net.minecraft.world.level.block.Block,net.minecraft.world.level.block.Block) -> a
    93:185:boolean addBlockLine(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    190:202:void reorderListAtCollision(int,int) -> a
    205:219:boolean addBranchingBlocks(net.minecraft.core.BlockPos) -> a
    223:223:net.minecraft.core.Direction getPushDirection() -> b
    227:227:java.util.List getToPush() -> c
    231:231:java.util.List getToDestroy() -> d
net.minecraft.world.level.block.piston.package-info -> byh:
net.minecraft.world.level.block.state.AbstractStateHolder -> byi:
    java.util.function.Function PROPERTY_ENTRY_TO_STRING_FUNCTION -> c
    java.lang.Object owner -> a
    com.google.common.collect.ImmutableMap values -> d
    com.google.common.collect.Table neighbours -> e
    40:43:void <init>(java.lang.Object,com.google.common.collect.ImmutableMap) -> <init>
    47:47:java.lang.Object cycle(net.minecraft.world.level.block.state.properties.Property) -> a
    51:62:java.lang.Object findNextInCollection(java.util.Collection,java.lang.Object) -> a
    67:76:java.lang.String toString() -> toString
    81:81:java.util.Collection getProperties() -> a
    86:86:boolean hasProperty(net.minecraft.world.level.block.state.properties.Property) -> b
    91:96:java.lang.Comparable getValue(net.minecraft.world.level.block.state.properties.Property) -> c
    102:115:java.lang.Object setValue(net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> a
    119:134:void populateNeighbours(java.util.Map) -> a
    137:139:java.util.Map makeNeighbourValues(net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> c
    144:144:com.google.common.collect.ImmutableMap getValues() -> b
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.AbstractStateHolder$1 -> byi$1:
    19:19:void <init>() -> <init>
    22:27:java.lang.String apply(java.util.Map$Entry) -> a
    32:32:java.lang.String getName(net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> a
    19:19:java.lang.Object apply(java.lang.Object) -> apply
net.minecraft.world.level.block.state.BlockState -> byj:
    net.minecraft.world.level.block.state.BlockState$Cache cache -> c
    int lightEmission -> d
    boolean useShapeForLightOcclusion -> e
    63:66:void <init>(net.minecraft.world.level.block.Block,com.google.common.collect.ImmutableMap) -> <init>
    69:72:void initCache() -> c
    75:75:net.minecraft.world.level.block.Block getBlock() -> d
    79:79:net.minecraft.world.level.material.Material getMaterial() -> e
    83:83:boolean isValidSpawn(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.EntityType) -> a
    87:90:boolean propagatesSkylightDown(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    94:97:int getLightBlock(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    101:105:net.minecraft.world.phys.shapes.VoxelShape getFaceOcclusionShape(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    110:110:boolean hasLargeCollisionShape() -> f
    114:114:boolean useShapeForLightOcclusion() -> g
    118:118:int getLightEmission() -> h
    122:122:boolean isAir() -> i
    126:126:net.minecraft.world.level.material.MaterialColor getMapColor(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> c
    130:130:net.minecraft.world.level.block.state.BlockState rotate(net.minecraft.world.level.block.Rotation) -> a
    134:134:net.minecraft.world.level.block.state.BlockState mirror(net.minecraft.world.level.block.Mirror) -> a
    138:138:net.minecraft.world.level.block.RenderShape getRenderShape() -> j
    142:142:boolean emissiveRendering() -> k
    146:146:float getShadeBrightness(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> d
    150:150:boolean isRedstoneConductor(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> e
    154:154:boolean isSignalSource() -> l
    158:158:int getSignal(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> b
    162:162:boolean hasAnalogOutputSignal() -> m
    166:166:int getAnalogOutputSignal(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    170:170:float getDestroySpeed(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> f
    174:174:float getDestroyProgress(net.minecraft.world.entity.player.Player,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    178:178:int getDirectSignal(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> c
    182:182:net.minecraft.world.level.material.PushReaction getPistonPushReaction() -> n
    186:189:boolean isSolidRender(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> g
    193:196:boolean canOcclude() -> o
    200:200:boolean skipRendering(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction) -> a
    204:204:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> h
    208:208:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> a
    212:215:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> i
    219:219:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.phys.shapes.CollisionContext) -> b
    223:223:net.minecraft.world.phys.shapes.VoxelShape getOcclusionShape(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> j
    227:227:net.minecraft.world.phys.shapes.VoxelShape getInteractionShape(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> k
    231:231:boolean entityCanStandOn(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    235:235:net.minecraft.world.phys.Vec3 getOffset(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> l
    239:239:boolean triggerEvent(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,int,int) -> a
    243:244:void neighborChanged(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Block,net.minecraft.core.BlockPos,boolean) -> a
    247:248:void updateNeighbourShapes(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,int) -> a
    251:252:void updateIndirectNeighbourShapes(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,int) -> b
    255:256:void onPlace(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    259:260:void onRemove(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> b
    263:264:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> a
    267:268:void randomTick(net.minecraft.server.level.ServerLevel,net.minecraft.core.BlockPos,java.util.Random) -> b
    271:272:void entityInside(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.Entity) -> a
    275:276:void spawnAfterBreak(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.item.ItemStack) -> a
    279:279:java.util.List getDrops(net.minecraft.world.level.storage.loot.LootContext$Builder) -> a
    283:283:net.minecraft.world.InteractionResult use(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> a
    287:288:void attack(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.entity.player.Player) -> a
    291:291:boolean isSuffocating(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> m
    295:295:boolean isViewBlocking(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> n
    299:299:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    303:303:boolean isPathfindable(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.PathComputationType) -> a
    307:307:boolean canBeReplaced(net.minecraft.world.item.BlockPlaceContext) -> a
    311:311:boolean canBeReplaced(net.minecraft.world.level.material.Fluid) -> a
    315:315:boolean canSurvive(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    319:319:boolean hasPostProcess(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> o
    324:324:net.minecraft.world.MenuProvider getMenuProvider(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> b
    328:328:boolean is(net.minecraft.tags.Tag) -> a
    332:332:net.minecraft.world.level.material.FluidState getFluidState() -> p
    336:336:boolean isRandomlyTicking() -> q
    340:340:long getSeed(net.minecraft.core.BlockPos) -> a
    344:344:net.minecraft.world.level.block.SoundType getSoundType() -> r
    348:349:void onProjectileHit(net.minecraft.world.level.Level,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.BlockHitResult,net.minecraft.world.entity.Entity) -> a
    352:355:boolean isFaceSturdy(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> d
    359:362:boolean isCollisionShapeFullBlock(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> p
    366:384:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.block.state.BlockState) -> a
    388:401:net.minecraft.world.level.block.state.BlockState deserialize(com.mojang.datafixers.Dynamic) -> a
    389:389:java.lang.String lambda$deserialize$2(com.mojang.datafixers.Dynamic) -> b
    389:389:java.lang.String lambda$deserialize$1(com.mojang.datafixers.Dynamic) -> c
    378:378:com.mojang.datafixers.util.Pair lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> a
net.minecraft.world.level.block.state.BlockState$1 -> byj$1:
net.minecraft.world.level.block.state.BlockState$Cache -> byj$a:
    net.minecraft.core.Direction[] DIRECTIONS -> a
    boolean canOcclude -> b
    boolean solidRender -> c
    boolean propagatesSkylightDown -> d
    int lightBlock -> e
    net.minecraft.world.phys.shapes.VoxelShape[] occlusionShapes -> f
    net.minecraft.world.phys.shapes.VoxelShape collisionShape -> g
    boolean largeCollisionShape -> h
    boolean[] isFaceSturdy -> i
    boolean isCollisionShapeFullBlock -> j
    416:439:void <init>(net.minecraft.world.level.block.state.BlockState) -> <init>
    433:433:boolean lambda$new$0(net.minecraft.core.Direction$Axis) -> a
    404:404:void <init>(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState$1) -> <init>
    404:404:boolean access$100(net.minecraft.world.level.block.state.BlockState$Cache) -> a
    404:404:int access$200(net.minecraft.world.level.block.state.BlockState$Cache) -> b
    404:404:net.minecraft.world.phys.shapes.VoxelShape[] access$300(net.minecraft.world.level.block.state.BlockState$Cache) -> c
    404:404:boolean access$400(net.minecraft.world.level.block.state.BlockState$Cache) -> d
    404:404:boolean access$500(net.minecraft.world.level.block.state.BlockState$Cache) -> e
    404:404:boolean access$600(net.minecraft.world.level.block.state.BlockState$Cache) -> f
    404:404:net.minecraft.world.phys.shapes.VoxelShape access$700(net.minecraft.world.level.block.state.BlockState$Cache) -> g
    404:404:boolean[] access$800(net.minecraft.world.level.block.state.BlockState$Cache) -> h
    404:404:boolean access$900(net.minecraft.world.level.block.state.BlockState$Cache) -> i
    405:405:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.StateDefinition -> byk:
    java.util.regex.Pattern NAME_PATTERN -> a
    java.lang.Object owner -> b
    com.google.common.collect.ImmutableSortedMap propertiesByName -> c
    com.google.common.collect.ImmutableList states -> d
    29:59:void <init>(java.lang.Object,net.minecraft.world.level.block.state.StateDefinition$Factory,java.util.Map) -> <init>
    62:62:com.google.common.collect.ImmutableList getPossibleStates() -> a
    66:66:net.minecraft.world.level.block.state.StateHolder any() -> b
    70:70:java.lang.Object getOwner() -> c
    74:74:java.util.Collection getProperties() -> d
    79:82:java.lang.String toString() -> toString
    87:87:net.minecraft.world.level.block.state.properties.Property getProperty(java.lang.String) -> a
    47:52:void lambda$new$2(net.minecraft.world.level.block.state.StateDefinition$Factory,java.lang.Object,java.util.Map,java.util.List,java.util.List) -> a
    39:39:java.util.stream.Stream lambda$new$1(net.minecraft.world.level.block.state.properties.Property,java.util.List) -> a
    40:42:java.util.List lambda$null$0(java.util.List,java.lang.Comparable) -> a
    21:21:java.util.regex.Pattern access$000() -> e
    22:22:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.StateDefinition$Builder -> byk$a:
    java.lang.Object owner -> a
    java.util.Map properties -> b
    96:100:void <init>(java.lang.Object) -> <init>
    103:107:net.minecraft.world.level.block.state.StateDefinition$Builder add(net.minecraft.world.level.block.state.properties.Property[]) -> a
    111:131:void validateProperty(net.minecraft.world.level.block.state.properties.Property) -> a
    134:134:net.minecraft.world.level.block.state.StateDefinition create(net.minecraft.world.level.block.state.StateDefinition$Factory) -> a
net.minecraft.world.level.block.state.StateDefinition$Factory -> byk$b:
    net.minecraft.world.level.block.state.AbstractStateHolder create(java.lang.Object,com.google.common.collect.ImmutableMap) -> create
net.minecraft.world.level.block.state.StateHolder -> byl:
    org.apache.logging.log4j.Logger LOGGER -> b
    java.util.Collection getProperties() -> a
    boolean hasProperty(net.minecraft.world.level.block.state.properties.Property) -> b
    java.lang.Comparable getValue(net.minecraft.world.level.block.state.properties.Property) -> c
    java.lang.Object setValue(net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> a
    java.lang.Object cycle(net.minecraft.world.level.block.state.properties.Property) -> a
    com.google.common.collect.ImmutableMap getValues() -> b
    27:27:java.lang.String getName(net.minecraft.world.level.block.state.properties.Property,java.lang.Comparable) -> b
    31:37:net.minecraft.world.level.block.state.StateHolder setValueHelper(net.minecraft.world.level.block.state.StateHolder,net.minecraft.world.level.block.state.properties.Property,java.lang.String,java.lang.String,java.lang.String) -> a
    12:12:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.package-info -> bym:
net.minecraft.world.level.block.state.pattern.BlockInWorld -> byn:
    net.minecraft.world.level.LevelReader level -> a
    net.minecraft.core.BlockPos pos -> b
    boolean loadChunks -> c
    net.minecraft.world.level.block.state.BlockState state -> d
    net.minecraft.world.level.block.entity.BlockEntity entity -> e
    boolean cachedEntity -> f
    19:23:void <init>(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,boolean) -> <init>
    26:30:net.minecraft.world.level.block.state.BlockState getState() -> a
    35:40:net.minecraft.world.level.block.entity.BlockEntity getEntity() -> b
    44:44:net.minecraft.world.level.LevelReader getLevel() -> c
    48:48:net.minecraft.core.BlockPos getPos() -> d
    52:52:java.util.function.Predicate hasState(java.util.function.Predicate) -> a
    56:56:java.util.function.Predicate hasState(net.minecraft.world.level.block.state.BlockState) -> a
    56:56:boolean lambda$hasState$1(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.pattern.BlockInWorld) -> a
    52:52:boolean lambda$hasState$0(java.util.function.Predicate,net.minecraft.world.level.block.state.pattern.BlockInWorld) -> a
net.minecraft.world.level.block.state.pattern.BlockPattern -> byo:
    java.util.function.Predicate[][][] pattern -> a
    int depth -> b
    int height -> c
    int width -> d
    22:39:void <init>(java.util.function.Predicate[][][]) -> <init>
    42:42:int getDepth() -> a
    46:46:int getHeight() -> b
    50:50:int getWidth() -> c
    54:54:java.util.function.Predicate[][][] getPattern() -> d
    59:60:net.minecraft.world.level.block.state.pattern.BlockPattern$BlockPatternMatch matches(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.core.Direction,net.minecraft.core.Direction) -> a
    65:75:net.minecraft.world.level.block.state.pattern.BlockPattern$BlockPatternMatch matches(net.minecraft.core.BlockPos,net.minecraft.core.Direction,net.minecraft.core.Direction,com.google.common.cache.LoadingCache) -> a
    80:99:net.minecraft.world.level.block.state.pattern.BlockPattern$BlockPatternMatch find(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    103:103:com.google.common.cache.LoadingCache createLevelCache(net.minecraft.world.level.LevelReader,boolean) -> a
    107:118:net.minecraft.core.BlockPos translateAndRotate(net.minecraft.core.BlockPos,net.minecraft.core.Direction,net.minecraft.core.Direction,int,int,int) -> a
net.minecraft.world.level.block.state.pattern.BlockPattern$BlockCacheLoader -> byo$a:
    net.minecraft.world.level.LevelReader level -> a
    boolean loadChunks -> b
    126:129:void <init>(net.minecraft.world.level.LevelReader,boolean) -> <init>
    133:133:net.minecraft.world.level.block.state.pattern.BlockInWorld load(net.minecraft.core.BlockPos) -> a
    122:122:java.lang.Object load(java.lang.Object) -> load
net.minecraft.world.level.block.state.pattern.BlockPattern$BlockPatternMatch -> byo$b:
    net.minecraft.core.BlockPos frontTopLeft -> a
    net.minecraft.core.Direction forwards -> b
    net.minecraft.core.Direction up -> c
    com.google.common.cache.LoadingCache cache -> d
    int width -> e
    int height -> f
    int depth -> g
    146:154:void <init>(net.minecraft.core.BlockPos,net.minecraft.core.Direction,net.minecraft.core.Direction,com.google.common.cache.LoadingCache,int,int,int) -> <init>
    157:157:net.minecraft.core.BlockPos getFrontTopLeft() -> a
    161:161:net.minecraft.core.Direction getForwards() -> b
    165:165:net.minecraft.core.Direction getUp() -> c
    169:169:int getWidth() -> d
    173:173:int getHeight() -> e
    177:177:int getDepth() -> f
    181:181:net.minecraft.world.level.block.state.pattern.BlockInWorld getBlock(int,int,int) -> a
    186:190:java.lang.String toString() -> toString
    194:233:net.minecraft.world.level.block.state.pattern.BlockPattern$PortalInfo getPortalOutput(net.minecraft.core.Direction,net.minecraft.core.BlockPos,double,net.minecraft.world.phys.Vec3,double) -> a
net.minecraft.world.level.block.state.pattern.BlockPattern$PortalInfo -> byo$c:
    net.minecraft.world.phys.Vec3 pos -> a
    net.minecraft.world.phys.Vec3 speed -> b
    int angle -> c
    242:246:void <init>(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,int) -> <init>
net.minecraft.world.level.block.state.pattern.BlockPatternBuilder -> byp:
    com.google.common.base.Joiner COMMA_JOINED -> a
    java.util.List pattern -> b
    java.util.Map lookup -> c
    int height -> d
    int width -> e
    18:25:void <init>() -> <init>
    28:54:net.minecraft.world.level.block.state.pattern.BlockPatternBuilder aisle(java.lang.String[]) -> a
    58:58:net.minecraft.world.level.block.state.pattern.BlockPatternBuilder start() -> a
    62:64:net.minecraft.world.level.block.state.pattern.BlockPatternBuilder where(char,java.util.function.Predicate) -> a
    68:68:net.minecraft.world.level.block.state.pattern.BlockPattern build() -> b
    73:85:java.util.function.Predicate[][][] createPattern() -> c
    89:100:void ensureAllCharactersMatched() -> d
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.pattern.package-info -> byq:
net.minecraft.world.level.block.state.predicate.BlockMaterialPredicate -> byr:
    net.minecraft.world.level.block.state.predicate.BlockMaterialPredicate AIR -> a
    net.minecraft.world.level.material.Material material -> b
    19:21:void <init>(net.minecraft.world.level.material.Material) -> <init>
    24:24:net.minecraft.world.level.block.state.predicate.BlockMaterialPredicate forMaterial(net.minecraft.world.level.material.Material) -> a
    29:29:boolean test(net.minecraft.world.level.block.state.BlockState) -> a
    9:9:boolean test(java.lang.Object) -> test
    9:9:void <init>(net.minecraft.world.level.material.Material,net.minecraft.world.level.block.state.predicate.BlockMaterialPredicate$1) -> <init>
    10:10:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.predicate.BlockMaterialPredicate$1 -> byr$1:
    10:10:void <init>(net.minecraft.world.level.material.Material) -> <init>
    13:13:boolean test(net.minecraft.world.level.block.state.BlockState) -> a
    10:10:boolean test(java.lang.Object) -> test
net.minecraft.world.level.block.state.predicate.BlockPredicate -> bys:
    net.minecraft.world.level.block.Block block -> a
    12:14:void <init>(net.minecraft.world.level.block.Block) -> <init>
    17:17:net.minecraft.world.level.block.state.predicate.BlockPredicate forBlock(net.minecraft.world.level.block.Block) -> a
    22:22:boolean test(net.minecraft.world.level.block.state.BlockState) -> a
    9:9:boolean test(java.lang.Object) -> test
net.minecraft.world.level.block.state.predicate.BlockStatePredicate -> byt:
    java.util.function.Predicate ANY -> a
    net.minecraft.world.level.block.state.StateDefinition definition -> b
    java.util.Map properties -> c
    17:21:void <init>(net.minecraft.world.level.block.state.StateDefinition) -> <init>
    24:24:net.minecraft.world.level.block.state.predicate.BlockStatePredicate forBlock(net.minecraft.world.level.block.Block) -> a
    28:28:net.minecraft.world.level.block.state.predicate.BlockStatePredicate forDefinition(net.minecraft.world.level.block.state.StateDefinition) -> a
    33:47:boolean test(net.minecraft.world.level.block.state.BlockState) -> a
    51:52:boolean applies(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.properties.Property,java.util.function.Predicate) -> a
    56:60:net.minecraft.world.level.block.state.predicate.BlockStatePredicate where(net.minecraft.world.level.block.state.properties.Property,java.util.function.Predicate) -> a
    13:13:boolean test(java.lang.Object) -> test
    14:14:boolean lambda$static$0(net.minecraft.world.level.block.state.BlockState) -> b
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.predicate.package-info -> byu:
net.minecraft.world.level.block.state.properties.AbstractProperty -> byv:
    java.lang.Class clazz -> a
    java.lang.String name -> b
    java.lang.Integer hashCode -> c
    10:13:void <init>(java.lang.String,java.lang.Class) -> <init>
    17:17:java.lang.String getName() -> a
    22:22:java.lang.Class getValueClass() -> b
    27:31:java.lang.String toString() -> toString
    36:46:boolean equals(java.lang.Object) -> equals
    51:54:int hashCode() -> hashCode
    58:58:int generateHashCode() -> c
net.minecraft.world.level.block.state.properties.AttachFace -> byw:
    net.minecraft.world.level.block.state.properties.AttachFace FLOOR -> a
    net.minecraft.world.level.block.state.properties.AttachFace WALL -> b
    net.minecraft.world.level.block.state.properties.AttachFace CEILING -> c
    java.lang.String name -> d
    net.minecraft.world.level.block.state.properties.AttachFace[] $VALUES -> e
    5:5:net.minecraft.world.level.block.state.properties.AttachFace[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.AttachFace valueOf(java.lang.String) -> valueOf
    13:15:void <init>(java.lang.String,int,java.lang.String) -> <init>
    19:19:java.lang.String getSerializedName() -> o
    5:8:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.BambooLeaves -> byx:
    net.minecraft.world.level.block.state.properties.BambooLeaves NONE -> a
    net.minecraft.world.level.block.state.properties.BambooLeaves SMALL -> b
    net.minecraft.world.level.block.state.properties.BambooLeaves LARGE -> c
    java.lang.String name -> d
    net.minecraft.world.level.block.state.properties.BambooLeaves[] $VALUES -> e
    5:5:net.minecraft.world.level.block.state.properties.BambooLeaves[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.BambooLeaves valueOf(java.lang.String) -> valueOf
    13:15:void <init>(java.lang.String,int,java.lang.String) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:java.lang.String getSerializedName() -> o
    5:8:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.BedPart -> byy:
    net.minecraft.world.level.block.state.properties.BedPart HEAD -> a
    net.minecraft.world.level.block.state.properties.BedPart FOOT -> b
    java.lang.String name -> c
    net.minecraft.world.level.block.state.properties.BedPart[] $VALUES -> d
    5:5:net.minecraft.world.level.block.state.properties.BedPart[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.BedPart valueOf(java.lang.String) -> valueOf
    12:14:void <init>(java.lang.String,int,java.lang.String) -> <init>
    18:18:java.lang.String toString() -> toString
    23:23:java.lang.String getSerializedName() -> o
    5:7:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.BellAttachType -> byz:
    net.minecraft.world.level.block.state.properties.BellAttachType FLOOR -> a
    net.minecraft.world.level.block.state.properties.BellAttachType CEILING -> b
    net.minecraft.world.level.block.state.properties.BellAttachType SINGLE_WALL -> c
    net.minecraft.world.level.block.state.properties.BellAttachType DOUBLE_WALL -> d
    java.lang.String name -> e
    net.minecraft.world.level.block.state.properties.BellAttachType[] $VALUES -> f
    5:5:net.minecraft.world.level.block.state.properties.BellAttachType[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.BellAttachType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String getSerializedName() -> o
    5:9:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.BlockStateProperties -> bza:
    net.minecraft.world.level.block.state.properties.BooleanProperty ATTACHED -> a
    net.minecraft.world.level.block.state.properties.BooleanProperty BOTTOM -> b
    net.minecraft.world.level.block.state.properties.BooleanProperty CONDITIONAL -> c
    net.minecraft.world.level.block.state.properties.BooleanProperty DISARMED -> d
    net.minecraft.world.level.block.state.properties.BooleanProperty DRAG -> e
    net.minecraft.world.level.block.state.properties.BooleanProperty ENABLED -> f
    net.minecraft.world.level.block.state.properties.BooleanProperty EXTENDED -> g
    net.minecraft.world.level.block.state.properties.BooleanProperty EYE -> h
    net.minecraft.world.level.block.state.properties.BooleanProperty FALLING -> i
    net.minecraft.world.level.block.state.properties.BooleanProperty HANGING -> j
    net.minecraft.world.level.block.state.properties.BooleanProperty HAS_BOTTLE_0 -> k
    net.minecraft.world.level.block.state.properties.BooleanProperty HAS_BOTTLE_1 -> l
    net.minecraft.world.level.block.state.properties.BooleanProperty HAS_BOTTLE_2 -> m
    net.minecraft.world.level.block.state.properties.BooleanProperty HAS_RECORD -> n
    net.minecraft.world.level.block.state.properties.BooleanProperty HAS_BOOK -> o
    net.minecraft.world.level.block.state.properties.BooleanProperty INVERTED -> p
    net.minecraft.world.level.block.state.properties.BooleanProperty IN_WALL -> q
    net.minecraft.world.level.block.state.properties.BooleanProperty LIT -> r
    net.minecraft.world.level.block.state.properties.BooleanProperty LOCKED -> s
    net.minecraft.world.level.block.state.properties.BooleanProperty OCCUPIED -> t
    net.minecraft.world.level.block.state.properties.BooleanProperty OPEN -> u
    net.minecraft.world.level.block.state.properties.BooleanProperty PERSISTENT -> v
    net.minecraft.world.level.block.state.properties.BooleanProperty POWERED -> w
    net.minecraft.world.level.block.state.properties.BooleanProperty SHORT -> x
    net.minecraft.world.level.block.state.properties.BooleanProperty SIGNAL_FIRE -> y
    net.minecraft.world.level.block.state.properties.BooleanProperty SNOWY -> z
    net.minecraft.world.level.block.state.properties.BooleanProperty TRIGGERED -> A
    net.minecraft.world.level.block.state.properties.BooleanProperty UNSTABLE -> B
    net.minecraft.world.level.block.state.properties.BooleanProperty WATERLOGGED -> C
    net.minecraft.world.level.block.state.properties.EnumProperty HORIZONTAL_AXIS -> D
    net.minecraft.world.level.block.state.properties.EnumProperty AXIS -> E
    net.minecraft.world.level.block.state.properties.BooleanProperty UP -> F
    net.minecraft.world.level.block.state.properties.BooleanProperty DOWN -> G
    net.minecraft.world.level.block.state.properties.BooleanProperty NORTH -> H
    net.minecraft.world.level.block.state.properties.BooleanProperty EAST -> I
    net.minecraft.world.level.block.state.properties.BooleanProperty SOUTH -> J
    net.minecraft.world.level.block.state.properties.BooleanProperty WEST -> K
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING -> L
    net.minecraft.world.level.block.state.properties.DirectionProperty FACING_HOPPER -> M
    net.minecraft.world.level.block.state.properties.DirectionProperty HORIZONTAL_FACING -> N
    net.minecraft.world.level.block.state.properties.EnumProperty ATTACH_FACE -> O
    net.minecraft.world.level.block.state.properties.EnumProperty BELL_ATTACHMENT -> P
    net.minecraft.world.level.block.state.properties.EnumProperty EAST_REDSTONE -> Q
    net.minecraft.world.level.block.state.properties.EnumProperty NORTH_REDSTONE -> R
    net.minecraft.world.level.block.state.properties.EnumProperty SOUTH_REDSTONE -> S
    net.minecraft.world.level.block.state.properties.EnumProperty WEST_REDSTONE -> T
    net.minecraft.world.level.block.state.properties.EnumProperty DOUBLE_BLOCK_HALF -> U
    net.minecraft.world.level.block.state.properties.EnumProperty HALF -> V
    net.minecraft.world.level.block.state.properties.EnumProperty RAIL_SHAPE -> W
    net.minecraft.world.level.block.state.properties.EnumProperty RAIL_SHAPE_STRAIGHT -> X
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE_1 -> Y
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE_2 -> Z
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE_3 -> aa
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE_5 -> ab
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE_7 -> ac
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE_15 -> ad
    net.minecraft.world.level.block.state.properties.IntegerProperty AGE_25 -> ae
    net.minecraft.world.level.block.state.properties.IntegerProperty BITES -> af
    net.minecraft.world.level.block.state.properties.IntegerProperty DELAY -> ag
    net.minecraft.world.level.block.state.properties.IntegerProperty DISTANCE -> ah
    net.minecraft.world.level.block.state.properties.IntegerProperty EGGS -> ai
    net.minecraft.world.level.block.state.properties.IntegerProperty HATCH -> aj
    net.minecraft.world.level.block.state.properties.IntegerProperty LAYERS -> ak
    net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL_CAULDRON -> al
    net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL_COMPOSTER -> am
    net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL_FLOWING -> an
    net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL_HONEY -> ao
    net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL -> ap
    net.minecraft.world.level.block.state.properties.IntegerProperty MOISTURE -> aq
    net.minecraft.world.level.block.state.properties.IntegerProperty NOTE -> ar
    net.minecraft.world.level.block.state.properties.IntegerProperty PICKLES -> as
    net.minecraft.world.level.block.state.properties.IntegerProperty POWER -> at
    net.minecraft.world.level.block.state.properties.IntegerProperty STAGE -> au
    net.minecraft.world.level.block.state.properties.IntegerProperty STABILITY_DISTANCE -> av
    net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION_16 -> aw
    net.minecraft.world.level.block.state.properties.EnumProperty BED_PART -> ax
    net.minecraft.world.level.block.state.properties.EnumProperty CHEST_TYPE -> ay
    net.minecraft.world.level.block.state.properties.EnumProperty MODE_COMPARATOR -> az
    net.minecraft.world.level.block.state.properties.EnumProperty DOOR_HINGE -> aA
    net.minecraft.world.level.block.state.properties.EnumProperty NOTEBLOCK_INSTRUMENT -> aB
    net.minecraft.world.level.block.state.properties.EnumProperty PISTON_TYPE -> aC
    net.minecraft.world.level.block.state.properties.EnumProperty SLAB_TYPE -> aD
    net.minecraft.world.level.block.state.properties.EnumProperty STAIRS_SHAPE -> aE
    net.minecraft.world.level.block.state.properties.EnumProperty STRUCTUREBLOCK_MODE -> aF
    net.minecraft.world.level.block.state.properties.EnumProperty BAMBOO_LEAVES -> aG
    10:10:void <init>() -> <init>
    68:68:boolean lambda$static$1(net.minecraft.world.level.block.state.properties.RailShape) -> a
    52:52:boolean lambda$static$0(net.minecraft.core.Direction) -> a
    11:124:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.BooleanProperty -> bzb:
    com.google.common.collect.ImmutableSet values -> a
    12:14:void <init>(java.lang.String) -> <init>
    18:18:java.util.Collection getPossibleValues() -> d
    22:22:net.minecraft.world.level.block.state.properties.BooleanProperty create(java.lang.String) -> a
    27:31:java.util.Optional getValue(java.lang.String) -> b
    36:36:java.lang.String getName(java.lang.Boolean) -> a
    41:51:boolean equals(java.lang.Object) -> equals
    56:56:int generateHashCode() -> c
    8:8:java.lang.String getName(java.lang.Comparable) -> a
net.minecraft.world.level.block.state.properties.ChestType -> bzc:
    net.minecraft.world.level.block.state.properties.ChestType SINGLE -> a
    net.minecraft.world.level.block.state.properties.ChestType LEFT -> b
    net.minecraft.world.level.block.state.properties.ChestType RIGHT -> c
    net.minecraft.world.level.block.state.properties.ChestType[] BY_ID -> d
    java.lang.String name -> e
    int opposite -> f
    net.minecraft.world.level.block.state.properties.ChestType[] $VALUES -> g
    5:5:net.minecraft.world.level.block.state.properties.ChestType[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.ChestType valueOf(java.lang.String) -> valueOf
    16:19:void <init>(java.lang.String,int,java.lang.String,int) -> <init>
    23:23:java.lang.String getSerializedName() -> o
    27:27:net.minecraft.world.level.block.state.properties.ChestType getOpposite() -> a
    5:11:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.ComparatorMode -> bzd:
    net.minecraft.world.level.block.state.properties.ComparatorMode COMPARE -> a
    net.minecraft.world.level.block.state.properties.ComparatorMode SUBTRACT -> b
    java.lang.String name -> c
    net.minecraft.world.level.block.state.properties.ComparatorMode[] $VALUES -> d
    5:5:net.minecraft.world.level.block.state.properties.ComparatorMode[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.ComparatorMode valueOf(java.lang.String) -> valueOf
    12:14:void <init>(java.lang.String,int,java.lang.String) -> <init>
    18:18:java.lang.String toString() -> toString
    23:23:java.lang.String getSerializedName() -> o
    5:7:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.DirectionProperty -> bze:
    14:15:void <init>(java.lang.String,java.util.Collection) -> <init>
    18:18:net.minecraft.world.level.block.state.properties.DirectionProperty create(java.lang.String) -> a
    22:22:net.minecraft.world.level.block.state.properties.DirectionProperty create(java.lang.String,java.util.function.Predicate) -> a
    26:26:net.minecraft.world.level.block.state.properties.DirectionProperty create(java.lang.String,net.minecraft.core.Direction[]) -> a
    30:30:net.minecraft.world.level.block.state.properties.DirectionProperty create(java.lang.String,java.util.Collection) -> a
net.minecraft.world.level.block.state.properties.DoorHingeSide -> bzf:
    net.minecraft.world.level.block.state.properties.DoorHingeSide LEFT -> a
    net.minecraft.world.level.block.state.properties.DoorHingeSide RIGHT -> b
    net.minecraft.world.level.block.state.properties.DoorHingeSide[] $VALUES -> c
    5:5:net.minecraft.world.level.block.state.properties.DoorHingeSide[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.DoorHingeSide valueOf(java.lang.String) -> valueOf
    5:5:void <init>(java.lang.String,int) -> <init>
    12:12:java.lang.String toString() -> toString
    17:17:java.lang.String getSerializedName() -> o
    5:7:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.DoubleBlockHalf -> bzg:
    net.minecraft.world.level.block.state.properties.DoubleBlockHalf UPPER -> a
    net.minecraft.world.level.block.state.properties.DoubleBlockHalf LOWER -> b
    net.minecraft.world.level.block.state.properties.DoubleBlockHalf[] $VALUES -> c
    5:5:net.minecraft.world.level.block.state.properties.DoubleBlockHalf[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.DoubleBlockHalf valueOf(java.lang.String) -> valueOf
    5:5:void <init>(java.lang.String,int) -> <init>
    12:12:java.lang.String toString() -> toString
    17:17:java.lang.String getSerializedName() -> o
    5:7:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.EnumProperty -> bzh:
    com.google.common.collect.ImmutableSet values -> a
    java.util.Map names -> b
    18:31:void <init>(java.lang.String,java.lang.Class,java.util.Collection) -> <init>
    35:35:java.util.Collection getPossibleValues() -> d
    40:40:java.util.Optional getValue(java.lang.String) -> b
    45:45:java.lang.String getName(java.lang.Enum) -> a
    50:59:boolean equals(java.lang.Object) -> equals
    64:67:int generateHashCode() -> c
    71:71:net.minecraft.world.level.block.state.properties.EnumProperty create(java.lang.String,java.lang.Class) -> a
    75:75:net.minecraft.world.level.block.state.properties.EnumProperty create(java.lang.String,java.lang.Class,java.util.function.Predicate) -> a
    79:79:net.minecraft.world.level.block.state.properties.EnumProperty create(java.lang.String,java.lang.Class,java.lang.Enum[]) -> a
    83:83:net.minecraft.world.level.block.state.properties.EnumProperty create(java.lang.String,java.lang.Class,java.util.Collection) -> a
    16:16:java.lang.String getName(java.lang.Comparable) -> a
net.minecraft.world.level.block.state.properties.Half -> bzi:
    net.minecraft.world.level.block.state.properties.Half TOP -> a
    net.minecraft.world.level.block.state.properties.Half BOTTOM -> b
    java.lang.String name -> c
    net.minecraft.world.level.block.state.properties.Half[] $VALUES -> d
    5:5:net.minecraft.world.level.block.state.properties.Half[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.Half valueOf(java.lang.String) -> valueOf
    12:14:void <init>(java.lang.String,int,java.lang.String) -> <init>
    18:18:java.lang.String toString() -> toString
    23:23:java.lang.String getSerializedName() -> o
    5:7:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.IntegerProperty -> bzj:
    com.google.common.collect.ImmutableSet values -> a
    14:29:void <init>(java.lang.String,int,int) -> <init>
    33:33:java.util.Collection getPossibleValues() -> d
    38:48:boolean equals(java.lang.Object) -> equals
    53:53:int generateHashCode() -> c
    57:57:net.minecraft.world.level.block.state.properties.IntegerProperty create(java.lang.String,int,int) -> a
    63:67:java.util.Optional getValue(java.lang.String) -> b
    73:73:java.lang.String getName(java.lang.Integer) -> a
    10:10:java.lang.String getName(java.lang.Comparable) -> a
net.minecraft.world.level.block.state.properties.NoteBlockInstrument -> bzk:
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument HARP -> a
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument BASEDRUM -> b
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument SNARE -> c
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument HAT -> d
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument BASS -> e
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument FLUTE -> f
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument BELL -> g
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument GUITAR -> h
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument CHIME -> i
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument XYLOPHONE -> j
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument IRON_XYLOPHONE -> k
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument COW_BELL -> l
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument DIDGERIDOO -> m
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument BIT -> n
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument BANJO -> o
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument PLING -> p
    java.lang.String name -> q
    net.minecraft.sounds.SoundEvent soundEvent -> r
    net.minecraft.world.level.block.state.properties.NoteBlockInstrument[] $VALUES -> s
    12:12:net.minecraft.world.level.block.state.properties.NoteBlockInstrument[] values() -> values
    12:12:net.minecraft.world.level.block.state.properties.NoteBlockInstrument valueOf(java.lang.String) -> valueOf
    34:37:void <init>(java.lang.String,int,java.lang.String,net.minecraft.sounds.SoundEvent) -> <init>
    41:41:java.lang.String getSerializedName() -> o
    45:45:net.minecraft.sounds.SoundEvent getSoundEvent() -> a
    49:98:net.minecraft.world.level.block.state.properties.NoteBlockInstrument byState(net.minecraft.world.level.block.state.BlockState) -> a
    12:28:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.PistonType -> bzl:
    net.minecraft.world.level.block.state.properties.PistonType DEFAULT -> a
    net.minecraft.world.level.block.state.properties.PistonType STICKY -> b
    java.lang.String name -> c
    net.minecraft.world.level.block.state.properties.PistonType[] $VALUES -> d
    5:5:net.minecraft.world.level.block.state.properties.PistonType[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.PistonType valueOf(java.lang.String) -> valueOf
    11:13:void <init>(java.lang.String,int,java.lang.String) -> <init>
    17:17:java.lang.String toString() -> toString
    22:22:java.lang.String getSerializedName() -> o
    5:7:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.Property -> bzm:
    java.lang.String getName() -> a
    java.util.Collection getPossibleValues() -> d
    java.lang.Class getValueClass() -> b
    java.util.Optional getValue(java.lang.String) -> b
    java.lang.String getName(java.lang.Comparable) -> a
net.minecraft.world.level.block.state.properties.RailShape -> bzn:
    net.minecraft.world.level.block.state.properties.RailShape NORTH_SOUTH -> a
    net.minecraft.world.level.block.state.properties.RailShape EAST_WEST -> b
    net.minecraft.world.level.block.state.properties.RailShape ASCENDING_EAST -> c
    net.minecraft.world.level.block.state.properties.RailShape ASCENDING_WEST -> d
    net.minecraft.world.level.block.state.properties.RailShape ASCENDING_NORTH -> e
    net.minecraft.world.level.block.state.properties.RailShape ASCENDING_SOUTH -> f
    net.minecraft.world.level.block.state.properties.RailShape SOUTH_EAST -> g
    net.minecraft.world.level.block.state.properties.RailShape SOUTH_WEST -> h
    net.minecraft.world.level.block.state.properties.RailShape NORTH_WEST -> i
    net.minecraft.world.level.block.state.properties.RailShape NORTH_EAST -> j
    java.lang.String name -> k
    net.minecraft.world.level.block.state.properties.RailShape[] $VALUES -> l
    5:5:net.minecraft.world.level.block.state.properties.RailShape[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.RailShape valueOf(java.lang.String) -> valueOf
    20:22:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:25:java.lang.String getName() -> a
    30:30:java.lang.String toString() -> toString
    34:34:boolean isAscending() -> b
    39:39:java.lang.String getSerializedName() -> o
    5:15:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.RedstoneSide -> bzo:
    net.minecraft.world.level.block.state.properties.RedstoneSide UP -> a
    net.minecraft.world.level.block.state.properties.RedstoneSide SIDE -> b
    net.minecraft.world.level.block.state.properties.RedstoneSide NONE -> c
    java.lang.String name -> d
    net.minecraft.world.level.block.state.properties.RedstoneSide[] $VALUES -> e
    5:5:net.minecraft.world.level.block.state.properties.RedstoneSide[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.RedstoneSide valueOf(java.lang.String) -> valueOf
    13:15:void <init>(java.lang.String,int,java.lang.String) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:java.lang.String getSerializedName() -> o
    5:8:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.SlabType -> bzp:
    net.minecraft.world.level.block.state.properties.SlabType TOP -> a
    net.minecraft.world.level.block.state.properties.SlabType BOTTOM -> b
    net.minecraft.world.level.block.state.properties.SlabType DOUBLE -> c
    java.lang.String name -> d
    net.minecraft.world.level.block.state.properties.SlabType[] $VALUES -> e
    5:5:net.minecraft.world.level.block.state.properties.SlabType[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.SlabType valueOf(java.lang.String) -> valueOf
    13:15:void <init>(java.lang.String,int,java.lang.String) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:java.lang.String getSerializedName() -> o
    5:8:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.StairsShape -> bzq:
    net.minecraft.world.level.block.state.properties.StairsShape STRAIGHT -> a
    net.minecraft.world.level.block.state.properties.StairsShape INNER_LEFT -> b
    net.minecraft.world.level.block.state.properties.StairsShape INNER_RIGHT -> c
    net.minecraft.world.level.block.state.properties.StairsShape OUTER_LEFT -> d
    net.minecraft.world.level.block.state.properties.StairsShape OUTER_RIGHT -> e
    java.lang.String name -> f
    net.minecraft.world.level.block.state.properties.StairsShape[] $VALUES -> g
    5:5:net.minecraft.world.level.block.state.properties.StairsShape[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.StairsShape valueOf(java.lang.String) -> valueOf
    15:17:void <init>(java.lang.String,int,java.lang.String) -> <init>
    21:21:java.lang.String toString() -> toString
    26:26:java.lang.String getSerializedName() -> o
    5:10:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.StructureMode -> bzr:
    net.minecraft.world.level.block.state.properties.StructureMode SAVE -> a
    net.minecraft.world.level.block.state.properties.StructureMode LOAD -> b
    net.minecraft.world.level.block.state.properties.StructureMode CORNER -> c
    net.minecraft.world.level.block.state.properties.StructureMode DATA -> d
    java.lang.String name -> e
    net.minecraft.world.level.block.state.properties.StructureMode[] $VALUES -> f
    5:5:net.minecraft.world.level.block.state.properties.StructureMode[] values() -> values
    5:5:net.minecraft.world.level.block.state.properties.StructureMode valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String getSerializedName() -> o
    5:9:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.WoodType -> bzs:
    java.util.Set VALUES -> g
    net.minecraft.world.level.block.state.properties.WoodType OAK -> a
    net.minecraft.world.level.block.state.properties.WoodType SPRUCE -> b
    net.minecraft.world.level.block.state.properties.WoodType BIRCH -> c
    net.minecraft.world.level.block.state.properties.WoodType ACACIA -> d
    net.minecraft.world.level.block.state.properties.WoodType JUNGLE -> e
    net.minecraft.world.level.block.state.properties.WoodType DARK_OAK -> f
    java.lang.String name -> h
    20:22:void <init>(java.lang.String) -> <init>
    25:26:net.minecraft.world.level.block.state.properties.WoodType register(net.minecraft.world.level.block.state.properties.WoodType) -> a
    30:30:java.util.stream.Stream values() -> a
    34:34:java.lang.String name() -> b
    9:16:void <clinit>() -> <clinit>
net.minecraft.world.level.block.state.properties.package-info -> bzt:
net.minecraft.world.level.border.BorderChangeListener -> bzu:
    void onBorderSizeSet(net.minecraft.world.level.border.WorldBorder,double) -> a
    void onBorderSizeLerping(net.minecraft.world.level.border.WorldBorder,double,double,long) -> a
    void onBorderCenterSet(net.minecraft.world.level.border.WorldBorder,double,double) -> a
    void onBorderSetWarningTime(net.minecraft.world.level.border.WorldBorder,int) -> a
    void onBorderSetWarningBlocks(net.minecraft.world.level.border.WorldBorder,int) -> b
    void onBorderSetDamagePerBlock(net.minecraft.world.level.border.WorldBorder,double) -> b
    void onBorderSetDamageSafeZOne(net.minecraft.world.level.border.WorldBorder,double) -> c
net.minecraft.world.level.border.BorderChangeListener$DelegateBorderChangeListener -> bzu$a:
    net.minecraft.world.level.border.WorldBorder worldBorder -> a
    21:23:void <init>(net.minecraft.world.level.border.WorldBorder) -> <init>
    27:28:void onBorderSizeSet(net.minecraft.world.level.border.WorldBorder,double) -> a
    32:33:void onBorderSizeLerping(net.minecraft.world.level.border.WorldBorder,double,double,long) -> a
    37:38:void onBorderCenterSet(net.minecraft.world.level.border.WorldBorder,double,double) -> a
    42:43:void onBorderSetWarningTime(net.minecraft.world.level.border.WorldBorder,int) -> a
    47:48:void onBorderSetWarningBlocks(net.minecraft.world.level.border.WorldBorder,int) -> b
    52:53:void onBorderSetDamagePerBlock(net.minecraft.world.level.border.WorldBorder,double) -> b
    57:58:void onBorderSetDamageSafeZOne(net.minecraft.world.level.border.WorldBorder,double) -> c
net.minecraft.world.level.border.BorderStatus -> bzv:
    net.minecraft.world.level.border.BorderStatus GROWING -> a
    net.minecraft.world.level.border.BorderStatus SHRINKING -> b
    net.minecraft.world.level.border.BorderStatus STATIONARY -> c
    int color -> d
    net.minecraft.world.level.border.BorderStatus[] $VALUES -> e
    3:3:net.minecraft.world.level.border.BorderStatus[] values() -> values
    3:3:net.minecraft.world.level.border.BorderStatus valueOf(java.lang.String) -> valueOf
    11:13:void <init>(java.lang.String,int,int) -> <init>
    16:16:int getColor() -> a
    3:6:void <clinit>() -> <clinit>
net.minecraft.world.level.border.WorldBorder -> bzw:
    java.util.List listeners -> a
    double damagePerBlock -> b
    double damageSafeZone -> c
    int warningTime -> d
    int warningBlocks -> e
    double centerX -> f
    double centerZ -> g
    int absoluteMaxSize -> h
    net.minecraft.world.level.border.WorldBorder$BorderExtent extent -> i
    18:242:void <init>() -> <init>
    245:245:boolean isWithinBounds(net.minecraft.core.BlockPos) -> a
    249:249:boolean isWithinBounds(net.minecraft.world.level.ChunkPos) -> a
    253:253:boolean isWithinBounds(double,double) -> a
    257:257:boolean isWithinBounds(net.minecraft.world.phys.AABB) -> a
    261:261:double getDistanceToBorder(net.minecraft.world.entity.Entity) -> a
    265:265:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape() -> a
    269:275:double getDistanceToBorder(double,double) -> b
    279:279:net.minecraft.world.level.border.BorderStatus getStatus() -> b
    283:283:double getMinX() -> c
    287:287:double getMinZ() -> d
    291:291:double getMaxX() -> e
    295:295:double getMaxZ() -> f
    299:299:double getCenterX() -> g
    303:303:double getCenterZ() -> h
    307:315:void setCenter(double,double) -> c
    318:318:double getSize() -> i
    322:322:long getLerpRemainingTime() -> j
    326:326:double getLerpTarget() -> k
    330:335:void setSize(double) -> a
    338:343:void lerpSizeBetween(double,double,long) -> a
    346:346:java.util.List getListeners() -> l
    350:351:void addListener(net.minecraft.world.level.border.BorderChangeListener) -> a
    354:355:void removeListener(net.minecraft.world.level.border.BorderChangeListener) -> b
    358:360:void setAbsoluteMaxSize(int) -> a
    363:363:int getAbsoluteMaxSize() -> m
    367:367:double getDamageSafeZone() -> n
    371:376:void setDamageSafeZone(double) -> b
    379:379:double getDamagePerBlock() -> o
    383:388:void setDamagePerBlock(double) -> c
    391:391:double getLerpSpeed() -> p
    395:395:int getWarningTime() -> q
    399:404:void setWarningTime(int) -> b
    407:407:int getWarningBlocks() -> r
    411:416:void setWarningBlocks(int) -> c
    419:420:void tick() -> s
    423:433:void saveWorldBorderData(net.minecraft.world.level.storage.LevelData) -> a
    436:447:void readBorderData(net.minecraft.world.level.storage.LevelData) -> b
    18:18:int access$000(net.minecraft.world.level.border.WorldBorder) -> a
net.minecraft.world.level.border.WorldBorder$1 -> bzw$1:
net.minecraft.world.level.border.WorldBorder$BorderExtent -> bzw$a:
    double getMinX() -> a
    double getMaxX() -> b
    double getMinZ() -> c
    double getMaxZ() -> d
    double getSize() -> e
    double getLerpSpeed() -> f
    long getLerpRemainingTime() -> g
    double getLerpTarget() -> h
    net.minecraft.world.level.border.BorderStatus getStatus() -> i
    void onAbsoluteMaxSizeChange() -> j
    void onCenterChange() -> k
    net.minecraft.world.level.border.WorldBorder$BorderExtent update() -> l
    net.minecraft.world.phys.shapes.VoxelShape getCollisionShape() -> m
net.minecraft.world.level.border.WorldBorder$MovingBorderExtent -> bzw$b:
    double from -> b
    double to -> c
    long lerpEnd -> d
    long lerpBegin -> e
    double lerpDuration -> f
    net.minecraft.world.level.border.WorldBorder this$0 -> a
    56:63:void <init>(net.minecraft.world.level.border.WorldBorder,double,double,long) -> <init>
    67:67:double getMinX() -> a
    72:72:double getMinZ() -> c
    77:77:double getMaxX() -> b
    82:82:double getMaxZ() -> d
    87:88:double getSize() -> e
    93:93:double getLerpSpeed() -> f
    98:98:long getLerpRemainingTime() -> g
    103:103:double getLerpTarget() -> h
    108:108:net.minecraft.world.level.border.BorderStatus getStatus() -> i
    113:113:void onCenterChange() -> k
    117:117:void onAbsoluteMaxSizeChange() -> j
    121:125:net.minecraft.world.level.border.WorldBorder$BorderExtent update() -> l
    130:132:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape() -> m
    47:47:void <init>(net.minecraft.world.level.border.WorldBorder,double,double,long,net.minecraft.world.level.border.WorldBorder$1) -> <init>
net.minecraft.world.level.border.WorldBorder$StaticBorderExtent -> bzw$c:
    double size -> b
    double minX -> c
    double minZ -> d
    double maxX -> e
    double maxZ -> f
    net.minecraft.world.phys.shapes.VoxelShape shape -> g
    net.minecraft.world.level.border.WorldBorder this$0 -> a
    147:150:void <init>(net.minecraft.world.level.border.WorldBorder,double) -> <init>
    154:154:double getMinX() -> a
    159:159:double getMaxX() -> b
    164:164:double getMinZ() -> c
    169:169:double getMaxZ() -> d
    174:174:double getSize() -> e
    179:179:net.minecraft.world.level.border.BorderStatus getStatus() -> i
    184:184:double getLerpSpeed() -> f
    189:189:long getLerpRemainingTime() -> g
    194:194:double getLerpTarget() -> h
    198:207:void updateBox() -> n
    211:212:void onAbsoluteMaxSizeChange() -> j
    216:217:void onCenterChange() -> k
    221:221:net.minecraft.world.level.border.WorldBorder$BorderExtent update() -> l
    226:226:net.minecraft.world.phys.shapes.VoxelShape getCollisionShape() -> m
net.minecraft.world.level.border.package-info -> bzx:
net.minecraft.world.level.chunk.ChunkAccess -> bzy:
    net.minecraft.world.level.block.state.BlockState setBlockState(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    void setBlockEntity(net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity) -> a
    void addEntity(net.minecraft.world.entity.Entity) -> a
    40:47:net.minecraft.world.level.chunk.LevelChunkSection getHighestSection() -> a
    51:52:int getHighestSectionPosition() -> b
    java.util.Set getBlockEntitiesPos() -> c
    net.minecraft.world.level.chunk.LevelChunkSection[] getSections() -> d
    net.minecraft.world.level.lighting.LevelLightEngine getLightEngine() -> e
    java.util.Collection getHeightmaps() -> f
    void setHeightmap(net.minecraft.world.level.levelgen.Heightmap$Types,long[]) -> a
    net.minecraft.world.level.levelgen.Heightmap getOrCreateHeightmapUnprimed(net.minecraft.world.level.levelgen.Heightmap$Types) -> a
    int getHeight(net.minecraft.world.level.levelgen.Heightmap$Types,int,int) -> a
    net.minecraft.core.BlockPos getHeighestPosition(net.minecraft.world.level.levelgen.Heightmap$Types) -> b
    net.minecraft.world.level.ChunkPos getPos() -> g
    void setLastSaveTime(long) -> a
    java.util.Map getAllStarts() -> h
    void setAllStarts(java.util.Map) -> a
    81:92:boolean isYSpaceEmpty(int,int) -> a
    net.minecraft.world.level.chunk.ChunkBiomeContainer getBiomes() -> i
    void setUnsaved(boolean) -> a
    boolean isUnsaved() -> j
    net.minecraft.world.level.chunk.ChunkStatus getStatus() -> k
    void removeBlockEntity(net.minecraft.core.BlockPos) -> d
    107:108:void markPosForPostprocessing(net.minecraft.core.BlockPos) -> e
    it.unimi.dsi.fastutil.shorts.ShortList[] getPostProcessing() -> l
    113:114:void addPackedPostProcess(short,int) -> a
    117:118:void setBlockEntityNbt(net.minecraft.nbt.CompoundTag) -> a
    net.minecraft.nbt.CompoundTag getBlockEntityNbt(net.minecraft.core.BlockPos) -> f
    net.minecraft.nbt.CompoundTag getBlockEntityNbtForSaving(net.minecraft.core.BlockPos) -> i
    java.util.stream.Stream getLights() -> m
    net.minecraft.world.level.TickList getBlockTicks() -> n
    net.minecraft.world.level.TickList getLiquidTicks() -> o
    133:133:java.util.BitSet getCarvingMask(net.minecraft.world.level.levelgen.GenerationStep$Carving) -> a
    net.minecraft.world.level.chunk.UpgradeData getUpgradeData() -> p
    void setInhabitedTime(long) -> b
    long getInhabitedTime() -> q
    143:146:it.unimi.dsi.fastutil.shorts.ShortList getOrCreateOffsetList(it.unimi.dsi.fastutil.shorts.ShortList[],int) -> a
    boolean isLightCorrect() -> r
    void setLightCorrect(boolean) -> b
net.minecraft.world.level.chunk.ChunkBiomeContainer -> bzz:
    org.apache.logging.log4j.Logger LOGGER -> d
    int WIDTH_BITS -> e
    int HEIGHT_BITS -> f
    int BIOMES_SIZE -> a
    int HORIZONTAL_MASK -> b
    int VERTICAL_MASK -> c
    net.minecraft.world.level.biome.Biome[] biomes -> g
    30:32:void <init>(net.minecraft.world.level.biome.Biome[]) -> <init>
    35:36:void <init>() -> <init>
    39:50:void <init>(net.minecraft.network.FriendlyByteBuf) -> <init>
    53:64:void <init>(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.biome.BiomeSource) -> <init>
    67:90:void <init>(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.biome.BiomeSource,int[]) -> <init>
    93:97:int[] writeBiomes() -> a
    101:104:void write(net.minecraft.network.FriendlyByteBuf) -> a
    107:107:net.minecraft.world.level.chunk.ChunkBiomeContainer copy() -> b
    112:115:net.minecraft.world.level.biome.Biome getNoiseBiome(int,int,int) -> b
    18:26:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.ChunkGenerator -> caa:
    net.minecraft.world.level.LevelAccessor level -> a
    long seed -> b
    net.minecraft.world.level.biome.BiomeSource biomeSource -> c
    net.minecraft.world.level.levelgen.ChunkGeneratorSettings settings -> d
    54:59:void <init>(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.biome.BiomeSource,net.minecraft.world.level.levelgen.ChunkGeneratorSettings) -> <init>
    65:67:void createBiomes(net.minecraft.world.level.chunk.ChunkAccess) -> a
    70:70:net.minecraft.world.level.biome.Biome getCarvingOrDecorationBiome(net.minecraft.world.level.biome.BiomeManager,net.minecraft.core.BlockPos) -> a
    77:101:void applyCarvers(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.levelgen.GenerationStep$Carving) -> a
    105:110:net.minecraft.core.BlockPos findNearestMapFeature(net.minecraft.world.level.Level,java.lang.String,net.minecraft.core.BlockPos,int,boolean) -> a
    114:137:void applyBiomeDecoration(net.minecraft.server.level.WorldGenRegion) -> a
    void buildSurfaceAndBedrock(net.minecraft.server.level.WorldGenRegion,net.minecraft.world.level.chunk.ChunkAccess) -> a
    145:145:void spawnOriginalMobs(net.minecraft.server.level.WorldGenRegion) -> b
    148:148:net.minecraft.world.level.levelgen.ChunkGeneratorSettings getSettings() -> a
    int getSpawnHeight() -> b
    154:154:void tickCustomSpawners(net.minecraft.server.level.ServerLevel,boolean,boolean) -> a
    158:158:boolean isBiomeValidStartForStructure(net.minecraft.world.level.biome.Biome,net.minecraft.world.level.levelgen.feature.StructureFeature) -> a
    163:163:net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration getStructureConfiguration(net.minecraft.world.level.biome.Biome,net.minecraft.world.level.levelgen.feature.StructureFeature) -> b
    167:167:net.minecraft.world.level.biome.BiomeSource getBiomeSource() -> c
    171:171:long getSeed() -> d
    175:175:int getGenDepth() -> e
    179:179:java.util.List getMobsAt(net.minecraft.world.entity.MobCategory,net.minecraft.core.BlockPos) -> a
    183:205:void createStructures(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager) -> a
    208:228:void createReferences(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkAccess) -> a
    void fillFromNoise(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkAccess) -> b
    233:233:int getSeaLevel() -> f
    int getBaseHeight(int,int,net.minecraft.world.level.levelgen.Heightmap$Types) -> a
    239:239:int getFirstFreeHeight(int,int,net.minecraft.world.level.levelgen.Heightmap$Types) -> b
    243:243:int getFirstOccupiedHeight(int,int,net.minecraft.world.level.levelgen.Heightmap$Types) -> c
    96:96:net.minecraft.world.level.biome.Biome lambda$applyCarvers$0(net.minecraft.world.level.biome.BiomeManager,net.minecraft.core.BlockPos) -> b
net.minecraft.world.level.chunk.ChunkGeneratorFactory -> cab:
    net.minecraft.world.level.chunk.ChunkGenerator create(net.minecraft.world.level.Level,net.minecraft.world.level.biome.BiomeSource,net.minecraft.world.level.levelgen.ChunkGeneratorSettings) -> create
net.minecraft.world.level.chunk.ChunkGeneratorType -> cac:
    net.minecraft.world.level.chunk.ChunkGeneratorType SURFACE -> a
    net.minecraft.world.level.chunk.ChunkGeneratorType CAVES -> b
    net.minecraft.world.level.chunk.ChunkGeneratorType FLOATING_ISLANDS -> c
    net.minecraft.world.level.chunk.ChunkGeneratorType DEBUG -> d
    net.minecraft.world.level.chunk.ChunkGeneratorType FLAT -> e
    net.minecraft.world.level.chunk.ChunkGeneratorFactory factory -> f
    boolean isPublic -> g
    java.util.function.Supplier settingsFactory -> h
    28:28:net.minecraft.world.level.chunk.ChunkGeneratorType register(java.lang.String,net.minecraft.world.level.chunk.ChunkGeneratorFactory,java.util.function.Supplier,boolean) -> a
    35:39:void <init>(net.minecraft.world.level.chunk.ChunkGeneratorFactory,boolean,java.util.function.Supplier) -> <init>
    43:43:net.minecraft.world.level.chunk.ChunkGenerator create(net.minecraft.world.level.Level,net.minecraft.world.level.biome.BiomeSource,net.minecraft.world.level.levelgen.ChunkGeneratorSettings) -> create
    47:47:net.minecraft.world.level.levelgen.ChunkGeneratorSettings createSettings() -> a
    51:51:boolean isPublic() -> b
    21:25:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.ChunkSource -> cad:
    13:13:void <init>() -> <init>
    16:16:net.minecraft.world.level.chunk.LevelChunk getChunk(int,int,boolean) -> a
    21:21:net.minecraft.world.level.chunk.LevelChunk getChunkNow(int,int) -> a
    27:27:net.minecraft.world.level.BlockGetter getChunkForLighting(int,int) -> c
    31:31:boolean hasChunk(int,int) -> b
    net.minecraft.world.level.chunk.ChunkAccess getChunk(int,int,net.minecraft.world.level.chunk.ChunkStatus,boolean) -> a
    void tick(java.util.function.BooleanSupplier) -> a
    java.lang.String gatherStats() -> e
    int getLoadedChunksCount() -> h
    48:48:void close() -> close
    net.minecraft.world.level.lighting.LevelLightEngine getLightEngine() -> k
    53:53:void setSpawnSettings(boolean,boolean) -> a
    56:56:void updateChunkForced(net.minecraft.world.level.ChunkPos,boolean) -> a
    59:59:boolean isEntityTickingChunk(net.minecraft.world.entity.Entity) -> a
    63:63:boolean isEntityTickingChunk(net.minecraft.world.level.ChunkPos) -> a
    67:67:boolean isTickingChunk(net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.chunk.ChunkStatus -> cae:
    java.util.EnumSet PRE_FEATURES -> n
    java.util.EnumSet POST_FEATURES -> o
    net.minecraft.world.level.chunk.ChunkStatus$LoadingTask PASSTHROUGH_LOAD_TASK -> p
    net.minecraft.world.level.chunk.ChunkStatus EMPTY -> a
    net.minecraft.world.level.chunk.ChunkStatus STRUCTURE_STARTS -> b
    net.minecraft.world.level.chunk.ChunkStatus STRUCTURE_REFERENCES -> c
    net.minecraft.world.level.chunk.ChunkStatus BIOMES -> d
    net.minecraft.world.level.chunk.ChunkStatus NOISE -> e
    net.minecraft.world.level.chunk.ChunkStatus SURFACE -> f
    net.minecraft.world.level.chunk.ChunkStatus CARVERS -> g
    net.minecraft.world.level.chunk.ChunkStatus LIQUID_CARVERS -> h
    net.minecraft.world.level.chunk.ChunkStatus FEATURES -> i
    net.minecraft.world.level.chunk.ChunkStatus LIGHT -> j
    net.minecraft.world.level.chunk.ChunkStatus SPAWN -> k
    net.minecraft.world.level.chunk.ChunkStatus HEIGHTMAPS -> l
    net.minecraft.world.level.chunk.ChunkStatus FULL -> m
    java.util.List STATUS_BY_RANGE -> q
    it.unimi.dsi.fastutil.ints.IntList RANGE_BY_STATUS -> r
    java.lang.String name -> s
    int index -> t
    net.minecraft.world.level.chunk.ChunkStatus parent -> u
    net.minecraft.world.level.chunk.ChunkStatus$GenerationTask generationTask -> v
    net.minecraft.world.level.chunk.ChunkStatus$LoadingTask loadingTask -> w
    int range -> x
    net.minecraft.world.level.chunk.ChunkStatus$ChunkType chunkType -> y
    java.util.EnumSet heightmapsAfter -> z
    92:98:java.util.concurrent.CompletableFuture lightChunk(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ThreadedLevelLightEngine,net.minecraft.world.level.chunk.ChunkAccess) -> a
    112:112:net.minecraft.world.level.chunk.ChunkStatus registerSimple(java.lang.String,net.minecraft.world.level.chunk.ChunkStatus,int,java.util.EnumSet,net.minecraft.world.level.chunk.ChunkStatus$ChunkType,net.minecraft.world.level.chunk.ChunkStatus$SimpleGenerationTask) -> a
    116:116:net.minecraft.world.level.chunk.ChunkStatus register(java.lang.String,net.minecraft.world.level.chunk.ChunkStatus,int,java.util.EnumSet,net.minecraft.world.level.chunk.ChunkStatus$ChunkType,net.minecraft.world.level.chunk.ChunkStatus$GenerationTask) -> a
    120:120:net.minecraft.world.level.chunk.ChunkStatus register(java.lang.String,net.minecraft.world.level.chunk.ChunkStatus,int,java.util.EnumSet,net.minecraft.world.level.chunk.ChunkStatus$ChunkType,net.minecraft.world.level.chunk.ChunkStatus$GenerationTask,net.minecraft.world.level.chunk.ChunkStatus$LoadingTask) -> a
    124:132:java.util.List getStatusList() -> a
    136:136:boolean isLighted(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.world.level.chunk.ChunkAccess) -> a
    164:170:net.minecraft.world.level.chunk.ChunkStatus getStatus(int) -> a
    174:174:int maxDistance() -> b
    178:178:int getDistance(net.minecraft.world.level.chunk.ChunkStatus) -> a
    190:199:void <init>(java.lang.String,net.minecraft.world.level.chunk.ChunkStatus,int,java.util.EnumSet,net.minecraft.world.level.chunk.ChunkStatus$ChunkType,net.minecraft.world.level.chunk.ChunkStatus$GenerationTask,net.minecraft.world.level.chunk.ChunkStatus$LoadingTask) -> <init>
    202:202:int getIndex() -> c
    206:206:java.lang.String getName() -> d
    210:210:net.minecraft.world.level.chunk.ChunkStatus getParent() -> e
    214:214:java.util.concurrent.CompletableFuture generate(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,java.util.List) -> a
    218:218:java.util.concurrent.CompletableFuture load(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,net.minecraft.world.level.chunk.ChunkAccess) -> a
    222:222:int getRange() -> f
    226:226:net.minecraft.world.level.chunk.ChunkStatus$ChunkType getChunkType() -> g
    230:230:net.minecraft.world.level.chunk.ChunkStatus byName(java.lang.String) -> a
    234:234:java.util.EnumSet heightmapsAfter() -> h
    238:238:boolean isOrAfter(net.minecraft.world.level.chunk.ChunkStatus) -> b
    243:243:java.lang.String toString() -> toString
    154:161:void lambda$static$16(it.unimi.dsi.fastutil.ints.IntArrayList) -> a
    108:108:java.util.concurrent.CompletableFuture lambda$static$15(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,net.minecraft.world.level.chunk.ChunkAccess) -> a
    107:107:java.util.concurrent.CompletableFuture lambda$static$14(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> a
    104:104:void lambda$static$13(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> a
    102:102:void lambda$static$12(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> b
    89:89:java.util.concurrent.CompletableFuture lambda$static$11(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,net.minecraft.world.level.chunk.ChunkAccess) -> b
    89:89:java.util.concurrent.CompletableFuture lambda$static$10(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> b
    80:87:java.util.concurrent.CompletableFuture lambda$static$9(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> c
    77:77:void lambda$static$8(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> c
    74:74:void lambda$static$7(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> d
    71:71:void lambda$static$6(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> e
    68:68:void lambda$static$5(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> f
    65:65:void lambda$static$4(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> g
    62:62:void lambda$static$3(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> h
    49:58:java.util.concurrent.CompletableFuture lambda$static$2(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> d
    46:46:void lambda$static$1(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> i
    40:43:java.util.concurrent.CompletableFuture lambda$static$0(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,net.minecraft.world.level.chunk.ChunkAccess) -> c
    27:153:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.ChunkStatus$ChunkType -> cae$a:
    net.minecraft.world.level.chunk.ChunkStatus$ChunkType PROTOCHUNK -> a
    net.minecraft.world.level.chunk.ChunkStatus$ChunkType LEVELCHUNK -> b
    net.minecraft.world.level.chunk.ChunkStatus$ChunkType[] $VALUES -> c
    270:270:net.minecraft.world.level.chunk.ChunkStatus$ChunkType[] values() -> values
    270:270:net.minecraft.world.level.chunk.ChunkStatus$ChunkType valueOf(java.lang.String) -> valueOf
    270:270:void <init>(java.lang.String,int) -> <init>
    270:272:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.ChunkStatus$GenerationTask -> cae$b:
    java.util.concurrent.CompletableFuture doWork(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> doWork
net.minecraft.world.level.chunk.ChunkStatus$LoadingTask -> cae$c:
    java.util.concurrent.CompletableFuture doWork(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,net.minecraft.world.level.chunk.ChunkAccess) -> doWork
net.minecraft.world.level.chunk.ChunkStatus$SimpleGenerationTask -> cae$d:
    257:264:java.util.concurrent.CompletableFuture doWork(net.minecraft.world.level.chunk.ChunkStatus,net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.server.level.ThreadedLevelLightEngine,java.util.function.Function,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> doWork
    void doWork(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkGenerator,java.util.List,net.minecraft.world.level.chunk.ChunkAccess) -> doWork
net.minecraft.world.level.chunk.DataLayer -> caf:
    byte[] data -> a
    14:15:void <init>() -> <init>
    17:23:void <init>(byte[]) -> <init>
    25:27:void <init>(int) -> <init>
    30:30:int get(int,int,int) -> a
    34:35:void set(int,int,int,int) -> a
    38:38:int getIndex(int,int,int) -> b
    42:50:int get(int) -> b
    55:65:void set(int,int) -> a
    68:68:boolean isFirst(int) -> c
    72:72:int getPosition(int) -> d
    76:79:byte[] getData() -> a
    83:86:net.minecraft.world.level.chunk.DataLayer copy() -> b
    91:101:java.lang.String toString() -> toString
    106:113:java.lang.String layerToString(int) -> a
    117:117:boolean isEmpty() -> c
net.minecraft.world.level.chunk.EmptyLevelChunk -> cag:
    net.minecraft.world.level.biome.Biome[] BIOMES -> b
    28:29:void <init>(net.minecraft.world.level.Level,net.minecraft.world.level.ChunkPos) -> <init>
    33:33:net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos) -> d_
    39:39:net.minecraft.world.level.block.state.BlockState setBlockState(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    44:44:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos) -> b
    49:49:int getLightBlock(net.minecraft.core.BlockPos) -> g
    55:55:net.minecraft.world.level.lighting.LevelLightEngine getLightEngine() -> e
    60:60:int getLightEmission(net.minecraft.core.BlockPos) -> h
    65:65:void addEntity(net.minecraft.world.entity.Entity) -> a
    69:69:void removeEntity(net.minecraft.world.entity.Entity) -> b
    73:73:void removeEntity(net.minecraft.world.entity.Entity,int) -> a
    78:78:net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos,net.minecraft.world.level.chunk.LevelChunk$EntityCreationType) -> a
    83:83:void addBlockEntity(net.minecraft.world.level.block.entity.BlockEntity) -> a
    87:87:void setBlockEntity(net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity) -> a
    91:91:void removeBlockEntity(net.minecraft.core.BlockPos) -> d
    95:95:void markUnsaved() -> s
    99:99:void getEntities(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.List,java.util.function.Predicate) -> a
    103:103:void getEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AABB,java.util.List,java.util.function.Predicate) -> a
    107:107:boolean isEmpty() -> t
    112:112:boolean isYSpaceEmpty(int,int) -> a
    117:117:net.minecraft.server.level.ChunkHolder$FullChunkStatus getFullStatus() -> u
    25:25:void lambda$static$0(net.minecraft.world.level.biome.Biome[]) -> a
    25:25:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.FeatureAccess -> cah:
    net.minecraft.world.level.levelgen.structure.StructureStart getStartForFeature(java.lang.String) -> a
    void setStartForFeature(java.lang.String,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    it.unimi.dsi.fastutil.longs.LongSet getReferencesForFeature(java.lang.String) -> b
    void addReferenceForFeature(java.lang.String,long) -> a
    java.util.Map getAllReferences() -> v
    void setAllReferences(java.util.Map) -> b
net.minecraft.world.level.chunk.GlobalPalette -> cai:
    net.minecraft.core.IdMapper registry -> a
    java.lang.Object defaultValue -> b
    11:14:void <init>(net.minecraft.core.IdMapper,java.lang.Object) -> <init>
    18:19:int idFor(java.lang.Object) -> a
    24:24:boolean maybeHas(java.lang.Object) -> b
    29:30:java.lang.Object valueFor(int) -> a
    35:35:void read(net.minecraft.network.FriendlyByteBuf) -> a
    39:39:void write(net.minecraft.network.FriendlyByteBuf) -> b
    43:43:int getSerializedSize() -> a
    48:48:int getSize() -> b
    53:53:void read(net.minecraft.nbt.ListTag) -> a
net.minecraft.world.level.chunk.HashMapPalette -> caj:
    net.minecraft.core.IdMapper registry -> a
    net.minecraft.util.CrudeIncrementalIntIdentityHashBiMap values -> b
    net.minecraft.world.level.chunk.PaletteResize resizeHandler -> c
    java.util.function.Function reader -> d
    java.util.function.Function writer -> e
    int bits -> f
    20:27:void <init>(net.minecraft.core.IdMapper,int,net.minecraft.world.level.chunk.PaletteResize,java.util.function.Function,java.util.function.Function) -> <init>
    31:39:int idFor(java.lang.Object) -> a
    44:44:boolean maybeHas(java.lang.Object) -> b
    50:50:java.lang.Object valueFor(int) -> a
    55:60:void read(net.minecraft.network.FriendlyByteBuf) -> a
    64:70:void write(net.minecraft.network.FriendlyByteBuf) -> b
    74:80:int getSerializedSize() -> a
    85:85:int getSize() -> b
    90:94:void read(net.minecraft.nbt.ListTag) -> a
    97:100:void write(net.minecraft.nbt.ListTag) -> b
net.minecraft.world.level.chunk.ImposterProtoChunk -> cak:
    net.minecraft.world.level.chunk.LevelChunk wrapped -> a
    28:31:void <init>(net.minecraft.world.level.chunk.LevelChunk) -> <init>
    36:36:net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos) -> c
    42:42:net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos) -> d_
    47:47:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos) -> b
    52:52:int getMaxLightLevel() -> H
    58:58:net.minecraft.world.level.block.state.BlockState setBlockState(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    63:63:void setBlockEntity(net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity) -> a
    67:67:void addEntity(net.minecraft.world.entity.Entity) -> a
    71:71:void setStatus(net.minecraft.world.level.chunk.ChunkStatus) -> a
    75:75:net.minecraft.world.level.chunk.LevelChunkSection[] getSections() -> d
    81:81:net.minecraft.world.level.lighting.LevelLightEngine getLightEngine() -> e
    86:86:void setHeightmap(net.minecraft.world.level.levelgen.Heightmap$Types,long[]) -> a
    89:97:net.minecraft.world.level.levelgen.Heightmap$Types fixType(net.minecraft.world.level.levelgen.Heightmap$Types) -> c
    102:102:int getHeight(net.minecraft.world.level.levelgen.Heightmap$Types,int,int) -> a
    107:107:net.minecraft.core.BlockPos getHeighestPosition(net.minecraft.world.level.levelgen.Heightmap$Types) -> b
    112:112:net.minecraft.world.level.ChunkPos getPos() -> g
    117:117:void setLastSaveTime(long) -> a
    122:122:net.minecraft.world.level.levelgen.structure.StructureStart getStartForFeature(java.lang.String) -> a
    127:127:void setStartForFeature(java.lang.String,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    131:131:java.util.Map getAllStarts() -> h
    136:136:void setAllStarts(java.util.Map) -> a
    140:140:it.unimi.dsi.fastutil.longs.LongSet getReferencesForFeature(java.lang.String) -> b
    145:145:void addReferenceForFeature(java.lang.String,long) -> a
    149:149:java.util.Map getAllReferences() -> v
    154:154:void setAllReferences(java.util.Map) -> b
    158:158:net.minecraft.world.level.chunk.ChunkBiomeContainer getBiomes() -> i
    163:163:void setUnsaved(boolean) -> a
    168:168:boolean isUnsaved() -> j
    173:173:net.minecraft.world.level.chunk.ChunkStatus getStatus() -> k
    178:178:void removeBlockEntity(net.minecraft.core.BlockPos) -> d
    182:182:void markPosForPostprocessing(net.minecraft.core.BlockPos) -> e
    186:186:void setBlockEntityNbt(net.minecraft.nbt.CompoundTag) -> a
    191:191:net.minecraft.nbt.CompoundTag getBlockEntityNbt(net.minecraft.core.BlockPos) -> f
    197:197:net.minecraft.nbt.CompoundTag getBlockEntityNbtForSaving(net.minecraft.core.BlockPos) -> i
    202:202:void setBiomes(net.minecraft.world.level.chunk.ChunkBiomeContainer) -> a
    206:206:java.util.stream.Stream getLights() -> m
    211:211:net.minecraft.world.level.chunk.ProtoTickList getBlockTicks() -> s
    216:216:net.minecraft.world.level.chunk.ProtoTickList getLiquidTicks() -> t
    221:221:java.util.BitSet getCarvingMask(net.minecraft.world.level.levelgen.GenerationStep$Carving) -> a
    225:225:net.minecraft.world.level.chunk.LevelChunk getWrapped() -> u
    230:230:boolean isLightCorrect() -> r
    235:236:void setLightCorrect(boolean) -> b
    24:24:net.minecraft.world.level.TickList getLiquidTicks() -> o
    24:24:net.minecraft.world.level.TickList getBlockTicks() -> n
    216:216:boolean lambda$getLiquidTicks$1(net.minecraft.world.level.material.Fluid) -> a
    211:211:boolean lambda$getBlockTicks$0(net.minecraft.world.level.block.Block) -> a
net.minecraft.world.level.chunk.LevelChunk -> cal:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.world.level.chunk.LevelChunkSection EMPTY_SECTION -> a
    net.minecraft.world.level.chunk.LevelChunkSection[] sections -> c
    net.minecraft.world.level.chunk.ChunkBiomeContainer biomes -> d
    java.util.Map pendingBlockEntities -> e
    boolean loaded -> f
    net.minecraft.world.level.Level level -> g
    java.util.Map heightmaps -> h
    net.minecraft.world.level.chunk.UpgradeData upgradeData -> i
    java.util.Map blockEntities -> j
    net.minecraft.util.ClassInstanceMultiMap[] entitySections -> k
    java.util.Map structureStarts -> l
    java.util.Map structuresRefences -> m
    it.unimi.dsi.fastutil.shorts.ShortList[] postProcessing -> n
    net.minecraft.world.level.TickList blockTicks -> o
    net.minecraft.world.level.TickList liquidTicks -> p
    boolean lastSaveHadEntities -> q
    long lastSaveTime -> r
    boolean unsaved -> s
    long inhabitedTime -> t
    java.util.function.Supplier fullStatus -> u
    java.util.function.Consumer postLoad -> v
    net.minecraft.world.level.ChunkPos chunkPos -> w
    boolean isLightCorrect -> x
    99:100:void <init>(net.minecraft.world.level.Level,net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.ChunkBiomeContainer) -> <init>
    67:130:void <init>(net.minecraft.world.level.Level,net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.ChunkBiomeContainer,net.minecraft.world.level.chunk.UpgradeData,net.minecraft.world.level.TickList,net.minecraft.world.level.TickList,long,net.minecraft.world.level.chunk.LevelChunkSection[],java.util.function.Consumer) -> <init>
    133:164:void <init>(net.minecraft.world.level.Level,net.minecraft.world.level.chunk.ProtoChunk) -> <init>
    168:168:net.minecraft.world.level.levelgen.Heightmap getOrCreateHeightmapUnprimed(net.minecraft.world.level.levelgen.Heightmap$Types) -> a
    173:175:java.util.Set getBlockEntitiesPos() -> c
    180:180:net.minecraft.world.level.chunk.LevelChunkSection[] getSections() -> d
    185:211:net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos) -> d_
    217:217:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos) -> b
    222:233:net.minecraft.world.level.material.FluidState getFluidState(int,int,int) -> a
    240:305:net.minecraft.world.level.block.state.BlockState setBlockState(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    311:311:net.minecraft.world.level.lighting.LevelLightEngine getLightEngine() -> e
    316:337:void addEntity(net.minecraft.world.entity.Entity) -> a
    341:342:void setHeightmap(net.minecraft.world.level.levelgen.Heightmap$Types,long[]) -> a
    345:346:void removeEntity(net.minecraft.world.entity.Entity) -> b
    349:356:void removeEntity(net.minecraft.world.entity.Entity,int) -> a
    360:360:int getHeight(net.minecraft.world.level.levelgen.Heightmap$Types,int,int) -> a
    365:377:net.minecraft.core.BlockPos getHeighestPosition(net.minecraft.world.level.levelgen.Heightmap$Types) -> b
    382:388:net.minecraft.world.level.block.entity.BlockEntity createBlockEntity(net.minecraft.core.BlockPos) -> j
    394:394:net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos) -> c
    399:419:net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos,net.minecraft.world.level.chunk.LevelChunk$EntityCreationType) -> a
    423:427:void addBlockEntity(net.minecraft.world.level.block.entity.BlockEntity) -> a
    431:442:void setBlockEntity(net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity) -> a
    446:447:void setBlockEntityNbt(net.minecraft.nbt.CompoundTag) -> a
    452:463:net.minecraft.nbt.CompoundTag getBlockEntityNbtForSaving(net.minecraft.core.BlockPos) -> i
    468:474:void removeBlockEntity(net.minecraft.core.BlockPos) -> d
    477:481:void runPostLoad() -> w
    484:485:void markUnsaved() -> s
    488:513:void getEntities(net.minecraft.world.entity.Entity,net.minecraft.world.phys.AABB,java.util.List,java.util.function.Predicate) -> a
    516:535:void getEntities(net.minecraft.world.entity.EntityType,net.minecraft.world.phys.AABB,java.util.List,java.util.function.Predicate) -> a
    538:552:void getEntitiesOfClass(java.lang.Class,net.minecraft.world.phys.AABB,java.util.List,java.util.function.Predicate) -> a
    555:555:boolean isEmpty() -> t
    560:560:net.minecraft.world.level.ChunkPos getPos() -> g
    564:598:void replaceWithPacketData(net.minecraft.world.level.chunk.ChunkBiomeContainer,net.minecraft.network.FriendlyByteBuf,net.minecraft.nbt.CompoundTag,int) -> a
    602:602:net.minecraft.world.level.chunk.ChunkBiomeContainer getBiomes() -> i
    606:607:void setLoaded(boolean) -> c
    610:610:net.minecraft.world.level.Level getLevel() -> x
    615:615:java.util.Collection getHeightmaps() -> f
    619:619:java.util.Map getBlockEntities() -> y
    623:623:net.minecraft.util.ClassInstanceMultiMap[] getEntitySections() -> z
    628:628:net.minecraft.nbt.CompoundTag getBlockEntityNbt(net.minecraft.core.BlockPos) -> f
    633:633:java.util.stream.Stream getLights() -> m
    638:638:net.minecraft.world.level.TickList getBlockTicks() -> n
    643:643:net.minecraft.world.level.TickList getLiquidTicks() -> o
    648:649:void setUnsaved(boolean) -> a
    653:653:boolean isUnsaved() -> j
    657:658:void setLastSaveHadEntities(boolean) -> d
    662:663:void setLastSaveTime(long) -> a
    668:668:net.minecraft.world.level.levelgen.structure.StructureStart getStartForFeature(java.lang.String) -> a
    673:674:void setStartForFeature(java.lang.String,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    678:678:java.util.Map getAllStarts() -> h
    683:685:void setAllStarts(java.util.Map) -> a
    689:689:it.unimi.dsi.fastutil.longs.LongSet getReferencesForFeature(java.lang.String) -> b
    694:695:void addReferenceForFeature(java.lang.String,long) -> a
    699:699:java.util.Map getAllReferences() -> v
    704:706:void setAllReferences(java.util.Map) -> b
    710:710:long getInhabitedTime() -> q
    715:716:void setInhabitedTime(long) -> b
    719:739:void postProcessGeneration() -> A
    744:763:net.minecraft.world.level.block.entity.BlockEntity promotePendingBlockEntity(net.minecraft.core.BlockPos,net.minecraft.nbt.CompoundTag) -> a
    768:768:net.minecraft.world.level.chunk.UpgradeData getUpgradeData() -> p
    773:773:it.unimi.dsi.fastutil.shorts.ShortList[] getPostProcessing() -> l
    778:793:void unpackTicks() -> B
    797:805:void packTicks(net.minecraft.server.level.ServerLevel) -> a
    815:815:net.minecraft.world.level.chunk.ChunkStatus getStatus() -> k
    819:822:net.minecraft.server.level.ChunkHolder$FullChunkStatus getFullStatus() -> u
    826:827:void setFullStatus(java.util.function.Supplier) -> a
    831:831:boolean isLightCorrect() -> r
    836:838:void setLightCorrect(boolean) -> b
    787:787:net.minecraft.world.level.material.Fluid lambda$unpackTicks$10(net.minecraft.core.BlockPos) -> k
    779:779:net.minecraft.world.level.block.Block lambda$unpackTicks$9(net.minecraft.core.BlockPos) -> l
    694:694:it.unimi.dsi.fastutil.longs.LongSet lambda$addReferenceForFeature$8(java.lang.String) -> c
    689:689:it.unimi.dsi.fastutil.longs.LongSet lambda$getReferencesForFeature$7(java.lang.String) -> d
    633:633:boolean lambda$getLights$6(net.minecraft.core.BlockPos) -> m
    565:565:boolean lambda$replaceWithPacketData$5(int,net.minecraft.core.BlockPos) -> a
    565:565:boolean lambda$replaceWithPacketData$4(net.minecraft.core.BlockPos) -> n
    232:232:java.lang.String lambda$getFluidState$3(int,int,int) -> b
    210:210:java.lang.String lambda$getBlockState$2(int,int,int) -> c
    168:168:net.minecraft.world.level.levelgen.Heightmap lambda$getOrCreateHeightmapUnprimed$1(net.minecraft.world.level.levelgen.Heightmap$Types) -> c
    137:138:net.minecraft.world.entity.Entity lambda$new$0(net.minecraft.world.entity.Entity) -> c
    59:65:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.LevelChunk$EntityCreationType -> cal$a:
    net.minecraft.world.level.chunk.LevelChunk$EntityCreationType IMMEDIATE -> a
    net.minecraft.world.level.chunk.LevelChunk$EntityCreationType QUEUED -> b
    net.minecraft.world.level.chunk.LevelChunk$EntityCreationType CHECK -> c
    net.minecraft.world.level.chunk.LevelChunk$EntityCreationType[] $VALUES -> d
    807:807:net.minecraft.world.level.chunk.LevelChunk$EntityCreationType[] values() -> values
    807:807:net.minecraft.world.level.chunk.LevelChunk$EntityCreationType valueOf(java.lang.String) -> valueOf
    807:807:void <init>(java.lang.String,int) -> <init>
    807:810:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.LevelChunkSection -> cam:
    net.minecraft.world.level.chunk.Palette GLOBAL_BLOCKSTATE_PALETTE -> a
    int bottomBlockY -> b
    short nonEmptyBlockCount -> c
    short tickingBlockCount -> d
    short tickingFluidCount -> e
    net.minecraft.world.level.chunk.PalettedContainer states -> f
    26:27:void <init>(int) -> <init>
    29:35:void <init>(int,short,short,short) -> <init>
    38:38:net.minecraft.world.level.block.state.BlockState getBlockState(int,int,int) -> a
    42:42:net.minecraft.world.level.material.FluidState getFluidState(int,int,int) -> b
    46:47:void acquire() -> a
    50:51:void release() -> b
    54:54:net.minecraft.world.level.block.state.BlockState setBlockState(int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    59:89:net.minecraft.world.level.block.state.BlockState setBlockState(int,int,int,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    93:93:boolean isEmpty() -> c
    97:97:boolean isEmpty(net.minecraft.world.level.chunk.LevelChunkSection) -> a
    101:101:boolean isRandomlyTicking() -> d
    105:105:boolean isRandomlyTickingBlocks() -> e
    109:109:boolean isRandomlyTickingFluids() -> f
    113:113:int bottomBlockY() -> g
    117:137:void recalcBlockCounts() -> h
    140:140:net.minecraft.world.level.chunk.PalettedContainer getStates() -> i
    144:146:void read(net.minecraft.network.FriendlyByteBuf) -> a
    149:151:void write(net.minecraft.network.FriendlyByteBuf) -> b
    154:154:int getSerializedSize() -> j
    158:158:boolean maybeHas(net.minecraft.world.level.block.state.BlockState) -> a
    122:136:void lambda$recalcBlockCounts$0(net.minecraft.world.level.block.state.BlockState,int) -> a
    17:17:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.LightChunkGetter -> can:
    net.minecraft.world.level.BlockGetter getChunkForLighting(int,int) -> c
    14:14:void onLightUpdate(net.minecraft.world.level.LightLayer,net.minecraft.core.SectionPos) -> a
    net.minecraft.world.level.BlockGetter getLevel() -> l
net.minecraft.world.level.chunk.LinearPalette -> cao:
    net.minecraft.core.IdMapper registry -> a
    java.lang.Object[] values -> b
    net.minecraft.world.level.chunk.PaletteResize resizeHandler -> c
    java.util.function.Function reader -> d
    int bits -> e
    int size -> f
    21:27:void <init>(net.minecraft.core.IdMapper,int,net.minecraft.world.level.chunk.PaletteResize,java.util.function.Function) -> <init>
    31:44:int idFor(java.lang.Object) -> a
    49:49:boolean maybeHas(java.lang.Object) -> b
    55:58:java.lang.Object valueFor(int) -> a
    63:67:void read(net.minecraft.network.FriendlyByteBuf) -> a
    71:75:void write(net.minecraft.network.FriendlyByteBuf) -> b
    79:85:int getSerializedSize() -> a
    90:90:int getSize() -> b
    95:99:void read(net.minecraft.nbt.ListTag) -> a
net.minecraft.world.level.chunk.OldDataLayer -> cap:
    byte[] data -> a
    int depthBits -> b
    int depthBitsPlusFour -> c
    8:12:void <init>(byte[],int) -> <init>
    15:22:int get(int,int,int) -> a
    27:37:void set(int,int,int,int) -> a
    40:40:boolean isValid() -> a
    44:48:void setAll(int) -> a
net.minecraft.world.level.chunk.Palette -> caq:
    int idFor(java.lang.Object) -> a
    boolean maybeHas(java.lang.Object) -> b
    java.lang.Object valueFor(int) -> a
    void read(net.minecraft.network.FriendlyByteBuf) -> a
    void write(net.minecraft.network.FriendlyByteBuf) -> b
    int getSerializedSize() -> a
    int getSize() -> b
    void read(net.minecraft.nbt.ListTag) -> a
net.minecraft.world.level.chunk.PaletteResize -> car:
    int onResize(int,java.lang.Object) -> onResize
net.minecraft.world.level.chunk.PalettedContainer -> cas:
    net.minecraft.world.level.chunk.Palette globalPalette -> b
    net.minecraft.world.level.chunk.PaletteResize dummyPaletteResize -> c
    net.minecraft.core.IdMapper registry -> d
    java.util.function.Function reader -> e
    java.util.function.Function writer -> f
    java.lang.Object defaultValue -> g
    net.minecraft.util.BitStorage storage -> a
    net.minecraft.world.level.chunk.Palette palette -> h
    int bits -> i
    java.util.concurrent.locks.ReentrantLock lock -> j
    40:50:void acquire() -> a
    53:54:void release() -> b
    27:63:void <init>(net.minecraft.world.level.chunk.Palette,net.minecraft.core.IdMapper,java.util.function.Function,java.util.function.Function,java.lang.Object) -> <init>
    66:66:int getIndex(int,int,int) -> b
    70:88:void setBits(int) -> b
    92:107:int onResize(int,java.lang.Object) -> onResize
    111:114:java.lang.Object getAndSet(int,int,int,java.lang.Object) -> a
    118:118:java.lang.Object getAndSetUnchecked(int,int,int,java.lang.Object) -> b
    122:125:java.lang.Object getAndSet(int,java.lang.Object) -> a
    129:132:void set(int,int,int,java.lang.Object) -> c
    135:137:void set(int,java.lang.Object) -> b
    140:140:java.lang.Object get(int,int,int) -> a
    144:145:java.lang.Object get(int) -> a
    149:159:void read(net.minecraft.network.FriendlyByteBuf) -> a
    162:167:void write(net.minecraft.network.FriendlyByteBuf) -> b
    170:201:void read(net.minecraft.nbt.ListTag,long[]) -> a
    204:231:void write(net.minecraft.nbt.CompoundTag,java.lang.String,java.lang.String) -> a
    234:234:int getSerializedSize() -> c
    238:238:boolean maybeHas(java.lang.Object) -> a
    247:250:void count(net.minecraft.world.level.chunk.PalettedContainer$CountConsumer) -> a
    249:249:void lambda$count$3(net.minecraft.world.level.chunk.PalettedContainer$CountConsumer,it.unimi.dsi.fastutil.ints.Int2IntMap$Entry) -> a
    248:248:void lambda$count$2(it.unimi.dsi.fastutil.ints.Int2IntMap,int) -> a
    42:42:java.lang.String lambda$acquire$1(java.lang.Thread) -> a
    27:27:int lambda$new$0(int,java.lang.Object) -> c
net.minecraft.world.level.chunk.PalettedContainer$CountConsumer -> cas$a:
    void accept(java.lang.Object,int) -> accept
net.minecraft.world.level.chunk.ProtoChunk -> cat:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.level.ChunkPos chunkPos -> b
    boolean isDirty -> c
    net.minecraft.world.level.chunk.ChunkBiomeContainer biomes -> d
    net.minecraft.world.level.lighting.LevelLightEngine lightEngine -> e
    java.util.Map heightmaps -> f
    net.minecraft.world.level.chunk.ChunkStatus status -> g
    java.util.Map blockEntities -> h
    java.util.Map blockEntityNbts -> i
    net.minecraft.world.level.chunk.LevelChunkSection[] sections -> j
    java.util.List entities -> k
    java.util.List lights -> l
    it.unimi.dsi.fastutil.shorts.ShortList[] postProcessing -> m
    java.util.Map structureStarts -> n
    java.util.Map structuresRefences -> o
    net.minecraft.world.level.chunk.UpgradeData upgradeData -> p
    net.minecraft.world.level.chunk.ProtoTickList blockTicks -> q
    net.minecraft.world.level.chunk.ProtoTickList liquidTicks -> r
    long inhabitedTime -> s
    java.util.Map carvingMasks -> t
    boolean isLightCorrect -> u
    75:82:void <init>(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.UpgradeData) -> <init>
    51:96:void <init>(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.UpgradeData,net.minecraft.world.level.chunk.LevelChunkSection[],net.minecraft.world.level.chunk.ProtoTickList,net.minecraft.world.level.chunk.ProtoTickList) -> <init>
    100:110:net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.core.BlockPos) -> d_
    115:125:net.minecraft.world.level.material.FluidState getFluidState(net.minecraft.core.BlockPos) -> b
    130:130:java.util.stream.Stream getLights() -> m
    134:138:it.unimi.dsi.fastutil.shorts.ShortList[] getPackedLights() -> w
    142:143:void addLight(short,int) -> b
    146:147:void addLight(net.minecraft.core.BlockPos) -> j
    152:203:net.minecraft.world.level.block.state.BlockState setBlockState(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    207:211:net.minecraft.world.level.chunk.LevelChunkSection getOrCreateSection(int) -> a
    216:218:void setBlockEntity(net.minecraft.core.BlockPos,net.minecraft.world.level.block.entity.BlockEntity) -> a
    222:224:java.util.Set getBlockEntitiesPos() -> c
    230:230:net.minecraft.world.level.block.entity.BlockEntity getBlockEntity(net.minecraft.core.BlockPos) -> c
    234:234:java.util.Map getBlockEntities() -> x
    238:239:void addEntity(net.minecraft.nbt.CompoundTag) -> b
    243:246:void addEntity(net.minecraft.world.entity.Entity) -> a
    249:249:java.util.List getEntities() -> y
    253:254:void setBiomes(net.minecraft.world.level.chunk.ChunkBiomeContainer) -> a
    259:259:net.minecraft.world.level.chunk.ChunkBiomeContainer getBiomes() -> i
    264:265:void setUnsaved(boolean) -> a
    269:269:boolean isUnsaved() -> j
    274:274:net.minecraft.world.level.chunk.ChunkStatus getStatus() -> k
    278:280:void setStatus(net.minecraft.world.level.chunk.ChunkStatus) -> a
    284:284:net.minecraft.world.level.chunk.LevelChunkSection[] getSections() -> d
    290:290:net.minecraft.world.level.lighting.LevelLightEngine getLightEngine() -> e
    295:295:java.util.Collection getHeightmaps() -> f
    300:301:void setHeightmap(net.minecraft.world.level.levelgen.Heightmap$Types,long[]) -> a
    305:305:net.minecraft.world.level.levelgen.Heightmap getOrCreateHeightmapUnprimed(net.minecraft.world.level.levelgen.Heightmap$Types) -> a
    310:315:int getHeight(net.minecraft.world.level.levelgen.Heightmap$Types,int,int) -> a
    320:331:net.minecraft.core.BlockPos getHeighestPosition(net.minecraft.world.level.levelgen.Heightmap$Types) -> b
    336:336:net.minecraft.world.level.ChunkPos getPos() -> g
    341:341:void setLastSaveTime(long) -> a
    346:346:net.minecraft.world.level.levelgen.structure.StructureStart getStartForFeature(java.lang.String) -> a
    351:353:void setStartForFeature(java.lang.String,net.minecraft.world.level.levelgen.structure.StructureStart) -> a
    357:357:java.util.Map getAllStarts() -> h
    362:365:void setAllStarts(java.util.Map) -> a
    369:369:it.unimi.dsi.fastutil.longs.LongSet getReferencesForFeature(java.lang.String) -> b
    374:376:void addReferenceForFeature(java.lang.String,long) -> a
    380:380:java.util.Map getAllReferences() -> v
    385:388:void setAllReferences(java.util.Map) -> b
    391:397:short packOffsetCoordinates(net.minecraft.core.BlockPos) -> k
    401:404:net.minecraft.core.BlockPos unpackOffsetCoordinates(short,int,net.minecraft.world.level.ChunkPos) -> a
    409:412:void markPosForPostprocessing(net.minecraft.core.BlockPos) -> e
    416:416:it.unimi.dsi.fastutil.shorts.ShortList[] getPostProcessing() -> l
    421:422:void addPackedPostProcess(short,int) -> a
    426:426:net.minecraft.world.level.chunk.ProtoTickList getBlockTicks() -> s
    431:431:net.minecraft.world.level.chunk.ProtoTickList getLiquidTicks() -> t
    436:436:net.minecraft.world.level.chunk.UpgradeData getUpgradeData() -> p
    441:442:void setInhabitedTime(long) -> b
    446:446:long getInhabitedTime() -> q
    451:452:void setBlockEntityNbt(net.minecraft.nbt.CompoundTag) -> a
    455:455:java.util.Map getBlockEntityNbts() -> z
    460:460:net.minecraft.nbt.CompoundTag getBlockEntityNbt(net.minecraft.core.BlockPos) -> f
    466:470:net.minecraft.nbt.CompoundTag getBlockEntityNbtForSaving(net.minecraft.core.BlockPos) -> i
    475:477:void removeBlockEntity(net.minecraft.core.BlockPos) -> d
    481:481:java.util.BitSet getCarvingMask(net.minecraft.world.level.levelgen.GenerationStep$Carving) -> a
    485:486:void setCarvingMask(net.minecraft.world.level.levelgen.GenerationStep$Carving,java.util.BitSet) -> a
    489:490:void setLightEngine(net.minecraft.world.level.lighting.LevelLightEngine) -> a
    494:494:boolean isLightCorrect() -> r
    499:501:void setLightCorrect(boolean) -> b
    38:38:net.minecraft.world.level.TickList getLiquidTicks() -> o
    38:38:net.minecraft.world.level.TickList getBlockTicks() -> n
    481:481:java.util.BitSet lambda$getCarvingMask$5(net.minecraft.world.level.levelgen.GenerationStep$Carving) -> b
    374:374:it.unimi.dsi.fastutil.longs.LongSet lambda$addReferenceForFeature$4(java.lang.String) -> c
    369:369:it.unimi.dsi.fastutil.longs.LongSet lambda$getReferencesForFeature$3(java.lang.String) -> d
    305:305:net.minecraft.world.level.levelgen.Heightmap lambda$getOrCreateHeightmapUnprimed$2(net.minecraft.world.level.levelgen.Heightmap$Types) -> c
    80:80:boolean lambda$new$1(net.minecraft.world.level.material.Fluid) -> a
    79:79:boolean lambda$new$0(net.minecraft.world.level.block.Block) -> a
    39:39:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.ProtoTickList -> cau:
    java.util.function.Predicate ignore -> a
    net.minecraft.world.level.ChunkPos chunkPos -> b
    it.unimi.dsi.fastutil.shorts.ShortList[] toBeTicked -> c
    23:24:void <init>(java.util.function.Predicate,net.minecraft.world.level.ChunkPos) -> <init>
    20:35:void <init>(java.util.function.Predicate,net.minecraft.world.level.ChunkPos,net.minecraft.nbt.ListTag) -> <init>
    38:38:net.minecraft.nbt.ListTag save() -> b
    42:51:void copyOut(net.minecraft.world.level.TickList,java.util.function.Function) -> a
    55:55:boolean hasScheduledTick(net.minecraft.core.BlockPos,java.lang.Object) -> a
    60:61:void scheduleTick(net.minecraft.core.BlockPos,java.lang.Object,int,net.minecraft.world.level.TickPriority) -> a
    65:65:boolean willTickThisTick(net.minecraft.core.BlockPos,java.lang.Object) -> b
    70:71:void addAll(java.util.stream.Stream) -> a
    75:75:int size() -> a
    70:70:void lambda$addAll$0(net.minecraft.world.level.TickNextTickData) -> a
net.minecraft.world.level.chunk.UpgradeData -> cav:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.world.level.chunk.UpgradeData EMPTY -> a
    net.minecraft.core.Direction8[] DIRECTIONS -> c
    java.util.EnumSet sides -> d
    int[][] index -> e
    java.util.Map MAP -> f
    java.util.Set CHUNKY_FIXERS -> g
    41:45:void <init>() -> <init>
    48:66:void <init>(net.minecraft.nbt.CompoundTag) -> <init>
    69:76:void upgrade(net.minecraft.world.level.chunk.LevelChunk) -> a
    79:115:void upgradeSides(net.minecraft.world.level.chunk.LevelChunk,net.minecraft.core.Direction8) -> a
    118:118:net.minecraft.world.level.block.state.BlockState updateState(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    122:167:void upgradeInside(net.minecraft.world.level.chunk.LevelChunk) -> b
    173:178:boolean isEmpty() -> a
    351:369:net.minecraft.nbt.CompoundTag write() -> b
    75:75:void lambda$upgrade$0(net.minecraft.world.level.Level,net.minecraft.world.level.chunk.UpgradeData$BlockFixer) -> a
    35:35:java.util.Map access$200() -> c
    35:35:java.util.Set access$300() -> d
    36:170:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.UpgradeData$1 -> cav$1:
net.minecraft.world.level.chunk.UpgradeData$BlockFixer -> cav$a:
    net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    185:185:void processChunk(net.minecraft.world.level.LevelAccessor) -> a
net.minecraft.world.level.chunk.UpgradeData$BlockFixers -> cav$b:
    net.minecraft.world.level.chunk.UpgradeData$BlockFixers BLACKLIST -> a
    net.minecraft.world.level.chunk.UpgradeData$BlockFixers DEFAULT -> b
    net.minecraft.world.level.chunk.UpgradeData$BlockFixers CHEST -> c
    net.minecraft.world.level.chunk.UpgradeData$BlockFixers LEAVES -> d
    net.minecraft.world.level.chunk.UpgradeData$BlockFixers STEM_BLOCK -> e
    net.minecraft.core.Direction[] DIRECTIONS -> f
    net.minecraft.world.level.chunk.UpgradeData$BlockFixers[] $VALUES -> g
    188:188:net.minecraft.world.level.chunk.UpgradeData$BlockFixers[] values() -> values
    188:188:net.minecraft.world.level.chunk.UpgradeData$BlockFixers valueOf(java.lang.String) -> valueOf
    337:338:void <init>(java.lang.String,int,net.minecraft.world.level.block.Block[]) -> <init>
    340:347:void <init>(java.lang.String,int,boolean,net.minecraft.world.level.block.Block[]) -> <init>
    188:188:void <init>(java.lang.String,int,net.minecraft.world.level.block.Block[],net.minecraft.world.level.chunk.UpgradeData$1) -> <init>
    188:188:void <init>(java.lang.String,int,boolean,net.minecraft.world.level.block.Block[],net.minecraft.world.level.chunk.UpgradeData$1) -> <init>
    188:334:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.UpgradeData$BlockFixers$1 -> cav$b$1:
    189:189:void <init>(java.lang.String,int,net.minecraft.world.level.block.Block[]) -> <init>
    232:232:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.chunk.UpgradeData$BlockFixers$2 -> cav$b$2:
    235:235:void <init>(java.lang.String,int,net.minecraft.world.level.block.Block[]) -> <init>
    238:238:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.chunk.UpgradeData$BlockFixers$3 -> cav$b$3:
    241:241:void <init>(java.lang.String,int,net.minecraft.world.level.block.Block[]) -> <init>
    244:264:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.chunk.UpgradeData$BlockFixers$4 -> cav$b$4:
    java.lang.ThreadLocal queue -> g
    267:268:void <init>(java.lang.String,int,boolean,net.minecraft.world.level.block.Block[]) -> <init>
    272:283:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    288:318:void processChunk(net.minecraft.world.level.LevelAccessor) -> a
    268:268:java.util.List lambda$$0() -> a
net.minecraft.world.level.chunk.UpgradeData$BlockFixers$5 -> cav$b$5:
    320:320:void <init>(java.lang.String,int,net.minecraft.world.level.block.Block[]) -> <init>
    323:329:net.minecraft.world.level.block.state.BlockState updateShape(net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.chunk.package-info -> caw:
net.minecraft.world.level.chunk.storage.ChunkSerializer -> cax:
    org.apache.logging.log4j.Logger LOGGER -> a
    59:59:void <init>() -> <init>
    64:221:net.minecraft.world.level.chunk.ProtoChunk read(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.entity.ai.village.poi.PoiManager,net.minecraft.world.level.ChunkPos,net.minecraft.nbt.CompoundTag) -> a
    225:357:net.minecraft.nbt.CompoundTag write(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.chunk.ChunkAccess) -> a
    361:367:net.minecraft.world.level.chunk.ChunkStatus$ChunkType getChunkTypeFromTag(net.minecraft.nbt.CompoundTag) -> a
    371:395:void postLoadChunk(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.chunk.LevelChunk) -> a
    398:412:net.minecraft.nbt.CompoundTag packStructureData(net.minecraft.world.level.ChunkPos,java.util.Map,java.util.Map) -> a
    416:423:java.util.Map unpackStructureStart(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> a
    427:443:java.util.Map unpackStructureReferences(net.minecraft.world.level.ChunkPos,net.minecraft.nbt.CompoundTag) -> a
    447:457:net.minecraft.nbt.ListTag packOffsets(it.unimi.dsi.fastutil.shorts.ShortList[]) -> a
    433:438:boolean lambda$unpackStructureReferences$5(net.minecraft.world.level.ChunkPos,java.lang.String,long) -> a
    376:377:net.minecraft.world.entity.Entity lambda$postLoadChunk$4(net.minecraft.world.level.chunk.LevelChunk,net.minecraft.world.entity.Entity) -> a
    250:250:boolean lambda$write$3(int,net.minecraft.world.level.chunk.LevelChunkSection) -> a
    138:138:void lambda$read$2(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.chunk.LevelChunk) -> b
    78:78:boolean lambda$read$1(net.minecraft.world.level.material.Fluid) -> a
    77:77:boolean lambda$read$0(net.minecraft.world.level.block.Block) -> a
    60:60:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.storage.ChunkStorage -> cay:
    net.minecraft.world.level.chunk.storage.IOWorker worker -> a
    com.mojang.datafixers.DataFixer fixerUpper -> b
    net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler legacyStructureHandler -> c
    26:29:void <init>(java.io.File,com.mojang.datafixers.DataFixer) -> <init>
    32:51:net.minecraft.nbt.CompoundTag upgradeChunkTag(net.minecraft.world.level.dimension.DimensionType,java.util.function.Supplier,net.minecraft.nbt.CompoundTag) -> a
    55:55:int getVersion(net.minecraft.nbt.CompoundTag) -> a
    60:60:net.minecraft.nbt.CompoundTag read(net.minecraft.world.level.ChunkPos) -> e
    64:69:void write(net.minecraft.world.level.ChunkPos,net.minecraft.nbt.CompoundTag) -> a
    72:73:void flushWorker() -> i
    77:78:void close() -> close
net.minecraft.world.level.chunk.storage.IOWorker -> caz:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.lang.Thread thread -> b
    java.util.concurrent.atomic.AtomicBoolean shutdownRequested -> c
    java.util.Queue inbox -> d
    net.minecraft.world.level.chunk.storage.RegionFileStorage storage -> e
    java.util.Map pendingWrites -> f
    boolean running -> g
    java.util.concurrent.CompletableFuture shutdownListener -> h
    43:58:void <init>(net.minecraft.world.level.chunk.storage.RegionFileStorage,java.lang.String) -> <init>
    61:61:java.util.concurrent.CompletableFuture store(net.minecraft.world.level.ChunkPos,net.minecraft.nbt.CompoundTag) -> a
    77:98:net.minecraft.nbt.CompoundTag load(net.minecraft.world.level.ChunkPos) -> a
    103:103:java.util.concurrent.CompletableFuture shutdown() -> b
    110:110:java.util.concurrent.CompletableFuture synchronize() -> a
    117:120:java.util.concurrent.CompletableFuture submitTask(java.util.function.Function) -> a
    124:125:void waitForQueueNonEmpty() -> c
    129:142:void loop() -> d
    145:153:boolean storePendingChunk() -> e
    157:159:void storeRemainingPendingChunks() -> f
    163:169:void runStore(net.minecraft.world.level.ChunkPos,net.minecraft.world.level.chunk.storage.IOWorker$PendingStore) -> a
    173:179:void closeStorage() -> g
    182:189:boolean processInbox() -> h
    194:205:void close() -> close
    110:110:java.lang.Runnable lambda$synchronize$12(java.util.concurrent.CompletableFuture) -> a
    111:113:void lambda$null$11(java.util.concurrent.CompletableFuture) -> b
    112:112:void lambda$null$10(java.util.concurrent.CompletableFuture,java.lang.Object,java.lang.Throwable) -> a
    111:111:java.util.concurrent.CompletableFuture[] lambda$null$9(int) -> a
    111:111:java.util.concurrent.CompletableFuture lambda$null$8(net.minecraft.world.level.chunk.storage.IOWorker$PendingStore) -> a
    103:103:java.lang.Runnable lambda$shutdown$7(java.util.concurrent.CompletableFuture) -> c
    104:106:void lambda$null$6(java.util.concurrent.CompletableFuture) -> d
    77:77:java.lang.Runnable lambda$load$5(net.minecraft.world.level.ChunkPos,java.util.concurrent.CompletableFuture) -> a
    78:90:void lambda$null$4(net.minecraft.world.level.ChunkPos,java.util.concurrent.CompletableFuture) -> b
    61:61:java.lang.Runnable lambda$store$3(net.minecraft.world.level.ChunkPos,net.minecraft.nbt.CompoundTag,java.util.concurrent.CompletableFuture) -> a
    62:71:void lambda$null$2(net.minecraft.world.level.ChunkPos,net.minecraft.nbt.CompoundTag,java.util.concurrent.CompletableFuture) -> b
    65:70:void lambda$null$1(java.util.concurrent.CompletableFuture,java.lang.Void,java.lang.Throwable) -> a
    62:62:net.minecraft.world.level.chunk.storage.IOWorker$PendingStore lambda$null$0(net.minecraft.world.level.ChunkPos) -> b
    33:33:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.storage.IOWorker$1 -> caz$1:
net.minecraft.world.level.chunk.storage.IOWorker$PendingStore -> caz$a:
    net.minecraft.nbt.CompoundTag data -> a
    java.util.concurrent.CompletableFuture result -> b
    35:37:void <init>() -> <init>
    35:35:net.minecraft.nbt.CompoundTag access$000(net.minecraft.world.level.chunk.storage.IOWorker$PendingStore) -> a
    35:35:java.util.concurrent.CompletableFuture access$100(net.minecraft.world.level.chunk.storage.IOWorker$PendingStore) -> b
    35:35:net.minecraft.nbt.CompoundTag access$002(net.minecraft.world.level.chunk.storage.IOWorker$PendingStore,net.minecraft.nbt.CompoundTag) -> a
    35:35:void <init>(net.minecraft.world.level.chunk.storage.IOWorker$1) -> <init>
net.minecraft.world.level.chunk.storage.OldChunkStorage -> cba:
    12:12:void <init>() -> <init>
    16:37:net.minecraft.world.level.chunk.storage.OldChunkStorage$OldLevelChunk load(net.minecraft.nbt.CompoundTag) -> a
    41:110:void convertToAnvilFormat(net.minecraft.world.level.chunk.storage.OldChunkStorage$OldLevelChunk,net.minecraft.nbt.CompoundTag,net.minecraft.world.level.biome.BiomeSource) -> a
net.minecraft.world.level.chunk.storage.OldChunkStorage$OldLevelChunk -> cba$a:
    long lastUpdated -> a
    boolean terrainPopulated -> b
    byte[] heightmap -> c
    net.minecraft.world.level.chunk.OldDataLayer blockLight -> d
    net.minecraft.world.level.chunk.OldDataLayer skyLight -> e
    net.minecraft.world.level.chunk.OldDataLayer data -> f
    byte[] blocks -> g
    net.minecraft.nbt.ListTag entities -> h
    net.minecraft.nbt.ListTag blockEntities -> i
    net.minecraft.nbt.ListTag blockTicks -> j
    int x -> k
    int z -> l
    128:131:void <init>(int,int) -> <init>
net.minecraft.world.level.chunk.storage.RegionBitmap -> cbb:
    java.util.BitSet used -> a
    9:10:void <init>() -> <init>
    13:14:void force(int,int) -> a
    17:18:void free(int,int) -> b
    21:30:int allocate(int) -> a
    35:35:it.unimi.dsi.fastutil.ints.IntSet getUsed() -> a
net.minecraft.world.level.chunk.storage.RegionFile -> cbc:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.nio.ByteBuffer PADDING_BUFFER -> b
    java.nio.channels.FileChannel file -> c
    java.nio.file.Path externalFileDir -> d
    net.minecraft.world.level.chunk.storage.RegionFileVersion version -> e
    java.nio.ByteBuffer header -> f
    java.nio.IntBuffer offsets -> g
    java.nio.IntBuffer timestamps -> h
    net.minecraft.world.level.chunk.storage.RegionBitmap usedSectors -> i
    108:109:void <init>(java.io.File,java.io.File) -> <init>
    101:143:void <init>(java.nio.file.Path,java.nio.file.Path,net.minecraft.world.level.chunk.storage.RegionFileVersion) -> <init>
    146:147:java.nio.file.Path getExternalChunkPath(net.minecraft.world.level.ChunkPos) -> e
    152:198:java.io.DataInputStream getChunkDataInputStream(net.minecraft.world.level.ChunkPos) -> a
    202:202:boolean isExternalStreamChunk(byte) -> a
    206:206:byte getExternalChunkVersion(byte) -> b
    211:216:java.io.DataInputStream createChunkInputStream(net.minecraft.world.level.ChunkPos,byte,java.io.InputStream) -> a
    221:227:java.io.DataInputStream createExternalChunkInputStream(net.minecraft.world.level.ChunkPos,byte) -> a
    231:231:java.io.ByteArrayInputStream createStream(java.nio.ByteBuffer,int) -> a
    235:235:int packSectorOffset(int,int) -> a
    239:239:int getNumSectors(int) -> a
    243:243:int getSectorNumber(int) -> b
    247:247:int sizeToSectors(int) -> c
    251:295:boolean doesChunkExist(net.minecraft.world.level.ChunkPos) -> b
    299:299:java.io.DataOutputStream getChunkDataOutputStream(net.minecraft.world.level.ChunkPos) -> c
    332:367:void write(net.minecraft.world.level.ChunkPos,java.nio.ByteBuffer) -> a
    370:374:java.nio.ByteBuffer createExternalStub() -> a
    378:383:net.minecraft.world.level.chunk.storage.RegionFile$CommitOp writeToExternalFile(java.nio.file.Path,java.nio.ByteBuffer) -> a
    387:389:void writeHeader() -> b
    392:392:int getOffset(net.minecraft.world.level.ChunkPos) -> f
    396:396:boolean hasChunk(net.minecraft.world.level.ChunkPos) -> d
    400:400:int getOffsetIndex(net.minecraft.world.level.ChunkPos) -> g
    406:418:void close() -> close
    423:430:void padToFullSector() -> c
    383:383:void lambda$writeToExternalFile$1(java.nio.file.Path,java.nio.file.Path) -> a
    353:353:void lambda$write$0(net.minecraft.world.level.ChunkPos) -> h
    84:84:net.minecraft.world.level.chunk.storage.RegionFileVersion access$000(net.minecraft.world.level.chunk.storage.RegionFile) -> a
    85:93:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.storage.RegionFile$ChunkBuffer -> cbc$a:
    net.minecraft.world.level.ChunkPos pos -> b
    net.minecraft.world.level.chunk.storage.RegionFile this$0 -> a
    309:320:void <init>(net.minecraft.world.level.chunk.storage.RegionFile,net.minecraft.world.level.ChunkPos) -> <init>
    324:328:void close() -> close
net.minecraft.world.level.chunk.storage.RegionFile$CommitOp -> cbc$b:
    void run() -> run
net.minecraft.world.level.chunk.storage.RegionFileStorage -> cbd:
    it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap regionCache -> a
    java.io.File folder -> b
    17:22:void <init>(java.io.File) -> <init>
    25:42:net.minecraft.world.level.chunk.storage.RegionFile getRegionFile(net.minecraft.world.level.ChunkPos) -> b
    47:54:net.minecraft.nbt.CompoundTag read(net.minecraft.world.level.ChunkPos) -> a
    58:62:void write(net.minecraft.world.level.ChunkPos,net.minecraft.nbt.CompoundTag) -> a
    66:69:void close() -> close
net.minecraft.world.level.chunk.storage.RegionFileVersion -> cbe:
    it.unimi.dsi.fastutil.ints.Int2ObjectMap VERSIONS -> d
    net.minecraft.world.level.chunk.storage.RegionFileVersion VERSION_GZIP -> a
    net.minecraft.world.level.chunk.storage.RegionFileVersion VERSION_DEFLATE -> b
    net.minecraft.world.level.chunk.storage.RegionFileVersion VERSION_NONE -> c
    int id -> e
    net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper inputWrapper -> f
    net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper outputWrapper -> g
    26:30:void <init>(int,net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper,net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper) -> <init>
    33:34:net.minecraft.world.level.chunk.storage.RegionFileVersion register(net.minecraft.world.level.chunk.storage.RegionFileVersion) -> a
    39:39:net.minecraft.world.level.chunk.storage.RegionFileVersion fromId(int) -> a
    43:43:boolean isValidVersion(int) -> b
    47:47:int getId() -> a
    51:51:java.io.OutputStream wrap(java.io.OutputStream) -> a
    55:55:java.io.InputStream wrap(java.io.InputStream) -> a
    20:20:java.io.OutputStream lambda$static$1(java.io.OutputStream) -> b
    20:20:java.io.InputStream lambda$static$0(java.io.InputStream) -> b
    16:20:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.storage.RegionFileVersion$StreamWrapper -> cbe$a:
    java.lang.Object wrap(java.lang.Object) -> wrap
net.minecraft.world.level.chunk.storage.SectionStorage -> cbf:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.level.chunk.storage.IOWorker worker -> b
    it.unimi.dsi.fastutil.longs.Long2ObjectMap storage -> c
    it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet dirty -> d
    java.util.function.BiFunction deserializer -> e
    java.util.function.Function factory -> f
    com.mojang.datafixers.DataFixer fixerUpper -> g
    net.minecraft.util.datafix.DataFixTypes type -> h
    43:56:void <init>(java.io.File,java.util.function.BiFunction,java.util.function.Function,com.mojang.datafixers.DataFixer,net.minecraft.util.datafix.DataFixTypes) -> <init>
    59:63:void tick(java.util.function.BooleanSupplier) -> a
    67:67:java.util.Optional get(long) -> c
    71:85:java.util.Optional getOrLoad(long) -> d
    89:89:boolean outsideStoredRange(net.minecraft.core.SectionPos) -> b
    93:99:net.minecraft.util.Serializable getOrCreate(long) -> e
    103:104:void readColumn(net.minecraft.world.level.ChunkPos) -> b
    109:112:net.minecraft.nbt.CompoundTag tryRead(net.minecraft.world.level.ChunkPos) -> c
    117:142:void readColumn(net.minecraft.world.level.ChunkPos,com.mojang.datafixers.types.DynamicOps,java.lang.Object) -> a
    145:152:void writeColumn(net.minecraft.world.level.ChunkPos) -> d
    155:168:com.mojang.datafixers.Dynamic writeColumn(net.minecraft.world.level.ChunkPos,com.mojang.datafixers.types.DynamicOps) -> a
    172:172:void onSectionLoad(long) -> b
    175:181:void setDirty(long) -> a
    185:185:int getVersion(com.mojang.datafixers.Dynamic) -> a
    189:198:void flush(net.minecraft.world.level.ChunkPos) -> a
    202:203:void close() -> close
    135:139:void lambda$readColumn$3(long,boolean,net.minecraft.util.Serializable) -> a
    131:131:net.minecraft.util.Serializable lambda$readColumn$2(long,com.mojang.datafixers.Dynamic) -> a
    131:131:void lambda$null$1(long) -> f
    97:97:void lambda$getOrCreate$0(long) -> g
    36:36:void <clinit>() -> <clinit>
net.minecraft.world.level.chunk.storage.package-info -> cbg:
net.minecraft.world.level.dimension.Dimension -> cbh:
    float[] MOON_BRIGHTNESS_PER_PHASE -> a
    net.minecraft.world.level.Level level -> b
    net.minecraft.world.level.dimension.DimensionType type -> f
    boolean ultraWarm -> c
    boolean hasCeiling -> d
    float[] brightnessRamp -> e
    float[] sunriseCol -> g
    23:38:void <init>(net.minecraft.world.level.Level,net.minecraft.world.level.dimension.DimensionType,float) -> <init>
    42:42:int getMoonPhase(long) -> a
    47:61:float[] getSunriseColor(float,float) -> a
    65:65:float getCloudHeight() -> a
    69:69:boolean hasGround() -> b
    74:74:net.minecraft.core.BlockPos getDimensionSpecificSpawn() -> c
    78:81:double getClearColorScale() -> d
    85:85:boolean isUltraWarm() -> e
    89:89:boolean isHasSkyLight() -> f
    93:93:boolean isHasCeiling() -> g
    98:98:float getBrightness(int) -> a
    102:102:net.minecraft.world.level.border.WorldBorder createWorldBorder() -> h
    106:106:void saveData() -> i
    109:109:void tick() -> j
    net.minecraft.world.level.chunk.ChunkGenerator createRandomLevelGenerator() -> k
    net.minecraft.core.BlockPos getSpawnPosInChunk(net.minecraft.world.level.ChunkPos,boolean) -> a
    net.minecraft.core.BlockPos getValidSpawnPosition(int,int,boolean) -> a
    float getTimeOfDay(long,float) -> a
    boolean isNaturalDimension() -> l
    net.minecraft.world.phys.Vec3 getFogColor(float,float) -> b
    boolean mayRespawn() -> m
    boolean isFoggyAt(int,int) -> a
    net.minecraft.world.level.dimension.DimensionType getType() -> n
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.level.dimension.DimensionType -> cbi:
    net.minecraft.world.level.dimension.DimensionType OVERWORLD -> a
    net.minecraft.world.level.dimension.DimensionType NETHER -> b
    net.minecraft.world.level.dimension.DimensionType THE_END -> c
    int id -> d
    java.lang.String fileSuffix -> e
    java.lang.String folder -> f
    java.util.function.BiFunction factory -> g
    boolean hasSkylight -> h
    net.minecraft.world.level.biome.BiomeZoomer biomeZoomer -> i
    26:26:net.minecraft.world.level.dimension.DimensionType register(java.lang.String,net.minecraft.world.level.dimension.DimensionType) -> a
    36:43:void <init>(int,java.lang.String,java.lang.String,java.util.function.BiFunction,boolean,net.minecraft.world.level.biome.BiomeZoomer) -> <init>
    46:46:net.minecraft.world.level.dimension.DimensionType of(com.mojang.datafixers.Dynamic) -> a
    50:50:java.lang.Iterable getAllTypes() -> a
    54:54:int getId() -> b
    58:58:java.lang.String getFileSuffix() -> c
    62:65:java.io.File getStorageFolder(java.io.File) -> a
    69:69:net.minecraft.world.level.dimension.Dimension create(net.minecraft.world.level.Level) -> a
    74:74:java.lang.String toString() -> toString
    79:79:net.minecraft.world.level.dimension.DimensionType getById(int) -> a
    84:84:net.minecraft.world.level.dimension.DimensionType getByName(net.minecraft.resources.ResourceLocation) -> a
    89:89:net.minecraft.resources.ResourceLocation getName(net.minecraft.world.level.dimension.DimensionType) -> a
    93:93:boolean hasSkyLight() -> d
    97:97:net.minecraft.world.level.biome.BiomeZoomer getBiomeZoomer() -> e
    102:102:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    21:23:void <clinit>() -> <clinit>
net.minecraft.world.level.dimension.NetherDimension -> cbj:
    net.minecraft.world.phys.Vec3 NETHER_FOG_COLOR -> f
    21:24:void <init>(net.minecraft.world.level.Level,net.minecraft.world.level.dimension.DimensionType) -> <init>
    28:28:net.minecraft.world.phys.Vec3 getFogColor(float,float) -> b
    33:36:net.minecraft.world.level.chunk.ChunkGenerator createRandomLevelGenerator() -> k
    41:41:boolean isNaturalDimension() -> l
    47:47:net.minecraft.core.BlockPos getSpawnPosInChunk(net.minecraft.world.level.ChunkPos,boolean) -> a
    53:53:net.minecraft.core.BlockPos getValidSpawnPosition(int,int,boolean) -> a
    58:58:float getTimeOfDay(long,float) -> a
    63:63:boolean mayRespawn() -> m
    68:68:boolean isFoggyAt(int,int) -> a
    73:73:net.minecraft.world.level.border.WorldBorder createWorldBorder() -> h
    88:88:net.minecraft.world.level.dimension.DimensionType getType() -> n
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.level.dimension.NetherDimension$1 -> cbj$1:
    net.minecraft.world.level.dimension.NetherDimension this$0 -> a
    73:73:void <init>(net.minecraft.world.level.dimension.NetherDimension) -> <init>
    76:76:double getCenterX() -> g
    81:81:double getCenterZ() -> h
net.minecraft.world.level.dimension.NormalDimension -> cbk:
    52:53:void <init>(net.minecraft.world.level.Level,net.minecraft.world.level.dimension.DimensionType) -> <init>
    57:57:net.minecraft.world.level.dimension.DimensionType getType() -> n
    62:167:net.minecraft.world.level.chunk.ChunkGenerator createRandomLevelGenerator() -> k
    174:183:net.minecraft.core.BlockPos getSpawnPosInChunk(net.minecraft.world.level.ChunkPos,boolean) -> a
    189:225:net.minecraft.core.BlockPos getValidSpawnPosition(int,int,boolean) -> a
    231:236:float getTimeOfDay(long,float) -> a
    241:241:boolean isNaturalDimension() -> l
    246:256:net.minecraft.world.phys.Vec3 getFogColor(float,float) -> b
    261:261:boolean mayRespawn() -> m
    266:266:boolean isFoggyAt(int,int) -> a
net.minecraft.world.level.dimension.end.DragonRespawnAnimation -> cbl:
    net.minecraft.world.level.dimension.end.DragonRespawnAnimation START -> a
    net.minecraft.world.level.dimension.end.DragonRespawnAnimation PREPARING_TO_SUMMON_PILLARS -> b
    net.minecraft.world.level.dimension.end.DragonRespawnAnimation SUMMONING_PILLARS -> c
    net.minecraft.world.level.dimension.end.DragonRespawnAnimation SUMMONING_DRAGON -> d
    net.minecraft.world.level.dimension.end.DragonRespawnAnimation END -> e
    net.minecraft.world.level.dimension.end.DragonRespawnAnimation[] $VALUES -> f
    17:17:net.minecraft.world.level.dimension.end.DragonRespawnAnimation[] values() -> values
    17:17:net.minecraft.world.level.dimension.end.DragonRespawnAnimation valueOf(java.lang.String) -> valueOf
    17:17:void <init>(java.lang.String,int) -> <init>
    void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.dimension.end.EndDragonFight,java.util.List,int,net.minecraft.core.BlockPos) -> a
    17:17:void <init>(java.lang.String,int,net.minecraft.world.level.dimension.end.DragonRespawnAnimation$1) -> <init>
    17:97:void <clinit>() -> <clinit>
net.minecraft.world.level.dimension.end.DragonRespawnAnimation$1 -> cbl$1:
    18:18:void <init>(java.lang.String,int) -> <init>
    21:26:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.dimension.end.EndDragonFight,java.util.List,int,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.dimension.end.DragonRespawnAnimation$2 -> cbl$2:
    28:28:void <init>(java.lang.String,int) -> <init>
    31:38:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.dimension.end.EndDragonFight,java.util.List,int,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.dimension.end.DragonRespawnAnimation$3 -> cbl$3:
    40:40:void <init>(java.lang.String,int) -> <init>
    43:73:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.dimension.end.EndDragonFight,java.util.List,int,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.dimension.end.DragonRespawnAnimation$4 -> cbl$4:
    75:75:void <init>(java.lang.String,int) -> <init>
    78:95:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.dimension.end.EndDragonFight,java.util.List,int,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.dimension.end.DragonRespawnAnimation$5 -> cbl$5:
    97:97:void <init>(java.lang.String,int) -> <init>
    101:101:void tick(net.minecraft.server.level.ServerLevel,net.minecraft.world.level.dimension.end.EndDragonFight,java.util.List,int,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.dimension.end.EndDragonFight -> cbm:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.function.Predicate VALID_PLAYER -> b
    net.minecraft.server.level.ServerBossEvent dragonEvent -> c
    net.minecraft.server.level.ServerLevel level -> d
    java.util.List gateways -> e
    net.minecraft.world.level.block.state.pattern.BlockPattern exitPortalPattern -> f
    int ticksSinceDragonSeen -> g
    int crystalsAlive -> h
    int ticksSinceCrystalsScanned -> i
    int ticksSinceLastPlayerScan -> j
    boolean dragonKilled -> k
    boolean previouslyKilled -> l
    java.util.UUID dragonUUID -> m
    boolean needsStateScanning -> n
    net.minecraft.core.BlockPos portalLocation -> o
    net.minecraft.world.level.dimension.end.DragonRespawnAnimation respawnStage -> p
    int respawnTime -> q
    java.util.List respawnCrystals -> r
    77:172:void <init>(net.minecraft.server.level.ServerLevel,net.minecraft.nbt.CompoundTag) -> <init>
    175:194:net.minecraft.nbt.CompoundTag saveData() -> a
    198:237:void tick() -> b
    240:273:void scanState() -> g
    276:284:void findOrCreateDragon() -> h
    287:303:void setRespawnStage(net.minecraft.world.level.dimension.end.DragonRespawnAnimation) -> a
    306:317:boolean hasActiveExitPortal() -> i
    322:352:net.minecraft.world.level.block.state.pattern.BlockPattern$BlockPatternMatch findExitPortal() -> j
    356:368:boolean isArenaLoaded() -> k
    372:382:void updatePlayers() -> l
    385:393:void updateCrystalCount() -> m
    396:409:void setDragonKilled(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> a
    412:420:void spawnNewGateway() -> n
    423:425:void spawnNewGateway(net.minecraft.core.BlockPos) -> a
    429:439:void spawnExitPortal(boolean) -> a
    442:448:net.minecraft.world.entity.boss.enderdragon.EnderDragon createNewDragon() -> o
    452:459:void updateDragon(net.minecraft.world.entity.boss.enderdragon.EnderDragon) -> b
    462:462:int getCrystalsAlive() -> c
    466:479:void onCrystalDestroyed(net.minecraft.world.entity.boss.enderdragon.EndCrystal,net.minecraft.world.damagesource.DamageSource) -> a
    482:482:boolean hasPreviouslyKilledDragon() -> d
    486:513:void tryRespawn() -> e
    516:537:void respawnDragon(java.util.List) -> a
    540:547:void resetSpikeCrystals() -> f
    66:75:void <clinit>() -> <clinit>
net.minecraft.world.level.dimension.end.TheEndDimension -> cbn:
    net.minecraft.core.BlockPos END_SPAWN_POINT -> f
    net.minecraft.world.level.dimension.end.EndDragonFight dragonFight -> g
    26:29:void <init>(net.minecraft.world.level.Level,net.minecraft.world.level.dimension.DimensionType) -> <init>
    33:37:net.minecraft.world.level.chunk.ChunkGenerator createRandomLevelGenerator() -> k
    42:42:float getTimeOfDay(long,float) -> a
    48:48:float[] getSunriseColor(float,float) -> a
    53:64:net.minecraft.world.phys.Vec3 getFogColor(float,float) -> b
    69:69:boolean hasGround() -> b
    74:74:boolean mayRespawn() -> m
    79:79:boolean isNaturalDimension() -> l
    84:84:float getCloudHeight() -> a
    90:92:net.minecraft.core.BlockPos getSpawnPosInChunk(net.minecraft.world.level.ChunkPos,boolean) -> a
    97:97:net.minecraft.core.BlockPos getDimensionSpecificSpawn() -> c
    103:103:net.minecraft.core.BlockPos getValidSpawnPosition(int,int,boolean) -> a
    109:109:boolean isFoggyAt(int,int) -> a
    114:114:net.minecraft.world.level.dimension.DimensionType getType() -> n
    119:124:void saveData() -> i
    128:131:void tick() -> j
    135:135:net.minecraft.world.level.dimension.end.EndDragonFight getDragonFight() -> o
    22:22:void <clinit>() -> <clinit>
net.minecraft.world.level.dimension.end.package-info -> cbo:
net.minecraft.world.level.dimension.package-info -> cbp:
net.minecraft.world.level.levelgen.ChunkGeneratorSettings -> cbq:
    int villagesSpacing -> a
    int villagesSeparation -> b
    int monumentsSpacing -> c
    int monumentsSeparation -> d
    int strongholdsDistance -> e
    int strongholdsCount -> f
    int strongholdsSpread -> g
    int templesSpacing -> h
    int templesSeparation -> i
    int oceanRuinSpacing -> j
    int oceanRuinSeparation -> k
    int endCitySpacing -> l
    int endCitySeparation -> m
    int shipwreckSpacing -> n
    int shipwreckSeparation -> o
    int woodlandMansionSpacing -> p
    int woodlandMangionSeparation -> q
    net.minecraft.world.level.block.state.BlockState defaultBlock -> r
    net.minecraft.world.level.block.state.BlockState defaultFluid -> s
    7:26:void <init>() -> <init>
    29:29:int getVillagesSpacing() -> a
    33:33:int getVillagesSeparation() -> b
    37:37:int getMonumentsSpacing() -> c
    41:41:int getMonumentsSeparation() -> d
    45:45:int getStrongholdsDistance() -> e
    49:49:int getStrongholdsCount() -> f
    53:53:int getStrongholdsSpread() -> g
    57:57:int getTemplesSpacing() -> h
    61:61:int getTemplesSeparation() -> i
    65:65:int getShipwreckSpacing() -> j
    69:69:int getShipwreckSeparation() -> k
    73:73:int getOceanRuinSpacing() -> l
    77:77:int getOceanRuinSeparation() -> m
    81:81:int getEndCitySpacing() -> n
    85:85:int getEndCitySeparation() -> o
    89:89:int getWoodlandMansionSpacing() -> p
    93:93:int getWoodlandMangionSeparation() -> q
    97:97:net.minecraft.world.level.block.state.BlockState getDefaultBlock() -> r
    101:101:net.minecraft.world.level.block.state.BlockState getDefaultFluid() -> s
    105:106:void setDefaultBlock(net.minecraft.world.level.block.state.BlockState) -> a
    109:110:void setDefaultFluid(net.minecraft.world.level.block.state.BlockState) -> b
    113:113:int getBedrockRoofPosition() -> t
    117:117:int getBedrockFloorPosition() -> u
net.minecraft.world.level.levelgen.DebugGeneratorSettings -> cbr:
    3:3:void <init>() -> <init>
net.minecraft.world.level.levelgen.DebugLevelSource -> cbs:
    java.util.List ALL_BLOCKS -> g
    int GRID_WIDTH -> h
    int GRID_HEIGHT -> i
    net.minecraft.world.level.block.state.BlockState AIR -> e
    net.minecraft.world.level.block.state.BlockState BARRIER -> f
    31:32:void <init>(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.biome.BiomeSource,net.minecraft.world.level.levelgen.DebugGeneratorSettings) -> <init>
    36:36:void buildSurfaceAndBedrock(net.minecraft.server.level.WorldGenRegion,net.minecraft.world.level.chunk.ChunkAccess) -> a
    40:40:void applyCarvers(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.levelgen.GenerationStep$Carving) -> a
    44:44:int getSpawnHeight() -> b
    49:65:void applyBiomeDecoration(net.minecraft.server.level.WorldGenRegion) -> a
    69:69:void fillFromNoise(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkAccess) -> b
    73:73:int getBaseHeight(int,int,net.minecraft.world.level.levelgen.Heightmap$Types) -> a
    77:91:net.minecraft.world.level.block.state.BlockState getBlockStateFor(int,int) -> a
    23:23:java.util.stream.Stream lambda$static$0(net.minecraft.world.level.block.Block) -> a
    23:28:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.FlatLevelSource -> cbt:
    net.minecraft.world.level.biome.Biome biomeWrapper -> e
    net.minecraft.world.level.levelgen.PhantomSpawner phantomSpawner -> f
    net.minecraft.world.entity.npc.CatSpawner catSpawner -> g
    36:59:void <init>(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.biome.BiomeSource,net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings) -> <init>
    62:120:net.minecraft.world.level.biome.Biome getBiomeFromSettings() -> g
    125:125:void buildSurfaceAndBedrock(net.minecraft.server.level.WorldGenRegion,net.minecraft.world.level.chunk.ChunkAccess) -> a
    129:130:int getSpawnHeight() -> b
    135:135:net.minecraft.world.level.biome.Biome getCarvingOrDecorationBiome(net.minecraft.world.level.biome.BiomeManager,net.minecraft.core.BlockPos) -> a
    142:162:void fillFromNoise(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkAccess) -> b
    166:176:int getBaseHeight(int,int,net.minecraft.world.level.levelgen.Heightmap$Types) -> a
    181:183:void tickCustomSpawners(net.minecraft.server.level.ServerLevel,boolean,boolean) -> a
    187:187:boolean isBiomeValidStartForStructure(net.minecraft.world.level.biome.Biome,net.minecraft.world.level.levelgen.feature.StructureFeature) -> a
    193:193:net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration getStructureConfiguration(net.minecraft.world.level.biome.Biome,net.minecraft.world.level.levelgen.feature.StructureFeature) -> b
    199:202:net.minecraft.core.BlockPos findNearestMapFeature(net.minecraft.world.level.Level,java.lang.String,net.minecraft.core.BlockPos,int,boolean) -> a
net.minecraft.world.level.levelgen.FlatLevelSource$FlatLevelBiomeWrapper -> cbt$a:
    net.minecraft.world.level.levelgen.FlatLevelSource this$0 -> u
    40:53:void <init>(net.minecraft.world.level.levelgen.FlatLevelSource,net.minecraft.world.level.levelgen.surfacebuilders.ConfiguredSurfaceBuilder,net.minecraft.world.level.biome.Biome$Precipitation,net.minecraft.world.level.biome.Biome$BiomeCategory,float,float,float,float,int,int,java.lang.String) -> <init>
net.minecraft.world.level.levelgen.GenerationStep -> cbu:
    7:7:void <init>() -> <init>
net.minecraft.world.level.levelgen.GenerationStep$Carving -> cbu$a:
    net.minecraft.world.level.levelgen.GenerationStep$Carving AIR -> a
    net.minecraft.world.level.levelgen.GenerationStep$Carving LIQUID -> b
    java.util.Map BY_NAME -> c
    java.lang.String name -> d
    net.minecraft.world.level.levelgen.GenerationStep$Carving[] $VALUES -> e
    35:35:net.minecraft.world.level.levelgen.GenerationStep$Carving[] values() -> values
    35:35:net.minecraft.world.level.levelgen.GenerationStep$Carving valueOf(java.lang.String) -> valueOf
    43:45:void <init>(java.lang.String,int,java.lang.String) -> <init>
    48:48:java.lang.String getName() -> a
    52:52:net.minecraft.world.level.levelgen.GenerationStep$Carving byName(java.lang.String) -> a
    40:40:net.minecraft.world.level.levelgen.GenerationStep$Carving lambda$static$0(net.minecraft.world.level.levelgen.GenerationStep$Carving) -> a
    35:40:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.GenerationStep$Decoration -> cbu$b:
    net.minecraft.world.level.levelgen.GenerationStep$Decoration RAW_GENERATION -> a
    net.minecraft.world.level.levelgen.GenerationStep$Decoration LOCAL_MODIFICATIONS -> b
    net.minecraft.world.level.levelgen.GenerationStep$Decoration UNDERGROUND_STRUCTURES -> c
    net.minecraft.world.level.levelgen.GenerationStep$Decoration SURFACE_STRUCTURES -> d
    net.minecraft.world.level.levelgen.GenerationStep$Decoration UNDERGROUND_ORES -> e
    net.minecraft.world.level.levelgen.GenerationStep$Decoration UNDERGROUND_DECORATION -> f
    net.minecraft.world.level.levelgen.GenerationStep$Decoration VEGETAL_DECORATION -> g
    net.minecraft.world.level.levelgen.GenerationStep$Decoration TOP_LAYER_MODIFICATION -> h
    java.util.Map BY_NAME -> i
    java.lang.String name -> j
    net.minecraft.world.level.levelgen.GenerationStep$Decoration[] $VALUES -> k
    8:8:net.minecraft.world.level.levelgen.GenerationStep$Decoration[] values() -> values
    8:8:net.minecraft.world.level.levelgen.GenerationStep$Decoration valueOf(java.lang.String) -> valueOf
    22:24:void <init>(java.lang.String,int,java.lang.String) -> <init>
    27:27:java.lang.String getName() -> a
    31:31:net.minecraft.world.level.levelgen.GenerationStep$Decoration byName(java.lang.String) -> a
    19:19:net.minecraft.world.level.levelgen.GenerationStep$Decoration lambda$static$0(net.minecraft.world.level.levelgen.GenerationStep$Decoration) -> a
    8:19:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.Heightmap -> cbv:
    java.util.function.Predicate NOT_AIR -> a
    java.util.function.Predicate MATERIAL_MOTION_BLOCKING -> b
    net.minecraft.util.BitStorage data -> c
    java.util.function.Predicate isOpaque -> d
    net.minecraft.world.level.chunk.ChunkAccess chunk -> e
    78:85:void <init>(net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.levelgen.Heightmap$Types) -> <init>
    88:121:void primeHeightmaps(net.minecraft.world.level.chunk.ChunkAccess,java.util.Set) -> a
    124:151:boolean update(int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    155:155:int getFirstAvailable(int,int) -> a
    159:159:int getHighestTaken(int,int) -> b
    163:163:int getFirstAvailable(int) -> a
    167:168:void setHeight(int,int,int) -> a
    171:172:void setRawData(long[]) -> a
    175:175:long[] getRawData() -> a
    179:179:int getIndex(int,int) -> c
    22:22:boolean lambda$static$1(net.minecraft.world.level.block.state.BlockState) -> a
    21:21:boolean lambda$static$0(net.minecraft.world.level.block.state.BlockState) -> b
    20:20:java.util.function.Predicate access$000() -> b
    20:20:java.util.function.Predicate access$100() -> c
    21:22:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.Heightmap$Types -> cbv$a:
    net.minecraft.world.level.levelgen.Heightmap$Types WORLD_SURFACE_WG -> a
    net.minecraft.world.level.levelgen.Heightmap$Types WORLD_SURFACE -> b
    net.minecraft.world.level.levelgen.Heightmap$Types OCEAN_FLOOR_WG -> c
    net.minecraft.world.level.levelgen.Heightmap$Types OCEAN_FLOOR -> d
    net.minecraft.world.level.levelgen.Heightmap$Types MOTION_BLOCKING -> e
    net.minecraft.world.level.levelgen.Heightmap$Types MOTION_BLOCKING_NO_LEAVES -> f
    java.lang.String serializationKey -> g
    net.minecraft.world.level.levelgen.Heightmap$Usage usage -> h
    java.util.function.Predicate isOpaque -> i
    java.util.Map REVERSE_LOOKUP -> j
    net.minecraft.world.level.levelgen.Heightmap$Types[] $VALUES -> k
    31:31:net.minecraft.world.level.levelgen.Heightmap$Types[] values() -> values
    31:31:net.minecraft.world.level.levelgen.Heightmap$Types valueOf(java.lang.String) -> valueOf
    51:55:void <init>(java.lang.String,int,java.lang.String,net.minecraft.world.level.levelgen.Heightmap$Usage,java.util.function.Predicate) -> <init>
    58:58:java.lang.String getSerializationKey() -> a
    62:62:boolean sendToClient() -> b
    66:66:boolean keepAfterWorldgen() -> c
    70:70:net.minecraft.world.level.levelgen.Heightmap$Types getFromKey(java.lang.String) -> a
    74:74:java.util.function.Predicate isOpaque() -> d
    46:49:void lambda$static$2(java.util.HashMap) -> a
    37:37:boolean lambda$static$1(net.minecraft.world.level.block.state.BlockState) -> a
    36:36:boolean lambda$static$0(net.minecraft.world.level.block.state.BlockState) -> b
    31:45:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.Heightmap$Usage -> cbv$b:
    net.minecraft.world.level.levelgen.Heightmap$Usage WORLDGEN -> a
    net.minecraft.world.level.levelgen.Heightmap$Usage LIVE_WORLD -> b
    net.minecraft.world.level.levelgen.Heightmap$Usage CLIENT -> c
    net.minecraft.world.level.levelgen.Heightmap$Usage[] $VALUES -> d
    24:24:net.minecraft.world.level.levelgen.Heightmap$Usage[] values() -> values
    24:24:net.minecraft.world.level.levelgen.Heightmap$Usage valueOf(java.lang.String) -> valueOf
    24:24:void <init>(java.lang.String,int) -> <init>
    24:27:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.NetherGeneratorSettings -> cbw:
    5:5:void <init>() -> <init>
    8:8:int getBedrockFloorPosition() -> u
    13:13:int getBedrockRoofPosition() -> t
net.minecraft.world.level.levelgen.NetherLevelSource -> cbx:
    double[] yOffsets -> h
    14:18:void <init>(net.minecraft.world.level.Level,net.minecraft.world.level.biome.BiomeSource,net.minecraft.world.level.levelgen.NetherGeneratorSettings) -> <init>
    22:32:void fillNoiseColumn(double[],int,int) -> a
    36:36:double[] getDepthAndScale(int,int) -> a
    41:41:double getYOffset(double,double,int) -> a
    45:58:double[] makeYOffsets() -> j
    64:73:java.util.List getMobsAt(net.minecraft.world.entity.MobCategory,net.minecraft.core.BlockPos) -> a
    78:78:int getSpawnHeight() -> b
    83:83:int getGenDepth() -> e
    88:88:int getSeaLevel() -> f
net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator -> cby:
    float[] BEARD_KERNEL -> h
    net.minecraft.world.level.block.state.BlockState AIR -> i
    int chunkHeight -> j
    int chunkWidth -> k
    int chunkCountX -> l
    int chunkCountY -> m
    int chunkCountZ -> n
    net.minecraft.world.level.levelgen.WorldgenRandom random -> e
    net.minecraft.world.level.levelgen.synth.PerlinNoise minLimitPerlinNoise -> o
    net.minecraft.world.level.levelgen.synth.PerlinNoise maxLimitPerlinNoise -> p
    net.minecraft.world.level.levelgen.synth.PerlinNoise mainPerlinNoise -> q
    net.minecraft.world.level.levelgen.synth.SurfaceNoise surfaceNoise -> r
    net.minecraft.world.level.block.state.BlockState defaultBlock -> f
    net.minecraft.world.level.block.state.BlockState defaultFluid -> g
    68:84:void <init>(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.biome.BiomeSource,int,int,int,net.minecraft.world.level.levelgen.ChunkGeneratorSettings,boolean) -> <init>
    87:115:double sampleAndClampNoise(int,int,int,double,double,double,double) -> a
    119:121:double[] makeAndFillNoiseColumn(int,int) -> b
    125:145:void fillNoiseColumn(double[],int,int,double,double,double,double,int,int) -> a
    double[] getDepthAndScale(int,int) -> a
    double getYOffset(double,double,int) -> a
    152:152:double getTopSlideStart() -> g
    156:156:double getBottomSlideStart() -> h
    161:214:int getBaseHeight(int,int,net.minecraft.world.level.levelgen.Heightmap$Types) -> a
    void fillNoiseColumn(double[],int,int) -> a
    220:220:int getNoiseSizeY() -> i
    225:251:void buildSurfaceAndBedrock(net.minecraft.server.level.WorldGenRegion,net.minecraft.world.level.chunk.ChunkAccess) -> a
    254:278:void setBedrock(net.minecraft.world.level.chunk.ChunkAccess,java.util.Random) -> a
    282:464:void fillFromNoise(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkAccess) -> b
    467:480:double getContribution(int,int,int) -> a
    484:493:double computeContribution(int,int,int) -> b
    41:48:void lambda$static$0(float[]) -> a
    40:50:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.OverworldGeneratorSettings -> cbz:
    int biomeSize -> t
    int riverSize -> u
    int fixedBiome -> v
    int seaLevel -> w
    3:10:void <init>() -> <init>
    13:13:int getBiomeSize() -> v
    17:17:int getRiverSize() -> w
    21:21:int getFixedBiome() -> x
    25:25:int getSeaLevel() -> y
    30:30:int getBedrockFloorPosition() -> u
net.minecraft.world.level.levelgen.OverworldLevelSource -> cca:
    float[] BIOME_WEIGHTS -> h
    net.minecraft.world.level.levelgen.synth.PerlinNoise depthNoise -> i
    boolean isAmplified -> j
    net.minecraft.world.level.levelgen.PhantomSpawner phantomSpawner -> k
    net.minecraft.world.level.levelgen.PatrolSpawner patrolSpawner -> l
    net.minecraft.world.entity.npc.CatSpawner catSpawner -> m
    net.minecraft.world.entity.ai.village.VillageSiege villageSiege -> n
    36:46:void <init>(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.biome.BiomeSource,net.minecraft.world.level.levelgen.OverworldGeneratorSettings) -> <init>
    50:57:void spawnOriginalMobs(net.minecraft.server.level.WorldGenRegion) -> b
    62:72:void fillNoiseColumn(double[],int,int) -> a
    76:83:double getYOffset(double,double,int) -> a
    88:130:double[] getDepthAndScale(int,int) -> a
    134:151:double getRdepth(int,int) -> c
    157:171:java.util.List getMobsAt(net.minecraft.world.entity.MobCategory,net.minecraft.core.BlockPos) -> a
    176:180:void tickCustomSpawners(net.minecraft.server.level.ServerLevel,boolean,boolean) -> a
    184:184:int getSpawnHeight() -> b
    189:189:int getSeaLevel() -> f
    26:32:void lambda$static$0(float[]) -> a
    25:25:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.PatrolSpawner -> ccb:
    int nextTick -> a
    19:19:void <init>() -> <init>
    24:98:int tick(net.minecraft.server.level.ServerLevel,boolean,boolean) -> a
    102:125:boolean spawnPatrolMember(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random,boolean) -> a
net.minecraft.world.level.levelgen.PhantomSpawner -> ccc:
    int nextTick -> a
    25:25:void <init>() -> <init>
    30:89:int tick(net.minecraft.server.level.ServerLevel,boolean,boolean) -> a
net.minecraft.world.level.levelgen.TheEndGeneratorSettings -> ccd:
    net.minecraft.core.BlockPos spawnPosition -> t
    5:5:void <init>() -> <init>
    9:10:net.minecraft.world.level.levelgen.TheEndGeneratorSettings setSpawnPosition(net.minecraft.core.BlockPos) -> a
    14:14:net.minecraft.core.BlockPos getSpawnPosition() -> v
net.minecraft.world.level.levelgen.TheEndLevelSource -> cce:
    net.minecraft.core.BlockPos dimensionSpawnPosition -> h
    12:14:void <init>(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.biome.BiomeSource,net.minecraft.world.level.levelgen.TheEndGeneratorSettings) -> <init>
    18:28:void fillNoiseColumn(double[],int,int) -> a
    32:32:double[] getDepthAndScale(int,int) -> a
    37:37:double getYOffset(double,double,int) -> a
    42:42:double getTopSlideStart() -> g
    47:47:double getBottomSlideStart() -> h
    51:51:net.minecraft.core.BlockPos getDimensionSpawnPosition() -> j
    56:56:int getSpawnHeight() -> b
    61:61:int getSeaLevel() -> f
net.minecraft.world.level.levelgen.WorldgenRandom -> ccf:
    int count -> a
    8:9:void <init>() -> <init>
    12:13:void <init>(long) -> <init>
    16:16:int getCount() -> a
    20:23:void consumeCount(int) -> a
    27:28:int next(int) -> next
    32:34:long setBaseChunkSeed(int,int) -> a
    38:44:long setDecorationSeed(long,int,int) -> a
    48:50:long setFeatureSeed(long,int,int) -> b
    54:59:long setLargeFeatureSeed(long,int,int) -> c
    63:65:long setLargeFeatureWithSalt(long,int,int,int) -> a
    69:69:java.util.Random seedSlimeChunk(int,int,long,long) -> a
net.minecraft.world.level.levelgen.carver.CanyonWorldCarver -> ccg:
    float[] rs -> m
    16:20:void <init>(java.util.function.Function) -> <init>
    24:24:boolean isStartChunk(java.util.Random,int,int,net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration) -> a
    29:43:boolean carve(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,java.util.Random,int,int,int,int,int,java.util.BitSet,net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration) -> a
    47:93:void genCanyon(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,long,int,int,int,double,double,double,float,float,float,int,int,double,java.util.BitSet) -> a
    97:97:boolean skip(double,double,double,int) -> a
    15:15:boolean isStartChunk(java.util.Random,int,int,net.minecraft.world.level.levelgen.carver.CarverConfiguration) -> a
    15:15:boolean carve(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,java.util.Random,int,int,int,int,int,java.util.BitSet,net.minecraft.world.level.levelgen.carver.CarverConfiguration) -> a
net.minecraft.world.level.levelgen.carver.CarverConfiguration -> cch:
    net.minecraft.world.level.levelgen.carver.NoneCarverConfiguration NONE -> a
    com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    7:7:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.carver.CaveWorldCarver -> cci:
    16:17:void <init>(java.util.function.Function,int) -> <init>
    21:21:boolean isStartChunk(java.util.Random,int,int,net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration) -> a
    26:55:boolean carve(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,java.util.Random,int,int,int,int,int,java.util.BitSet,net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration) -> a
    59:59:int getCaveBound() -> a
    63:67:float getThickness(java.util.Random) -> a
    71:71:double getYScale() -> b
    75:75:int getCaveY(java.util.Random) -> b
    79:83:void genRoom(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,long,int,int,int,double,double,double,float,double,java.util.BitSet) -> a
    86:128:void genTunnel(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,long,int,int,int,double,double,double,float,float,float,int,int,double,java.util.BitSet) -> a
    132:132:boolean skip(double,double,double,int) -> a
    14:14:boolean isStartChunk(java.util.Random,int,int,net.minecraft.world.level.levelgen.carver.CarverConfiguration) -> a
    14:14:boolean carve(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,java.util.Random,int,int,int,int,int,java.util.BitSet,net.minecraft.world.level.levelgen.carver.CarverConfiguration) -> a
net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver -> ccj:
    net.minecraft.world.level.levelgen.carver.WorldCarver worldCarver -> a
    net.minecraft.world.level.levelgen.carver.CarverConfiguration config -> b
    20:23:void <init>(net.minecraft.world.level.levelgen.carver.WorldCarver,net.minecraft.world.level.levelgen.carver.CarverConfiguration) -> <init>
    26:27:void <init>(net.minecraft.world.level.levelgen.carver.WorldCarver,com.mojang.datafixers.Dynamic) -> <init>
    30:32:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    37:37:boolean isStartChunk(java.util.Random,int,int) -> a
    41:41:boolean carve(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,java.util.Random,int,int,int,int,int,java.util.BitSet) -> a
    45:46:net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.carver.HellCaveWorldCarver -> cck:
    21:38:void <init>(java.util.function.Function) -> <init>
    42:42:int getCaveBound() -> a
    47:47:float getThickness(java.util.Random) -> a
    52:52:double getYScale() -> b
    57:57:int getCaveY(java.util.Random) -> b
    62:80:boolean carveBlock(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,java.util.BitSet,java.util.Random,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.core.BlockPos$MutableBlockPos,int,int,int,int,int,int,int,int,java.util.concurrent.atomic.AtomicBoolean) -> a
net.minecraft.world.level.levelgen.carver.NoneCarverConfiguration -> ccl:
    6:6:void <init>() -> <init>
    9:9:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    13:13:net.minecraft.world.level.levelgen.carver.NoneCarverConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.carver.UnderwaterCanyonWorldCarver -> ccm:
    18:57:void <init>(java.util.function.Function) -> <init>
    61:61:boolean hasWater(net.minecraft.world.level.chunk.ChunkAccess,int,int,int,int,int,int,int,int) -> a
    66:66:boolean carveBlock(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,java.util.BitSet,java.util.Random,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.core.BlockPos$MutableBlockPos,int,int,int,int,int,int,int,int,java.util.concurrent.atomic.AtomicBoolean) -> a
net.minecraft.world.level.levelgen.carver.UnderwaterCaveWorldCarver -> ccn:
    21:61:void <init>(java.util.function.Function) -> <init>
    65:65:boolean hasWater(net.minecraft.world.level.chunk.ChunkAccess,int,int,int,int,int,int,int,int) -> a
    70:70:boolean carveBlock(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,java.util.BitSet,java.util.Random,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.core.BlockPos$MutableBlockPos,int,int,int,int,int,int,int,int,java.util.concurrent.atomic.AtomicBoolean) -> a
    74:125:boolean carveBlock(net.minecraft.world.level.levelgen.carver.WorldCarver,net.minecraft.world.level.chunk.ChunkAccess,java.util.BitSet,java.util.Random,net.minecraft.core.BlockPos$MutableBlockPos,int,int,int,int,int,int,int,int) -> a
net.minecraft.world.level.levelgen.carver.WorldCarver -> cco:
    net.minecraft.world.level.levelgen.carver.WorldCarver CAVE -> a
    net.minecraft.world.level.levelgen.carver.WorldCarver HELL_CAVE -> b
    net.minecraft.world.level.levelgen.carver.WorldCarver CANYON -> c
    net.minecraft.world.level.levelgen.carver.WorldCarver UNDERWATER_CANYON -> d
    net.minecraft.world.level.levelgen.carver.WorldCarver UNDERWATER_CAVE -> e
    net.minecraft.world.level.block.state.BlockState AIR -> f
    net.minecraft.world.level.block.state.BlockState CAVE_AIR -> g
    net.minecraft.world.level.material.FluidState WATER -> h
    net.minecraft.world.level.material.FluidState LAVA -> i
    java.util.Set replaceableBlocks -> j
    java.util.Set liquids -> k
    java.util.function.Function configurationFactory -> m
    int genHeight -> l
    40:40:net.minecraft.world.level.levelgen.carver.WorldCarver register(java.lang.String,net.minecraft.world.level.levelgen.carver.WorldCarver) -> a
    43:86:void <init>(java.util.function.Function,int) -> <init>
    89:89:net.minecraft.world.level.levelgen.carver.CarverConfiguration createSettings(com.mojang.datafixers.Dynamic) -> a
    93:93:int getRange() -> c
    97:147:boolean carveSphere(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,long,int,int,int,double,double,double,double,double,java.util.BitSet) -> a
    151:182:boolean carveBlock(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,java.util.BitSet,java.util.Random,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.core.BlockPos$MutableBlockPos,int,int,int,int,int,int,int,int,java.util.concurrent.atomic.AtomicBoolean) -> a
    boolean carve(net.minecraft.world.level.chunk.ChunkAccess,java.util.function.Function,java.util.Random,int,int,int,int,int,java.util.BitSet,net.minecraft.world.level.levelgen.carver.CarverConfiguration) -> a
    boolean isStartChunk(java.util.Random,int,int,net.minecraft.world.level.levelgen.carver.CarverConfiguration) -> a
    190:190:boolean canReplaceBlock(net.minecraft.world.level.block.state.BlockState) -> a
    194:195:boolean canReplaceBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState) -> a
    199:215:boolean hasWater(net.minecraft.world.level.chunk.ChunkAccess,int,int,int,int,int,int,int,int) -> a
    219:219:boolean isEdge(int,int,int,int,int,int) -> a
    223:231:boolean canReach(int,int,double,double,int,int,float) -> a
    boolean skip(double,double,double,int) -> a
    28:37:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.carver.package-info -> ccp:
net.minecraft.world.level.levelgen.feature.AbstractFlowerFeature -> ccq:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:34:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    boolean isValid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    int getCount(net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    net.minecraft.core.BlockPos getPos(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    net.minecraft.world.level.block.state.BlockState getRandomFlower(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> b
net.minecraft.world.level.levelgen.feature.AbstractHugeMushroomFeature -> ccr:
    20:21:void <init>(java.util.function.Function) -> <init>
    24:30:void placeTrunk(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration,int,net.minecraft.core.BlockPos$MutableBlockPos) -> a
    33:37:int getTreeHeight(java.util.Random) -> a
    41:62:boolean isValidPosition(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,int,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration) -> a
    67:76:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration) -> a
    int getTreeRadiusForHeight(int,int,int,int) -> a
    void makeCap(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos,int,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration) -> a
    18:18:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.AbstractSmallTreeFeature -> ccs:
    18:19:void <init>(java.util.function.Function) -> <init>
    22:25:void placeTrunk(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,int,net.minecraft.core.BlockPos,int,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    30:68:java.util.Optional getProjectedOrigin(net.minecraft.world.level.LevelSimulatedRW,int,int,int,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.AbstractTreeFeature -> cct:
    36:37:void <init>(java.util.function.Function) -> <init>
    40:40:boolean isFree(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos) -> a
    53:53:boolean isAir(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos) -> b
    57:57:boolean isDirt(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos) -> c
    66:66:boolean isVine(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos) -> d
    70:70:boolean isBlockWater(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos) -> e
    74:74:boolean isAirOrLeaves(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos) -> f
    78:78:boolean isGrassOrDirt(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos) -> g
    82:82:boolean isGrassOrDirtOrFarmland(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos) -> h
    89:89:boolean isReplaceablePlant(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos) -> i
    96:99:void setDirtAt(net.minecraft.world.level.LevelSimulatedRW,net.minecraft.core.BlockPos) -> a
    102:107:boolean placeLog(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
    111:116:boolean placeLeaf(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> b
    121:122:void setBlock(net.minecraft.world.level.LevelWriter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    125:127:void setBlock(net.minecraft.world.level.LevelWriter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    130:131:void setBlockKnownShape(net.minecraft.world.level.LevelWriter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    135:157:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
    161:222:net.minecraft.world.phys.shapes.DiscreteVoxelShape updateLeaves(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Set,java.util.Set) -> a
    227:230:void simulate(net.minecraft.server.level.FeatureSimulator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
    boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
    34:34:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    34:34:void simulate(net.minecraft.server.level.FeatureSimulator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    151:151:void lambda$place$8(net.minecraft.world.level.LevelAccessor,java.util.Random,java.util.List,java.util.List,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator) -> a
    90:91:boolean lambda$isReplaceablePlant$7(net.minecraft.world.level.block.state.BlockState) -> a
    83:84:boolean lambda$isGrassOrDirtOrFarmland$6(net.minecraft.world.level.block.state.BlockState) -> b
    78:78:boolean lambda$isGrassOrDirt$5(net.minecraft.world.level.block.state.BlockState) -> c
    74:74:boolean lambda$isAirOrLeaves$4(net.minecraft.world.level.block.state.BlockState) -> d
    70:70:boolean lambda$isBlockWater$3(net.minecraft.world.level.block.state.BlockState) -> e
    66:66:boolean lambda$isVine$2(net.minecraft.world.level.block.state.BlockState) -> f
    58:59:boolean lambda$isDirt$1(net.minecraft.world.level.block.state.BlockState) -> g
    41:46:boolean lambda$isFree$0(net.minecraft.world.level.block.state.BlockState) -> h
net.minecraft.world.level.levelgen.feature.AcaciaFeature -> ccu:
    20:21:void <init>(java.util.function.Function) -> <init>
    25:86:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    18:18:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.BambooFeature -> ccv:
    net.minecraft.world.level.block.state.BlockState BAMBOO_TRUNK -> a
    net.minecraft.world.level.block.state.BlockState BAMBOO_FINAL_LARGE -> aq
    net.minecraft.world.level.block.state.BlockState BAMBOO_TOP_LARGE -> ar
    net.minecraft.world.level.block.state.BlockState BAMBOO_TOP_SMALL -> as
    27:28:void <init>(java.util.function.Function) -> <init>
    32:77:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration) -> a
    20:20:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    21:24:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.BlockBlobFeature -> ccw:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:52:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.BlockBlobConfiguration) -> a
    14:14:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.BlockPileFeature -> ccx:
    19:20:void <init>(java.util.function.Function) -> <init>
    24:41:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration) -> a
    45:51:boolean mayPlaceOn(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,java.util.Random) -> a
    55:58:void tryPlaceBlock(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration) -> a
    17:17:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.BlueIceFeature -> ccy:
    20:21:void <init>(java.util.function.Function) -> <init>
    25:74:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    18:18:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.BonusChestFeature -> ccz:
    27:28:void <init>(java.util.function.Function) -> <init>
    32:62:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    25:25:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.BuriedTreasureFeature -> cda:
    22:23:void <init>(java.util.function.Function) -> <init>
    27:32:boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    37:37:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    42:42:java.lang.String getFeatureName() -> b
    47:47:int getLookupRange() -> c
net.minecraft.world.level.levelgen.feature.BuriedTreasureFeature$BuriedTreasureStart -> cda$a:
    52:53:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    57:64:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
    68:68:net.minecraft.core.BlockPos getLocatePos() -> a
net.minecraft.world.level.levelgen.feature.ChorusPlantFeature -> cdb:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:26:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    15:15:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.ConfiguredFeature -> cdc:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.level.levelgen.feature.Feature feature -> b
    net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration config -> c
    27:30:void <init>(net.minecraft.world.level.levelgen.feature.Feature,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> <init>
    33:34:void <init>(net.minecraft.world.level.levelgen.feature.Feature,com.mojang.datafixers.Dynamic) -> <init>
    37:38:net.minecraft.world.level.levelgen.feature.ConfiguredFeature decorated(net.minecraft.world.level.levelgen.placement.ConfiguredDecorator) -> a
    42:42:net.minecraft.world.level.levelgen.feature.WeightedConfiguredFeature weighted(float) -> a
    46:48:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    53:53:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos) -> a
    57:65:net.minecraft.world.level.levelgen.feature.ConfiguredFeature deserialize(com.mojang.datafixers.Dynamic) -> a
    22:22:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.CoralClawFeature -> cdd:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:74:boolean placeFeature(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.level.levelgen.feature.CoralFeature -> cde:
    22:23:void <init>(java.util.function.Function) -> <init>
    27:28:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    boolean placeFeature(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    34:58:boolean placeCoralBlock(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    20:20:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.CoralMushroomFeature -> cdf:
    15:16:void <init>(java.util.function.Function) -> <init>
    20:65:boolean placeFeature(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.level.levelgen.feature.CoralTreeFeature -> cdg:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:59:boolean placeFeature(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.level.levelgen.feature.DarkOakFeature -> cdh:
    21:22:void <init>(java.util.function.Function) -> <init>
    26:141:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration) -> a
    145:167:boolean canPlaceTreeOfHeight(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos,int) -> a
    19:19:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.DecoratedFeature -> cdi:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:21:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.DecoratedFeatureConfiguration) -> a
    26:26:java.lang.String toString() -> toString
    14:14:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.DecoratedFlowerFeature -> cdj:
    10:11:void <init>(java.util.function.Function) -> <init>
net.minecraft.world.level.levelgen.feature.DefaultFlowerFeature -> cdk:
    14:15:void <init>(java.util.function.Function) -> <init>
    19:19:boolean isValid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration) -> a
    24:24:int getCount(net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration) -> a
    29:29:net.minecraft.core.BlockPos getPos(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration) -> a
    34:34:net.minecraft.world.level.block.state.BlockState getRandomFlower(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration) -> b
    12:12:net.minecraft.world.level.block.state.BlockState getRandomFlower(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> b
    12:12:net.minecraft.core.BlockPos getPos(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    12:12:int getCount(net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    12:12:boolean isValid(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.DesertPyramidFeature -> cdl:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:21:java.lang.String getFeatureName() -> b
    26:26:int getLookupRange() -> c
    31:31:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    36:36:int getRandomSalt() -> d
net.minecraft.world.level.levelgen.feature.DesertPyramidFeature$FeatureStart -> cdl$a:
    41:42:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    46:49:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.DesertVillagePools -> cdm:
    22:22:void <init>() -> <init>
    237:237:void bootstrap() -> a
    24:234:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.DesertWellFeature -> cdn:
    net.minecraft.world.level.block.state.predicate.BlockStatePredicate IS_SAND -> a
    net.minecraft.world.level.block.state.BlockState sandSlab -> aq
    net.minecraft.world.level.block.state.BlockState sandstone -> ar
    net.minecraft.world.level.block.state.BlockState water -> as
    21:27:void <init>(java.util.function.Function) -> <init>
    31:99:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    18:18:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.DiskReplaceFeature -> cdo:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:51:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration) -> a
    16:16:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.EndCityFeature -> cdp:
    25:26:void <init>(java.util.function.Function) -> <init>
    30:49:net.minecraft.world.level.ChunkPos getPotentialFeatureChunkFromLocationWithOffset(net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,int,int) -> a
    54:70:boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    75:75:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    80:80:java.lang.String getFeatureName() -> b
    85:85:int getLookupRange() -> c
    89:110:int getYPositionForFeature(int,int,net.minecraft.world.level.chunk.ChunkGenerator) -> b
    21:21:int access$000(int,int,net.minecraft.world.level.chunk.ChunkGenerator) -> a
net.minecraft.world.level.levelgen.feature.EndCityFeature$EndCityStart -> cdp$a:
    115:116:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    120:133:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.EndGatewayFeature -> cdq:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:50:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration) -> a
    16:16:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    33:39:void lambda$place$0(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.feature.EndIslandFeature -> cdr:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:36:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    15:15:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.EndPodiumFeature -> cds:
    net.minecraft.core.BlockPos END_PODIUM_LOCATION -> a
    boolean active -> aq
    25:27:void <init>(boolean) -> <init>
    31:68:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    14:14:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    20:20:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.FancyTreeFeature -> cdt:
    40:41:void <init>(java.util.function.Function) -> <init>
    44:53:void crossSection(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,float,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    57:71:float treeShape(int,int) -> a
    75:80:float foliageShape(int) -> a
    85:88:void foliageCluster(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    92:115:int makeLimb(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,boolean,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    119:129:int getSteps(net.minecraft.core.BlockPos) -> a
    133:145:net.minecraft.core.Direction$Axis getLogAxis(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    149:154:void makeFoliage(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,int,net.minecraft.core.BlockPos,java.util.List,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    157:157:boolean trimBranches(int,int) -> b
    161:162:void makeTrunk(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,int,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    165:173:void makeBranches(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,int,net.minecraft.core.BlockPos,java.util.List,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> b
    178:244:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    248:261:int checkLocation(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,int,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> b
    19:19:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.FancyTreeFeature$FoliageCoords -> cdt$a:
    int branchBase -> b
    30:32:void <init>(net.minecraft.core.BlockPos,int) -> <init>
    35:35:int getBranchBase() -> r
net.minecraft.world.level.levelgen.feature.Feature -> cdu:
    net.minecraft.world.level.levelgen.feature.StructureFeature PILLAGER_OUTPOST -> b
    net.minecraft.world.level.levelgen.feature.StructureFeature MINESHAFT -> c
    net.minecraft.world.level.levelgen.feature.StructureFeature WOODLAND_MANSION -> d
    net.minecraft.world.level.levelgen.feature.StructureFeature JUNGLE_TEMPLE -> e
    net.minecraft.world.level.levelgen.feature.StructureFeature DESERT_PYRAMID -> f
    net.minecraft.world.level.levelgen.feature.StructureFeature IGLOO -> g
    net.minecraft.world.level.levelgen.feature.StructureFeature SHIPWRECK -> h
    net.minecraft.world.level.levelgen.feature.SwamplandHutFeature SWAMP_HUT -> i
    net.minecraft.world.level.levelgen.feature.StructureFeature STRONGHOLD -> j
    net.minecraft.world.level.levelgen.feature.StructureFeature OCEAN_MONUMENT -> k
    net.minecraft.world.level.levelgen.feature.StructureFeature OCEAN_RUIN -> l
    net.minecraft.world.level.levelgen.feature.StructureFeature NETHER_BRIDGE -> m
    net.minecraft.world.level.levelgen.feature.StructureFeature END_CITY -> n
    net.minecraft.world.level.levelgen.feature.StructureFeature BURIED_TREASURE -> o
    net.minecraft.world.level.levelgen.feature.StructureFeature VILLAGE -> p
    net.minecraft.world.level.levelgen.feature.Feature NO_OP -> q
    net.minecraft.world.level.levelgen.feature.Feature NORMAL_TREE -> r
    net.minecraft.world.level.levelgen.feature.Feature ACACIA_TREE -> s
    net.minecraft.world.level.levelgen.feature.Feature FANCY_TREE -> t
    net.minecraft.world.level.levelgen.feature.Feature JUNGLE_GROUND_BUSH -> u
    net.minecraft.world.level.levelgen.feature.Feature DARK_OAK_TREE -> v
    net.minecraft.world.level.levelgen.feature.Feature MEGA_JUNGLE_TREE -> w
    net.minecraft.world.level.levelgen.feature.Feature MEGA_SPRUCE_TREE -> x
    net.minecraft.world.level.levelgen.feature.AbstractFlowerFeature FLOWER -> y
    net.minecraft.world.level.levelgen.feature.Feature RANDOM_PATCH -> z
    net.minecraft.world.level.levelgen.feature.Feature BLOCK_PILE -> A
    net.minecraft.world.level.levelgen.feature.Feature SPRING -> B
    net.minecraft.world.level.levelgen.feature.Feature CHORUS_PLANT -> C
    net.minecraft.world.level.levelgen.feature.Feature EMERALD_ORE -> D
    net.minecraft.world.level.levelgen.feature.Feature VOID_START_PLATFORM -> E
    net.minecraft.world.level.levelgen.feature.Feature DESERT_WELL -> F
    net.minecraft.world.level.levelgen.feature.Feature FOSSIL -> G
    net.minecraft.world.level.levelgen.feature.Feature HUGE_RED_MUSHROOM -> H
    net.minecraft.world.level.levelgen.feature.Feature HUGE_BROWN_MUSHROOM -> I
    net.minecraft.world.level.levelgen.feature.Feature ICE_SPIKE -> J
    net.minecraft.world.level.levelgen.feature.Feature GLOWSTONE_BLOB -> K
    net.minecraft.world.level.levelgen.feature.Feature FREEZE_TOP_LAYER -> L
    net.minecraft.world.level.levelgen.feature.Feature VINES -> M
    net.minecraft.world.level.levelgen.feature.Feature MONSTER_ROOM -> N
    net.minecraft.world.level.levelgen.feature.Feature BLUE_ICE -> O
    net.minecraft.world.level.levelgen.feature.Feature ICEBERG -> P
    net.minecraft.world.level.levelgen.feature.Feature FOREST_ROCK -> Q
    net.minecraft.world.level.levelgen.feature.Feature DISK -> R
    net.minecraft.world.level.levelgen.feature.Feature ICE_PATCH -> S
    net.minecraft.world.level.levelgen.feature.Feature LAKE -> T
    net.minecraft.world.level.levelgen.feature.Feature ORE -> U
    net.minecraft.world.level.levelgen.feature.Feature END_SPIKE -> V
    net.minecraft.world.level.levelgen.feature.Feature END_ISLAND -> W
    net.minecraft.world.level.levelgen.feature.Feature END_GATEWAY -> X
    net.minecraft.world.level.levelgen.feature.Feature SEAGRASS -> Y
    net.minecraft.world.level.levelgen.feature.Feature KELP -> Z
    net.minecraft.world.level.levelgen.feature.Feature CORAL_TREE -> aa
    net.minecraft.world.level.levelgen.feature.Feature CORAL_MUSHROOM -> ab
    net.minecraft.world.level.levelgen.feature.Feature CORAL_CLAW -> ac
    net.minecraft.world.level.levelgen.feature.Feature SEA_PICKLE -> ad
    net.minecraft.world.level.levelgen.feature.Feature SIMPLE_BLOCK -> ae
    net.minecraft.world.level.levelgen.feature.Feature BAMBOO -> af
    net.minecraft.world.level.levelgen.feature.Feature FILL_LAYER -> ag
    net.minecraft.world.level.levelgen.feature.BonusChestFeature BONUS_CHEST -> ah
    net.minecraft.world.level.levelgen.feature.Feature RANDOM_RANDOM_SELECTOR -> ai
    net.minecraft.world.level.levelgen.feature.Feature RANDOM_SELECTOR -> aj
    net.minecraft.world.level.levelgen.feature.Feature SIMPLE_RANDOM_SELECTOR -> ak
    net.minecraft.world.level.levelgen.feature.Feature RANDOM_BOOLEAN_SELECTOR -> al
    net.minecraft.world.level.levelgen.feature.Feature DECORATED -> am
    net.minecraft.world.level.levelgen.feature.Feature DECORATED_FLOWER -> an
    com.google.common.collect.BiMap STRUCTURES_REGISTRY -> ao
    java.util.List NOISE_AFFECTING_FEATURES -> ap
    java.util.function.Function configurationFactory -> a
    133:133:net.minecraft.world.level.levelgen.feature.Feature register(java.lang.String,net.minecraft.world.level.levelgen.feature.Feature) -> a
    162:162:boolean isInsideStructure(net.minecraft.world.level.LevelAccessor,java.lang.String,net.minecraft.core.BlockPos) -> a
    165:167:void <init>(java.util.function.Function) -> <init>
    170:170:net.minecraft.world.level.levelgen.feature.ConfiguredFeature configured(com.mojang.datafixers.Dynamic) -> a
    174:174:net.minecraft.world.level.levelgen.feature.ConfiguredFeature configured(net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> b
    178:178:net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration createSettings(com.mojang.datafixers.Dynamic) -> b
    182:183:void setBlock(net.minecraft.world.level.LevelWriter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    188:188:java.util.List getSpecialEnemies() -> e
    192:192:java.util.List getSpecialAnimals() -> f
    196:196:boolean isStone(net.minecraft.world.level.block.Block) -> a
    203:203:boolean isDirt(net.minecraft.world.level.block.Block) -> b
    137:152:void lambda$static$0(com.google.common.collect.HashBiMap) -> a
    59:154:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.FillLayerFeature -> cdv:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:35:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.LayerConfiguration) -> a
    14:14:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.FossilFeature -> cdw:
    net.minecraft.resources.ResourceLocation SPINE_1 -> a
    net.minecraft.resources.ResourceLocation SPINE_2 -> aq
    net.minecraft.resources.ResourceLocation SPINE_3 -> ar
    net.minecraft.resources.ResourceLocation SPINE_4 -> as
    net.minecraft.resources.ResourceLocation SPINE_1_COAL -> at
    net.minecraft.resources.ResourceLocation SPINE_2_COAL -> au
    net.minecraft.resources.ResourceLocation SPINE_3_COAL -> av
    net.minecraft.resources.ResourceLocation SPINE_4_COAL -> aw
    net.minecraft.resources.ResourceLocation SKULL_1 -> ax
    net.minecraft.resources.ResourceLocation SKULL_2 -> ay
    net.minecraft.resources.ResourceLocation SKULL_3 -> az
    net.minecraft.resources.ResourceLocation SKULL_4 -> aA
    net.minecraft.resources.ResourceLocation SKULL_1_COAL -> aB
    net.minecraft.resources.ResourceLocation SKULL_2_COAL -> aC
    net.minecraft.resources.ResourceLocation SKULL_3_COAL -> aD
    net.minecraft.resources.ResourceLocation SKULL_4_COAL -> aE
    net.minecraft.resources.ResourceLocation[] fossils -> aF
    net.minecraft.resources.ResourceLocation[] fossilsCoal -> aG
    71:72:void <init>(java.util.function.Function) -> <init>
    77:114:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    27:27:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    28:59:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.GlowstoneFeature -> cdx:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:53:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    16:16:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.GroundBushFeature -> cdy:
    16:17:void <init>(java.util.function.Function) -> <init>
    23:42:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.HugeBrownMushroomFeature -> cdz:
    14:15:void <init>(java.util.function.Function) -> <init>
    19:48:void makeCap(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos,int,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration) -> a
    52:52:int getTreeRadiusForHeight(int,int,int,int) -> a
net.minecraft.world.level.levelgen.feature.HugeRedMushroomFeature -> cea:
    14:15:void <init>(java.util.function.Function) -> <init>
    19:50:void makeCap(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos,int,net.minecraft.core.BlockPos$MutableBlockPos,net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration) -> a
    54:60:int getTreeRadiusForHeight(int,int,int,int) -> a
net.minecraft.world.level.levelgen.feature.IcePatchFeature -> ceb:
    net.minecraft.world.level.block.Block block -> a
    16:20:void <init>(java.util.function.Function) -> <init>
    24:51:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureRadiusConfiguration) -> a
    15:15:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.IceSpikeFeature -> cec:
    19:20:void <init>(java.util.function.Function) -> <init>
    24:107:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    17:17:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.IcebergFeature -> ced:
    21:22:void <init>(java.util.function.Function) -> <init>
    26:82:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration) -> a
    86:114:void generateCutOut(java.util.Random,net.minecraft.world.level.LevelAccessor,int,int,net.minecraft.core.BlockPos,boolean,int,double,int) -> a
    117:137:void carve(int,int,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,boolean,double,net.minecraft.core.BlockPos,int,int) -> a
    140:143:void removeFloatingSnowLayer(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    146:155:void generateIcebergBlock(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos,int,int,int,int,int,int,boolean,int,double,boolean,net.minecraft.world.level.block.state.BlockState) -> a
    158:169:void setIcebergBlock(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,java.util.Random,int,int,boolean,boolean,net.minecraft.world.level.block.state.BlockState) -> a
    172:177:int getEllipseC(int,int,int) -> a
    181:182:double signedDistanceCircle(int,int,net.minecraft.core.BlockPos,int,java.util.Random) -> a
    186:186:double signedDistanceEllipse(int,int,net.minecraft.core.BlockPos,int,int,double) -> a
    190:198:int heightDependentRadiusRound(java.util.Random,int,int,int) -> a
    202:204:int heightDependentRadiusEllipse(int,int,int) -> b
    208:210:int heightDependentRadiusSteep(java.util.Random,int,int,int) -> b
    214:214:boolean isIcebergBlock(net.minecraft.world.level.block.Block) -> c
    218:218:boolean belowIsAir(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    222:255:void smooth(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,int,int,boolean,int) -> a
    19:19:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.IglooFeature -> cee:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:23:java.lang.String getFeatureName() -> b
    28:28:int getLookupRange() -> c
    33:33:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    38:38:int getRandomSalt() -> d
net.minecraft.world.level.levelgen.feature.IglooFeature$FeatureStart -> cee$a:
    43:44:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    48:57:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.JunglePyramidFeature -> cef:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:21:java.lang.String getFeatureName() -> b
    26:26:int getLookupRange() -> c
    31:31:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    36:36:int getRandomSalt() -> d
net.minecraft.world.level.levelgen.feature.JunglePyramidFeature$FeatureStart -> cef$a:
    41:42:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    46:49:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.KelpFeature -> ceg:
    20:21:void <init>(java.util.function.Function) -> <init>
    25:54:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    18:18:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.LakeFeature -> ceh:
    net.minecraft.world.level.block.state.BlockState AIR -> a
    25:26:void <init>(java.util.function.Function) -> <init>
    30:160:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration) -> a
    21:21:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    22:22:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.MegaJungleTreeFeature -> cei:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:55:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration) -> a
    59:63:void createCrown(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,int,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> c
    15:15:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.MegaPineTreeFeature -> cej:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:28:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration) -> a
    32:41:void createCrown(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,int,int,int,int,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration) -> a
    14:14:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.MegaTreeFeature -> cek:
    19:20:void <init>(java.util.function.Function) -> <init>
    23:27:int calcTreeHeigth(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration) -> a
    31:54:boolean checkIsFree(net.minecraft.world.level.LevelSimulatedReader,net.minecraft.core.BlockPos,int) -> a
    58:68:boolean makeDirtFloor(net.minecraft.world.level.LevelSimulatedRW,net.minecraft.core.BlockPos) -> b
    72:72:boolean prepareTree(net.minecraft.world.level.LevelSimulatedRW,net.minecraft.core.BlockPos,int) -> a
    76:92:void placeDoubleTrunkLeaves(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,int,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
    95:106:void placeSingleTrunkLeaves(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,int,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> b
    109:134:void placeTrunk(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,int,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.MineshaftFeature -> cel:
    23:24:void <init>(java.util.function.Function) -> <init>
    28:35:boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    40:40:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    45:45:java.lang.String getFeatureName() -> b
    50:50:int getLookupRange() -> c
net.minecraft.world.level.levelgen.feature.MineshaftFeature$MineShaftStart -> cel$a:
    83:84:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    88:108:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type -> cel$b:
    net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type NORMAL -> a
    net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type MESA -> b
    java.util.Map BY_NAME -> c
    java.lang.String name -> d
    net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type[] $VALUES -> e
    53:53:net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type[] values() -> values
    53:53:net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type valueOf(java.lang.String) -> valueOf
    61:63:void <init>(java.lang.String,int,java.lang.String) -> <init>
    66:66:java.lang.String getName() -> a
    70:70:net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type byName(java.lang.String) -> a
    74:77:net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type byId(int) -> a
    58:58:net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type lambda$static$0(net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type) -> a
    53:58:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.MonsterRoomFeature -> cem:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.entity.EntityType[] MOBS -> aq
    net.minecraft.world.level.block.state.BlockState AIR -> ar
    32:33:void <init>(java.util.function.Function) -> <init>
    37:141:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    145:145:net.minecraft.world.entity.EntityType randomEntityId(java.util.Random) -> a
    26:26:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    27:29:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.NetherFortressFeature -> cen:
    java.util.List FORTRESS_ENEMIES -> a
    30:31:void <init>(java.util.function.Function) -> <init>
    35:51:boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    56:56:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    61:61:java.lang.String getFeatureName() -> b
    66:66:int getLookupRange() -> c
    71:71:java.util.List getSpecialEnemies() -> e
    21:21:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.NetherFortressFeature$NetherBridgeStart -> cen$a:
    76:77:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    81:94:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.NoOpFeature -> ceo:
    15:16:void <init>(java.util.function.Function) -> <init>
    20:20:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    13:13:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.OceanMonumentFeature -> cep:
    java.util.List MONUMENT_ENEMIES -> a
    30:31:void <init>(java.util.function.Function) -> <init>
    35:54:net.minecraft.world.level.ChunkPos getPotentialFeatureChunkFromLocationWithOffset(net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,int,int) -> a
    59:79:boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    84:84:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    122:122:java.lang.String getFeatureName() -> b
    127:127:int getLookupRange() -> c
    132:132:java.util.List getSpecialEnemies() -> e
    27:27:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.OceanMonumentFeature$OceanMonumentStart -> cep$a:
    boolean isCreated -> e
    91:92:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    96:97:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
    100:108:void generatePieces(int,int) -> b
    112:117:void postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.feature.OreFeature -> ceq:
    19:20:void <init>(java.util.function.Function) -> <init>
    24:52:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration) -> a
    56:149:boolean doPlace(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration,double,double,double,double,double,double,int,int,int,int,int) -> a
    17:17:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.PillagerOutpostFeature -> cer:
    java.util.List OUTPOST_ENEMIES -> a
    25:26:void <init>(java.util.function.Function) -> <init>
    30:30:java.lang.String getFeatureName() -> b
    35:35:int getLookupRange() -> c
    40:40:java.util.List getSpecialEnemies() -> e
    45:71:boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    76:76:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    81:81:int getRandomSalt() -> d
    22:22:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.PillagerOutpostFeature$FeatureStart -> cer$a:
    86:87:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    91:95:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.PlainVillagePools -> ces:
    24:24:void <init>() -> <init>
    381:381:void bootstrap() -> a
    26:378:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.RandomBooleanSelectorFeature -> cet:
    15:16:void <init>(java.util.function.Function) -> <init>
    20:24:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration) -> a
    13:13:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.RandomPatchFeature -> ceu:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:49:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration) -> a
    16:16:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.RandomRandomFeature -> cev:
    15:16:void <init>(java.util.function.Function) -> <init>
    20:29:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.RandomRandomFeatureConfiguration) -> a
    13:13:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.RandomScatteredFeature -> cew:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:40:net.minecraft.world.level.ChunkPos getPotentialFeatureChunkFromLocationWithOffset(net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,int,int) -> a
    45:53:boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    57:57:int getSpacing(net.minecraft.world.level.chunk.ChunkGenerator) -> a
    61:61:int getSeparation(net.minecraft.world.level.chunk.ChunkGenerator) -> b
    int getRandomSalt() -> d
net.minecraft.world.level.levelgen.feature.RandomSelectorFeature -> cex:
    15:16:void <init>(java.util.function.Function) -> <init>
    20:25:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration) -> a
    13:13:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.ReplaceBlockFeature -> cey:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:24:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration) -> a
    14:14:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.SavannaVillagePools -> cez:
    24:24:void <init>() -> <init>
    291:291:void bootstrap() -> a
    26:288:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.SeaPickleFeature -> cfa:
    19:20:void <init>(java.util.function.Function) -> <init>
    24:37:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.CountFeatureConfiguration) -> a
    17:17:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.SeagrassFeature -> cfb:
    21:22:void <init>(java.util.function.Function) -> <init>
    26:51:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.SeagrassFeatureConfiguration) -> a
    19:19:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.ShipwreckFeature -> cfc:
    20:21:void <init>(java.util.function.Function) -> <init>
    25:25:java.lang.String getFeatureName() -> b
    30:30:int getLookupRange() -> c
    35:35:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    40:40:int getRandomSalt() -> d
    45:45:int getSpacing(net.minecraft.world.level.chunk.ChunkGenerator) -> a
    50:50:int getSeparation(net.minecraft.world.level.chunk.ChunkGenerator) -> b
net.minecraft.world.level.levelgen.feature.ShipwreckFeature$FeatureStart -> cfc$a:
    55:56:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    60:67:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.SimpleBlockFeature -> cfd:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:25:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration) -> a
    14:14:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.SimpleRandomSelectorFeature -> cfe:
    15:16:void <init>(java.util.function.Function) -> <init>
    20:22:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.SimpleRandomFeatureConfiguration) -> a
    13:13:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.SimulatedFeature -> cff:
    void simulate(net.minecraft.server.level.FeatureSimulator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.SnowAndFreezeFeature -> cfg:
    22:23:void <init>(java.util.function.Function) -> <init>
    27:54:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    20:20:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.SnowyVillagePools -> cfh:
    24:24:void <init>() -> <init>
    271:271:void bootstrap() -> a
    26:268:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.SpikeFeature -> cfi:
    com.google.common.cache.LoadingCache SPIKE_CACHE -> a
    38:39:void <init>(java.util.function.Function) -> <init>
    42:44:java.util.List getSpikesForLevel(net.minecraft.world.level.LevelAccessor) -> a
    49:60:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration) -> a
    64:109:void placeSpike(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration,net.minecraft.world.level.levelgen.feature.SpikeFeature$EndSpike) -> a
    32:32:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    35:35:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.SpikeFeature$1 -> cfi$1:
net.minecraft.world.level.levelgen.feature.SpikeFeature$EndSpike -> cfi$a:
    int centerX -> a
    int centerZ -> b
    int radius -> c
    int height -> d
    boolean guarded -> e
    net.minecraft.world.phys.AABB topBoundingBox -> f
    119:127:void <init>(int,int,int,int,boolean) -> <init>
    130:131:boolean isCenterWithinChunk(net.minecraft.core.BlockPos) -> a
    135:135:int getCenterX() -> a
    139:139:int getCenterZ() -> b
    143:143:int getRadius() -> c
    147:147:int getHeight() -> d
    151:151:boolean isGuarded() -> e
    155:155:net.minecraft.world.phys.AABB getTopBoundingBox() -> f
    159:165:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    169:174:net.minecraft.world.level.levelgen.feature.SpikeFeature$EndSpike deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.SpikeFeature$SpikeCacheLoader -> cfi$b:
    179:179:void <init>() -> <init>
    182:195:java.util.List load(java.lang.Long) -> a
    179:179:java.lang.Object load(java.lang.Object) -> load
    179:179:void <init>(net.minecraft.world.level.levelgen.feature.SpikeFeature$1) -> <init>
net.minecraft.world.level.levelgen.feature.SpringFeature -> cfj:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:76:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration) -> a
    15:15:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
net.minecraft.world.level.levelgen.feature.StrongholdFeature -> cfk:
    boolean isSpotSelected -> a
    net.minecraft.world.level.ChunkPos[] strongholdPos -> aq
    java.util.List discoveredStarts -> ar
    long currentSeed -> as
    29:34:void <init>(java.util.function.Function) -> <init>
    39:52:boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    56:59:void reset() -> d
    63:63:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    108:108:java.lang.String getFeatureName() -> b
    113:113:int getLookupRange() -> c
    119:148:net.minecraft.core.BlockPos getNearestGeneratedFeature(net.minecraft.world.level.Level,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPos,int,boolean) -> a
    152:211:void generatePositions(net.minecraft.world.level.chunk.ChunkGenerator) -> a
    25:25:java.util.List access$000(net.minecraft.world.level.levelgen.feature.StrongholdFeature) -> a
net.minecraft.world.level.levelgen.feature.StrongholdFeature$StrongholdStart -> cfk$a:
    68:69:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    73:103:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.StructureFeature -> cfl:
    org.apache.logging.log4j.Logger LOGGER -> a
    54:55:void <init>(java.util.function.Function) -> <init>
    59:59:net.minecraft.world.level.levelgen.feature.ConfiguredFeature configured(net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> b
    64:83:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    87:102:net.minecraft.world.level.levelgen.structure.StructureStart getStructureAt(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,boolean) -> a
    106:106:boolean isInsideBoundingFeature(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    113:113:boolean isInsideFeature(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> b
    118:158:net.minecraft.core.BlockPos getNearestGeneratedFeature(net.minecraft.world.level.Level,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPos,int,boolean) -> a
    162:175:java.util.List dereferenceStructureStarts(net.minecraft.world.level.LevelAccessor,int,int) -> a
    179:179:net.minecraft.world.level.ChunkPos getPotentialFeatureChunkFromLocationWithOffset(net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,int,int) -> a
    183:183:boolean supportsProjection() -> g
    boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    java.lang.String getFeatureName() -> b
    int getLookupRange() -> c
    51:51:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory -> cfl$a:
    net.minecraft.world.level.levelgen.structure.StructureStart create(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> create
net.minecraft.world.level.levelgen.feature.StructurePieceType -> cfm:
    net.minecraft.world.level.levelgen.feature.StructurePieceType MINE_SHAFT_CORRIDOR -> a
    net.minecraft.world.level.levelgen.feature.StructurePieceType MINE_SHAFT_CROSSING -> b
    net.minecraft.world.level.levelgen.feature.StructurePieceType MINE_SHAFT_ROOM -> c
    net.minecraft.world.level.levelgen.feature.StructurePieceType MINE_SHAFT_STAIRS -> d
    net.minecraft.world.level.levelgen.feature.StructurePieceType PILLAGER_OUTPOST -> e
    net.minecraft.world.level.levelgen.feature.StructurePieceType VILLAGE -> f
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_BRIDGE_CROSSING -> g
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_BRIDGE_END_FILLER -> h
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_BRIDGE_STRAIGHT -> i
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_CASTLE_CORRIDOR_STAIRS -> j
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_CASTLE_CORRIDOR_T_BALCONY -> k
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_CASTLE_ENTRANCE -> l
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_CROSSING -> m
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_LEFT_TURN -> n
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR -> o
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_RIGHT_TURN -> p
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_CASTLE_STALK_ROOM -> q
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_MONSTER_THRONE -> r
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_ROOM_CROSSING -> s
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_STAIRS_ROOM -> t
    net.minecraft.world.level.levelgen.feature.StructurePieceType NETHER_FORTRESS_START -> u
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_CHEST_CORRIDOR -> v
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_FILLER_CORRIDOR -> w
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_FIVE_CROSSING -> x
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_LEFT_TURN -> y
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_LIBRARY -> z
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_PORTAL_ROOM -> A
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_PRISON_HALL -> B
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_RIGHT_TURN -> C
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_ROOM_CROSSING -> D
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_STAIRS_DOWN -> E
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_START -> F
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_STRAIGHT -> G
    net.minecraft.world.level.levelgen.feature.StructurePieceType STRONGHOLD_STRAIGHT_STAIRS_DOWN -> H
    net.minecraft.world.level.levelgen.feature.StructurePieceType JUNGLE_PYRAMID_PIECE -> I
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_RUIN -> J
    net.minecraft.world.level.levelgen.feature.StructurePieceType IGLOO -> K
    net.minecraft.world.level.levelgen.feature.StructurePieceType SWAMPLAND_HUT -> L
    net.minecraft.world.level.levelgen.feature.StructurePieceType DESERT_PYRAMID_PIECE -> M
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_BUILDING -> N
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_CORE_ROOM -> O
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_DOUBLE_X_ROOM -> P
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_DOUBLE_XY_ROOM -> Q
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_DOUBLE_Y_ROOM -> R
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_DOUBLE_YZ_ROOM -> S
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_DOUBLE_Z_ROOM -> T
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_ENTRY_ROOM -> U
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_PENTHOUSE -> V
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_SIMPLE_ROOM -> W
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_SIMPLE_TOP_ROOM -> X
    net.minecraft.world.level.levelgen.feature.StructurePieceType OCEAN_MONUMENT_WING_ROOM -> Y
    net.minecraft.world.level.levelgen.feature.StructurePieceType END_CITY_PIECE -> Z
    net.minecraft.world.level.levelgen.feature.StructurePieceType WOODLAND_MANSION_PIECE -> aa
    net.minecraft.world.level.levelgen.feature.StructurePieceType BURIED_TREASURE_PIECE -> ab
    net.minecraft.world.level.levelgen.feature.StructurePieceType SHIPWRECK_PIECE -> ac
    net.minecraft.world.level.levelgen.structure.StructurePiece load(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> load
    86:86:net.minecraft.world.level.levelgen.feature.StructurePieceType setPieceId(net.minecraft.world.level.levelgen.feature.StructurePieceType,java.lang.String) -> a
    25:79:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.SwamplandHutFeature -> cfn:
    java.util.List SWAMPHUT_ENEMIES -> a
    java.util.List SWAMPHUT_ANIMALS -> aq
    25:26:void <init>(java.util.function.Function) -> <init>
    30:30:java.lang.String getFeatureName() -> b
    35:35:int getLookupRange() -> c
    40:40:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    45:45:int getRandomSalt() -> d
    63:63:java.util.List getSpecialEnemies() -> e
    68:68:java.util.List getSpecialAnimals() -> f
    72:77:boolean isSwamphut(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> c
    21:22:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.SwamplandHutFeature$FeatureStart -> cfn$a:
    50:51:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    55:58:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.TaigaVillagePools -> cfo:
    25:25:void <init>() -> <init>
    267:267:void bootstrap() -> a
    27:264:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.TreeFeature -> cfp:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:34:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    14:14:boolean doPlace(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,java.util.Set,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration) -> a
net.minecraft.world.level.levelgen.feature.VillageFeature -> cfq:
    22:23:void <init>(java.util.function.Function) -> <init>
    27:46:net.minecraft.world.level.ChunkPos getPotentialFeatureChunkFromLocationWithOffset(net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,int,int) -> a
    51:57:boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    62:62:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    67:67:java.lang.String getFeatureName() -> b
    72:72:int getLookupRange() -> c
    77:77:boolean supportsProjection() -> g
net.minecraft.world.level.levelgen.feature.VillageFeature$FeatureStart -> cfq$a:
    82:83:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    87:93:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.feature.VillagePieces -> cfr:
    18:18:void <init>() -> <init>
    20:27:void addPieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,java.util.List,net.minecraft.world.level.levelgen.WorldgenRandom,net.minecraft.world.level.levelgen.feature.configurations.VillageConfiguration) -> a
net.minecraft.world.level.levelgen.feature.VillagePieces$VillagePiece -> cfr$a:
    31:32:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement,net.minecraft.core.BlockPos,int,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.BoundingBox) -> <init>
    35:36:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
net.minecraft.world.level.levelgen.feature.VinesFeature -> cfs:
    net.minecraft.core.Direction[] DIRECTIONS -> a
    22:23:void <init>(java.util.function.Function) -> <init>
    27:48:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    18:18:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    19:19:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.VoidStartPlatformFeature -> cft:
    net.minecraft.core.BlockPos PLATFORM_ORIGIN -> a
    net.minecraft.world.level.ChunkPos PLATFORM_ORIGIN_CHUNK -> aq
    23:24:void <init>(java.util.function.Function) -> <init>
    27:27:int checkerboardDistance(int,int,int,int) -> a
    32:51:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    16:16:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration) -> a
    17:18:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.WeightedConfiguredFeature -> cfu:
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature feature -> a
    float chance -> b
    19:22:void <init>(net.minecraft.world.level.levelgen.feature.ConfiguredFeature,float) -> <init>
    25:28:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    33:33:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos) -> a
    37:37:net.minecraft.world.level.levelgen.feature.WeightedConfiguredFeature deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.WoodlandMansionFeature -> cfv:
    32:33:void <init>(java.util.function.Function) -> <init>
    37:56:net.minecraft.world.level.ChunkPos getPotentialFeatureChunkFromLocationWithOffset(net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,int,int) -> a
    61:73:boolean isFeatureChunk(net.minecraft.world.level.biome.BiomeManager,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,int,int,net.minecraft.world.level.biome.Biome) -> a
    78:78:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    83:83:java.lang.String getFeatureName() -> b
    88:88:int getLookupRange() -> c
net.minecraft.world.level.levelgen.feature.WoodlandMansionFeature$WoodlandMansionStart -> cfv$a:
    93:94:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    98:132:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
    136:166:void postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer -> cfw:
    net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacerType type -> a
    13:15:void <init>(net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacerType) -> <init>
    void place(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacerType -> cfx:
    net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacerType SIMPLE_BLOCK_PLACER -> a
    net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacerType DOUBLE_PLANT_PLACER -> b
    net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacerType COLUMN_PLACER -> c
    java.util.function.Function deserializer -> d
    14:14:net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacerType register(java.lang.String,java.util.function.Function) -> a
    19:21:void <init>(java.util.function.Function) -> <init>
    24:24:net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer deserialize(com.mojang.datafixers.Dynamic) -> a
    9:11:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.blockplacers.ColumnPlacer -> cfy:
    int minSize -> b
    int extraSize -> c
    20:23:void <init>(int,int) -> <init>
    26:30:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    34:40:void place(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    44:48:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.feature.blockplacers.DoublePlantPlacer -> cfz:
    17:18:void <init>() -> <init>
    21:22:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    26:27:void place(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    31:33:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.feature.blockplacers.SimpleBlockPlacer -> cga:
    16:17:void <init>() -> <init>
    20:21:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    25:26:void place(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    30:32:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.feature.blockplacers.package-info -> cgb:
net.minecraft.world.level.levelgen.feature.configurations.BlockBlobConfiguration -> cgc:
    net.minecraft.world.level.block.state.BlockState state -> a
    int startRadius -> b
    13:16:void <init>(net.minecraft.world.level.block.state.BlockState,int) -> <init>
    20:22:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    27:30:net.minecraft.world.level.levelgen.feature.configurations.BlockBlobConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration -> cgd:
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider stateProvider -> a
    14:16:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider) -> <init>
    20:24:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    28:31:net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration -> cge:
    net.minecraft.world.level.block.state.BlockState state -> a
    12:14:void <init>(net.minecraft.world.level.block.state.BlockState) -> <init>
    18:19:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    24:25:net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.BuriedTreasureConfiguration -> cgf:
    float probability -> a
    10:12:void <init>(float) -> <init>
    16:17:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    22:23:net.minecraft.world.level.levelgen.feature.configurations.BuriedTreasureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.ChanceRangeDecoratorConfiguration -> cgg:
    float chance -> a
    int bottomOffset -> b
    int topOffset -> c
    int top -> d
    13:18:void <init>(float,int,int,int) -> <init>
    22:26:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    31:35:net.minecraft.world.level.levelgen.feature.configurations.ChanceRangeDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.CountFeatureConfiguration -> cgh:
    int count -> a
    10:12:void <init>(int) -> <init>
    16:17:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    22:23:net.minecraft.world.level.levelgen.feature.configurations.CountFeatureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration -> cgi:
    int count -> a
    int bottomOffset -> b
    int topOffset -> c
    int maximum -> d
    13:18:void <init>(int,int,int,int) -> <init>
    22:26:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    32:37:net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.DecoratedFeatureConfiguration -> cgj:
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature feature -> a
    net.minecraft.world.level.levelgen.placement.ConfiguredDecorator decorator -> b
    14:17:void <init>(net.minecraft.world.level.levelgen.feature.ConfiguredFeature,net.minecraft.world.level.levelgen.placement.ConfiguredDecorator) -> <init>
    21:23:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    29:29:java.lang.String toString() -> toString
    33:35:net.minecraft.world.level.levelgen.feature.configurations.DecoratedFeatureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration -> cgk:
    net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration NONE -> e
    com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    7:7:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration -> cgl:
    net.minecraft.world.level.block.state.BlockState state -> a
    int radius -> b
    int ySize -> c
    java.util.List targets -> d
    17:22:void <init>(net.minecraft.world.level.block.state.BlockState,int,int,java.util.List) -> <init>
    26:30:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    35:40:net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
    30:30:java.lang.Object lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration -> cgm:
    java.util.Optional exit -> a
    boolean exact -> b
    14:17:void <init>(java.util.Optional,boolean) -> <init>
    20:20:net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration knownExit(net.minecraft.core.BlockPos,boolean) -> a
    24:24:net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration delayedExitSearch() -> a
    28:28:java.util.Optional getExit() -> b
    32:32:boolean isExitExact() -> c
    37:43:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    47:57:net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
    49:49:java.util.Optional lambda$deserialize$3(com.mojang.datafixers.Dynamic,java.lang.Number) -> a
    50:50:java.util.Optional lambda$null$2(com.mojang.datafixers.Dynamic,java.lang.Number,java.lang.Number) -> a
    51:51:net.minecraft.core.BlockPos lambda$null$1(java.lang.Number,java.lang.Number,java.lang.Number) -> a
    37:42:java.lang.Object lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration -> cgn:
    net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration NONE -> e
    com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    7:7:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.configurations.FeatureRadiusConfiguration -> cgo:
    int radius -> a
    10:12:void <init>(int) -> <init>
    16:17:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    22:23:net.minecraft.world.level.levelgen.feature.configurations.FeatureRadiusConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration -> cgp:
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider capProvider -> a
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider stemProvider -> b
    int foliageRadius -> c
    16:20:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,int) -> <init>
    24:30:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    34:40:net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.LayerConfiguration -> cgq:
    int height -> a
    net.minecraft.world.level.block.state.BlockState state -> b
    13:16:void <init>(int,net.minecraft.world.level.block.state.BlockState) -> <init>
    20:22:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    27:29:net.minecraft.world.level.levelgen.feature.configurations.LayerConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration -> cgr:
    int heightInterval -> a
    int crownHeight -> b
    17:20:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,java.util.List,int,int,int) -> <init>
    24:28:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    32:39:net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration$MegaTreeConfigurationBuilder -> cgr$a:
    java.util.List decorators -> c
    int baseHeight -> d
    int heightInterval -> e
    int crownHeight -> f
    44:51:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider) -> <init>
    55:56:net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration$MegaTreeConfigurationBuilder decorators(java.util.List) -> a
    61:62:net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration$MegaTreeConfigurationBuilder baseHeight(int) -> a
    66:67:net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration$MegaTreeConfigurationBuilder heightInterval(int) -> b
    71:72:net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration$MegaTreeConfigurationBuilder crownHeight(int) -> c
    77:77:net.minecraft.world.level.levelgen.feature.configurations.MegaTreeConfiguration build() -> a
    43:43:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration build() -> b
    43:43:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder decorators(java.util.List) -> b
    43:43:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder baseHeight(int) -> d
net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration -> cgs:
    double probability -> a
    net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type type -> b
    12:15:void <init>(double,net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type) -> <init>
    19:21:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    26:29:net.minecraft.world.level.levelgen.feature.configurations.MineshaftConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.NoiseDependantDecoratorConfiguration -> cgt:
    double noiseLevel -> a
    int belowNoise -> b
    int aboveNoise -> c
    12:16:void <init>(double,int,int) -> <init>
    20:23:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    29:33:net.minecraft.world.level.levelgen.feature.configurations.NoiseDependantDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration -> cgu:
    6:6:void <init>() -> <init>
    9:9:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    13:13:net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration -> cgv:
    6:6:void <init>() -> <init>
    9:9:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    13:13:net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration -> cgw:
    net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type biomeTemp -> a
    float largeProbability -> b
    float clusterProbability -> c
    13:17:void <init>(net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type,float,float) -> <init>
    21:24:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    29:32:net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration -> cgx:
    net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates target -> a
    int size -> b
    net.minecraft.world.level.block.state.BlockState state -> c
    54:58:void <init>(net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates,net.minecraft.world.level.block.state.BlockState,int) -> <init>
    62:65:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    70:74:net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates -> cgx$a:
    net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates NATURAL_STONE -> a
    net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates NETHERRACK -> b
    java.util.Map BY_NAME -> c
    java.lang.String name -> d
    java.util.function.Predicate predicate -> e
    net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates[] $VALUES -> f
    17:17:net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates[] values() -> values
    17:17:net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates valueOf(java.lang.String) -> valueOf
    32:35:void <init>(java.lang.String,int,java.lang.String,java.util.function.Predicate) -> <init>
    38:38:java.lang.String getName() -> a
    42:42:net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates byName(java.lang.String) -> a
    46:46:java.util.function.Predicate getPredicate() -> b
    28:28:net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates lambda$static$1(net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration$Predicates) -> a
    19:23:boolean lambda$static$0(net.minecraft.world.level.block.state.BlockState) -> a
    17:28:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration -> cgy:
    float probability -> b
    11:13:void <init>(float) -> <init>
    17:18:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    23:24:net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration -> cgz:
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature featureTrue -> a
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature featureFalse -> b
    12:15:void <init>(net.minecraft.world.level.levelgen.feature.ConfiguredFeature,net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> <init>
    19:21:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    26:28:net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration -> cha:
    java.util.List features -> a
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature defaultFeature -> b
    15:18:void <init>(java.util.List,net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> <init>
    22:27:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    32:35:net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
    22:22:java.lang.Object lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.feature.WeightedConfiguredFeature) -> a
net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration -> chb:
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider stateProvider -> a
    net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer blockPlacer -> b
    java.util.Set whitelist -> c
    java.util.Set blacklist -> d
    int tries -> f
    int xspread -> g
    int yspread -> h
    int zspread -> i
    boolean canReplace -> j
    boolean project -> k
    boolean needWater -> l
    33:45:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer,java.util.Set,java.util.Set,int,int,int,int,boolean,boolean,boolean) -> <init>
    49:63:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    67:81:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
    54:54:java.lang.Object lambda$serialize$1(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.block.state.BlockState) -> a
    53:53:java.lang.Object lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.block.Block) -> a
    20:20:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer,java.util.Set,java.util.Set,int,int,int,int,boolean,boolean,boolean,net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$1) -> <init>
net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$1 -> chb$1:
net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder -> chb$a:
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider stateProvider -> a
    net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer blockPlacer -> b
    java.util.Set whitelist -> c
    java.util.Set blacklist -> d
    int tries -> e
    int xspread -> f
    int yspread -> g
    int zspread -> h
    boolean canReplace -> i
    boolean project -> j
    boolean needWater -> k
    88:101:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer) -> <init>
    104:105:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder whitelist(java.util.Set) -> a
    109:110:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder blacklist(java.util.Set) -> b
    114:115:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder tries(int) -> a
    119:120:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder xspread(int) -> b
    124:125:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder yspread(int) -> c
    129:130:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder zspread(int) -> d
    134:135:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder canReplace() -> a
    139:140:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder noProjection() -> b
    144:145:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration$GrassConfigurationBuilder needWater() -> c
    149:149:net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration build() -> d
net.minecraft.world.level.levelgen.feature.configurations.RandomRandomFeatureConfiguration -> chc:
    java.util.List features -> a
    int count -> b
    14:17:void <init>(java.util.List,int) -> <init>
    21:23:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    28:30:net.minecraft.world.level.levelgen.feature.configurations.RandomRandomFeatureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
    22:22:java.lang.Object lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> a
net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration -> chd:
    net.minecraft.world.level.block.state.BlockState target -> a
    net.minecraft.world.level.block.state.BlockState state -> b
    13:16:void <init>(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState) -> <init>
    20:22:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    27:30:net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.SeagrassFeatureConfiguration -> che:
    int count -> a
    double tallSeagrassProbability -> b
    11:14:void <init>(int,double) -> <init>
    18:20:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    25:28:net.minecraft.world.level.levelgen.feature.configurations.SeagrassFeatureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.ShipwreckConfiguration -> chf:
    boolean isBeached -> a
    10:12:void <init>(boolean) -> <init>
    16:17:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    22:23:net.minecraft.world.level.levelgen.feature.configurations.ShipwreckConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration -> chg:
    net.minecraft.world.level.block.state.BlockState toPlace -> a
    java.util.List placeOn -> b
    java.util.List placeIn -> c
    java.util.List placeUnder -> d
    18:23:void <init>(net.minecraft.world.level.block.state.BlockState,java.util.List,java.util.List,java.util.List) -> <init>
    26:27:void <init>(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState[],net.minecraft.world.level.block.state.BlockState[],net.minecraft.world.level.block.state.BlockState[]) -> <init>
    31:40:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    45:50:net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
    34:34:java.lang.Object lambda$serialize$2(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.block.state.BlockState) -> a
    33:33:java.lang.Object lambda$serialize$1(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.block.state.BlockState) -> b
    32:32:java.lang.Object lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.block.state.BlockState) -> c
net.minecraft.world.level.levelgen.feature.configurations.SimpleRandomFeatureConfiguration -> chh:
    java.util.List features -> a
    13:15:void <init>(java.util.List) -> <init>
    19:20:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    25:26:net.minecraft.world.level.levelgen.feature.configurations.SimpleRandomFeatureConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
    20:20:java.lang.Object lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> a
net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration -> chi:
    net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer foliagePlacer -> a
    int heightRandA -> b
    int heightRandB -> c
    int trunkHeight -> d
    int trunkHeightRandom -> f
    int trunkTopOffset -> g
    int trunkTopOffsetRandom -> h
    int foliageHeight -> i
    int foliageHeightRandom -> j
    int maxWaterDepth -> k
    boolean ignoreVines -> l
    40:52:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer,java.util.List,int,int,int,int,int,int,int,int,int,int,boolean) -> <init>
    56:71:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    75:92:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder -> chi$a:
    net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer foliagePlacer -> c
    java.util.List decorators -> d
    int baseHeight -> e
    int heightRandA -> f
    int heightRandB -> g
    int trunkHeight -> h
    int trunkHeightRandom -> i
    int trunkTopOffset -> j
    int trunkTopOffsetRandom -> k
    int foliageHeight -> l
    int foliageHeightRandom -> m
    int maxWaterDepth -> n
    boolean ignoreVines -> o
    98:114:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer) -> <init>
    118:119:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder decorators(java.util.List) -> a
    124:125:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder baseHeight(int) -> a
    129:130:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder heightRandA(int) -> b
    134:135:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder heightRandB(int) -> c
    139:140:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder trunkHeight(int) -> e
    144:145:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder trunkHeightRandom(int) -> f
    149:150:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder trunkTopOffset(int) -> g
    154:155:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder trunkTopOffsetRandom(int) -> h
    159:160:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder foliageHeight(int) -> i
    164:165:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder foliageHeightRandom(int) -> j
    169:170:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder maxWaterDepth(int) -> k
    174:175:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration$SmallTreeConfigurationBuilder ignoreVines() -> a
    180:180:net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration build() -> c
    96:96:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration build() -> b
    96:96:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder decorators(java.util.List) -> b
    96:96:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder baseHeight(int) -> d
net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration -> chj:
    boolean crystalInvulnerable -> a
    java.util.List spikes -> b
    net.minecraft.core.BlockPos crystalBeamTarget -> c
    20:24:void <init>(boolean,java.util.List,net.minecraft.core.BlockPos) -> <init>
    28:31:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    36:44:net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
    48:48:boolean isCrystalInvulnerable() -> a
    52:52:java.util.List getSpikes() -> b
    57:57:net.minecraft.core.BlockPos getCrystalBeamTarget() -> c
    37:37:java.lang.Integer lambda$deserialize$1(com.mojang.datafixers.Dynamic) -> b
    30:30:java.lang.Object lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.feature.SpikeFeature$EndSpike) -> a
net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration -> chk:
    net.minecraft.world.level.material.FluidState state -> a
    boolean requiresBlockBelow -> b
    int rockCount -> c
    int holeCount -> d
    java.util.Set validBlocks -> f
    22:28:void <init>(net.minecraft.world.level.material.FluidState,boolean,int,int,java.util.Set) -> <init>
    32:37:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    42:47:net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
    47:47:net.minecraft.world.level.block.Block lambda$deserialize$0(com.mojang.datafixers.Dynamic) -> b
net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration -> chl:
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider trunkProvider -> m
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider leavesProvider -> n
    java.util.List decorators -> o
    int baseHeight -> p
    boolean fromSapling -> q
    22:27:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,java.util.List,int) -> <init>
    30:31:void setFromSapling() -> a
    35:42:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    46:53:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration deserialize(com.mojang.datafixers.Dynamic) -> b
    52:52:net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator lambda$deserialize$1(com.mojang.datafixers.Dynamic) -> a
    39:39:java.lang.Object lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator) -> a
net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder -> chl$a:
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider trunkProvider -> a
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider leavesProvider -> b
    java.util.List decorators -> c
    int baseHeight -> d
    60:66:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider,net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider) -> <init>
    69:70:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder baseHeight(int) -> d
    74:75:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration$TreeConfigurationBuilder decorators(java.util.List) -> b
    79:79:net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration build() -> b
net.minecraft.world.level.levelgen.feature.configurations.VillageConfiguration -> chm:
    net.minecraft.resources.ResourceLocation startPool -> a
    int size -> b
    12:15:void <init>(java.lang.String,int) -> <init>
    19:21:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    26:28:net.minecraft.world.level.levelgen.feature.configurations.VillageConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.configurations.package-info -> chn:
net.minecraft.world.level.levelgen.feature.foliageplacers.AcaciaFoliagePlacer -> cho:
    13:14:void <init>(int,int) -> <init>
    17:21:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    25:42:void createFoliage(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration,int,int,int,net.minecraft.core.BlockPos,java.util.Set) -> a
    46:46:int foliageRadius(java.util.Random,int,int,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    51:51:boolean shouldSkipLocation(java.util.Random,int,int,int,int,int) -> a
    56:56:int getTreeRadiusForHeight(int,int,int,int) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.BlobFoliagePlacer -> chp:
    13:14:void <init>(int,int) -> <init>
    17:21:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    25:29:void createFoliage(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration,int,int,int,net.minecraft.core.BlockPos,java.util.Set) -> a
    33:33:int foliageRadius(java.util.Random,int,int,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    38:38:boolean shouldSkipLocation(java.util.Random,int,int,int,int,int) -> a
    43:43:int getTreeRadiusForHeight(int,int,int,int) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer -> chq:
    int radius -> a
    int radiusRandom -> b
    net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType type -> c
    25:29:void <init>(int,int,net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType) -> <init>
    void createFoliage(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration,int,int,int,net.minecraft.core.BlockPos,java.util.Set) -> a
    int foliageRadius(java.util.Random,int,int,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    boolean shouldSkipLocation(java.util.Random,int,int,int,int,int) -> a
    int getTreeRadiusForHeight(int,int,int,int) -> a
    40:50:void placeLeavesRow(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration,int,net.minecraft.core.BlockPos,int,int,java.util.Set) -> a
    53:57:void placeLeaf(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration,java.util.Set) -> a
    60:65:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType -> chr:
    net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType BLOB_FOLIAGE_PLACER -> a
    net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType SPRUCE_FOLIAGE_PLACER -> b
    net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType PINE_FOLIAGE_PLACER -> c
    net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType ACACIA_FOLIAGE_PLACER -> d
    java.util.function.Function deserializer -> e
    15:15:net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacerType register(java.lang.String,java.util.function.Function) -> a
    20:22:void <init>(java.util.function.Function) -> <init>
    25:25:net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer deserialize(com.mojang.datafixers.Dynamic) -> a
    9:12:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.foliageplacers.PineFoliagePlacer -> chs:
    13:14:void <init>(int,int) -> <init>
    17:21:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    25:36:void createFoliage(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration,int,int,int,net.minecraft.core.BlockPos,java.util.Set) -> a
    40:40:int foliageRadius(java.util.Random,int,int,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    45:45:boolean shouldSkipLocation(java.util.Random,int,int,int,int,int) -> a
    50:50:int getTreeRadiusForHeight(int,int,int,int) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.SpruceFoliagePlacer -> cht:
    13:14:void <init>(int,int) -> <init>
    17:21:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    25:40:void createFoliage(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration,int,int,int,net.minecraft.core.BlockPos,java.util.Set) -> a
    44:44:int foliageRadius(java.util.Random,int,int,net.minecraft.world.level.levelgen.feature.configurations.SmallTreeConfiguration) -> a
    49:49:boolean shouldSkipLocation(java.util.Random,int,int,int,int,int) -> a
    54:54:int getTreeRadiusForHeight(int,int,int,int) -> a
net.minecraft.world.level.levelgen.feature.foliageplacers.package-info -> chu:
net.minecraft.world.level.levelgen.feature.package-info -> chv:
net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider -> chw:
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType type -> a
    12:14:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType) -> <init>
    net.minecraft.world.level.block.state.BlockState getState(java.util.Random,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType -> chx:
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType SIMPLE_STATE_PROVIDER -> a
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType WEIGHTED_STATE_PROVIDER -> b
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType PLAIN_FLOWER_PROVIDER -> c
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType FOREST_FLOWER_PROVIDER -> d
    java.util.function.Function deserializer -> e
    15:15:net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProviderType register(java.lang.String,java.util.function.Function) -> a
    20:22:void <init>(java.util.function.Function) -> <init>
    25:25:net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider deserialize(com.mojang.datafixers.Dynamic) -> a
    9:12:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.stateproviders.ForestFlowerProvider -> chy:
    net.minecraft.world.level.block.state.BlockState[] FLOWERS -> b
    31:32:void <init>() -> <init>
    35:36:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    40:41:net.minecraft.world.level.block.state.BlockState getState(java.util.Random,net.minecraft.core.BlockPos) -> a
    46:49:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    16:27:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.stateproviders.PlainFlowerProvider -> chz:
    net.minecraft.world.level.block.state.BlockState[] LOW_NOISE_FLOWERS -> b
    net.minecraft.world.level.block.state.BlockState[] HIGH_NOISE_FLOWERS -> c
    29:30:void <init>() -> <init>
    33:34:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    38:47:net.minecraft.world.level.block.state.BlockState getState(java.util.Random,net.minecraft.core.BlockPos) -> a
    52:55:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    15:25:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.stateproviders.RotatedBlockProvider -> cia:
    net.minecraft.world.level.block.Block block -> b
    19:21:void <init>(net.minecraft.world.level.block.Block) -> <init>
    24:25:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    29:30:net.minecraft.world.level.block.state.BlockState getState(java.util.Random,net.minecraft.core.BlockPos) -> a
    35:39:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.SimpleStateProvider -> cib:
    net.minecraft.world.level.block.state.BlockState state -> b
    16:18:void <init>(net.minecraft.world.level.block.state.BlockState) -> <init>
    21:22:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    26:26:net.minecraft.world.level.block.state.BlockState getState(java.util.Random,net.minecraft.core.BlockPos) -> a
    31:35:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider -> cic:
    net.minecraft.world.entity.ai.behavior.WeightedList weightedList -> b
    17:19:void <init>(net.minecraft.world.entity.ai.behavior.WeightedList) -> <init>
    22:23:void <init>() -> <init>
    26:27:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    30:31:net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider add(net.minecraft.world.level.block.state.BlockState,int) -> a
    36:36:net.minecraft.world.level.block.state.BlockState getState(java.util.Random,net.minecraft.core.BlockPos) -> a
    41:46:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    44:44:com.mojang.datafixers.Dynamic lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.level.levelgen.feature.stateproviders.package-info -> cid:
net.minecraft.world.level.levelgen.feature.structures.EmptyPoolElement -> cie:
    net.minecraft.world.level.levelgen.feature.structures.EmptyPoolElement INSTANCE -> a
    21:22:void <init>() -> <init>
    26:26:net.minecraft.core.BlockPos getSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.block.Rotation) -> a
    31:31:java.util.List getShuffledJigsawBlocks(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.Random) -> a
    36:36:net.minecraft.world.level.levelgen.structure.BoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation) -> a
    41:41:boolean place(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random) -> a
    46:46:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType getType() -> a
    51:51:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    56:56:java.lang.String toString() -> toString
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.structures.FeaturePoolElement -> cif:
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature feature -> a
    net.minecraft.nbt.CompoundTag defaultJigsawNBT -> b
    33:34:void <init>(net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> <init>
    37:40:void <init>(net.minecraft.world.level.levelgen.feature.ConfiguredFeature,net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection) -> <init>
    43:46:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    49:53:net.minecraft.nbt.CompoundTag fillDefaultJigsawNBT() -> b
    58:58:net.minecraft.core.BlockPos getSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.block.Rotation) -> a
    63:65:java.util.List getShuffledJigsawBlocks(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.Random) -> a
    70:71:net.minecraft.world.level.levelgen.structure.BoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation) -> a
    76:76:boolean place(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random) -> a
    81:82:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    88:88:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType getType() -> a
    93:93:java.lang.String toString() -> toString
net.minecraft.world.level.levelgen.feature.structures.JigsawJunction -> cig:
    int sourceX -> a
    int sourceGroundY -> b
    int sourceZ -> c
    int deltaY -> d
    net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection destProjection -> e
    14:20:void <init>(int,int,int,int,net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection) -> <init>
    23:23:int getSourceX() -> a
    27:27:int getSourceGroundY() -> b
    31:31:int getSourceZ() -> c
    35:35:int getDeltaY() -> d
    39:39:net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection getDestProjection() -> e
    43:51:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    55:60:net.minecraft.world.level.levelgen.feature.structures.JigsawJunction deserialize(com.mojang.datafixers.Dynamic) -> a
    66:74:boolean equals(java.lang.Object) -> equals
    79:84:int hashCode() -> hashCode
    89:89:java.lang.String toString() -> toString
net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement -> cih:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePools POOLS -> a
    30:30:void <init>() -> <init>
    278:281:void addPieces(net.minecraft.resources.ResourceLocation,int,net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$PieceFactory,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,java.util.List,java.util.Random) -> a
    30:30:org.apache.logging.log4j.Logger access$500() -> a
    31:36:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$1 -> cih$1:
net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$PieceFactory -> cih$a:
    net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece create(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement,net.minecraft.core.BlockPos,int,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.BoundingBox) -> create
net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$PieceState -> cih$b:
    net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece piece -> a
    java.util.concurrent.atomic.AtomicReference free -> b
    int boundsTop -> c
    int depth -> d
    44:49:void <init>(net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece,java.util.concurrent.atomic.AtomicReference,int,int) -> <init>
    38:38:void <init>(net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece,java.util.concurrent.atomic.AtomicReference,int,int,net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$1) -> <init>
    38:38:net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece access$100(net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$PieceState) -> a
    38:38:java.util.concurrent.atomic.AtomicReference access$200(net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$PieceState) -> b
    38:38:int access$300(net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$PieceState) -> c
    38:38:int access$400(net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$PieceState) -> d
net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$Placer -> cih$c:
    int maxDepth -> a
    net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$PieceFactory factory -> b
    net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator -> c
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager structureManager -> d
    java.util.List pieces -> e
    java.util.Random random -> f
    java.util.Deque placing -> g
    59:100:void <init>(net.minecraft.resources.ResourceLocation,int,net.minecraft.world.level.levelgen.feature.structures.JigsawPlacement$PieceFactory,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,java.util.List,java.util.Random) -> <init>
    103:274:void tryPlacingChildren(net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece,java.util.concurrent.atomic.AtomicReference,int,int) -> a
    169:175:int lambda$tryPlacingChildren$0(net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo) -> a
net.minecraft.world.level.levelgen.feature.structures.ListPoolElement -> cii:
    java.util.List elements -> a
    28:29:void <init>(java.util.List) -> <init>
    32:38:void <init>(java.util.List,net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection) -> <init>
    41:47:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    51:61:net.minecraft.core.BlockPos getSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.block.Rotation) -> a
    66:66:java.util.List getShuffledJigsawBlocks(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.Random) -> a
    71:77:net.minecraft.world.level.levelgen.structure.BoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation) -> a
    82:87:boolean place(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random) -> a
    92:92:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType getType() -> a
    97:99:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement setProjection(net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection) -> a
    104:106:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    112:112:java.lang.String toString() -> toString
    116:117:void setProjectionOnEachElement(net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection) -> b
    116:116:void lambda$setProjectionOnEachElement$2(net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection,net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement) -> a
    104:104:java.lang.Object lambda$getDynamic$1(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement) -> a
    42:42:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement lambda$new$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.structures.SinglePoolElement -> cij:
    net.minecraft.resources.ResourceLocation location -> a
    com.google.common.collect.ImmutableList processors -> b
    40:41:void <init>(java.lang.String,java.util.List) -> <init>
    44:47:void <init>(java.lang.String,java.util.List,net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection) -> <init>
    54:55:void <init>(java.lang.String) -> <init>
    58:61:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    65:66:net.minecraft.core.BlockPos getSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.block.Rotation) -> a
    70:86:java.util.List getDataMarkers(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,boolean) -> a
    91:94:java.util.List getShuffledJigsawBlocks(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.Random) -> a
    99:100:net.minecraft.world.level.levelgen.structure.BoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation) -> a
    105:116:boolean place(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random) -> a
    120:129:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings getSettings(net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    134:134:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType getType() -> a
    139:141:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    147:147:java.lang.String toString() -> toString
    141:141:java.lang.Object lambda$getDynamic$1(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor) -> a
    60:60:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor lambda$new$0(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement -> cik:
    net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection projection -> a
    22:24:void <init>(net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection) -> <init>
    26:28:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    net.minecraft.core.BlockPos getSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.block.Rotation) -> a
    java.util.List getShuffledJigsawBlocks(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.Random) -> a
    net.minecraft.world.level.levelgen.structure.BoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation) -> a
    boolean place(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random) -> a
    net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType getType() -> a
    41:41:void handleDataMarker(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    44:45:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement setProjection(net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection) -> a
    49:53:net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection getProjection() -> c
    com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    59:61:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> b
    65:65:int getGroundLevelDelta() -> d
net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType -> cil:
    net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType SINGLE -> b
    net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType LIST -> c
    net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType FEATURE -> d
    net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType EMPTY -> e
    14:14:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType register(java.lang.String,net.minecraft.world.level.levelgen.feature.structures.StructurePoolElementType) -> a
    10:10:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement lambda$static$0(com.mojang.datafixers.Dynamic) -> a
    7:10:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool -> cim:
    net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool EMPTY -> a
    net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool INVALID -> b
    net.minecraft.resources.ResourceLocation name -> c
    com.google.common.collect.ImmutableList rawTemplates -> d
    java.util.List templates -> e
    net.minecraft.resources.ResourceLocation fallback -> f
    net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection projection -> g
    int maxSize -> h
    68:82:void <init>(net.minecraft.resources.ResourceLocation,net.minecraft.resources.ResourceLocation,java.util.List,net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection) -> <init>
    85:88:int getMaxSize(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager) -> a
    92:92:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement getTemplate(int) -> a
    96:96:net.minecraft.resources.ResourceLocation getFallback() -> a
    100:100:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement getRandomTemplate(java.util.Random) -> a
    104:104:java.util.List getShuffledTemplates(java.util.Random) -> b
    108:108:net.minecraft.resources.ResourceLocation getName() -> b
    112:112:int size() -> c
    116:130:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    135:143:net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool deserialize(com.mojang.datafixers.Dynamic) -> a
    136:138:com.mojang.datafixers.util.Pair lambda$deserialize$2(com.mojang.datafixers.Dynamic,com.mojang.datafixers.Dynamic) -> a
    117:122:java.lang.Object lambda$serialize$1(com.mojang.datafixers.types.DynamicOps,com.mojang.datafixers.util.Pair) -> a
    86:86:int lambda$getMaxSize$0(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement) -> a
    60:61:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection -> cim$a:
    net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection TERRAIN_MATCHING -> a
    net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection RIGID -> b
    java.util.Map BY_NAME -> c
    java.lang.String name -> d
    com.google.common.collect.ImmutableList processors -> e
    net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection[] $VALUES -> f
    28:28:net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection[] values() -> values
    28:28:net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection valueOf(java.lang.String) -> valueOf
    42:45:void <init>(java.lang.String,int,java.lang.String,com.google.common.collect.ImmutableList) -> <init>
    48:48:java.lang.String getName() -> a
    52:52:net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection byName(java.lang.String) -> a
    56:56:com.google.common.collect.ImmutableList getProcessors() -> b
    38:38:net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection lambda$static$0(net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool$Projection) -> a
    28:38:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePools -> cin:
    java.util.Map pools -> a
    10:14:void <init>() -> <init>
    17:18:void register(net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool) -> a
    21:21:java.util.Set getPoolLocations() -> a
    25:26:net.minecraft.world.level.levelgen.feature.structures.StructureTemplatePool getPool(net.minecraft.resources.ResourceLocation) -> a
net.minecraft.world.level.levelgen.feature.structures.package-info -> cio:
net.minecraft.world.level.levelgen.feature.treedecorators.AlterGroundDecorator -> cip:
    net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider provider -> b
    24:26:void <init>(net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider) -> <init>
    29:34:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    38:54:void place(net.minecraft.world.level.LevelAccessor,java.util.Random,java.util.List,java.util.List,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    57:64:void placeCircle(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos) -> a
    67:76:void placeBlockAt(net.minecraft.world.level.LevelSimulatedRW,java.util.Random,net.minecraft.core.BlockPos) -> b
    80:83:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    40:53:void lambda$place$1(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.core.BlockPos) -> a
    39:39:boolean lambda$place$0(int,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.feature.treedecorators.BeehiveDecorator -> ciq:
    float probability -> b
    29:31:void <init>(float) -> <init>
    34:37:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    41:72:void place(net.minecraft.world.level.LevelAccessor,java.util.Random,java.util.List,java.util.List,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    76:79:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    51:51:boolean lambda$place$0(int,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.feature.treedecorators.CocoaDecorator -> cir:
    float probability -> b
    24:26:void <init>(float) -> <init>
    29:30:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    34:53:void place(net.minecraft.world.level.LevelAccessor,java.util.Random,java.util.List,java.util.List,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    57:60:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    42:52:void lambda$place$1(java.util.Random,net.minecraft.world.level.LevelAccessor,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.BlockPos) -> a
    40:40:boolean lambda$place$0(int,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.feature.treedecorators.LeaveVineDecorator -> cis:
    21:22:void <init>() -> <init>
    25:26:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    30:59:void place(net.minecraft.world.level.LevelAccessor,java.util.Random,java.util.List,java.util.List,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    62:71:void addHangingVine(net.minecraft.world.level.LevelSimulatedRW,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.properties.BooleanProperty,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    75:77:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    31:58:void lambda$place$0(java.util.Random,net.minecraft.world.level.LevelAccessor,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator -> cit:
    net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType type -> a
    20:22:void <init>(net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType) -> <init>
    void place(net.minecraft.world.level.LevelAccessor,java.util.Random,java.util.List,java.util.List,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    27:28:void placeVine(net.minecraft.world.level.LevelWriter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.properties.BooleanProperty,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    31:34:void setBlock(net.minecraft.world.level.LevelWriter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType -> ciu:
    net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType TRUNK_VINE -> a
    net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType LEAVE_VINE -> b
    net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType COCOA -> c
    net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType BEEHIVE -> d
    net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType ALTER_GROUND -> e
    java.util.function.Function deserializer -> f
    16:16:net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecoratorType register(java.lang.String,java.util.function.Function) -> a
    21:23:void <init>(java.util.function.Function) -> <init>
    26:26:net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator deserialize(com.mojang.datafixers.Dynamic) -> a
    9:13:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.feature.treedecorators.TrunkVineDecorator -> civ:
    19:20:void <init>() -> <init>
    23:24:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    28:57:void place(net.minecraft.world.level.LevelAccessor,java.util.Random,java.util.List,java.util.List,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    61:63:java.lang.Object serialize(com.mojang.datafixers.types.DynamicOps) -> a
    29:56:void lambda$place$0(java.util.Random,net.minecraft.world.level.LevelAccessor,java.util.Set,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.feature.treedecorators.package-info -> ciw:
net.minecraft.world.level.levelgen.flat.FlatLayerInfo -> cix:
    net.minecraft.world.level.block.state.BlockState blockState -> a
    int height -> b
    int start -> c
    12:15:void <init>(int,net.minecraft.world.level.block.Block) -> <init>
    18:18:int getHeight() -> a
    22:22:net.minecraft.world.level.block.state.BlockState getBlockState() -> b
    26:26:int getStart() -> c
    30:31:void setStart(int) -> a
    35:35:java.lang.String toString() -> toString
net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings -> ciy:
    org.apache.logging.log4j.Logger LOGGER -> w
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature MINESHAFT_COMPOSITE_FEATURE -> x
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature VILLAGE_COMPOSITE_FEATURE -> y
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature STRONGHOLD_COMPOSITE_FEATURE -> z
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature SWAMPHUT_COMPOSITE_FEATURE -> A
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature DESERT_PYRAMID_COMPOSITE_FEATURE -> B
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature JUNGLE_PYRAMID_COMPOSITE_FEATURE -> C
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature IGLOO_COMPOSITE_FEATURE -> D
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature SHIPWRECK_COMPOSITE_FEATURE -> E
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature OCEAN_MONUMENT_COMPOSITE_FEATURE -> F
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature WATER_LAKE_COMPOSITE_FEATURE -> G
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature LAVA_LAKE_COMPOSITE_FEATURE -> H
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature ENDCITY_COMPOSITE_FEATURE -> I
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature WOOLAND_MANSION_COMPOSITE_FEATURE -> J
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature FORTRESS_COMPOSITE_FEATURE -> K
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature OCEAN_RUIN_COMPOSITE_FEATURE -> L
    net.minecraft.world.level.levelgen.feature.ConfiguredFeature PILLAGER_OUTPOST_COMPOSITE_FEATURE -> M
    java.util.Map STRUCTURE_FEATURES_STEP -> t
    java.util.Map STRUCTURE_FEATURES -> u
    java.util.Map STRUCTURE_FEATURES_DEFAULT -> v
    java.util.List layersInfo -> N
    java.util.Map structuresOptions -> O
    net.minecraft.world.level.biome.Biome biome -> P
    net.minecraft.world.level.block.state.BlockState[] layers -> Q
    boolean voidGen -> R
    int seaLevel -> S
    47:143:void <init>() -> <init>
    150:156:net.minecraft.world.level.block.Block byString(java.lang.String) -> a
    160:160:net.minecraft.world.level.biome.Biome getBiome() -> v
    164:165:void setBiome(net.minecraft.world.level.biome.Biome) -> a
    168:168:java.util.Map getStructuresOptions() -> w
    172:172:java.util.List getLayersInfo() -> x
    177:204:void updateLayers() -> y
    208:249:java.lang.String toString() -> toString
    254:286:net.minecraft.world.level.levelgen.flat.FlatLayerInfo getLayerInfoFromString(java.lang.String,int) -> a
    290:303:java.util.List getLayersInfoFromString(java.lang.String) -> c
    307:324:com.mojang.datafixers.Dynamic toObject(com.mojang.datafixers.types.DynamicOps) -> a
    329:355:net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings fromObject(com.mojang.datafixers.Dynamic) -> a
    359:410:net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings fromString(java.lang.String) -> b
    414:416:void addStructure(java.lang.String) -> d
    419:462:void addStructureOption(java.lang.String,java.lang.String,java.lang.String) -> a
    465:474:net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings getDefault() -> z
    478:478:boolean isVoidGen() -> A
    482:482:int getSeaLevel() -> B
    486:486:net.minecraft.world.level.block.state.BlockState[] getLayers() -> C
    490:491:void deleteLayer(int) -> a
    378:378:java.lang.IllegalArgumentException lambda$fromString$12(net.minecraft.resources.ResourceLocation) -> a
    348:348:void lambda$fromObject$11(net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings,java.util.Map) -> a
    349:349:void lambda$null$10(net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings,com.mojang.datafixers.Dynamic) -> a
    350:350:java.util.Map lambda$null$9(net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings,java.lang.String) -> a
    336:336:net.minecraft.world.level.levelgen.flat.FlatLayerInfo lambda$fromObject$8(com.mojang.datafixers.util.Pair) -> a
    333:333:boolean lambda$fromObject$7(com.mojang.datafixers.util.Pair) -> b
    331:331:com.mojang.datafixers.util.Pair lambda$fromObject$6(com.mojang.datafixers.Dynamic) -> b
    313:317:com.mojang.datafixers.util.Pair lambda$toObject$5(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> a
    316:316:com.mojang.datafixers.util.Pair lambda$null$4(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> b
    307:309:java.lang.Object lambda$toObject$3(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.flat.FlatLayerInfo) -> a
    124:138:void lambda$static$2(java.util.HashMap) -> a
    110:121:void lambda$static$1(java.util.HashMap) -> b
    91:107:void lambda$static$0(java.util.HashMap) -> c
    48:123:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.flat.package-info -> ciz:
net.minecraft.world.level.levelgen.package-info -> cja:
net.minecraft.world.level.levelgen.placement.CarvingMaskDecorator -> cjb:
    19:20:void <init>(java.util.function.Function) -> <init>
    24:28:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.CarvingMaskDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    17:17:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    29:32:net.minecraft.core.BlockPos lambda$getPositions$1(net.minecraft.world.level.ChunkPos,int) -> a
    28:28:boolean lambda$getPositions$0(java.util.BitSet,java.util.Random,net.minecraft.world.level.levelgen.placement.CarvingMaskDecoratorConfiguration,int) -> a
net.minecraft.world.level.levelgen.placement.CarvingMaskDecoratorConfiguration -> cjc:
    net.minecraft.world.level.levelgen.GenerationStep$Carving step -> a
    float probability -> b
    13:16:void <init>(net.minecraft.world.level.levelgen.GenerationStep$Carving,float) -> <init>
    20:22:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    28:31:net.minecraft.world.level.levelgen.placement.CarvingMaskDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration -> cjd:
    int chance -> a
    11:13:void <init>(int) -> <init>
    17:18:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    24:25:net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.placement.ChanceHeightmapDecorator -> cje:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:28:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    14:14:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.ChanceHeightmapDoubleDecorator -> cjf:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:32:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    14:14:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.ChancePassthroughDecorator -> cjg:
    12:13:void <init>(java.util.function.Function) -> <init>
    19:23:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    10:10:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.ChanceTopSolidHeightmapDecorator -> cjh:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:28:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    14:14:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.ChorusPlantPlacementDecorator -> cji:
    19:20:void <init>(java.util.function.Function) -> <init>
    24:34:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    17:17:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    26:33:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.ConfiguredDecorator -> cjj:
    net.minecraft.world.level.levelgen.placement.FeatureDecorator decorator -> a
    net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration config -> b
    24:28:void <init>(net.minecraft.world.level.levelgen.placement.FeatureDecorator,com.mojang.datafixers.Dynamic) -> <init>
    30:33:void <init>(net.minecraft.world.level.levelgen.placement.FeatureDecorator,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration) -> <init>
    36:36:boolean place(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> a
    40:42:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    47:48:net.minecraft.world.level.levelgen.placement.ConfiguredDecorator deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.placement.CountBiasedRangeDecorator -> cjk:
    14:15:void <init>(java.util.function.Function) -> <init>
    19:19:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    12:12:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    20:23:net.minecraft.core.BlockPos lambda$place$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration,int) -> a
net.minecraft.world.level.levelgen.placement.CountChanceHeightmapDecorator -> cjl:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:22:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    15:15:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    23:26:net.minecraft.core.BlockPos lambda$getPositions$1(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
    22:22:boolean lambda$getPositions$0(java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyChanceDecoratorConfiguration,int) -> a
net.minecraft.world.level.levelgen.placement.CountChanceHeightmapDoubleDecorator -> cjm:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:33:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    16:16:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    24:32:net.minecraft.core.BlockPos lambda$getPositions$1(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
    23:23:boolean lambda$getPositions$0(java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyChanceDecoratorConfiguration,int) -> a
net.minecraft.world.level.levelgen.placement.CountDepthAverageDecorator -> cjn:
    13:14:void <init>(java.util.function.Function) -> <init>
    18:22:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.placement.DepthAverageConfigation,net.minecraft.core.BlockPos) -> a
    11:11:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    23:26:net.minecraft.core.BlockPos lambda$place$0(java.util.Random,net.minecraft.core.BlockPos,int,int,int) -> a
net.minecraft.world.level.levelgen.placement.CountHeighmapDoubleDecorator -> cjo:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:33:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    16:16:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    24:32:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.CountHeight64Decorator -> cjp:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:21:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    14:14:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    22:26:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,int) -> a
net.minecraft.world.level.levelgen.placement.CountHeightmap32Decorator -> cjq:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:33:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    16:16:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    24:32:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.CountHeightmapDecorator -> cjr:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:22:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    15:15:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    23:27:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.CountTopSolidDecorator -> cjs:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:22:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    15:15:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    23:27:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.CountVeryBiasedRangeDecorator -> cjt:
    14:15:void <init>(java.util.function.Function) -> <init>
    19:19:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    12:12:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    20:23:net.minecraft.core.BlockPos lambda$place$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration,int) -> a
net.minecraft.world.level.levelgen.placement.CountWithExtraChanceHeightmapDecorator -> cju:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:27:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    15:15:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    28:31:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.DarkOakTreePlacementDecorator -> cjv:
    18:19:void <init>(java.util.function.Function) -> <init>
    25:25:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    16:16:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    26:32:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.DepthAverageConfigation -> cjw:
    int count -> a
    int baseline -> b
    int spread -> c
    13:17:void <init>(int,int,int) -> <init>
    21:24:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    30:33:net.minecraft.world.level.levelgen.placement.DepthAverageConfigation deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.placement.EmeraldPlacementDecorator -> cjx:
    14:15:void <init>(java.util.function.Function) -> <init>
    19:20:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    12:12:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    21:25:net.minecraft.core.BlockPos lambda$place$0(java.util.Random,net.minecraft.core.BlockPos,int) -> a
net.minecraft.world.level.levelgen.placement.EndGatewayPlacementDecorator -> cjy:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:32:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    15:15:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.EndIslandPlacementDecorator -> cjz:
    13:14:void <init>(java.util.function.Function) -> <init>
    18:29:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    11:11:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.FeatureDecorator -> cka:
    net.minecraft.world.level.levelgen.placement.FeatureDecorator NOPE -> a
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_HEIGHTMAP -> b
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_TOP_SOLID -> c
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_HEIGHTMAP_32 -> d
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_HEIGHTMAP_DOUBLE -> e
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_HEIGHT_64 -> f
    net.minecraft.world.level.levelgen.placement.FeatureDecorator NOISE_HEIGHTMAP_32 -> g
    net.minecraft.world.level.levelgen.placement.FeatureDecorator NOISE_HEIGHTMAP_DOUBLE -> h
    net.minecraft.world.level.levelgen.placement.FeatureDecorator CHANCE_HEIGHTMAP -> i
    net.minecraft.world.level.levelgen.placement.FeatureDecorator CHANCE_HEIGHTMAP_DOUBLE -> j
    net.minecraft.world.level.levelgen.placement.FeatureDecorator CHANCE_PASSTHROUGH -> k
    net.minecraft.world.level.levelgen.placement.FeatureDecorator CHANCE_TOP_SOLID_HEIGHTMAP -> l
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_EXTRA_HEIGHTMAP -> m
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_RANGE -> n
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_BIASED_RANGE -> o
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_VERY_BIASED_RANGE -> p
    net.minecraft.world.level.levelgen.placement.FeatureDecorator RANDOM_COUNT_RANGE -> q
    net.minecraft.world.level.levelgen.placement.FeatureDecorator CHANCE_RANGE -> r
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_CHANCE_HEIGHTMAP -> s
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_CHANCE_HEIGHTMAP_DOUBLE -> t
    net.minecraft.world.level.levelgen.placement.FeatureDecorator COUNT_DEPTH_AVERAGE -> u
    net.minecraft.world.level.levelgen.placement.FeatureDecorator TOP_SOLID_HEIGHTMAP -> v
    net.minecraft.world.level.levelgen.placement.FeatureDecorator TOP_SOLID_HEIGHTMAP_RANGE -> w
    net.minecraft.world.level.levelgen.placement.FeatureDecorator TOP_SOLID_HEIGHTMAP_NOISE_BIASED -> x
    net.minecraft.world.level.levelgen.placement.FeatureDecorator CARVING_MASK -> y
    net.minecraft.world.level.levelgen.placement.FeatureDecorator FOREST_ROCK -> z
    net.minecraft.world.level.levelgen.placement.FeatureDecorator HELL_FIRE -> A
    net.minecraft.world.level.levelgen.placement.FeatureDecorator MAGMA -> B
    net.minecraft.world.level.levelgen.placement.FeatureDecorator EMERALD_ORE -> C
    net.minecraft.world.level.levelgen.placement.FeatureDecorator LAVA_LAKE -> D
    net.minecraft.world.level.levelgen.placement.FeatureDecorator WATER_LAKE -> E
    net.minecraft.world.level.levelgen.placement.FeatureDecorator DUNGEONS -> F
    net.minecraft.world.level.levelgen.placement.FeatureDecorator DARK_OAK_TREE -> G
    net.minecraft.world.level.levelgen.placement.FeatureDecorator ICEBERG -> H
    net.minecraft.world.level.levelgen.placement.FeatureDecorator LIGHT_GEM_CHANCE -> I
    net.minecraft.world.level.levelgen.placement.FeatureDecorator END_ISLAND -> J
    net.minecraft.world.level.levelgen.placement.FeatureDecorator CHORUS_PLANT -> K
    net.minecraft.world.level.levelgen.placement.FeatureDecorator END_GATEWAY -> L
    java.util.function.Function configurationFactory -> M
    71:71:net.minecraft.world.level.levelgen.placement.FeatureDecorator register(java.lang.String,net.minecraft.world.level.levelgen.placement.FeatureDecorator) -> a
    76:78:void <init>(java.util.function.Function) -> <init>
    81:81:net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration createSettings(com.mojang.datafixers.Dynamic) -> a
    85:85:net.minecraft.world.level.levelgen.placement.ConfiguredDecorator configured(net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration) -> a
    89:94:boolean placeFeature(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.world.level.levelgen.feature.ConfiguredFeature) -> a
    java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    101:101:java.lang.String toString() -> toString
    91:93:void lambda$placeFeature$0(net.minecraft.world.level.levelgen.feature.ConfiguredFeature,net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,java.util.concurrent.atomic.AtomicBoolean,net.minecraft.core.BlockPos) -> a
    30:68:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.placement.ForestRockPlacementDecorator -> ckb:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:23:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    15:15:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    24:27:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.FrequencyChanceDecoratorConfiguration -> ckc:
    int count -> a
    float chance -> b
    12:15:void <init>(int,float) -> <init>
    19:21:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    27:29:net.minecraft.world.level.levelgen.placement.FrequencyChanceDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration -> ckd:
    int count -> a
    11:13:void <init>(int) -> <init>
    17:18:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    24:25:net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration -> cke:
    int count -> a
    float extraChance -> b
    int extraCount -> c
    13:17:void <init>(int,float,int) -> <init>
    21:24:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    30:33:net.minecraft.world.level.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.placement.IcebergPlacementDecorator -> ckf:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:28:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    14:14:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.LakeLavaPlacementDecorator -> ckg:
    15:16:void <init>(java.util.function.Function) -> <init>
    20:29:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    13:13:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.LakeWaterPlacementDecorator -> ckh:
    15:16:void <init>(java.util.function.Function) -> <init>
    20:27:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    13:13:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.MonsterRoomPlacementDecorator -> cki:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:22:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    14:14:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    23:27:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.chunk.ChunkGenerator,int) -> a
net.minecraft.world.level.levelgen.placement.NoiseCountFactorDecoratorConfiguration -> ckj:
    int noiseToCountRatio -> a
    double noiseFactor -> b
    double noiseOffset -> c
    net.minecraft.world.level.levelgen.Heightmap$Types heightmap -> d
    15:20:void <init>(int,double,double,net.minecraft.world.level.levelgen.Heightmap$Types) -> <init>
    24:28:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    34:38:net.minecraft.world.level.levelgen.placement.NoiseCountFactorDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.placement.NoiseHeightmap32Decorator -> ckk:
    20:21:void <init>(java.util.function.Function) -> <init>
    25:38:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.NoiseDependantDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    18:18:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    29:37:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.NoiseHeightmapDoubleDecorator -> ckl:
    20:21:void <init>(java.util.function.Function) -> <init>
    25:38:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.NoiseDependantDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    18:18:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    29:37:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.NopePlacementDecorator -> ckm:
    13:14:void <init>(java.util.function.Function) -> <init>
    18:18:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    11:11:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.RangeDecoratorConfiguration -> ckn:
    int min -> a
    int max -> b
    12:15:void <init>(int,int) -> <init>
    19:21:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    27:29:net.minecraft.world.level.levelgen.placement.RangeDecoratorConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.placement.SimpleFeatureDecorator -> cko:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:21:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.TopSolidHeightMapDecorator -> ckp:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:25:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    15:15:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.TopSolidHeightMapNoiseBasedDecorator -> ckq:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:25:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.NoiseCountFactorDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    15:15:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    26:30:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.placement.NoiseCountFactorDecoratorConfiguration,int) -> a
net.minecraft.world.level.levelgen.placement.TopSolidHeightMapRangeDecorator -> ckr:
    17:18:void <init>(java.util.function.Function) -> <init>
    22:23:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.RangeDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    15:15:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    24:27:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,int) -> a
net.minecraft.world.level.levelgen.placement.nether.ChanceRangeDecorator -> cks:
    14:15:void <init>(java.util.function.Function) -> <init>
    19:26:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.ChanceRangeDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    12:12:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.nether.CountRangeDecorator -> ckt:
    15:16:void <init>(java.util.function.Function) -> <init>
    20:20:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    13:13:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    21:24:net.minecraft.core.BlockPos lambda$place$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration,int) -> a
net.minecraft.world.level.levelgen.placement.nether.HellFireDecorator -> cku:
    17:18:void <init>(java.util.function.Function) -> <init>
    24:33:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    15:15:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.placement.nether.LightGemChanceDecorator -> ckv:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:21:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    14:14:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    22:25:net.minecraft.core.BlockPos lambda$place$0(java.util.Random,net.minecraft.core.BlockPos,int) -> a
net.minecraft.world.level.levelgen.placement.nether.MagmaDecorator -> ckw:
    18:19:void <init>(java.util.function.Function) -> <init>
    23:25:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.placement.FrequencyDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    16:16:java.util.stream.Stream getPositions(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    26:29:net.minecraft.core.BlockPos lambda$getPositions$0(java.util.Random,net.minecraft.core.BlockPos,int,int) -> a
net.minecraft.world.level.levelgen.placement.nether.RandomCountRangeDecorator -> ckx:
    15:16:void <init>(java.util.function.Function) -> <init>
    20:21:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    13:13:java.util.stream.Stream place(java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration,net.minecraft.core.BlockPos) -> a
    22:25:net.minecraft.core.BlockPos lambda$place$0(java.util.Random,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.CountRangeDecoratorConfiguration,int) -> a
net.minecraft.world.level.levelgen.placement.nether.package-info -> cky:
net.minecraft.world.level.levelgen.placement.package-info -> ckz:
net.minecraft.world.level.levelgen.structure.BeardedStructureStart -> cla:
    8:9:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    13:24:void calculateBoundingBox() -> b
net.minecraft.world.level.levelgen.structure.BoundingBox -> clb:
    int x0 -> a
    int y0 -> b
    int z0 -> c
    int x1 -> d
    int y1 -> e
    int z1 -> f
    19:20:void <init>() -> <init>
    22:31:void <init>(int[]) -> <init>
    34:34:net.minecraft.world.level.levelgen.structure.BoundingBox getUnknownBox() -> a
    38:52:net.minecraft.world.level.levelgen.structure.BoundingBox orientBox(int,int,int,int,int,int,int,int,int,net.minecraft.core.Direction) -> a
    57:57:net.minecraft.world.level.levelgen.structure.BoundingBox createProper(int,int,int,int,int,int) -> a
    60:67:void <init>(net.minecraft.world.level.levelgen.structure.BoundingBox) -> <init>
    69:76:void <init>(int,int,int,int,int,int) -> <init>
    78:85:void <init>(net.minecraft.core.Vec3i,net.minecraft.core.Vec3i) -> <init>
    87:96:void <init>(int,int,int,int) -> <init>
    99:99:boolean isInsideOf(net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    103:103:boolean intersects(net.minecraft.world.level.levelgen.structure.BoundingBox) -> b
    107:107:boolean intersects(int,int,int,int,int,int) -> b
    111:111:boolean intersects(net.minecraft.core.Vec3i,net.minecraft.core.Vec3i) -> a
    115:115:boolean intersects(int,int,int,int) -> a
    119:125:void expand(net.minecraft.world.level.levelgen.structure.BoundingBox) -> c
    129:140:net.minecraft.world.level.levelgen.structure.BoundingBox getIntersection(net.minecraft.world.level.levelgen.structure.BoundingBox) -> d
    144:150:void move(int,int,int) -> a
    153:153:net.minecraft.world.level.levelgen.structure.BoundingBox moved(int,int,int) -> b
    164:165:void move(net.minecraft.core.Vec3i) -> a
    168:168:boolean isInside(net.minecraft.core.Vec3i) -> b
    172:172:net.minecraft.core.Vec3i getLength() -> b
    176:176:int getXSpan() -> c
    180:180:int getYSpan() -> d
    184:184:int getZSpan() -> e
    188:188:net.minecraft.core.Vec3i getCenter() -> f
    193:200:java.lang.String toString() -> toString
    204:204:net.minecraft.nbt.IntArrayTag createTag() -> g
net.minecraft.world.level.levelgen.structure.BoundingBox$1 -> clb$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    38:38:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.BuriedTreasurePieces -> clc:
    19:19:void <init>() -> <init>
net.minecraft.world.level.levelgen.structure.BuriedTreasurePieces$BuriedTreasurePiece -> clc$a:
    22:24:void <init>(net.minecraft.core.BlockPos) -> <init>
    27:28:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    32:32:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    36:72:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    76:77:boolean isLiquid(net.minecraft.world.level.block.state.BlockState) -> a
net.minecraft.world.level.levelgen.structure.DesertPyramidPiece -> cld:
    boolean[] hasPlacedChest -> e
    18:22:void <init>(java.util.Random,int,int) -> <init>
    18:30:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    34:39:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    44:243:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.EndCityPieces -> cle:
    net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings OVERWRITE -> a
    net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings INSERT -> b
    net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator HOUSE_TOWER_GENERATOR -> c
    java.util.List TOWER_BRIDGES -> d
    net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator TOWER_GENERATOR -> e
    net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator TOWER_BRIDGE_GENERATOR -> f
    java.util.List FAT_TOWER_BRIDGES -> g
    net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator FAT_TOWER_GENERATOR -> h
    27:27:void <init>() -> <init>
    34:38:net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece addPiece(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPos,java.lang.String,net.minecraft.world.level.block.Rotation,boolean) -> b
    113:124:void startHouseTower(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.List,java.util.Random) -> a
    127:128:net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece addHelper(java.util.List,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece) -> b
    132:154:boolean recursiveChildren(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator,int,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPos,java.util.List,java.util.Random) -> b
    27:27:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings access$000() -> a
    27:27:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings access$100() -> b
    27:27:net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece access$200(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPos,java.lang.String,net.minecraft.world.level.block.Rotation,boolean) -> a
    27:27:net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece access$300(java.util.List,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece) -> a
    27:27:net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator access$400() -> c
    27:27:boolean access$500(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator,int,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPos,java.util.List,java.util.Random) -> a
    27:27:java.util.List access$600() -> d
    27:27:net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator access$700() -> e
    27:27:net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator access$800() -> f
    27:27:net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator access$900() -> g
    27:27:java.util.List access$1000() -> h
    30:295:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.EndCityPieces$1 -> cle$1:
    157:157:void <init>() -> <init>
    160:160:void init() -> a
    164:186:boolean generate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPos,java.util.List,java.util.Random) -> a
net.minecraft.world.level.levelgen.structure.EndCityPieces$2 -> cle$2:
    197:197:void <init>() -> <init>
    200:200:void init() -> a
    204:236:boolean generate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPos,java.util.List,java.util.Random) -> a
net.minecraft.world.level.levelgen.structure.EndCityPieces$3 -> cle$3:
    boolean shipCreated -> a
    240:240:void <init>() -> <init>
    245:246:void init() -> a
    250:284:boolean generate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPos,java.util.List,java.util.Random) -> a
net.minecraft.world.level.levelgen.structure.EndCityPieces$4 -> cle$4:
    295:295:void <init>() -> <init>
    298:298:void init() -> a
    303:323:boolean generate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPos,java.util.List,java.util.Random) -> a
net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece -> cle$a:
    java.lang.String templateName -> d
    net.minecraft.world.level.block.Rotation rotation -> e
    boolean overwrite -> f
    47:55:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,java.lang.String,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,boolean) -> <init>
    58:65:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    68:72:void loadTemplate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager) -> a
    76:81:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    85:101:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
net.minecraft.world.level.levelgen.structure.EndCityPieces$SectionGenerator -> cle$b:
    void init() -> a
    boolean generate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,net.minecraft.world.level.levelgen.structure.EndCityPieces$EndCityPiece,net.minecraft.core.BlockPos,java.util.List,java.util.Random) -> a
net.minecraft.world.level.levelgen.structure.IglooPieces -> clf:
    net.minecraft.resources.ResourceLocation STRUCTURE_LOCATION_IGLOO -> a
    net.minecraft.resources.ResourceLocation STRUCTURE_LOCATION_LADDER -> b
    net.minecraft.resources.ResourceLocation STRUCTURE_LOCATION_LABORATORY -> c
    java.util.Map PIVOTS -> d
    java.util.Map OFFSETS -> e
    30:30:void <init>() -> <init>
    50:59:void addPieces(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.List,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.NoneFeatureConfiguration) -> a
    30:30:java.util.Map access$000() -> a
    30:30:java.util.Map access$100() -> b
    30:30:net.minecraft.resources.ResourceLocation access$200() -> c
    33:43:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.IglooPieces$IglooPiece -> clf$a:
    net.minecraft.resources.ResourceLocation templateLocation -> d
    net.minecraft.world.level.block.Rotation rotation -> e
    66:72:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.resources.ResourceLocation,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,int) -> <init>
    75:79:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    82:85:void loadTemplate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager) -> a
    89:92:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    96:105:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    109:128:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.JunglePyramidPiece -> clg:
    boolean placedMainChest -> e
    boolean placedHiddenChest -> f
    boolean placedTrap1 -> g
    boolean placedTrap2 -> h
    net.minecraft.world.level.levelgen.structure.JunglePyramidPiece$MossStoneSelector STONE_SELECTOR -> i
    33:34:void <init>(java.util.Random,int,int) -> <init>
    37:42:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    46:51:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    55:249:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    263:263:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.JunglePyramidPiece$1 -> clg$1:
net.minecraft.world.level.levelgen.structure.JunglePyramidPiece$MossStoneSelector -> clg$a:
    252:252:void <init>() -> <init>
    255:260:void next(java.util.Random,int,int,int,boolean) -> a
    252:252:void <init>(net.minecraft.world.level.levelgen.structure.JunglePyramidPiece$1) -> <init>
net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler -> clh:
    java.util.Map CURRENT_TO_LEGACY_MAP -> a
    java.util.Map LEGACY_TO_CURRENT_MAP -> b
    boolean hasLegacyData -> c
    java.util.Map dataMap -> d
    java.util.Map indexMap -> e
    java.util.List legacyKeys -> f
    java.util.List currentKeys -> g
    50:66:void <init>(net.minecraft.world.level.storage.DimensionDataStorage,java.util.List,java.util.List) -> <init>
    69:76:void removeIndex(long) -> a
    79:115:net.minecraft.nbt.CompoundTag updateFromLegacy(net.minecraft.nbt.CompoundTag) -> a
    119:127:boolean hasLegacyStart(int,int,java.lang.String) -> a
    131:140:boolean isUnhandledStructureStart(int,int) -> a
    144:172:net.minecraft.nbt.CompoundTag updateStructureStart(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.ChunkPos) -> a
    176:225:void populateCaches(net.minecraft.world.level.storage.DimensionDataStorage) -> a
    228:258:net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler getLegacyStructureHandler(net.minecraft.world.level.dimension.DimensionType,net.minecraft.world.level.storage.DimensionDataStorage) -> a
    210:210:net.minecraft.world.level.levelgen.structure.StructureFeatureIndexSavedData lambda$populateCaches$3(java.lang.String) -> a
    206:206:it.unimi.dsi.fastutil.longs.Long2ObjectMap lambda$populateCaches$2(java.lang.String) -> b
    42:46:void lambda$static$1(java.util.HashMap) -> a
    27:38:void lambda$static$0(java.util.HashMap) -> b
    26:41:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.MineShaftPieces -> cli:
    34:34:void <init>() -> <init>
    90:108:net.minecraft.world.level.levelgen.structure.MineShaftPieces$MineShaftPiece createRandomShaftPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int,net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type) -> a
    112:125:net.minecraft.world.level.levelgen.structure.MineShaftPieces$MineShaftPiece generateAndAddPiece(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> b
    34:34:net.minecraft.world.level.levelgen.structure.MineShaftPieces$MineShaftPiece access$000(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
net.minecraft.world.level.levelgen.structure.MineShaftPieces$1 -> cli$1:
    int[] $SwitchMap$net$minecraft$world$level$levelgen$feature$MineshaftFeature$Type -> a
    int[] $SwitchMap$net$minecraft$core$Direction -> b
    60:298:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.MineShaftPieces$MineShaftCorridor -> cli$a:
    boolean hasRails -> b
    boolean spiderCorridor -> c
    boolean hasPlacedSpider -> d
    int numSections -> e
    260:266:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    270:275:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    278:289:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction,net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type) -> <init>
    292:329:net.minecraft.world.level.levelgen.structure.BoundingBox findCorridorSize(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction) -> a
    334:401:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    405:417:boolean createChest(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random,int,int,int,net.minecraft.resources.ResourceLocation) -> a
    422:505:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    510:527:void placeSupport(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int,int,java.util.Random) -> a
    530:533:void placeCobWeb(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random,float,int,int,int) -> a
net.minecraft.world.level.levelgen.structure.MineShaftPieces$MineShaftCrossing -> cli$b:
    net.minecraft.core.Direction direction -> b
    boolean isTwoFloored -> c
    541:544:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    548:551:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    554:559:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction,net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type) -> <init>
    562:596:net.minecraft.world.level.levelgen.structure.BoundingBox findCrossing(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction) -> a
    601:642:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    646:680:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    684:687:void placeSupportPillar(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int) -> a
net.minecraft.world.level.levelgen.structure.MineShaftPieces$MineShaftPiece -> cli$c:
    net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type type -> a
    45:47:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,int,net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type) -> <init>
    50:52:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.nbt.CompoundTag) -> <init>
    56:57:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    60:65:net.minecraft.world.level.block.state.BlockState getPlanksBlock() -> a
    70:75:net.minecraft.world.level.block.state.BlockState getFenceBlock() -> b
    80:85:boolean isSupportingBox(net.minecraft.world.level.BlockGetter,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int) -> a
net.minecraft.world.level.levelgen.structure.MineShaftPieces$MineShaftRoom -> cli$d:
    java.util.List childEntranceBoxes -> b
    129:136:void <init>(int,java.util.Random,int,int,net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type) -> <init>
    129:144:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    148:213:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    217:231:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    236:240:void move(int,int,int) -> a
    244:250:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
net.minecraft.world.level.levelgen.structure.MineShaftPieces$MineShaftStairs -> cli$e:
    692:695:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction,net.minecraft.world.level.levelgen.feature.MineshaftFeature$Type) -> <init>
    698:699:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    703:729:net.minecraft.world.level.levelgen.structure.BoundingBox findStairs(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction) -> a
    734:755:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    759:772:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces -> clj:
    net.minecraft.world.level.levelgen.structure.NetherBridgePieces$PieceWeight[] BRIDGE_PIECE_WEIGHTS -> a
    net.minecraft.world.level.levelgen.structure.NetherBridgePieces$PieceWeight[] CASTLE_PIECE_WEIGHTS -> b
    27:27:void <init>() -> <init>
    78:108:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$NetherBridgePiece findAndCreateBridgePieceFactory(net.minecraft.world.level.levelgen.structure.NetherBridgePieces$PieceWeight,java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> b
    27:27:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$NetherBridgePiece access$000(net.minecraft.world.level.levelgen.structure.NetherBridgePieces$PieceWeight,java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    27:27:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$PieceWeight[] access$100() -> a
    27:27:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$PieceWeight[] access$200() -> b
    59:67:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$1 -> clj$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    188:188:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$BridgeCrossing -> clj$a:
    462:466:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    469:478:void <init>(java.util.Random,int,int) -> <init>
    481:482:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.nbt.CompoundTag) -> <init>
    485:486:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    490:493:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    496:502:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$BridgeCrossing createPiece(java.util.List,int,int,int,net.minecraft.core.Direction,int) -> a
    508:546:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$BridgeEndFiller -> clj$b:
    int selfSeed -> a
    389:394:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    397:399:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    402:408:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$BridgeEndFiller createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    413:416:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    420:452:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$BridgeStraight -> clj$c:
    316:320:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    323:324:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    328:329:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    332:338:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$BridgeStraight createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    344:377:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleCorridorStairsPiece -> clj$d:
    1385:1389:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    1392:1393:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1397:1398:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    1401:1407:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleCorridorStairsPiece createPiece(java.util.List,int,int,int,net.minecraft.core.Direction,int) -> a
    1413:1446:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleCorridorTBalconyPiece -> clj$e:
    1456:1460:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    1463:1464:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1468:1477:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    1480:1486:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleCorridorTBalconyPiece createPiece(java.util.List,int,int,int,net.minecraft.core.Direction,int) -> a
    1491:1534:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleEntrance -> clj$f:
    813:817:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    820:821:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    825:826:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    829:835:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleEntrance createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    841:925:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleSmallCorridorCrossingPiece -> clj$g:
    1155:1159:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    1162:1163:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1167:1170:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    1173:1179:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleSmallCorridorCrossingPiece createPiece(java.util.List,int,int,int,net.minecraft.core.Direction,int) -> a
    1185:1205:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleSmallCorridorLeftTurnPiece -> clj$h:
    boolean isNeedingChest -> a
    1302:1308:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    1311:1313:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1317:1320:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    1324:1325:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    1328:1334:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleSmallCorridorLeftTurnPiece createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    1340:1375:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleSmallCorridorPiece -> clj$i:
    1093:1097:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    1100:1101:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1105:1106:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    1109:1115:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleSmallCorridorPiece createPiece(java.util.List,int,int,int,net.minecraft.core.Direction,int) -> a
    1121:1145:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleSmallCorridorRightTurnPiece -> clj$j:
    boolean isNeedingChest -> a
    1217:1223:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    1226:1228:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1232:1235:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    1239:1240:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    1243:1249:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleSmallCorridorRightTurnPiece createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    1255:1290:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleStalkRoom -> clj$k:
    935:939:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    942:943:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    947:949:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    952:958:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$CastleStalkRoom createPiece(java.util.List,int,int,int,net.minecraft.core.Direction,int) -> a
    964:1083:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$MonsterThrone -> clj$l:
    boolean hasPlacedSpawner -> a
    710:714:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    717:719:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    723:726:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    729:735:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$MonsterThrone createPiece(java.util.List,int,int,int,int,net.minecraft.core.Direction) -> a
    741:803:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$NetherBridgePiece -> clj$m:
    113:114:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,int) -> <init>
    117:118:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.nbt.CompoundTag) -> <init>
    122:122:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    125:133:int updatePieceWeight(java.util.List) -> a
    137:165:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$NetherBridgePiece generatePiece(net.minecraft.world.level.levelgen.structure.NetherBridgePieces$StartPiece,java.util.List,java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    169:181:net.minecraft.world.level.levelgen.structure.StructurePiece generateAndAddPiece(net.minecraft.world.level.levelgen.structure.NetherBridgePieces$StartPiece,java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int,boolean) -> a
    186:199:net.minecraft.world.level.levelgen.structure.StructurePiece generateChildForward(net.minecraft.world.level.levelgen.structure.NetherBridgePieces$StartPiece,java.util.List,java.util.Random,int,int,boolean) -> a
    204:217:net.minecraft.world.level.levelgen.structure.StructurePiece generateChildLeft(net.minecraft.world.level.levelgen.structure.NetherBridgePieces$StartPiece,java.util.List,java.util.Random,int,int,boolean) -> b
    222:235:net.minecraft.world.level.levelgen.structure.StructurePiece generateChildRight(net.minecraft.world.level.levelgen.structure.NetherBridgePieces$StartPiece,java.util.List,java.util.Random,int,int,boolean) -> c
    239:239:boolean isOkBox(net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    243:261:void generateLightPost(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int,int) -> a
    264:265:void generateLightPostFacingRight(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int) -> a
    268:269:void generateLightPostFacingLeft(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int) -> b
    272:273:void generateLightPostFacingUp(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int) -> c
    276:277:void generateLightPostFacingDown(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int) -> d
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$PieceWeight -> clj$n:
    java.lang.Class pieceClass -> a
    int weight -> b
    int placeCount -> c
    int maxPlaceCount -> d
    boolean allowInRow -> e
    39:44:void <init>(java.lang.Class,int,int,boolean) -> <init>
    47:48:void <init>(java.lang.Class,int,int) -> <init>
    51:51:boolean doPlace(int) -> a
    55:55:boolean isValid() -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$RoomCrossing -> clj$o:
    556:560:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    563:564:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    568:571:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    574:580:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$RoomCrossing createPiece(java.util.List,int,int,int,net.minecraft.core.Direction,int) -> a
    586:620:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$StairsRoom -> clj$p:
    630:634:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    637:638:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    642:643:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    646:652:net.minecraft.world.level.levelgen.structure.NetherBridgePieces$StairsRoom createPiece(java.util.List,int,int,int,int,net.minecraft.core.Direction) -> a
    658:698:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.NetherBridgePieces$StartPiece -> clj$q:
    net.minecraft.world.level.levelgen.structure.NetherBridgePieces$PieceWeight previousPiece -> a
    java.util.List availableBridgePieces -> b
    java.util.List availableCastlePieces -> c
    java.util.List pendingChildren -> d
    287:303:void <init>(java.util.Random,int,int) -> <init>
    287:307:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces -> clk:
    26:27:void <init>() -> <init>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$1 -> clk$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    115:115:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitDoubleXRoom -> clk$a:
    1928:1928:void <init>() -> <init>
    1931:1931:boolean fits(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> a
    1936:1938:net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,java.util.Random) -> a
    1928:1928:void <init>(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitDoubleXYRoom -> clk$b:
    1960:1960:void <init>() -> <init>
    1963:1970:boolean fits(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> a
    1975:1979:net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,java.util.Random) -> a
    1960:1960:void <init>(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitDoubleYRoom -> clk$c:
    1914:1914:void <init>() -> <init>
    1917:1917:boolean fits(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> a
    1922:1924:net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,java.util.Random) -> a
    1914:1914:void <init>(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitDoubleYZRoom -> clk$d:
    1983:1983:void <init>() -> <init>
    1986:1993:boolean fits(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> a
    1998:2002:net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,java.util.Random) -> a
    1983:1983:void <init>(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitDoubleZRoom -> clk$e:
    1942:1942:void <init>() -> <init>
    1945:1945:boolean fits(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> a
    1950:1956:net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,java.util.Random) -> a
    1942:1942:void <init>(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitSimpleRoom -> clk$f:
    1888:1888:void <init>() -> <init>
    1891:1891:boolean fits(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> a
    1896:1897:net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,java.util.Random) -> a
    1888:1888:void <init>(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$FitSimpleTopRoom -> clk$g:
    1901:1901:void <init>() -> <init>
    1904:1904:boolean fits(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> a
    1909:1910:net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,java.util.Random) -> a
    1901:1901:void <init>(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$MonumentBuilding -> clk$h:
    net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition sourceRoom -> p
    net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition coreRoom -> q
    java.util.List childPieces -> r
    227:289:void <init>(java.util.Random,int,int,net.minecraft.core.Direction) -> <init>
    227:293:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    296:411:java.util.List generateRoomGraph(java.util.Random) -> a
    416:475:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    480:521:void generateWing(boolean,int,net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    525:546:void generateEntranceArchs(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    551:613:void generateEntranceWall(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> b
    618:656:void generateRoofPiece(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> c
    661:718:void generateLowerWall(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> d
    723:786:void generateMiddleWall(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> e
    791:841:void generateUpperWall(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> f
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$MonumentRoomFitter -> clk$i:
    boolean fits(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> a
    net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece create(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,java.util.Random) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentCoreRoom -> clk$j:
    1571:1572:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> <init>
    1575:1576:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1580:1654:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleXRoom -> clk$k:
    1198:1199:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> <init>
    1202:1203:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1207:1262:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleXYRoom -> clk$l:
    1360:1361:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> <init>
    1364:1365:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1369:1463:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleYRoom -> clk$m:
    1117:1118:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> <init>
    1121:1122:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1126:1192:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleYZRoom -> clk$n:
    1469:1470:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> <init>
    1473:1474:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1478:1565:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentDoubleZRoom -> clk$o:
    1268:1269:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> <init>
    1272:1273:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1277:1354:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentEntryRoom -> clk$p:
    846:847:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> <init>
    850:851:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    856:880:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentPenthouse -> clk$q:
    1771:1772:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.BoundingBox) -> <init>
    1775:1776:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1780:1825:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentPiece -> clk$r:
    net.minecraft.world.level.block.state.BlockState BASE_GRAY -> a
    net.minecraft.world.level.block.state.BlockState BASE_LIGHT -> b
    net.minecraft.world.level.block.state.BlockState BASE_BLACK -> c
    net.minecraft.world.level.block.state.BlockState DOT_DECO_DATA -> d
    net.minecraft.world.level.block.state.BlockState LAMP_BLOCK -> e
    net.minecraft.world.level.block.state.BlockState FILL_BLOCK -> f
    java.util.Set FILL_KEEP -> g
    int GRIDROOM_SOURCE_INDEX -> h
    int GRIDROOM_TOP_CONNECT_INDEX -> i
    int GRIDROOM_LEFTWING_CONNECT_INDEX -> j
    int GRIDROOM_RIGHTWING_CONNECT_INDEX -> k
    net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition roomDefinition -> l
    68:68:int getRoomIndex(int,int,int) -> b
    74:74:int getRoomX(int) -> a
    78:78:int getRoomY(int) -> b
    82:82:int getRoomZ(int) -> c
    86:87:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,int) -> <init>
    90:93:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.BoundingBox) -> <init>
    96:130:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,int,net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,int,int,int) -> <init>
    133:134:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.nbt.CompoundTag) -> <init>
    138:138:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    141:155:void generateWaterBox(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int,int,int) -> a
    158:171:void generateDefaultFloor(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,boolean) -> a
    174:184:void generateBoxOnFillOnly(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    187:191:boolean chunkIntersects(net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int) -> a
    195:207:boolean spawnElder(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int) -> a
    30:59:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentSimpleRoom -> clk$s:
    int mainDesign -> p
    888:890:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,java.util.Random) -> <init>
    893:894:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    898:1052:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentSimpleTopRoom -> clk$t:
    1058:1059:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> <init>
    1062:1063:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1067:1111:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$OceanMonumentWingRoom -> clk$u:
    int mainDesign -> p
    1662:1664:void <init>(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.BoundingBox,int) -> <init>
    1667:1668:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1672:1765:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition -> clk$v:
    int index -> a
    net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition[] connections -> b
    boolean[] hasOpening -> c
    boolean claimed -> d
    boolean isSource -> e
    int scanIndex -> f
    1831:1839:void <init>(int) -> <init>
    1842:1844:void setConnection(net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> a
    1847:1850:void updateOpenings() -> a
    1853:1864:boolean findSource(int) -> a
    1868:1868:boolean isSpecial() -> b
    1872:1878:int countOpenings() -> c
    1829:1829:int access$000(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> a
    1829:1829:boolean access$102(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,boolean) -> a
    1829:1829:boolean access$100(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> b
    1829:1829:boolean access$902(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition,boolean) -> b
    1829:1829:net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition[] access$1000(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> c
    1829:1829:boolean[] access$1100(net.minecraft.world.level.levelgen.structure.OceanMonumentPieces$RoomDefinition) -> d
net.minecraft.world.level.levelgen.structure.OceanRuinFeature -> cll:
    21:22:void <init>(java.util.function.Function) -> <init>
    26:26:java.lang.String getFeatureName() -> b
    31:31:int getLookupRange() -> c
    36:36:int getSpacing(net.minecraft.world.level.chunk.ChunkGenerator) -> a
    41:41:int getSeparation(net.minecraft.world.level.chunk.ChunkGenerator) -> b
    46:46:net.minecraft.world.level.levelgen.feature.StructureFeature$StructureStartFactory getStartFactory() -> a
    51:51:int getRandomSalt() -> d
net.minecraft.world.level.levelgen.structure.OceanRuinFeature$OceanRuinStart -> cll$a:
    56:57:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    61:70:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type -> cll$b:
    net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type WARM -> a
    net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type COLD -> b
    java.util.Map BY_NAME -> c
    java.lang.String name -> d
    net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type[] $VALUES -> e
    73:73:net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type[] values() -> values
    73:73:net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type valueOf(java.lang.String) -> valueOf
    81:83:void <init>(java.lang.String,int,java.lang.String) -> <init>
    86:86:java.lang.String getName() -> a
    90:90:net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type byName(java.lang.String) -> a
    78:78:net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type lambda$static$0(net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type) -> a
    73:78:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.OceanRuinPieces -> clm:
    net.minecraft.resources.ResourceLocation[] WARM_RUINS -> a
    net.minecraft.resources.ResourceLocation[] RUINS_BRICK -> b
    net.minecraft.resources.ResourceLocation[] RUINS_CRACKED -> c
    net.minecraft.resources.ResourceLocation[] RUINS_MOSSY -> d
    net.minecraft.resources.ResourceLocation[] BIG_RUINS_BRICK -> e
    net.minecraft.resources.ResourceLocation[] BIG_RUINS_MOSSY -> f
    net.minecraft.resources.ResourceLocation[] BIG_RUINS_CRACKED -> g
    net.minecraft.resources.ResourceLocation[] BIG_WARM_RUINS -> h
    39:39:void <init>() -> <init>
    113:113:net.minecraft.resources.ResourceLocation getSmallWarmRuin(java.util.Random) -> a
    117:117:net.minecraft.resources.ResourceLocation getBigWarmRuin(java.util.Random) -> b
    121:129:void addPieces(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.List,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration) -> a
    132:156:void addClusterRuins(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,java.util.Random,net.minecraft.world.level.block.Rotation,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration,java.util.List) -> a
    159:169:java.util.List allPositions(java.util.Random,int,int) -> a
    173:186:void addPiece(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.List,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.OceanRuinConfiguration,boolean,float) -> a
    40:105:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.OceanRuinPieces$OceanRuinPiece -> clm$a:
    net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type biomeType -> d
    float integrity -> e
    net.minecraft.resources.ResourceLocation templateLocation -> f
    net.minecraft.world.level.block.Rotation rotation -> g
    boolean isLarge -> h
    196:206:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.resources.ResourceLocation,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,float,net.minecraft.world.level.levelgen.structure.OceanRuinFeature$Type,boolean) -> <init>
    209:216:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    219:222:void loadTemplate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager) -> a
    226:232:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    236:256:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    260:266:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    270:299:int getHeight(net.minecraft.core.BlockPos,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.levelgen.structure.PillagerOutpostPieces -> cln:
    23:23:void <init>() -> <init>
    72:73:void addPieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,java.util.List,net.minecraft.world.level.levelgen.WorldgenRandom) -> a
    25:69:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.PillagerOutpostPieces$PillagerOutpostPiece -> cln$a:
    77:78:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement,net.minecraft.core.BlockPos,int,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.BoundingBox) -> <init>
    81:82:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
net.minecraft.world.level.levelgen.structure.PoolElementStructurePiece -> clo:
    net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement element -> a
    net.minecraft.core.BlockPos position -> b
    int groundLevelDelta -> d
    net.minecraft.world.level.block.Rotation rotation -> c
    java.util.List junctions -> e
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager structureManager -> f
    30:41:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement,net.minecraft.core.BlockPos,int,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.BoundingBox) -> <init>
    30:55:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag,net.minecraft.world.level.levelgen.feature.StructurePieceType) -> <init>
    59:70:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    74:74:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    79:81:void move(int,int,int) -> a
    85:85:net.minecraft.world.level.block.Rotation getRotation() -> ad_
    90:90:java.lang.String toString() -> toString
    94:94:net.minecraft.world.level.levelgen.feature.structures.StructurePoolElement getElement() -> b
    98:98:net.minecraft.core.BlockPos getPosition() -> c
    102:102:int getGroundLevelDelta() -> d
    106:107:void addJunction(net.minecraft.world.level.levelgen.feature.structures.JigsawJunction) -> a
    110:110:java.util.List getJunctions() -> e
    54:54:void lambda$new$0(net.minecraft.nbt.Tag) -> a
net.minecraft.world.level.levelgen.structure.ScatteredFeaturePiece -> clp:
    int width -> a
    int height -> b
    int depth -> c
    int heightPosition -> d
    17:33:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,java.util.Random,int,int,int,int,int,int) -> <init>
    17:41:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.nbt.CompoundTag) -> <init>
    45:49:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    52:74:boolean updateAverageGroundHeight(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int) -> a
net.minecraft.world.level.levelgen.structure.ShipwreckPieces -> clq:
    net.minecraft.core.BlockPos PIVOT -> a
    net.minecraft.resources.ResourceLocation[] STRUCTURE_LOCATION_BEACHED -> b
    net.minecraft.resources.ResourceLocation[] STRUCTURE_LOCATION_OCEAN -> c
    25:25:void <init>() -> <init>
    66:68:void addPieces(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.List,java.util.Random,net.minecraft.world.level.levelgen.feature.configurations.ShipwreckConfiguration) -> a
    25:25:net.minecraft.core.BlockPos access$000() -> a
    26:42:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.ShipwreckPieces$ShipwreckPiece -> clq$a:
    net.minecraft.world.level.block.Rotation rotation -> d
    net.minecraft.resources.ResourceLocation templateLocation -> e
    boolean isBeached -> f
    76:83:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.resources.ResourceLocation,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,boolean) -> <init>
    86:91:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    95:99:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    102:105:void loadTemplate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager) -> a
    109:116:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    120:139:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces -> clr:
    net.minecraft.world.level.levelgen.structure.StrongholdPieces$PieceWeight[] STRONGHOLD_PIECE_WEIGHTS -> a
    java.util.List currentPieces -> b
    java.lang.Class imposedPiece -> c
    int totalWeight -> d
    net.minecraft.world.level.levelgen.structure.StrongholdPieces$SmoothStoneSelector SMOOTH_STONE_SELECTOR -> e
    36:36:void <init>() -> <init>
    95:101:void resetPieces() -> a
    104:112:boolean updatePieceWeight() -> c
    116:142:net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece findAndCreatePieceFactory(java.lang.Class,java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    146:189:net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece generatePieceFromSmallDoor(net.minecraft.world.level.levelgen.structure.StrongholdPieces$StartPiece,java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> b
    193:205:net.minecraft.world.level.levelgen.structure.StructurePiece generateAndAddPiece(net.minecraft.world.level.levelgen.structure.StrongholdPieces$StartPiece,java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> c
    36:36:net.minecraft.world.level.levelgen.structure.StructurePiece access$000(net.minecraft.world.level.levelgen.structure.StrongholdPieces$StartPiece,java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    36:36:java.lang.Class access$102(java.lang.Class) -> a
    36:36:net.minecraft.world.level.levelgen.structure.StrongholdPieces$SmoothStoneSelector access$200() -> b
    67:1554:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.StrongholdPieces$1 -> clr$1:
    77:77:void <init>(java.lang.Class,int,int) -> <init>
    80:80:boolean doPlace(int) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$2 -> clr$2:
    83:83:void <init>(java.lang.Class,int,int) -> <init>
    86:86:boolean doPlace(int) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$3 -> clr$3:
    int[] $SwitchMap$net$minecraft$world$level$levelgen$structure$StrongholdPieces$StrongholdPiece$SmallDoorType -> a
    int[] $SwitchMap$net$minecraft$core$Direction -> b
    230:292:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.StrongholdPieces$ChestCorridor -> clr$a:
    boolean hasPlacedChest -> a
    638:643:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    646:648:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    652:654:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    658:659:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    662:668:net.minecraft.world.level.levelgen.structure.StrongholdPieces$ChestCorridor createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    674:697:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$FillerCorridor -> clr$b:
    int steps -> a
    354:359:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    362:364:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    368:370:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    373:395:net.minecraft.world.level.levelgen.structure.BoundingBox findPieceBox(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction) -> a
    401:424:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$FiveCrossing -> clr$c:
    boolean leftLow -> a
    boolean leftHigh -> b
    boolean rightLow -> c
    boolean rightHigh -> e
    1274:1284:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    1287:1292:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1296:1301:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    1305:1327:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    1330:1336:net.minecraft.world.level.levelgen.structure.StrongholdPieces$FiveCrossing createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    1342:1385:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$LeftTurn -> clr$d:
    775:780:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    783:784:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    788:794:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    797:803:net.minecraft.world.level.levelgen.structure.StrongholdPieces$LeftTurn createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    809:820:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$Library -> clr$e:
    boolean isTall -> a
    1092:1098:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    1101:1103:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1107:1109:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    1113:1124:net.minecraft.world.level.levelgen.structure.StrongholdPieces$Library createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    1129:1259:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$PieceWeight -> clr$f:
    java.lang.Class pieceClass -> a
    int weight -> b
    int placeCount -> c
    int maxPlaceCount -> d
    52:56:void <init>(java.lang.Class,int,int) -> <init>
    59:59:boolean doPlace(int) -> a
    63:63:boolean isValid() -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$PortalRoom -> clr$g:
    boolean hasPlacedSpawner -> a
    1397:1401:void <init>(int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    1404:1406:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1410:1412:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    1416:1419:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    1422:1428:net.minecraft.world.level.levelgen.structure.StrongholdPieces$PortalRoom createPiece(java.util.List,int,int,int,net.minecraft.core.Direction,int) -> a
    1434:1530:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$PrisonHall -> clr$h:
    1017:1022:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    1025:1026:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    1030:1031:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    1034:1040:net.minecraft.world.level.levelgen.structure.StrongholdPieces$PrisonHall createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    1046:1079:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$RightTurn -> clr$i:
    826:831:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    834:835:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    839:845:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    848:854:net.minecraft.world.level.levelgen.structure.StrongholdPieces$RightTurn createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    860:871:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$RoomCrossing -> clr$j:
    int type -> a
    883:889:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    892:894:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    898:900:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    904:907:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    910:916:net.minecraft.world.level.levelgen.structure.StrongholdPieces$RoomCrossing createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    922:1007:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$SmoothStoneSelector -> clr$k:
    1534:1534:void <init>() -> <init>
    1537:1551:void next(java.util.Random,int,int,int,boolean) -> a
    1534:1534:void <init>(net.minecraft.world.level.levelgen.structure.StrongholdPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.StrongholdPieces$StairsDown -> clr$l:
    boolean isSource -> a
    436:447:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,int,java.util.Random,int,int) -> <init>
    450:456:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    459:461:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.nbt.CompoundTag) -> <init>
    464:465:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    469:471:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    475:480:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    483:489:net.minecraft.world.level.levelgen.structure.StrongholdPieces$StairsDown createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    495:520:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$StartPiece -> clr$m:
    net.minecraft.world.level.levelgen.structure.StrongholdPieces$PieceWeight previousPiece -> a
    net.minecraft.world.level.levelgen.structure.StrongholdPieces$PortalRoom portalRoomPiece -> b
    java.util.List pendingChildren -> c
    530:534:void <init>(java.util.Random,int,int) -> <init>
    530:538:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    542:545:net.minecraft.core.BlockPos getLocatorPosition() -> ac_
net.minecraft.world.level.levelgen.structure.StrongholdPieces$Straight -> clr$n:
    boolean leftChild -> a
    boolean rightChild -> b
    558:566:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    569:572:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    576:579:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    583:590:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    593:599:net.minecraft.world.level.levelgen.structure.StrongholdPieces$Straight createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    605:626:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$StraightStairsDown -> clr$o:
    707:712:void <init>(int,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction) -> <init>
    715:716:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    720:721:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    724:730:net.minecraft.world.level.levelgen.structure.StrongholdPieces$StraightStairsDown createPiece(java.util.List,java.util.Random,int,int,int,net.minecraft.core.Direction,int) -> a
    736:755:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece -> clr$p:
    net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType entryDoor -> d
    209:213:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,int) -> <init>
    209:218:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.nbt.CompoundTag) -> <init>
    226:227:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    230:270:void generateSmallDoor(net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType,int,int,int) -> a
    273:284:net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType randomSmallDoor(java.util.Random) -> a
    290:303:net.minecraft.world.level.levelgen.structure.StructurePiece generateSmallDoorChildForward(net.minecraft.world.level.levelgen.structure.StrongholdPieces$StartPiece,java.util.List,java.util.Random,int,int) -> a
    308:321:net.minecraft.world.level.levelgen.structure.StructurePiece generateSmallDoorChildLeft(net.minecraft.world.level.levelgen.structure.StrongholdPieces$StartPiece,java.util.List,java.util.Random,int,int) -> b
    326:339:net.minecraft.world.level.levelgen.structure.StructurePiece generateSmallDoorChildRight(net.minecraft.world.level.levelgen.structure.StrongholdPieces$StartPiece,java.util.List,java.util.Random,int,int) -> c
    343:343:boolean isOkBox(net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType -> clr$p$a:
    net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType OPENING -> a
    net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType WOOD_DOOR -> b
    net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType GRATES -> c
    net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType IRON_DOOR -> d
    net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType[] $VALUES -> e
    220:220:net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType[] values() -> values
    220:220:net.minecraft.world.level.levelgen.structure.StrongholdPieces$StrongholdPiece$SmallDoorType valueOf(java.lang.String) -> valueOf
    220:220:void <init>(java.lang.String,int) -> <init>
    220:221:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.StrongholdPieces$Turn -> clr$q:
    765:766:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,int) -> <init>
    769:770:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.nbt.CompoundTag) -> <init>
net.minecraft.world.level.levelgen.structure.StructureFeatureIO -> cls:
    org.apache.logging.log4j.Logger LOGGER -> p
    net.minecraft.world.level.levelgen.feature.StructureFeature MINESHAFT -> a
    net.minecraft.world.level.levelgen.feature.StructureFeature PILLAGER_OUTPOST -> b
    net.minecraft.world.level.levelgen.feature.StructureFeature NETHER_FORTRESS -> c
    net.minecraft.world.level.levelgen.feature.StructureFeature STRONGHOLD -> d
    net.minecraft.world.level.levelgen.feature.StructureFeature JUNGLE_PYRAMID -> e
    net.minecraft.world.level.levelgen.feature.StructureFeature OCEAN_RUIN -> f
    net.minecraft.world.level.levelgen.feature.StructureFeature DESERT_PYRAMID -> g
    net.minecraft.world.level.levelgen.feature.StructureFeature IGLOO -> h
    net.minecraft.world.level.levelgen.feature.StructureFeature SWAMP_HUT -> i
    net.minecraft.world.level.levelgen.feature.StructureFeature OCEAN_MONUMENT -> j
    net.minecraft.world.level.levelgen.feature.StructureFeature END_CITY -> k
    net.minecraft.world.level.levelgen.feature.StructureFeature WOODLAND_MANSION -> l
    net.minecraft.world.level.levelgen.feature.StructureFeature BURIED_TREASURE -> m
    net.minecraft.world.level.levelgen.feature.StructureFeature SHIPWRECK -> n
    net.minecraft.world.level.levelgen.feature.StructureFeature VILLAGE -> o
    19:19:void <init>() -> <init>
    40:40:net.minecraft.world.level.levelgen.feature.StructureFeature register(java.lang.String,net.minecraft.world.level.levelgen.feature.StructureFeature) -> a
    44:44:void bootstrap() -> a
    48:89:net.minecraft.world.level.levelgen.structure.StructureStart loadStaticStart(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> a
    20:36:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.StructureFeatureIndexSavedData -> clt:
    it.unimi.dsi.fastutil.longs.LongSet all -> a
    it.unimi.dsi.fastutil.longs.LongSet remaining -> b
    11:16:void <init>(java.lang.String) -> <init>
    20:22:void load(net.minecraft.nbt.CompoundTag) -> a
    26:28:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    32:34:void addIndex(long) -> a
    37:37:boolean hasStartIndex(long) -> b
    41:41:boolean hasUnhandledIndex(long) -> c
    45:46:void removeIndex(long) -> d
    49:49:it.unimi.dsi.fastutil.longs.LongSet getAll() -> a
net.minecraft.world.level.levelgen.structure.StructurePiece -> clu:
    net.minecraft.world.level.block.state.BlockState CAVE_AIR -> m
    net.minecraft.world.level.levelgen.structure.BoundingBox boundingBox -> n
    net.minecraft.core.Direction orientation -> a
    net.minecraft.world.level.block.Mirror mirror -> b
    net.minecraft.world.level.block.Rotation rotation -> c
    int genDepth -> o
    net.minecraft.world.level.levelgen.feature.StructurePieceType type -> d
    java.util.Set SHAPE_CHECK_BLOCKS -> e
    73:76:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,int) -> <init>
    79:86:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.nbt.CompoundTag) -> <init>
    89:99:net.minecraft.nbt.CompoundTag createTag() -> f
    void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    105:105:void addChildren(net.minecraft.world.level.levelgen.structure.StructurePiece,java.util.List,java.util.Random) -> a
    boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    110:110:net.minecraft.world.level.levelgen.structure.BoundingBox getBoundingBox() -> g
    114:114:int getGenDepth() -> h
    118:121:boolean isCloseToChunk(net.minecraft.world.level.ChunkPos,int) -> a
    125:130:net.minecraft.world.level.levelgen.structure.StructurePiece findCollisionPiece(java.util.List,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    134:134:net.minecraft.core.BlockPos getLocatorPosition() -> ac_
    138:180:boolean edgesLiquid(net.minecraft.world.level.BlockGetter,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    184:184:net.minecraft.core.BlockPos getWorldPos(int,int,int) -> c
    188:202:int getWorldX(int,int) -> a
    207:210:int getWorldY(int) -> d
    214:228:int getWorldZ(int,int) -> b
    247:268:void placeBlock(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.block.state.BlockState,int,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    283:292:net.minecraft.world.level.block.state.BlockState getBlock(net.minecraft.world.level.BlockGetter,int,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    296:306:boolean isInterior(net.minecraft.world.level.LevelReader,int,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    310:317:void generateAirBox(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int,int,int) -> b
    320:334:void generateBox(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int,int,int,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    337:338:void generateBox(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    341:352:void generateBox(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int,int,int,boolean,java.util.Random,net.minecraft.world.level.levelgen.structure.StructurePiece$BlockSelector) -> a
    355:356:void generateBox(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.levelgen.structure.BoundingBox,boolean,java.util.Random,net.minecraft.world.level.levelgen.structure.StructurePiece$BlockSelector) -> a
    359:379:void generateMaybeBox(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random,float,int,int,int,int,int,int,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,boolean,boolean) -> a
    382:385:void maybeGenerateBlock(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random,float,int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    388:415:void generateUpperHalfSphere(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,int,int,int,int,int,int,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    418:428:void generateAirColumnUp(net.minecraft.world.level.LevelAccessor,int,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    431:443:void fillColumnDown(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.block.state.BlockState,int,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox) -> b
    446:447:boolean createChest(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random,int,int,int,net.minecraft.resources.ResourceLocation) -> a
    452:488:net.minecraft.world.level.block.state.BlockState reorient(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    495:508:boolean createChest(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random,net.minecraft.core.BlockPos,net.minecraft.resources.ResourceLocation,net.minecraft.world.level.block.state.BlockState) -> a
    512:525:boolean createDispenser(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random,int,int,int,net.minecraft.core.Direction,net.minecraft.resources.ResourceLocation) -> a
    529:531:void createDoor(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox,java.util.Random,int,int,int,net.minecraft.core.Direction,net.minecraft.world.level.block.DoorBlock) -> a
    534:535:void move(int,int,int) -> a
    539:539:net.minecraft.core.Direction getOrientation() -> i
    543:567:void setOrientation(net.minecraft.core.Direction) -> a
    570:570:net.minecraft.world.level.block.Rotation getRotation() -> ad_
    574:574:net.minecraft.world.level.block.Mirror getMirror() -> j
    578:578:net.minecraft.world.level.levelgen.feature.StructurePieceType getType() -> k
    64:244:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.StructurePiece$1 -> clu$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    193:193:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.StructurePiece$BlockSelector -> clu$a:
    net.minecraft.world.level.block.state.BlockState next -> a
    581:582:void <init>() -> <init>
    void next(java.util.Random,int,int,int,boolean) -> a
    587:587:net.minecraft.world.level.block.state.BlockState getNext() -> a
net.minecraft.world.level.levelgen.structure.StructureStart -> clv:
    net.minecraft.world.level.levelgen.structure.StructureStart INVALID_START -> a
    net.minecraft.world.level.levelgen.feature.StructureFeature feature -> e
    java.util.List pieces -> b
    net.minecraft.world.level.levelgen.structure.BoundingBox boundingBox -> c
    int chunkX -> f
    int chunkZ -> g
    int references -> h
    net.minecraft.world.level.levelgen.WorldgenRandom random -> d
    29:45:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
    50:50:net.minecraft.world.level.levelgen.structure.BoundingBox getBoundingBox() -> c
    54:54:java.util.List getPieces() -> d
    58:70:void postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    73:78:void calculateBoundingBox() -> b
    81:102:net.minecraft.nbt.CompoundTag createTag(int,int) -> a
    106:121:void moveBelowSeaLevel(int,java.util.Random,int) -> a
    124:139:void moveInsideHeights(java.util.Random,int,int) -> a
    142:142:boolean isValid() -> e
    146:146:int getChunkX() -> f
    150:150:int getChunkZ() -> g
    154:154:net.minecraft.core.BlockPos getLocatePos() -> a
    158:158:boolean canBeReferenced() -> h
    162:163:void addReference() -> i
    166:166:int getReferences() -> j
    170:170:int getMaxReferences() -> k
    174:174:net.minecraft.world.level.levelgen.feature.StructureFeature getFeature() -> l
    22:22:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.StructureStart$1 -> clv$1:
    22:22:void <init>(net.minecraft.world.level.levelgen.feature.StructureFeature,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,int,long) -> <init>
    25:25:void generatePieces(net.minecraft.world.level.chunk.ChunkGenerator,net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,int,int,net.minecraft.world.level.biome.Biome) -> a
net.minecraft.world.level.levelgen.structure.SwamplandHutPiece -> clw:
    boolean spawnedWitch -> e
    boolean spawnedCat -> f
    27:28:void <init>(java.util.Random,int,int) -> <init>
    31:34:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    38:41:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    45:122:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    126:141:void spawnCat(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
net.minecraft.world.level.levelgen.structure.TemplateStructurePiece -> clx:
    org.apache.logging.log4j.Logger LOGGER -> d
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate template -> a
    net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings placeSettings -> b
    net.minecraft.core.BlockPos templatePosition -> c
    34:35:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,int) -> <init>
    38:40:void <init>(net.minecraft.world.level.levelgen.feature.StructurePieceType,net.minecraft.nbt.CompoundTag) -> <init>
    43:48:void setup(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings) -> a
    52:55:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    59:103:boolean postProcess(net.minecraft.world.level.LevelAccessor,net.minecraft.world.level.chunk.ChunkGenerator,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.world.level.ChunkPos) -> a
    void handleDataMarker(java.lang.String,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    110:112:void move(int,int,int) -> a
    116:116:net.minecraft.world.level.block.Rotation getRotation() -> ad_
    27:27:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces -> cly:
    32:32:void <init>() -> <init>
    117:120:void generateMansion(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.List,java.util.Random) -> a
    1183:1189:void main(java.lang.String[]) -> a
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$1 -> cly$1:
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$FirstFloorRoomCollection -> cly$a:
    1098:1098:void <init>() -> <init>
    1101:1101:java.lang.String get1x1(java.util.Random) -> a
    1106:1106:java.lang.String get1x1Secret(java.util.Random) -> b
    1111:1111:java.lang.String get1x2SideEntrance(java.util.Random,boolean) -> a
    1116:1116:java.lang.String get1x2FrontEntrance(java.util.Random,boolean) -> b
    1121:1121:java.lang.String get1x2Secret(java.util.Random) -> c
    1126:1126:java.lang.String get2x2(java.util.Random) -> d
    1131:1131:java.lang.String get2x2Secret(java.util.Random) -> e
    1098:1098:void <init>(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection -> cly$b:
    1066:1066:void <init>() -> <init>
    java.lang.String get1x1(java.util.Random) -> a
    java.lang.String get1x1Secret(java.util.Random) -> b
    java.lang.String get1x2SideEntrance(java.util.Random,boolean) -> a
    java.lang.String get1x2FrontEntrance(java.util.Random,boolean) -> b
    java.lang.String get1x2Secret(java.util.Random) -> c
    java.lang.String get2x2(java.util.Random) -> d
    java.lang.String get2x2Secret(java.util.Random) -> e
    1066:1066:void <init>(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$MansionGrid -> cly$c:
    java.util.Random random -> a
    net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid baseGrid -> b
    net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid thirdFloorGrid -> c
    net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid[] floorRooms -> d
    int entranceX -> e
    int entranceY -> f
    715:755:void <init>(java.util.Random) -> <init>
    758:759:boolean isHouse(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid,int,int) -> a
    763:763:boolean isRoomId(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid,int,int,int,int) -> a
    768:773:net.minecraft.core.Direction get1x2RoomDirection(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid,int,int,int,int) -> b
    777:810:void recursiveCorridor(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid,int,int,net.minecraft.core.Direction,int) -> a
    813:842:boolean cleanEdges(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid) -> a
    847:902:void setupThirdFloor() -> b
    905:992:void identifyRooms(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid) -> a
    995:1018:void print() -> a
    686:686:net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid access$100(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$MansionGrid) -> a
    686:686:net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid access$200(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$MansionGrid) -> b
    686:686:int access$300(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$MansionGrid) -> c
    686:686:int access$400(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$MansionGrid) -> d
    686:686:net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid[] access$1000(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$MansionGrid) -> e
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$MansionPiecePlacer -> cly$d:
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager structureManager -> a
    java.util.Random random -> b
    int startX -> c
    int startY -> d
    135:138:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,java.util.Random) -> <init>
    141:304:void createMansion(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,java.util.List,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$MansionGrid) -> a
    307:333:void traverseOuterWalls(java.util.List,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$PlacementData,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid,net.minecraft.core.Direction,int,int,int,int) -> a
    337:480:void createRoof(java.util.List,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid) -> a
    483:486:void entrance(java.util.List,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$PlacementData) -> a
    489:491:void traverseWallPiece(java.util.List,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$PlacementData) -> b
    494:499:void traverseTurn(java.util.List,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$PlacementData) -> c
    502:505:void traverseInnerTurn(java.util.List,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$PlacementData) -> d
    508:527:void addRoom1x1(java.util.List,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection) -> a
    533:612:void addRoom1x2(java.util.List,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.core.Direction,net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection,boolean) -> a
    615:678:void addRoom2x2(java.util.List,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.core.Direction,net.minecraft.core.Direction,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection) -> a
    681:683:void addRoom2x2Secret(java.util.List,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$FloorRoomCollection) -> a
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$PlacementData -> cly$e:
    net.minecraft.world.level.block.Rotation rotation -> a
    net.minecraft.core.BlockPos position -> b
    java.lang.String wallType -> c
    122:122:void <init>() -> <init>
    122:122:void <init>(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SecondFloorRoomCollection -> cly$f:
    1135:1135:void <init>() -> <init>
    1138:1138:java.lang.String get1x1(java.util.Random) -> a
    1143:1143:java.lang.String get1x1Secret(java.util.Random) -> b
    1148:1151:java.lang.String get1x2SideEntrance(java.util.Random,boolean) -> a
    1156:1159:java.lang.String get1x2FrontEntrance(java.util.Random,boolean) -> b
    1164:1164:java.lang.String get1x2Secret(java.util.Random) -> c
    1169:1169:java.lang.String get2x2(java.util.Random) -> d
    1174:1174:java.lang.String get2x2Secret(java.util.Random) -> e
    1135:1135:void <init>(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid -> cly$g:
    int[][] grid -> a
    int width -> b
    int height -> c
    int valueIfOutside -> d
    1027:1032:void <init>(int,int,int) -> <init>
    1035:1038:void set(int,int,int) -> a
    1041:1046:void set(int,int,int,int,int) -> a
    1049:1052:int get(int,int) -> a
    1056:1059:void setif(int,int,int,int) -> a
    1062:1062:boolean edgesTo(int,int,int) -> b
    1021:1021:int access$500(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid) -> a
    1021:1021:int access$600(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$SimpleGrid) -> b
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$ThirdFloorRoomCollection -> cly$h:
    1178:1178:void <init>() -> <init>
    1178:1178:void <init>(net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$1) -> <init>
net.minecraft.world.level.levelgen.structure.WoodlandMansionPieces$WoodlandMansionPiece -> cly$i:
    java.lang.String templateName -> d
    net.minecraft.world.level.block.Rotation rotation -> e
    net.minecraft.world.level.block.Mirror mirror -> f
    39:40:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,java.lang.String,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation) -> <init>
    43:51:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,java.lang.String,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Rotation,net.minecraft.world.level.block.Mirror) -> <init>
    54:61:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager,net.minecraft.nbt.CompoundTag) -> <init>
    64:68:void loadTemplate(net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager) -> a
    72:77:void addAdditionalSaveData(net.minecraft.nbt.CompoundTag) -> a
    81:113:void handleDataMarker(java.lang.String,net.minecraft.core.BlockPos,net.minecraft.world.level.LevelAccessor,java.util.Random,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
net.minecraft.world.level.levelgen.structure.package-info -> clz:
net.minecraft.world.level.levelgen.structure.templatesystem.AlwaysTrueTest -> cma:
    net.minecraft.world.level.levelgen.structure.templatesystem.AlwaysTrueTest INSTANCE -> a
    12:13:void <init>() -> <init>
    17:17:boolean test(net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    22:22:net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType getType() -> a
    27:27:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    10:10:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.templatesystem.BlockIgnoreProcessor -> cmb:
    net.minecraft.world.level.levelgen.structure.templatesystem.BlockIgnoreProcessor STRUCTURE_BLOCK -> a
    net.minecraft.world.level.levelgen.structure.templatesystem.BlockIgnoreProcessor AIR -> b
    net.minecraft.world.level.levelgen.structure.templatesystem.BlockIgnoreProcessor STRUCTURE_AND_AIR -> c
    com.google.common.collect.ImmutableList toIgnore -> d
    23:25:void <init>(java.util.List) -> <init>
    28:29:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    34:37:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo processBlock(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings) -> a
    42:42:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType getType() -> a
    47:48:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    48:48:java.lang.Object lambda$getDynamic$1(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.block.Block) -> a
    28:28:net.minecraft.world.level.block.Block lambda$new$0(com.mojang.datafixers.Dynamic) -> a
    17:19:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.templatesystem.BlockMatchTest -> cmc:
    net.minecraft.world.level.block.Block block -> a
    16:18:void <init>(net.minecraft.world.level.block.Block) -> <init>
    21:22:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    26:26:boolean test(net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    31:31:net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType getType() -> a
    36:37:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.BlockRotProcessor -> cmd:
    float integrity -> a
    15:17:void <init>(float) -> <init>
    20:21:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    26:31:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo processBlock(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings) -> a
    36:36:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType getType() -> a
    41:42:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.BlockStateMatchTest -> cme:
    net.minecraft.world.level.block.state.BlockState blockState -> a
    13:15:void <init>(net.minecraft.world.level.block.state.BlockState) -> <init>
    18:19:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    23:23:boolean test(net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    28:28:net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType getType() -> a
    33:34:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.GravityProcessor -> cmf:
    net.minecraft.world.level.levelgen.Heightmap$Types heightmap -> a
    int offset -> b
    16:19:void <init>(net.minecraft.world.level.levelgen.Heightmap$Types,int) -> <init>
    22:23:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    28:30:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo processBlock(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings) -> a
    35:35:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType getType() -> a
    40:42:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.JigsawReplacementProcessor -> cmg:
    net.minecraft.world.level.levelgen.structure.templatesystem.JigsawReplacementProcessor INSTANCE -> a
    18:19:void <init>() -> <init>
    24:39:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo processBlock(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings) -> a
    44:44:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType getType() -> a
    49:49:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.templatesystem.NopProcessor -> cmh:
    net.minecraft.world.level.levelgen.structure.templatesystem.NopProcessor INSTANCE -> a
    13:14:void <init>() -> <init>
    19:19:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo processBlock(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings) -> a
    24:24:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType getType() -> a
    29:29:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    11:11:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.templatesystem.ProcessorRule -> cmi:
    net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest inputPredicate -> a
    net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest locPredicate -> b
    net.minecraft.world.level.block.state.BlockState outputState -> c
    net.minecraft.nbt.CompoundTag outputTag -> d
    23:24:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest,net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest,net.minecraft.world.level.block.state.BlockState) -> <init>
    26:31:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest,net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest,net.minecraft.world.level.block.state.BlockState,net.minecraft.nbt.CompoundTag) -> <init>
    34:34:boolean test(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    38:38:net.minecraft.world.level.block.state.BlockState getOutputState() -> a
    43:43:net.minecraft.nbt.CompoundTag getOutputTag() -> b
    47:55:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    59:67:net.minecraft.world.level.levelgen.structure.templatesystem.ProcessorRule deserialize(com.mojang.datafixers.Dynamic) -> a
    66:66:net.minecraft.nbt.Tag lambda$deserialize$0(com.mojang.datafixers.Dynamic) -> b
net.minecraft.world.level.levelgen.structure.templatesystem.RandomBlockMatchTest -> cmj:
    net.minecraft.world.level.block.Block block -> a
    float probability -> b
    17:20:void <init>(net.minecraft.world.level.block.Block,float) -> <init>
    23:24:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    28:28:boolean test(net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    33:33:net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType getType() -> a
    38:40:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.RandomBlockStateMatchTest -> cmk:
    net.minecraft.world.level.block.state.BlockState blockState -> a
    float probability -> b
    14:17:void <init>(net.minecraft.world.level.block.state.BlockState,float) -> <init>
    20:21:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    25:25:boolean test(net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    30:30:net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType getType() -> a
    35:37:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.RuleProcessor -> cml:
    com.google.common.collect.ImmutableList rules -> a
    19:21:void <init>(java.util.List) -> <init>
    24:25:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    30:37:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo processBlock(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings) -> a
    42:42:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType getType() -> a
    47:48:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    48:48:java.lang.Object lambda$getDynamic$0(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.levelgen.structure.templatesystem.ProcessorRule) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest -> cmm:
    10:10:void <init>() -> <init>
    boolean test(net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    14:15:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> b
    net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType getType() -> a
    com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType -> cmn:
    net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType ALWAYS_TRUE_TEST -> b
    net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType BLOCK_TEST -> c
    net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType BLOCKSTATE_TEST -> d
    net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType TAG_TEST -> e
    net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType RANDOM_BLOCK_TEST -> f
    net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType RANDOM_BLOCKSTATE_TEST -> g
    16:16:net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType register(java.lang.String,net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType) -> a
    7:7:net.minecraft.world.level.levelgen.structure.templatesystem.RuleTest lambda$static$0(com.mojang.datafixers.Dynamic) -> a
    7:12:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager -> cmo:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.Map structureRepository -> b
    com.mojang.datafixers.DataFixer fixerUpper -> c
    net.minecraft.server.MinecraftServer server -> d
    java.nio.file.Path generatedDir -> e
    44:54:void <init>(net.minecraft.server.MinecraftServer,java.io.File,com.mojang.datafixers.DataFixer) -> <init>
    57:62:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate getOrCreate(net.minecraft.resources.ResourceLocation) -> a
    67:67:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate get(net.minecraft.resources.ResourceLocation) -> b
    75:76:void onResourceManagerReload(net.minecraft.server.packs.resources.ResourceManager) -> a
    80:87:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate loadFromResource(net.minecraft.resources.ResourceLocation) -> e
    93:105:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate loadFromGenerated(net.minecraft.resources.ResourceLocation) -> f
    110:111:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate readStructure(java.io.InputStream) -> a
    116:122:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate readStructure(net.minecraft.nbt.CompoundTag) -> a
    126:159:boolean save(net.minecraft.resources.ResourceLocation) -> c
    164:168:java.nio.file.Path createPathToStructure(net.minecraft.resources.ResourceLocation,java.lang.String) -> a
    173:183:java.nio.file.Path createAndValidatePathToStructure(net.minecraft.resources.ResourceLocation,java.lang.String) -> b
    187:188:void remove(net.minecraft.resources.ResourceLocation) -> d
    68:69:net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate lambda$get$0(net.minecraft.resources.ResourceLocation) -> g
    37:37:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings -> cmp:
    net.minecraft.world.level.block.Mirror mirror -> a
    net.minecraft.world.level.block.Rotation rotation -> b
    net.minecraft.core.BlockPos rotationPivot -> c
    boolean ignoreEntities -> d
    net.minecraft.world.level.ChunkPos chunkPos -> e
    net.minecraft.world.level.levelgen.structure.BoundingBox boundingBox -> f
    boolean keepLiquids -> g
    java.util.Random random -> h
    int palette -> i
    java.util.List processors -> j
    boolean knownShape -> k
    18:32:void <init>() -> <init>
    36:48:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings copy() -> a
    52:53:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings setMirror(net.minecraft.world.level.block.Mirror) -> a
    57:58:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings setRotation(net.minecraft.world.level.block.Rotation) -> a
    62:63:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings setRotationPivot(net.minecraft.core.BlockPos) -> a
    67:68:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings setIgnoreEntities(boolean) -> a
    72:73:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings setChunkPos(net.minecraft.world.level.ChunkPos) -> a
    77:78:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings setBoundingBox(net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    82:83:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings setRandom(java.util.Random) -> a
    87:88:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings setKeepLiquids(boolean) -> b
    92:93:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings setKnownShape(boolean) -> c
    97:98:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings clearProcessors() -> b
    102:103:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings addProcessor(net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor) -> a
    107:108:net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings popProcessor(net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor) -> b
    112:112:net.minecraft.world.level.block.Mirror getMirror() -> c
    116:116:net.minecraft.world.level.block.Rotation getRotation() -> d
    120:120:net.minecraft.core.BlockPos getRotationPivot() -> e
    125:125:net.minecraft.world.level.ChunkPos getChunkPos() -> f
    129:137:java.util.Random getRandom(net.minecraft.core.BlockPos) -> b
    141:141:boolean isIgnoreEntities() -> g
    146:149:net.minecraft.world.level.levelgen.structure.BoundingBox getBoundingBox() -> h
    153:153:boolean getKnownShape() -> i
    157:157:java.util.List getProcessors() -> j
    161:164:void updateBoundingBoxFromChunkPos() -> k
    167:167:boolean shouldKeepLiquids() -> l
    171:172:java.util.List getRandomPalette(java.util.List,net.minecraft.core.BlockPos) -> a
    178:183:net.minecraft.world.level.levelgen.structure.BoundingBox calculateBoundingBox(net.minecraft.world.level.ChunkPos) -> b
net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor -> cmq:
    11:11:void <init>() -> <init>
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo processBlock(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings) -> a
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType getType() -> a
    com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
    20:21:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> b
net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType -> cmr:
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType BLOCK_IGNORE -> b
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType BLOCK_ROT -> c
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType GRAVITY -> d
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType JIGSAW_REPLACEMENT -> e
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType RULE -> f
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType NOP -> g
    16:16:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType register(java.lang.String,net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorType) -> a
    12:12:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor lambda$static$1(com.mojang.datafixers.Dynamic) -> a
    10:10:net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessor lambda$static$0(com.mojang.datafixers.Dynamic) -> b
    7:12:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate -> cms:
    java.util.List palettes -> a
    java.util.List entityInfoList -> b
    net.minecraft.core.BlockPos size -> c
    java.lang.String author -> d
    43:61:void <init>() -> <init>
    64:64:net.minecraft.core.BlockPos getSize() -> a
    68:69:void setAuthor(java.lang.String) -> a
    72:72:java.lang.String getAuthor() -> b
    76:121:void fillFromWorld(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,boolean,net.minecraft.world.level.block.Block) -> a
    124:138:void fillEntityList(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    141:141:java.util.List filterBlocks(net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings,net.minecraft.world.level.block.Block) -> a
    145:160:java.util.List filterBlocks(net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings,net.minecraft.world.level.block.Block,boolean) -> a
    164:166:net.minecraft.core.BlockPos calculateConnectedPosition(net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings,net.minecraft.core.BlockPos) -> a
    170:170:net.minecraft.core.BlockPos calculateRelativePosition(net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings,net.minecraft.core.BlockPos) -> a
    174:176:void placeInWorldChunk(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings) -> a
    179:180:void placeInWorld(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings) -> b
    183:328:boolean placeInWorld(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings,int) -> a
    332:346:void updateShapeAtEdge(net.minecraft.world.level.LevelAccessor,int,net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,int,int) -> a
    349:363:java.util.List processBlockInfos(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings,java.util.List) -> a
    367:393:void placeEntities(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.Mirror,net.minecraft.world.level.block.Rotation,net.minecraft.core.BlockPos,net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    398:400:java.util.Optional createEntityIgnoreException(net.minecraft.world.level.LevelAccessor,net.minecraft.nbt.CompoundTag) -> a
    405:410:net.minecraft.core.BlockPos getSize(net.minecraft.world.level.block.Rotation) -> a
    415:442:net.minecraft.core.BlockPos transform(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Mirror,net.minecraft.world.level.block.Rotation,net.minecraft.core.BlockPos) -> a
    447:474:net.minecraft.world.phys.Vec3 transform(net.minecraft.world.phys.Vec3,net.minecraft.world.level.block.Mirror,net.minecraft.world.level.block.Rotation,net.minecraft.core.BlockPos) -> a
    479:479:net.minecraft.core.BlockPos getZeroPositionWithTransform(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Mirror,net.minecraft.world.level.block.Rotation) -> a
    483:505:net.minecraft.core.BlockPos getZeroPositionWithTransform(net.minecraft.core.BlockPos,net.minecraft.world.level.block.Mirror,net.minecraft.world.level.block.Rotation,int,int) -> a
    509:546:net.minecraft.world.level.levelgen.structure.BoundingBox getBoundingBox(net.minecraft.world.level.levelgen.structure.templatesystem.StructurePlaceSettings,net.minecraft.core.BlockPos) -> b
    550:559:void mirrorAABB(net.minecraft.world.level.block.Rotation,int,int,net.minecraft.world.level.levelgen.structure.BoundingBox,net.minecraft.core.Direction,net.minecraft.core.Direction) -> a
    594:660:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> a
    664:692:void load(net.minecraft.nbt.CompoundTag) -> b
    695:719:void loadPalette(net.minecraft.nbt.ListTag,net.minecraft.nbt.ListTag) -> a
    722:726:net.minecraft.nbt.ListTag newIntegerList(int[]) -> a
    730:734:net.minecraft.nbt.ListTag newDoubleList(double[]) -> a
    717:717:int lambda$loadPalette$3(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo) -> a
    387:391:void lambda$placeEntities$2(net.minecraft.world.level.block.Mirror,net.minecraft.world.level.block.Rotation,net.minecraft.world.phys.Vec3,net.minecraft.world.level.LevelAccessor,net.minecraft.world.entity.Entity) -> a
    333:345:void lambda$updateShapeAtEdge$1(int,int,int,net.minecraft.world.level.LevelAccessor,int,net.minecraft.core.Direction,int,int,int) -> a
    124:124:boolean lambda$fillEntityList$0(net.minecraft.world.entity.Entity) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$1 -> cms$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> b
    405:420:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$SimplePalette -> cms$a:
    net.minecraft.world.level.block.state.BlockState DEFAULT_BLOCK_STATE -> a
    net.minecraft.core.IdMapper ids -> b
    int lastId -> c
    561:564:void <init>() -> <init>
    568:574:int idFor(net.minecraft.world.level.block.state.BlockState) -> a
    579:580:net.minecraft.world.level.block.state.BlockState stateFor(int) -> a
    585:585:java.util.Iterator iterator() -> iterator
    589:590:void addMapping(net.minecraft.world.level.block.state.BlockState,int) -> a
    561:561:void <init>(net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$1) -> <init>
    562:562:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureBlockInfo -> cms$b:
    net.minecraft.core.BlockPos pos -> a
    net.minecraft.world.level.block.state.BlockState state -> b
    net.minecraft.nbt.CompoundTag nbt -> c
    742:746:void <init>(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.nbt.CompoundTag) -> <init>
    750:750:java.lang.String toString() -> toString
net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplate$StructureEntityInfo -> cms$c:
    net.minecraft.world.phys.Vec3 pos -> a
    net.minecraft.core.BlockPos blockPos -> b
    net.minecraft.nbt.CompoundTag nbt -> c
    759:763:void <init>(net.minecraft.world.phys.Vec3,net.minecraft.core.BlockPos,net.minecraft.nbt.CompoundTag) -> <init>
net.minecraft.world.level.levelgen.structure.templatesystem.TagMatchTest -> cmt:
    net.minecraft.tags.Tag tag -> a
    17:19:void <init>(net.minecraft.tags.Tag) -> <init>
    22:23:void <init>(com.mojang.datafixers.Dynamic) -> <init>
    27:27:boolean test(net.minecraft.world.level.block.state.BlockState,java.util.Random) -> a
    32:32:net.minecraft.world.level.levelgen.structure.templatesystem.RuleTestType getType() -> a
    37:38:com.mojang.datafixers.Dynamic getDynamic(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.structure.templatesystem.package-info -> cmu:
net.minecraft.world.level.levelgen.surfacebuilders.BadlandsSurfaceBuilder -> cmv:
    net.minecraft.world.level.block.state.BlockState WHITE_TERRACOTTA -> S
    net.minecraft.world.level.block.state.BlockState ORANGE_TERRACOTTA -> T
    net.minecraft.world.level.block.state.BlockState TERRACOTTA -> U
    net.minecraft.world.level.block.state.BlockState YELLOW_TERRACOTTA -> V
    net.minecraft.world.level.block.state.BlockState BROWN_TERRACOTTA -> W
    net.minecraft.world.level.block.state.BlockState RED_TERRACOTTA -> X
    net.minecraft.world.level.block.state.BlockState LIGHT_GRAY_TERRACOTTA -> Y
    net.minecraft.world.level.block.state.BlockState[] clayBands -> a
    long seed -> b
    net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise pillarNoise -> c
    net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise pillarRoofNoise -> d
    net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise clayBandsOffsetNoise -> e
    35:36:void <init>(java.util.function.Function) -> <init>
    40:128:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    133:143:void initNoise(long) -> a
    146:202:void generateBands(long) -> b
    205:206:net.minecraft.world.level.block.state.BlockState getBand(int,int,int) -> a
    17:17:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
    20:26:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.surfacebuilders.ConfiguredSurfaceBuilder -> cmw:
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder surfaceBuilder -> a
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration config -> b
    18:21:void <init>(net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> <init>
    24:25:void <init>(net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder,com.mojang.datafixers.Dynamic) -> <init>
    28:30:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    35:36:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long) -> a
    39:40:void initNoise(long) -> a
    43:43:net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration getSurfaceBuilderConfiguration() -> a
    47:48:net.minecraft.world.level.levelgen.surfacebuilders.ConfiguredSurfaceBuilder deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.surfacebuilders.DefaultSurfaceBuilder -> cmx:
    16:17:void <init>(java.util.function.Function) -> <init>
    21:22:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    25:87:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int) -> a
    14:14:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
net.minecraft.world.level.levelgen.surfacebuilders.ErodedBadlandsSurfaceBuilder -> cmy:
    net.minecraft.world.level.block.state.BlockState WHITE_TERRACOTTA -> S
    net.minecraft.world.level.block.state.BlockState ORANGE_TERRACOTTA -> T
    net.minecraft.world.level.block.state.BlockState TERRACOTTA -> U
    20:21:void <init>(java.util.function.Function) -> <init>
    25:127:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    14:14:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
    15:17:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.surfacebuilders.FrozenOceanSurfaceBuilder -> cmz:
    net.minecraft.world.level.block.state.BlockState PACKED_ICE -> a
    net.minecraft.world.level.block.state.BlockState SNOW_BLOCK -> b
    net.minecraft.world.level.block.state.BlockState AIR -> c
    net.minecraft.world.level.block.state.BlockState GRAVEL -> d
    net.minecraft.world.level.block.state.BlockState ICE -> e
    net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise icebergNoise -> S
    net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise icebergRoofNoise -> T
    long seed -> U
    29:30:void <init>(java.util.function.Function) -> <init>
    34:132:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    136:142:void initNoise(long) -> a
    17:17:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
    18:22:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.surfacebuilders.GiantTreeTaigaSurfaceBuilder -> cna:
    13:14:void <init>(java.util.function.Function) -> <init>
    18:25:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    11:11:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
net.minecraft.world.level.levelgen.surfacebuilders.GravellyMountainSurfaceBuilder -> cnb:
    13:14:void <init>(java.util.function.Function) -> <init>
    18:25:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    11:11:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
net.minecraft.world.level.levelgen.surfacebuilders.MountainSurfaceBuilder -> cnc:
    13:14:void <init>(java.util.function.Function) -> <init>
    18:23:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    11:11:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
net.minecraft.world.level.levelgen.surfacebuilders.NetherSurfaceBuilder -> cnd:
    net.minecraft.world.level.block.state.BlockState AIR -> c
    net.minecraft.world.level.block.state.BlockState NETHERRACK -> d
    net.minecraft.world.level.block.state.BlockState GRAVEL -> e
    net.minecraft.world.level.block.state.BlockState SOUL_SAND -> S
    long seed -> a
    net.minecraft.world.level.levelgen.synth.PerlinNoise decorationNoise -> b
    26:27:void <init>(java.util.function.Function) -> <init>
    31:87:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    91:95:void initNoise(long) -> a
    16:16:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
    17:20:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.surfacebuilders.NopeSurfaceBuilder -> cne:
    13:14:void <init>(java.util.function.Function) -> <init>
    18:18:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    11:11:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
net.minecraft.world.level.levelgen.surfacebuilders.ShatteredSavanaSurfaceBuilder -> cnf:
    13:14:void <init>(java.util.function.Function) -> <init>
    18:25:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    11:11:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder -> cng:
    net.minecraft.world.level.block.state.BlockState AIR -> f
    net.minecraft.world.level.block.state.BlockState DIRT -> g
    net.minecraft.world.level.block.state.BlockState GRASS_BLOCK -> h
    net.minecraft.world.level.block.state.BlockState PODZOL -> i
    net.minecraft.world.level.block.state.BlockState GRAVEL -> j
    net.minecraft.world.level.block.state.BlockState STONE -> k
    net.minecraft.world.level.block.state.BlockState COARSE_DIRT -> l
    net.minecraft.world.level.block.state.BlockState SAND -> m
    net.minecraft.world.level.block.state.BlockState RED_SAND -> n
    net.minecraft.world.level.block.state.BlockState WHITE_TERRACOTTA -> o
    net.minecraft.world.level.block.state.BlockState MYCELIUM -> p
    net.minecraft.world.level.block.state.BlockState NETHERRACK -> q
    net.minecraft.world.level.block.state.BlockState ENDSTONE -> r
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_EMPTY -> s
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_PODZOL -> t
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_GRAVEL -> u
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_GRASS -> v
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_DIRT -> w
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_STONE -> x
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_COARSE_DIRT -> y
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_DESERT -> z
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_OCEAN_SAND -> A
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_FULL_SAND -> B
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_BADLANDS -> C
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_MYCELIUM -> D
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_HELL -> E
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration CONFIG_THEEND -> F
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder DEFAULT -> G
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder MOUNTAIN -> H
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder SHATTERED_SAVANNA -> I
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder GRAVELLY_MOUNTAIN -> J
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder GIANT_TREE_TAIGA -> K
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder SWAMP -> L
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder BADLANDS -> M
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder WOODED_BADLANDS -> N
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder ERODED_BADLANDS -> O
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder FROZEN_OCEAN -> P
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder NETHER -> Q
    net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder NOPE -> R
    java.util.function.Function configurationFactory -> a
    57:57:net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder register(java.lang.String,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilder) -> a
    62:64:void <init>(java.util.function.Function) -> <init>
    67:67:net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration createSettings(com.mojang.datafixers.Dynamic) -> a
    void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
    73:73:void initNoise(long) -> a
    14:54:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration -> cnh:
    net.minecraft.world.level.block.state.BlockState topMaterial -> a
    net.minecraft.world.level.block.state.BlockState underMaterial -> b
    net.minecraft.world.level.block.state.BlockState underwaterMaterial -> c
    14:18:void <init>(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState) -> <init>
    22:22:net.minecraft.world.level.block.state.BlockState getTopMaterial() -> a
    27:27:net.minecraft.world.level.block.state.BlockState getUnderMaterial() -> b
    32:32:net.minecraft.world.level.block.state.BlockState getUnderwaterMaterial() -> c
    37:40:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
    45:49:net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration deserialize(com.mojang.datafixers.Dynamic) -> a
net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration -> cni:
    net.minecraft.world.level.block.state.BlockState getTopMaterial() -> a
    net.minecraft.world.level.block.state.BlockState getUnderMaterial() -> b
    net.minecraft.world.level.block.state.BlockState getUnderwaterMaterial() -> c
    com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps) -> a
net.minecraft.world.level.levelgen.surfacebuilders.SwampSurfaceBuilder -> cnj:
    14:15:void <init>(java.util.function.Function) -> <init>
    19:38:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    12:12:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
net.minecraft.world.level.levelgen.surfacebuilders.WoodedBadlandsSurfaceBuilder -> cnk:
    net.minecraft.world.level.block.state.BlockState WHITE_TERRACOTTA -> S
    net.minecraft.world.level.block.state.BlockState ORANGE_TERRACOTTA -> T
    net.minecraft.world.level.block.state.BlockState TERRACOTTA -> U
    19:20:void <init>(java.util.function.Function) -> <init>
    24:101:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderBaseConfiguration) -> a
    13:13:void apply(java.util.Random,net.minecraft.world.level.chunk.ChunkAccess,net.minecraft.world.level.biome.Biome,int,int,int,double,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,int,long,net.minecraft.world.level.levelgen.surfacebuilders.SurfaceBuilderConfiguration) -> a
    14:16:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.surfacebuilders.package-info -> cnl:
net.minecraft.world.level.levelgen.synth.ImprovedNoise -> cnm:
    byte[] p -> d
    double xo -> a
    double yo -> b
    double zo -> c
    15:32:void <init>(java.util.Random) -> <init>
    36:62:double noise(double,double,double,double,double) -> a
    66:67:double gradDot(int,double,double,double) -> a
    71:71:int p(int) -> a
    76:95:double sampleAndLerp(int,int,int,double,double,double,double,double,double) -> a
net.minecraft.world.level.levelgen.synth.PerlinNoise -> cnn:
    net.minecraft.world.level.levelgen.synth.ImprovedNoise[] noiseLevels -> a
    double highestFreqValueFactor -> b
    double highestFreqInputFactor -> c
    24:25:void <init>(net.minecraft.world.level.levelgen.WorldgenRandom,int,int) -> <init>
    27:71:void <init>(net.minecraft.world.level.levelgen.WorldgenRandom,it.unimi.dsi.fastutil.ints.IntSortedSet) -> <init>
    74:74:double getValue(double,double,double) -> a
    78:90:double getValue(double,double,double,double,double,boolean) -> a
    95:95:net.minecraft.world.level.levelgen.synth.ImprovedNoise getOctaveNoise(int) -> a
    99:99:double wrap(double) -> a
    104:104:double getSurfaceNoiseValue(double,double,double,double) -> a
net.minecraft.world.level.levelgen.synth.PerlinSimplexNoise -> cno:
    net.minecraft.world.level.levelgen.synth.SimplexNoise[] noiseLevels -> a
    double highestFreqValueFactor -> b
    double highestFreqInputFactor -> c
    15:16:void <init>(net.minecraft.world.level.levelgen.WorldgenRandom,int,int) -> <init>
    18:62:void <init>(net.minecraft.world.level.levelgen.WorldgenRandom,it.unimi.dsi.fastutil.ints.IntSortedSet) -> <init>
    65:77:double getValue(double,double,boolean) -> a
    82:82:double getSurfaceNoiseValue(double,double,double,double) -> a
net.minecraft.world.level.levelgen.synth.SimplexNoise -> cnp:
    int[][] GRADIENT -> a
    double SQRT_3 -> e
    double F2 -> f
    double G2 -> g
    int[] p -> h
    double xo -> b
    double yo -> c
    double zo -> d
    31:51:void <init>(java.util.Random) -> <init>
    54:54:int p(int) -> a
    58:58:double dot(int[],double,double,double) -> a
    63:70:double getCornerNoise3D(int,double,double,double,double) -> a
    76:132:double getValue(double,double) -> a
    137:253:double getValue(double,double,double) -> a
    8:29:void <clinit>() -> <clinit>
net.minecraft.world.level.levelgen.synth.SurfaceNoise -> cnq:
    double getSurfaceNoiseValue(double,double,double,double) -> a
net.minecraft.world.level.levelgen.synth.package-info -> cnr:
net.minecraft.world.level.lighting.BlockLightEngine -> cns:
    net.minecraft.core.Direction[] DIRECTIONS -> e
    net.minecraft.core.BlockPos$MutableBlockPos pos -> f
    17:21:void <init>(net.minecraft.world.level.chunk.LightChunkGetter) -> <init>
    26:33:int getLightEmission(long) -> d
    38:71:int computeLevelFromNeighbor(long,long,int) -> b
    76:84:void checkNeighborsAfterUpdate(long,int,boolean) -> a
    88:122:int getComputedLevel(long,long,int) -> a
    128:130:void onBlockEmissionIncrease(net.minecraft.core.BlockPos,int) -> a
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.level.lighting.BlockLightSectionStorage -> cnt:
    12:13:void <init>(net.minecraft.world.level.chunk.LightChunkGetter) -> <init>
    17:25:int getLightValue(long) -> d
net.minecraft.world.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap -> cnt$a:
    31:32:void <init>(it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap) -> <init>
    36:36:net.minecraft.world.level.lighting.BlockLightSectionStorage$BlockDataLayerStorageMap copy() -> a
    29:29:net.minecraft.world.level.lighting.DataLayerStorageMap copy() -> b
net.minecraft.world.level.lighting.DataLayerStorageMap -> cnu:
    long[] lastSectionKeys -> b
    net.minecraft.world.level.chunk.DataLayer[] lastSections -> c
    boolean cacheEnabled -> d
    it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap map -> a
    10:19:void <init>(it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap) -> <init>
    net.minecraft.world.level.lighting.DataLayerStorageMap copy() -> b
    24:26:void copyDataLayer(long) -> a
    29:29:boolean hasLayer(long) -> b
    34:53:net.minecraft.world.level.chunk.DataLayer getLayer(long) -> c
    59:59:net.minecraft.world.level.chunk.DataLayer removeLayer(long) -> d
    63:64:void setLayer(long,net.minecraft.world.level.chunk.DataLayer) -> a
    67:71:void clearCache() -> c
    74:75:void disableCache() -> d
net.minecraft.world.level.lighting.DynamicGraphMinFixedPoint -> cnv:
    int levelCount -> a
    it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet[] queues -> b
    it.unimi.dsi.fastutil.longs.Long2ByteMap computedLevels -> c
    int firstQueuedLevel -> d
    boolean hasWork -> e
    41:67:void <init>(int,int,int) -> <init>
    70:77:int getKey(int,int) -> a
    81:89:void checkFirstQueuedLevel(int) -> a
    92:100:void removeFromQueue(long) -> e
    103:112:void removeIf(java.util.function.LongPredicate) -> a
    115:122:void dequeue(long,int,int,boolean) -> a
    125:130:void enqueue(long,int,int) -> a
    133:134:void checkNode(long) -> f
    137:139:void checkEdge(long,long,int,boolean) -> a
    142:171:void checkEdge(long,long,int,int,int,boolean) -> a
    174:194:void checkNeighbor(long,long,int,boolean) -> b
    197:197:boolean hasWork() -> b
    201:225:int runUpdates(int) -> b
    229:229:int getQueueSize() -> c
    boolean isSource(long) -> a
    int getComputedLevel(long,long,int) -> a
    void checkNeighborsAfterUpdate(long,int,boolean) -> a
    int getLevel(long) -> c
    void setLevel(long,int) -> a
    int computeLevelFromNeighbor(long,long,int) -> b
    106:109:void lambda$removeIf$0(java.util.function.LongPredicate,it.unimi.dsi.fastutil.longs.LongList,long) -> a
net.minecraft.world.level.lighting.DynamicGraphMinFixedPoint$1 -> cnv$1:
    int val$minQueueSize -> a
    net.minecraft.world.level.lighting.DynamicGraphMinFixedPoint this$0 -> b
    48:48:void <init>(net.minecraft.world.level.lighting.DynamicGraphMinFixedPoint,int,float,int) -> <init>
    51:54:void rehash(int) -> rehash
net.minecraft.world.level.lighting.DynamicGraphMinFixedPoint$2 -> cnv$2:
    int val$minMapSize -> a
    net.minecraft.world.level.lighting.DynamicGraphMinFixedPoint this$0 -> b
    57:57:void <init>(net.minecraft.world.level.lighting.DynamicGraphMinFixedPoint,int,float,int) -> <init>
    60:63:void rehash(int) -> rehash
net.minecraft.world.level.lighting.FlatDataLayer -> cnw:
    9:10:void <init>() -> <init>
    14:16:void <init>(net.minecraft.world.level.chunk.DataLayer,int) -> <init>
    20:20:int getIndex(int,int,int) -> b
    25:29:byte[] getData() -> a
net.minecraft.world.level.lighting.LayerLightEngine -> cnx:
    net.minecraft.core.Direction[] DIRECTIONS -> e
    net.minecraft.world.level.chunk.LightChunkGetter chunkSource -> a
    net.minecraft.world.level.LightLayer layer -> b
    net.minecraft.world.level.lighting.LayerLightSectionStorage storage -> c
    boolean runningLightUpdates -> f
    net.minecraft.core.BlockPos$MutableBlockPos pos -> d
    long[] lastChunkPos -> g
    net.minecraft.world.level.BlockGetter[] lastChunk -> h
    27:39:void <init>(net.minecraft.world.level.chunk.LightChunkGetter,net.minecraft.world.level.LightLayer,net.minecraft.world.level.lighting.LayerLightSectionStorage) -> <init>
    44:49:void checkNode(long) -> f
    53:66:net.minecraft.world.level.BlockGetter getChunk(int,int) -> a
    70:72:void clearCache() -> d
    75:100:net.minecraft.world.level.block.state.BlockState getStateAndOpacity(long,org.apache.commons.lang3.mutable.MutableInt) -> a
    104:104:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.block.state.BlockState,long,net.minecraft.core.Direction) -> a
    108:122:int getLightBlockInto(net.minecraft.world.level.BlockGetter,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.core.Direction,int) -> a
    127:127:boolean isSource(long) -> a
    135:135:int getComputedLevel(long,long,int) -> a
    140:143:int getLevel(long) -> c
    147:150:int getLevel(net.minecraft.world.level.chunk.DataLayer,long) -> a
    156:157:void setLevel(long,int) -> a
    164:164:int computeLevelFromNeighbor(long,long,int) -> b
    169:169:boolean hasLightWork() -> a
    174:205:int runUpdates(int,boolean,boolean) -> a
    209:210:void queueSectionData(long,net.minecraft.world.level.chunk.DataLayer) -> a
    215:215:net.minecraft.world.level.chunk.DataLayer getDataLayerData(net.minecraft.core.SectionPos) -> a
    220:220:int getLightValue(net.minecraft.core.BlockPos) -> b
    224:224:java.lang.String getDebugData(long) -> b
    229:234:void checkBlock(net.minecraft.core.BlockPos) -> a
    238:238:void onBlockEmissionIncrease(net.minecraft.core.BlockPos,int) -> a
    242:243:void updateSectionStatus(net.minecraft.core.SectionPos,boolean) -> a
    247:249:void enableLightSources(net.minecraft.world.level.ChunkPos,boolean) -> a
    252:254:void retainData(net.minecraft.world.level.ChunkPos,boolean) -> b
    22:22:void <clinit>() -> <clinit>
net.minecraft.world.level.lighting.LayerLightEventListener -> cny:
    net.minecraft.world.level.chunk.DataLayer getDataLayerData(net.minecraft.core.SectionPos) -> a
    int getLightValue(net.minecraft.core.BlockPos) -> b
net.minecraft.world.level.lighting.LayerLightEventListener$DummyLightLayerEventListener -> cny$a:
    net.minecraft.world.level.lighting.LayerLightEventListener$DummyLightLayerEventListener INSTANCE -> a
    net.minecraft.world.level.lighting.LayerLightEventListener$DummyLightLayerEventListener[] $VALUES -> b
    17:17:net.minecraft.world.level.lighting.LayerLightEventListener$DummyLightLayerEventListener[] values() -> values
    17:17:net.minecraft.world.level.lighting.LayerLightEventListener$DummyLightLayerEventListener valueOf(java.lang.String) -> valueOf
    17:17:void <init>(java.lang.String,int) -> <init>
    23:23:net.minecraft.world.level.chunk.DataLayer getDataLayerData(net.minecraft.core.SectionPos) -> a
    28:28:int getLightValue(net.minecraft.core.BlockPos) -> b
    33:33:void checkBlock(net.minecraft.core.BlockPos) -> a
    37:37:void onBlockEmissionIncrease(net.minecraft.core.BlockPos,int) -> a
    41:41:boolean hasLightWork() -> a
    46:46:int runUpdates(int,boolean,boolean) -> a
    51:51:void updateSectionStatus(net.minecraft.core.SectionPos,boolean) -> a
    55:55:void enableLightSources(net.minecraft.world.level.ChunkPos,boolean) -> a
    17:18:void <clinit>() -> <clinit>
net.minecraft.world.level.lighting.LayerLightSectionStorage -> cnz:
    net.minecraft.world.level.chunk.DataLayer EMPTY_DATA -> a
    net.minecraft.core.Direction[] DIRECTIONS -> k
    net.minecraft.world.level.LightLayer layer -> l
    net.minecraft.world.level.chunk.LightChunkGetter chunkSource -> m
    it.unimi.dsi.fastutil.longs.LongSet dataSectionSet -> b
    it.unimi.dsi.fastutil.longs.LongSet toMarkNoData -> c
    it.unimi.dsi.fastutil.longs.LongSet toMarkData -> d
    net.minecraft.world.level.lighting.DataLayerStorageMap visibleSectionData -> e
    net.minecraft.world.level.lighting.DataLayerStorageMap updatingSectionData -> f
    it.unimi.dsi.fastutil.longs.LongSet changedSections -> g
    it.unimi.dsi.fastutil.longs.LongSet sectionsAffectedByLightUpdates -> h
    it.unimi.dsi.fastutil.longs.Long2ObjectMap queuedSections -> i
    it.unimi.dsi.fastutil.longs.LongSet columnsToRetainQueuedDataFor -> n
    it.unimi.dsi.fastutil.longs.LongSet toRemove -> o
    boolean hasToRemove -> j
    32:60:void <init>(net.minecraft.world.level.LightLayer,net.minecraft.world.level.chunk.LightChunkGetter,net.minecraft.world.level.lighting.DataLayerStorageMap) -> <init>
    63:63:boolean storingLightForSection(long) -> g
    68:68:net.minecraft.world.level.chunk.DataLayer getDataLayer(long,boolean) -> a
    73:73:net.minecraft.world.level.chunk.DataLayer getDataLayer(net.minecraft.world.level.lighting.DataLayerStorageMap,long) -> a
    78:82:net.minecraft.world.level.chunk.DataLayer getDataLayerData(long) -> h
    int getLightValue(long) -> d
    92:97:int getStoredLevel(long) -> i
    104:122:void setStoredLevel(long,int) -> b
    126:135:int getLevel(long) -> c
    140:146:int getLevelFromSource(long) -> b
    151:180:void setLevel(long,int) -> a
    183:187:net.minecraft.world.level.chunk.DataLayer createDataLayer(long) -> j
    191:207:void clearQueuedSectionBlocks(net.minecraft.world.level.lighting.LayerLightEngine,long) -> a
    210:210:boolean hasInconsistencies() -> a
    215:318:void markNewInconsistencies(net.minecraft.world.level.lighting.LayerLightEngine,boolean,boolean) -> a
    321:321:void onNodeAdded(long) -> k
    324:324:void onNodeRemoved(long) -> l
    327:327:void enableLightSources(long,boolean) -> b
    330:335:void retainData(long,boolean) -> c
    338:343:void queueSectionData(long,net.minecraft.world.level.chunk.DataLayer) -> a
    346:355:void updateSectionStatus(long,boolean) -> d
    358:361:void runAllUpdates() -> d
    364:378:void swapSectionMap() -> e
    192:192:boolean lambda$clearQueuedSectionBlocks$0(long,long) -> a
    25:26:void <clinit>() -> <clinit>
net.minecraft.world.level.lighting.LayerLightSectionStorage$1 -> cnz$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    275:275:void <clinit>() -> <clinit>
net.minecraft.world.level.lighting.LevelLightEngine -> coa:
    net.minecraft.world.level.lighting.LayerLightEngine blockEngine -> a
    net.minecraft.world.level.lighting.LayerLightEngine skyEngine -> b
    21:24:void <init>(net.minecraft.world.level.chunk.LightChunkGetter,boolean,boolean) -> <init>
    29:35:void checkBlock(net.minecraft.core.BlockPos) -> a
    40:43:void onBlockEmissionIncrease(net.minecraft.core.BlockPos,int) -> a
    48:51:boolean hasLightWork() -> a
    57:73:int runUpdates(int,boolean,boolean) -> a
    83:89:void updateSectionStatus(net.minecraft.core.SectionPos,boolean) -> a
    94:100:void enableLightSources(net.minecraft.world.level.ChunkPos,boolean) -> a
    103:112:net.minecraft.world.level.lighting.LayerLightEventListener getLayerListener(net.minecraft.world.level.LightLayer) -> a
    117:126:java.lang.String getDebugData(net.minecraft.world.level.LightLayer,net.minecraft.core.SectionPos) -> a
    134:143:void queueSectionData(net.minecraft.world.level.LightLayer,net.minecraft.core.SectionPos,net.minecraft.world.level.chunk.DataLayer) -> a
    146:152:void retainData(net.minecraft.world.level.ChunkPos,boolean) -> b
    155:158:int getRawBrightness(net.minecraft.core.BlockPos,int) -> b
net.minecraft.world.level.lighting.LightEventListener -> cob:
    void checkBlock(net.minecraft.core.BlockPos) -> a
    void onBlockEmissionIncrease(net.minecraft.core.BlockPos,int) -> a
    boolean hasLightWork() -> a
    int runUpdates(int,boolean,boolean) -> a
    17:18:void updateSectionStatus(net.minecraft.core.BlockPos,boolean) -> a
    void updateSectionStatus(net.minecraft.core.SectionPos,boolean) -> a
    void enableLightSources(net.minecraft.world.level.ChunkPos,boolean) -> a
net.minecraft.world.level.lighting.SkyLightEngine -> coc:
    net.minecraft.core.Direction[] DIRECTIONS -> e
    net.minecraft.core.Direction[] HORIZONTALS -> f
    19:20:void <init>(net.minecraft.world.level.chunk.LightChunkGetter) -> <init>
    24:100:int computeLevelFromNeighbor(long,long,int) -> b
    105:149:void checkNeighborsAfterUpdate(long,int,boolean) -> a
    153:208:int getComputedLevel(long,long,int) -> a
    214:228:void checkNode(long) -> f
    232:232:java.lang.String getDebugData(long) -> b
    15:16:void <clinit>() -> <clinit>
net.minecraft.world.level.lighting.SkyLightSectionStorage -> cod:
    net.minecraft.core.Direction[] HORIZONTALS -> k
    it.unimi.dsi.fastutil.longs.LongSet sectionsWithSources -> l
    it.unimi.dsi.fastutil.longs.LongSet sectionsToAddSourcesTo -> m
    it.unimi.dsi.fastutil.longs.LongSet sectionsToRemoveSourcesFrom -> n
    it.unimi.dsi.fastutil.longs.LongSet columnsWithSkySources -> o
    boolean hasSourceInconsistencies -> p
    19:27:void <init>(net.minecraft.world.level.chunk.LightChunkGetter) -> <init>
    31:54:int getLightValue(long) -> d
    60:78:void onNodeAdded(long) -> k
    81:83:void queueRemoveSource(long) -> p
    86:88:void queueAddSource(long) -> q
    91:92:void recheckInconsistencyFlag() -> f
    96:120:void onNodeRemoved(long) -> l
    124:135:void enableLightSources(long,boolean) -> b
    139:139:boolean hasInconsistencies() -> a
    144:163:net.minecraft.world.level.chunk.DataLayer createDataLayer(long) -> j
    168:278:void markNewInconsistencies(net.minecraft.world.level.lighting.LayerLightEngine,boolean,boolean) -> a
    281:281:boolean hasSectionsBelow(int) -> a
    285:296:boolean hasLightSource(long) -> m
    300:302:boolean isAboveData(long) -> n
    306:307:boolean lightOnInSection(long) -> o
    17:17:void <clinit>() -> <clinit>
net.minecraft.world.level.lighting.SkyLightSectionStorage$1 -> cod$1:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    201:201:void <clinit>() -> <clinit>
net.minecraft.world.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap -> cod$a:
    int currentLowestY -> b
    it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap topSections -> c
    318:322:void <init>(it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap,it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap,int) -> <init>
    326:326:net.minecraft.world.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap copy() -> a
    310:310:net.minecraft.world.level.lighting.DataLayerStorageMap copy() -> b
    310:310:it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap access$000(net.minecraft.world.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap) -> a
    310:310:int access$100(net.minecraft.world.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap) -> b
    310:310:int access$102(net.minecraft.world.level.lighting.SkyLightSectionStorage$SkyDataLayerStorageMap,int) -> a
net.minecraft.world.level.lighting.SpatialLongSet -> coe:
    net.minecraft.world.level.lighting.SpatialLongSet$InternalMap map -> a
    15:17:void <init>(int,float) -> <init>
    197:197:boolean add(long) -> add
    202:202:boolean rem(long) -> rem
    207:207:long removeFirstLong() -> removeFirstLong
    212:212:int size() -> size
    217:217:boolean isEmpty() -> isEmpty
net.minecraft.world.level.lighting.SpatialLongSet$InternalMap -> coe$a:
    int X_BITS -> a
    int Z_BITS -> b
    int Y_BITS -> c
    int Z_OFFSET -> d
    int X_OFFSET -> e
    long OUTER_MASK -> g
    int lastPos -> h
    long lastOuterKey -> i
    int minSize -> j
    29:36:void <init>(int,float) -> <init>
    39:39:long getOuterKey(long) -> a
    43:46:int getInnerKey(long) -> b
    50:53:long getFullKey(long,int) -> a
    57:98:boolean addBit(long) -> c
    102:104:boolean replaceBit(int,long) -> a
    108:133:boolean removeBit(long) -> d
    138:151:boolean removeFromNullEntry(long) -> e
    155:169:boolean removeFromEntry(int,long) -> b
    173:184:long removeFirstBit() -> a
    189:192:void rehash(int) -> rehash
    20:27:void <clinit>() -> <clinit>
net.minecraft.world.level.lighting.package-info -> cof:
net.minecraft.world.level.material.EmptyFluid -> cog:
    15:15:void <init>() -> <init>
    19:19:net.minecraft.world.item.Item getBucket() -> a
    24:24:boolean canBeReplacedWith(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.material.Fluid,net.minecraft.core.Direction) -> a
    29:29:net.minecraft.world.phys.Vec3 getFlow(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState) -> a
    34:34:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    39:39:boolean isEmpty() -> b
    44:44:float getExplosionResistance() -> c
    49:49:float getHeight(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    54:54:float getOwnHeight(net.minecraft.world.level.material.FluidState) -> a
    59:59:net.minecraft.world.level.block.state.BlockState createLegacyBlock(net.minecraft.world.level.material.FluidState) -> b
    64:64:boolean isSource(net.minecraft.world.level.material.FluidState) -> c
    69:69:int getAmount(net.minecraft.world.level.material.FluidState) -> d
    74:74:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
net.minecraft.world.level.material.FlowingFluid -> coh:
    net.minecraft.world.level.block.state.properties.BooleanProperty FALLING -> a
    net.minecraft.world.level.block.state.properties.IntegerProperty LEVEL -> b
    java.lang.ThreadLocal OCCLUSION_CACHE -> e
    java.util.Map shapes -> f
    32:47:void <init>() -> <init>
    51:52:void createFluidStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    56:101:net.minecraft.world.phys.Vec3 getFlow(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState) -> a
    105:105:boolean affectsFlow(net.minecraft.world.level.material.FluidState) -> g
    109:121:boolean isSolidFace(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> a
    125:143:void spread(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState) -> a
    146:164:void spreadToSides(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState,net.minecraft.world.level.block.state.BlockState) -> a
    167:206:net.minecraft.world.level.material.FluidState getNewLiquid(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    211:238:boolean canPassThroughWall(net.minecraft.core.Direction,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    net.minecraft.world.level.material.Fluid getFlowing() -> d
    244:244:net.minecraft.world.level.material.FluidState getFlowing(int,boolean) -> a
    net.minecraft.world.level.material.Fluid getSource() -> e
    250:250:net.minecraft.world.level.material.FluidState getSource(boolean) -> a
    boolean canConvertToSource() -> f
    256:264:void spreadTo(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.material.FluidState) -> a
    void beforeDestroyingBlock(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    269:271:short getCacheKey(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    275:313:int getSlopeDistance(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,int,net.minecraft.core.Direction,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,it.unimi.dsi.fastutil.shorts.Short2ObjectMap,it.unimi.dsi.fastutil.shorts.Short2BooleanMap) -> a
    317:325:boolean isWaterHole(net.minecraft.world.level.BlockGetter,net.minecraft.world.level.material.Fluid,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    329:331:boolean canPassThrough(net.minecraft.world.level.BlockGetter,net.minecraft.world.level.material.Fluid,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState) -> a
    335:335:boolean isSourceBlockOfThisType(net.minecraft.world.level.material.FluidState) -> h
    int getSlopeFindDistance(net.minecraft.world.level.LevelReader) -> b
    341:351:int sourceNeighborCount(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    355:403:java.util.Map getSpread(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> b
    407:426:boolean canHoldFluid(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.Fluid) -> a
    430:432:boolean canSpreadTo(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.material.FluidState,net.minecraft.world.level.material.Fluid) -> a
    int getDropOff(net.minecraft.world.level.LevelReader) -> c
    438:438:int getSpreadDelay(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState,net.minecraft.world.level.material.FluidState) -> a
    443:460:void tick(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState) -> a
    463:466:int getLegacyLevel(net.minecraft.world.level.material.FluidState) -> e
    471:471:boolean hasSameAbove(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> c
    476:479:float getHeight(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    484:484:float getOwnHeight(net.minecraft.world.level.material.FluidState) -> a
    int getAmount(net.minecraft.world.level.material.FluidState) -> d
    492:496:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    496:496:net.minecraft.world.phys.shapes.VoxelShape lambda$getShape$5(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState) -> b
    381:383:boolean lambda$getSpread$4(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,int) -> a
    367:368:com.mojang.datafixers.util.Pair lambda$getSpread$3(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,int) -> a
    297:299:boolean lambda$getSlopeDistance$2(net.minecraft.core.BlockPos,net.minecraft.world.level.LevelReader,net.minecraft.world.level.block.state.BlockState,int) -> a
    287:288:com.mojang.datafixers.util.Pair lambda$getSlopeDistance$1(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos,int) -> b
    38:44:it.unimi.dsi.fastutil.objects.Object2ByteLinkedOpenHashMap lambda$static$0() -> k
    33:37:void <clinit>() -> <clinit>
net.minecraft.world.level.material.FlowingFluid$1 -> coh$1:
    38:38:void <init>(int) -> <init>
    41:41:void rehash(int) -> rehash
net.minecraft.world.level.material.Fluid -> coi:
    net.minecraft.core.IdMapper FLUID_STATE_REGISTRY -> c
    net.minecraft.world.level.block.state.StateDefinition stateDefinition -> d
    net.minecraft.world.level.material.FluidState defaultFluidState -> a
    26:31:void <init>() -> <init>
    34:34:void createFluidStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    37:37:net.minecraft.world.level.block.state.StateDefinition getStateDefinition() -> g
    41:42:void registerDefaultState(net.minecraft.world.level.material.FluidState) -> f
    45:45:net.minecraft.world.level.material.FluidState defaultFluidState() -> h
    net.minecraft.world.item.Item getBucket() -> a
    51:51:void animateTick(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState,java.util.Random) -> a
    54:54:void tick(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState) -> a
    57:57:void randomTick(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState,java.util.Random) -> b
    61:61:net.minecraft.core.particles.ParticleOptions getDripParticle() -> i
    boolean canBeReplacedWith(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.material.Fluid,net.minecraft.core.Direction) -> a
    net.minecraft.world.phys.Vec3 getFlow(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState) -> a
    int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    71:71:boolean isRandomlyTicking() -> j
    75:75:boolean isEmpty() -> b
    float getExplosionResistance() -> c
    float getHeight(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    float getOwnHeight(net.minecraft.world.level.material.FluidState) -> a
    net.minecraft.world.level.block.state.BlockState createLegacyBlock(net.minecraft.world.level.material.FluidState) -> b
    boolean isSource(net.minecraft.world.level.material.FluidState) -> c
    int getAmount(net.minecraft.world.level.material.FluidState) -> d
    91:91:boolean isSame(net.minecraft.world.level.material.Fluid) -> a
    95:95:boolean is(net.minecraft.tags.Tag) -> a
    net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    21:21:void <clinit>() -> <clinit>
net.minecraft.world.level.material.FluidState -> coj:
    net.minecraft.world.level.material.Fluid getType() -> c
    36:36:boolean isSource() -> d
    40:40:boolean isEmpty() -> e
    44:44:float getHeight(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    48:48:float getOwnHeight() -> f
    52:52:int getAmount() -> g
    56:65:boolean shouldRenderBackwardUpFace(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
    69:70:void tick(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> a
    73:74:void animateTick(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> a
    77:77:boolean isRandomlyTicking() -> h
    81:82:void randomTick(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,java.util.Random) -> b
    85:85:net.minecraft.world.phys.Vec3 getFlow(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> c
    89:89:net.minecraft.world.level.block.state.BlockState createLegacyBlock() -> i
    94:94:net.minecraft.core.particles.ParticleOptions getDripParticle() -> j
    98:98:boolean is(net.minecraft.tags.Tag) -> a
    102:102:float getExplosionResistance() -> k
    106:106:boolean canBeReplacedWith(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.material.Fluid,net.minecraft.core.Direction) -> a
    110:127:com.mojang.datafixers.Dynamic serialize(com.mojang.datafixers.types.DynamicOps,net.minecraft.world.level.material.FluidState) -> a
    131:144:net.minecraft.world.level.material.FluidState deserialize(com.mojang.datafixers.Dynamic) -> a
    148:148:net.minecraft.world.phys.shapes.VoxelShape getShape(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> d
    132:132:java.lang.String lambda$deserialize$2(com.mojang.datafixers.Dynamic) -> b
    132:132:java.lang.String lambda$deserialize$1(com.mojang.datafixers.Dynamic) -> c
    122:122:com.mojang.datafixers.util.Pair lambda$serialize$0(com.mojang.datafixers.types.DynamicOps,java.util.Map$Entry) -> a
net.minecraft.world.level.material.FluidStateImpl -> cok:
    9:10:void <init>(net.minecraft.world.level.material.Fluid,com.google.common.collect.ImmutableMap) -> <init>
    14:14:net.minecraft.world.level.material.Fluid getType() -> c
net.minecraft.world.level.material.Fluids -> col:
    net.minecraft.world.level.material.Fluid EMPTY -> a
    net.minecraft.world.level.material.FlowingFluid FLOWING_WATER -> b
    net.minecraft.world.level.material.FlowingFluid WATER -> c
    net.minecraft.world.level.material.FlowingFluid FLOWING_LAVA -> d
    net.minecraft.world.level.material.FlowingFluid LAVA -> e
    5:5:void <init>() -> <init>
    13:13:net.minecraft.world.level.material.Fluid register(java.lang.String,net.minecraft.world.level.material.Fluid) -> a
    6:22:void <clinit>() -> <clinit>
net.minecraft.world.level.material.LavaFluid -> com:
    27:27:void <init>() -> <init>
    33:33:net.minecraft.world.level.material.Fluid getFlowing() -> d
    38:38:net.minecraft.world.level.material.Fluid getSource() -> e
    43:43:net.minecraft.world.item.Item getBucket() -> a
    48:62:void animateTick(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState,java.util.Random) -> a
    66:100:void randomTick(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState,java.util.Random) -> b
    103:108:boolean hasFlammableNeighbours(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> a
    112:115:boolean isFlammable(net.minecraft.world.level.LevelReader,net.minecraft.core.BlockPos) -> b
    121:121:net.minecraft.core.particles.ParticleOptions getDripParticle() -> i
    126:127:void beforeDestroyingBlock(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    131:131:int getSlopeFindDistance(net.minecraft.world.level.LevelReader) -> b
    136:136:net.minecraft.world.level.block.state.BlockState createLegacyBlock(net.minecraft.world.level.material.FluidState) -> b
    141:141:boolean isSame(net.minecraft.world.level.material.Fluid) -> a
    146:146:int getDropOff(net.minecraft.world.level.LevelReader) -> c
    151:151:boolean canBeReplacedWith(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.material.Fluid,net.minecraft.core.Direction) -> a
    156:156:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    161:166:int getSpreadDelay(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState,net.minecraft.world.level.material.FluidState) -> a
    170:171:void fizz(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    175:175:boolean canConvertToSource() -> f
    180:192:void spreadTo(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState,net.minecraft.core.Direction,net.minecraft.world.level.material.FluidState) -> a
    196:196:boolean isRandomlyTicking() -> j
    201:201:float getExplosionResistance() -> c
net.minecraft.world.level.material.LavaFluid$Flowing -> com$a:
    216:216:void <init>() -> <init>
    219:221:void createFluidStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    225:225:int getAmount(net.minecraft.world.level.material.FluidState) -> d
    230:230:boolean isSource(net.minecraft.world.level.material.FluidState) -> c
net.minecraft.world.level.material.LavaFluid$Source -> com$b:
    204:204:void <init>() -> <init>
    207:207:int getAmount(net.minecraft.world.level.material.FluidState) -> d
    212:212:boolean isSource(net.minecraft.world.level.material.FluidState) -> c
net.minecraft.world.level.material.Material -> coo:
    net.minecraft.world.level.material.Material AIR -> a
    net.minecraft.world.level.material.Material STRUCTURAL_AIR -> b
    net.minecraft.world.level.material.Material PORTAL -> c
    net.minecraft.world.level.material.Material CLOTH_DECORATION -> d
    net.minecraft.world.level.material.Material PLANT -> e
    net.minecraft.world.level.material.Material WATER_PLANT -> f
    net.minecraft.world.level.material.Material REPLACEABLE_PLANT -> g
    net.minecraft.world.level.material.Material REPLACEABLE_WATER_PLANT -> h
    net.minecraft.world.level.material.Material WATER -> i
    net.minecraft.world.level.material.Material BUBBLE_COLUMN -> j
    net.minecraft.world.level.material.Material LAVA -> k
    net.minecraft.world.level.material.Material TOP_SNOW -> l
    net.minecraft.world.level.material.Material FIRE -> m
    net.minecraft.world.level.material.Material DECORATION -> n
    net.minecraft.world.level.material.Material WEB -> o
    net.minecraft.world.level.material.Material BUILDABLE_GLASS -> p
    net.minecraft.world.level.material.Material CLAY -> q
    net.minecraft.world.level.material.Material DIRT -> r
    net.minecraft.world.level.material.Material GRASS -> s
    net.minecraft.world.level.material.Material ICE_SOLID -> t
    net.minecraft.world.level.material.Material SAND -> u
    net.minecraft.world.level.material.Material SPONGE -> v
    net.minecraft.world.level.material.Material SHULKER_SHELL -> w
    net.minecraft.world.level.material.Material WOOD -> x
    net.minecraft.world.level.material.Material BAMBOO_SAPLING -> y
    net.minecraft.world.level.material.Material BAMBOO -> z
    net.minecraft.world.level.material.Material WOOL -> A
    net.minecraft.world.level.material.Material EXPLOSIVE -> B
    net.minecraft.world.level.material.Material LEAVES -> C
    net.minecraft.world.level.material.Material GLASS -> D
    net.minecraft.world.level.material.Material ICE -> E
    net.minecraft.world.level.material.Material CACTUS -> F
    net.minecraft.world.level.material.Material STONE -> G
    net.minecraft.world.level.material.Material METAL -> H
    net.minecraft.world.level.material.Material SNOW -> I
    net.minecraft.world.level.material.Material HEAVY_METAL -> J
    net.minecraft.world.level.material.Material BARRIER -> K
    net.minecraft.world.level.material.Material PISTON -> L
    net.minecraft.world.level.material.Material CORAL -> M
    net.minecraft.world.level.material.Material VEGETABLE -> N
    net.minecraft.world.level.material.Material EGG -> O
    net.minecraft.world.level.material.Material CAKE -> P
    net.minecraft.world.level.material.MaterialColor color -> Q
    net.minecraft.world.level.material.PushReaction pushReaction -> R
    boolean blocksMotion -> S
    boolean flammable -> T
    boolean alwaysDestroyable -> U
    boolean liquid -> V
    boolean solidBlocking -> W
    boolean replaceable -> X
    boolean solid -> Y
    63:73:void <init>(net.minecraft.world.level.material.MaterialColor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,net.minecraft.world.level.material.PushReaction) -> <init>
    76:76:boolean isLiquid() -> a
    80:80:boolean isSolid() -> b
    84:84:boolean blocksMotion() -> c
    89:89:boolean isFlammable() -> d
    93:93:boolean isReplaceable() -> e
    97:97:boolean isSolidBlocking() -> f
    103:103:boolean isAlwaysDestroyable() -> g
    107:107:net.minecraft.world.level.material.PushReaction getPushReaction() -> h
    111:111:net.minecraft.world.level.material.MaterialColor getColor() -> i
    4:51:void <clinit>() -> <clinit>
net.minecraft.world.level.material.Material$Builder -> coo$a:
    net.minecraft.world.level.material.PushReaction pushReaction -> a
    boolean blocksMotion -> b
    boolean flammable -> c
    boolean isAlwaysDestroyable -> d
    boolean liquid -> e
    boolean replaceable -> f
    boolean solid -> g
    net.minecraft.world.level.material.MaterialColor color -> h
    boolean solidBlocking -> i
    115:127:void <init>(net.minecraft.world.level.material.MaterialColor) -> <init>
    130:131:net.minecraft.world.level.material.Material$Builder liquid() -> a
    135:136:net.minecraft.world.level.material.Material$Builder nonSolid() -> b
    140:141:net.minecraft.world.level.material.Material$Builder noCollider() -> c
    145:146:net.minecraft.world.level.material.Material$Builder notSolidBlocking() -> j
    150:151:net.minecraft.world.level.material.Material$Builder notAlwaysDestroyable() -> d
    155:156:net.minecraft.world.level.material.Material$Builder flammable() -> e
    160:161:net.minecraft.world.level.material.Material$Builder replaceable() -> f
    165:166:net.minecraft.world.level.material.Material$Builder destroyOnPush() -> g
    170:171:net.minecraft.world.level.material.Material$Builder notPushable() -> h
    175:175:net.minecraft.world.level.material.Material build() -> i
    114:114:net.minecraft.world.level.material.Material$Builder access$000(net.minecraft.world.level.material.Material$Builder) -> a
net.minecraft.world.level.material.MaterialColor -> cop:
    net.minecraft.world.level.material.MaterialColor[] MATERIAL_COLORS -> a
    net.minecraft.world.level.material.MaterialColor NONE -> b
    net.minecraft.world.level.material.MaterialColor GRASS -> c
    net.minecraft.world.level.material.MaterialColor SAND -> d
    net.minecraft.world.level.material.MaterialColor WOOL -> e
    net.minecraft.world.level.material.MaterialColor FIRE -> f
    net.minecraft.world.level.material.MaterialColor ICE -> g
    net.minecraft.world.level.material.MaterialColor METAL -> h
    net.minecraft.world.level.material.MaterialColor PLANT -> i
    net.minecraft.world.level.material.MaterialColor SNOW -> j
    net.minecraft.world.level.material.MaterialColor CLAY -> k
    net.minecraft.world.level.material.MaterialColor DIRT -> l
    net.minecraft.world.level.material.MaterialColor STONE -> m
    net.minecraft.world.level.material.MaterialColor WATER -> n
    net.minecraft.world.level.material.MaterialColor WOOD -> o
    net.minecraft.world.level.material.MaterialColor QUARTZ -> p
    net.minecraft.world.level.material.MaterialColor COLOR_ORANGE -> q
    net.minecraft.world.level.material.MaterialColor COLOR_MAGENTA -> r
    net.minecraft.world.level.material.MaterialColor COLOR_LIGHT_BLUE -> s
    net.minecraft.world.level.material.MaterialColor COLOR_YELLOW -> t
    net.minecraft.world.level.material.MaterialColor COLOR_LIGHT_GREEN -> u
    net.minecraft.world.level.material.MaterialColor COLOR_PINK -> v
    net.minecraft.world.level.material.MaterialColor COLOR_GRAY -> w
    net.minecraft.world.level.material.MaterialColor COLOR_LIGHT_GRAY -> x
    net.minecraft.world.level.material.MaterialColor COLOR_CYAN -> y
    net.minecraft.world.level.material.MaterialColor COLOR_PURPLE -> z
    net.minecraft.world.level.material.MaterialColor COLOR_BLUE -> A
    net.minecraft.world.level.material.MaterialColor COLOR_BROWN -> B
    net.minecraft.world.level.material.MaterialColor COLOR_GREEN -> C
    net.minecraft.world.level.material.MaterialColor COLOR_RED -> D
    net.minecraft.world.level.material.MaterialColor COLOR_BLACK -> E
    net.minecraft.world.level.material.MaterialColor GOLD -> F
    net.minecraft.world.level.material.MaterialColor DIAMOND -> G
    net.minecraft.world.level.material.MaterialColor LAPIS -> H
    net.minecraft.world.level.material.MaterialColor EMERALD -> I
    net.minecraft.world.level.material.MaterialColor PODZOL -> J
    net.minecraft.world.level.material.MaterialColor NETHER -> K
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_WHITE -> L
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_ORANGE -> M
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_MAGENTA -> N
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_LIGHT_BLUE -> O
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_YELLOW -> P
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_LIGHT_GREEN -> Q
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_PINK -> R
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_GRAY -> S
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_LIGHT_GRAY -> T
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_CYAN -> U
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_PURPLE -> V
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_BLUE -> W
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_BROWN -> X
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_GREEN -> Y
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_RED -> Z
    net.minecraft.world.level.material.MaterialColor TERRACOTTA_BLACK -> aa
    int col -> ab
    int id -> ac
    63:70:void <init>(int,int) -> <init>
    73:91:int calculateRGBColor(int) -> a
    4:58:void <clinit>() -> <clinit>
net.minecraft.world.level.material.PushReaction -> coq:
    net.minecraft.world.level.material.PushReaction NORMAL -> a
    net.minecraft.world.level.material.PushReaction DESTROY -> b
    net.minecraft.world.level.material.PushReaction BLOCK -> c
    net.minecraft.world.level.material.PushReaction IGNORE -> d
    net.minecraft.world.level.material.PushReaction PUSH_ONLY -> e
    net.minecraft.world.level.material.PushReaction[] $VALUES -> f
    3:3:net.minecraft.world.level.material.PushReaction[] values() -> values
    3:3:net.minecraft.world.level.material.PushReaction valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:4:void <clinit>() -> <clinit>
net.minecraft.world.level.material.WaterFluid -> cor:
    26:26:void <init>() -> <init>
    29:29:net.minecraft.world.level.material.Fluid getFlowing() -> d
    34:34:net.minecraft.world.level.material.Fluid getSource() -> e
    39:39:net.minecraft.world.item.Item getBucket() -> a
    44:51:void animateTick(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.material.FluidState,java.util.Random) -> a
    56:56:net.minecraft.core.particles.ParticleOptions getDripParticle() -> i
    61:61:boolean canConvertToSource() -> f
    66:68:void beforeDestroyingBlock(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    72:72:int getSlopeFindDistance(net.minecraft.world.level.LevelReader) -> b
    77:77:net.minecraft.world.level.block.state.BlockState createLegacyBlock(net.minecraft.world.level.material.FluidState) -> b
    82:82:boolean isSame(net.minecraft.world.level.material.Fluid) -> a
    87:87:int getDropOff(net.minecraft.world.level.LevelReader) -> c
    92:92:int getTickDelay(net.minecraft.world.level.LevelReader) -> a
    97:97:boolean canBeReplacedWith(net.minecraft.world.level.material.FluidState,net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos,net.minecraft.world.level.material.Fluid,net.minecraft.core.Direction) -> a
    102:102:float getExplosionResistance() -> c
net.minecraft.world.level.material.WaterFluid$Flowing -> cor$a:
    117:117:void <init>() -> <init>
    120:122:void createFluidStateDefinition(net.minecraft.world.level.block.state.StateDefinition$Builder) -> a
    126:126:int getAmount(net.minecraft.world.level.material.FluidState) -> d
    131:131:boolean isSource(net.minecraft.world.level.material.FluidState) -> c
net.minecraft.world.level.material.WaterFluid$Source -> cor$b:
    105:105:void <init>() -> <init>
    108:108:int getAmount(net.minecraft.world.level.material.FluidState) -> d
    113:113:boolean isSource(net.minecraft.world.level.material.FluidState) -> c
net.minecraft.world.level.material.package-info -> cos:
net.minecraft.world.level.newbiome.area.Area -> cot:
    int get(int,int) -> a
net.minecraft.world.level.newbiome.area.AreaFactory -> cou:
    net.minecraft.world.level.newbiome.area.Area make() -> make
net.minecraft.world.level.newbiome.area.LazyArea -> cov:
    net.minecraft.world.level.newbiome.layer.traits.PixelTransformer transformer -> a
    it.unimi.dsi.fastutil.longs.Long2IntLinkedOpenHashMap cache -> b
    int maxCache -> c
    12:16:void <init>(it.unimi.dsi.fastutil.longs.Long2IntLinkedOpenHashMap,int,net.minecraft.world.level.newbiome.layer.traits.PixelTransformer) -> <init>
    20:34:int get(int,int) -> a
    38:38:int getMaxCache() -> a
net.minecraft.world.level.newbiome.area.package-info -> cow:
net.minecraft.world.level.newbiome.context.BigContext -> cox:
    void initRandom(long,long) -> a
    net.minecraft.world.level.newbiome.area.Area createResult(net.minecraft.world.level.newbiome.layer.traits.PixelTransformer) -> a
    long getMixedSeed() -> a
    14:14:net.minecraft.world.level.newbiome.area.Area createResult(net.minecraft.world.level.newbiome.layer.traits.PixelTransformer,net.minecraft.world.level.newbiome.area.Area) -> a
    18:18:net.minecraft.world.level.newbiome.area.Area createResult(net.minecraft.world.level.newbiome.layer.traits.PixelTransformer,net.minecraft.world.level.newbiome.area.Area,net.minecraft.world.level.newbiome.area.Area) -> a
    22:22:int random(int,int) -> a
    26:36:int random(int,int,int,int) -> a
net.minecraft.world.level.newbiome.context.Context -> coy:
    int nextRandom(int) -> a
    net.minecraft.world.level.levelgen.synth.ImprovedNoise getBiomeNoise() -> b
net.minecraft.world.level.newbiome.context.LazyAreaContext -> coz:
    it.unimi.dsi.fastutil.longs.Long2IntLinkedOpenHashMap cache -> a
    int maxCache -> b
    net.minecraft.world.level.levelgen.synth.ImprovedNoise biomeNoise -> c
    long seed -> d
    long rval -> e
    22:29:void <init>(int,long,long) -> <init>
    33:33:net.minecraft.world.level.newbiome.area.LazyArea createResult(net.minecraft.world.level.newbiome.layer.traits.PixelTransformer) -> b
    38:38:net.minecraft.world.level.newbiome.area.LazyArea createResult(net.minecraft.world.level.newbiome.layer.traits.PixelTransformer,net.minecraft.world.level.newbiome.area.LazyArea) -> a
    43:43:net.minecraft.world.level.newbiome.area.LazyArea createResult(net.minecraft.world.level.newbiome.layer.traits.PixelTransformer,net.minecraft.world.level.newbiome.area.LazyArea,net.minecraft.world.level.newbiome.area.LazyArea) -> a
    48:54:void initRandom(long,long) -> a
    58:60:int nextRandom(int) -> a
    65:65:long getMixedSeed() -> a
    70:70:net.minecraft.world.level.levelgen.synth.ImprovedNoise getBiomeNoise() -> b
    74:83:long mixSeed(long,long) -> b
    12:12:net.minecraft.world.level.newbiome.area.Area createResult(net.minecraft.world.level.newbiome.layer.traits.PixelTransformer,net.minecraft.world.level.newbiome.area.Area,net.minecraft.world.level.newbiome.area.Area) -> a
    12:12:net.minecraft.world.level.newbiome.area.Area createResult(net.minecraft.world.level.newbiome.layer.traits.PixelTransformer,net.minecraft.world.level.newbiome.area.Area) -> a
    12:12:net.minecraft.world.level.newbiome.area.Area createResult(net.minecraft.world.level.newbiome.layer.traits.PixelTransformer) -> a
net.minecraft.world.level.newbiome.context.package-info -> cpa:
net.minecraft.world.level.newbiome.layer.AddDeepOceanLayer -> cpb:
    net.minecraft.world.level.newbiome.layer.AddDeepOceanLayer INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.AddDeepOceanLayer[] $VALUES -> b
    7:7:net.minecraft.world.level.newbiome.layer.AddDeepOceanLayer[] values() -> values
    7:7:net.minecraft.world.level.newbiome.layer.AddDeepOceanLayer valueOf(java.lang.String) -> valueOf
    7:7:void <init>(java.lang.String,int) -> <init>
    12:52:int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    7:8:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.AddEdgeLayer -> cpc:
    7:7:void <init>() -> <init>
net.minecraft.world.level.newbiome.layer.AddEdgeLayer$CoolWarm -> cpc$a:
    net.minecraft.world.level.newbiome.layer.AddEdgeLayer$CoolWarm INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.AddEdgeLayer$CoolWarm[] $VALUES -> b
    8:8:net.minecraft.world.level.newbiome.layer.AddEdgeLayer$CoolWarm[] values() -> values
    8:8:net.minecraft.world.level.newbiome.layer.AddEdgeLayer$CoolWarm valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    13:26:int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    8:9:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.AddEdgeLayer$HeatIce -> cpc$b:
    net.minecraft.world.level.newbiome.layer.AddEdgeLayer$HeatIce INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.AddEdgeLayer$HeatIce[] $VALUES -> b
    30:30:net.minecraft.world.level.newbiome.layer.AddEdgeLayer$HeatIce[] values() -> values
    30:30:net.minecraft.world.level.newbiome.layer.AddEdgeLayer$HeatIce valueOf(java.lang.String) -> valueOf
    30:30:void <init>(java.lang.String,int) -> <init>
    35:48:int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    30:31:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.AddEdgeLayer$IntroduceSpecial -> cpc$c:
    net.minecraft.world.level.newbiome.layer.AddEdgeLayer$IntroduceSpecial INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.AddEdgeLayer$IntroduceSpecial[] $VALUES -> b
    52:52:net.minecraft.world.level.newbiome.layer.AddEdgeLayer$IntroduceSpecial[] values() -> values
    52:52:net.minecraft.world.level.newbiome.layer.AddEdgeLayer$IntroduceSpecial valueOf(java.lang.String) -> valueOf
    52:52:void <init>(java.lang.String,int) -> <init>
    57:61:int apply(net.minecraft.world.level.newbiome.context.Context,int) -> a
    52:53:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.AddIslandLayer -> cpd:
    net.minecraft.world.level.newbiome.layer.AddIslandLayer INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.AddIslandLayer[] $VALUES -> b
    6:6:net.minecraft.world.level.newbiome.layer.AddIslandLayer[] values() -> values
    6:6:net.minecraft.world.level.newbiome.layer.AddIslandLayer valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    11:51:int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    6:7:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.AddMushroomIslandLayer -> cpe:
    net.minecraft.world.level.newbiome.layer.AddMushroomIslandLayer INSTANCE -> a
    int MUSHROOM_FIELDS -> b
    net.minecraft.world.level.newbiome.layer.AddMushroomIslandLayer[] $VALUES -> c
    8:8:net.minecraft.world.level.newbiome.layer.AddMushroomIslandLayer[] values() -> values
    8:8:net.minecraft.world.level.newbiome.layer.AddMushroomIslandLayer valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    15:18:int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    8:11:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.AddSnowLayer -> cpf:
    net.minecraft.world.level.newbiome.layer.AddSnowLayer INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.AddSnowLayer[] $VALUES -> b
    6:6:net.minecraft.world.level.newbiome.layer.AddSnowLayer[] values() -> values
    6:6:net.minecraft.world.level.newbiome.layer.AddSnowLayer valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    11:21:int apply(net.minecraft.world.level.newbiome.context.Context,int) -> a
    6:7:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.BiomeEdgeLayer -> cpg:
    net.minecraft.world.level.newbiome.layer.BiomeEdgeLayer INSTANCE -> a
    int DESERT -> b
    int MOUNTAINS -> c
    int WOODED_MOUNTAINS -> d
    int SNOWY_TUNDRA -> e
    int JUNGLE -> f
    int BAMBOO_JUNGLE -> g
    int JUNGLE_EDGE -> h
    int BADLANDS -> i
    int BADLANDS_PLATEAU -> j
    int WOODED_BADLANDS_PLATEAU -> k
    int PLAINS -> l
    int GIANT_TREE_TAIGA -> m
    int MOUNTAIN_EDGE -> n
    int SWAMP -> o
    int TAIGA -> p
    int SNOWY_TAIGA -> q
    net.minecraft.world.level.newbiome.layer.BiomeEdgeLayer[] $VALUES -> r
    10:10:net.minecraft.world.level.newbiome.layer.BiomeEdgeLayer[] values() -> values
    10:10:net.minecraft.world.level.newbiome.layer.BiomeEdgeLayer valueOf(java.lang.String) -> valueOf
    10:10:void <init>(java.lang.String,int) -> <init>
    32:58:int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    62:70:boolean checkEdge(int[],int,int,int,int,int,int,int) -> a
    74:82:boolean checkEdgeStrict(int[],int,int,int,int,int,int,int) -> b
    86:96:boolean isValidTemperatureEdge(int,int) -> a
    10:28:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.BiomeInitLayer -> cph:
    int BIRCH_FOREST -> a
    int DESERT -> b
    int MOUNTAINS -> c
    int FOREST -> d
    int SNOWY_TUNDRA -> e
    int JUNGLE -> f
    int BADLANDS_PLATEAU -> g
    int WOODED_BADLANDS_PLATEAU -> h
    int MUSHROOM_FIELDS -> i
    int PLAINS -> j
    int GIANT_TREE_TAIGA -> k
    int DARK_FOREST -> l
    int SAVANNA -> m
    int SWAMP -> n
    int TAIGA -> o
    int SNOWY_TAIGA -> p
    int[] LEGACY_WARM_BIOMES -> q
    int[] WARM_BIOMES -> r
    int[] MEDIUM_BIOMES -> s
    int[] COLD_BIOMES -> t
    int[] ICE_BIOMES -> u
    int fixedBiome -> v
    int[] warmBiomes -> w
    34:43:void <init>(net.minecraft.world.level.LevelType,int) -> <init>
    47:77:int apply(net.minecraft.world.level.newbiome.context.Context,int) -> a
    10:31:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.IslandLayer -> cpi:
    net.minecraft.world.level.newbiome.layer.IslandLayer INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.IslandLayer[] $VALUES -> b
    6:6:net.minecraft.world.level.newbiome.layer.IslandLayer[] values() -> values
    6:6:net.minecraft.world.level.newbiome.layer.IslandLayer valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    12:16:int applyPixel(net.minecraft.world.level.newbiome.context.Context,int,int) -> a
    6:7:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.Layer -> cpj:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.level.newbiome.area.LazyArea area -> b
    17:19:void <init>(net.minecraft.world.level.newbiome.area.AreaFactory) -> <init>
    22:29:net.minecraft.world.level.biome.Biome[] getArea(int,int,int,int) -> a
    33:42:net.minecraft.world.level.biome.Biome getBiome(int) -> a
    46:46:net.minecraft.world.level.biome.Biome get(int,int) -> a
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.Layers -> cpk:
    int WARM_OCEAN -> a
    int LUKEWARM_OCEAN -> b
    int OCEAN -> c
    int COLD_OCEAN -> d
    int FROZEN_OCEAN -> e
    int DEEP_WARM_OCEAN -> f
    int DEEP_LUKEWARM_OCEAN -> g
    int DEEP_OCEAN -> h
    int DEEP_COLD_OCEAN -> i
    int DEEP_FROZEN_OCEAN -> j
    17:17:void <init>() -> <init>
    38:42:net.minecraft.world.level.newbiome.area.AreaFactory zoom(long,net.minecraft.world.level.newbiome.layer.traits.AreaTransformer1,net.minecraft.world.level.newbiome.area.AreaFactory,int,java.util.function.LongFunction) -> a
    46:108:net.minecraft.world.level.newbiome.area.AreaFactory getDefaultLayer(net.minecraft.world.level.LevelType,net.minecraft.world.level.levelgen.OverworldGeneratorSettings,java.util.function.LongFunction) -> a
    113:115:net.minecraft.world.level.newbiome.layer.Layer getDefaultLayer(long,net.minecraft.world.level.LevelType,net.minecraft.world.level.levelgen.OverworldGeneratorSettings) -> a
    119:141:boolean isSame(int,int) -> a
    145:145:boolean isOcean(int) -> a
    159:159:boolean isShallowOcean(int) -> b
    114:114:net.minecraft.world.level.newbiome.context.LazyAreaContext lambda$getDefaultLayer$0(long,long) -> a
    25:35:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.OceanLayer -> cpl:
    net.minecraft.world.level.newbiome.layer.OceanLayer INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.OceanLayer[] $VALUES -> b
    7:7:net.minecraft.world.level.newbiome.layer.OceanLayer[] values() -> values
    7:7:net.minecraft.world.level.newbiome.layer.OceanLayer valueOf(java.lang.String) -> valueOf
    7:7:void <init>(java.lang.String,int) -> <init>
    12:31:int applyPixel(net.minecraft.world.level.newbiome.context.Context,int,int) -> a
    7:8:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.OceanMixerLayer -> cpm:
    net.minecraft.world.level.newbiome.layer.OceanMixerLayer INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.OceanMixerLayer[] $VALUES -> b
    8:8:net.minecraft.world.level.newbiome.layer.OceanMixerLayer[] values() -> values
    8:8:net.minecraft.world.level.newbiome.layer.OceanMixerLayer valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    13:54:int applyPixel(net.minecraft.world.level.newbiome.context.Context,net.minecraft.world.level.newbiome.area.Area,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
    8:9:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.RareBiomeLargeLayer -> cpn:
    net.minecraft.world.level.newbiome.layer.RareBiomeLargeLayer INSTANCE -> a
    int JUNGLE -> b
    int BAMBOO_JUNGLE -> c
    net.minecraft.world.level.newbiome.layer.RareBiomeLargeLayer[] $VALUES -> d
    8:8:net.minecraft.world.level.newbiome.layer.RareBiomeLargeLayer[] values() -> values
    8:8:net.minecraft.world.level.newbiome.layer.RareBiomeLargeLayer valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    16:19:int apply(net.minecraft.world.level.newbiome.context.Context,int) -> a
    8:12:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.RareBiomeSpotLayer -> cpo:
    net.minecraft.world.level.newbiome.layer.RareBiomeSpotLayer INSTANCE -> a
    int PLAINS -> b
    int SUNFLOWER_PLAINS -> c
    net.minecraft.world.level.newbiome.layer.RareBiomeSpotLayer[] $VALUES -> d
    8:8:net.minecraft.world.level.newbiome.layer.RareBiomeSpotLayer[] values() -> values
    8:8:net.minecraft.world.level.newbiome.layer.RareBiomeSpotLayer valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    16:19:int apply(net.minecraft.world.level.newbiome.context.Context,int) -> a
    8:12:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.RegionHillsLayer -> cpp:
    net.minecraft.world.level.newbiome.layer.RegionHillsLayer INSTANCE -> a
    org.apache.logging.log4j.Logger LOGGER -> b
    int BIRCH_FOREST -> c
    int BIRCH_FOREST_HILLS -> d
    int DESERT -> e
    int DESERT_HILLS -> f
    int MOUNTAINS -> g
    int WOODED_MOUNTAINS -> h
    int FOREST -> i
    int WOODED_HILLS -> j
    int SNOWY_TUNDRA -> k
    int SNOWY_MOUNTAIN -> l
    int JUNGLE -> m
    int JUNGLE_HILLS -> n
    int BAMBOO_JUNGLE -> o
    int BAMBOO_JUNGLE_HILLS -> p
    int BADLANDS -> q
    int WOODED_BADLANDS_PLATEAU -> r
    int PLAINS -> s
    int GIANT_TREE_TAIGA -> t
    int GIANT_TREE_TAIGA_HILLS -> u
    int DARK_FOREST -> v
    int SAVANNA -> w
    int SAVANNA_PLATEAU -> x
    int TAIGA -> y
    int SNOWY_TAIGA -> z
    int SNOWY_TAIGA_HILLS -> A
    int TAIGA_HILLS -> B
    net.minecraft.world.level.newbiome.layer.RegionHillsLayer[] $VALUES -> C
    13:13:net.minecraft.world.level.newbiome.layer.RegionHillsLayer[] values() -> values
    13:13:net.minecraft.world.level.newbiome.layer.RegionHillsLayer valueOf(java.lang.String) -> valueOf
    13:13:void <init>(java.lang.String,int) -> <init>
    47:130:int applyPixel(net.minecraft.world.level.newbiome.context.Context,net.minecraft.world.level.newbiome.area.Area,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
    13:43:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.RemoveTooMuchOceanLayer -> cpq:
    net.minecraft.world.level.newbiome.layer.RemoveTooMuchOceanLayer INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.RemoveTooMuchOceanLayer[] $VALUES -> b
    6:6:net.minecraft.world.level.newbiome.layer.RemoveTooMuchOceanLayer[] values() -> values
    6:6:net.minecraft.world.level.newbiome.layer.RemoveTooMuchOceanLayer valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    11:14:int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    6:7:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.RiverInitLayer -> cpr:
    net.minecraft.world.level.newbiome.layer.RiverInitLayer INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.RiverInitLayer[] $VALUES -> b
    6:6:net.minecraft.world.level.newbiome.layer.RiverInitLayer[] values() -> values
    6:6:net.minecraft.world.level.newbiome.layer.RiverInitLayer valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    11:11:int apply(net.minecraft.world.level.newbiome.context.Context,int) -> a
    6:7:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.RiverLayer -> cps:
    net.minecraft.world.level.newbiome.layer.RiverLayer INSTANCE -> a
    int RIVER -> b
    net.minecraft.world.level.newbiome.layer.RiverLayer[] $VALUES -> c
    8:8:net.minecraft.world.level.newbiome.layer.RiverLayer[] values() -> values
    8:8:net.minecraft.world.level.newbiome.layer.RiverLayer valueOf(java.lang.String) -> valueOf
    8:8:void <init>(java.lang.String,int) -> <init>
    15:23:int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    27:30:int riverFilter(int) -> c
    8:11:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.RiverMixerLayer -> cpt:
    net.minecraft.world.level.newbiome.layer.RiverMixerLayer INSTANCE -> a
    int FROZEN_RIVER -> b
    int SNOWY_TUNDRA -> c
    int MUSHROOM_FIELDS -> d
    int MUSHROOM_FIELD_SHORE -> e
    int RIVER -> f
    net.minecraft.world.level.newbiome.layer.RiverMixerLayer[] $VALUES -> g
    10:10:net.minecraft.world.level.newbiome.layer.RiverMixerLayer[] values() -> values
    10:10:net.minecraft.world.level.newbiome.layer.RiverMixerLayer valueOf(java.lang.String) -> valueOf
    10:10:void <init>(java.lang.String,int) -> <init>
    21:36:int applyPixel(net.minecraft.world.level.newbiome.context.Context,net.minecraft.world.level.newbiome.area.Area,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
    10:17:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.ShoreLayer -> cpu:
    net.minecraft.world.level.newbiome.layer.ShoreLayer INSTANCE -> a
    int BEACH -> b
    int SNOWY_BEACH -> c
    int DESERT -> d
    int MOUNTAINS -> e
    int WOODED_MOUNTAINS -> f
    int FOREST -> g
    int JUNGLE -> h
    int JUNGLE_EDGE -> i
    int JUNGLE_HILLS -> j
    int BADLANDS -> k
    int WOODED_BADLANDS_PLATEAU -> l
    int BADLANDS_PLATEAU -> m
    int ERODED_BADLANDS -> n
    int MODIFIED_WOODED_BADLANDS_PLATEAU -> o
    int MODIFIED_BADLANDS_PLATEAU -> p
    int MUSHROOM_FIELDS -> q
    int MUSHROOM_FIELD_SHORE -> r
    int RIVER -> s
    int MOUNTAIN_EDGE -> t
    int STONE_SHORE -> u
    int SWAMP -> v
    int TAIGA -> w
    net.minecraft.world.level.newbiome.layer.ShoreLayer[] $VALUES -> x
    9:9:net.minecraft.world.level.newbiome.layer.ShoreLayer[] values() -> values
    9:9:net.minecraft.world.level.newbiome.layer.ShoreLayer valueOf(java.lang.String) -> valueOf
    9:9:void <init>(java.lang.String,int) -> <init>
    37:65:int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    69:73:boolean isJungleCompatible(int) -> c
    77:77:boolean isMesa(int) -> d
    9:33:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.SmoothLayer -> cpv:
    net.minecraft.world.level.newbiome.layer.SmoothLayer INSTANCE -> a
    net.minecraft.world.level.newbiome.layer.SmoothLayer[] $VALUES -> b
    6:6:net.minecraft.world.level.newbiome.layer.SmoothLayer[] values() -> values
    6:6:net.minecraft.world.level.newbiome.layer.SmoothLayer valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    11:20:int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    6:7:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.ZoomLayer -> cpw:
    net.minecraft.world.level.newbiome.layer.ZoomLayer NORMAL -> a
    net.minecraft.world.level.newbiome.layer.ZoomLayer FUZZY -> b
    net.minecraft.world.level.newbiome.layer.ZoomLayer[] $VALUES -> c
    7:7:net.minecraft.world.level.newbiome.layer.ZoomLayer[] values() -> values
    7:7:net.minecraft.world.level.newbiome.layer.ZoomLayer valueOf(java.lang.String) -> valueOf
    7:7:void <init>(java.lang.String,int) -> <init>
    21:21:int getParentX(int) -> a
    26:26:int getParentY(int) -> b
    31:54:int applyPixel(net.minecraft.world.level.newbiome.context.BigContext,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
    58:89:int modeOrRandom(net.minecraft.world.level.newbiome.context.BigContext,int,int,int,int) -> a
    7:7:void <init>(java.lang.String,int,net.minecraft.world.level.newbiome.layer.ZoomLayer$1) -> <init>
    7:9:void <clinit>() -> <clinit>
net.minecraft.world.level.newbiome.layer.ZoomLayer$1 -> cpw$1:
    9:9:void <init>(java.lang.String,int) -> <init>
    12:12:int modeOrRandom(net.minecraft.world.level.newbiome.context.BigContext,int,int,int,int) -> a
net.minecraft.world.level.newbiome.layer.package-info -> cpx:
net.minecraft.world.level.newbiome.layer.traits.AreaTransformer0 -> cpy:
    10:10:net.minecraft.world.level.newbiome.area.AreaFactory run(net.minecraft.world.level.newbiome.context.BigContext) -> a
    int applyPixel(net.minecraft.world.level.newbiome.context.Context,int,int) -> a
    10:10:net.minecraft.world.level.newbiome.area.Area lambda$run$1(net.minecraft.world.level.newbiome.context.BigContext) -> b
    11:12:int lambda$null$0(net.minecraft.world.level.newbiome.context.BigContext,int,int) -> a
net.minecraft.world.level.newbiome.layer.traits.AreaTransformer1 -> cpz:
    9:9:net.minecraft.world.level.newbiome.area.AreaFactory run(net.minecraft.world.level.newbiome.context.BigContext,net.minecraft.world.level.newbiome.area.AreaFactory) -> a
    int applyPixel(net.minecraft.world.level.newbiome.context.BigContext,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
    10:11:net.minecraft.world.level.newbiome.area.Area lambda$run$1(net.minecraft.world.level.newbiome.area.AreaFactory,net.minecraft.world.level.newbiome.context.BigContext) -> a
    12:13:int lambda$null$0(net.minecraft.world.level.newbiome.context.BigContext,net.minecraft.world.level.newbiome.area.Area,int,int) -> b
net.minecraft.world.level.newbiome.layer.traits.AreaTransformer2 -> cqa:
    10:10:net.minecraft.world.level.newbiome.area.AreaFactory run(net.minecraft.world.level.newbiome.context.BigContext,net.minecraft.world.level.newbiome.area.AreaFactory,net.minecraft.world.level.newbiome.area.AreaFactory) -> a
    int applyPixel(net.minecraft.world.level.newbiome.context.Context,net.minecraft.world.level.newbiome.area.Area,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
    11:13:net.minecraft.world.level.newbiome.area.Area lambda$run$1(net.minecraft.world.level.newbiome.area.AreaFactory,net.minecraft.world.level.newbiome.area.AreaFactory,net.minecraft.world.level.newbiome.context.BigContext) -> a
    14:15:int lambda$null$0(net.minecraft.world.level.newbiome.context.BigContext,net.minecraft.world.level.newbiome.area.Area,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
net.minecraft.world.level.newbiome.layer.traits.BishopTransformer -> cqb:
    int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    12:18:int applyPixel(net.minecraft.world.level.newbiome.context.BigContext,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
net.minecraft.world.level.newbiome.layer.traits.C0Transformer -> cqc:
    int apply(net.minecraft.world.level.newbiome.context.Context,int) -> a
    12:12:int applyPixel(net.minecraft.world.level.newbiome.context.BigContext,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
net.minecraft.world.level.newbiome.layer.traits.C1Transformer -> cqd:
    int apply(net.minecraft.world.level.newbiome.context.Context,int) -> a
    12:13:int applyPixel(net.minecraft.world.level.newbiome.context.BigContext,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
net.minecraft.world.level.newbiome.layer.traits.CastleTransformer -> cqe:
    int apply(net.minecraft.world.level.newbiome.context.Context,int,int,int,int,int) -> a
    12:18:int applyPixel(net.minecraft.world.level.newbiome.context.BigContext,net.minecraft.world.level.newbiome.area.Area,int,int) -> a
net.minecraft.world.level.newbiome.layer.traits.DimensionOffset0Transformer -> cqf:
    6:6:int getParentX(int) -> a
    11:11:int getParentY(int) -> b
net.minecraft.world.level.newbiome.layer.traits.DimensionOffset1Transformer -> cqg:
    6:6:int getParentX(int) -> a
    11:11:int getParentY(int) -> b
net.minecraft.world.level.newbiome.layer.traits.DimensionTransformer -> cqh:
    int getParentX(int) -> a
    int getParentY(int) -> b
net.minecraft.world.level.newbiome.layer.traits.PixelTransformer -> cqi:
    int apply(int,int) -> apply
net.minecraft.world.level.newbiome.layer.traits.package-info -> cqj:
net.minecraft.world.level.package-info -> cqk:
net.minecraft.world.level.pathfinder.BinaryHeap -> cql:
    net.minecraft.world.level.pathfinder.Node[] heap -> a
    int size -> b
    3:4:void <init>() -> <init>
    9:24:net.minecraft.world.level.pathfinder.Node insert(net.minecraft.world.level.pathfinder.Node) -> a
    28:29:void clear() -> a
    32:32:net.minecraft.world.level.pathfinder.Node peek() -> b
    36:43:net.minecraft.world.level.pathfinder.Node pop() -> c
    48:59:void remove(net.minecraft.world.level.pathfinder.Node) -> b
    62:69:void changeCost(net.minecraft.world.level.pathfinder.Node,float) -> a
    72:72:int size() -> d
    76:91:void upHeap(int) -> a
    94:144:void downHeap(int) -> b
    147:147:boolean isEmpty() -> e
    151:153:net.minecraft.world.level.pathfinder.Node[] getHeap() -> f
net.minecraft.world.level.pathfinder.BlockPathTypes -> cqm:
    net.minecraft.world.level.pathfinder.BlockPathTypes BLOCKED -> a
    net.minecraft.world.level.pathfinder.BlockPathTypes OPEN -> b
    net.minecraft.world.level.pathfinder.BlockPathTypes WALKABLE -> c
    net.minecraft.world.level.pathfinder.BlockPathTypes TRAPDOOR -> d
    net.minecraft.world.level.pathfinder.BlockPathTypes FENCE -> e
    net.minecraft.world.level.pathfinder.BlockPathTypes LAVA -> f
    net.minecraft.world.level.pathfinder.BlockPathTypes WATER -> g
    net.minecraft.world.level.pathfinder.BlockPathTypes WATER_BORDER -> h
    net.minecraft.world.level.pathfinder.BlockPathTypes RAIL -> i
    net.minecraft.world.level.pathfinder.BlockPathTypes DANGER_FIRE -> j
    net.minecraft.world.level.pathfinder.BlockPathTypes DAMAGE_FIRE -> k
    net.minecraft.world.level.pathfinder.BlockPathTypes DANGER_CACTUS -> l
    net.minecraft.world.level.pathfinder.BlockPathTypes DAMAGE_CACTUS -> m
    net.minecraft.world.level.pathfinder.BlockPathTypes DANGER_OTHER -> n
    net.minecraft.world.level.pathfinder.BlockPathTypes DAMAGE_OTHER -> o
    net.minecraft.world.level.pathfinder.BlockPathTypes DOOR_OPEN -> p
    net.minecraft.world.level.pathfinder.BlockPathTypes DOOR_WOOD_CLOSED -> q
    net.minecraft.world.level.pathfinder.BlockPathTypes DOOR_IRON_CLOSED -> r
    net.minecraft.world.level.pathfinder.BlockPathTypes BREACH -> s
    net.minecraft.world.level.pathfinder.BlockPathTypes LEAVES -> t
    net.minecraft.world.level.pathfinder.BlockPathTypes STICKY_HONEY -> u
    net.minecraft.world.level.pathfinder.BlockPathTypes COCOA -> v
    float malus -> w
    net.minecraft.world.level.pathfinder.BlockPathTypes[] $VALUES -> x
    3:3:net.minecraft.world.level.pathfinder.BlockPathTypes[] values() -> values
    3:3:net.minecraft.world.level.pathfinder.BlockPathTypes valueOf(java.lang.String) -> valueOf
    30:32:void <init>(java.lang.String,int,float) -> <init>
    35:35:float getMalus() -> a
    3:25:void <clinit>() -> <clinit>
net.minecraft.world.level.pathfinder.FlyNodeEvaluator -> cqn:
    17:17:void <init>() -> <init>
    20:22:void prepare(net.minecraft.world.level.PathNavigationRegion,net.minecraft.world.entity.Mob) -> a
    26:28:void done() -> a
    34:65:net.minecraft.world.level.pathfinder.Node getStart() -> b
    70:70:net.minecraft.world.level.pathfinder.Target getGoal(double,double,double) -> a
    75:210:int getNeighbors(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.Node) -> a
    214:214:boolean hasMalus(net.minecraft.world.level.pathfinder.Node) -> a
    218:218:boolean isOpen(net.minecraft.world.level.pathfinder.Node) -> b
    224:244:net.minecraft.world.level.pathfinder.Node getNode(int,int,int) -> a
    250:279:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.level.BlockGetter,int,int,int,net.minecraft.world.entity.Mob,int,int,int,boolean,boolean) -> a
    284:310:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.level.BlockGetter,int,int,int) -> a
    314:314:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.entity.Mob,net.minecraft.core.BlockPos) -> a
    318:318:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.entity.Mob,int,int,int) -> a
net.minecraft.world.level.pathfinder.Node -> cqo:
    int x -> a
    int y -> b
    int z -> c
    int hash -> m
    int heapIdx -> d
    float g -> e
    float h -> f
    float f -> g
    net.minecraft.world.level.pathfinder.Node cameFrom -> h
    boolean closed -> i
    float walkedDistance -> j
    float costMalus -> k
    net.minecraft.world.level.pathfinder.BlockPathTypes type -> l
    14:32:void <init>(int,int,int) -> <init>
    35:45:net.minecraft.world.level.pathfinder.Node cloneMove(int,int,int) -> a
    49:49:int createHash(int,int,int) -> b
    53:56:float distanceTo(net.minecraft.world.level.pathfinder.Node) -> a
    60:63:float distanceTo(net.minecraft.core.BlockPos) -> a
    67:70:float distanceToSqr(net.minecraft.world.level.pathfinder.Node) -> b
    74:77:float distanceToSqr(net.minecraft.core.BlockPos) -> b
    81:84:float distanceManhattan(net.minecraft.world.level.pathfinder.Node) -> c
    88:91:float distanceManhattan(net.minecraft.core.BlockPos) -> c
    95:95:net.minecraft.core.BlockPos asBlockPos() -> a
    99:99:net.minecraft.world.phys.Vec3 asVec3() -> b
    104:108:boolean equals(java.lang.Object) -> equals
    113:113:int hashCode() -> hashCode
    117:117:boolean inOpenSet() -> c
    122:122:java.lang.String toString() -> toString
    126:134:void writeToStream(net.minecraft.network.FriendlyByteBuf) -> a
    137:143:net.minecraft.world.level.pathfinder.Node createFromStream(net.minecraft.network.FriendlyByteBuf) -> b
net.minecraft.world.level.pathfinder.NodeEvaluator -> cqp:
    net.minecraft.world.level.PathNavigationRegion level -> a
    net.minecraft.world.entity.Mob mob -> b
    it.unimi.dsi.fastutil.ints.Int2ObjectMap nodes -> c
    int entityWidth -> d
    int entityHeight -> e
    int entityDepth -> f
    boolean canPassDoors -> g
    boolean canOpenDoors -> h
    boolean canFloat -> i
    18:28:void <init>() -> <init>
    31:38:void prepare(net.minecraft.world.level.PathNavigationRegion,net.minecraft.world.entity.Mob) -> a
    41:43:void done() -> a
    46:46:net.minecraft.world.level.pathfinder.Node getNode(int,int,int) -> a
    net.minecraft.world.level.pathfinder.Node getStart() -> b
    net.minecraft.world.level.pathfinder.Target getGoal(double,double,double) -> a
    int getNeighbors(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.Node) -> a
    net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.level.BlockGetter,int,int,int,net.minecraft.world.entity.Mob,int,int,int,boolean,boolean) -> a
    net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.level.BlockGetter,int,int,int) -> a
    60:61:void setCanPassDoors(boolean) -> a
    64:65:void setCanOpenDoors(boolean) -> b
    68:69:void setCanFloat(boolean) -> c
    72:72:boolean canPassDoors() -> c
    76:76:boolean canOpenDoors() -> d
    80:80:boolean canFloat() -> e
    46:46:net.minecraft.world.level.pathfinder.Node lambda$getNode$0(int,int,int,int) -> a
net.minecraft.world.level.pathfinder.Path -> cqq:
    java.util.List nodes -> a
    net.minecraft.world.level.pathfinder.Node[] openSet -> b
    net.minecraft.world.level.pathfinder.Node[] closedSet -> c
    java.util.Set targetNodes -> d
    int index -> e
    net.minecraft.core.BlockPos target -> f
    float distToTarget -> g
    boolean reached -> h
    27:43:void <init>(java.util.List,net.minecraft.core.BlockPos,boolean) -> <init>
    46:47:void next() -> a
    50:50:boolean isDone() -> b
    55:58:net.minecraft.world.level.pathfinder.Node last() -> c
    62:62:net.minecraft.world.level.pathfinder.Node get(int) -> a
    66:66:java.util.List getNodes() -> d
    70:73:void truncate(int) -> b
    76:77:void set(int,net.minecraft.world.level.pathfinder.Node) -> a
    80:80:int getSize() -> e
    84:84:int getIndex() -> f
    88:89:void setIndex(int) -> c
    92:96:net.minecraft.world.phys.Vec3 getPos(net.minecraft.world.entity.Entity,int) -> a
    100:100:net.minecraft.world.phys.Vec3 currentPos(net.minecraft.world.entity.Entity) -> a
    104:105:net.minecraft.world.phys.Vec3 currentPos() -> g
    109:124:boolean sameAs(net.minecraft.world.level.pathfinder.Path) -> a
    131:131:boolean canReach() -> h
    135:138:void setDebug(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.Node[],java.util.Set) -> a
    142:142:net.minecraft.world.level.pathfinder.Node[] getOpenSet() -> i
    147:147:net.minecraft.world.level.pathfinder.Node[] getClosedSet() -> j
    151:178:void writeToStream(net.minecraft.network.FriendlyByteBuf) -> a
    181:213:net.minecraft.world.level.pathfinder.Path createFromStream(net.minecraft.network.FriendlyByteBuf) -> b
    218:218:java.lang.String toString() -> toString
    222:222:net.minecraft.core.BlockPos getTarget() -> k
    226:226:float getDistToTarget() -> l
    158:158:void lambda$writeToStream$0(net.minecraft.network.FriendlyByteBuf,net.minecraft.world.level.pathfinder.Target) -> a
net.minecraft.world.level.pathfinder.PathComputationType -> cqr:
    net.minecraft.world.level.pathfinder.PathComputationType LAND -> a
    net.minecraft.world.level.pathfinder.PathComputationType WATER -> b
    net.minecraft.world.level.pathfinder.PathComputationType AIR -> c
    net.minecraft.world.level.pathfinder.PathComputationType[] $VALUES -> d
    3:3:net.minecraft.world.level.pathfinder.PathComputationType[] values() -> values
    3:3:net.minecraft.world.level.pathfinder.PathComputationType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:4:void <clinit>() -> <clinit>
net.minecraft.world.level.pathfinder.PathFinder -> cqs:
    net.minecraft.world.level.pathfinder.BinaryHeap openSet -> a
    java.util.Set closedSet -> b
    net.minecraft.world.level.pathfinder.Node[] neighbors -> c
    int maxVisitedNodes -> d
    net.minecraft.world.level.pathfinder.NodeEvaluator nodeEvaluator -> e
    25:34:void <init>(net.minecraft.world.level.pathfinder.NodeEvaluator,int) -> <init>
    38:47:net.minecraft.world.level.pathfinder.Path findPath(net.minecraft.world.level.PathNavigationRegion,net.minecraft.world.entity.Mob,java.util.Set,float,int,float) -> a
    56:135:net.minecraft.world.level.pathfinder.Path findPath(net.minecraft.world.level.pathfinder.Node,java.util.Map,float,int,float) -> a
    140:146:float getBestH(net.minecraft.world.level.pathfinder.Node,java.util.Set) -> a
    150:157:net.minecraft.world.level.pathfinder.Path reconstructPath(net.minecraft.world.level.pathfinder.Node,net.minecraft.core.BlockPos,boolean) -> a
    122:122:net.minecraft.world.level.pathfinder.Path lambda$findPath$3(java.util.Map,net.minecraft.world.level.pathfinder.Target) -> a
    118:118:net.minecraft.world.level.pathfinder.Path lambda$findPath$2(java.util.Map,net.minecraft.world.level.pathfinder.Target) -> b
    76:76:boolean lambda$findPath$1(net.minecraft.world.level.pathfinder.Node,int,net.minecraft.world.level.pathfinder.Target) -> a
    43:43:net.minecraft.world.level.pathfinder.Target lambda$findPath$0(net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.pathfinder.SwimNodeEvaluator -> cqt:
    boolean allowBreaching -> j
    17:19:void <init>(boolean) -> <init>
    23:23:net.minecraft.world.level.pathfinder.Node getStart() -> b
    28:28:net.minecraft.world.level.pathfinder.Target getGoal(double,double,double) -> a
    33:42:int getNeighbors(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.Node) -> a
    47:47:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.level.BlockGetter,int,int,int,net.minecraft.world.entity.Mob,int,int,int,boolean,boolean) -> a
    52:62:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.level.BlockGetter,int,int,int) -> a
    67:72:net.minecraft.world.level.pathfinder.Node getWaterNode(int,int,int) -> b
    78:98:net.minecraft.world.level.pathfinder.Node getNode(int,int,int) -> a
    102:125:net.minecraft.world.level.pathfinder.BlockPathTypes isFree(int,int,int) -> c
net.minecraft.world.level.pathfinder.Target -> cqu:
    float bestHeuristic -> m
    net.minecraft.world.level.pathfinder.Node bestNode -> n
    boolean reached -> o
    6:12:void <init>(net.minecraft.world.level.pathfinder.Node) -> <init>
    6:16:void <init>(int,int,int) -> <init>
    19:23:void updateBest(float,net.minecraft.world.level.pathfinder.Node) -> a
    26:26:net.minecraft.world.level.pathfinder.Node getBestNode() -> d
    30:31:void setReached() -> e
    34:34:boolean isReached() -> f
    38:44:net.minecraft.world.level.pathfinder.Target createFromStream(net.minecraft.network.FriendlyByteBuf) -> c
net.minecraft.world.level.pathfinder.TurtleNodeEvaluator -> cqv:
    float oldWalkableCost -> k
    float oldWaterBorderCost -> l
    17:17:void <init>() -> <init>
    23:29:void prepare(net.minecraft.world.level.PathNavigationRegion,net.minecraft.world.entity.Mob) -> a
    33:36:void done() -> a
    40:40:net.minecraft.world.level.pathfinder.Node getStart() -> b
    46:46:net.minecraft.world.level.pathfinder.Target getGoal(double,double,double) -> a
    52:114:int getNeighbors(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.Node) -> a
    118:123:double inWaterDependentPosHeight(net.minecraft.core.BlockPos) -> a
    128:208:net.minecraft.world.level.pathfinder.Node getAcceptedNode(int,int,int,int,double) -> a
    213:222:net.minecraft.world.level.pathfinder.BlockPathTypes evaluateBlockPathType(net.minecraft.world.level.BlockGetter,boolean,boolean,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.BlockPathTypes) -> a
    227:267:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.level.BlockGetter,int,int,int) -> a
net.minecraft.world.level.pathfinder.WalkNodeEvaluator -> cqw:
    float oldWaterCost -> j
    33:34:void <init>() -> <init>
    38:40:void prepare(net.minecraft.world.level.PathNavigationRegion,net.minecraft.world.entity.Mob) -> a
    44:46:void done() -> a
    52:92:net.minecraft.world.level.pathfinder.Node getStart() -> b
    97:97:net.minecraft.world.level.pathfinder.Target getGoal(double,double,double) -> a
    102:157:int getNeighbors(net.minecraft.world.level.pathfinder.Node[],net.minecraft.world.level.pathfinder.Node) -> a
    161:173:boolean isDiagonalValid(net.minecraft.world.level.pathfinder.Node,net.minecraft.world.level.pathfinder.Node,net.minecraft.world.level.pathfinder.Node,net.minecraft.world.level.pathfinder.Node) -> a
    179:181:double getFloorLevel(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    186:311:net.minecraft.world.level.pathfinder.Node getLandNode(int,int,int,int,double,net.minecraft.core.Direction) -> a
    317:347:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.level.BlockGetter,int,int,int,net.minecraft.world.entity.Mob,int,int,int,boolean,boolean) -> a
    351:387:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathTypes(net.minecraft.world.level.BlockGetter,int,int,int,int,int,int,boolean,boolean,java.util.EnumSet,net.minecraft.world.level.pathfinder.BlockPathTypes,net.minecraft.core.BlockPos) -> a
    391:403:net.minecraft.world.level.pathfinder.BlockPathTypes evaluateBlockPathType(net.minecraft.world.level.BlockGetter,boolean,boolean,net.minecraft.core.BlockPos,net.minecraft.world.level.pathfinder.BlockPathTypes) -> a
    407:407:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.entity.Mob,net.minecraft.core.BlockPos) -> a
    411:411:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.entity.Mob,int,int,int) -> a
    416:416:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathType(net.minecraft.world.level.BlockGetter,int,int,int) -> a
    424:453:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathTypeStatic(net.minecraft.world.level.BlockGetter,int,int,int) -> b
    458:477:net.minecraft.world.level.pathfinder.BlockPathTypes checkNeighbourBlocks(net.minecraft.world.level.BlockGetter,int,int,int,net.minecraft.world.level.pathfinder.BlockPathTypes) -> a
    481:546:net.minecraft.world.level.pathfinder.BlockPathTypes getBlockPathTypeRaw(net.minecraft.world.level.BlockGetter,int,int,int) -> c
net.minecraft.world.level.pathfinder.package-info -> cqx:
net.minecraft.world.level.redstone.Redstone -> cqy:
    3:3:void <init>() -> <init>
net.minecraft.world.level.redstone.package-info -> cqz:
net.minecraft.world.level.saveddata.SaveDataDirtyRunnable -> cra:
    net.minecraft.world.level.saveddata.SavedData savedData -> a
    6:8:void <init>(net.minecraft.world.level.saveddata.SavedData) -> <init>
    12:13:void run() -> run
net.minecraft.world.level.saveddata.SavedData -> crb:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.lang.String id -> b
    boolean dirty -> c
    18:20:void <init>(java.lang.String) -> <init>
    void load(net.minecraft.nbt.CompoundTag) -> a
    net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    27:28:void setDirty() -> b
    31:32:void setDirty(boolean) -> a
    35:35:boolean isDirty() -> c
    39:39:java.lang.String getId() -> d
    43:57:void save(java.io.File) -> a
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.level.saveddata.maps.MapBanner -> crc:
    net.minecraft.core.BlockPos pos -> a
    net.minecraft.world.item.DyeColor color -> b
    net.minecraft.network.chat.Component name -> c
    21:25:void <init>(net.minecraft.core.BlockPos,net.minecraft.world.item.DyeColor,net.minecraft.network.chat.Component) -> <init>
    28:31:net.minecraft.world.level.saveddata.maps.MapBanner load(net.minecraft.nbt.CompoundTag) -> a
    36:43:net.minecraft.world.level.saveddata.maps.MapBanner fromWorld(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> a
    48:48:net.minecraft.core.BlockPos getPos() -> a
    52:52:net.minecraft.world.item.DyeColor getColor() -> b
    56:89:net.minecraft.world.level.saveddata.maps.MapDecoration$Type getDecoration() -> c
    95:95:net.minecraft.network.chat.Component getName() -> d
    100:107:boolean equals(java.lang.Object) -> equals
    112:112:int hashCode() -> hashCode
    116:125:net.minecraft.nbt.CompoundTag save() -> e
    129:129:java.lang.String getId() -> f
    39:39:net.minecraft.world.level.block.state.BlockState lambda$fromWorld$0(net.minecraft.world.level.BlockGetter,net.minecraft.core.BlockPos) -> b
net.minecraft.world.level.saveddata.maps.MapBanner$1 -> crc$1:
    int[] $SwitchMap$net$minecraft$world$item$DyeColor -> a
    56:56:void <clinit>() -> <clinit>
net.minecraft.world.level.saveddata.maps.MapDecoration -> crd:
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type type -> a
    byte x -> b
    byte y -> c
    byte rot -> d
    net.minecraft.network.chat.Component name -> e
    81:87:void <init>(net.minecraft.world.level.saveddata.maps.MapDecoration$Type,byte,byte,byte,net.minecraft.network.chat.Component) -> <init>
    90:90:byte getImage() -> a
    94:94:net.minecraft.world.level.saveddata.maps.MapDecoration$Type getType() -> b
    98:98:byte getX() -> c
    102:103:void setX(byte) -> a
    106:106:byte getY() -> d
    110:111:void setY(byte) -> b
    114:114:byte getRot() -> e
    118:119:void setRot(byte) -> c
    122:122:boolean renderOnFrame() -> f
    127:127:net.minecraft.network.chat.Component getName() -> g
    132:157:boolean equals(java.lang.Object) -> equals
    162:167:int hashCode() -> hashCode
net.minecraft.world.level.saveddata.maps.MapDecoration$Type -> crd$a:
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type PLAYER -> a
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type FRAME -> b
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type RED_MARKER -> c
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BLUE_MARKER -> d
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type TARGET_X -> e
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type TARGET_POINT -> f
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type PLAYER_OFF_MAP -> g
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type PLAYER_OFF_LIMITS -> h
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type MANSION -> i
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type MONUMENT -> j
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_WHITE -> k
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_ORANGE -> l
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_MAGENTA -> m
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_LIGHT_BLUE -> n
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_YELLOW -> o
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_LIME -> p
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_PINK -> q
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_GRAY -> r
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_LIGHT_GRAY -> s
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_CYAN -> t
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_PURPLE -> u
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_BLUE -> v
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_BROWN -> w
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_GREEN -> x
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_RED -> y
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type BANNER_BLACK -> z
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type RED_X -> A
    byte icon -> B
    boolean renderedOnFrame -> C
    int mapColor -> D
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type[] $VALUES -> E
    10:10:net.minecraft.world.level.saveddata.maps.MapDecoration$Type[] values() -> values
    10:10:net.minecraft.world.level.saveddata.maps.MapDecoration$Type valueOf(java.lang.String) -> valueOf
    45:46:void <init>(java.lang.String,int,boolean) -> <init>
    48:52:void <init>(java.lang.String,int,boolean,int) -> <init>
    55:55:byte getIcon() -> a
    59:59:boolean isRenderedOnFrame() -> b
    63:63:boolean hasMapColor() -> c
    67:67:int getMapColor() -> d
    71:71:net.minecraft.world.level.saveddata.maps.MapDecoration$Type byIcon(byte) -> a
    10:37:void <clinit>() -> <clinit>
net.minecraft.world.level.saveddata.maps.MapFrame -> cre:
    net.minecraft.core.BlockPos pos -> a
    int rotation -> b
    int entityId -> c
    12:16:void <init>(net.minecraft.core.BlockPos,int,int) -> <init>
    19:22:net.minecraft.world.level.saveddata.maps.MapFrame load(net.minecraft.nbt.CompoundTag) -> a
    26:30:net.minecraft.nbt.CompoundTag save() -> a
    34:34:net.minecraft.core.BlockPos getPos() -> b
    38:38:int getRotation() -> c
    42:42:int getEntityId() -> d
    46:46:java.lang.String getId() -> e
    50:50:java.lang.String frameId(net.minecraft.core.BlockPos) -> a
net.minecraft.world.level.saveddata.maps.MapIndex -> crf:
    it.unimi.dsi.fastutil.objects.Object2IntMap usedAuxIds -> a
    12:17:void <init>() -> <init>
    21:28:void load(net.minecraft.nbt.CompoundTag) -> a
    32:35:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    39:42:int getFreeAuxValueForMap() -> a
net.minecraft.world.level.saveddata.maps.MapItemSavedData -> crg:
    int x -> a
    int z -> b
    net.minecraft.world.level.dimension.DimensionType dimension -> c
    boolean trackingPosition -> d
    boolean unlimitedTracking -> e
    byte scale -> f
    byte[] colors -> g
    boolean locked -> h
    java.util.List carriedBy -> i
    java.util.Map carriedByPlayers -> k
    java.util.Map bannerMarkers -> l
    java.util.Map decorations -> j
    java.util.Map frameMarkers -> m
    82:92:void <init>(java.lang.String) -> <init>
    95:102:void setProperties(int,int,int,boolean,boolean,net.minecraft.world.level.dimension.DimensionType) -> a
    105:112:void setOrigin(double,double,int) -> a
    116:149:void load(net.minecraft.nbt.CompoundTag) -> a
    153:174:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    178:185:void lockData(net.minecraft.world.level.saveddata.maps.MapItemSavedData) -> a
    188:235:void tickCarriedBy(net.minecraft.world.entity.player.Player,net.minecraft.world.item.ItemStack) -> a
    240:259:void addTargetDecoration(net.minecraft.world.item.ItemStack,net.minecraft.core.BlockPos,java.lang.String,net.minecraft.world.level.saveddata.maps.MapDecoration$Type) -> a
    262:307:void addDecoration(net.minecraft.world.level.saveddata.maps.MapDecoration$Type,net.minecraft.world.level.LevelAccessor,java.lang.String,double,double,double,net.minecraft.network.chat.Component) -> a
    311:317:net.minecraft.network.protocol.Packet getUpdatePacket(net.minecraft.world.item.ItemStack,net.minecraft.world.level.BlockGetter,net.minecraft.world.entity.player.Player) -> a
    321:325:void setDirty(int,int) -> a
    328:336:net.minecraft.world.level.saveddata.maps.MapItemSavedData$HoldingPlayer getHoldingPlayer(net.minecraft.world.entity.player.Player) -> a
    340:373:void toggleBanner(net.minecraft.world.level.LevelAccessor,net.minecraft.core.BlockPos) -> a
    376:386:void checkBanners(net.minecraft.world.level.BlockGetter,int,int) -> a
    389:389:java.util.Collection getBanners() -> a
    393:395:void removedFromFrame(net.minecraft.core.BlockPos,int) -> a
net.minecraft.world.level.saveddata.maps.MapItemSavedData$HoldingPlayer -> crg$a:
    net.minecraft.world.entity.player.Player player -> a
    boolean dirtyData -> d
    int minDirtyX -> e
    int minDirtyY -> f
    int maxDirtyX -> g
    int maxDirtyY -> h
    int tick -> i
    int step -> b
    net.minecraft.world.level.saveddata.maps.MapItemSavedData this$0 -> c
    35:45:void <init>(net.minecraft.world.level.saveddata.maps.MapItemSavedData,net.minecraft.world.entity.player.Player) -> <init>
    49:56:net.minecraft.network.protocol.Packet nextUpdatePacket(net.minecraft.world.item.ItemStack) -> a
    60:72:void markDirty(int,int) -> a
net.minecraft.world.level.saveddata.maps.package-info -> crh:
net.minecraft.world.level.saveddata.package-info -> cri:
net.minecraft.world.level.storage.CommandStorage -> crj:
    java.util.Map namespaces -> a
    net.minecraft.world.level.storage.DimensionDataStorage storage -> b
    56:61:void <init>(net.minecraft.world.level.storage.DimensionDataStorage) -> <init>
    64:66:net.minecraft.world.level.storage.CommandStorage$Container newStorage(java.lang.String,java.lang.String) -> a
    70:73:net.minecraft.nbt.CompoundTag get(net.minecraft.resources.ResourceLocation) -> a
    77:80:void set(net.minecraft.resources.ResourceLocation,net.minecraft.nbt.CompoundTag) -> a
    83:83:java.util.stream.Stream keys() -> a
    87:87:java.lang.String createId(java.lang.String) -> a
    83:83:java.util.stream.Stream lambda$keys$2(java.util.Map$Entry) -> a
    79:79:net.minecraft.world.level.storage.CommandStorage$Container lambda$set$1(java.lang.String,java.lang.String) -> b
    72:72:net.minecraft.world.level.storage.CommandStorage$Container lambda$get$0(java.lang.String,java.lang.String) -> c
net.minecraft.world.level.storage.CommandStorage$Container -> crj$a:
    java.util.Map storage -> a
    14:18:void <init>(java.lang.String) -> <init>
    22:26:void load(net.minecraft.nbt.CompoundTag) -> a
    30:33:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    37:38:net.minecraft.nbt.CompoundTag get(java.lang.String) -> a
    42:48:void put(java.lang.String,net.minecraft.nbt.CompoundTag) -> a
    51:51:java.util.stream.Stream getKeys(java.lang.String) -> b
    51:51:net.minecraft.resources.ResourceLocation lambda$getKeys$1(java.lang.String,java.lang.String) -> a
    31:31:void lambda$save$0(net.minecraft.nbt.CompoundTag,java.lang.String,net.minecraft.nbt.CompoundTag) -> a
net.minecraft.world.level.storage.DerivedLevelData -> crk:
    net.minecraft.world.level.storage.LevelData wrapped -> b
    25:27:void <init>(net.minecraft.world.level.storage.LevelData) -> <init>
    31:31:net.minecraft.nbt.CompoundTag createTag(net.minecraft.nbt.CompoundTag) -> a
    36:36:long getSeed() -> a
    41:41:int getXSpawn() -> b
    46:46:int getYSpawn() -> c
    51:51:int getZSpawn() -> d
    56:56:long getGameTime() -> e
    61:61:long getDayTime() -> f
    66:66:long getSizeOnDisk() -> g
    71:71:net.minecraft.nbt.CompoundTag getLoadedPlayerTag() -> h
    76:76:java.lang.String getLevelName() -> i
    81:81:int getVersion() -> j
    86:86:long getLastPlayed() -> k
    91:91:boolean isThundering() -> l
    96:96:int getThunderTime() -> m
    101:101:boolean isRaining() -> n
    106:106:int getRainTime() -> o
    111:111:net.minecraft.world.level.GameType getGameType() -> p
    116:116:void setXSpawn(int) -> a
    120:120:void setYSpawn(int) -> b
    124:124:void setZSpawn(int) -> c
    128:128:void setGameTime(long) -> a
    132:132:void setDayTime(long) -> b
    136:136:void setSpawn(net.minecraft.core.BlockPos) -> a
    140:140:void setLevelName(java.lang.String) -> a
    144:144:void setVersion(int) -> d
    148:148:void setThundering(boolean) -> a
    152:152:void setThunderTime(int) -> e
    156:156:void setRaining(boolean) -> b
    160:160:void setRainTime(int) -> f
    164:164:boolean isGenerateMapFeatures() -> q
    169:169:boolean isHardcore() -> r
    174:174:net.minecraft.world.level.LevelType getGeneratorType() -> s
    179:179:void setGenerator(net.minecraft.world.level.LevelType) -> a
    183:183:boolean getAllowCommands() -> t
    188:188:void setAllowCommands(boolean) -> c
    192:192:boolean isInitialized() -> u
    197:197:void setInitialized(boolean) -> d
    201:201:net.minecraft.world.level.GameRules getGameRules() -> v
    206:206:net.minecraft.world.Difficulty getDifficulty() -> w
    211:211:void setDifficulty(net.minecraft.world.Difficulty) -> a
    215:215:boolean isDifficultyLocked() -> x
    220:220:void setDifficultyLocked(boolean) -> e
    224:224:net.minecraft.world.level.timers.TimerQueue getScheduledEvents() -> y
    229:230:void setDimensionData(net.minecraft.world.level.dimension.DimensionType,net.minecraft.nbt.CompoundTag) -> a
    234:234:net.minecraft.nbt.CompoundTag getDimensionData(net.minecraft.world.level.dimension.DimensionType) -> a
    239:241:void fillCrashReportCategory(net.minecraft.CrashReportCategory) -> a
net.minecraft.world.level.storage.DimensionDataStorage -> crl:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.Map cache -> b
    com.mojang.datafixers.DataFixer fixerUpper -> c
    java.io.File dataFolder -> d
    28:35:void <init>(java.io.File,com.mojang.datafixers.DataFixer) -> <init>
    38:38:java.io.File getDataFile(java.lang.String) -> a
    42:49:net.minecraft.world.level.saveddata.SavedData computeIfAbsent(java.util.function.Supplier,java.lang.String) -> a
    55:62:net.minecraft.world.level.saveddata.SavedData get(java.util.function.Supplier,java.lang.String) -> b
    68:78:net.minecraft.world.level.saveddata.SavedData readSavedData(java.util.function.Supplier,java.lang.String) -> c
    82:83:void set(net.minecraft.world.level.saveddata.SavedData) -> a
    86:99:net.minecraft.nbt.CompoundTag readTagFromDisk(java.lang.String,int) -> a
    103:115:boolean isGzip(java.io.PushbackInputStream) -> a
    119:124:void save() -> a
    26:26:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.LevelData -> crm:
    java.lang.String minecraftVersionName -> b
    int minecraftVersion -> c
    boolean snapshot -> d
    net.minecraft.world.Difficulty DEFAULT_DIFFICULTY -> a
    long seed -> e
    net.minecraft.world.level.LevelType generator -> f
    net.minecraft.nbt.CompoundTag generatorOptions -> g
    java.lang.String legacyCustomOptions -> h
    int xSpawn -> i
    int ySpawn -> j
    int zSpawn -> k
    long gameTime -> l
    long dayTime -> m
    long lastPlayed -> n
    long sizeOnDisk -> o
    com.mojang.datafixers.DataFixer fixerUpper -> p
    int playerDataVersion -> q
    boolean upgradedPlayerTag -> r
    net.minecraft.nbt.CompoundTag loadedPlayerTag -> s
    java.lang.String levelName -> t
    int version -> u
    int clearWeatherTime -> v
    boolean raining -> w
    int rainTime -> x
    boolean thundering -> y
    int thunderTime -> z
    net.minecraft.world.level.GameType gameType -> A
    boolean generateMapFeatures -> B
    boolean hardcore -> C
    boolean allowCommands -> D
    boolean initialized -> E
    net.minecraft.world.Difficulty difficulty -> F
    boolean difficultyLocked -> G
    double borderX -> H
    double borderZ -> I
    double borderSize -> J
    long borderSizeLerpTime -> K
    double borderSizeLerpTarget -> L
    double borderSafeZone -> M
    double borderDamagePerBlock -> N
    int borderWarningBlocks -> O
    int borderWarningTime -> P
    java.util.Set disabledDataPacks -> Q
    java.util.Set enabledDataPacks -> R
    java.util.Map dimensionData -> S
    net.minecraft.nbt.CompoundTag customBossEvents -> T
    int wanderingTraderSpawnDelay -> U
    int wanderingTraderSpawnChance -> V
    java.util.UUID wanderingTraderId -> W
    java.util.Set knownServerBrands -> X
    boolean wasModded -> Y
    net.minecraft.world.level.GameRules gameRules -> Z
    net.minecraft.world.level.timers.TimerQueue scheduledEvents -> aa
    42:105:void <init>() -> <init>
    42:272:void <init>(net.minecraft.nbt.CompoundTag,com.mojang.datafixers.DataFixer,int,net.minecraft.nbt.CompoundTag) -> <init>
    42:281:void <init>(net.minecraft.world.level.LevelSettings,java.lang.String) -> <init>
    284:291:void setLevelSettings(net.minecraft.world.level.LevelSettings) -> a
    294:300:net.minecraft.nbt.CompoundTag createTag(net.minecraft.nbt.CompoundTag) -> a
    304:397:void setTagData(net.minecraft.nbt.CompoundTag,net.minecraft.nbt.CompoundTag) -> a
    400:400:long getSeed() -> a
    404:404:long obfuscateSeed(long) -> c
    408:408:int getXSpawn() -> b
    412:412:int getYSpawn() -> c
    416:416:int getZSpawn() -> d
    420:420:long getGameTime() -> e
    424:424:long getDayTime() -> f
    428:428:long getSizeOnDisk() -> g
    432:442:void updatePlayerTag() -> T
    445:446:net.minecraft.nbt.CompoundTag getLoadedPlayerTag() -> h
    450:451:void setXSpawn(int) -> a
    454:455:void setYSpawn(int) -> b
    458:459:void setZSpawn(int) -> c
    462:463:void setGameTime(long) -> a
    466:467:void setDayTime(long) -> b
    470:473:void setSpawn(net.minecraft.core.BlockPos) -> a
    476:476:java.lang.String getLevelName() -> i
    480:481:void setLevelName(java.lang.String) -> a
    484:484:int getVersion() -> j
    488:489:void setVersion(int) -> d
    492:492:long getLastPlayed() -> k
    496:496:int getClearWeatherTime() -> z
    500:501:void setClearWeatherTime(int) -> g
    504:504:boolean isThundering() -> l
    508:509:void setThundering(boolean) -> a
    512:512:int getThunderTime() -> m
    516:517:void setThunderTime(int) -> e
    520:520:boolean isRaining() -> n
    524:525:void setRaining(boolean) -> b
    528:528:int getRainTime() -> o
    532:533:void setRainTime(int) -> f
    536:536:net.minecraft.world.level.GameType getGameType() -> p
    540:540:boolean isGenerateMapFeatures() -> q
    544:545:void setGenerateMapFeatures(boolean) -> f
    548:549:void setGameType(net.minecraft.world.level.GameType) -> a
    552:552:boolean isHardcore() -> r
    556:557:void setHardcore(boolean) -> g
    560:560:net.minecraft.world.level.LevelType getGeneratorType() -> s
    564:565:void setGenerator(net.minecraft.world.level.LevelType) -> a
    568:568:net.minecraft.nbt.CompoundTag getGeneratorOptions() -> A
    572:573:void setGeneratorOptions(net.minecraft.nbt.CompoundTag) -> b
    576:576:boolean getAllowCommands() -> t
    580:581:void setAllowCommands(boolean) -> c
    584:584:boolean isInitialized() -> u
    588:589:void setInitialized(boolean) -> d
    592:592:net.minecraft.world.level.GameRules getGameRules() -> v
    596:596:double getBorderX() -> B
    600:600:double getBorderZ() -> C
    604:604:double getBorderSize() -> D
    608:609:void setBorderSize(double) -> a
    612:612:long getBorderSizeLerpTime() -> E
    616:617:void setBorderSizeLerpTime(long) -> d
    620:620:double getBorderSizeLerpTarget() -> F
    624:625:void setBorderSizeLerpTarget(double) -> b
    628:629:void setBorderZ(double) -> c
    632:633:void setBorderX(double) -> d
    636:636:double getBorderSafeZone() -> G
    640:641:void setBorderSafeZone(double) -> e
    644:644:double getBorderDamagePerBlock() -> H
    648:649:void setBorderDamagePerBlock(double) -> f
    652:652:int getBorderWarningBlocks() -> I
    656:656:int getBorderWarningTime() -> J
    660:661:void setBorderWarningBlocks(int) -> h
    664:665:void setBorderWarningTime(int) -> i
    668:668:net.minecraft.world.Difficulty getDifficulty() -> w
    672:673:void setDifficulty(net.minecraft.world.Difficulty) -> a
    676:676:boolean isDifficultyLocked() -> x
    680:681:void setDifficultyLocked(boolean) -> e
    684:684:net.minecraft.world.level.timers.TimerQueue getScheduledEvents() -> y
    688:716:void fillCrashReportCategory(net.minecraft.CrashReportCategory) -> a
    719:723:net.minecraft.nbt.CompoundTag getDimensionData(net.minecraft.world.level.dimension.DimensionType) -> a
    727:728:void setDimensionData(net.minecraft.world.level.dimension.DimensionType,net.minecraft.nbt.CompoundTag) -> a
    731:731:int getMinecraftVersion() -> K
    735:735:boolean isSnapshot() -> L
    739:739:java.lang.String getMinecraftVersionName() -> M
    743:743:java.util.Set getDisabledDataPacks() -> N
    747:747:java.util.Set getEnabledDataPacks() -> O
    752:752:net.minecraft.nbt.CompoundTag getCustomBossEvents() -> P
    756:757:void setCustomBossEvents(net.minecraft.nbt.CompoundTag) -> c
    760:760:int getWanderingTraderSpawnDelay() -> Q
    764:765:void setWanderingTraderSpawnDelay(int) -> j
    768:768:int getWanderingTraderSpawnChance() -> R
    772:773:void setWanderingTraderSpawnChance(int) -> k
    777:777:java.util.UUID getWanderingTraderId() -> S
    781:782:void setWanderingTraderId(java.util.UUID) -> a
    785:787:void setModdedInfo(java.lang.String,boolean) -> a
    715:715:java.lang.String lambda$fillCrashReportCategory$10() -> U
    714:714:java.lang.String lambda$fillCrashReportCategory$9() -> V
    697:711:java.lang.String lambda$fillCrashReportCategory$8() -> W
    695:695:java.lang.String lambda$fillCrashReportCategory$7() -> X
    694:694:java.lang.String lambda$fillCrashReportCategory$6() -> Y
    693:693:java.lang.String lambda$fillCrashReportCategory$5() -> Z
    692:692:java.lang.String lambda$fillCrashReportCategory$4() -> aa
    691:691:java.lang.String lambda$fillCrashReportCategory$3() -> ab
    690:690:java.lang.String lambda$fillCrashReportCategory$2() -> ac
    689:689:java.lang.String lambda$fillCrashReportCategory$1() -> ad
    688:688:java.lang.String lambda$fillCrashReportCategory$0() -> ae
    40:40:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.LevelStorage -> crn:
    org.apache.logging.log4j.Logger LOGGER -> b
    java.io.File worldDir -> c
    java.io.File playerDir -> d
    long sessionId -> e
    java.lang.String levelId -> f
    net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager structureManager -> g
    com.mojang.datafixers.DataFixer fixerUpper -> a
    32:52:void <init>(java.io.File,java.lang.String,net.minecraft.server.MinecraftServer,com.mojang.datafixers.DataFixer) -> <init>
    55:82:void saveLevelData(net.minecraft.world.level.storage.LevelData,net.minecraft.nbt.CompoundTag) -> a
    86:97:void initiateSession() -> h
    100:100:java.io.File getFolder() -> a
    105:117:void checkSession() -> b
    121:132:net.minecraft.world.level.storage.LevelData prepareLevel() -> c
    136:137:void saveLevelData(net.minecraft.world.level.storage.LevelData) -> a
    142:153:void save(net.minecraft.world.entity.player.Player) -> a
    158:171:net.minecraft.nbt.CompoundTag load(net.minecraft.world.entity.player.Player) -> b
    175:186:java.lang.String[] getSeenPlayers() -> d
    190:190:java.lang.String getLevelId() -> e
    194:194:net.minecraft.world.level.levelgen.structure.templatesystem.StructureManager getStructureManager() -> f
    198:198:com.mojang.datafixers.DataFixer getFixerUpper() -> g
    29:29:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.LevelStorageException -> cro:
    5:6:void <init>(java.lang.String) -> <init>
net.minecraft.world.level.storage.LevelStorageSource -> crp:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.time.format.DateTimeFormatter FORMATTER -> b
    java.nio.file.Path baseDir -> c
    java.nio.file.Path backupDir -> d
    com.mojang.datafixers.DataFixer fixerUpper -> e
    59:68:void <init>(java.nio.file.Path,java.nio.file.Path,com.mojang.datafixers.DataFixer) -> <init>
    71:71:java.lang.String getName() -> a
    75:101:java.util.List getLevelList() -> b
    105:105:int getStorageVersion() -> e
    109:109:net.minecraft.world.level.storage.LevelStorage selectLevel(java.lang.String,net.minecraft.server.MinecraftServer) -> a
    113:113:net.minecraft.world.level.storage.LevelStorage selectLevel(java.nio.file.Path,com.mojang.datafixers.DataFixer,java.lang.String,net.minecraft.server.MinecraftServer) -> a
    117:118:boolean requiresConversion(java.lang.String) -> a
    122:122:boolean convertLevel(java.lang.String,net.minecraft.util.ProgressListener) -> a
    127:127:net.minecraft.world.level.storage.LevelData getDataTagFor(java.lang.String) -> b
    132:149:net.minecraft.world.level.storage.LevelData getDataTagFor(java.nio.file.Path,com.mojang.datafixers.DataFixer,java.lang.String) -> a
    155:164:net.minecraft.world.level.storage.LevelData getLevelData(java.io.File,com.mojang.datafixers.DataFixer) -> a
    168:185:void renameLevel(java.lang.String,java.lang.String) -> a
    189:194:boolean isNewLevelIdAcceptable(java.lang.String) -> c
    199:223:boolean deleteLevel(java.lang.String) -> d
    227:243:boolean deleteRecursive(java.io.File[]) -> a
    247:247:boolean levelExists(java.lang.String) -> e
    251:251:java.nio.file.Path getBaseDir() -> c
    255:255:java.io.File getFile(java.lang.String,java.lang.String) -> b
    259:259:java.nio.file.Path getLevelPath(java.lang.String) -> g
    263:263:java.nio.file.Path getBackupPath() -> d
    267:295:long makeWorldBackup(java.lang.String) -> f
    41:54:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.LevelStorageSource$1 -> crp$1:
    java.nio.file.Path val$rootPath -> a
    java.nio.file.Path val$levelPath -> b
    java.util.zip.ZipOutputStream val$stream -> c
    net.minecraft.world.level.storage.LevelStorageSource this$0 -> d
    282:282:void <init>(net.minecraft.world.level.storage.LevelStorageSource,java.nio.file.Path,java.nio.file.Path,java.util.zip.ZipOutputStream) -> <init>
    285:290:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes) -> a
    282:282:java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes) -> visitFile
net.minecraft.world.level.storage.LevelSummary -> crq:
    java.lang.String levelId -> a
    java.lang.String levelName -> b
    long lastPlayed -> c
    long sizeOnDisk -> d
    boolean requiresConversion -> e
    net.minecraft.world.level.GameType gameMode -> f
    boolean hardcore -> g
    boolean hasCheats -> h
    java.lang.String worldVersionName -> i
    int worldVersion -> j
    boolean snapshot -> k
    net.minecraft.world.level.LevelType generatorType -> l
    28:41:void <init>(net.minecraft.world.level.storage.LevelData,java.lang.String,java.lang.String,long,boolean) -> <init>
    44:44:java.lang.String getLevelId() -> a
    48:48:java.lang.String getLevelName() -> b
    52:52:long getSizeOnDisk() -> c
    56:56:boolean isRequiresConversion() -> d
    60:60:long getLastPlayed() -> e
    65:71:int compareTo(net.minecraft.world.level.storage.LevelSummary) -> a
    75:75:net.minecraft.world.level.GameType getGameMode() -> f
    79:79:boolean isHardcore() -> g
    83:83:boolean hasCheats() -> h
    87:90:net.minecraft.network.chat.Component getWorldVersionName() -> i
    94:94:int getWorldVersion() -> j
    98:98:boolean isSnapshot() -> k
    103:103:boolean markVersionInList() -> l
    107:107:boolean askToOpenWorld() -> m
    111:111:boolean isOldCustomizedWorld() -> n
    117:117:boolean shouldBackup() -> o
    11:11:int compareTo(java.lang.Object) -> compareTo
net.minecraft.world.level.storage.McRegionUpgrader -> crr:
    org.apache.logging.log4j.Logger LOGGER -> a
    33:33:void <init>() -> <init>
    38:92:boolean convertLevel(java.nio.file.Path,com.mojang.datafixers.DataFixer,java.lang.String,net.minecraft.util.ProgressListener) -> a
    96:112:void makeMcrLevelDatBackup(java.nio.file.Path,java.lang.String) -> a
    115:122:void convertRegions(java.io.File,java.lang.Iterable,net.minecraft.world.level.biome.BiomeSource,int,int,net.minecraft.util.ProgressListener) -> a
    125:169:void convertRegion(java.io.File,java.io.File,net.minecraft.world.level.biome.BiomeSource,int,int,net.minecraft.util.ProgressListener) -> a
    172:178:void addRegionFiles(java.io.File,java.util.Collection) -> a
    173:173:boolean lambda$addRegionFiles$0(java.io.File,java.lang.String) -> a
    34:34:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.PlayerIO -> crs:
    void save(net.minecraft.world.entity.player.Player) -> a
    net.minecraft.nbt.CompoundTag load(net.minecraft.world.entity.player.Player) -> b
net.minecraft.world.level.storage.loot.BinomialDistributionGenerator -> crt:
    int n -> d
    float p -> e
    21:24:void <init>(int,float) -> <init>
    30:37:int getInt(java.util.Random) -> a
    41:41:net.minecraft.world.level.storage.loot.BinomialDistributionGenerator binomial(int,float) -> a
    46:46:net.minecraft.resources.ResourceLocation getType() -> a
    16:16:int access$000(net.minecraft.world.level.storage.loot.BinomialDistributionGenerator) -> a
    16:16:float access$100(net.minecraft.world.level.storage.loot.BinomialDistributionGenerator) -> b
net.minecraft.world.level.storage.loot.BinomialDistributionGenerator$Serializer -> crt$a:
    49:49:void <init>() -> <init>
    52:55:net.minecraft.world.level.storage.loot.BinomialDistributionGenerator deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    60:63:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.BinomialDistributionGenerator,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    49:49:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    49:49:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.BuiltInLootTables -> cru:
    java.util.Set LOCATIONS -> at
    java.util.Set IMMUTABLE_LOCATIONS -> au
    net.minecraft.resources.ResourceLocation EMPTY -> a
    net.minecraft.resources.ResourceLocation SPAWN_BONUS_CHEST -> b
    net.minecraft.resources.ResourceLocation END_CITY_TREASURE -> c
    net.minecraft.resources.ResourceLocation SIMPLE_DUNGEON -> d
    net.minecraft.resources.ResourceLocation VILLAGE_WEAPONSMITH -> e
    net.minecraft.resources.ResourceLocation VILLAGE_TOOLSMITH -> f
    net.minecraft.resources.ResourceLocation VILLAGE_ARMORER -> g
    net.minecraft.resources.ResourceLocation VILLAGE_CARTOGRAPHER -> h
    net.minecraft.resources.ResourceLocation VILLAGE_MASON -> i
    net.minecraft.resources.ResourceLocation VILLAGE_SHEPHERD -> j
    net.minecraft.resources.ResourceLocation VILLAGE_BUTCHER -> k
    net.minecraft.resources.ResourceLocation VILLAGE_FLETCHER -> l
    net.minecraft.resources.ResourceLocation VILLAGE_FISHER -> m
    net.minecraft.resources.ResourceLocation VILLAGE_TANNERY -> n
    net.minecraft.resources.ResourceLocation VILLAGE_TEMPLE -> o
    net.minecraft.resources.ResourceLocation VILLAGE_DESERT_HOUSE -> p
    net.minecraft.resources.ResourceLocation VILLAGE_PLAINS_HOUSE -> q
    net.minecraft.resources.ResourceLocation VILLAGE_TAIGA_HOUSE -> r
    net.minecraft.resources.ResourceLocation VILLAGE_SNOWY_HOUSE -> s
    net.minecraft.resources.ResourceLocation VILLAGE_SAVANNA_HOUSE -> t
    net.minecraft.resources.ResourceLocation ABANDONED_MINESHAFT -> u
    net.minecraft.resources.ResourceLocation NETHER_BRIDGE -> v
    net.minecraft.resources.ResourceLocation STRONGHOLD_LIBRARY -> w
    net.minecraft.resources.ResourceLocation STRONGHOLD_CROSSING -> x
    net.minecraft.resources.ResourceLocation STRONGHOLD_CORRIDOR -> y
    net.minecraft.resources.ResourceLocation DESERT_PYRAMID -> z
    net.minecraft.resources.ResourceLocation JUNGLE_TEMPLE -> A
    net.minecraft.resources.ResourceLocation JUNGLE_TEMPLE_DISPENSER -> B
    net.minecraft.resources.ResourceLocation IGLOO_CHEST -> C
    net.minecraft.resources.ResourceLocation WOODLAND_MANSION -> D
    net.minecraft.resources.ResourceLocation UNDERWATER_RUIN_SMALL -> E
    net.minecraft.resources.ResourceLocation UNDERWATER_RUIN_BIG -> F
    net.minecraft.resources.ResourceLocation BURIED_TREASURE -> G
    net.minecraft.resources.ResourceLocation SHIPWRECK_MAP -> H
    net.minecraft.resources.ResourceLocation SHIPWRECK_SUPPLY -> I
    net.minecraft.resources.ResourceLocation SHIPWRECK_TREASURE -> J
    net.minecraft.resources.ResourceLocation PILLAGER_OUTPOST -> K
    net.minecraft.resources.ResourceLocation SHEEP_WHITE -> L
    net.minecraft.resources.ResourceLocation SHEEP_ORANGE -> M
    net.minecraft.resources.ResourceLocation SHEEP_MAGENTA -> N
    net.minecraft.resources.ResourceLocation SHEEP_LIGHT_BLUE -> O
    net.minecraft.resources.ResourceLocation SHEEP_YELLOW -> P
    net.minecraft.resources.ResourceLocation SHEEP_LIME -> Q
    net.minecraft.resources.ResourceLocation SHEEP_PINK -> R
    net.minecraft.resources.ResourceLocation SHEEP_GRAY -> S
    net.minecraft.resources.ResourceLocation SHEEP_LIGHT_GRAY -> T
    net.minecraft.resources.ResourceLocation SHEEP_CYAN -> U
    net.minecraft.resources.ResourceLocation SHEEP_PURPLE -> V
    net.minecraft.resources.ResourceLocation SHEEP_BLUE -> W
    net.minecraft.resources.ResourceLocation SHEEP_BROWN -> X
    net.minecraft.resources.ResourceLocation SHEEP_GREEN -> Y
    net.minecraft.resources.ResourceLocation SHEEP_RED -> Z
    net.minecraft.resources.ResourceLocation SHEEP_BLACK -> aa
    net.minecraft.resources.ResourceLocation FISHING -> ab
    net.minecraft.resources.ResourceLocation FISHING_JUNK -> ac
    net.minecraft.resources.ResourceLocation FISHING_TREASURE -> ad
    net.minecraft.resources.ResourceLocation FISHING_FISH -> ae
    net.minecraft.resources.ResourceLocation CAT_MORNING_GIFT -> af
    net.minecraft.resources.ResourceLocation ARMORER_GIFT -> ag
    net.minecraft.resources.ResourceLocation BUTCHER_GIFT -> ah
    net.minecraft.resources.ResourceLocation CARTOGRAPHER_GIFT -> ai
    net.minecraft.resources.ResourceLocation CLERIC_GIFT -> aj
    net.minecraft.resources.ResourceLocation FARMER_GIFT -> ak
    net.minecraft.resources.ResourceLocation FISHERMAN_GIFT -> al
    net.minecraft.resources.ResourceLocation FLETCHER_GIFT -> am
    net.minecraft.resources.ResourceLocation LEATHERWORKER_GIFT -> an
    net.minecraft.resources.ResourceLocation LIBRARIAN_GIFT -> ao
    net.minecraft.resources.ResourceLocation MASON_GIFT -> ap
    net.minecraft.resources.ResourceLocation SHEPHERD_GIFT -> aq
    net.minecraft.resources.ResourceLocation TOOLSMITH_GIFT -> ar
    net.minecraft.resources.ResourceLocation WEAPONSMITH_GIFT -> as
    9:9:void <init>() -> <init>
    94:94:net.minecraft.resources.ResourceLocation register(java.lang.String) -> a
    98:102:net.minecraft.resources.ResourceLocation register(net.minecraft.resources.ResourceLocation) -> a
    106:106:java.util.Set all() -> a
    10:91:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.ConstantIntValue -> crv:
    int value -> d
    19:21:void <init>(int) -> <init>
    25:25:int getInt(java.util.Random) -> a
    30:30:net.minecraft.resources.ResourceLocation getType() -> a
    34:34:net.minecraft.world.level.storage.loot.ConstantIntValue exactly(int) -> a
    16:16:int access$000(net.minecraft.world.level.storage.loot.ConstantIntValue) -> a
net.minecraft.world.level.storage.loot.ConstantIntValue$Serializer -> crv$a:
    37:37:void <init>() -> <init>
    40:40:net.minecraft.world.level.storage.loot.ConstantIntValue deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    45:45:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.ConstantIntValue,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    37:37:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    37:37:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.IntLimiter -> crw:
    java.lang.Integer min -> a
    java.lang.Integer max -> b
    java.util.function.IntUnaryOperator op -> c
    23:43:void <init>(java.lang.Integer,java.lang.Integer) -> <init>
    46:46:net.minecraft.world.level.storage.loot.IntLimiter clamp(int,int) -> a
    50:50:net.minecraft.world.level.storage.loot.IntLimiter lowerBound(int) -> a
    54:54:net.minecraft.world.level.storage.loot.IntLimiter upperBound(int) -> b
    59:59:int applyAsInt(int) -> applyAsInt
    40:40:int lambda$new$3(int,int,int) -> a
    37:37:int lambda$new$2(int,int) -> b
    32:32:int lambda$new$1(int,int) -> c
    29:29:int lambda$new$0(int) -> c
    17:17:void <init>(java.lang.Integer,java.lang.Integer,net.minecraft.world.level.storage.loot.IntLimiter$1) -> <init>
    17:17:java.lang.Integer access$100(net.minecraft.world.level.storage.loot.IntLimiter) -> a
    17:17:java.lang.Integer access$200(net.minecraft.world.level.storage.loot.IntLimiter) -> b
net.minecraft.world.level.storage.loot.IntLimiter$1 -> crw$1:
net.minecraft.world.level.storage.loot.IntLimiter$Serializer -> crw$a:
    62:62:void <init>() -> <init>
    65:68:net.minecraft.world.level.storage.loot.IntLimiter deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    73:82:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.IntLimiter,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    62:62:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    62:62:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.LootContext -> crx:
    java.util.Random random -> a
    float luck -> b
    net.minecraft.server.level.ServerLevel level -> c
    java.util.function.Function lootTables -> d
    java.util.Set visitedTables -> e
    java.util.function.Function conditions -> f
    java.util.Set visitedConditions -> g
    java.util.Map params -> h
    java.util.Map dynamicDrops -> i
    39:56:void <init>(java.util.Random,float,net.minecraft.server.level.ServerLevel,java.util.function.Function,java.util.function.Function,java.util.Map,java.util.Map) -> <init>
    59:59:boolean hasParam(net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> a
    63:68:java.lang.Object getParam(net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> b
    72:76:void addDynamicDrops(net.minecraft.resources.ResourceLocation,java.util.function.Consumer) -> a
    81:81:java.lang.Object getParamOrNull(net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> c
    85:85:boolean addVisitedTable(net.minecraft.world.level.storage.loot.LootTable) -> a
    89:90:void removeVisitedTable(net.minecraft.world.level.storage.loot.LootTable) -> b
    93:93:boolean addVisitedCondition(net.minecraft.world.level.storage.loot.predicates.LootItemCondition) -> a
    97:98:void removeVisitedCondition(net.minecraft.world.level.storage.loot.predicates.LootItemCondition) -> b
    101:101:net.minecraft.world.level.storage.loot.LootTable getLootTable(net.minecraft.resources.ResourceLocation) -> a
    105:105:net.minecraft.world.level.storage.loot.predicates.LootItemCondition getCondition(net.minecraft.resources.ResourceLocation) -> b
    109:109:java.util.Random getRandom() -> a
    113:113:float getLuck() -> b
    117:117:net.minecraft.server.level.ServerLevel getLevel() -> c
    28:28:void <init>(java.util.Random,float,net.minecraft.server.level.ServerLevel,java.util.function.Function,java.util.function.Function,java.util.Map,java.util.Map,net.minecraft.world.level.storage.loot.LootContext$1) -> <init>
net.minecraft.world.level.storage.loot.LootContext$1 -> crx$1:
net.minecraft.world.level.storage.loot.LootContext$Builder -> crx$a:
    net.minecraft.server.level.ServerLevel level -> a
    java.util.Map params -> b
    java.util.Map dynamicDrops -> c
    java.util.Random random -> d
    float luck -> e
    122:130:void <init>(net.minecraft.server.level.ServerLevel) -> <init>
    133:134:net.minecraft.world.level.storage.loot.LootContext$Builder withRandom(java.util.Random) -> a
    138:141:net.minecraft.world.level.storage.loot.LootContext$Builder withOptionalRandomSeed(long) -> a
    145:150:net.minecraft.world.level.storage.loot.LootContext$Builder withOptionalRandomSeed(long,java.util.Random) -> a
    154:155:net.minecraft.world.level.storage.loot.LootContext$Builder withLuck(float) -> a
    159:160:net.minecraft.world.level.storage.loot.LootContext$Builder withParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam,java.lang.Object) -> a
    164:169:net.minecraft.world.level.storage.loot.LootContext$Builder withOptionalParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam,java.lang.Object) -> b
    173:179:net.minecraft.world.level.storage.loot.LootContext$Builder withDynamicDrop(net.minecraft.resources.ResourceLocation,net.minecraft.world.level.storage.loot.LootContext$DynamicDrop) -> a
    183:183:net.minecraft.server.level.ServerLevel getLevel() -> a
    187:191:java.lang.Object getParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> a
    197:197:java.lang.Object getOptionalParameter(net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> b
    201:217:net.minecraft.world.level.storage.loot.LootContext create(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet) -> a
net.minecraft.world.level.storage.loot.LootContext$DynamicDrop -> crx$b:
    void add(net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> add
net.minecraft.world.level.storage.loot.LootContext$EntityTarget -> crx$c:
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget THIS -> a
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget KILLER -> b
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget DIRECT_KILLER -> c
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget KILLER_PLAYER -> d
    java.lang.String name -> e
    net.minecraft.world.level.storage.loot.parameters.LootContextParam param -> f
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget[] $VALUES -> g
    221:221:net.minecraft.world.level.storage.loot.LootContext$EntityTarget[] values() -> values
    221:221:net.minecraft.world.level.storage.loot.LootContext$EntityTarget valueOf(java.lang.String) -> valueOf
    232:235:void <init>(java.lang.String,int,java.lang.String,net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> <init>
    238:238:net.minecraft.world.level.storage.loot.parameters.LootContextParam getParam() -> a
    242:247:net.minecraft.world.level.storage.loot.LootContext$EntityTarget getByName(java.lang.String) -> a
    221:221:java.lang.String access$100(net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> a
    221:225:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.LootContext$EntityTarget$Serializer -> crx$c$a:
    250:250:void <init>() -> <init>
    253:254:void write(com.google.gson.stream.JsonWriter,net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> a
    258:258:net.minecraft.world.level.storage.loot.LootContext$EntityTarget read(com.google.gson.stream.JsonReader) -> a
    250:250:java.lang.Object read(com.google.gson.stream.JsonReader) -> read
    250:250:void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> write
net.minecraft.world.level.storage.loot.LootContextUser -> cry:
    10:10:java.util.Set getReferencedContextParams() -> a
    14:15:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
net.minecraft.world.level.storage.loot.LootPool -> crz:
    net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[] entries -> a
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] conditions -> b
    java.util.function.Predicate compositeCondition -> c
    net.minecraft.world.level.storage.loot.functions.LootItemFunction[] functions -> d
    java.util.function.BiFunction compositeFunction -> e
    net.minecraft.world.level.storage.loot.RandomIntGenerator rolls -> f
    net.minecraft.world.level.storage.loot.RandomValueBounds bonusRolls -> g
    41:49:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[],net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[],net.minecraft.world.level.storage.loot.RandomIntGenerator,net.minecraft.world.level.storage.loot.RandomValueBounds) -> <init>
    52:83:void addRandomItem(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> b
    86:97:void addRandomItems(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
    100:111:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    162:162:net.minecraft.world.level.storage.loot.LootPool$Builder lootPool() -> a
    57:62:void lambda$addRandomItem$0(net.minecraft.world.level.storage.loot.LootContext,java.util.List,org.apache.commons.lang3.mutable.MutableInt,net.minecraft.world.level.storage.loot.entries.LootPoolEntry) -> a
    32:32:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[],net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[],net.minecraft.world.level.storage.loot.RandomIntGenerator,net.minecraft.world.level.storage.loot.RandomValueBounds,net.minecraft.world.level.storage.loot.LootPool$1) -> <init>
    32:32:net.minecraft.world.level.storage.loot.RandomIntGenerator access$100(net.minecraft.world.level.storage.loot.LootPool) -> a
    32:32:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[] access$200(net.minecraft.world.level.storage.loot.LootPool) -> b
    32:32:net.minecraft.world.level.storage.loot.RandomValueBounds access$300(net.minecraft.world.level.storage.loot.LootPool) -> c
    32:32:net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] access$400(net.minecraft.world.level.storage.loot.LootPool) -> d
    32:32:net.minecraft.world.level.storage.loot.functions.LootItemFunction[] access$500(net.minecraft.world.level.storage.loot.LootPool) -> e
net.minecraft.world.level.storage.loot.LootPool$1 -> crz$1:
net.minecraft.world.level.storage.loot.LootPool$Builder -> crz$a:
    java.util.List entries -> a
    java.util.List conditions -> b
    java.util.List functions -> c
    net.minecraft.world.level.storage.loot.RandomIntGenerator rolls -> d
    net.minecraft.world.level.storage.loot.RandomValueBounds bonusRolls -> e
    113:118:void <init>() -> <init>
    121:122:net.minecraft.world.level.storage.loot.LootPool$Builder setRolls(net.minecraft.world.level.storage.loot.RandomIntGenerator) -> a
    127:127:net.minecraft.world.level.storage.loot.LootPool$Builder unwrap() -> a
    131:132:net.minecraft.world.level.storage.loot.LootPool$Builder setBonusRolls(net.minecraft.world.level.storage.loot.RandomValueBounds) -> a
    136:137:net.minecraft.world.level.storage.loot.LootPool$Builder add(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    142:143:net.minecraft.world.level.storage.loot.LootPool$Builder when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    148:149:net.minecraft.world.level.storage.loot.LootPool$Builder apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> a
    153:157:net.minecraft.world.level.storage.loot.LootPool build() -> b
    113:113:java.lang.Object unwrap() -> c
    113:113:java.lang.Object apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> b
    113:113:java.lang.Object when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> b
net.minecraft.world.level.storage.loot.LootPool$Serializer -> crz$b:
    165:165:void <init>() -> <init>
    168:174:net.minecraft.world.level.storage.loot.LootPool deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    179:191:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.LootPool,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    165:165:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    165:165:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.LootTable -> csa:
    org.apache.logging.log4j.Logger LOGGER -> c
    net.minecraft.world.level.storage.loot.LootTable EMPTY -> a
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet DEFAULT_PARAM_SET -> b
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet paramSet -> d
    net.minecraft.world.level.storage.loot.LootPool[] pools -> e
    net.minecraft.world.level.storage.loot.functions.LootItemFunction[] functions -> f
    java.util.function.BiFunction compositeFunction -> g
    46:51:void <init>(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet,net.minecraft.world.level.storage.loot.LootPool[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> <init>
    54:54:java.util.function.Consumer createStackSplitter(java.util.function.Consumer) -> a
    70:79:void getRandomItemsRaw(net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> a
    82:83:void getRandomItems(net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> b
    86:88:java.util.List getRandomItems(net.minecraft.world.level.storage.loot.LootContext) -> a
    92:92:net.minecraft.world.level.storage.loot.parameters.LootContextParamSet getParamSet() -> a
    96:103:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    106:122:void fill(net.minecraft.world.Container,net.minecraft.world.level.storage.loot.LootContext) -> a
    125:157:void shuffleAndSplitItems(java.util.List,int,java.util.Random) -> a
    160:169:java.util.List getAvailableSlots(net.minecraft.world.Container,java.util.Random) -> a
    206:206:net.minecraft.world.level.storage.loot.LootTable$Builder lootTable() -> b
    55:66:void lambda$createStackSplitter$0(java.util.function.Consumer,net.minecraft.world.item.ItemStack) -> a
    33:33:void <init>(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet,net.minecraft.world.level.storage.loot.LootPool[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[],net.minecraft.world.level.storage.loot.LootTable$1) -> <init>
    33:33:net.minecraft.world.level.storage.loot.parameters.LootContextParamSet access$100(net.minecraft.world.level.storage.loot.LootTable) -> a
    33:33:org.apache.logging.log4j.Logger access$200() -> c
    33:33:net.minecraft.world.level.storage.loot.LootPool[] access$300(net.minecraft.world.level.storage.loot.LootTable) -> b
    33:33:net.minecraft.world.level.storage.loot.functions.LootItemFunction[] access$400(net.minecraft.world.level.storage.loot.LootTable) -> c
    34:37:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.LootTable$1 -> csa$1:
net.minecraft.world.level.storage.loot.LootTable$Builder -> csa$a:
    java.util.List pools -> a
    java.util.List functions -> b
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet paramSet -> c
    172:177:void <init>() -> <init>
    180:181:net.minecraft.world.level.storage.loot.LootTable$Builder withPool(net.minecraft.world.level.storage.loot.LootPool$Builder) -> a
    185:186:net.minecraft.world.level.storage.loot.LootTable$Builder setParamSet(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet) -> a
    191:192:net.minecraft.world.level.storage.loot.LootTable$Builder apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> a
    197:197:net.minecraft.world.level.storage.loot.LootTable$Builder unwrap() -> a
    201:201:net.minecraft.world.level.storage.loot.LootTable build() -> b
    172:172:java.lang.Object unwrap() -> c
    172:172:java.lang.Object apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> b
net.minecraft.world.level.storage.loot.LootTable$Serializer -> csa$b:
    209:209:void <init>() -> <init>
    212:223:net.minecraft.world.level.storage.loot.LootTable deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    228:246:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.LootTable,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    209:209:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    209:209:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.LootTables -> csb:
    org.apache.logging.log4j.Logger LOGGER -> a
    com.google.gson.Gson GSON -> b
    java.util.Map tables -> c
    net.minecraft.world.level.storage.loot.PredicateManager predicateManager -> d
    40:46:void <init>(net.minecraft.world.level.storage.loot.PredicateManager) -> <init>
    49:49:net.minecraft.world.level.storage.loot.LootTable get(net.minecraft.resources.ResourceLocation) -> a
    54:78:void apply(java.util.Map,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
    81:82:void validate(net.minecraft.world.level.storage.loot.ValidationContext,net.minecraft.resources.ResourceLocation,net.minecraft.world.level.storage.loot.LootTable) -> a
    85:85:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.LootTable) -> a
    89:89:java.util.Set getIds() -> a
    25:25:void apply(java.lang.Object,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
    75:75:void lambda$apply$2(java.lang.String,java.lang.String) -> a
    74:74:void lambda$apply$1(net.minecraft.world.level.storage.loot.ValidationContext,net.minecraft.resources.ResourceLocation,net.minecraft.world.level.storage.loot.LootTable) -> b
    63:68:void lambda$apply$0(com.google.common.collect.ImmutableMap$Builder,net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> a
    26:38:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.PredicateManager -> csc:
    org.apache.logging.log4j.Logger LOGGER -> a
    com.google.gson.Gson GSON -> b
    java.util.Map conditions -> c
    33:36:void <init>() -> <init>
    40:40:net.minecraft.world.level.storage.loot.predicates.LootItemCondition get(net.minecraft.resources.ResourceLocation) -> a
    45:61:void apply(java.util.Map,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
    64:64:java.util.Set getKeys() -> a
    22:22:void apply(java.lang.Object,net.minecraft.server.packs.resources.ResourceManager,net.minecraft.util.profiling.ProfilerFiller) -> a
    58:58:void lambda$apply$3(java.lang.String,java.lang.String) -> a
    57:57:void lambda$apply$2(net.minecraft.world.level.storage.loot.ValidationContext,net.minecraft.resources.ResourceLocation,net.minecraft.world.level.storage.loot.predicates.LootItemCondition) -> a
    56:56:net.minecraft.world.level.storage.loot.LootTable lambda$apply$1(net.minecraft.resources.ResourceLocation) -> b
    48:53:void lambda$apply$0(com.google.common.collect.ImmutableMap$Builder,net.minecraft.resources.ResourceLocation,com.google.gson.JsonObject) -> a
    23:30:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.RandomIntGenerator -> csd:
    net.minecraft.resources.ResourceLocation CONSTANT -> a
    net.minecraft.resources.ResourceLocation UNIFORM -> b
    net.minecraft.resources.ResourceLocation BINOMIAL -> c
    int getInt(java.util.Random) -> a
    net.minecraft.resources.ResourceLocation getType() -> a
    8:10:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.RandomIntGenerators -> cse:
    java.util.Map GENERATORS -> a
    14:14:void <init>() -> <init>
    24:36:net.minecraft.world.level.storage.loot.RandomIntGenerator deserialize(com.google.gson.JsonElement,com.google.gson.JsonDeserializationContext) -> a
    40:45:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.RandomIntGenerator,com.google.gson.JsonSerializationContext) -> a
    15:21:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.RandomValueBounds -> csf:
    float min -> d
    float max -> e
    22:25:void <init>(float,float) -> <init>
    27:30:void <init>(float) -> <init>
    33:33:net.minecraft.world.level.storage.loot.RandomValueBounds exactly(float) -> a
    37:37:net.minecraft.world.level.storage.loot.RandomValueBounds between(float,float) -> a
    41:41:float getMin() -> b
    45:45:float getMax() -> c
    50:50:int getInt(java.util.Random) -> a
    54:54:float getFloat(java.util.Random) -> b
    58:58:boolean matchesValue(int) -> a
    63:63:net.minecraft.resources.ResourceLocation getType() -> a
    18:18:float access$000(net.minecraft.world.level.storage.loot.RandomValueBounds) -> a
    18:18:float access$100(net.minecraft.world.level.storage.loot.RandomValueBounds) -> b
net.minecraft.world.level.storage.loot.RandomValueBounds$Serializer -> csf$a:
    66:66:void <init>() -> <init>
    69:75:net.minecraft.world.level.storage.loot.RandomValueBounds deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    81:87:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.RandomValueBounds,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    66:66:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    66:66:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.ValidationContext -> csg:
    com.google.common.collect.Multimap problems -> a
    java.util.function.Supplier context -> b
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet params -> c
    java.util.function.Function conditionResolver -> d
    java.util.Set visitedConditions -> e
    java.util.function.Function tableResolver -> f
    java.util.Set visitedTables -> g
    java.lang.String contextCache -> h
    31:32:void <init>(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet,java.util.function.Function,java.util.function.Function) -> <init>
    34:42:void <init>(com.google.common.collect.Multimap,java.util.function.Supplier,net.minecraft.world.level.storage.loot.parameters.LootContextParamSet,java.util.function.Function,java.util.Set,java.util.function.Function,java.util.Set) -> <init>
    45:49:java.lang.String getContext() -> b
    53:54:void reportProblem(java.lang.String) -> a
    57:57:net.minecraft.world.level.storage.loot.ValidationContext forChild(java.lang.String) -> b
    61:62:net.minecraft.world.level.storage.loot.ValidationContext enterTable(java.lang.String,net.minecraft.resources.ResourceLocation) -> a
    66:67:net.minecraft.world.level.storage.loot.ValidationContext enterCondition(java.lang.String,net.minecraft.resources.ResourceLocation) -> b
    71:71:boolean hasVisitedTable(net.minecraft.resources.ResourceLocation) -> a
    75:75:boolean hasVisitedCondition(net.minecraft.resources.ResourceLocation) -> b
    79:79:com.google.common.collect.Multimap getProblems() -> a
    83:84:void validateUser(net.minecraft.world.level.storage.loot.LootContextUser) -> a
    88:88:net.minecraft.world.level.storage.loot.LootTable resolveLootTable(net.minecraft.resources.ResourceLocation) -> c
    93:93:net.minecraft.world.level.storage.loot.predicates.LootItemCondition resolveCondition(net.minecraft.resources.ResourceLocation) -> d
    97:97:net.minecraft.world.level.storage.loot.ValidationContext setParams(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet) -> a
    67:67:java.lang.String lambda$enterCondition$3(java.lang.String) -> c
    62:62:java.lang.String lambda$enterTable$2(java.lang.String) -> d
    57:57:java.lang.String lambda$forChild$1(java.lang.String) -> e
    31:31:java.lang.String lambda$new$0() -> c
net.minecraft.world.level.storage.loot.entries.AlternativesEntry -> csh:
    12:13:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[],net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> <init>
    17:25:net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer compose(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[]) -> a
    38:45:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    74:74:net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder alternatives(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder[]) -> a
    26:31:boolean lambda$compose$0(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[],net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> a
net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder -> csh$a:
    java.util.List entries -> a
    48:54:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder[]) -> <init>
    58:58:net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder getThis() -> a
    63:64:net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder otherwise(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    69:69:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer build() -> b
    47:47:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder getThis() -> d
net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer -> csi:
    net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer ALWAYS_FALSE -> a
    net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer ALWAYS_TRUE -> b
    boolean expand(net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> expand
    16:17:net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer and(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer) -> a
    21:22:net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer or(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer) -> b
    22:22:boolean lambda$or$3(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer,net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> a
    17:17:boolean lambda$and$2(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer,net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> b
    11:11:boolean lambda$static$1(net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> a
    10:10:boolean lambda$static$0(net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> b
    10:11:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.entries.CompositeEntryBase -> csj:
    net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[] children -> c
    net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer composedChildren -> e
    19:22:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[],net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> <init>
    26:35:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer compose(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[]) -> a
    41:45:boolean expand(net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> expand
    73:73:net.minecraft.world.level.storage.loot.entries.CompositeEntryBase$Serializer createSerializer(net.minecraft.resources.ResourceLocation,java.lang.Class,net.minecraft.world.level.storage.loot.entries.CompositeEntryBase$CompositeEntryConstructor) -> a
net.minecraft.world.level.storage.loot.entries.CompositeEntryBase$1 -> csj$1:
    net.minecraft.world.level.storage.loot.entries.CompositeEntryBase$CompositeEntryConstructor val$constructor -> a
    73:73:void <init>(net.minecraft.resources.ResourceLocation,java.lang.Class,net.minecraft.world.level.storage.loot.entries.CompositeEntryBase$CompositeEntryConstructor) -> <init>
    76:76:net.minecraft.world.level.storage.loot.entries.CompositeEntryBase deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[],net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
net.minecraft.world.level.storage.loot.entries.CompositeEntryBase$CompositeEntryConstructor -> csj$a:
    net.minecraft.world.level.storage.loot.entries.CompositeEntryBase create(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[],net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> create
net.minecraft.world.level.storage.loot.entries.CompositeEntryBase$Serializer -> csj$b:
    55:56:void <init>(net.minecraft.resources.ResourceLocation,java.lang.Class) -> <init>
    60:61:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.CompositeEntryBase,com.google.gson.JsonSerializationContext) -> a
    65:66:net.minecraft.world.level.storage.loot.entries.CompositeEntryBase deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    net.minecraft.world.level.storage.loot.entries.CompositeEntryBase deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[],net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    53:53:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    53:53:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.DynamicLoot -> csk:
    net.minecraft.resources.ResourceLocation TYPE -> c
    net.minecraft.resources.ResourceLocation name -> h
    21:23:void <init>(net.minecraft.resources.ResourceLocation,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> <init>
    27:28:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
    31:31:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder dynamicEntry(net.minecraft.resources.ResourceLocation) -> a
    31:31:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer lambda$dynamicEntry$0(net.minecraft.resources.ResourceLocation,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    15:15:net.minecraft.resources.ResourceLocation access$000(net.minecraft.world.level.storage.loot.entries.DynamicLoot) -> a
    15:15:void <init>(net.minecraft.resources.ResourceLocation,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[],net.minecraft.world.level.storage.loot.entries.DynamicLoot$1) -> <init>
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.entries.DynamicLoot$1 -> csk$1:
net.minecraft.world.level.storage.loot.entries.DynamicLoot$Serializer -> csk$a:
    36:37:void <init>() -> <init>
    41:43:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.DynamicLoot,com.google.gson.JsonSerializationContext) -> a
    47:48:net.minecraft.world.level.storage.loot.entries.DynamicLoot deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    34:34:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
    34:34:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer,com.google.gson.JsonSerializationContext) -> a
    34:34:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.EmptyLootItem -> csl:
    15:16:void <init>(int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> <init>
    20:20:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
    23:23:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder emptyItem() -> a
    13:13:void <init>(int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[],net.minecraft.world.level.storage.loot.entries.EmptyLootItem$1) -> <init>
net.minecraft.world.level.storage.loot.entries.EmptyLootItem$1 -> csl$1:
net.minecraft.world.level.storage.loot.entries.EmptyLootItem$Serializer -> csl$a:
    28:29:void <init>() -> <init>
    33:33:net.minecraft.world.level.storage.loot.entries.EmptyLootItem deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    26:26:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
net.minecraft.world.level.storage.loot.entries.EntryGroup -> csm:
    10:11:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[],net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> <init>
    15:30:net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer compose(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[]) -> a
    66:66:net.minecraft.world.level.storage.loot.entries.EntryGroup$Builder list(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder[]) -> a
    31:34:boolean lambda$compose$1(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[],net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> a
    24:26:boolean lambda$compose$0(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer,net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer,net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> a
net.minecraft.world.level.storage.loot.entries.EntryGroup$Builder -> csm$a:
    java.util.List entries -> a
    40:46:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder[]) -> <init>
    50:50:net.minecraft.world.level.storage.loot.entries.EntryGroup$Builder getThis() -> a
    55:56:net.minecraft.world.level.storage.loot.entries.EntryGroup$Builder append(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> b
    61:61:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer build() -> b
    39:39:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder getThis() -> d
net.minecraft.world.level.storage.loot.entries.LootItem -> csn:
    net.minecraft.world.item.Item item -> c
    22:24:void <init>(net.minecraft.world.item.Item,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> <init>
    28:29:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
    32:32:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder lootTableItem(net.minecraft.world.level.ItemLike) -> a
    32:32:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer lambda$lootTableItem$0(net.minecraft.world.level.ItemLike,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    18:18:net.minecraft.world.item.Item access$000(net.minecraft.world.level.storage.loot.entries.LootItem) -> a
    18:18:void <init>(net.minecraft.world.item.Item,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[],net.minecraft.world.level.storage.loot.entries.LootItem$1) -> <init>
net.minecraft.world.level.storage.loot.entries.LootItem$1 -> csn$1:
net.minecraft.world.level.storage.loot.entries.LootItem$Serializer -> csn$a:
    37:38:void <init>() -> <init>
    42:50:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootItem,com.google.gson.JsonSerializationContext) -> a
    54:55:net.minecraft.world.level.storage.loot.entries.LootItem deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    35:35:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
    35:35:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer,com.google.gson.JsonSerializationContext) -> a
    35:35:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolEntries -> cso:
    java.util.Map ID_TO_SERIALIZER -> a
    java.util.Map CLASS_TO_SERIALIZER -> b
    19:19:void <init>() -> <init>
    37:39:void register(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Serializer) -> a
    19:19:java.util.Map access$000() -> a
    19:19:java.util.Map access$100() -> b
    20:34:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.entries.LootPoolEntries$Serializer -> cso$a:
    41:41:void <init>() -> <init>
    44:53:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    58:69:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    74:78:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Serializer getSerializer(java.lang.Class) -> a
    41:41:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    41:41:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.entries.LootPoolEntry -> csp:
    int getWeight(float) -> a
    void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer -> csq:
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] conditions -> d
    java.util.function.Predicate compositeCondition -> c
    21:24:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> <init>
    27:30:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    33:33:boolean canRun(net.minecraft.world.level.storage.loot.LootContext) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder -> csq$a:
    java.util.List conditions -> a
    36:37:void <init>() -> <init>
    net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder getThis() -> d
    43:44:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    49:49:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder unwrap() -> e
    53:53:net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] getConditions() -> f
    57:57:net.minecraft.world.level.storage.loot.entries.AlternativesEntry$Builder otherwise(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    61:61:net.minecraft.world.level.storage.loot.entries.EntryGroup$Builder append(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> b
    65:65:net.minecraft.world.level.storage.loot.entries.SequentialEntry$Builder then(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> c
    net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer build() -> b
    36:36:java.lang.Object unwrap() -> c
    36:36:java.lang.Object when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> b
net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Serializer -> csq$b:
    net.minecraft.resources.ResourceLocation name -> a
    java.lang.Class clazz -> b
    75:78:void <init>(net.minecraft.resources.ResourceLocation,java.lang.Class) -> <init>
    81:81:net.minecraft.resources.ResourceLocation getName() -> a
    85:85:java.lang.Class getContainerClass() -> b
    void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer,com.google.gson.JsonSerializationContext) -> a
    net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer -> csr:
    int weight -> e
    int quality -> f
    net.minecraft.world.level.storage.loot.functions.LootItemFunction[] functions -> g
    java.util.function.BiFunction compositeFunction -> c
    net.minecraft.world.level.storage.loot.entries.LootPoolEntry entry -> h
    34:57:void <init>(int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> <init>
    43:48:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
    68:73:boolean expand(net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> expand
    127:127:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder simpleBuilder(net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$EntryConstructor) -> a
    23:23:java.util.function.BiFunction access$000(net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$1 -> csr$1:
    net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer this$0 -> a
    57:57:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer) -> <init>
    60:61:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder -> csr$a:
    int weight -> a
    int quality -> b
    java.util.List functions -> c
    76:80:void <init>() -> <init>
    84:85:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> a
    89:89:net.minecraft.world.level.storage.loot.functions.LootItemFunction[] getFunctions() -> a
    93:94:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder setWeight(int) -> a
    98:99:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder setQuality(int) -> b
    76:76:java.lang.Object apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> b
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$DummyBuilder -> csr$b:
    net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$EntryConstructor constructor -> c
    111:113:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$EntryConstructor) -> <init>
    117:117:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$DummyBuilder getThis() -> g
    122:122:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer build() -> b
    108:108:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder getThis() -> d
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$EntryBase -> csr$c:
    net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer this$0 -> b
    50:50:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer) -> <init>
    53:53:int getWeight(float) -> a
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$EntryConstructor -> csr$d:
    net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer build(int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> build
net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Serializer -> csr$e:
    132:133:void <init>(net.minecraft.resources.ResourceLocation,java.lang.Class) -> <init>
    137:148:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer,com.google.gson.JsonSerializationContext) -> a
    152:156:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
    130:130:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    130:130:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.LootTableReference -> css:
    net.minecraft.resources.ResourceLocation name -> c
    21:23:void <init>(net.minecraft.resources.ResourceLocation,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> <init>
    27:29:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
    33:46:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    49:49:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder lootTableReference(net.minecraft.resources.ResourceLocation) -> a
    49:49:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer lambda$lootTableReference$0(net.minecraft.resources.ResourceLocation,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    17:17:net.minecraft.resources.ResourceLocation access$000(net.minecraft.world.level.storage.loot.entries.LootTableReference) -> a
    17:17:void <init>(net.minecraft.resources.ResourceLocation,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[],net.minecraft.world.level.storage.loot.entries.LootTableReference$1) -> <init>
net.minecraft.world.level.storage.loot.entries.LootTableReference$1 -> css$1:
net.minecraft.world.level.storage.loot.entries.LootTableReference$Serializer -> css$a:
    54:55:void <init>() -> <init>
    59:61:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootTableReference,com.google.gson.JsonSerializationContext) -> a
    65:66:net.minecraft.world.level.storage.loot.entries.LootTableReference deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    52:52:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
    52:52:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer,com.google.gson.JsonSerializationContext) -> a
    52:52:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.SequentialEntry -> cst:
    10:11:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer[],net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> <init>
    15:23:net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer compose(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[]) -> a
    61:61:net.minecraft.world.level.storage.loot.entries.SequentialEntry$Builder sequential(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder[]) -> a
    24:29:boolean lambda$compose$0(net.minecraft.world.level.storage.loot.entries.ComposableEntryContainer[],net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> a
net.minecraft.world.level.storage.loot.entries.SequentialEntry$Builder -> cst$a:
    java.util.List entries -> a
    35:41:void <init>(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder[]) -> <init>
    45:45:net.minecraft.world.level.storage.loot.entries.SequentialEntry$Builder getThis() -> a
    50:51:net.minecraft.world.level.storage.loot.entries.SequentialEntry$Builder then(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> c
    56:56:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer build() -> b
    34:34:net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder getThis() -> d
net.minecraft.world.level.storage.loot.entries.TagEntry -> csu:
    net.minecraft.tags.Tag tag -> c
    boolean expand -> h
    24:27:void <init>(net.minecraft.tags.Tag,boolean,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> <init>
    31:32:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
    35:46:boolean expandTag(net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> a
    51:54:boolean expand(net.minecraft.world.level.storage.loot.LootContext,java.util.function.Consumer) -> expand
    59:59:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder tagContents(net.minecraft.tags.Tag) -> a
    63:63:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer$Builder expandTag(net.minecraft.tags.Tag) -> b
    63:63:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer lambda$expandTag$2(net.minecraft.tags.Tag,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    59:59:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer lambda$tagContents$1(net.minecraft.tags.Tag,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
    31:31:void lambda$createItemStack$0(java.util.function.Consumer,net.minecraft.world.item.Item) -> a
    19:19:net.minecraft.tags.Tag access$000(net.minecraft.world.level.storage.loot.entries.TagEntry) -> a
    19:19:boolean access$100(net.minecraft.world.level.storage.loot.entries.TagEntry) -> b
    19:19:void <init>(net.minecraft.tags.Tag,boolean,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[],net.minecraft.world.level.storage.loot.entries.TagEntry$1) -> <init>
net.minecraft.world.level.storage.loot.entries.TagEntry$1 -> csu$1:
    net.minecraft.world.item.Item val$item -> a
    net.minecraft.world.level.storage.loot.entries.TagEntry this$0 -> c
    37:37:void <init>(net.minecraft.world.level.storage.loot.entries.TagEntry,net.minecraft.world.item.Item) -> <init>
    40:41:void createItemStack(java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
net.minecraft.world.level.storage.loot.entries.TagEntry$Serializer -> csu$a:
    68:69:void <init>() -> <init>
    73:77:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.TagEntry,com.google.gson.JsonSerializationContext) -> a
    81:90:net.minecraft.world.level.storage.loot.entries.TagEntry deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> a
    66:66:net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,int,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.LootItemFunction[]) -> b
    66:66:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer,com.google.gson.JsonSerializationContext) -> a
    66:66:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.entries.package-info -> csv:
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount -> csw:
    java.util.Map FORMULAS -> a
    net.minecraft.world.item.enchantment.Enchantment enchantment -> c
    net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula formula -> d
    149:152:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula) -> <init>
    156:156:java.util.Set getReferencedContextParams() -> a
    161:168:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    172:172:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder addBonusBinomialDistributionCount(net.minecraft.world.item.enchantment.Enchantment,float,int) -> a
    176:176:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder addOreBonusCount(net.minecraft.world.item.enchantment.Enchantment) -> a
    180:180:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder addUniformBonusCount(net.minecraft.world.item.enchantment.Enchantment) -> b
    184:184:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder addUniformBonusCount(net.minecraft.world.item.enchantment.Enchantment,int) -> a
    184:184:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$addUniformBonusCount$3(net.minecraft.world.item.enchantment.Enchantment,int,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    180:180:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$addUniformBonusCount$2(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    176:176:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$addOreBonusCount$1(net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    172:172:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$addBonusBinomialDistributionCount$0(net.minecraft.world.item.enchantment.Enchantment,int,float,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    24:24:net.minecraft.world.item.enchantment.Enchantment access$000(net.minecraft.world.level.storage.loot.functions.ApplyBonusCount) -> a
    24:24:net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula access$100(net.minecraft.world.level.storage.loot.functions.ApplyBonusCount) -> b
    24:24:java.util.Map access$200() -> b
    24:24:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.item.enchantment.Enchantment,net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula,net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$1) -> <init>
    136:142:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$1 -> csw$1:
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$BinomialWithBonusCount -> csw$a:
    net.minecraft.resources.ResourceLocation TYPE -> a
    int extraRounds -> b
    float probability -> c
    43:46:void <init>(int,float) -> <init>
    50:55:int calculateNewCount(java.util.Random,int,int) -> a
    60:62:void serializeParams(com.google.gson.JsonObject,com.google.gson.JsonSerializationContext) -> a
    65:67:net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    72:72:net.minecraft.resources.ResourceLocation getType() -> a
    38:38:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula -> csw$b:
    int calculateNewCount(java.util.Random,int,int) -> a
    void serializeParams(com.google.gson.JsonObject,com.google.gson.JsonSerializationContext) -> a
    net.minecraft.resources.ResourceLocation getType() -> a
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$FormulaDeserializer -> csw$c:
    net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$OreDrops -> csw$d:
    net.minecraft.resources.ResourceLocation TYPE -> a
    106:106:void <init>() -> <init>
    111:119:int calculateNewCount(java.util.Random,int,int) -> a
    124:124:void serializeParams(com.google.gson.JsonObject,com.google.gson.JsonSerializationContext) -> a
    127:127:net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    132:132:net.minecraft.resources.ResourceLocation getType() -> a
    106:106:void <init>(net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$1) -> <init>
    107:107:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Serializer -> csw$e:
    189:190:void <init>() -> <init>
    194:204:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.ApplyBonusCount,com.google.gson.JsonSerializationContext) -> a
    208:223:net.minecraft.world.level.storage.loot.functions.ApplyBonusCount deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    187:187:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    187:187:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    187:187:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
    209:209:com.google.gson.JsonParseException lambda$deserialize$0(net.minecraft.resources.ResourceLocation) -> a
net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$UniformBonusCount -> csw$f:
    net.minecraft.resources.ResourceLocation TYPE -> a
    int bonusMultiplier -> b
    81:83:void <init>(int) -> <init>
    87:87:int calculateNewCount(java.util.Random,int,int) -> a
    92:93:void serializeParams(com.google.gson.JsonObject,com.google.gson.JsonSerializationContext) -> a
    96:97:net.minecraft.world.level.storage.loot.functions.ApplyBonusCount$Formula deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    102:102:net.minecraft.resources.ResourceLocation getType() -> a
    77:77:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.ApplyExplosionDecay -> csx:
    15:16:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> <init>
    20:36:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    40:40:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder explosionDecay() -> b
    13:13:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.ApplyExplosionDecay$1) -> <init>
net.minecraft.world.level.storage.loot.functions.ApplyExplosionDecay$1 -> csx$1:
net.minecraft.world.level.storage.loot.functions.ApplyExplosionDecay$Serializer -> csx$a:
    45:46:void <init>() -> <init>
    50:50:net.minecraft.world.level.storage.loot.functions.ApplyExplosionDecay deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    43:43:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
net.minecraft.world.level.storage.loot.functions.CopyBlockState -> csy:
    net.minecraft.world.level.block.Block block -> a
    java.util.Set properties -> c
    32:35:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.block.Block,java.util.Set) -> <init>
    39:39:java.util.Set getReferencedContextParams() -> a
    44:58:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    89:89:net.minecraft.world.level.storage.loot.functions.CopyBlockState$Builder copyState(net.minecraft.world.level.block.Block) -> a
    93:94:java.lang.String serialize(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.properties.Property) -> a
    55:55:void lambda$run$0(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.properties.Property) -> a
    27:27:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.block.Block,java.util.Set,net.minecraft.world.level.storage.loot.functions.CopyBlockState$1) -> <init>
    27:27:net.minecraft.world.level.block.Block access$200(net.minecraft.world.level.storage.loot.functions.CopyBlockState) -> a
    27:27:java.util.Set access$300(net.minecraft.world.level.storage.loot.functions.CopyBlockState) -> b
net.minecraft.world.level.storage.loot.functions.CopyBlockState$1 -> csy$1:
net.minecraft.world.level.storage.loot.functions.CopyBlockState$Builder -> csy$a:
    net.minecraft.world.level.block.Block block -> a
    java.util.Set properties -> b
    63:67:void <init>(net.minecraft.world.level.block.Block) -> <init>
    70:74:net.minecraft.world.level.storage.loot.functions.CopyBlockState$Builder copy(net.minecraft.world.level.block.state.properties.Property) -> a
    79:79:net.minecraft.world.level.storage.loot.functions.CopyBlockState$Builder getThis() -> a
    84:84:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    61:61:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
    61:61:void <init>(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.functions.CopyBlockState$1) -> <init>
net.minecraft.world.level.storage.loot.functions.CopyBlockState$Serializer -> csy$b:
    99:100:void <init>() -> <init>
    104:109:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.CopyBlockState,com.google.gson.JsonSerializationContext) -> a
    113:123:net.minecraft.world.level.storage.loot.functions.CopyBlockState deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    97:97:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    97:97:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    97:97:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
    121:121:void lambda$deserialize$2(java.util.Set,net.minecraft.world.level.block.state.StateDefinition,com.google.gson.JsonElement) -> a
    115:115:java.lang.IllegalArgumentException lambda$deserialize$1(net.minecraft.resources.ResourceLocation) -> a
    107:107:void lambda$serialize$0(com.google.gson.JsonArray,net.minecraft.world.level.block.state.properties.Property) -> a
net.minecraft.world.level.storage.loot.functions.CopyNameFunction -> csz:
    net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource source -> a
    22:24:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource) -> <init>
    28:28:java.util.Set getReferencedContextParams() -> a
    33:40:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    44:44:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder copyName(net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource) -> a
    44:44:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$copyName$0(net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    18:18:net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource access$000(net.minecraft.world.level.storage.loot.functions.CopyNameFunction) -> a
    18:18:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource,net.minecraft.world.level.storage.loot.functions.CopyNameFunction$1) -> <init>
net.minecraft.world.level.storage.loot.functions.CopyNameFunction$1 -> csz$1:
net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource -> csz$a:
    net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource THIS -> a
    net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource KILLER -> b
    net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource KILLER_PLAYER -> c
    net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource BLOCK_ENTITY -> d
    java.lang.String name -> e
    net.minecraft.world.level.storage.loot.parameters.LootContextParam param -> f
    net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource[] $VALUES -> g
    47:47:net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource[] values() -> values
    47:47:net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource valueOf(java.lang.String) -> valueOf
    56:59:void <init>(java.lang.String,int,java.lang.String,net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> <init>
    62:67:net.minecraft.world.level.storage.loot.functions.CopyNameFunction$NameSource getByName(java.lang.String) -> a
    47:51:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.CopyNameFunction$Serializer -> csz$b:
    73:74:void <init>() -> <init>
    78:81:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.CopyNameFunction,com.google.gson.JsonSerializationContext) -> a
    85:86:net.minecraft.world.level.storage.loot.functions.CopyNameFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    71:71:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    71:71:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    71:71:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction -> cta:
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource source -> a
    java.util.List operations -> c
    java.util.function.Function ENTITY_GETTER -> d
    java.util.function.Function BLOCK_ENTITY_GETTER -> e
    81:84:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource,java.util.List) -> <init>
    88:90:net.minecraft.commands.arguments.NbtPathArgument$NbtPath compileNbtPath(java.lang.String) -> b
    96:96:java.util.Set getReferencedContextParams() -> a
    101:106:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    138:138:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder copyData(net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource) -> a
    142:142:net.minecraft.nbt.Tag lambda$static$1(net.minecraft.world.level.block.entity.BlockEntity) -> a
    103:103:void lambda$run$0(net.minecraft.world.item.ItemStack,net.minecraft.nbt.Tag,net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation) -> a
    34:34:net.minecraft.commands.arguments.NbtPathArgument$NbtPath access$000(java.lang.String) -> a
    34:34:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource,java.util.List,net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$1) -> <init>
    34:34:java.util.function.Function access$600() -> b
    34:34:java.util.function.Function access$700() -> c
    34:34:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource access$800(net.minecraft.world.level.storage.loot.functions.CopyNbtFunction) -> a
    34:34:java.util.List access$900(net.minecraft.world.level.storage.loot.functions.CopyNbtFunction) -> b
    141:142:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$1 -> cta$1:
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder -> cta$a:
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource source -> a
    java.util.List ops -> b
    111:115:void <init>(net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource) -> <init>
    118:119:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder copy(java.lang.String,java.lang.String,net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy) -> a
    123:123:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder copy(java.lang.String,java.lang.String) -> a
    128:128:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Builder getThis() -> a
    133:133:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    109:109:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
    109:109:void <init>(net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource,net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$1) -> <init>
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation -> cta$b:
    java.lang.String sourcePathText -> a
    net.minecraft.commands.arguments.NbtPathArgument$NbtPath sourcePath -> b
    java.lang.String targetPathText -> c
    net.minecraft.commands.arguments.NbtPathArgument$NbtPath targetPath -> d
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy op -> e
    42:48:void <init>(java.lang.String,java.lang.String,net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy) -> <init>
    52:59:void apply(java.util.function.Supplier,net.minecraft.nbt.Tag) -> a
    62:66:com.google.gson.JsonObject toJson() -> a
    70:73:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$CopyOperation fromJson(com.google.gson.JsonObject) -> a
    35:35:void <init>(java.lang.String,java.lang.String,net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy,net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$1) -> <init>
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource -> cta$c:
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource THIS -> a
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource KILLER -> b
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource KILLER_PLAYER -> c
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource BLOCK_ENTITY -> d
    java.lang.String name -> e
    net.minecraft.world.level.storage.loot.parameters.LootContextParam param -> f
    java.util.function.Function getter -> g
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource[] $VALUES -> h
    198:198:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource[] values() -> values
    198:198:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource valueOf(java.lang.String) -> valueOf
    208:215:void <init>(java.lang.String,int,java.lang.String,net.minecraft.world.level.storage.loot.parameters.LootContextParam,java.util.function.Function) -> <init>
    218:223:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$DataSource getByName(java.lang.String) -> a
    212:213:net.minecraft.nbt.Tag lambda$new$0(net.minecraft.world.level.storage.loot.parameters.LootContextParam,java.util.function.Function,net.minecraft.world.level.storage.loot.LootContext) -> a
    198:202:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy -> cta$d:
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy REPLACE -> a
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy APPEND -> b
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy MERGE -> c
    java.lang.String name -> d
    net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy[] $VALUES -> e
    144:144:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy[] values() -> values
    144:144:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy valueOf(java.lang.String) -> valueOf
    void merge(net.minecraft.nbt.Tag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> a
    184:186:void <init>(java.lang.String,int,java.lang.String) -> <init>
    189:194:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy getByName(java.lang.String) -> a
    144:144:java.lang.String access$100(net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy) -> a
    144:144:void <init>(java.lang.String,int,java.lang.String,net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$1) -> <init>
    144:163:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy$1 -> cta$d$1:
    145:145:void <init>(java.lang.String,int,java.lang.String) -> <init>
    148:149:void merge(net.minecraft.nbt.Tag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> a
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy$2 -> cta$d$2:
    151:151:void <init>(java.lang.String,int,java.lang.String) -> <init>
    154:161:void merge(net.minecraft.nbt.Tag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> a
    156:159:void lambda$merge$1(java.util.List,net.minecraft.nbt.Tag) -> a
    157:157:void lambda$null$0(net.minecraft.nbt.Tag,net.minecraft.nbt.Tag) -> a
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$MergeStrategy$3 -> cta$d$3:
    163:163:void <init>(java.lang.String,int,java.lang.String) -> <init>
    166:177:void merge(net.minecraft.nbt.Tag,net.minecraft.commands.arguments.NbtPathArgument$NbtPath,java.util.List) -> a
    168:175:void lambda$merge$1(java.util.List,net.minecraft.nbt.Tag) -> a
    170:173:void lambda$null$0(net.minecraft.nbt.Tag,net.minecraft.nbt.Tag) -> a
net.minecraft.world.level.storage.loot.functions.CopyNbtFunction$Serializer -> cta$e:
    229:230:void <init>() -> <init>
    234:239:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.CopyNbtFunction,com.google.gson.JsonSerializationContext) -> a
    243:250:net.minecraft.world.level.storage.loot.functions.CopyNbtFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    227:227:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    227:227:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    227:227:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction -> ctb:
    org.apache.logging.log4j.Logger LOGGER -> a
    java.util.List enchantments -> c
    38:40:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],java.util.Collection) -> <init>
    46:70:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    93:93:net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$Builder randomEnchantment() -> b
    97:97:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder randomApplicableEnchantment() -> c
    97:97:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$randomApplicableEnchantment$0(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    32:32:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],java.util.Collection,net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$1) -> <init>
    32:32:java.util.List access$100(net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction) -> a
    33:33:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$1 -> ctb$1:
net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$Builder -> ctb$a:
    java.util.Set enchantments -> a
    73:74:void <init>() -> <init>
    78:78:net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$Builder getThis() -> a
    82:83:net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$Builder withEnchantment(net.minecraft.world.item.enchantment.Enchantment) -> a
    88:88:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    73:73:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction$Serializer -> ctb$b:
    102:103:void <init>() -> <init>
    107:120:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction,com.google.gson.JsonSerializationContext) -> a
    124:134:net.minecraft.world.level.storage.loot.functions.EnchantRandomlyFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    100:100:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    100:100:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    100:100:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
    130:130:com.google.gson.JsonSyntaxException lambda$deserialize$0(java.lang.String) -> a
net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction -> ctc:
    net.minecraft.world.level.storage.loot.RandomIntGenerator levels -> a
    boolean treasure -> c
    22:25:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.RandomIntGenerator,boolean) -> <init>
    29:30:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    58:58:net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Builder enchantWithLevels(net.minecraft.world.level.storage.loot.RandomIntGenerator) -> a
    17:17:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.RandomIntGenerator,boolean,net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$1) -> <init>
    17:17:net.minecraft.world.level.storage.loot.RandomIntGenerator access$100(net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction) -> a
    17:17:boolean access$200(net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction) -> b
net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$1 -> ctc$1:
net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Builder -> ctc$a:
    net.minecraft.world.level.storage.loot.RandomIntGenerator levels -> a
    boolean treasure -> b
    37:39:void <init>(net.minecraft.world.level.storage.loot.RandomIntGenerator) -> <init>
    43:43:net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Builder getThis() -> a
    47:48:net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Builder allowTreasure() -> e
    53:53:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    33:33:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction$Serializer -> ctc$b:
    63:64:void <init>() -> <init>
    68:72:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction,com.google.gson.JsonSerializationContext) -> a
    76:78:net.minecraft.world.level.storage.loot.functions.EnchantWithLevelsFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    61:61:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    61:61:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    61:61:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction -> ctd:
    org.apache.logging.log4j.Logger LOGGER -> c
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type DEFAULT_DECORATION -> a
    java.lang.String destination -> d
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type mapDecoration -> e
    byte zoom -> f
    int searchRadius -> g
    boolean skipKnownStructures -> h
    45:51:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],java.lang.String,net.minecraft.world.level.saveddata.maps.MapDecoration$Type,byte,int,boolean) -> <init>
    55:55:java.util.Set getReferencedContextParams() -> a
    60:78:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    125:125:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder makeExplorationMap() -> b
    29:29:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],java.lang.String,net.minecraft.world.level.saveddata.maps.MapDecoration$Type,byte,int,boolean,net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$1) -> <init>
    29:29:java.lang.String access$100(net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction) -> a
    29:29:net.minecraft.world.level.saveddata.maps.MapDecoration$Type access$200(net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction) -> b
    29:29:byte access$300(net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction) -> c
    29:29:int access$400(net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction) -> d
    29:29:boolean access$500(net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction) -> e
    29:29:org.apache.logging.log4j.Logger access$600() -> c
    30:33:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$1 -> ctd$1:
net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder -> ctd$a:
    java.lang.String destination -> a
    net.minecraft.world.level.saveddata.maps.MapDecoration$Type mapDecoration -> b
    byte zoom -> c
    int searchRadius -> d
    boolean skipKnownStructures -> e
    81:86:void <init>() -> <init>
    90:90:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder getThis() -> a
    94:95:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder setDestination(java.lang.String) -> a
    99:100:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder setMapDecoration(net.minecraft.world.level.saveddata.maps.MapDecoration$Type) -> a
    104:105:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder setZoom(byte) -> a
    109:110:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder setSearchRadius(int) -> a
    114:115:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Builder setSkipKnownStructures(boolean) -> a
    120:120:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    81:81:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction$Serializer -> ctd$b:
    130:131:void <init>() -> <init>
    135:156:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction,com.google.gson.JsonSerializationContext) -> a
    160:177:net.minecraft.world.level.storage.loot.functions.ExplorationMapFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    128:128:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    128:128:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    128:128:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.FillPlayerHead -> cte:
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget entityTarget -> a
    27:29:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> <init>
    33:33:java.util.Set getReferencedContextParams() -> a
    38:45:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    49:49:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder fillPlayerHead(net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> a
    49:49:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$fillPlayerHead$0(net.minecraft.world.level.storage.loot.LootContext$EntityTarget,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    23:23:net.minecraft.world.level.storage.loot.LootContext$EntityTarget access$000(net.minecraft.world.level.storage.loot.functions.FillPlayerHead) -> a
net.minecraft.world.level.storage.loot.functions.FillPlayerHead$Serializer -> cte$a:
    54:55:void <init>() -> <init>
    59:61:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.FillPlayerHead,com.google.gson.JsonSerializationContext) -> a
    65:66:net.minecraft.world.level.storage.loot.functions.FillPlayerHead deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    52:52:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    52:52:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    52:52:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.FunctionUserBuilder -> ctf:
    java.lang.Object apply(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder) -> b
    java.lang.Object unwrap() -> c
net.minecraft.world.level.storage.loot.functions.LimitCount -> ctg:
    net.minecraft.world.level.storage.loot.IntLimiter limiter -> a
    17:19:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.IntLimiter) -> <init>
    23:25:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    29:29:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder limitCount(net.minecraft.world.level.storage.loot.IntLimiter) -> a
    29:29:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$limitCount$0(net.minecraft.world.level.storage.loot.IntLimiter,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    13:13:net.minecraft.world.level.storage.loot.IntLimiter access$000(net.minecraft.world.level.storage.loot.functions.LimitCount) -> a
    13:13:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.IntLimiter,net.minecraft.world.level.storage.loot.functions.LimitCount$1) -> <init>
net.minecraft.world.level.storage.loot.functions.LimitCount$1 -> ctg$1:
net.minecraft.world.level.storage.loot.functions.LimitCount$Serializer -> ctg$a:
    34:35:void <init>() -> <init>
    39:42:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LimitCount,com.google.gson.JsonSerializationContext) -> a
    46:47:net.minecraft.world.level.storage.loot.functions.LimitCount deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    32:32:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    32:32:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    32:32:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction -> cth:
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] predicates -> b
    java.util.function.Predicate compositePredicates -> a
    25:28:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> <init>
    32:32:net.minecraft.world.item.ItemStack apply(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> b
    net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    39:44:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    86:86:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder simpleBuilder(java.util.function.Function) -> a
    21:21:java.lang.Object apply(java.lang.Object,java.lang.Object) -> apply
net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder -> cth$a:
    java.util.List conditions -> a
    46:47:void <init>() -> <init>
    51:52:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    57:57:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder unwrap() -> f
    net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
    63:63:net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] getConditions() -> g
    46:46:java.lang.Object unwrap() -> c
    46:46:java.lang.Object when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> b
net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$DummyBuilder -> cth$b:
    java.util.function.Function constructor -> a
    70:72:void <init>(java.util.function.Function) -> <init>
    76:76:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$DummyBuilder getThis() -> a
    81:81:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    67:67:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Serializer -> cth$c:
    91:92:void <init>(net.minecraft.resources.ResourceLocation,java.lang.Class) -> <init>
    96:99:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    103:104:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    89:89:net.minecraft.world.level.storage.loot.functions.LootItemFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    89:89:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.LootItemFunction -> cti:
    16:16:java.util.function.Consumer decorate(java.util.function.BiFunction,java.util.function.Consumer,net.minecraft.world.level.storage.loot.LootContext) -> a
    16:16:void lambda$decorate$0(java.util.function.Consumer,java.util.function.BiFunction,net.minecraft.world.level.storage.loot.LootContext,net.minecraft.world.item.ItemStack) -> a
net.minecraft.world.level.storage.loot.functions.LootItemFunction$Builder -> cti$a:
    net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
net.minecraft.world.level.storage.loot.functions.LootItemFunction$Serializer -> cti$b:
    net.minecraft.resources.ResourceLocation name -> a
    java.lang.Class clazz -> b
    27:30:void <init>(net.minecraft.resources.ResourceLocation,java.lang.Class) -> <init>
    33:33:net.minecraft.resources.ResourceLocation getName() -> a
    37:37:java.lang.Class getFunctionClass() -> b
    void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
    net.minecraft.world.level.storage.loot.functions.LootItemFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
net.minecraft.world.level.storage.loot.functions.LootItemFunctions -> ctj:
    java.util.Map FUNCTIONS_BY_NAME -> b
    java.util.Map FUNCTIONS_BY_CLASS -> c
    java.util.function.BiFunction IDENTITY -> a
    21:21:void <init>() -> <init>
    52:62:void register(net.minecraft.world.level.storage.loot.functions.LootItemFunction$Serializer) -> a
    65:69:net.minecraft.world.level.storage.loot.functions.LootItemFunction$Serializer getSerializer(net.minecraft.resources.ResourceLocation) -> a
    74:78:net.minecraft.world.level.storage.loot.functions.LootItemFunction$Serializer getSerializer(net.minecraft.world.level.storage.loot.functions.LootItemFunction) -> a
    107:118:java.util.function.BiFunction compose(java.util.function.BiFunction[]) -> a
    119:122:net.minecraft.world.item.ItemStack lambda$compose$2(java.util.function.BiFunction[],net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    115:115:net.minecraft.world.item.ItemStack lambda$compose$1(java.util.function.BiFunction,java.util.function.BiFunction,net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    24:24:net.minecraft.world.item.ItemStack lambda$static$0(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    22:48:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.LootItemFunctions$Serializer -> ctj$a:
    81:81:void <init>() -> <init>
    84:93:net.minecraft.world.level.storage.loot.functions.LootItemFunction deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    98:102:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.functions.LootItemFunction,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    81:81:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    81:81:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction -> ctk:
    net.minecraft.world.level.storage.loot.RandomValueBounds value -> a
    int limit -> c
    27:30:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.RandomValueBounds,int) -> <init>
    34:34:java.util.Set getReferencedContextParams() -> a
    38:38:boolean hasLimit() -> b
    43:58:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    86:86:net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Builder lootingMultiplier(net.minecraft.world.level.storage.loot.RandomValueBounds) -> a
    21:21:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.RandomValueBounds,int,net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$1) -> <init>
    21:21:net.minecraft.world.level.storage.loot.RandomValueBounds access$100(net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction) -> a
    21:21:boolean access$200(net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction) -> b
    21:21:int access$300(net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction) -> c
net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$1 -> ctk$1:
net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Builder -> ctk$a:
    net.minecraft.world.level.storage.loot.RandomValueBounds count -> a
    int limit -> b
    63:67:void <init>(net.minecraft.world.level.storage.loot.RandomValueBounds) -> <init>
    71:71:net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Builder getThis() -> a
    75:76:net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Builder setLimit(int) -> a
    81:81:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    61:61:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction$Serializer -> ctk$b:
    91:92:void <init>() -> <init>
    96:102:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction,com.google.gson.JsonSerializationContext) -> a
    106:107:net.minecraft.world.level.storage.loot.functions.LootingEnchantFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    89:89:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    89:89:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    89:89:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction -> ctl:
    java.util.List modifiers -> a
    32:34:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],java.util.List) -> <init>
    38:47:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    102:102:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder modifier(java.lang.String,java.lang.String,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation,net.minecraft.world.level.storage.loot.RandomValueBounds) -> a
    106:106:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Builder setAttributes() -> b
    28:28:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],java.util.List,net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$1) -> <init>
    28:28:java.util.List access$800(net.minecraft.world.level.storage.loot.functions.SetAttributesFunction) -> a
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$1 -> ctl$1:
    int[] $SwitchMap$net$minecraft$world$entity$ai$attributes$AttributeModifier$Operation -> a
    217:217:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Builder -> ctl$a:
    java.util.List modifiers -> a
    82:83:void <init>() -> <init>
    87:87:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Builder getThis() -> a
    91:92:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Builder withModifier(net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder) -> a
    97:97:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    82:82:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier -> ctl$b:
    java.lang.String name -> a
    java.lang.String attribute -> b
    net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation operation -> c
    net.minecraft.world.level.storage.loot.RandomValueBounds amount -> d
    java.util.UUID id -> e
    net.minecraft.world.entity.EquipmentSlot[] slots -> f
    150:157:void <init>(java.lang.String,java.lang.String,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation,net.minecraft.world.level.storage.loot.RandomValueBounds,net.minecraft.world.entity.EquipmentSlot[],java.util.UUID) -> <init>
    160:177:com.google.gson.JsonObject serialize(com.google.gson.JsonSerializationContext) -> a
    181:213:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    217:225:java.lang.String operationToString(net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation) -> a
    229:237:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation operationFromString(java.lang.String) -> a
    141:141:java.util.UUID access$000(net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier) -> a
    141:141:net.minecraft.world.entity.EquipmentSlot[] access$100(net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier) -> b
    141:141:java.lang.String access$200(net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier) -> c
    141:141:java.lang.String access$300(net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier) -> d
    141:141:net.minecraft.world.level.storage.loot.RandomValueBounds access$400(net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier) -> e
    141:141:net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation access$500(net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier) -> f
    141:141:void <init>(java.lang.String,java.lang.String,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation,net.minecraft.world.level.storage.loot.RandomValueBounds,net.minecraft.world.entity.EquipmentSlot[],java.util.UUID,net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$1) -> <init>
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder -> ctl$c:
    java.lang.String name -> a
    java.lang.String attribute -> b
    net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation operation -> c
    net.minecraft.world.level.storage.loot.RandomValueBounds amount -> d
    java.util.UUID id -> e
    java.util.Set slots -> f
    58:65:void <init>(java.lang.String,java.lang.String,net.minecraft.world.entity.ai.attributes.AttributeModifier$Operation,net.minecraft.world.level.storage.loot.RandomValueBounds) -> <init>
    68:69:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder forSlot(net.minecraft.world.entity.EquipmentSlot) -> a
    73:74:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$ModifierBuilder withUuid(java.util.UUID) -> a
    78:78:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Modifier build() -> a
net.minecraft.world.level.storage.loot.functions.SetAttributesFunction$Serializer -> ctl$d:
    111:112:void <init>() -> <init>
    116:123:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetAttributesFunction,com.google.gson.JsonSerializationContext) -> a
    127:137:net.minecraft.world.level.storage.loot.functions.SetAttributesFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    109:109:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    109:109:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    109:109:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetContainerContents -> ctm:
    java.util.List entries -> a
    28:30:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],java.util.List) -> <init>
    34:45:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    50:55:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    77:77:net.minecraft.world.level.storage.loot.functions.SetContainerContents$Builder setContents() -> b
    39:39:void lambda$run$1(net.minecraft.world.level.storage.loot.LootContext,net.minecraft.core.NonNullList,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer) -> a
    39:39:void lambda$null$0(net.minecraft.core.NonNullList,net.minecraft.world.level.storage.loot.LootContext,net.minecraft.world.level.storage.loot.entries.LootPoolEntry) -> a
    24:24:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],java.util.List,net.minecraft.world.level.storage.loot.functions.SetContainerContents$1) -> <init>
    24:24:java.util.List access$100(net.minecraft.world.level.storage.loot.functions.SetContainerContents) -> a
net.minecraft.world.level.storage.loot.functions.SetContainerContents$1 -> ctm$1:
net.minecraft.world.level.storage.loot.functions.SetContainerContents$Builder -> ctm$a:
    java.util.List entries -> a
    57:58:void <init>() -> <init>
    62:62:net.minecraft.world.level.storage.loot.functions.SetContainerContents$Builder getThis() -> a
    66:67:net.minecraft.world.level.storage.loot.functions.SetContainerContents$Builder withEntry(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer$Builder) -> a
    72:72:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    57:57:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
net.minecraft.world.level.storage.loot.functions.SetContainerContents$Serializer -> ctm$b:
    82:83:void <init>() -> <init>
    87:90:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetContainerContents,com.google.gson.JsonSerializationContext) -> a
    94:95:net.minecraft.world.level.storage.loot.functions.SetContainerContents deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    80:80:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    80:80:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    80:80:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetContainerLootTable -> ctn:
    net.minecraft.resources.ResourceLocation name -> a
    long seed -> c
    22:25:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.resources.ResourceLocation,long) -> <init>
    29:39:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    44:57:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    60:60:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder withLootTable(net.minecraft.resources.ResourceLocation) -> a
    64:64:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder withLootTable(net.minecraft.resources.ResourceLocation,long) -> a
    64:64:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$withLootTable$1(net.minecraft.resources.ResourceLocation,long,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    60:60:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$withLootTable$0(net.minecraft.resources.ResourceLocation,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    17:17:net.minecraft.resources.ResourceLocation access$000(net.minecraft.world.level.storage.loot.functions.SetContainerLootTable) -> a
    17:17:long access$100(net.minecraft.world.level.storage.loot.functions.SetContainerLootTable) -> b
    17:17:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.resources.ResourceLocation,long,net.minecraft.world.level.storage.loot.functions.SetContainerLootTable$1) -> <init>
net.minecraft.world.level.storage.loot.functions.SetContainerLootTable$1 -> ctn$1:
net.minecraft.world.level.storage.loot.functions.SetContainerLootTable$Serializer -> ctn$a:
    69:70:void <init>() -> <init>
    74:80:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetContainerLootTable,com.google.gson.JsonSerializationContext) -> a
    84:86:net.minecraft.world.level.storage.loot.functions.SetContainerLootTable deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    67:67:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    67:67:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    67:67:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetItemCountFunction -> cto:
    net.minecraft.world.level.storage.loot.RandomIntGenerator value -> a
    17:19:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.RandomIntGenerator) -> <init>
    23:24:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    28:28:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setCount(net.minecraft.world.level.storage.loot.RandomIntGenerator) -> a
    28:28:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$setCount$0(net.minecraft.world.level.storage.loot.RandomIntGenerator,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    13:13:net.minecraft.world.level.storage.loot.RandomIntGenerator access$000(net.minecraft.world.level.storage.loot.functions.SetItemCountFunction) -> a
    13:13:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.RandomIntGenerator,net.minecraft.world.level.storage.loot.functions.SetItemCountFunction$1) -> <init>
net.minecraft.world.level.storage.loot.functions.SetItemCountFunction$1 -> cto$1:
net.minecraft.world.level.storage.loot.functions.SetItemCountFunction$Serializer -> cto$a:
    33:34:void <init>() -> <init>
    38:41:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetItemCountFunction,com.google.gson.JsonSerializationContext) -> a
    45:46:net.minecraft.world.level.storage.loot.functions.SetItemCountFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    31:31:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    31:31:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    31:31:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction -> ctp:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.level.storage.loot.RandomValueBounds damage -> c
    22:24:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.RandomValueBounds) -> <init>
    28:34:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    38:38:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setDamage(net.minecraft.world.level.storage.loot.RandomValueBounds) -> a
    38:38:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$setDamage$0(net.minecraft.world.level.storage.loot.RandomValueBounds,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    16:16:net.minecraft.world.level.storage.loot.RandomValueBounds access$000(net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction) -> a
    16:16:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.RandomValueBounds,net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction$1) -> <init>
    17:17:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction$1 -> ctp$1:
net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction$Serializer -> ctp$a:
    43:44:void <init>() -> <init>
    48:51:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction,com.google.gson.JsonSerializationContext) -> a
    55:55:net.minecraft.world.level.storage.loot.functions.SetItemDamageFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    41:41:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    41:41:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    41:41:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetLoreFunction -> ctq:
    boolean replace -> a
    java.util.List lore -> c
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget resolutionContext -> d
    37:41:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],boolean,java.util.List,net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> <init>
    45:45:java.util.Set getReferencedContextParams() -> a
    50:61:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    67:94:net.minecraft.nbt.ListTag getLoreTag(net.minecraft.world.item.ItemStack,boolean) -> a
    130:130:net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder setLore() -> b
    28:28:boolean access$000(net.minecraft.world.level.storage.loot.functions.SetLoreFunction) -> a
    28:28:java.util.List access$100(net.minecraft.world.level.storage.loot.functions.SetLoreFunction) -> b
    28:28:net.minecraft.world.level.storage.loot.LootContext$EntityTarget access$200(net.minecraft.world.level.storage.loot.functions.SetLoreFunction) -> c
net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder -> ctq$a:
    boolean replace -> a
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget resolutionContext -> b
    java.util.List lore -> c
    98:101:void <init>() -> <init>
    104:105:net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder setReplace(boolean) -> a
    109:110:net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder setResolutionContext(net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> a
    114:115:net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder addLine(net.minecraft.network.chat.Component) -> a
    120:120:net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Builder getThis() -> a
    125:125:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    98:98:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
net.minecraft.world.level.storage.loot.functions.SetLoreFunction$Serializer -> ctq$b:
    135:136:void <init>() -> <init>
    140:153:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetLoreFunction,com.google.gson.JsonSerializationContext) -> a
    157:160:net.minecraft.world.level.storage.loot.functions.SetLoreFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    133:133:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    133:133:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    133:133:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetNameFunction -> ctr:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.network.chat.Component name -> c
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget resolutionContext -> d
    35:38:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.network.chat.Component,net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> <init>
    42:42:java.util.Set getReferencedContextParams() -> a
    46:62:java.util.function.UnaryOperator createResolver(net.minecraft.world.level.storage.loot.LootContext,net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> a
    67:70:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    74:74:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setName(net.minecraft.network.chat.Component) -> a
    78:78:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setName(net.minecraft.network.chat.Component,net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> a
    78:78:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$setName$3(net.minecraft.network.chat.Component,net.minecraft.world.level.storage.loot.LootContext$EntityTarget,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    74:74:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$setName$2(net.minecraft.network.chat.Component,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    62:62:net.minecraft.network.chat.Component lambda$createResolver$1(net.minecraft.network.chat.Component) -> b
    54:57:net.minecraft.network.chat.Component lambda$createResolver$0(net.minecraft.commands.CommandSourceStack,net.minecraft.world.entity.Entity,net.minecraft.network.chat.Component) -> a
    26:26:net.minecraft.network.chat.Component access$000(net.minecraft.world.level.storage.loot.functions.SetNameFunction) -> a
    26:26:net.minecraft.world.level.storage.loot.LootContext$EntityTarget access$100(net.minecraft.world.level.storage.loot.functions.SetNameFunction) -> b
    26:26:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.network.chat.Component,net.minecraft.world.level.storage.loot.LootContext$EntityTarget,net.minecraft.world.level.storage.loot.functions.SetNameFunction$1) -> <init>
    27:27:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.SetNameFunction$1 -> ctr$1:
net.minecraft.world.level.storage.loot.functions.SetNameFunction$Serializer -> ctr$a:
    83:84:void <init>() -> <init>
    88:97:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetNameFunction,com.google.gson.JsonSerializationContext) -> a
    101:103:net.minecraft.world.level.storage.loot.functions.SetNameFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    81:81:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    81:81:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    81:81:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetNbtFunction -> cts:
    net.minecraft.nbt.CompoundTag tag -> a
    20:22:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.nbt.CompoundTag) -> <init>
    26:27:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    31:31:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder setTag(net.minecraft.nbt.CompoundTag) -> a
    31:31:net.minecraft.world.level.storage.loot.functions.LootItemFunction lambda$setTag$0(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    16:16:net.minecraft.nbt.CompoundTag access$000(net.minecraft.world.level.storage.loot.functions.SetNbtFunction) -> a
    16:16:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.nbt.CompoundTag,net.minecraft.world.level.storage.loot.functions.SetNbtFunction$1) -> <init>
net.minecraft.world.level.storage.loot.functions.SetNbtFunction$1 -> cts$1:
net.minecraft.world.level.storage.loot.functions.SetNbtFunction$Serializer -> cts$a:
    36:37:void <init>() -> <init>
    41:44:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetNbtFunction,com.google.gson.JsonSerializationContext) -> a
    49:52:net.minecraft.world.level.storage.loot.functions.SetNbtFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    34:34:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    34:34:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    34:34:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction -> ctt:
    java.util.Map effectDurationMap -> a
    32:34:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],java.util.Map) -> <init>
    38:53:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    76:76:net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Builder stewEffect() -> b
    28:28:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],java.util.Map,net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$1) -> <init>
    28:28:java.util.Map access$100(net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction) -> a
net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$1 -> ctt$1:
net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Builder -> ctt$a:
    java.util.Map effectDurationMap -> a
    56:57:void <init>() -> <init>
    61:61:net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Builder getThis() -> a
    65:66:net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Builder withEffect(net.minecraft.world.effect.MobEffect,net.minecraft.world.level.storage.loot.RandomValueBounds) -> a
    71:71:net.minecraft.world.level.storage.loot.functions.LootItemFunction build() -> b
    56:56:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder getThis() -> d
net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction$Serializer -> ctt$b:
    81:82:void <init>() -> <init>
    86:102:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction,com.google.gson.JsonSerializationContext) -> a
    106:118:net.minecraft.world.level.storage.loot.functions.SetStewEffectFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    79:79:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
    79:79:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction,com.google.gson.JsonSerializationContext) -> a
    79:79:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.functions.LootItemFunction,com.google.gson.JsonSerializationContext) -> a
    112:112:com.google.gson.JsonSyntaxException lambda$deserialize$0(java.lang.String) -> a
net.minecraft.world.level.storage.loot.functions.SmeltItemFunction -> ctu:
    org.apache.logging.log4j.Logger LOGGER -> a
    21:22:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> <init>
    26:42:net.minecraft.world.item.ItemStack run(net.minecraft.world.item.ItemStack,net.minecraft.world.level.storage.loot.LootContext) -> a
    46:46:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction$Builder smelted() -> b
    17:17:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.functions.SmeltItemFunction$1) -> <init>
    18:18:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.functions.SmeltItemFunction$1 -> ctu$1:
net.minecraft.world.level.storage.loot.functions.SmeltItemFunction$Serializer -> ctu$a:
    51:52:void <init>() -> <init>
    56:56:net.minecraft.world.level.storage.loot.functions.SmeltItemFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> a
    49:49:net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext,net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> b
net.minecraft.world.level.storage.loot.functions.package-info -> ctv:
net.minecraft.world.level.storage.loot.package-info -> ctw:
net.minecraft.world.level.storage.loot.parameters.LootContextParam -> ctx:
    net.minecraft.resources.ResourceLocation name -> a
    8:10:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    13:13:net.minecraft.resources.ResourceLocation getName() -> a
    18:18:java.lang.String toString() -> toString
net.minecraft.world.level.storage.loot.parameters.LootContextParamSet -> cty:
    java.util.Set required -> a
    java.util.Set all -> b
    16:19:void <init>(java.util.Set,java.util.Set) -> <init>
    22:22:boolean isAllowed(net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> a
    26:26:java.util.Set getRequired() -> a
    30:30:java.util.Set getAllowed() -> b
    35:35:java.lang.String toString() -> toString
    39:44:void validateUser(net.minecraft.world.level.storage.loot.ValidationContext,net.minecraft.world.level.storage.loot.LootContextUser) -> a
    47:47:net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder builder() -> c
    35:35:java.lang.String lambda$toString$0(net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> b
    11:11:void <init>(java.util.Set,java.util.Set,net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$1) -> <init>
net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$1 -> cty$1:
net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder -> cty$a:
    java.util.Set required -> a
    java.util.Set optional -> b
    50:52:void <init>() -> <init>
    55:59:net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder required(net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> a
    63:67:net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder optional(net.minecraft.world.level.storage.loot.parameters.LootContextParam) -> b
    71:71:net.minecraft.world.level.storage.loot.parameters.LootContextParamSet build() -> a
net.minecraft.world.level.storage.loot.parameters.LootContextParamSets -> ctz:
    com.google.common.collect.BiMap REGISTRY -> k
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet EMPTY -> a
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet CHEST -> b
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet COMMAND -> c
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet SELECTOR -> d
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet FISHING -> e
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet ENTITY -> f
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet GIFT -> g
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet ADVANCEMENT_REWARD -> h
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet ALL_PARAMS -> i
    net.minecraft.world.level.storage.loot.parameters.LootContextParamSet BLOCK -> j
    10:10:void <init>() -> <init>
    77:85:net.minecraft.world.level.storage.loot.parameters.LootContextParamSet register(java.lang.String,java.util.function.Consumer) -> a
    90:90:net.minecraft.world.level.storage.loot.parameters.LootContextParamSet get(net.minecraft.resources.ResourceLocation) -> a
    95:95:net.minecraft.resources.ResourceLocation getKey(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet) -> a
    67:73:void lambda$static$9(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder) -> a
    54:64:void lambda$static$8(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder) -> b
    49:51:void lambda$static$7(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder) -> c
    44:46:void lambda$static$6(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder) -> d
    35:41:void lambda$static$5(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder) -> e
    30:32:void lambda$static$4(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder) -> f
    25:27:void lambda$static$3(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder) -> g
    20:22:void lambda$static$2(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder) -> h
    15:17:void lambda$static$1(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder) -> i
    13:13:void lambda$static$0(net.minecraft.world.level.storage.loot.parameters.LootContextParamSet$Builder) -> j
    11:67:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.parameters.LootContextParams -> cua:
    net.minecraft.world.level.storage.loot.parameters.LootContextParam THIS_ENTITY -> a
    net.minecraft.world.level.storage.loot.parameters.LootContextParam LAST_DAMAGE_PLAYER -> b
    net.minecraft.world.level.storage.loot.parameters.LootContextParam DAMAGE_SOURCE -> c
    net.minecraft.world.level.storage.loot.parameters.LootContextParam KILLER_ENTITY -> d
    net.minecraft.world.level.storage.loot.parameters.LootContextParam DIRECT_KILLER_ENTITY -> e
    net.minecraft.world.level.storage.loot.parameters.LootContextParam BLOCK_POS -> f
    net.minecraft.world.level.storage.loot.parameters.LootContextParam BLOCK_STATE -> g
    net.minecraft.world.level.storage.loot.parameters.LootContextParam BLOCK_ENTITY -> h
    net.minecraft.world.level.storage.loot.parameters.LootContextParam TOOL -> i
    net.minecraft.world.level.storage.loot.parameters.LootContextParam EXPLOSION_RADIUS -> j
    12:12:void <init>() -> <init>
    34:34:net.minecraft.world.level.storage.loot.parameters.LootContextParam create(java.lang.String) -> a
    13:31:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.parameters.package-info -> cub:
net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition -> cuc:
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] terms -> a
    java.util.function.Predicate composedPredicate -> b
    20:23:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[]) -> <init>
    27:27:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    32:37:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    61:61:net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$Builder alternative(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder[]) -> a
    15:15:boolean test(java.lang.Object) -> test
    15:15:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition[],net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$1) -> <init>
    15:15:net.minecraft.world.level.storage.loot.predicates.LootItemCondition[] access$100(net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition) -> a
net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$1 -> cuc$1:
net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$Builder -> cuc$a:
    java.util.List terms -> a
    40:46:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder[]) -> <init>
    50:51:net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$Builder or(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    56:56:net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$Serializer -> cuc$b:
    66:67:void <init>() -> <init>
    71:72:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition,com.google.gson.JsonSerializationContext) -> a
    76:77:net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    64:64:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    64:64:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.BonusLevelTableCondition -> cud:
    net.minecraft.world.item.enchantment.Enchantment enchantment -> a
    float[] values -> b
    25:28:void <init>(net.minecraft.world.item.enchantment.Enchantment,float[]) -> <init>
    32:32:java.util.Set getReferencedContextParams() -> a
    37:41:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    45:45:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder bonusLevelFlatChance(net.minecraft.world.item.enchantment.Enchantment,float[]) -> a
    20:20:boolean test(java.lang.Object) -> test
    45:45:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$bonusLevelFlatChance$0(net.minecraft.world.item.enchantment.Enchantment,float[]) -> b
    20:20:net.minecraft.world.item.enchantment.Enchantment access$000(net.minecraft.world.level.storage.loot.predicates.BonusLevelTableCondition) -> a
    20:20:float[] access$100(net.minecraft.world.level.storage.loot.predicates.BonusLevelTableCondition) -> b
    20:20:void <init>(net.minecraft.world.item.enchantment.Enchantment,float[],net.minecraft.world.level.storage.loot.predicates.BonusLevelTableCondition$1) -> <init>
net.minecraft.world.level.storage.loot.predicates.BonusLevelTableCondition$1 -> cud$1:
net.minecraft.world.level.storage.loot.predicates.BonusLevelTableCondition$Serializer -> cud$a:
    50:51:void <init>() -> <init>
    55:57:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.BonusLevelTableCondition,com.google.gson.JsonSerializationContext) -> a
    61:65:net.minecraft.world.level.storage.loot.predicates.BonusLevelTableCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    48:48:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    48:48:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
    63:63:com.google.gson.JsonParseException lambda$deserialize$0(net.minecraft.resources.ResourceLocation) -> a
net.minecraft.world.level.storage.loot.predicates.ConditionReference -> cue:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.resources.ResourceLocation name -> b
    18:20:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    24:37:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    41:50:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    55:55:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder conditionReference(net.minecraft.resources.ResourceLocation) -> a
    13:13:boolean test(java.lang.Object) -> test
    55:55:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$conditionReference$0(net.minecraft.resources.ResourceLocation) -> b
    13:13:net.minecraft.resources.ResourceLocation access$000(net.minecraft.world.level.storage.loot.predicates.ConditionReference) -> a
    14:14:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.predicates.ConditionReference$Serializer -> cue$a:
    60:61:void <init>() -> <init>
    65:66:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.ConditionReference,com.google.gson.JsonSerializationContext) -> a
    70:71:net.minecraft.world.level.storage.loot.predicates.ConditionReference deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    58:58:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    58:58:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.ConditionUserBuilder -> cuf:
    java.lang.Object when(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> b
    java.lang.Object unwrap() -> c
net.minecraft.world.level.storage.loot.predicates.DamageSourceCondition -> cug:
    net.minecraft.advancements.critereon.DamageSourcePredicate predicate -> a
    21:23:void <init>(net.minecraft.advancements.critereon.DamageSourcePredicate) -> <init>
    27:27:java.util.Set getReferencedContextParams() -> a
    32:35:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    39:39:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder hasDamageSource(net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> a
    18:18:boolean test(java.lang.Object) -> test
    39:39:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$hasDamageSource$0(net.minecraft.advancements.critereon.DamageSourcePredicate$Builder) -> b
    18:18:net.minecraft.advancements.critereon.DamageSourcePredicate access$000(net.minecraft.world.level.storage.loot.predicates.DamageSourceCondition) -> a
    18:18:void <init>(net.minecraft.advancements.critereon.DamageSourcePredicate,net.minecraft.world.level.storage.loot.predicates.DamageSourceCondition$1) -> <init>
net.minecraft.world.level.storage.loot.predicates.DamageSourceCondition$1 -> cug$1:
net.minecraft.world.level.storage.loot.predicates.DamageSourceCondition$Serializer -> cug$a:
    44:45:void <init>() -> <init>
    49:50:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.DamageSourceCondition,com.google.gson.JsonSerializationContext) -> a
    54:55:net.minecraft.world.level.storage.loot.predicates.DamageSourceCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    42:42:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    42:42:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition -> cuh:
    java.util.Map scores -> a
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget entityTarget -> b
    26:29:void <init>(java.util.Map,net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> <init>
    33:33:java.util.Set getReferencedContextParams() -> a
    38:50:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    54:62:boolean hasScore(net.minecraft.world.entity.Entity,net.minecraft.world.scores.Scoreboard,java.lang.String,net.minecraft.world.level.storage.loot.RandomValueBounds) -> a
    85:85:net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$Builder hasScores(net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> a
    22:22:boolean test(java.lang.Object) -> test
    22:22:void <init>(java.util.Map,net.minecraft.world.level.storage.loot.LootContext$EntityTarget,net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$1) -> <init>
    22:22:java.util.Map access$100(net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition) -> a
    22:22:net.minecraft.world.level.storage.loot.LootContext$EntityTarget access$200(net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition) -> b
net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$1 -> cuh$1:
net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$Builder -> cuh$a:
    java.util.Map scores -> a
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget entityTarget -> b
    66:71:void <init>(net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> <init>
    74:75:net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$Builder withScore(java.lang.String,net.minecraft.world.level.storage.loot.RandomValueBounds) -> a
    80:80:net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition$Serializer -> cuh$b:
    90:91:void <init>() -> <init>
    95:101:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition,com.google.gson.JsonSerializationContext) -> a
    105:110:net.minecraft.world.level.storage.loot.predicates.EntityHasScoreCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    88:88:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    88:88:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.ExplosionCondition -> cui:
    net.minecraft.world.level.storage.loot.predicates.ExplosionCondition INSTANCE -> a
    18:19:void <init>() -> <init>
    23:23:java.util.Set getReferencedContextParams() -> a
    28:35:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    39:39:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder survivesExplosion() -> b
    15:15:boolean test(java.lang.Object) -> test
    39:39:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$survivesExplosion$0() -> d
    15:15:net.minecraft.world.level.storage.loot.predicates.ExplosionCondition access$000() -> c
    16:16:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.predicates.ExplosionCondition$Serializer -> cui$a:
    44:45:void <init>() -> <init>
    49:49:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.ExplosionCondition,com.google.gson.JsonSerializationContext) -> a
    53:53:net.minecraft.world.level.storage.loot.predicates.ExplosionCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    42:42:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    42:42:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.InvertedLootItemCondition -> cuj:
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition term -> a
    17:19:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition) -> <init>
    23:23:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    28:28:java.util.Set getReferencedContextParams() -> a
    33:35:void validate(net.minecraft.world.level.storage.loot.ValidationContext) -> a
    38:39:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder invert(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
    14:14:boolean test(java.lang.Object) -> test
    39:39:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$invert$0(net.minecraft.world.level.storage.loot.predicates.InvertedLootItemCondition) -> b
    14:14:net.minecraft.world.level.storage.loot.predicates.LootItemCondition access$000(net.minecraft.world.level.storage.loot.predicates.InvertedLootItemCondition) -> a
    14:14:void <init>(net.minecraft.world.level.storage.loot.predicates.LootItemCondition,net.minecraft.world.level.storage.loot.predicates.InvertedLootItemCondition$1) -> <init>
net.minecraft.world.level.storage.loot.predicates.InvertedLootItemCondition$1 -> cuj$1:
net.minecraft.world.level.storage.loot.predicates.InvertedLootItemCondition$Serializer -> cuj$a:
    44:45:void <init>() -> <init>
    49:50:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.InvertedLootItemCondition,com.google.gson.JsonSerializationContext) -> a
    54:55:net.minecraft.world.level.storage.loot.predicates.InvertedLootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    42:42:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    42:42:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LocationCheck -> cuk:
    net.minecraft.advancements.critereon.LocationPredicate predicate -> a
    net.minecraft.core.BlockPos offset -> b
    18:21:void <init>(net.minecraft.advancements.critereon.LocationPredicate,net.minecraft.core.BlockPos) -> <init>
    25:26:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    30:30:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder checkLocation(net.minecraft.advancements.critereon.LocationPredicate$Builder) -> a
    34:34:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder checkLocation(net.minecraft.advancements.critereon.LocationPredicate$Builder,net.minecraft.core.BlockPos) -> a
    13:13:boolean test(java.lang.Object) -> test
    34:34:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$checkLocation$1(net.minecraft.advancements.critereon.LocationPredicate$Builder,net.minecraft.core.BlockPos) -> b
    30:30:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$checkLocation$0(net.minecraft.advancements.critereon.LocationPredicate$Builder) -> b
    13:13:net.minecraft.advancements.critereon.LocationPredicate access$000(net.minecraft.world.level.storage.loot.predicates.LocationCheck) -> a
    13:13:net.minecraft.core.BlockPos access$100(net.minecraft.world.level.storage.loot.predicates.LocationCheck) -> b
net.minecraft.world.level.storage.loot.predicates.LocationCheck$Serializer -> cuk$a:
    39:40:void <init>() -> <init>
    44:54:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LocationCheck,com.google.gson.JsonSerializationContext) -> a
    58:62:net.minecraft.world.level.storage.loot.predicates.LocationCheck deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    37:37:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    37:37:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition -> cul:
    net.minecraft.world.level.block.Block block -> a
    net.minecraft.advancements.critereon.StatePropertiesPredicate properties -> b
    25:28:void <init>(net.minecraft.world.level.block.Block,net.minecraft.advancements.critereon.StatePropertiesPredicate) -> <init>
    32:32:java.util.Set getReferencedContextParams() -> a
    37:38:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    61:61:net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition$Builder hasBlockStateProperties(net.minecraft.world.level.block.Block) -> a
    21:21:boolean test(java.lang.Object) -> test
    21:21:void <init>(net.minecraft.world.level.block.Block,net.minecraft.advancements.critereon.StatePropertiesPredicate,net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition$1) -> <init>
    21:21:net.minecraft.world.level.block.Block access$100(net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition) -> a
    21:21:net.minecraft.advancements.critereon.StatePropertiesPredicate access$200(net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition) -> b
net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition$1 -> cul$1:
net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition$Builder -> cul$a:
    net.minecraft.world.level.block.Block block -> a
    net.minecraft.advancements.critereon.StatePropertiesPredicate properties -> b
    43:47:void <init>(net.minecraft.world.level.block.Block) -> <init>
    50:51:net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition$Builder setProperties(net.minecraft.advancements.critereon.StatePropertiesPredicate$Builder) -> a
    56:56:net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition$Serializer -> cul$b:
    67:67:java.lang.String valueToString(net.minecraft.world.level.block.state.properties.Property,java.lang.Object) -> a
    71:72:void <init>() -> <init>
    76:78:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition,com.google.gson.JsonSerializationContext) -> a
    82:90:net.minecraft.world.level.storage.loot.predicates.LootItemBlockStatePropertyCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    64:64:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    64:64:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
    87:87:void lambda$deserialize$1(net.minecraft.world.level.block.Block,java.lang.String) -> a
    84:84:java.lang.IllegalArgumentException lambda$deserialize$0(net.minecraft.resources.ResourceLocation) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemCondition -> cum:
net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder -> cum$a:
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
    19:19:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder invert() -> a
    23:23:net.minecraft.world.level.storage.loot.predicates.AlternativeLootItemCondition$Builder or(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Serializer -> cum$b:
    net.minecraft.resources.ResourceLocation name -> a
    java.lang.Class clazz -> b
    31:34:void <init>(net.minecraft.resources.ResourceLocation,java.lang.Class) -> <init>
    37:37:net.minecraft.resources.ResourceLocation getName() -> a
    41:41:java.lang.Class getPredicateClass() -> b
    void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
    net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
net.minecraft.world.level.storage.loot.predicates.LootItemConditions -> cun:
    java.util.Map CONDITIONS_BY_NAME -> a
    java.util.Map CONDITIONS_BY_CLASS -> b
    19:19:void <init>() -> <init>
    44:54:void register(net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Serializer) -> a
    57:61:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Serializer getSerializer(net.minecraft.resources.ResourceLocation) -> a
    66:70:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Serializer getSerializer(net.minecraft.world.level.storage.loot.predicates.LootItemCondition) -> a
    99:107:java.util.function.Predicate andConditions(java.util.function.Predicate[]) -> a
    119:128:java.util.function.Predicate orConditions(java.util.function.Predicate[]) -> b
    129:134:boolean lambda$orConditions$3(java.util.function.Predicate[],java.lang.Object) -> a
    121:121:boolean lambda$orConditions$2(java.lang.Object) -> a
    108:113:boolean lambda$andConditions$1(java.util.function.Predicate[],java.lang.Object) -> b
    101:101:boolean lambda$andConditions$0(java.lang.Object) -> b
    20:40:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.predicates.LootItemConditions$Serializer -> cun$a:
    73:73:void <init>() -> <init>
    76:85:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    90:94:com.google.gson.JsonElement serialize(net.minecraft.world.level.storage.loot.predicates.LootItemCondition,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    73:73:com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> serialize
    73:73:java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> deserialize
net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition -> cuo:
    net.minecraft.advancements.critereon.EntityPredicate predicate -> a
    net.minecraft.world.level.storage.loot.LootContext$EntityTarget entityTarget -> b
    23:26:void <init>(net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> <init>
    30:30:java.util.Set getReferencedContextParams() -> a
    35:37:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    41:41:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder entityPresent(net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> a
    45:45:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder hasProperties(net.minecraft.world.level.storage.loot.LootContext$EntityTarget,net.minecraft.advancements.critereon.EntityPredicate$Builder) -> a
    19:19:boolean test(java.lang.Object) -> test
    45:45:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$hasProperties$0(net.minecraft.advancements.critereon.EntityPredicate$Builder,net.minecraft.world.level.storage.loot.LootContext$EntityTarget) -> a
    19:19:net.minecraft.advancements.critereon.EntityPredicate access$000(net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition) -> a
    19:19:net.minecraft.world.level.storage.loot.LootContext$EntityTarget access$100(net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition) -> b
    19:19:void <init>(net.minecraft.advancements.critereon.EntityPredicate,net.minecraft.world.level.storage.loot.LootContext$EntityTarget,net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition$1) -> <init>
net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition$1 -> cuo$1:
net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition$Serializer -> cuo$a:
    50:51:void <init>() -> <init>
    55:57:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition,com.google.gson.JsonSerializationContext) -> a
    61:62:net.minecraft.world.level.storage.loot.predicates.LootItemEntityPropertyCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    48:48:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    48:48:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemKilledByPlayerCondition -> cup:
    net.minecraft.world.level.storage.loot.predicates.LootItemKilledByPlayerCondition INSTANCE -> a
    17:18:void <init>() -> <init>
    22:22:java.util.Set getReferencedContextParams() -> a
    27:27:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    31:31:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder killedByPlayer() -> b
    14:14:boolean test(java.lang.Object) -> test
    31:31:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$killedByPlayer$0() -> d
    14:14:net.minecraft.world.level.storage.loot.predicates.LootItemKilledByPlayerCondition access$000() -> c
    15:15:void <clinit>() -> <clinit>
net.minecraft.world.level.storage.loot.predicates.LootItemKilledByPlayerCondition$Serializer -> cup$a:
    36:37:void <init>() -> <init>
    41:41:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemKilledByPlayerCondition,com.google.gson.JsonSerializationContext) -> a
    45:45:net.minecraft.world.level.storage.loot.predicates.LootItemKilledByPlayerCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    34:34:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    34:34:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition -> cuq:
    float probability -> a
    13:15:void <init>(float) -> <init>
    19:19:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    23:23:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder randomChance(float) -> a
    10:10:boolean test(java.lang.Object) -> test
    23:23:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$randomChance$0(float) -> b
    10:10:float access$000(net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition) -> a
    10:10:void <init>(float,net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition$1) -> <init>
net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition$1 -> cuq$1:
net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition$Serializer -> cuq$a:
    28:29:void <init>() -> <init>
    33:34:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition,com.google.gson.JsonSerializationContext) -> a
    38:38:net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    26:26:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    26:26:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition -> cur:
    float percent -> a
    float lootingMultiplier -> b
    22:25:void <init>(float,float) -> <init>
    29:29:java.util.Set getReferencedContextParams() -> a
    34:40:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    44:44:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder randomChanceAndLootingBoost(float,float) -> a
    18:18:boolean test(java.lang.Object) -> test
    44:44:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$randomChanceAndLootingBoost$0(float,float) -> b
    18:18:float access$000(net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition) -> a
    18:18:float access$100(net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition) -> b
    18:18:void <init>(float,float,net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition$1) -> <init>
net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition$1 -> cur$1:
net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition$Serializer -> cur$a:
    49:50:void <init>() -> <init>
    54:56:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition,com.google.gson.JsonSerializationContext) -> a
    60:60:net.minecraft.world.level.storage.loot.predicates.LootItemRandomChanceWithLootingCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    47:47:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    47:47:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.MatchTool -> cus:
    net.minecraft.advancements.critereon.ItemPredicate predicate -> a
    19:21:void <init>(net.minecraft.advancements.critereon.ItemPredicate) -> <init>
    25:25:java.util.Set getReferencedContextParams() -> a
    30:31:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    35:35:net.minecraft.world.level.storage.loot.predicates.LootItemCondition$Builder toolMatches(net.minecraft.advancements.critereon.ItemPredicate$Builder) -> a
    16:16:boolean test(java.lang.Object) -> test
    35:35:net.minecraft.world.level.storage.loot.predicates.LootItemCondition lambda$toolMatches$0(net.minecraft.advancements.critereon.ItemPredicate$Builder) -> b
    16:16:net.minecraft.advancements.critereon.ItemPredicate access$000(net.minecraft.world.level.storage.loot.predicates.MatchTool) -> a
net.minecraft.world.level.storage.loot.predicates.MatchTool$Serializer -> cus$a:
    40:41:void <init>() -> <init>
    45:46:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.MatchTool,com.google.gson.JsonSerializationContext) -> a
    50:51:net.minecraft.world.level.storage.loot.predicates.MatchTool deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    38:38:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    38:38:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.TimeCheck -> cut:
    java.lang.Long period -> a
    net.minecraft.world.level.storage.loot.RandomValueBounds value -> b
    21:24:void <init>(java.lang.Long,net.minecraft.world.level.storage.loot.RandomValueBounds) -> <init>
    28:36:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    61:61:net.minecraft.world.level.storage.loot.predicates.TimeCheck$Builder time(net.minecraft.world.level.storage.loot.RandomValueBounds) -> a
    14:14:boolean test(java.lang.Object) -> test
    14:14:void <init>(java.lang.Long,net.minecraft.world.level.storage.loot.RandomValueBounds,net.minecraft.world.level.storage.loot.predicates.TimeCheck$1) -> <init>
    14:14:java.lang.Long access$100(net.minecraft.world.level.storage.loot.predicates.TimeCheck) -> a
    14:14:net.minecraft.world.level.storage.loot.RandomValueBounds access$200(net.minecraft.world.level.storage.loot.predicates.TimeCheck) -> b
net.minecraft.world.level.storage.loot.predicates.TimeCheck$1 -> cut$1:
net.minecraft.world.level.storage.loot.predicates.TimeCheck$Builder -> cut$a:
    java.lang.Long period -> a
    net.minecraft.world.level.storage.loot.RandomValueBounds value -> b
    45:47:void <init>(net.minecraft.world.level.storage.loot.RandomValueBounds) -> <init>
    50:51:net.minecraft.world.level.storage.loot.predicates.TimeCheck$Builder setPeriod(long) -> a
    56:56:net.minecraft.world.level.storage.loot.predicates.TimeCheck build() -> b
    39:39:net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
net.minecraft.world.level.storage.loot.predicates.TimeCheck$Serializer -> cut$b:
    66:67:void <init>() -> <init>
    71:73:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.TimeCheck,com.google.gson.JsonSerializationContext) -> a
    77:79:net.minecraft.world.level.storage.loot.predicates.TimeCheck deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    64:64:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    64:64:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.WeatherCheck -> cuu:
    java.lang.Boolean isRaining -> a
    java.lang.Boolean isThundering -> b
    20:23:void <init>(java.lang.Boolean,java.lang.Boolean) -> <init>
    27:37:boolean test(net.minecraft.world.level.storage.loot.LootContext) -> a
    64:64:net.minecraft.world.level.storage.loot.predicates.WeatherCheck$Builder weather() -> b
    13:13:boolean test(java.lang.Object) -> test
    13:13:void <init>(java.lang.Boolean,java.lang.Boolean,net.minecraft.world.level.storage.loot.predicates.WeatherCheck$1) -> <init>
    13:13:java.lang.Boolean access$100(net.minecraft.world.level.storage.loot.predicates.WeatherCheck) -> a
    13:13:java.lang.Boolean access$200(net.minecraft.world.level.storage.loot.predicates.WeatherCheck) -> b
net.minecraft.world.level.storage.loot.predicates.WeatherCheck$1 -> cuu$1:
net.minecraft.world.level.storage.loot.predicates.WeatherCheck$Builder -> cuu$a:
    java.lang.Boolean isRaining -> a
    java.lang.Boolean isThundering -> b
    40:40:void <init>() -> <init>
    48:49:net.minecraft.world.level.storage.loot.predicates.WeatherCheck$Builder setRaining(java.lang.Boolean) -> a
    53:54:net.minecraft.world.level.storage.loot.predicates.WeatherCheck$Builder setThundering(java.lang.Boolean) -> b
    59:59:net.minecraft.world.level.storage.loot.predicates.WeatherCheck build() -> b
    40:40:net.minecraft.world.level.storage.loot.predicates.LootItemCondition build() -> build
net.minecraft.world.level.storage.loot.predicates.WeatherCheck$Serializer -> cuu$b:
    69:70:void <init>() -> <init>
    74:76:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.WeatherCheck,com.google.gson.JsonSerializationContext) -> a
    80:82:net.minecraft.world.level.storage.loot.predicates.WeatherCheck deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> a
    67:67:net.minecraft.world.level.storage.loot.predicates.LootItemCondition deserialize(com.google.gson.JsonObject,com.google.gson.JsonDeserializationContext) -> b
    67:67:void serialize(com.google.gson.JsonObject,net.minecraft.world.level.storage.loot.predicates.LootItemCondition,com.google.gson.JsonSerializationContext) -> a
net.minecraft.world.level.storage.loot.predicates.package-info -> cuv:
net.minecraft.world.level.storage.package-info -> cuw:
net.minecraft.world.level.storage.threaded.package-info -> cux:
net.minecraft.world.level.timers.FunctionCallback -> cuy:
    net.minecraft.resources.ResourceLocation functionId -> a
    11:13:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    17:19:void handle(net.minecraft.server.MinecraftServer,net.minecraft.world.level.timers.TimerQueue,long) -> a
    8:8:void handle(java.lang.Object,net.minecraft.world.level.timers.TimerQueue,long) -> a
    18:18:void lambda$handle$0(net.minecraft.server.ServerFunctionManager,net.minecraft.commands.CommandFunction) -> a
    8:8:net.minecraft.resources.ResourceLocation access$000(net.minecraft.world.level.timers.FunctionCallback) -> a
net.minecraft.world.level.timers.FunctionCallback$Serializer -> cuy$a:
    23:24:void <init>() -> <init>
    28:29:void serialize(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.timers.FunctionCallback) -> a
    33:34:net.minecraft.world.level.timers.FunctionCallback deserialize(net.minecraft.nbt.CompoundTag) -> a
    21:21:net.minecraft.world.level.timers.TimerCallback deserialize(net.minecraft.nbt.CompoundTag) -> b
    21:21:void serialize(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.timers.TimerCallback) -> a
net.minecraft.world.level.timers.FunctionTagCallback -> cuz:
    net.minecraft.resources.ResourceLocation tagId -> a
    13:15:void <init>(net.minecraft.resources.ResourceLocation) -> <init>
    19:24:void handle(net.minecraft.server.MinecraftServer,net.minecraft.world.level.timers.TimerQueue,long) -> a
    10:10:void handle(java.lang.Object,net.minecraft.world.level.timers.TimerQueue,long) -> a
    10:10:net.minecraft.resources.ResourceLocation access$000(net.minecraft.world.level.timers.FunctionTagCallback) -> a
net.minecraft.world.level.timers.FunctionTagCallback$Serializer -> cuz$a:
    28:29:void <init>() -> <init>
    33:34:void serialize(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.timers.FunctionTagCallback) -> a
    38:39:net.minecraft.world.level.timers.FunctionTagCallback deserialize(net.minecraft.nbt.CompoundTag) -> a
    26:26:net.minecraft.world.level.timers.TimerCallback deserialize(net.minecraft.nbt.CompoundTag) -> b
    26:26:void serialize(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.timers.TimerCallback) -> a
net.minecraft.world.level.timers.TimerCallback -> cva:
    void handle(java.lang.Object,net.minecraft.world.level.timers.TimerQueue,long) -> a
net.minecraft.world.level.timers.TimerCallback$Serializer -> cva$a:
    net.minecraft.resources.ResourceLocation id -> a
    java.lang.Class cls -> b
    14:17:void <init>(net.minecraft.resources.ResourceLocation,java.lang.Class) -> <init>
    20:20:net.minecraft.resources.ResourceLocation getId() -> a
    24:24:java.lang.Class getCls() -> b
    void serialize(net.minecraft.nbt.CompoundTag,net.minecraft.world.level.timers.TimerCallback) -> a
    net.minecraft.world.level.timers.TimerCallback deserialize(net.minecraft.nbt.CompoundTag) -> b
net.minecraft.world.level.timers.TimerCallbacks -> cvb:
    org.apache.logging.log4j.Logger LOGGER -> b
    net.minecraft.world.level.timers.TimerCallbacks SERVER_CALLBACKS -> a
    java.util.Map idToSerializer -> c
    java.util.Map classToSerializer -> d
    21:27:void <init>() -> <init>
    30:32:net.minecraft.world.level.timers.TimerCallbacks register(net.minecraft.world.level.timers.TimerCallback$Serializer) -> a
    37:37:net.minecraft.world.level.timers.TimerCallback$Serializer getSerializer(java.lang.Class) -> a
    41:45:net.minecraft.nbt.CompoundTag serialize(net.minecraft.world.level.timers.TimerCallback) -> a
    50:60:net.minecraft.world.level.timers.TimerCallback deserialize(net.minecraft.nbt.CompoundTag) -> a
    15:19:void <clinit>() -> <clinit>
net.minecraft.world.level.timers.TimerQueue -> cvc:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.level.timers.TimerCallbacks callbacksRegistry -> b
    java.util.Queue queue -> c
    com.google.common.primitives.UnsignedLong sequentialId -> d
    com.google.common.collect.Table events -> e
    40:40:java.util.Comparator createComparator() -> c
    45:53:void <init>(net.minecraft.world.level.timers.TimerCallbacks) -> <init>
    57:67:void tick(java.lang.Object,long) -> a
    70:77:void schedule(java.lang.String,long,net.minecraft.world.level.timers.TimerCallback) -> a
    80:84:int remove(java.lang.String) -> a
    88:88:java.util.Set getEventsIds() -> a
    92:99:void loadEvent(net.minecraft.nbt.CompoundTag) -> a
    102:118:void load(net.minecraft.nbt.ListTag) -> a
    121:125:net.minecraft.nbt.CompoundTag storeEvent(net.minecraft.world.level.timers.TimerQueue$Event) -> a
    129:131:net.minecraft.nbt.ListTag store() -> b
    40:40:com.google.common.primitives.UnsignedLong lambda$createComparator$1(net.minecraft.world.level.timers.TimerQueue$Event) -> b
    40:40:long lambda$createComparator$0(net.minecraft.world.level.timers.TimerQueue$Event) -> c
    20:20:void <clinit>() -> <clinit>
net.minecraft.world.level.timers.TimerQueue$1 -> cvc$1:
net.minecraft.world.level.timers.TimerQueue$Event -> cvc$a:
    long triggerTime -> a
    com.google.common.primitives.UnsignedLong sequentialId -> b
    java.lang.String id -> c
    net.minecraft.world.level.timers.TimerCallback callback -> d
    31:36:void <init>(long,com.google.common.primitives.UnsignedLong,java.lang.String,net.minecraft.world.level.timers.TimerCallback) -> <init>
    25:25:void <init>(long,com.google.common.primitives.UnsignedLong,java.lang.String,net.minecraft.world.level.timers.TimerCallback,net.minecraft.world.level.timers.TimerQueue$1) -> <init>
net.minecraft.world.level.timers.package-info -> cvd:
net.minecraft.world.package-info -> cve:
net.minecraft.world.phys.AABB -> cvf:
    double minX -> a
    double minY -> b
    double minZ -> c
    double maxX -> d
    double maxY -> e
    double maxZ -> f
    25:32:void <init>(double,double,double,double,double,double) -> <init>
    35:36:void <init>(net.minecraft.core.BlockPos) -> <init>
    39:40:void <init>(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> <init>
    43:44:void <init>(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3) -> <init>
    47:47:net.minecraft.world.phys.AABB of(net.minecraft.world.level.levelgen.structure.BoundingBox) -> a
    51:51:net.minecraft.world.phys.AABB setMinX(double) -> a
    55:55:net.minecraft.world.phys.AABB setMinY(double) -> b
    59:59:net.minecraft.world.phys.AABB setMinZ(double) -> c
    63:63:net.minecraft.world.phys.AABB setMaxX(double) -> d
    67:67:net.minecraft.world.phys.AABB setMaxY(double) -> e
    71:71:net.minecraft.world.phys.AABB setMaxZ(double) -> f
    75:75:double min(net.minecraft.core.Direction$Axis) -> a
    79:79:double max(net.minecraft.core.Direction$Axis) -> b
    84:108:boolean equals(java.lang.Object) -> equals
    113:125:int hashCode() -> hashCode
    135:160:net.minecraft.world.phys.AABB contract(double,double,double) -> a
    164:164:net.minecraft.world.phys.AABB expandTowards(net.minecraft.world.phys.Vec3) -> a
    174:199:net.minecraft.world.phys.AABB expandTowards(double,double,double) -> b
    209:216:net.minecraft.world.phys.AABB inflate(double,double,double) -> c
    220:220:net.minecraft.world.phys.AABB inflate(double) -> g
    224:231:net.minecraft.world.phys.AABB intersect(net.minecraft.world.phys.AABB) -> a
    235:242:net.minecraft.world.phys.AABB minmax(net.minecraft.world.phys.AABB) -> b
    246:274:net.minecraft.world.phys.AABB minmax(java.lang.Iterable) -> a
    278:278:net.minecraft.world.phys.AABB move(double,double,double) -> d
    282:282:net.minecraft.world.phys.AABB move(net.minecraft.core.BlockPos) -> a
    286:286:net.minecraft.world.phys.AABB move(net.minecraft.world.phys.Vec3) -> b
    291:308:double clipXCollide(net.minecraft.world.phys.AABB,double) -> a
    313:330:double clipYCollide(net.minecraft.world.phys.AABB,double) -> b
    335:352:double clipZCollide(net.minecraft.world.phys.AABB,double) -> c
    356:356:boolean intersects(net.minecraft.world.phys.AABB) -> c
    361:361:boolean intersects(double,double,double,double,double,double) -> a
    370:370:boolean intersects(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3) -> a
    374:374:boolean contains(net.minecraft.world.phys.Vec3) -> c
    378:378:boolean contains(double,double,double) -> e
    382:385:double getSize() -> a
    389:389:double getXsize() -> b
    393:393:double getYsize() -> c
    397:397:double getZsize() -> d
    409:409:net.minecraft.world.phys.AABB deflate(double,double,double) -> f
    413:413:net.minecraft.world.phys.AABB deflate(double) -> h
    417:428:java.util.Optional clip(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3) -> b
    433:449:net.minecraft.world.phys.BlockHitResult clip(java.lang.Iterable,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,net.minecraft.core.BlockPos) -> a
    454:471:net.minecraft.core.Direction getDirection(net.minecraft.world.phys.AABB,net.minecraft.world.phys.Vec3,double[],net.minecraft.core.Direction,double,double,double) -> a
    476:486:net.minecraft.core.Direction clipPoint(double[],net.minecraft.core.Direction,double,double,double,double,double,double,double,double,net.minecraft.core.Direction,double,double,double) -> a
    491:491:java.lang.String toString() -> toString
    495:495:boolean hasNaN() -> e
    499:499:net.minecraft.world.phys.Vec3 getCenter() -> f
net.minecraft.world.phys.BlockHitResult -> cvg:
    net.minecraft.core.Direction direction -> b
    net.minecraft.core.BlockPos blockPos -> c
    boolean miss -> d
    boolean inside -> e
    13:13:net.minecraft.world.phys.BlockHitResult miss(net.minecraft.world.phys.Vec3,net.minecraft.core.Direction,net.minecraft.core.BlockPos) -> a
    17:18:void <init>(net.minecraft.world.phys.Vec3,net.minecraft.core.Direction,net.minecraft.core.BlockPos,boolean) -> <init>
    21:27:void <init>(boolean,net.minecraft.world.phys.Vec3,net.minecraft.core.Direction,net.minecraft.core.BlockPos,boolean) -> <init>
    30:30:net.minecraft.world.phys.BlockHitResult withDirection(net.minecraft.core.Direction) -> a
    34:34:net.minecraft.core.BlockPos getBlockPos() -> a
    38:38:net.minecraft.core.Direction getDirection() -> b
    43:43:net.minecraft.world.phys.HitResult$Type getType() -> c
    47:47:boolean isInside() -> d
net.minecraft.world.phys.EntityHitResult -> cvh:
    net.minecraft.world.entity.Entity entity -> b
    9:10:void <init>(net.minecraft.world.entity.Entity) -> <init>
    13:16:void <init>(net.minecraft.world.entity.Entity,net.minecraft.world.phys.Vec3) -> <init>
    19:19:net.minecraft.world.entity.Entity getEntity() -> a
    24:24:net.minecraft.world.phys.HitResult$Type getType() -> c
net.minecraft.world.phys.HitResult -> cvi:
    net.minecraft.world.phys.Vec3 location -> a
    12:14:void <init>(net.minecraft.world.phys.Vec3) -> <init>
    17:20:double distanceTo(net.minecraft.world.entity.Entity) -> a
    net.minecraft.world.phys.HitResult$Type getType() -> c
    26:26:net.minecraft.world.phys.Vec3 getLocation() -> e
net.minecraft.world.phys.HitResult$Type -> cvi$a:
    net.minecraft.world.phys.HitResult$Type MISS -> a
    net.minecraft.world.phys.HitResult$Type BLOCK -> b
    net.minecraft.world.phys.HitResult$Type ENTITY -> c
    net.minecraft.world.phys.HitResult$Type[] $VALUES -> d
    6:6:net.minecraft.world.phys.HitResult$Type[] values() -> values
    6:6:net.minecraft.world.phys.HitResult$Type valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    6:7:void <clinit>() -> <clinit>
net.minecraft.world.phys.PosAndRot -> cvj:
    net.minecraft.world.phys.Vec3 pos -> a
    float xRot -> b
    float yRot -> c
    10:14:void <init>(net.minecraft.world.phys.Vec3,float,float) -> <init>
    17:17:net.minecraft.world.phys.Vec3 pos() -> a
    21:21:float xRot() -> b
    25:25:float yRot() -> c
    30:39:boolean equals(java.lang.Object) -> equals
    44:44:int hashCode() -> hashCode
    49:49:java.lang.String toString() -> toString
net.minecraft.world.phys.Vec2 -> cvk:
    net.minecraft.world.phys.Vec2 ZERO -> a
    net.minecraft.world.phys.Vec2 ONE -> b
    net.minecraft.world.phys.Vec2 UNIT_X -> c
    net.minecraft.world.phys.Vec2 NEG_UNIT_X -> d
    net.minecraft.world.phys.Vec2 UNIT_Y -> e
    net.minecraft.world.phys.Vec2 NEG_UNIT_Y -> f
    net.minecraft.world.phys.Vec2 MAX -> g
    net.minecraft.world.phys.Vec2 MIN -> h
    float x -> i
    float y -> j
    19:22:void <init>(float,float) -> <init>
    25:25:net.minecraft.world.phys.Vec2 scale(float) -> a
    29:29:float dot(net.minecraft.world.phys.Vec2) -> a
    33:33:net.minecraft.world.phys.Vec2 add(net.minecraft.world.phys.Vec2) -> b
    37:37:net.minecraft.world.phys.Vec2 add(float) -> b
    41:41:boolean equals(net.minecraft.world.phys.Vec2) -> c
    45:46:net.minecraft.world.phys.Vec2 normalized() -> a
    50:50:float length() -> b
    54:54:float lengthSquared() -> c
    58:60:float distanceToSqr(net.minecraft.world.phys.Vec2) -> d
    64:64:net.minecraft.world.phys.Vec2 negated() -> d
    7:14:void <clinit>() -> <clinit>
net.minecraft.world.phys.Vec3 -> cvl:
    net.minecraft.world.phys.Vec3 ZERO -> a
    double x -> b
    double y -> c
    double z -> d
    17:21:void <init>(double,double,double) -> <init>
    24:25:void <init>(com.mojang.math.Vector3f) -> <init>
    28:29:void <init>(net.minecraft.core.Vec3i) -> <init>
    32:32:net.minecraft.world.phys.Vec3 vectorTo(net.minecraft.world.phys.Vec3) -> a
    36:40:net.minecraft.world.phys.Vec3 normalize() -> d
    44:44:double dot(net.minecraft.world.phys.Vec3) -> b
    48:48:net.minecraft.world.phys.Vec3 cross(net.minecraft.world.phys.Vec3) -> c
    52:52:net.minecraft.world.phys.Vec3 subtract(net.minecraft.world.phys.Vec3) -> d
    56:56:net.minecraft.world.phys.Vec3 subtract(double,double,double) -> a
    60:60:net.minecraft.world.phys.Vec3 add(net.minecraft.world.phys.Vec3) -> e
    64:64:net.minecraft.world.phys.Vec3 add(double,double,double) -> b
    68:71:double distanceTo(net.minecraft.world.phys.Vec3) -> f
    75:78:double distanceToSqr(net.minecraft.world.phys.Vec3) -> g
    82:85:double distanceToSqr(double,double,double) -> c
    89:89:net.minecraft.world.phys.Vec3 scale(double) -> a
    93:93:net.minecraft.world.phys.Vec3 reverse() -> e
    97:97:net.minecraft.world.phys.Vec3 multiply(net.minecraft.world.phys.Vec3) -> h
    101:101:net.minecraft.world.phys.Vec3 multiply(double,double,double) -> d
    105:105:double length() -> f
    109:109:double lengthSqr() -> g
    114:129:boolean equals(java.lang.Object) -> equals
    136:142:int hashCode() -> hashCode
    147:147:java.lang.String toString() -> toString
    151:151:net.minecraft.world.phys.Vec3 lerp(net.minecraft.world.phys.Vec3,double) -> a
    155:162:net.minecraft.world.phys.Vec3 xRot(float) -> a
    166:173:net.minecraft.world.phys.Vec3 yRot(float) -> b
    177:184:net.minecraft.world.phys.Vec3 zRot(float) -> c
    188:188:net.minecraft.world.phys.Vec3 directionFromRotation(net.minecraft.world.phys.Vec2) -> a
    193:198:net.minecraft.world.phys.Vec3 directionFromRotation(float,float) -> a
    202:205:net.minecraft.world.phys.Vec3 align(java.util.EnumSet) -> a
    209:209:double get(net.minecraft.core.Direction$Axis) -> a
    214:214:double x() -> a
    219:219:double y() -> b
    224:224:double z() -> c
    12:12:void <clinit>() -> <clinit>
net.minecraft.world.phys.package-info -> cvm:
net.minecraft.world.phys.shapes.ArrayVoxelShape -> cvn:
    it.unimi.dsi.fastutil.doubles.DoubleList xs -> b
    it.unimi.dsi.fastutil.doubles.DoubleList ys -> c
    it.unimi.dsi.fastutil.doubles.DoubleList zs -> d
    16:22:void <init>(net.minecraft.world.phys.shapes.DiscreteVoxelShape,double[],double[],double[]) -> <init>
    25:35:void <init>(net.minecraft.world.phys.shapes.DiscreteVoxelShape,it.unimi.dsi.fastutil.doubles.DoubleList,it.unimi.dsi.fastutil.doubles.DoubleList,it.unimi.dsi.fastutil.doubles.DoubleList) -> <init>
    39:47:it.unimi.dsi.fastutil.doubles.DoubleList getCoords(net.minecraft.core.Direction$Axis) -> a
net.minecraft.world.phys.shapes.ArrayVoxelShape$1 -> cvn$1:
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> a
    39:39:void <clinit>() -> <clinit>
net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape -> cvo:
    java.util.BitSet storage -> d
    int xMin -> e
    int yMin -> f
    int zMin -> g
    int xMax -> h
    int yMax -> i
    int zMax -> j
    17:18:void <init>(int,int,int) -> <init>
    21:29:void <init>(int,int,int,int,int,int,int,int,int) -> <init>
    32:57:void <init>(net.minecraft.world.phys.shapes.DiscreteVoxelShape) -> <init>
    60:60:int getIndex(int,int,int) -> a
    65:65:boolean isFull(int,int,int) -> b
    70:80:void setFull(int,int,int,boolean,boolean) -> a
    84:84:boolean isEmpty() -> a
    89:89:int firstFull(net.minecraft.core.Direction$Axis) -> a
    94:94:int lastFull(net.minecraft.core.Direction$Axis) -> b
    100:106:boolean isZStripFull(int,int,int,int) -> a
    112:113:void setZStrip(int,int,int,int,boolean) -> a
    116:159:net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape join(net.minecraft.world.phys.shapes.DiscreteVoxelShape,net.minecraft.world.phys.shapes.DiscreteVoxelShape,net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.BooleanOp) -> a
    127:151:boolean lambda$join$2(net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.BooleanOp,net.minecraft.world.phys.shapes.DiscreteVoxelShape,net.minecraft.world.phys.shapes.DiscreteVoxelShape,net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape,int[],int,int,int) -> a
    129:145:boolean lambda$null$1(net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.BooleanOp,net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape,int,int[],boolean[],int,int,int) -> a
    131:138:boolean lambda$null$0(net.minecraft.world.phys.shapes.BooleanOp,net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,int,net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,int,net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape,int,int,int[],boolean[],int,int,int) -> a
net.minecraft.world.phys.shapes.BooleanOp -> cvp:
    net.minecraft.world.phys.shapes.BooleanOp FALSE -> a
    net.minecraft.world.phys.shapes.BooleanOp NOT_OR -> b
    net.minecraft.world.phys.shapes.BooleanOp ONLY_SECOND -> c
    net.minecraft.world.phys.shapes.BooleanOp NOT_FIRST -> d
    net.minecraft.world.phys.shapes.BooleanOp ONLY_FIRST -> e
    net.minecraft.world.phys.shapes.BooleanOp NOT_SECOND -> f
    net.minecraft.world.phys.shapes.BooleanOp NOT_SAME -> g
    net.minecraft.world.phys.shapes.BooleanOp NOT_AND -> h
    net.minecraft.world.phys.shapes.BooleanOp AND -> i
    net.minecraft.world.phys.shapes.BooleanOp SAME -> j
    net.minecraft.world.phys.shapes.BooleanOp SECOND -> k
    net.minecraft.world.phys.shapes.BooleanOp CAUSES -> l
    net.minecraft.world.phys.shapes.BooleanOp FIRST -> m
    net.minecraft.world.phys.shapes.BooleanOp CAUSED_BY -> n
    net.minecraft.world.phys.shapes.BooleanOp OR -> o
    net.minecraft.world.phys.shapes.BooleanOp TRUE -> p
    boolean apply(boolean,boolean) -> apply
    19:19:boolean lambda$static$15(boolean,boolean) -> a
    18:18:boolean lambda$static$14(boolean,boolean) -> b
    17:17:boolean lambda$static$13(boolean,boolean) -> c
    16:16:boolean lambda$static$12(boolean,boolean) -> d
    15:15:boolean lambda$static$11(boolean,boolean) -> e
    14:14:boolean lambda$static$10(boolean,boolean) -> f
    13:13:boolean lambda$static$9(boolean,boolean) -> g
    12:12:boolean lambda$static$8(boolean,boolean) -> h
    11:11:boolean lambda$static$7(boolean,boolean) -> i
    10:10:boolean lambda$static$6(boolean,boolean) -> j
    9:9:boolean lambda$static$5(boolean,boolean) -> k
    8:8:boolean lambda$static$4(boolean,boolean) -> l
    7:7:boolean lambda$static$3(boolean,boolean) -> m
    6:6:boolean lambda$static$2(boolean,boolean) -> n
    5:5:boolean lambda$static$1(boolean,boolean) -> o
    4:4:boolean lambda$static$0(boolean,boolean) -> p
    4:19:void <clinit>() -> <clinit>
net.minecraft.world.phys.shapes.CollisionContext -> cvq:
    9:9:net.minecraft.world.phys.shapes.CollisionContext empty() -> a
    14:14:net.minecraft.world.phys.shapes.CollisionContext of(net.minecraft.world.entity.Entity) -> a
    boolean isDescending() -> b
    boolean isAbove(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.BlockPos,boolean) -> a
    boolean isHoldingItem(net.minecraft.world.item.Item) -> a
net.minecraft.world.phys.shapes.CubePointRange -> cvr:
    int parts -> a
    8:10:void <init>(int) -> <init>
    14:14:double getDouble(int) -> getDouble
    19:19:int size() -> size
net.minecraft.world.phys.shapes.CubeVoxelShape -> cvs:
    9:10:void <init>(net.minecraft.world.phys.shapes.DiscreteVoxelShape) -> <init>
    14:14:it.unimi.dsi.fastutil.doubles.DoubleList getCoords(net.minecraft.core.Direction$Axis) -> a
    19:20:int findIndex(net.minecraft.core.Direction$Axis,double) -> a
net.minecraft.world.phys.shapes.DiscreteCubeMerger -> cvt:
    net.minecraft.world.phys.shapes.CubePointRange result -> a
    int firstSize -> b
    int secondSize -> c
    int gcd -> d
    12:17:void <init>(int,int) -> <init>
    21:28:boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> a
    33:33:it.unimi.dsi.fastutil.doubles.DoubleList getList() -> a
net.minecraft.world.phys.shapes.DiscreteVoxelShape -> cvu:
    net.minecraft.core.Direction$Axis[] AXIS_VALUES -> d
    int xSize -> a
    int ySize -> b
    int zSize -> c
    13:17:void <init>(int,int,int) -> <init>
    20:23:boolean isFullWide(net.minecraft.core.AxisCycle,int,int,int) -> a
    28:34:boolean isFullWide(int,int,int) -> c
    38:41:boolean isFull(net.minecraft.core.AxisCycle,int,int,int) -> b
    boolean isFull(int,int,int) -> b
    void setFull(int,int,int,boolean,boolean) -> a
    50:55:boolean isEmpty() -> a
    int firstFull(net.minecraft.core.Direction$Axis) -> a
    int lastFull(net.minecraft.core.Direction$Axis) -> b
    64:79:int firstFull(net.minecraft.core.Direction$Axis,int,int) -> a
    83:98:int lastFull(net.minecraft.core.Direction$Axis,int,int) -> b
    102:102:int getSize(net.minecraft.core.Direction$Axis) -> c
    106:106:int getXSize() -> b
    110:110:int getYSize() -> c
    114:114:int getZSize() -> d
    126:129:void forAllEdges(net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntLineConsumer,boolean) -> a
    136:191:void forAllAxisEdges(net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntLineConsumer,net.minecraft.core.AxisCycle,boolean) -> a
    195:200:boolean isZStripFull(int,int,int,int) -> a
    204:207:void setZStrip(int,int,int,int,boolean) -> a
    210:215:boolean isXZRectangleFull(int,int,int,int,int) -> a
    223:278:void forAllBoxes(net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntLineConsumer,boolean) -> b
    282:285:void forAllFaces(net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntFaceConsumer) -> a
    288:324:void forAllAxisFaces(net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntFaceConsumer,net.minecraft.core.AxisCycle) -> a
    7:7:void <clinit>() -> <clinit>
net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntFaceConsumer -> cvu$a:
    void consume(net.minecraft.core.Direction,int,int,int) -> consume
net.minecraft.world.phys.shapes.DiscreteVoxelShape$IntLineConsumer -> cvu$b:
    void consume(int,int,int,int,int,int) -> consume
net.minecraft.world.phys.shapes.EntityCollisionContext -> cvv:
    net.minecraft.world.phys.shapes.CollisionContext EMPTY -> a
    boolean descending -> b
    double entityBottom -> c
    net.minecraft.world.item.Item heldItem -> d
    23:27:void <init>(boolean,double,net.minecraft.world.item.Item) -> <init>
    32:37:void <init>(net.minecraft.world.entity.Entity) -> <init>
    41:41:boolean isHoldingItem(net.minecraft.world.item.Item) -> a
    46:46:boolean isDescending() -> b
    51:51:boolean isAbove(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.BlockPos,boolean) -> a
    12:12:void <clinit>() -> <clinit>
net.minecraft.world.phys.shapes.EntityCollisionContext$1 -> cvv$1:
    12:12:void <init>(boolean,double,net.minecraft.world.item.Item) -> <init>
    15:15:boolean isAbove(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.BlockPos,boolean) -> a
net.minecraft.world.phys.shapes.IdenticalMerger -> cvw:
    it.unimi.dsi.fastutil.doubles.DoubleList coords -> a
    8:10:void <init>(it.unimi.dsi.fastutil.doubles.DoubleList) -> <init>
    14:19:boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> a
    24:24:it.unimi.dsi.fastutil.doubles.DoubleList getList() -> a
net.minecraft.world.phys.shapes.IndexMerger -> cvx:
    it.unimi.dsi.fastutil.doubles.DoubleList getList() -> a
    boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> a
net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer -> cvx$a:
    boolean merge(int,int,int) -> merge
net.minecraft.world.phys.shapes.IndirectMerger -> cvy:
    it.unimi.dsi.fastutil.doubles.DoubleArrayList result -> a
    it.unimi.dsi.fastutil.ints.IntArrayList firstIndices -> b
    it.unimi.dsi.fastutil.ints.IntArrayList secondIndices -> c
    12:52:void <init>(it.unimi.dsi.fastutil.doubles.DoubleList,it.unimi.dsi.fastutil.doubles.DoubleList,boolean,boolean) -> <init>
    56:61:boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> a
    66:66:it.unimi.dsi.fastutil.doubles.DoubleList getList() -> a
net.minecraft.world.phys.shapes.IntPointRange -> cvz:
    int parts -> a
    int origin -> b
    9:12:void <init>(int,int) -> <init>
    16:16:double getDouble(int) -> getDouble
    21:21:int size() -> size
net.minecraft.world.phys.shapes.NonOverlappingMerger -> cwa:
    it.unimi.dsi.fastutil.doubles.DoubleList lower -> a
    it.unimi.dsi.fastutil.doubles.DoubleList upper -> b
    boolean swap -> c
    11:15:void <init>(it.unimi.dsi.fastutil.doubles.DoubleList,it.unimi.dsi.fastutil.doubles.DoubleList,boolean) -> <init>
    19:19:int size() -> size
    24:27:boolean forMergedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> a
    31:47:boolean forNonSwappedIndexes(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer) -> b
    52:55:double getDouble(int) -> getDouble
    61:61:it.unimi.dsi.fastutil.doubles.DoubleList getList() -> a
    25:25:boolean lambda$forMergedIndexes$0(net.minecraft.world.phys.shapes.IndexMerger$IndexConsumer,int,int,int) -> a
net.minecraft.world.phys.shapes.OffsetDoubleList -> cwb:
    it.unimi.dsi.fastutil.doubles.DoubleList delegate -> a
    double offset -> b
    10:13:void <init>(it.unimi.dsi.fastutil.doubles.DoubleList,double) -> <init>
    17:17:double getDouble(int) -> getDouble
    22:22:int size() -> size
net.minecraft.world.phys.shapes.Shapes -> cwc:
    net.minecraft.world.phys.shapes.VoxelShape BLOCK -> b
    net.minecraft.world.phys.shapes.VoxelShape INFINITY -> a
    net.minecraft.world.phys.shapes.VoxelShape EMPTY -> c
    23:23:void <init>() -> <init>
    45:45:net.minecraft.world.phys.shapes.VoxelShape empty() -> a
    49:49:net.minecraft.world.phys.shapes.VoxelShape block() -> b
    53:53:net.minecraft.world.phys.shapes.VoxelShape box(double,double,double,double,double,double) -> a
    57:93:net.minecraft.world.phys.shapes.VoxelShape create(net.minecraft.world.phys.AABB) -> a
    97:109:int findBits(double,double) -> a
    113:113:long lcm(int,int) -> a
    117:117:net.minecraft.world.phys.shapes.VoxelShape or(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape) -> a
    121:121:net.minecraft.world.phys.shapes.VoxelShape or(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape[]) -> a
    125:125:net.minecraft.world.phys.shapes.VoxelShape join(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.BooleanOp) -> a
    129:153:net.minecraft.world.phys.shapes.VoxelShape joinUnoptimized(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.BooleanOp) -> b
    157:182:boolean joinIsNotEmpty(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.BooleanOp) -> c
    186:186:boolean joinIsNotEmpty(net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.DiscreteVoxelShape,net.minecraft.world.phys.shapes.DiscreteVoxelShape,net.minecraft.world.phys.shapes.BooleanOp) -> a
    196:203:double collide(net.minecraft.core.Direction$Axis,net.minecraft.world.phys.AABB,java.util.stream.Stream,double) -> a
    207:207:double collide(net.minecraft.core.Direction$Axis,net.minecraft.world.phys.AABB,net.minecraft.world.level.LevelReader,double,net.minecraft.world.phys.shapes.CollisionContext,java.util.stream.Stream) -> a
    213:281:double collide(net.minecraft.world.phys.AABB,net.minecraft.world.level.LevelReader,double,net.minecraft.world.phys.shapes.CollisionContext,net.minecraft.core.AxisCycle,java.util.stream.Stream) -> a
    285:285:int lastC(double,double,double) -> a
    292:307:boolean blockOccudes(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.Direction) -> a
    311:330:net.minecraft.world.phys.shapes.VoxelShape getFaceShape(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.Direction) -> a
    337:354:boolean mergedFaceOccludes(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.Direction) -> b
    361:371:boolean faceShapeOccludes(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.world.phys.shapes.VoxelShape) -> b
    382:407:net.minecraft.world.phys.shapes.IndexMerger createIndexMerger(int,it.unimi.dsi.fastutil.doubles.DoubleList,it.unimi.dsi.fastutil.doubles.DoubleList,boolean,boolean) -> a
    278:279:void lambda$collide$4(double[],net.minecraft.core.Direction$Axis,net.minecraft.world.phys.AABB,net.minecraft.world.phys.shapes.VoxelShape) -> a
    187:187:boolean lambda$joinIsNotEmpty$3(net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.BooleanOp,net.minecraft.world.phys.shapes.DiscreteVoxelShape,net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,int,int) -> a
    188:188:boolean lambda$null$2(net.minecraft.world.phys.shapes.IndexMerger,net.minecraft.world.phys.shapes.BooleanOp,net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,int,int,int) -> a
    189:189:boolean lambda$null$1(net.minecraft.world.phys.shapes.BooleanOp,net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,int,net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,int,int,int,int) -> a
    27:29:net.minecraft.world.phys.shapes.CubeVoxelShape lambda$static$0() -> c
    26:37:void <clinit>() -> <clinit>
net.minecraft.world.phys.shapes.Shapes$DoubleLineConsumer -> cwc$a:
    void consume(double,double,double,double,double,double) -> consume
net.minecraft.world.phys.shapes.SliceShape -> cwd:
    net.minecraft.world.phys.shapes.VoxelShape delegate -> b
    net.minecraft.core.Direction$Axis axis -> c
    it.unimi.dsi.fastutil.doubles.DoubleList SLICE_COORDS -> d
    12:15:void <init>(net.minecraft.world.phys.shapes.VoxelShape,net.minecraft.core.Direction$Axis,int) -> <init>
    18:24:net.minecraft.world.phys.shapes.DiscreteVoxelShape makeSlice(net.minecraft.world.phys.shapes.DiscreteVoxelShape,net.minecraft.core.Direction$Axis,int) -> a
    30:33:it.unimi.dsi.fastutil.doubles.DoubleList getCoords(net.minecraft.core.Direction$Axis) -> a
    9:9:void <clinit>() -> <clinit>
net.minecraft.world.phys.shapes.SubShape -> cwe:
    net.minecraft.world.phys.shapes.DiscreteVoxelShape parent -> d
    int startX -> e
    int startY -> f
    int startZ -> g
    int endX -> h
    int endY -> i
    int endZ -> j
    15:23:void <init>(net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,int,int,int,int,int) -> <init>
    27:27:boolean isFull(int,int,int) -> b
    32:33:void setFull(int,int,int,boolean,boolean) -> a
    37:37:int firstFull(net.minecraft.core.Direction$Axis) -> a
    42:42:int lastFull(net.minecraft.core.Direction$Axis) -> b
net.minecraft.world.phys.shapes.VoxelShape -> cwf:
    net.minecraft.world.phys.shapes.DiscreteVoxelShape shape -> a
    net.minecraft.world.phys.shapes.VoxelShape[] faces -> b
    24:26:void <init>(net.minecraft.world.phys.shapes.DiscreteVoxelShape) -> <init>
    29:33:double min(net.minecraft.core.Direction$Axis) -> b
    38:42:double max(net.minecraft.core.Direction$Axis) -> c
    47:50:net.minecraft.world.phys.AABB bounds() -> a
    54:54:double get(net.minecraft.core.Direction$Axis,int) -> a
    it.unimi.dsi.fastutil.doubles.DoubleList getCoords(net.minecraft.core.Direction$Axis) -> a
    60:60:boolean isEmpty() -> b
    64:71:net.minecraft.world.phys.shapes.VoxelShape move(double,double,double) -> a
    76:80:net.minecraft.world.phys.shapes.VoxelShape optimize() -> c
    84:85:void forAllEdges(net.minecraft.world.phys.shapes.Shapes$DoubleLineConsumer) -> a
    88:93:void forAllBoxes(net.minecraft.world.phys.shapes.Shapes$DoubleLineConsumer) -> b
    96:98:java.util.List toAabbs() -> d
    102:110:double min(net.minecraft.core.Direction$Axis,double,double) -> a
    115:123:double max(net.minecraft.core.Direction$Axis,double,double) -> b
    129:129:int findIndex(net.minecraft.core.Direction$Axis,double) -> a
    144:144:boolean isFullWide(double,double,double) -> b
    149:167:net.minecraft.world.phys.BlockHitResult clip(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,net.minecraft.core.BlockPos) -> a
    174:189:net.minecraft.world.phys.shapes.VoxelShape getFaceShape(net.minecraft.core.Direction) -> a
    193:200:net.minecraft.world.phys.shapes.VoxelShape calculateFace(net.minecraft.core.Direction) -> b
    204:204:double collide(net.minecraft.core.Direction$Axis,net.minecraft.world.phys.AABB,double) -> a
    208:263:double collideX(net.minecraft.core.AxisCycle,net.minecraft.world.phys.AABB,double) -> a
    268:268:java.lang.String toString() -> toString
    130:135:boolean lambda$findIndex$4(net.minecraft.core.Direction$Axis,double,int) -> a
    97:97:void lambda$toAabbs$3(java.util.List,double,double,double,double,double,double) -> a
    92:92:void lambda$forAllBoxes$2(net.minecraft.world.phys.shapes.Shapes$DoubleLineConsumer,it.unimi.dsi.fastutil.doubles.DoubleList,it.unimi.dsi.fastutil.doubles.DoubleList,it.unimi.dsi.fastutil.doubles.DoubleList,int,int,int,int,int,int) -> a
    84:84:void lambda$forAllEdges$1(net.minecraft.world.phys.shapes.Shapes$DoubleLineConsumer,int,int,int,int,int,int) -> a
    78:79:void lambda$optimize$0(net.minecraft.world.phys.shapes.VoxelShape[],double,double,double,double,double,double) -> a
net.minecraft.world.phys.shapes.WorldRegionIndirectVoxelShape -> cwg:
    int x -> b
    int y -> c
    int z -> d
    12:16:void <init>(net.minecraft.world.phys.shapes.DiscreteVoxelShape,int,int,int) -> <init>
    20:20:it.unimi.dsi.fastutil.doubles.DoubleList getCoords(net.minecraft.core.Direction$Axis) -> a
net.minecraft.world.phys.shapes.package-info -> cwh:
net.minecraft.world.scores.Objective -> cwi:
    net.minecraft.world.scores.Scoreboard scoreboard -> a
    java.lang.String name -> b
    net.minecraft.world.scores.criteria.ObjectiveCriteria criteria -> c
    net.minecraft.network.chat.Component displayName -> d
    net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType renderType -> e
    18:24:void <init>(net.minecraft.world.scores.Scoreboard,java.lang.String,net.minecraft.world.scores.criteria.ObjectiveCriteria,net.minecraft.network.chat.Component,net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType) -> <init>
    27:27:net.minecraft.world.scores.Scoreboard getScoreboard() -> a
    31:31:java.lang.String getName() -> b
    35:35:net.minecraft.world.scores.criteria.ObjectiveCriteria getCriteria() -> c
    39:39:net.minecraft.network.chat.Component getDisplayName() -> d
    43:44:net.minecraft.network.chat.Component getFormattedDisplayName() -> e
    49:51:void setDisplayName(net.minecraft.network.chat.Component) -> a
    54:54:net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType getRenderType() -> f
    58:60:void setRenderType(net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType) -> a
    44:44:void lambda$getFormattedDisplayName$0(net.minecraft.network.chat.Style) -> a
net.minecraft.world.scores.PlayerTeam -> cwj:
    net.minecraft.world.scores.Scoreboard scoreboard -> a
    java.lang.String name -> b
    java.util.Set players -> c
    net.minecraft.network.chat.Component displayName -> d
    net.minecraft.network.chat.Component playerPrefix -> e
    net.minecraft.network.chat.Component playerSuffix -> f
    boolean allowFriendlyFire -> g
    boolean seeFriendlyInvisibles -> h
    net.minecraft.world.scores.Team$Visibility nameTagVisibility -> i
    net.minecraft.world.scores.Team$Visibility deathMessageVisibility -> j
    net.minecraft.ChatFormatting color -> k
    net.minecraft.world.scores.Team$CollisionRule collisionRule -> l
    22:37:void <init>(net.minecraft.world.scores.Scoreboard,java.lang.String) -> <init>
    40:40:net.minecraft.world.scores.Scoreboard getScoreboard() -> a
    45:45:java.lang.String getName() -> b
    49:49:net.minecraft.network.chat.Component getDisplayName() -> c
    53:63:net.minecraft.network.chat.Component getFormattedDisplayName() -> d
    67:72:void setDisplayName(net.minecraft.network.chat.Component) -> a
    75:77:void setPlayerPrefix(net.minecraft.network.chat.Component) -> b
    80:80:net.minecraft.network.chat.Component getPlayerPrefix() -> e
    84:86:void setPlayerSuffix(net.minecraft.network.chat.Component) -> c
    89:89:net.minecraft.network.chat.Component getPlayerSuffix() -> f
    94:94:java.util.Collection getPlayers() -> g
    99:106:net.minecraft.network.chat.Component getFormattedName(net.minecraft.network.chat.Component) -> d
    110:113:net.minecraft.network.chat.Component formatNameForTeam(net.minecraft.world.scores.Team,net.minecraft.network.chat.Component) -> a
    118:118:boolean isAllowFriendlyFire() -> h
    122:124:void setAllowFriendlyFire(boolean) -> a
    128:128:boolean canSeeFriendlyInvisibles() -> i
    132:134:void setSeeFriendlyInvisibles(boolean) -> b
    138:138:net.minecraft.world.scores.Team$Visibility getNameTagVisibility() -> j
    143:143:net.minecraft.world.scores.Team$Visibility getDeathMessageVisibility() -> k
    147:149:void setNameTagVisibility(net.minecraft.world.scores.Team$Visibility) -> a
    152:154:void setDeathMessageVisibility(net.minecraft.world.scores.Team$Visibility) -> b
    158:158:net.minecraft.world.scores.Team$CollisionRule getCollisionRule() -> l
    162:164:void setCollisionRule(net.minecraft.world.scores.Team$CollisionRule) -> a
    167:176:int packOptions() -> m
    180:182:void unpackOptions(int) -> a
    185:187:void setColor(net.minecraft.ChatFormatting) -> a
    191:191:net.minecraft.ChatFormatting getColor() -> n
    53:55:void lambda$getFormattedDisplayName$0(net.minecraft.network.chat.Style) -> a
net.minecraft.world.scores.Score -> cwk:
    java.util.Comparator SCORE_COMPARATOR -> a
    net.minecraft.world.scores.Scoreboard scoreboard -> b
    net.minecraft.world.scores.Objective objective -> c
    java.lang.String owner -> d
    int count -> e
    boolean locked -> f
    boolean forceUpdate -> g
    25:31:void <init>(net.minecraft.world.scores.Scoreboard,net.minecraft.world.scores.Objective,java.lang.String) -> <init>
    34:38:void add(int) -> a
    41:42:void remove(int) -> b
    45:46:void increment() -> a
    49:49:int getScore() -> b
    53:54:void reset() -> c
    57:63:void setScore(int) -> c
    67:67:net.minecraft.world.scores.Objective getObjective() -> d
    71:71:java.lang.String getOwner() -> e
    75:75:net.minecraft.world.scores.Scoreboard getScoreboard() -> f
    79:79:boolean isLocked() -> g
    83:84:void setLocked(boolean) -> a
    8:13:int lambda$static$0(net.minecraft.world.scores.Score,net.minecraft.world.scores.Score) -> a
    7:7:void <clinit>() -> <clinit>
net.minecraft.world.scores.Scoreboard -> cwl:
    java.util.Map objectivesByName -> a
    java.util.Map objectivesByCriteria -> b
    java.util.Map playerScores -> c
    net.minecraft.world.scores.Objective[] displayObjectives -> d
    java.util.Map teamsByName -> e
    java.util.Map teamsByPlayer -> f
    java.lang.String[] displaySlotNames -> g
    20:34:void <init>() -> <init>
    37:37:boolean hasObjective(java.lang.String) -> b
    41:41:net.minecraft.world.scores.Objective getOrCreateObjective(java.lang.String) -> c
    46:46:net.minecraft.world.scores.Objective getObjective(java.lang.String) -> d
    50:62:net.minecraft.world.scores.Objective addObjective(java.lang.String,net.minecraft.world.scores.criteria.ObjectiveCriteria,net.minecraft.network.chat.Component,net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType) -> a
    66:67:void forAllObjectives(net.minecraft.world.scores.criteria.ObjectiveCriteria,java.lang.String,java.util.function.Consumer) -> a
    70:75:boolean hasPlayerScore(java.lang.String,net.minecraft.world.scores.Objective) -> b
    79:84:net.minecraft.world.scores.Score getOrCreatePlayerScore(java.lang.String,net.minecraft.world.scores.Objective) -> c
    92:103:java.util.Collection getPlayerScores(net.minecraft.world.scores.Objective) -> i
    107:107:java.util.Collection getObjectives() -> c
    111:111:java.util.Collection getObjectiveNames() -> d
    115:115:java.util.Collection getTrackedPlayers() -> e
    119:138:void resetPlayerScore(java.lang.String,net.minecraft.world.scores.Objective) -> d
    141:145:java.util.Map getPlayerScores(java.lang.String) -> e
    149:167:void removeObjective(net.minecraft.world.scores.Objective) -> j
    170:171:void setDisplayObjective(int,net.minecraft.world.scores.Objective) -> a
    175:175:net.minecraft.world.scores.Objective getDisplayObjective(int) -> a
    179:179:net.minecraft.world.scores.PlayerTeam getPlayerTeam(java.lang.String) -> f
    183:195:net.minecraft.world.scores.PlayerTeam addPlayerTeam(java.lang.String) -> g
    199:208:void removePlayerTeam(net.minecraft.world.scores.PlayerTeam) -> d
    211:220:boolean addPlayerToTeam(java.lang.String,net.minecraft.world.scores.PlayerTeam) -> a
    224:230:boolean removePlayerFromTeam(java.lang.String) -> h
    235:241:void removePlayerFromTeam(java.lang.String,net.minecraft.world.scores.PlayerTeam) -> b
    244:244:java.util.Collection getTeamNames() -> f
    248:248:java.util.Collection getPlayerTeams() -> g
    253:253:net.minecraft.world.scores.PlayerTeam getPlayersTeam(java.lang.String) -> i
    257:257:void onObjectiveAdded(net.minecraft.world.scores.Objective) -> a
    260:260:void onObjectiveChanged(net.minecraft.world.scores.Objective) -> b
    263:263:void onObjectiveRemoved(net.minecraft.world.scores.Objective) -> c
    266:266:void onScoreChanged(net.minecraft.world.scores.Score) -> a
    269:269:void onPlayerRemoved(java.lang.String) -> a
    272:272:void onPlayerScoreRemoved(java.lang.String,net.minecraft.world.scores.Objective) -> a
    275:275:void onTeamAdded(net.minecraft.world.scores.PlayerTeam) -> a
    278:278:void onTeamChanged(net.minecraft.world.scores.PlayerTeam) -> b
    281:281:void onTeamRemoved(net.minecraft.world.scores.PlayerTeam) -> c
    284:298:java.lang.String getDisplaySlotName(int) -> b
    303:317:int getDisplaySlotByName(java.lang.String) -> j
    324:330:java.lang.String[] getDisplaySlotNames() -> h
    334:340:void entityRemoved(net.minecraft.world.entity.Entity) -> a
    343:356:net.minecraft.nbt.ListTag savePlayerScores() -> i
    360:375:void loadPlayerScores(net.minecraft.nbt.ListTag) -> a
    346:346:void lambda$savePlayerScores$6(net.minecraft.nbt.ListTag,java.util.Collection) -> a
    347:353:void lambda$null$5(net.minecraft.nbt.ListTag,net.minecraft.world.scores.Score) -> a
    346:346:boolean lambda$null$4(net.minecraft.world.scores.Score) -> b
    85:87:net.minecraft.world.scores.Score lambda$getOrCreatePlayerScore$3(java.lang.String,net.minecraft.world.scores.Objective) -> e
    82:82:java.util.Map lambda$getOrCreatePlayerScore$2(java.lang.String) -> k
    66:66:void lambda$forAllObjectives$1(java.util.function.Consumer,java.lang.String,net.minecraft.world.scores.Objective) -> a
    59:59:java.util.List lambda$addObjective$0(net.minecraft.world.scores.criteria.ObjectiveCriteria) -> a
net.minecraft.world.scores.ScoreboardSaveData -> cwm:
    org.apache.logging.log4j.Logger LOGGER -> a
    net.minecraft.world.scores.Scoreboard scoreboard -> b
    net.minecraft.nbt.CompoundTag delayLoad -> c
    24:25:void <init>() -> <init>
    28:33:void setScoreboard(net.minecraft.world.scores.Scoreboard) -> a
    37:52:void load(net.minecraft.nbt.CompoundTag) -> a
    55:110:void loadTeams(net.minecraft.nbt.ListTag) -> a
    113:116:void loadTeamPlayers(net.minecraft.world.scores.PlayerTeam,net.minecraft.nbt.ListTag) -> a
    119:126:void loadDisplaySlots(net.minecraft.nbt.CompoundTag) -> c
    129:142:void loadObjectives(net.minecraft.nbt.ListTag) -> b
    146:157:net.minecraft.nbt.CompoundTag save(net.minecraft.nbt.CompoundTag) -> b
    161:191:net.minecraft.nbt.ListTag saveTeams() -> a
    195:210:void saveDisplaySlots(net.minecraft.nbt.CompoundTag) -> d
    213:229:net.minecraft.nbt.ListTag saveObjectives() -> e
    132:140:void lambda$loadObjectives$0(net.minecraft.nbt.CompoundTag,net.minecraft.world.scores.criteria.ObjectiveCriteria) -> a
    17:17:void <clinit>() -> <clinit>
net.minecraft.world.scores.Team -> cwn:
    13:13:void <init>() -> <init>
    15:21:boolean isAlliedTo(net.minecraft.world.scores.Team) -> a
    java.lang.String getName() -> b
    net.minecraft.network.chat.Component getFormattedName(net.minecraft.network.chat.Component) -> d
    boolean canSeeFriendlyInvisibles() -> i
    boolean isAllowFriendlyFire() -> h
    net.minecraft.world.scores.Team$Visibility getNameTagVisibility() -> j
    net.minecraft.ChatFormatting getColor() -> n
    java.util.Collection getPlayers() -> g
    net.minecraft.world.scores.Team$Visibility getDeathMessageVisibility() -> k
    net.minecraft.world.scores.Team$CollisionRule getCollisionRule() -> l
net.minecraft.world.scores.Team$CollisionRule -> cwn$a:
    net.minecraft.world.scores.Team$CollisionRule ALWAYS -> a
    net.minecraft.world.scores.Team$CollisionRule NEVER -> b
    net.minecraft.world.scores.Team$CollisionRule PUSH_OTHER_TEAMS -> c
    net.minecraft.world.scores.Team$CollisionRule PUSH_OWN_TEAM -> d
    java.util.Map BY_NAME -> g
    java.lang.String name -> e
    int id -> f
    net.minecraft.world.scores.Team$CollisionRule[] $VALUES -> h
    72:72:net.minecraft.world.scores.Team$CollisionRule[] values() -> values
    72:72:net.minecraft.world.scores.Team$CollisionRule valueOf(java.lang.String) -> valueOf
    81:81:java.lang.String[] getAllNames() -> a
    86:86:net.minecraft.world.scores.Team$CollisionRule byName(java.lang.String) -> a
    92:95:void <init>(java.lang.String,int,java.lang.String,int) -> <init>
    98:98:net.minecraft.network.chat.Component getDisplayName() -> b
    78:78:net.minecraft.world.scores.Team$CollisionRule lambda$static$1(net.minecraft.world.scores.Team$CollisionRule) -> a
    78:78:java.lang.String lambda$static$0(net.minecraft.world.scores.Team$CollisionRule) -> b
    72:78:void <clinit>() -> <clinit>
net.minecraft.world.scores.Team$Visibility -> cwn$b:
    net.minecraft.world.scores.Team$Visibility ALWAYS -> a
    net.minecraft.world.scores.Team$Visibility NEVER -> b
    net.minecraft.world.scores.Team$Visibility HIDE_FOR_OTHER_TEAMS -> c
    net.minecraft.world.scores.Team$Visibility HIDE_FOR_OWN_TEAM -> d
    java.util.Map BY_NAME -> g
    java.lang.String name -> e
    int id -> f
    net.minecraft.world.scores.Team$Visibility[] $VALUES -> h
    42:42:net.minecraft.world.scores.Team$Visibility[] values() -> values
    42:42:net.minecraft.world.scores.Team$Visibility valueOf(java.lang.String) -> valueOf
    51:51:java.lang.String[] getAllNames() -> a
    56:56:net.minecraft.world.scores.Team$Visibility byName(java.lang.String) -> a
    62:65:void <init>(java.lang.String,int,java.lang.String,int) -> <init>
    68:68:net.minecraft.network.chat.Component getDisplayName() -> b
    48:48:net.minecraft.world.scores.Team$Visibility lambda$static$1(net.minecraft.world.scores.Team$Visibility) -> a
    48:48:java.lang.String lambda$static$0(net.minecraft.world.scores.Team$Visibility) -> b
    42:48:void <clinit>() -> <clinit>
net.minecraft.world.scores.criteria.ObjectiveCriteria -> cwo:
    java.util.Map CRITERIA_BY_NAME -> a
    net.minecraft.world.scores.criteria.ObjectiveCriteria DUMMY -> b
    net.minecraft.world.scores.criteria.ObjectiveCriteria TRIGGER -> c
    net.minecraft.world.scores.criteria.ObjectiveCriteria DEATH_COUNT -> d
    net.minecraft.world.scores.criteria.ObjectiveCriteria KILL_COUNT_PLAYERS -> e
    net.minecraft.world.scores.criteria.ObjectiveCriteria KILL_COUNT_ALL -> f
    net.minecraft.world.scores.criteria.ObjectiveCriteria HEALTH -> g
    net.minecraft.world.scores.criteria.ObjectiveCriteria FOOD -> h
    net.minecraft.world.scores.criteria.ObjectiveCriteria AIR -> i
    net.minecraft.world.scores.criteria.ObjectiveCriteria ARMOR -> j
    net.minecraft.world.scores.criteria.ObjectiveCriteria EXPERIENCE -> k
    net.minecraft.world.scores.criteria.ObjectiveCriteria LEVEL -> l
    net.minecraft.world.scores.criteria.ObjectiveCriteria[] TEAM_KILL -> m
    net.minecraft.world.scores.criteria.ObjectiveCriteria[] KILLED_BY_TEAM -> n
    java.lang.String name -> o
    boolean readOnly -> p
    net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType renderType -> q
    52:53:void <init>(java.lang.String) -> <init>
    55:60:void <init>(java.lang.String,boolean,net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType) -> <init>
    63:71:java.util.Optional byName(java.lang.String) -> a
    75:75:java.util.Optional getStat(net.minecraft.stats.StatType,net.minecraft.resources.ResourceLocation) -> a
    79:79:java.lang.String getName() -> c
    83:83:boolean isReadOnly() -> d
    87:87:net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType getDefaultRenderType() -> e
    71:71:java.util.Optional lambda$byName$0(java.lang.String,int,net.minecraft.stats.StatType) -> a
    14:44:void <clinit>() -> <clinit>
net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType -> cwo$a:
    net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType INTEGER -> a
    net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType HEARTS -> b
    java.lang.String id -> c
    java.util.Map BY_ID -> d
    net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType[] $VALUES -> e
    90:90:net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType[] values() -> values
    90:90:net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType valueOf(java.lang.String) -> valueOf
    97:99:void <init>(java.lang.String,int,java.lang.String) -> <init>
    102:102:java.lang.String getId() -> a
    116:116:net.minecraft.world.scores.criteria.ObjectiveCriteria$RenderType byId(java.lang.String) -> a
    90:113:void <clinit>() -> <clinit>
net.minecraft.world.scores.criteria.package-info -> cwp:
net.minecraft.world.scores.package-info -> cwq:
